
SAV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bc8  08000188  08000188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08008d50  08008d50  00010d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008ddc  08008ddc  00010ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08008de0  08008de0  00010de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000048  20000000  08008de4  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0001c200  20000048  20000048  00018048  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  2001c248  2001c248  00018048  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00018048  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000c596  00000000  00000000  00018078  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002278  00000000  00000000  0002460e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000328  00000000  00000000  00026888  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000044e7  00000000  00000000  00026bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004ab0  00000000  00000000  0002b097  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      00000082  00000000  00000000  0002fb47  2**0
                  CONTENTS, READONLY
 15 .debug_frame  00002f6c  00000000  00000000  0002fbcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000020  00000000  00000000  00032b38  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000048 	.word	0x20000048
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008d38 	.word	0x08008d38

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008d38 	.word	0x08008d38
 80001c4:	2000004c 	.word	0x2000004c

080001c8 <prvblinkTrafficLightCallback>:
#include "trafficLight.h"

/*********************************************************************************************
 * Timer callback to blink Traffic Light LED
 *********************************************************************************************/
void prvblinkTrafficLightCallback( TimerHandle_t pxTimer ) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]

	if( traffic_time > 0 ) {
 80001d0:	4b1a      	ldr	r3, [pc, #104]	; (800023c <prvblinkTrafficLightCallback+0x74>)
 80001d2:	881b      	ldrh	r3, [r3, #0]
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d01f      	beq.n	8000218 <prvblinkTrafficLightCallback+0x50>
		// If there is at least 0.4 seconds until the change, toggle the LED
		if( traffic_time % 400 == 0 ) {
 80001d8:	4b18      	ldr	r3, [pc, #96]	; (800023c <prvblinkTrafficLightCallback+0x74>)
 80001da:	881b      	ldrh	r3, [r3, #0]
 80001dc:	4a18      	ldr	r2, [pc, #96]	; (8000240 <prvblinkTrafficLightCallback+0x78>)
 80001de:	fba2 1203 	umull	r1, r2, r2, r3
 80001e2:	09d2      	lsrs	r2, r2, #7
 80001e4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80001e8:	fb01 f202 	mul.w	r2, r1, r2
 80001ec:	1a9b      	subs	r3, r3, r2
 80001ee:	b29b      	uxth	r3, r3
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d10a      	bne.n	800020a <prvblinkTrafficLightCallback+0x42>
			LED_LIGHT_PORT->ODR ^= led_light_pin[traffic_future_state];
 80001f4:	4b13      	ldr	r3, [pc, #76]	; (8000244 <prvblinkTrafficLightCallback+0x7c>)
 80001f6:	4a13      	ldr	r2, [pc, #76]	; (8000244 <prvblinkTrafficLightCallback+0x7c>)
 80001f8:	6951      	ldr	r1, [r2, #20]
 80001fa:	4a13      	ldr	r2, [pc, #76]	; (8000248 <prvblinkTrafficLightCallback+0x80>)
 80001fc:	7812      	ldrb	r2, [r2, #0]
 80001fe:	4610      	mov	r0, r2
 8000200:	4a12      	ldr	r2, [pc, #72]	; (800024c <prvblinkTrafficLightCallback+0x84>)
 8000202:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 8000206:	404a      	eors	r2, r1
 8000208:	615a      	str	r2, [r3, #20]
		}

		// Decrease elapsed time
		traffic_time = traffic_time - 100;
 800020a:	4b0c      	ldr	r3, [pc, #48]	; (800023c <prvblinkTrafficLightCallback+0x74>)
 800020c:	881b      	ldrh	r3, [r3, #0]
 800020e:	3b64      	subs	r3, #100	; 0x64
 8000210:	b29a      	uxth	r2, r3
 8000212:	4b0a      	ldr	r3, [pc, #40]	; (800023c <prvblinkTrafficLightCallback+0x74>)
 8000214:	801a      	strh	r2, [r3, #0]
 8000216:	e00e      	b.n	8000236 <prvblinkTrafficLightCallback+0x6e>
	} else {
		// Turn on the new state
		LED_LIGHT_PORT->OFF = LED_LIGHT_PINS;
 8000218:	4b0a      	ldr	r3, [pc, #40]	; (8000244 <prvblinkTrafficLightCallback+0x7c>)
 800021a:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800021e:	835a      	strh	r2, [r3, #26]
		LED_LIGHT_PORT->ON = led_light_pin[traffic_future_state];
 8000220:	4b08      	ldr	r3, [pc, #32]	; (8000244 <prvblinkTrafficLightCallback+0x7c>)
 8000222:	4a09      	ldr	r2, [pc, #36]	; (8000248 <prvblinkTrafficLightCallback+0x80>)
 8000224:	7812      	ldrb	r2, [r2, #0]
 8000226:	4611      	mov	r1, r2
 8000228:	4a08      	ldr	r2, [pc, #32]	; (800024c <prvblinkTrafficLightCallback+0x84>)
 800022a:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800022e:	831a      	strh	r2, [r3, #24]

		swTimerStop( pxTimer );
 8000230:	6878      	ldr	r0, [r7, #4]
 8000232:	f000 f973 	bl	800051c <swTimerStop>
	}
}
 8000236:	3708      	adds	r7, #8
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}
 800023c:	2001c22c 	.word	0x2001c22c
 8000240:	51eb851f 	.word	0x51eb851f
 8000244:	40020800 	.word	0x40020800
 8000248:	2001c1e4 	.word	0x2001c1e4
 800024c:	20000020 	.word	0x20000020

08000250 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000254:	4b15      	ldr	r3, [pc, #84]	; (80002ac <SystemInit+0x5c>)
 8000256:	4a15      	ldr	r2, [pc, #84]	; (80002ac <SystemInit+0x5c>)
 8000258:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800025c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000260:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000264:	4b12      	ldr	r3, [pc, #72]	; (80002b0 <SystemInit+0x60>)
 8000266:	4a12      	ldr	r2, [pc, #72]	; (80002b0 <SystemInit+0x60>)
 8000268:	6812      	ldr	r2, [r2, #0]
 800026a:	f042 0201 	orr.w	r2, r2, #1
 800026e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000270:	4b0f      	ldr	r3, [pc, #60]	; (80002b0 <SystemInit+0x60>)
 8000272:	2200      	movs	r2, #0
 8000274:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000276:	4a0e      	ldr	r2, [pc, #56]	; (80002b0 <SystemInit+0x60>)
 8000278:	4b0d      	ldr	r3, [pc, #52]	; (80002b0 <SystemInit+0x60>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000280:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000284:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000286:	4b0a      	ldr	r3, [pc, #40]	; (80002b0 <SystemInit+0x60>)
 8000288:	4a0a      	ldr	r2, [pc, #40]	; (80002b4 <SystemInit+0x64>)
 800028a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800028c:	4b08      	ldr	r3, [pc, #32]	; (80002b0 <SystemInit+0x60>)
 800028e:	4a08      	ldr	r2, [pc, #32]	; (80002b0 <SystemInit+0x60>)
 8000290:	6812      	ldr	r2, [r2, #0]
 8000292:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000296:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000298:	4b05      	ldr	r3, [pc, #20]	; (80002b0 <SystemInit+0x60>)
 800029a:	2200      	movs	r2, #0
 800029c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800029e:	f000 f887 	bl	80003b0 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80002a2:	4b02      	ldr	r3, [pc, #8]	; (80002ac <SystemInit+0x5c>)
 80002a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80002a8:	609a      	str	r2, [r3, #8]
#endif
}
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	e000ed00 	.word	0xe000ed00
 80002b0:	40023800 	.word	0x40023800
 80002b4:	24003010 	.word	0x24003010

080002b8 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b087      	sub	sp, #28
 80002bc:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80002be:	2300      	movs	r3, #0
 80002c0:	613b      	str	r3, [r7, #16]
 80002c2:	2300      	movs	r3, #0
 80002c4:	617b      	str	r3, [r7, #20]
 80002c6:	2302      	movs	r3, #2
 80002c8:	60fb      	str	r3, [r7, #12]
 80002ca:	2300      	movs	r3, #0
 80002cc:	60bb      	str	r3, [r7, #8]
 80002ce:	2302      	movs	r3, #2
 80002d0:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80002d2:	4b32      	ldr	r3, [pc, #200]	; (800039c <SystemCoreClockUpdate+0xe4>)
 80002d4:	689b      	ldr	r3, [r3, #8]
 80002d6:	f003 030c 	and.w	r3, r3, #12
 80002da:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80002dc:	693b      	ldr	r3, [r7, #16]
 80002de:	2b04      	cmp	r3, #4
 80002e0:	d007      	beq.n	80002f2 <SystemCoreClockUpdate+0x3a>
 80002e2:	2b08      	cmp	r3, #8
 80002e4:	d009      	beq.n	80002fa <SystemCoreClockUpdate+0x42>
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d13f      	bne.n	800036a <SystemCoreClockUpdate+0xb2>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80002ea:	4b2d      	ldr	r3, [pc, #180]	; (80003a0 <SystemCoreClockUpdate+0xe8>)
 80002ec:	4a2d      	ldr	r2, [pc, #180]	; (80003a4 <SystemCoreClockUpdate+0xec>)
 80002ee:	601a      	str	r2, [r3, #0]
      break;
 80002f0:	e03f      	b.n	8000372 <SystemCoreClockUpdate+0xba>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80002f2:	4b2b      	ldr	r3, [pc, #172]	; (80003a0 <SystemCoreClockUpdate+0xe8>)
 80002f4:	4a2c      	ldr	r2, [pc, #176]	; (80003a8 <SystemCoreClockUpdate+0xf0>)
 80002f6:	601a      	str	r2, [r3, #0]
      break;
 80002f8:	e03b      	b.n	8000372 <SystemCoreClockUpdate+0xba>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80002fa:	4b28      	ldr	r3, [pc, #160]	; (800039c <SystemCoreClockUpdate+0xe4>)
 80002fc:	685b      	ldr	r3, [r3, #4]
 80002fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000302:	0d9b      	lsrs	r3, r3, #22
 8000304:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000306:	4b25      	ldr	r3, [pc, #148]	; (800039c <SystemCoreClockUpdate+0xe4>)
 8000308:	685b      	ldr	r3, [r3, #4]
 800030a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800030e:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000310:	68bb      	ldr	r3, [r7, #8]
 8000312:	2b00      	cmp	r3, #0
 8000314:	d00d      	beq.n	8000332 <SystemCoreClockUpdate+0x7a>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000316:	4a24      	ldr	r2, [pc, #144]	; (80003a8 <SystemCoreClockUpdate+0xf0>)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	fbb2 f2f3 	udiv	r2, r2, r3
 800031e:	4b1f      	ldr	r3, [pc, #124]	; (800039c <SystemCoreClockUpdate+0xe4>)
 8000320:	6859      	ldr	r1, [r3, #4]
 8000322:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000326:	400b      	ands	r3, r1
 8000328:	099b      	lsrs	r3, r3, #6
 800032a:	fb03 f302 	mul.w	r3, r3, r2
 800032e:	617b      	str	r3, [r7, #20]
 8000330:	e00c      	b.n	800034c <SystemCoreClockUpdate+0x94>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000332:	4a1c      	ldr	r2, [pc, #112]	; (80003a4 <SystemCoreClockUpdate+0xec>)
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	fbb2 f2f3 	udiv	r2, r2, r3
 800033a:	4b18      	ldr	r3, [pc, #96]	; (800039c <SystemCoreClockUpdate+0xe4>)
 800033c:	6859      	ldr	r1, [r3, #4]
 800033e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000342:	400b      	ands	r3, r1
 8000344:	099b      	lsrs	r3, r3, #6
 8000346:	fb03 f302 	mul.w	r3, r3, r2
 800034a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800034c:	4b13      	ldr	r3, [pc, #76]	; (800039c <SystemCoreClockUpdate+0xe4>)
 800034e:	685b      	ldr	r3, [r3, #4]
 8000350:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000354:	0c1b      	lsrs	r3, r3, #16
 8000356:	3301      	adds	r3, #1
 8000358:	005b      	lsls	r3, r3, #1
 800035a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 800035c:	697a      	ldr	r2, [r7, #20]
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	fbb2 f2f3 	udiv	r2, r2, r3
 8000364:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <SystemCoreClockUpdate+0xe8>)
 8000366:	601a      	str	r2, [r3, #0]
      break;
 8000368:	e003      	b.n	8000372 <SystemCoreClockUpdate+0xba>
    default:
      SystemCoreClock = HSI_VALUE;
 800036a:	4b0d      	ldr	r3, [pc, #52]	; (80003a0 <SystemCoreClockUpdate+0xe8>)
 800036c:	4a0d      	ldr	r2, [pc, #52]	; (80003a4 <SystemCoreClockUpdate+0xec>)
 800036e:	601a      	str	r2, [r3, #0]
      break;
 8000370:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000372:	4b0a      	ldr	r3, [pc, #40]	; (800039c <SystemCoreClockUpdate+0xe4>)
 8000374:	689b      	ldr	r3, [r3, #8]
 8000376:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800037a:	091b      	lsrs	r3, r3, #4
 800037c:	4a0b      	ldr	r2, [pc, #44]	; (80003ac <SystemCoreClockUpdate+0xf4>)
 800037e:	5cd3      	ldrb	r3, [r2, r3]
 8000380:	b2db      	uxtb	r3, r3
 8000382:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000384:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <SystemCoreClockUpdate+0xe8>)
 8000386:	681a      	ldr	r2, [r3, #0]
 8000388:	693b      	ldr	r3, [r7, #16]
 800038a:	40da      	lsrs	r2, r3
 800038c:	4b04      	ldr	r3, [pc, #16]	; (80003a0 <SystemCoreClockUpdate+0xe8>)
 800038e:	601a      	str	r2, [r3, #0]
}
 8000390:	371c      	adds	r7, #28
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	40023800 	.word	0x40023800
 80003a0:	20000004 	.word	0x20000004
 80003a4:	00f42400 	.word	0x00f42400
 80003a8:	01312d00 	.word	0x01312d00
 80003ac:	20000008 	.word	0x20000008

080003b0 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80003b6:	2300      	movs	r3, #0
 80003b8:	607b      	str	r3, [r7, #4]
 80003ba:	2300      	movs	r3, #0
 80003bc:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80003be:	4b35      	ldr	r3, [pc, #212]	; (8000494 <SetSysClock+0xe4>)
 80003c0:	4a34      	ldr	r2, [pc, #208]	; (8000494 <SetSysClock+0xe4>)
 80003c2:	6812      	ldr	r2, [r2, #0]
 80003c4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80003c8:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80003ca:	4b32      	ldr	r3, [pc, #200]	; (8000494 <SetSysClock+0xe4>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003d2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	3301      	adds	r3, #1
 80003d8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80003da:	683b      	ldr	r3, [r7, #0]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d103      	bne.n	80003e8 <SetSysClock+0x38>
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80003e6:	d1f0      	bne.n	80003ca <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80003e8:	4b2a      	ldr	r3, [pc, #168]	; (8000494 <SetSysClock+0xe4>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d002      	beq.n	80003fa <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80003f4:	2301      	movs	r3, #1
 80003f6:	603b      	str	r3, [r7, #0]
 80003f8:	e001      	b.n	80003fe <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80003fa:	2300      	movs	r3, #0
 80003fc:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80003fe:	683b      	ldr	r3, [r7, #0]
 8000400:	2b01      	cmp	r3, #1
 8000402:	d142      	bne.n	800048a <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000404:	4b23      	ldr	r3, [pc, #140]	; (8000494 <SetSysClock+0xe4>)
 8000406:	4a23      	ldr	r2, [pc, #140]	; (8000494 <SetSysClock+0xe4>)
 8000408:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800040a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800040e:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000410:	4b21      	ldr	r3, [pc, #132]	; (8000498 <SetSysClock+0xe8>)
 8000412:	4a21      	ldr	r2, [pc, #132]	; (8000498 <SetSysClock+0xe8>)
 8000414:	6812      	ldr	r2, [r2, #0]
 8000416:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800041a:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800041c:	4b1d      	ldr	r3, [pc, #116]	; (8000494 <SetSysClock+0xe4>)
 800041e:	4a1d      	ldr	r2, [pc, #116]	; (8000494 <SetSysClock+0xe4>)
 8000420:	6892      	ldr	r2, [r2, #8]
 8000422:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000424:	4b1b      	ldr	r3, [pc, #108]	; (8000494 <SetSysClock+0xe4>)
 8000426:	4a1b      	ldr	r2, [pc, #108]	; (8000494 <SetSysClock+0xe4>)
 8000428:	6892      	ldr	r2, [r2, #8]
 800042a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800042e:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000430:	4b18      	ldr	r3, [pc, #96]	; (8000494 <SetSysClock+0xe4>)
 8000432:	4a18      	ldr	r2, [pc, #96]	; (8000494 <SetSysClock+0xe4>)
 8000434:	6892      	ldr	r2, [r2, #8]
 8000436:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 800043a:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800043c:	4b15      	ldr	r3, [pc, #84]	; (8000494 <SetSysClock+0xe4>)
 800043e:	4a17      	ldr	r2, [pc, #92]	; (800049c <SetSysClock+0xec>)
 8000440:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000442:	4b14      	ldr	r3, [pc, #80]	; (8000494 <SetSysClock+0xe4>)
 8000444:	4a13      	ldr	r2, [pc, #76]	; (8000494 <SetSysClock+0xe4>)
 8000446:	6812      	ldr	r2, [r2, #0]
 8000448:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800044c:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800044e:	bf00      	nop
 8000450:	4b10      	ldr	r3, [pc, #64]	; (8000494 <SetSysClock+0xe4>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000458:	2b00      	cmp	r3, #0
 800045a:	d0f9      	beq.n	8000450 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800045c:	4b10      	ldr	r3, [pc, #64]	; (80004a0 <SetSysClock+0xf0>)
 800045e:	f240 7205 	movw	r2, #1797	; 0x705
 8000462:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000464:	4b0b      	ldr	r3, [pc, #44]	; (8000494 <SetSysClock+0xe4>)
 8000466:	4a0b      	ldr	r2, [pc, #44]	; (8000494 <SetSysClock+0xe4>)
 8000468:	6892      	ldr	r2, [r2, #8]
 800046a:	f022 0203 	bic.w	r2, r2, #3
 800046e:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000470:	4b08      	ldr	r3, [pc, #32]	; (8000494 <SetSysClock+0xe4>)
 8000472:	4a08      	ldr	r2, [pc, #32]	; (8000494 <SetSysClock+0xe4>)
 8000474:	6892      	ldr	r2, [r2, #8]
 8000476:	f042 0202 	orr.w	r2, r2, #2
 800047a:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800047c:	bf00      	nop
 800047e:	4b05      	ldr	r3, [pc, #20]	; (8000494 <SetSysClock+0xe4>)
 8000480:	689b      	ldr	r3, [r3, #8]
 8000482:	f003 030c 	and.w	r3, r3, #12
 8000486:	2b08      	cmp	r3, #8
 8000488:	d1f9      	bne.n	800047e <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800048a:	370c      	adds	r7, #12
 800048c:	46bd      	mov	sp, r7
 800048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000492:	4770      	bx	lr
 8000494:	40023800 	.word	0x40023800
 8000498:	40007000 	.word	0x40007000
 800049c:	07405414 	.word	0x07405414
 80004a0:	40023c00 	.word	0x40023c00

080004a4 <swTimerInit>:
 * Initialize SW Timer
 *		* timerPeriod: 			Period before timer goes off
 *   	* repeat:				Should timer be reset after it expires
 *    	* pxCallbackFunction: 	Function called when timer expires
 *********************************************************************************************/
TimerHandle_t swTimerInit( uint16_t timer_period, UBaseType_t repeat, TimerCallbackFunction_t pxCallbackFunction ) {
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b088      	sub	sp, #32
 80004a8:	af02      	add	r7, sp, #8
 80004aa:	4603      	mov	r3, r0
 80004ac:	60b9      	str	r1, [r7, #8]
 80004ae:	607a      	str	r2, [r7, #4]
 80004b0:	81fb      	strh	r3, [r7, #14]

	// Convert period in milliseconds to tick counts
	TickType_t timer_tick = timer_period * ( 1 / portTICK_PERIOD_MS);
 80004b2:	89fb      	ldrh	r3, [r7, #14]
 80004b4:	617b      	str	r3, [r7, #20]

	// Create timer
	// Note that pvTimerID is set to NULL so that if the same callback function is assigned to more than one timer it can't tell between them
	TimerHandle_t handle = xTimerCreate("", timer_tick, repeat, NULL, pxCallbackFunction);
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	9300      	str	r3, [sp, #0]
 80004ba:	4806      	ldr	r0, [pc, #24]	; (80004d4 <swTimerInit+0x30>)
 80004bc:	6979      	ldr	r1, [r7, #20]
 80004be:	68ba      	ldr	r2, [r7, #8]
 80004c0:	2300      	movs	r3, #0
 80004c2:	f005 fb79 	bl	8005bb8 <xTimerCreate>
 80004c6:	6138      	str	r0, [r7, #16]

	return handle;
 80004c8:	693b      	ldr	r3, [r7, #16]
}
 80004ca:	4618      	mov	r0, r3
 80004cc:	3718      	adds	r7, #24
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	08008d50 	.word	0x08008d50

080004d8 <swTimerStart>:
/*********************************************************************************************
 * Start SW Timer
 * 		* handle:				Pointer to the timer created using swTimerInit
 * 		* timeWait:				Blocking time until timer starts (can be set to 0)
 *********************************************************************************************/
uint8_t swTimerStart( TimerHandle_t handle, uint8_t timeWait ) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b086      	sub	sp, #24
 80004dc:	af02      	add	r7, sp, #8
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	460b      	mov	r3, r1
 80004e2:	70fb      	strb	r3, [r7, #3]

	// If handle is NULL, timer was never properly created
	if( handle == NULL ) {
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d101      	bne.n	80004ee <swTimerStart+0x16>
		return FAILURE;
 80004ea:	2300      	movs	r3, #0
 80004ec:	e012      	b.n	8000514 <swTimerStart+0x3c>
	}

	// Convert period in milliseconds to wait to tick counts
	TickType_t tickWait = timeWait * (1 / portTICK_PERIOD_MS);
 80004ee:	78fb      	ldrb	r3, [r7, #3]
 80004f0:	60fb      	str	r3, [r7, #12]
	if( xTimerStart(handle, tickWait) != pdPASS ) {
 80004f2:	f006 fadf 	bl	8006ab4 <xTaskGetTickCount>
 80004f6:	4603      	mov	r3, r0
 80004f8:	68fa      	ldr	r2, [r7, #12]
 80004fa:	9200      	str	r2, [sp, #0]
 80004fc:	6878      	ldr	r0, [r7, #4]
 80004fe:	2101      	movs	r1, #1
 8000500:	461a      	mov	r2, r3
 8000502:	2300      	movs	r3, #0
 8000504:	f005 fb88 	bl	8005c18 <xTimerGenericCommand>
 8000508:	4603      	mov	r3, r0
 800050a:	2b01      	cmp	r3, #1
 800050c:	d001      	beq.n	8000512 <swTimerStart+0x3a>
		return FAILURE;
 800050e:	2300      	movs	r3, #0
 8000510:	e000      	b.n	8000514 <swTimerStart+0x3c>
	}

	return SUCCESS;
 8000512:	2301      	movs	r3, #1
}
 8000514:	4618      	mov	r0, r3
 8000516:	3710      	adds	r7, #16
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}

0800051c <swTimerStop>:

/*********************************************************************************************
 * Stop SW Timer
 * 		* handle:				Pointer to the timer created using swTimerInit
 *********************************************************************************************/
uint8_t swTimerStop( TimerHandle_t handle ) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af02      	add	r7, sp, #8
 8000522:	6078      	str	r0, [r7, #4]

	// If handle is NULL, timer was never properly created
	if( handle == NULL ) {
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d101      	bne.n	800052e <swTimerStop+0x12>
		return FAILURE;
 800052a:	2300      	movs	r3, #0
 800052c:	e00d      	b.n	800054a <swTimerStop+0x2e>
	}

	if( xTimerStop(handle, 0) != pdPASS ) {
 800052e:	2300      	movs	r3, #0
 8000530:	9300      	str	r3, [sp, #0]
 8000532:	6878      	ldr	r0, [r7, #4]
 8000534:	2103      	movs	r1, #3
 8000536:	2200      	movs	r2, #0
 8000538:	2300      	movs	r3, #0
 800053a:	f005 fb6d 	bl	8005c18 <xTimerGenericCommand>
 800053e:	4603      	mov	r3, r0
 8000540:	2b01      	cmp	r3, #1
 8000542:	d001      	beq.n	8000548 <swTimerStop+0x2c>
		return FAILURE;
 8000544:	2300      	movs	r3, #0
 8000546:	e000      	b.n	800054a <swTimerStop+0x2e>
	}

	return SUCCESS;
 8000548:	2301      	movs	r3, #1
}
 800054a:	4618      	mov	r0, r3
 800054c:	3708      	adds	r7, #8
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop

08000554 <swIsTimerActive>:

/*********************************************************************************************
 * Check if SW Timer is active
 * 		* handle:				Pointer to the timer created using swTimerInit
 *********************************************************************************************/
uint8_t swIsTimerActive( TimerHandle_t handle ) {
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]

	if( xTimerIsTimerActive( handle ) != pdPASS ) {
 800055c:	6878      	ldr	r0, [r7, #4]
 800055e:	f005 fdad 	bl	80060bc <xTimerIsTimerActive>
 8000562:	4603      	mov	r3, r0
 8000564:	2b01      	cmp	r3, #1
 8000566:	d001      	beq.n	800056c <swIsTimerActive+0x18>
		return FAILURE;
 8000568:	2300      	movs	r3, #0
 800056a:	e000      	b.n	800056e <swIsTimerActive+0x1a>
	}

	return SUCCESS;
 800056c:	2301      	movs	r3, #1
}
 800056e:	4618      	mov	r0, r3
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop

08000578 <prvDelayCallback>:


/*********************************************************************************************
 * Local timer callback function
 *********************************************************************************************/
void prvDelayCallback( TimerHandle_t pxTimer ) {
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	delay_done = TRUE;
 8000580:	4b03      	ldr	r3, [pc, #12]	; (8000590 <prvDelayCallback+0x18>)
 8000582:	2201      	movs	r2, #1
 8000584:	701a      	strb	r2, [r3, #0]
}
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr
 8000590:	2001c1f2 	.word	0x2001c1f2

08000594 <swDelay>:


/*********************************************************************************************
 * Delay for given amount of time (in ms)
 *********************************************************************************************/
uint8_t swDelay( uint16_t delay_time ) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	80fb      	strh	r3, [r7, #6]

	// Set global false
	delay_done = FALSE;
 800059e:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <swDelay+0x44>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	701a      	strb	r2, [r3, #0]

	// Create and start local swTimer
	TimerHandle_t delay = swTimerInit( delay_time, NO_REPEAT, prvDelayCallback );
 80005a4:	88fb      	ldrh	r3, [r7, #6]
 80005a6:	4618      	mov	r0, r3
 80005a8:	2100      	movs	r1, #0
 80005aa:	4a0c      	ldr	r2, [pc, #48]	; (80005dc <swDelay+0x48>)
 80005ac:	f7ff ff7a 	bl	80004a4 <swTimerInit>
 80005b0:	60f8      	str	r0, [r7, #12]
	if( !swTimerStart( delay, 0 ) ) {
 80005b2:	68f8      	ldr	r0, [r7, #12]
 80005b4:	2100      	movs	r1, #0
 80005b6:	f7ff ff8f 	bl	80004d8 <swTimerStart>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d101      	bne.n	80005c4 <swDelay+0x30>
		return FAILURE;
 80005c0:	2300      	movs	r3, #0
 80005c2:	e005      	b.n	80005d0 <swDelay+0x3c>
	}

	// Wait until timer completes
	while( !delay_done );
 80005c4:	bf00      	nop
 80005c6:	4b04      	ldr	r3, [pc, #16]	; (80005d8 <swDelay+0x44>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d0fb      	beq.n	80005c6 <swDelay+0x32>

	return SUCCESS;
 80005ce:	2301      	movs	r3, #1
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	2001c1f2 	.word	0x2001c1f2
 80005dc:	08000579 	.word	0x08000579

080005e0 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
}
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr

080005ec <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 80005f0:	e7fe      	b.n	80005f0 <HardFault_Handler+0x4>
 80005f2:	bf00      	nop

080005f4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 80005f8:	e7fe      	b.n	80005f8 <MemManage_Handler+0x4>
 80005fa:	bf00      	nop

080005fc <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000600:	e7fe      	b.n	8000600 <BusFault_Handler+0x4>
 8000602:	bf00      	nop

08000604 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000608:	e7fe      	b.n	8000608 <UsageFault_Handler+0x4>
 800060a:	bf00      	nop

0800060c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
}
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr

08000618 <prvReadPowerCallback>:


/*********************************************************************************************
 * Timer callback to read power measurement
 *********************************************************************************************/
void prvReadPowerCallback( TimerHandle_t pxTimer ) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]

	// Increment time based on the value the timer delays
	power_time += 5;
 8000620:	4b28      	ldr	r3, [pc, #160]	; (80006c4 <prvReadPowerCallback+0xac>)
 8000622:	881b      	ldrh	r3, [r3, #0]
 8000624:	3305      	adds	r3, #5
 8000626:	b29a      	uxth	r2, r3
 8000628:	4b26      	ldr	r3, [pc, #152]	; (80006c4 <prvReadPowerCallback+0xac>)
 800062a:	801a      	strh	r2, [r3, #0]

	// Read ADC pin
	ADC_RegularChannelConfig( MEASURED_POWER_ADC, MEASURED_POWER_CHANNEL, 1, ADC_SampleTime_15Cycles );
 800062c:	4826      	ldr	r0, [pc, #152]	; (80006c8 <prvReadPowerCallback+0xb0>)
 800062e:	210d      	movs	r1, #13
 8000630:	2201      	movs	r2, #1
 8000632:	2301      	movs	r3, #1
 8000634:	f004 fe02 	bl	800523c <ADC_RegularChannelConfig>
	ADC_SoftwareStartConv( MEASURED_POWER_ADC );
 8000638:	4823      	ldr	r0, [pc, #140]	; (80006c8 <prvReadPowerCallback+0xb0>)
 800063a:	f004 fec3 	bl	80053c4 <ADC_SoftwareStartConv>
	while( ADC_GetFlagStatus(MEASURED_POWER_ADC, ADC_FLAG_EOC) == RESET );
 800063e:	bf00      	nop
 8000640:	4821      	ldr	r0, [pc, #132]	; (80006c8 <prvReadPowerCallback+0xb0>)
 8000642:	2102      	movs	r1, #2
 8000644:	f005 f962 	bl	800590c <ADC_GetFlagStatus>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d0f8      	beq.n	8000640 <prvReadPowerCallback+0x28>
	uint32_t current_power = (uint32_t) ADC_GetConversionValue( MEASURED_POWER_ADC );
 800064e:	481e      	ldr	r0, [pc, #120]	; (80006c8 <prvReadPowerCallback+0xb0>)
 8000650:	f004 ff56 	bl	8005500 <ADC_GetConversionValue>
 8000654:	4603      	mov	r3, r0
 8000656:	617b      	str	r3, [r7, #20]

	// Add to total power value
	power_total += current_power;
 8000658:	4b1c      	ldr	r3, [pc, #112]	; (80006cc <prvReadPowerCallback+0xb4>)
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	441a      	add	r2, r3
 8000660:	4b1a      	ldr	r3, [pc, #104]	; (80006cc <prvReadPowerCallback+0xb4>)
 8000662:	601a      	str	r2, [r3, #0]

	// Send back packet every 30 seconds
	if( power_time % 6 == 0 ) {
 8000664:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <prvReadPowerCallback+0xac>)
 8000666:	881a      	ldrh	r2, [r3, #0]
 8000668:	4b19      	ldr	r3, [pc, #100]	; (80006d0 <prvReadPowerCallback+0xb8>)
 800066a:	fba3 1302 	umull	r1, r3, r3, r2
 800066e:	0899      	lsrs	r1, r3, #2
 8000670:	460b      	mov	r3, r1
 8000672:	005b      	lsls	r3, r3, #1
 8000674:	440b      	add	r3, r1
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	1ad3      	subs	r3, r2, r3
 800067a:	b29b      	uxth	r3, r3
 800067c:	2b00      	cmp	r3, #0
 800067e:	d11e      	bne.n	80006be <prvReadPowerCallback+0xa6>

		// Create header
		Header* header = pvPortMalloc( sizeof(Header) );
 8000680:	2005      	movs	r0, #5
 8000682:	f008 f93d 	bl	8008900 <pvPortMalloc>
 8000686:	6138      	str	r0, [r7, #16]
		header->dest = baseStation;
 8000688:	693b      	ldr	r3, [r7, #16]
 800068a:	2202      	movs	r2, #2
 800068c:	701a      	strb	r2, [r3, #0]
		header->addr = MY_ADDR;
 800068e:	693b      	ldr	r3, [r7, #16]
 8000690:	2201      	movs	r2, #1
 8000692:	705a      	strb	r2, [r3, #1]
		header->mode = allModes;
 8000694:	693b      	ldr	r3, [r7, #16]
 8000696:	2200      	movs	r2, #0
 8000698:	709a      	strb	r2, [r3, #2]
		header->type = powerConsumption;
 800069a:	693b      	ldr	r3, [r7, #16]
 800069c:	2206      	movs	r2, #6
 800069e:	70da      	strb	r2, [r3, #3]

		// Convert total power to average power
		uint16_t average_power = (uint16_t) (power_total/power_time);
 80006a0:	4b0a      	ldr	r3, [pc, #40]	; (80006cc <prvReadPowerCallback+0xb4>)
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <prvReadPowerCallback+0xac>)
 80006a6:	881b      	ldrh	r3, [r3, #0]
 80006a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ac:	81fb      	strh	r3, [r7, #14]

		// Send packet
		sendPowerConsumption( header, average_power, power_time );
 80006ae:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <prvReadPowerCallback+0xac>)
 80006b0:	881b      	ldrh	r3, [r3, #0]
 80006b2:	89fa      	ldrh	r2, [r7, #14]
 80006b4:	6938      	ldr	r0, [r7, #16]
 80006b6:	4611      	mov	r1, r2
 80006b8:	461a      	mov	r2, r3
 80006ba:	f000 f9ad 	bl	8000a18 <sendPowerConsumption>
	}
}
 80006be:	3718      	adds	r7, #24
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	2001c1f0 	.word	0x2001c1f0
 80006c8:	40012000 	.word	0x40012000
 80006cc:	2001c1e0 	.word	0x2001c1e0
 80006d0:	aaaaaaab 	.word	0xaaaaaaab

080006d4 <prvReadPhotoCallback>:


/*********************************************************************************************
 * Timer callback to read photo resistors
 *********************************************************************************************/
void prvReadPhotoCallback( TimerHandle_t pxTimer ) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	static uint16_t photo2;
	static uint16_t photo3;
	static uint16_t photo_average;

	// Read photo1
	ADC_RegularChannelConfig( PHOTO_ADC, PHOTO_1_CHANNEL, 1, ADC_SampleTime_15Cycles );
 80006dc:	484c      	ldr	r0, [pc, #304]	; (8000810 <prvReadPhotoCallback+0x13c>)
 80006de:	210a      	movs	r1, #10
 80006e0:	2201      	movs	r2, #1
 80006e2:	2301      	movs	r3, #1
 80006e4:	f004 fdaa 	bl	800523c <ADC_RegularChannelConfig>
	ADC_SoftwareStartConv( PHOTO_ADC );
 80006e8:	4849      	ldr	r0, [pc, #292]	; (8000810 <prvReadPhotoCallback+0x13c>)
 80006ea:	f004 fe6b 	bl	80053c4 <ADC_SoftwareStartConv>
	while( ADC_GetFlagStatus(PHOTO_ADC, ADC_FLAG_EOC) == RESET );
 80006ee:	bf00      	nop
 80006f0:	4847      	ldr	r0, [pc, #284]	; (8000810 <prvReadPhotoCallback+0x13c>)
 80006f2:	2102      	movs	r1, #2
 80006f4:	f005 f90a 	bl	800590c <ADC_GetFlagStatus>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d0f8      	beq.n	80006f0 <prvReadPhotoCallback+0x1c>
	photo1 = ADC_GetConversionValue( PHOTO_ADC );
 80006fe:	4844      	ldr	r0, [pc, #272]	; (8000810 <prvReadPhotoCallback+0x13c>)
 8000700:	f004 fefe 	bl	8005500 <ADC_GetConversionValue>
 8000704:	4603      	mov	r3, r0
 8000706:	461a      	mov	r2, r3
 8000708:	4b42      	ldr	r3, [pc, #264]	; (8000814 <prvReadPhotoCallback+0x140>)
 800070a:	801a      	strh	r2, [r3, #0]

	// Read photo2
	ADC_RegularChannelConfig( PHOTO_ADC, PHOTO_2_CHANNEL, 1, ADC_SampleTime_15Cycles );
 800070c:	4840      	ldr	r0, [pc, #256]	; (8000810 <prvReadPhotoCallback+0x13c>)
 800070e:	210b      	movs	r1, #11
 8000710:	2201      	movs	r2, #1
 8000712:	2301      	movs	r3, #1
 8000714:	f004 fd92 	bl	800523c <ADC_RegularChannelConfig>
	ADC_SoftwareStartConv( PHOTO_ADC );
 8000718:	483d      	ldr	r0, [pc, #244]	; (8000810 <prvReadPhotoCallback+0x13c>)
 800071a:	f004 fe53 	bl	80053c4 <ADC_SoftwareStartConv>
	while( ADC_GetFlagStatus(PHOTO_ADC, ADC_FLAG_EOC) == RESET );
 800071e:	bf00      	nop
 8000720:	483b      	ldr	r0, [pc, #236]	; (8000810 <prvReadPhotoCallback+0x13c>)
 8000722:	2102      	movs	r1, #2
 8000724:	f005 f8f2 	bl	800590c <ADC_GetFlagStatus>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d0f8      	beq.n	8000720 <prvReadPhotoCallback+0x4c>
	photo2 = ADC_GetConversionValue( PHOTO_ADC );
 800072e:	4838      	ldr	r0, [pc, #224]	; (8000810 <prvReadPhotoCallback+0x13c>)
 8000730:	f004 fee6 	bl	8005500 <ADC_GetConversionValue>
 8000734:	4603      	mov	r3, r0
 8000736:	461a      	mov	r2, r3
 8000738:	4b37      	ldr	r3, [pc, #220]	; (8000818 <prvReadPhotoCallback+0x144>)
 800073a:	801a      	strh	r2, [r3, #0]

	// Read photo3
	ADC_RegularChannelConfig( PHOTO_ADC, PHOTO_3_CHANNEL, 1, ADC_SampleTime_15Cycles );
 800073c:	4834      	ldr	r0, [pc, #208]	; (8000810 <prvReadPhotoCallback+0x13c>)
 800073e:	210c      	movs	r1, #12
 8000740:	2201      	movs	r2, #1
 8000742:	2301      	movs	r3, #1
 8000744:	f004 fd7a 	bl	800523c <ADC_RegularChannelConfig>
	ADC_SoftwareStartConv( PHOTO_ADC );
 8000748:	4831      	ldr	r0, [pc, #196]	; (8000810 <prvReadPhotoCallback+0x13c>)
 800074a:	f004 fe3b 	bl	80053c4 <ADC_SoftwareStartConv>
	while( ADC_GetFlagStatus(PHOTO_ADC, ADC_FLAG_EOC) == RESET );
 800074e:	bf00      	nop
 8000750:	482f      	ldr	r0, [pc, #188]	; (8000810 <prvReadPhotoCallback+0x13c>)
 8000752:	2102      	movs	r1, #2
 8000754:	f005 f8da 	bl	800590c <ADC_GetFlagStatus>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d0f8      	beq.n	8000750 <prvReadPhotoCallback+0x7c>
	photo3 = ADC_GetConversionValue( PHOTO_ADC );
 800075e:	482c      	ldr	r0, [pc, #176]	; (8000810 <prvReadPhotoCallback+0x13c>)
 8000760:	f004 fece 	bl	8005500 <ADC_GetConversionValue>
 8000764:	4603      	mov	r3, r0
 8000766:	461a      	mov	r2, r3
 8000768:	4b2c      	ldr	r3, [pc, #176]	; (800081c <prvReadPhotoCallback+0x148>)
 800076a:	801a      	strh	r2, [r3, #0]

	// Average values
	photo_average = (photo1 + photo2 + photo3)/3;
 800076c:	4b29      	ldr	r3, [pc, #164]	; (8000814 <prvReadPhotoCallback+0x140>)
 800076e:	881b      	ldrh	r3, [r3, #0]
 8000770:	461a      	mov	r2, r3
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <prvReadPhotoCallback+0x144>)
 8000774:	881b      	ldrh	r3, [r3, #0]
 8000776:	441a      	add	r2, r3
 8000778:	4b28      	ldr	r3, [pc, #160]	; (800081c <prvReadPhotoCallback+0x148>)
 800077a:	881b      	ldrh	r3, [r3, #0]
 800077c:	4413      	add	r3, r2
 800077e:	4a28      	ldr	r2, [pc, #160]	; (8000820 <prvReadPhotoCallback+0x14c>)
 8000780:	fb82 1203 	smull	r1, r2, r2, r3
 8000784:	17db      	asrs	r3, r3, #31
 8000786:	1ad3      	subs	r3, r2, r3
 8000788:	b29a      	uxth	r2, r3
 800078a:	4b26      	ldr	r3, [pc, #152]	; (8000824 <prvReadPhotoCallback+0x150>)
 800078c:	801a      	strh	r2, [r3, #0]

	// Check if over a black line
	if( (photo_average > 1800) && (photo_previous_line == white) ) {
 800078e:	4b25      	ldr	r3, [pc, #148]	; (8000824 <prvReadPhotoCallback+0x150>)
 8000790:	881b      	ldrh	r3, [r3, #0]
 8000792:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8000796:	d90d      	bls.n	80007b4 <prvReadPhotoCallback+0xe0>
 8000798:	4b23      	ldr	r3, [pc, #140]	; (8000828 <prvReadPhotoCallback+0x154>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b01      	cmp	r3, #1
 800079e:	d109      	bne.n	80007b4 <prvReadPhotoCallback+0xe0>
		photo_previous_line = black;
 80007a0:	4b21      	ldr	r3, [pc, #132]	; (8000828 <prvReadPhotoCallback+0x154>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	701a      	strb	r2, [r3, #0]
		photo_counter += 1;
 80007a6:	4b21      	ldr	r3, [pc, #132]	; (800082c <prvReadPhotoCallback+0x158>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	3301      	adds	r3, #1
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	4b1f      	ldr	r3, [pc, #124]	; (800082c <prvReadPhotoCallback+0x158>)
 80007b0:	701a      	strb	r2, [r3, #0]
 80007b2:	e011      	b.n	80007d8 <prvReadPhotoCallback+0x104>
	} else if( (photo_average <= 1800) && (photo_previous_line == black) ) {
 80007b4:	4b1b      	ldr	r3, [pc, #108]	; (8000824 <prvReadPhotoCallback+0x150>)
 80007b6:	881b      	ldrh	r3, [r3, #0]
 80007b8:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80007bc:	d80c      	bhi.n	80007d8 <prvReadPhotoCallback+0x104>
 80007be:	4b1a      	ldr	r3, [pc, #104]	; (8000828 <prvReadPhotoCallback+0x154>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d108      	bne.n	80007d8 <prvReadPhotoCallback+0x104>
		photo_previous_line = white;
 80007c6:	4b18      	ldr	r3, [pc, #96]	; (8000828 <prvReadPhotoCallback+0x154>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	701a      	strb	r2, [r3, #0]
		photo_counter += 1;
 80007cc:	4b17      	ldr	r3, [pc, #92]	; (800082c <prvReadPhotoCallback+0x158>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	3301      	adds	r3, #1
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	4b15      	ldr	r3, [pc, #84]	; (800082c <prvReadPhotoCallback+0x158>)
 80007d6:	701a      	strb	r2, [r3, #0]
	}

	if( photo_counter >= 5 ) {
 80007d8:	4b14      	ldr	r3, [pc, #80]	; (800082c <prvReadPhotoCallback+0x158>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b04      	cmp	r3, #4
 80007de:	d913      	bls.n	8000808 <prvReadPhotoCallback+0x134>
		// TODO: Change the direction (NS -> EW, EW -> NS) and indicate that it has entered / left the intersection
		if( photo_intersection == TRUE ) {
 80007e0:	4b13      	ldr	r3, [pc, #76]	; (8000830 <prvReadPhotoCallback+0x15c>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d103      	bne.n	80007f0 <prvReadPhotoCallback+0x11c>
			// Leaving the intersection
			photo_intersection = FALSE;
 80007e8:	4b11      	ldr	r3, [pc, #68]	; (8000830 <prvReadPhotoCallback+0x15c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	701a      	strb	r2, [r3, #0]
 80007ee:	e008      	b.n	8000802 <prvReadPhotoCallback+0x12e>
		} else {
			// Entering intersection
			photo_intersection = TRUE;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <prvReadPhotoCallback+0x15c>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	701a      	strb	r2, [r3, #0]

			// Update direction SAV is traveling
			photo_direction = next_direction[photo_direction];
 80007f6:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <prvReadPhotoCallback+0x160>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	4a0f      	ldr	r2, [pc, #60]	; (8000838 <prvReadPhotoCallback+0x164>)
 80007fc:	5cd2      	ldrb	r2, [r2, r3]
 80007fe:	4b0d      	ldr	r3, [pc, #52]	; (8000834 <prvReadPhotoCallback+0x160>)
 8000800:	701a      	strb	r2, [r3, #0]
		}

		// Reset the counter
		photo_counter = 0;
 8000802:	4b0a      	ldr	r3, [pc, #40]	; (800082c <prvReadPhotoCallback+0x158>)
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
	}
}
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40012000 	.word	0x40012000
 8000814:	20000068 	.word	0x20000068
 8000818:	2000006a 	.word	0x2000006a
 800081c:	2000006c 	.word	0x2000006c
 8000820:	55555556 	.word	0x55555556
 8000824:	2000006e 	.word	0x2000006e
 8000828:	20000018 	.word	0x20000018
 800082c:	20000064 	.word	0x20000064
 8000830:	20000065 	.word	0x20000065
 8000834:	20000066 	.word	0x20000066
 8000838:	2000001c 	.word	0x2000001c

0800083c <sendPacket>:
 * %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */

/*********************************************************************************************
 * Base function to send all packets (or strings to setup WiFi module)
 *********************************************************************************************/
uint8_t sendPacket( char* packet, uint8_t length, uint8_t tilde ) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	4613      	mov	r3, r2
 8000846:	460a      	mov	r2, r1
 8000848:	70fa      	strb	r2, [r7, #3]
 800084a:	70bb      	strb	r3, [r7, #2]
	int i;
	for( i=0; i < length; i++ ) {
 800084c:	2300      	movs	r3, #0
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	e013      	b.n	800087a <sendPacket+0x3e>
		// Wait for data register to be empty before adding the next char
		while( !(WIFI_USART->SR & 0x00000040) );
 8000852:	bf00      	nop
 8000854:	4b21      	ldr	r3, [pc, #132]	; (80008dc <sendPacket+0xa0>)
 8000856:	881b      	ldrh	r3, [r3, #0]
 8000858:	b29b      	uxth	r3, r3
 800085a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800085e:	2b00      	cmp	r3, #0
 8000860:	d0f8      	beq.n	8000854 <sendPacket+0x18>

		// Put into TX register
		USART_SendData( WIFI_USART, *packet );
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	481d      	ldr	r0, [pc, #116]	; (80008dc <sendPacket+0xa0>)
 8000868:	4619      	mov	r1, r3
 800086a:	f001 fa07 	bl	8001c7c <USART_SendData>
		packet++;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	3301      	adds	r3, #1
 8000872:	607b      	str	r3, [r7, #4]
/*********************************************************************************************
 * Base function to send all packets (or strings to setup WiFi module)
 *********************************************************************************************/
uint8_t sendPacket( char* packet, uint8_t length, uint8_t tilde ) {
	int i;
	for( i=0; i < length; i++ ) {
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	3301      	adds	r3, #1
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	78fa      	ldrb	r2, [r7, #3]
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	429a      	cmp	r2, r3
 8000880:	dce7      	bgt.n	8000852 <sendPacket+0x16>
		USART_SendData( WIFI_USART, *packet );
		packet++;
	}

	// Check if it is a custom packet
	if( tilde == TRUE ) {
 8000882:	78bb      	ldrb	r3, [r7, #2]
 8000884:	2b01      	cmp	r3, #1
 8000886:	d10c      	bne.n	80008a2 <sendPacket+0x66>
		while( !(WIFI_USART->SR & 0x00000040) );
 8000888:	bf00      	nop
 800088a:	4b14      	ldr	r3, [pc, #80]	; (80008dc <sendPacket+0xa0>)
 800088c:	881b      	ldrh	r3, [r3, #0]
 800088e:	b29b      	uxth	r3, r3
 8000890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000894:	2b00      	cmp	r3, #0
 8000896:	d0f8      	beq.n	800088a <sendPacket+0x4e>
		USART_SendData( WIFI_USART, '~' );
 8000898:	4810      	ldr	r0, [pc, #64]	; (80008dc <sendPacket+0xa0>)
 800089a:	217e      	movs	r1, #126	; 0x7e
 800089c:	f001 f9ee 	bl	8001c7c <USART_SendData>
	}

	// WiFi module expects \r\n at the end of every string
	while( !(WIFI_USART->SR & 0x00000040) );
 80008a0:	e7ff      	b.n	80008a2 <sendPacket+0x66>
 80008a2:	bf00      	nop
 80008a4:	4b0d      	ldr	r3, [pc, #52]	; (80008dc <sendPacket+0xa0>)
 80008a6:	881b      	ldrh	r3, [r3, #0]
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d0f8      	beq.n	80008a4 <sendPacket+0x68>
	USART_SendData( WIFI_USART, '\r' );
 80008b2:	480a      	ldr	r0, [pc, #40]	; (80008dc <sendPacket+0xa0>)
 80008b4:	210d      	movs	r1, #13
 80008b6:	f001 f9e1 	bl	8001c7c <USART_SendData>

	while( !(WIFI_USART->SR & 0x00000040) );
 80008ba:	bf00      	nop
 80008bc:	4b07      	ldr	r3, [pc, #28]	; (80008dc <sendPacket+0xa0>)
 80008be:	881b      	ldrh	r3, [r3, #0]
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d0f8      	beq.n	80008bc <sendPacket+0x80>
	USART_SendData( WIFI_USART, '\n' );
 80008ca:	4804      	ldr	r0, [pc, #16]	; (80008dc <sendPacket+0xa0>)
 80008cc:	210a      	movs	r1, #10
 80008ce:	f001 f9d5 	bl	8001c7c <USART_SendData>

	return SUCCESS;
 80008d2:	2301      	movs	r3, #1
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3710      	adds	r7, #16
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40004800 	.word	0x40004800

080008e0 <sendAck>:


/*********************************************************************************************
 * Send Ack
 *********************************************************************************************/
uint8_t sendAck( Header* header, uint8_t success ) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b088      	sub	sp, #32
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	460b      	mov	r3, r1
 80008ea:	70fb      	strb	r3, [r7, #3]

	// Fill Ack struct
	Ack* ack = pvPortMalloc( sizeof(Ack) );
 80008ec:	2001      	movs	r0, #1
 80008ee:	f008 f807 	bl	8008900 <pvPortMalloc>
 80008f2:	61f8      	str	r0, [r7, #28]
	ack->success = success;
 80008f4:	69fb      	ldr	r3, [r7, #28]
 80008f6:	78fa      	ldrb	r2, [r7, #3]
 80008f8:	701a      	strb	r2, [r3, #0]

	// Update the length of the packet in the header
	header->length = (HEADER_LENGTH + ACK_LENGTH);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2206      	movs	r2, #6
 80008fe:	711a      	strb	r2, [r3, #4]

	// Convert structs into strings
	char* header_char = (char*) header;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	61bb      	str	r3, [r7, #24]
	char* ack_char = (char*) ack;
 8000904:	69fb      	ldr	r3, [r7, #28]
 8000906:	617b      	str	r3, [r7, #20]

	// Package header and payload together
	char* ack_packet = pvPortMalloc( sizeof((uint8_t)(header->length)) );
 8000908:	2001      	movs	r0, #1
 800090a:	f007 fff9 	bl	8008900 <pvPortMalloc>
 800090e:	6138      	str	r0, [r7, #16]
	pack( ack_packet, header_char, 0 );
 8000910:	6938      	ldr	r0, [r7, #16]
 8000912:	69b9      	ldr	r1, [r7, #24]
 8000914:	2200      	movs	r2, #0
 8000916:	f000 fa4d 	bl	8000db4 <pack>
	pack( ack_packet, ack_char, HEADER_LENGTH );
 800091a:	6938      	ldr	r0, [r7, #16]
 800091c:	6979      	ldr	r1, [r7, #20]
 800091e:	2205      	movs	r2, #5
 8000920:	f000 fa48 	bl	8000db4 <pack>

	// Send packet
	sendPacket( "AT+CIPSEND=7", 12, FALSE );
 8000924:	480d      	ldr	r0, [pc, #52]	; (800095c <sendAck+0x7c>)
 8000926:	210c      	movs	r1, #12
 8000928:	2200      	movs	r2, #0
 800092a:	f7ff ff87 	bl	800083c <sendPacket>
	swDelay(100);
 800092e:	2064      	movs	r0, #100	; 0x64
 8000930:	f7ff fe30 	bl	8000594 <swDelay>
	uint8_t result = sendPacket( ack_packet, header->length, TRUE );
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	791b      	ldrb	r3, [r3, #4]
 8000938:	6938      	ldr	r0, [r7, #16]
 800093a:	4619      	mov	r1, r3
 800093c:	2201      	movs	r2, #1
 800093e:	f7ff ff7d 	bl	800083c <sendPacket>
 8000942:	4603      	mov	r3, r0
 8000944:	73fb      	strb	r3, [r7, #15]

	// Free variables
	vPortFree(ack);
 8000946:	69f8      	ldr	r0, [r7, #28]
 8000948:	f008 f872 	bl	8008a30 <vPortFree>
	vPortFree(ack_packet);
 800094c:	6938      	ldr	r0, [r7, #16]
 800094e:	f008 f86f 	bl	8008a30 <vPortFree>

	return result;
 8000952:	7bfb      	ldrb	r3, [r7, #15]
}
 8000954:	4618      	mov	r0, r3
 8000956:	3720      	adds	r7, #32
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	08008d54 	.word	0x08008d54

08000960 <sendPing>:


/*********************************************************************************************
 * Send Ping
 *********************************************************************************************/
uint8_t sendPing( Header* header ) {
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]

	// Update the length of the packet in the header
	header->length = (HEADER_LENGTH + PING_LENGTH);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2205      	movs	r2, #5
 800096c:	711a      	strb	r2, [r3, #4]

	// Convert structs into strings
	char* header_char = (char*) header;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	617b      	str	r3, [r7, #20]

	// Package header and payload together
	char* ping_packet = pvPortMalloc( sizeof((uint8_t)(header->length)) );
 8000972:	2001      	movs	r0, #1
 8000974:	f007 ffc4 	bl	8008900 <pvPortMalloc>
 8000978:	6138      	str	r0, [r7, #16]
	pack( ping_packet, header_char, 0 );
 800097a:	6938      	ldr	r0, [r7, #16]
 800097c:	6979      	ldr	r1, [r7, #20]
 800097e:	2200      	movs	r2, #0
 8000980:	f000 fa18 	bl	8000db4 <pack>

	// Send packet
	sendPacket( "AT+CIPSEND=6", 12, FALSE );
 8000984:	480c      	ldr	r0, [pc, #48]	; (80009b8 <sendPing+0x58>)
 8000986:	210c      	movs	r1, #12
 8000988:	2200      	movs	r2, #0
 800098a:	f7ff ff57 	bl	800083c <sendPacket>
	swDelay(100);
 800098e:	2064      	movs	r0, #100	; 0x64
 8000990:	f7ff fe00 	bl	8000594 <swDelay>
	uint8_t result = sendPacket( ping_packet, header->length, TRUE );
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	791b      	ldrb	r3, [r3, #4]
 8000998:	6938      	ldr	r0, [r7, #16]
 800099a:	4619      	mov	r1, r3
 800099c:	2201      	movs	r2, #1
 800099e:	f7ff ff4d 	bl	800083c <sendPacket>
 80009a2:	4603      	mov	r3, r0
 80009a4:	73fb      	strb	r3, [r7, #15]

	// Free variables
	vPortFree(ping_packet);
 80009a6:	6938      	ldr	r0, [r7, #16]
 80009a8:	f008 f842 	bl	8008a30 <vPortFree>

	return result;
 80009ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3718      	adds	r7, #24
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	08008d64 	.word	0x08008d64

080009bc <sendSetMode>:


/*********************************************************************************************
 * Send SetMode
 *********************************************************************************************/
uint8_t sendSetMode( Header* header ) {
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]

	// Update the length of the packet in the header
	header->length = (HEADER_LENGTH + SET_MODE_LENGTH);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2205      	movs	r2, #5
 80009c8:	711a      	strb	r2, [r3, #4]

	// Convert structs into strings
	char* header_char = (char*) header;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	617b      	str	r3, [r7, #20]

	// Package header and payload together
	char* set_mode_packet = pvPortMalloc( sizeof((uint8_t)(header->length)) );
 80009ce:	2001      	movs	r0, #1
 80009d0:	f007 ff96 	bl	8008900 <pvPortMalloc>
 80009d4:	6138      	str	r0, [r7, #16]
	pack( set_mode_packet, header_char, 0 );
 80009d6:	6938      	ldr	r0, [r7, #16]
 80009d8:	6979      	ldr	r1, [r7, #20]
 80009da:	2200      	movs	r2, #0
 80009dc:	f000 f9ea 	bl	8000db4 <pack>

	// Send packet
	sendPacket( "AT+CIPSEND=6", 12, FALSE );
 80009e0:	480c      	ldr	r0, [pc, #48]	; (8000a14 <sendSetMode+0x58>)
 80009e2:	210c      	movs	r1, #12
 80009e4:	2200      	movs	r2, #0
 80009e6:	f7ff ff29 	bl	800083c <sendPacket>
	swDelay(100);
 80009ea:	2064      	movs	r0, #100	; 0x64
 80009ec:	f7ff fdd2 	bl	8000594 <swDelay>
	uint8_t result = sendPacket( set_mode_packet, header->length, TRUE );
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	791b      	ldrb	r3, [r3, #4]
 80009f4:	6938      	ldr	r0, [r7, #16]
 80009f6:	4619      	mov	r1, r3
 80009f8:	2201      	movs	r2, #1
 80009fa:	f7ff ff1f 	bl	800083c <sendPacket>
 80009fe:	4603      	mov	r3, r0
 8000a00:	73fb      	strb	r3, [r7, #15]

	// Free variables
	vPortFree(set_mode_packet);
 8000a02:	6938      	ldr	r0, [r7, #16]
 8000a04:	f008 f814 	bl	8008a30 <vPortFree>

	return result;
 8000a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3718      	adds	r7, #24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	08008d64 	.word	0x08008d64

08000a18 <sendPowerConsumption>:


/*********************************************************************************************
 * Send PowerConsumption
 *********************************************************************************************/
uint8_t sendPowerConsumption( Header* header, uint16_t average_power, uint16_t time ) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b088      	sub	sp, #32
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	4613      	mov	r3, r2
 8000a22:	460a      	mov	r2, r1
 8000a24:	807a      	strh	r2, [r7, #2]
 8000a26:	803b      	strh	r3, [r7, #0]

	// Fill Ack struct
	PowerConsumption* power_consumption = pvPortMalloc( sizeof(PowerConsumption) );
 8000a28:	2004      	movs	r0, #4
 8000a2a:	f007 ff69 	bl	8008900 <pvPortMalloc>
 8000a2e:	61f8      	str	r0, [r7, #28]
	power_consumption->average_power = average_power;
 8000a30:	69fb      	ldr	r3, [r7, #28]
 8000a32:	887a      	ldrh	r2, [r7, #2]
 8000a34:	801a      	strh	r2, [r3, #0]
	power_consumption->time = time;
 8000a36:	69fb      	ldr	r3, [r7, #28]
 8000a38:	883a      	ldrh	r2, [r7, #0]
 8000a3a:	805a      	strh	r2, [r3, #2]

	// Update the length of the packet in the header
	header->length = (HEADER_LENGTH + POWER_CONSUMPTION_LENGTH);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2209      	movs	r2, #9
 8000a40:	711a      	strb	r2, [r3, #4]

	// Convert structs into strings
	char* header_char = (char*) header;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	61bb      	str	r3, [r7, #24]
	char* power_consumption_char = (char*) power_consumption;
 8000a46:	69fb      	ldr	r3, [r7, #28]
 8000a48:	617b      	str	r3, [r7, #20]

	// Package header and payload together
	char* power_consumption_packet = pvPortMalloc( sizeof((uint8_t)(header->length)) );
 8000a4a:	2001      	movs	r0, #1
 8000a4c:	f007 ff58 	bl	8008900 <pvPortMalloc>
 8000a50:	6138      	str	r0, [r7, #16]
	pack( power_consumption_packet, header_char, 0 );
 8000a52:	6938      	ldr	r0, [r7, #16]
 8000a54:	69b9      	ldr	r1, [r7, #24]
 8000a56:	2200      	movs	r2, #0
 8000a58:	f000 f9ac 	bl	8000db4 <pack>
	pack( power_consumption_packet, power_consumption_char, HEADER_LENGTH );
 8000a5c:	6938      	ldr	r0, [r7, #16]
 8000a5e:	6979      	ldr	r1, [r7, #20]
 8000a60:	2205      	movs	r2, #5
 8000a62:	f000 f9a7 	bl	8000db4 <pack>

	// Send packet
	sendPacket( "AT+CIPSEND=10", 13, FALSE );
 8000a66:	480f      	ldr	r0, [pc, #60]	; (8000aa4 <sendPowerConsumption+0x8c>)
 8000a68:	210d      	movs	r1, #13
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f7ff fee6 	bl	800083c <sendPacket>
	while(received_string[0] != 'O');
 8000a70:	bf00      	nop
 8000a72:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <sendPowerConsumption+0x90>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	2b4f      	cmp	r3, #79	; 0x4f
 8000a7a:	d1fa      	bne.n	8000a72 <sendPowerConsumption+0x5a>
	uint8_t result = sendPacket( power_consumption_packet, header->length, TRUE );
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	791b      	ldrb	r3, [r3, #4]
 8000a80:	6938      	ldr	r0, [r7, #16]
 8000a82:	4619      	mov	r1, r3
 8000a84:	2201      	movs	r2, #1
 8000a86:	f7ff fed9 	bl	800083c <sendPacket>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	73fb      	strb	r3, [r7, #15]

	// Free variables
	vPortFree(power_consumption);
 8000a8e:	69f8      	ldr	r0, [r7, #28]
 8000a90:	f007 ffce 	bl	8008a30 <vPortFree>
	vPortFree(power_consumption_packet);
 8000a94:	6938      	ldr	r0, [r7, #16]
 8000a96:	f007 ffcb 	bl	8008a30 <vPortFree>

	return result;
 8000a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3720      	adds	r7, #32
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	08008d74 	.word	0x08008d74
 8000aa8:	2001c238 	.word	0x2001c238

08000aac <handlePacket>:
 * %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */

/*********************************************************************************************
 * Base function to handle all packets
 *********************************************************************************************/
PacketResult handlePacket( char* packet ) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]

	// Extract the header
	Header* header = pvPortMalloc( sizeof(Header) );
 8000ab4:	2005      	movs	r0, #5
 8000ab6:	f007 ff23 	bl	8008900 <pvPortMalloc>
 8000aba:	6178      	str	r0, [r7, #20]
	char* header_char = (char*) header;
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	613b      	str	r3, [r7, #16]
	unpack( packet, header_char, 0 );
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	6939      	ldr	r1, [r7, #16]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f000 f997 	bl	8000df8 <unpack>

	// Convert string back to Header struct
	header = (Header*) header_char;
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	617b      	str	r3, [r7, #20]

	// Create packet result struct
	PacketResult packet_result;
	packet_result.type = header->type;
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	78db      	ldrb	r3, [r3, #3]
 8000ad2:	723b      	strb	r3, [r7, #8]

	// Sort by mode of operation and SAV
	if( ((header->mode == allModes) || (header->mode == my_mode )) && (header->dest == MY_ADDR) ) {
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	789b      	ldrb	r3, [r3, #2]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d005      	beq.n	8000ae8 <handlePacket+0x3c>
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	789a      	ldrb	r2, [r3, #2]
 8000ae0:	4b34      	ldr	r3, [pc, #208]	; (8000bb4 <handlePacket+0x108>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d153      	bne.n	8000b90 <handlePacket+0xe4>
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d14f      	bne.n	8000b90 <handlePacket+0xe4>

		// Based on packet type, call the correct handle function
		switch( header->type ) {
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	78db      	ldrb	r3, [r3, #3]
 8000af4:	2b04      	cmp	r3, #4
 8000af6:	d83a      	bhi.n	8000b6e <handlePacket+0xc2>
 8000af8:	a201      	add	r2, pc, #4	; (adr r2, 8000b00 <handlePacket+0x54>)
 8000afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000afe:	bf00      	nop
 8000b00:	08000b15 	.word	0x08000b15
 8000b04:	08000b23 	.word	0x08000b23
 8000b08:	08000b31 	.word	0x08000b31
 8000b0c:	08000b49 	.word	0x08000b49
 8000b10:	08000b61 	.word	0x08000b61
			case ack:
				packet_result.result = handleAck( header, packet );
 8000b14:	6978      	ldr	r0, [r7, #20]
 8000b16:	6879      	ldr	r1, [r7, #4]
 8000b18:	f000 f84e 	bl	8000bb8 <handleAck>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	727b      	strb	r3, [r7, #9]
				break;
 8000b20:	e035      	b.n	8000b8e <handlePacket+0xe2>
			case ping:
				packet_result.result = handlePing( header, packet );
 8000b22:	6978      	ldr	r0, [r7, #20]
 8000b24:	6879      	ldr	r1, [r7, #4]
 8000b26:	f000 f865 	bl	8000bf4 <handlePing>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	727b      	strb	r3, [r7, #9]
				break;
 8000b2e:	e02e      	b.n	8000b8e <handlePacket+0xe2>
			case trafficLightCurrent:
				if( my_mode == mode2 ) {
 8000b30:	4b20      	ldr	r3, [pc, #128]	; (8000bb4 <handlePacket+0x108>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b02      	cmp	r3, #2
 8000b36:	d106      	bne.n	8000b46 <handlePacket+0x9a>
					packet_result.result = handleTrafficLightCurrent( header, packet );
 8000b38:	6978      	ldr	r0, [r7, #20]
 8000b3a:	6879      	ldr	r1, [r7, #4]
 8000b3c:	f000 f888 	bl	8000c50 <handleTrafficLightCurrent>
 8000b40:	4603      	mov	r3, r0
 8000b42:	727b      	strb	r3, [r7, #9]
				}
				break;
 8000b44:	e023      	b.n	8000b8e <handlePacket+0xe2>
 8000b46:	e022      	b.n	8000b8e <handlePacket+0xe2>
			case trafficLightFuture:
				if( my_mode == mode3 ) {
 8000b48:	4b1a      	ldr	r3, [pc, #104]	; (8000bb4 <handlePacket+0x108>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	2b03      	cmp	r3, #3
 8000b4e:	d106      	bne.n	8000b5e <handlePacket+0xb2>
					packet_result.result = handleTrafficLightFuture( header, packet );
 8000b50:	6978      	ldr	r0, [r7, #20]
 8000b52:	6879      	ldr	r1, [r7, #4]
 8000b54:	f000 f8ac 	bl	8000cb0 <handleTrafficLightFuture>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	727b      	strb	r3, [r7, #9]
				}
				break;
 8000b5c:	e017      	b.n	8000b8e <handlePacket+0xe2>
 8000b5e:	e016      	b.n	8000b8e <handlePacket+0xe2>
			case changeMode:
				packet_result.result = handleChangeMode( header, packet );
 8000b60:	6978      	ldr	r0, [r7, #20]
 8000b62:	6879      	ldr	r1, [r7, #4]
 8000b64:	f000 f8f6 	bl	8000d54 <handleChangeMode>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	727b      	strb	r3, [r7, #9]
				break;
 8000b6c:	e00f      	b.n	8000b8e <handlePacket+0xe2>
			default:
				// If there is no handle function, send back negative Ack
				header->dest = header->addr;
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	785a      	ldrb	r2, [r3, #1]
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	701a      	strb	r2, [r3, #0]
				header->addr = MY_ADDR;
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	2201      	movs	r2, #1
 8000b7a:	705a      	strb	r2, [r3, #1]
				header->mode = allModes;
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	2200      	movs	r2, #0
 8000b80:	709a      	strb	r2, [r3, #2]
				header->type = ack;
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	2200      	movs	r2, #0
 8000b86:	70da      	strb	r2, [r3, #3]
				// sendAck( header, FAILURE );
				packet_result.result = FAILURE;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	727b      	strb	r3, [r7, #9]
				break;
 8000b8c:	bf00      	nop
		}
	} else {
 8000b8e:	e001      	b.n	8000b94 <handlePacket+0xe8>
		packet_result.result = WRONG_MODE;
 8000b90:	2302      	movs	r3, #2
 8000b92:	727b      	strb	r3, [r7, #9]
	}

	// Free variables
	vPortFree( header );
 8000b94:	6978      	ldr	r0, [r7, #20]
 8000b96:	f007 ff4b 	bl	8008a30 <vPortFree>

	return packet_result;
 8000b9a:	893b      	ldrh	r3, [r7, #8]
 8000b9c:	81bb      	strh	r3, [r7, #12]
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	7b3a      	ldrb	r2, [r7, #12]
 8000ba2:	f362 0307 	bfi	r3, r2, #0, #8
 8000ba6:	7b7a      	ldrb	r2, [r7, #13]
 8000ba8:	f362 230f 	bfi	r3, r2, #8, #8
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3718      	adds	r7, #24
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	2001c22e 	.word	0x2001c22e

08000bb8 <handleAck>:


/*********************************************************************************************
 * Handle Ack
 *********************************************************************************************/
uint8_t handleAck( Header* header, char* packet ) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]

	// Extract the pay load
	Ack* ack = pvPortMalloc( sizeof(Ack) );
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	f007 fe9c 	bl	8008900 <pvPortMalloc>
 8000bc8:	6178      	str	r0, [r7, #20]
	char* ack_char = (char*) ack;
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	613b      	str	r3, [r7, #16]
	unpack( packet, ack_char, HEADER_LENGTH );
 8000bce:	6838      	ldr	r0, [r7, #0]
 8000bd0:	6939      	ldr	r1, [r7, #16]
 8000bd2:	2205      	movs	r2, #5
 8000bd4:	f000 f910 	bl	8000df8 <unpack>

	// Convert string back to Ack struct
	ack = (Ack*) ack_char;
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	617b      	str	r3, [r7, #20]

	// Indicate success or failure from packet
	uint8_t result = ack->success;
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	73fb      	strb	r3, [r7, #15]

	// Free variables
	vPortFree( ack );
 8000be2:	6978      	ldr	r0, [r7, #20]
 8000be4:	f007 ff24 	bl	8008a30 <vPortFree>

	return result;
 8000be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3718      	adds	r7, #24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop

08000bf4 <handlePing>:


/*********************************************************************************************
 * Handle Ping
 *********************************************************************************************/
uint8_t handlePing( Header* header, char* packet ) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	6039      	str	r1, [r7, #0]

	// Extract the pay load
	Ping* ping = pvPortMalloc( sizeof(Ping) );
 8000bfe:	2000      	movs	r0, #0
 8000c00:	f007 fe7e 	bl	8008900 <pvPortMalloc>
 8000c04:	6178      	str	r0, [r7, #20]
	char* ping_char = (char*) ping;
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	613b      	str	r3, [r7, #16]
	unpack( packet, ping_char, HEADER_LENGTH );
 8000c0a:	6838      	ldr	r0, [r7, #0]
 8000c0c:	6939      	ldr	r1, [r7, #16]
 8000c0e:	2205      	movs	r2, #5
 8000c10:	f000 f8f2 	bl	8000df8 <unpack>

	// Convert string back to Ping struct
	ping = (Ping*) ping_char;
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	617b      	str	r3, [r7, #20]

	// Restructure header to send back ack
	header->dest = header->addr;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	785a      	ldrb	r2, [r3, #1]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	701a      	strb	r2, [r3, #0]
	header->addr = MY_ADDR;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2201      	movs	r2, #1
 8000c24:	705a      	strb	r2, [r3, #1]
	header->mode = allModes;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2200      	movs	r2, #0
 8000c2a:	709a      	strb	r2, [r3, #2]
	header->type = ack;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2200      	movs	r2, #0
 8000c30:	70da      	strb	r2, [r3, #3]

	// Send Ack
	uint8_t result = sendAck( header, SUCCESS );
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	2101      	movs	r1, #1
 8000c36:	f7ff fe53 	bl	80008e0 <sendAck>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	73fb      	strb	r3, [r7, #15]

	// Free variables
	vPortFree( ping );
 8000c3e:	6978      	ldr	r0, [r7, #20]
 8000c40:	f007 fef6 	bl	8008a30 <vPortFree>

	return result;
 8000c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3718      	adds	r7, #24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop

08000c50 <handleTrafficLightCurrent>:


/*********************************************************************************************
 * Handle TrafficLightCurrent
 *********************************************************************************************/
uint8_t handleTrafficLightCurrent( Header* header, char* packet ) {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	6039      	str	r1, [r7, #0]

	// Extract the pay load
	TrafficLightCurrent* current = pvPortMalloc( sizeof(TrafficLightCurrent) );
 8000c5a:	2002      	movs	r0, #2
 8000c5c:	f007 fe50 	bl	8008900 <pvPortMalloc>
 8000c60:	60f8      	str	r0, [r7, #12]
	char* current_char = (char*) current;
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	60bb      	str	r3, [r7, #8]
	unpack( packet, current_char, HEADER_LENGTH );
 8000c66:	6838      	ldr	r0, [r7, #0]
 8000c68:	68b9      	ldr	r1, [r7, #8]
 8000c6a:	2205      	movs	r2, #5
 8000c6c:	f000 f8c4 	bl	8000df8 <unpack>

	// Convert string back to TrafficLightCurrent struct
	current = (TrafficLightCurrent*) current_char;
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	60fb      	str	r3, [r7, #12]

	// Turn on corresponding LED
	// TODO: need to know what direction SAV is headed (northSouth / eastWest)
	LED_LIGHT_PORT->OFF = LED_LIGHT_PINS;
 8000c74:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <handleTrafficLightCurrent+0x54>)
 8000c76:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8000c7a:	835a      	strh	r2, [r3, #26]
	LED_LIGHT_PORT->ON = led_light_pin[ current->northSouth ];
 8000c7c:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <handleTrafficLightCurrent+0x54>)
 8000c7e:	68fa      	ldr	r2, [r7, #12]
 8000c80:	7812      	ldrb	r2, [r2, #0]
 8000c82:	4611      	mov	r1, r2
 8000c84:	4a08      	ldr	r2, [pc, #32]	; (8000ca8 <handleTrafficLightCurrent+0x58>)
 8000c86:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000c8a:	831a      	strh	r2, [r3, #24]

	// Set global so the SAV knows what the current state is
	traffic_current_state = current->northSouth;
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	781a      	ldrb	r2, [r3, #0]
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <handleTrafficLightCurrent+0x5c>)
 8000c92:	701a      	strb	r2, [r3, #0]

	// Free variables
	vPortFree( current );
 8000c94:	68f8      	ldr	r0, [r7, #12]
 8000c96:	f007 fecb 	bl	8008a30 <vPortFree>

	return SUCCESS;
 8000c9a:	2301      	movs	r3, #1
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40020800 	.word	0x40020800
 8000ca8:	20000020 	.word	0x20000020
 8000cac:	2001c1f8 	.word	0x2001c1f8

08000cb0 <handleTrafficLightFuture>:


/*********************************************************************************************
 * Handle TrafficLightFuture
 *********************************************************************************************/
uint8_t handleTrafficLightFuture( Header* header, char* packet ) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]

	// Extract the pay load
	TrafficLightFuture* future = pvPortMalloc( sizeof(TrafficLightFuture) );
 8000cba:	2004      	movs	r0, #4
 8000cbc:	f007 fe20 	bl	8008900 <pvPortMalloc>
 8000cc0:	60f8      	str	r0, [r7, #12]
	char* future_char = (char*) future;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	60bb      	str	r3, [r7, #8]
	unpack( packet, future_char, HEADER_LENGTH );
 8000cc6:	6838      	ldr	r0, [r7, #0]
 8000cc8:	68b9      	ldr	r1, [r7, #8]
 8000cca:	2205      	movs	r2, #5
 8000ccc:	f000 f894 	bl	8000df8 <unpack>

	// Convert string back to TrafficLightCurrent struct
	future = (TrafficLightFuture*) future_char;
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	60fb      	str	r3, [r7, #12]

	// Check if a timer has already been started
	if( !swIsTimerActive(blinkTrafficLight) ) {
 8000cd4:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <handleTrafficLightFuture+0x8c>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff fc3b 	bl	8000554 <swIsTimerActive>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d122      	bne.n	8000d2a <handleTrafficLightFuture+0x7a>
		// Blink corresponding LED
		// TODO: need to know what direction SAV is headed (northSouth / eastWest)
		LED_LIGHT_PORT->OFF = LED_LIGHT_PINS;
 8000ce4:	4b16      	ldr	r3, [pc, #88]	; (8000d40 <handleTrafficLightFuture+0x90>)
 8000ce6:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8000cea:	835a      	strh	r2, [r3, #26]
		LED_LIGHT_PORT->ON = led_light_pin[ future->northSouth ];
 8000cec:	4b14      	ldr	r3, [pc, #80]	; (8000d40 <handleTrafficLightFuture+0x90>)
 8000cee:	68fa      	ldr	r2, [r7, #12]
 8000cf0:	7812      	ldrb	r2, [r2, #0]
 8000cf2:	4611      	mov	r1, r2
 8000cf4:	4a13      	ldr	r2, [pc, #76]	; (8000d44 <handleTrafficLightFuture+0x94>)
 8000cf6:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000cfa:	831a      	strh	r2, [r3, #24]

		// Set global variables
		traffic_future_state = next_light_state[ future->northSouth ];
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	4a11      	ldr	r2, [pc, #68]	; (8000d48 <handleTrafficLightFuture+0x98>)
 8000d02:	5cd2      	ldrb	r2, [r2, r3]
 8000d04:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <handleTrafficLightFuture+0x9c>)
 8000d06:	701a      	strb	r2, [r3, #0]

		// Time is converted into ms
		traffic_time = ((uint16_t)future->changeTimeNS *1000);
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	785b      	ldrb	r3, [r3, #1]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	0152      	lsls	r2, r2, #5
 8000d10:	1ad2      	subs	r2, r2, r3
 8000d12:	0092      	lsls	r2, r2, #2
 8000d14:	4413      	add	r3, r2
 8000d16:	00db      	lsls	r3, r3, #3
 8000d18:	b29a      	uxth	r2, r3
 8000d1a:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <handleTrafficLightFuture+0xa0>)
 8000d1c:	801a      	strh	r2, [r3, #0]

		// Start timer
		swTimerStart( blinkTrafficLight, 0 );
 8000d1e:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <handleTrafficLightFuture+0x8c>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4618      	mov	r0, r3
 8000d24:	2100      	movs	r1, #0
 8000d26:	f7ff fbd7 	bl	80004d8 <swTimerStart>

	// If it has do nothing
	// TODO: check if correct values

	// Free variables
	vPortFree( future );
 8000d2a:	68f8      	ldr	r0, [r7, #12]
 8000d2c:	f007 fe80 	bl	8008a30 <vPortFree>

	return SUCCESS;
 8000d30:	2301      	movs	r3, #1
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	2001c1e8 	.word	0x2001c1e8
 8000d40:	40020800 	.word	0x40020800
 8000d44:	20000020 	.word	0x20000020
 8000d48:	20000000 	.word	0x20000000
 8000d4c:	2001c1e4 	.word	0x2001c1e4
 8000d50:	2001c22c 	.word	0x2001c22c

08000d54 <handleChangeMode>:


/*********************************************************************************************
 * Handle ChangeMode
 *********************************************************************************************/
uint8_t handleChangeMode( Header* header, char* packet ) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	6039      	str	r1, [r7, #0]

	// Extract the pay load
	ChangeMode* change_mode = pvPortMalloc( sizeof(ChangeMode) );
 8000d5e:	2001      	movs	r0, #1
 8000d60:	f007 fdce 	bl	8008900 <pvPortMalloc>
 8000d64:	60f8      	str	r0, [r7, #12]
	char* change_mode_char = (char*) change_mode;
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	60bb      	str	r3, [r7, #8]
	unpack( packet, change_mode_char, HEADER_LENGTH );
 8000d6a:	6838      	ldr	r0, [r7, #0]
 8000d6c:	68b9      	ldr	r1, [r7, #8]
 8000d6e:	2205      	movs	r2, #5
 8000d70:	f000 f842 	bl	8000df8 <unpack>

	// Convert string back to ChangeMode struct
	change_mode = (ChangeMode*) change_mode_char;
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	60fb      	str	r3, [r7, #12]

	// Set SAV's Mode of Operation
	my_mode = change_mode->newMode;
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	781a      	ldrb	r2, [r3, #0]
 8000d7c:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <handleChangeMode+0x54>)
 8000d7e:	701a      	strb	r2, [r3, #0]

	// Set corresponding LED
	LED_MODE_PORT->OFF = led_mode_pin[ allModes ];
 8000d80:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <handleChangeMode+0x58>)
 8000d82:	4a0b      	ldr	r2, [pc, #44]	; (8000db0 <handleChangeMode+0x5c>)
 8000d84:	8812      	ldrh	r2, [r2, #0]
 8000d86:	835a      	strh	r2, [r3, #26]
	LED_MODE_PORT->ON = led_mode_pin[ my_mode ];
 8000d88:	4b08      	ldr	r3, [pc, #32]	; (8000dac <handleChangeMode+0x58>)
 8000d8a:	4a07      	ldr	r2, [pc, #28]	; (8000da8 <handleChangeMode+0x54>)
 8000d8c:	7812      	ldrb	r2, [r2, #0]
 8000d8e:	4611      	mov	r1, r2
 8000d90:	4a07      	ldr	r2, [pc, #28]	; (8000db0 <handleChangeMode+0x5c>)
 8000d92:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000d96:	831a      	strh	r2, [r3, #24]

	// Free variables
	vPortFree( change_mode );
 8000d98:	68f8      	ldr	r0, [r7, #12]
 8000d9a:	f007 fe49 	bl	8008a30 <vPortFree>

	return SUCCESS;
 8000d9e:	2301      	movs	r3, #1
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	2001c22e 	.word	0x2001c22e
 8000dac:	40020800 	.word	0x40020800
 8000db0:	20000028 	.word	0x20000028

08000db4 <pack>:
 * %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */

/*********************************************************************************************
 * Package string into container
 *********************************************************************************************/
void pack( char* container, char* field, uint8_t start ) {
 8000db4:	b480      	push	{r7}
 8000db6:	b087      	sub	sp, #28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	71fb      	strb	r3, [r7, #7]

	// Iterate through field, copying each char into the container
	// Note: By adding 48, the integer value is represented as its ascii counterpart
	int i;
	for( i=0; i<=sizeof(field); i++) {
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	617b      	str	r3, [r7, #20]
 8000dc6:	e00e      	b.n	8000de6 <pack+0x32>
		container[start + i] = field[i] + 48;
 8000dc8:	79fa      	ldrb	r2, [r7, #7]
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	4413      	add	r3, r2
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	697a      	ldr	r2, [r7, #20]
 8000dd4:	68b9      	ldr	r1, [r7, #8]
 8000dd6:	440a      	add	r2, r1
 8000dd8:	7812      	ldrb	r2, [r2, #0]
 8000dda:	3230      	adds	r2, #48	; 0x30
 8000ddc:	b2d2      	uxtb	r2, r2
 8000dde:	701a      	strb	r2, [r3, #0]
void pack( char* container, char* field, uint8_t start ) {

	// Iterate through field, copying each char into the container
	// Note: By adding 48, the integer value is represented as its ascii counterpart
	int i;
	for( i=0; i<=sizeof(field); i++) {
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	3301      	adds	r3, #1
 8000de4:	617b      	str	r3, [r7, #20]
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	2b04      	cmp	r3, #4
 8000dea:	d9ed      	bls.n	8000dc8 <pack+0x14>
		container[start + i] = field[i] + 48;
	}
}
 8000dec:	371c      	adds	r7, #28
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop

08000df8 <unpack>:


/*********************************************************************************************
 * Unpack strings from the container
 *********************************************************************************************/
void unpack( char* container, char* field, uint8_t start ) {
 8000df8:	b480      	push	{r7}
 8000dfa:	b087      	sub	sp, #28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	4613      	mov	r3, r2
 8000e04:	71fb      	strb	r3, [r7, #7]

	// Note: By subtracting 48, the ascii is converted back to the correct uint
	// Note: Each packet is of the form: +IPD,(length):(packet)

	// Begin by creating an offset to the actual packet
	int offset = 6;
 8000e06:	2306      	movs	r3, #6
 8000e08:	617b      	str	r3, [r7, #20]
	while( container[offset] != ':' ) {
 8000e0a:	e002      	b.n	8000e12 <unpack+0x1a>
		offset++;
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	617b      	str	r3, [r7, #20]
	// Note: By subtracting 48, the ascii is converted back to the correct uint
	// Note: Each packet is of the form: +IPD,(length):(packet)

	// Begin by creating an offset to the actual packet
	int offset = 6;
	while( container[offset] != ':' ) {
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	68fa      	ldr	r2, [r7, #12]
 8000e16:	4413      	add	r3, r2
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b3a      	cmp	r3, #58	; 0x3a
 8000e1c:	d1f6      	bne.n	8000e0c <unpack+0x14>
		offset++;
	}
	offset++;
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	3301      	adds	r3, #1
 8000e22:	617b      	str	r3, [r7, #20]

	// Iterate through container, copying each char into the field
	int i;
	for( i=0; i<=sizeof(field); i++) {
 8000e24:	2300      	movs	r3, #0
 8000e26:	613b      	str	r3, [r7, #16]
 8000e28:	e010      	b.n	8000e4c <unpack+0x54>
		field[i] = container[start + offset + i] - 48;
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	68ba      	ldr	r2, [r7, #8]
 8000e2e:	4413      	add	r3, r2
 8000e30:	79f9      	ldrb	r1, [r7, #7]
 8000e32:	697a      	ldr	r2, [r7, #20]
 8000e34:	4411      	add	r1, r2
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	440a      	add	r2, r1
 8000e3a:	68f9      	ldr	r1, [r7, #12]
 8000e3c:	440a      	add	r2, r1
 8000e3e:	7812      	ldrb	r2, [r2, #0]
 8000e40:	3a30      	subs	r2, #48	; 0x30
 8000e42:	b2d2      	uxtb	r2, r2
 8000e44:	701a      	strb	r2, [r3, #0]
	}
	offset++;

	// Iterate through container, copying each char into the field
	int i;
	for( i=0; i<=sizeof(field); i++) {
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	2b04      	cmp	r3, #4
 8000e50:	d9eb      	bls.n	8000e2a <unpack+0x32>
		field[i] = container[start + offset + i] - 48;
	}
}
 8000e52:	371c      	adds	r7, #28
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <USART3_IRQHandler>:


/*********************************************************************************************
 * USART IRQ Handler for WiFi module
 *********************************************************************************************/
void USART3_IRQHandler( void ) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0

	// Make sure USART recieve interrupt flag was set
	if( USART_GetITStatus( WIFI_USART, USART_IT_RXNE ) ) {
 8000e62:	481d      	ldr	r0, [pc, #116]	; (8000ed8 <USART3_IRQHandler+0x7c>)
 8000e64:	f240 5125 	movw	r1, #1317	; 0x525
 8000e68:	f001 f922 	bl	80020b0 <USART_GetITStatus>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d02f      	beq.n	8000ed2 <USART3_IRQHandler+0x76>

		// Counter to track packet length
		static uint8_t counter = 0;

		// Character retrieved from data register
		char t = WIFI_USART->DR;
 8000e72:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <USART3_IRQHandler+0x7c>)
 8000e74:	889b      	ldrh	r3, [r3, #4]
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	71fb      	strb	r3, [r7, #7]

		// Check if string has ended or it exceeded the maximum packet length
		if( (t != '\n') && (counter < MAX_LENGTH)  && (t != '~') ) {
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	2b0a      	cmp	r3, #10
 8000e7e:	d012      	beq.n	8000ea6 <USART3_IRQHandler+0x4a>
 8000e80:	4b16      	ldr	r3, [pc, #88]	; (8000edc <USART3_IRQHandler+0x80>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2b0f      	cmp	r3, #15
 8000e86:	d80e      	bhi.n	8000ea6 <USART3_IRQHandler+0x4a>
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	2b7e      	cmp	r3, #126	; 0x7e
 8000e8c:	d00b      	beq.n	8000ea6 <USART3_IRQHandler+0x4a>
			received_string[counter] = t;
 8000e8e:	4b13      	ldr	r3, [pc, #76]	; (8000edc <USART3_IRQHandler+0x80>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	4a13      	ldr	r2, [pc, #76]	; (8000ee0 <USART3_IRQHandler+0x84>)
 8000e94:	79f9      	ldrb	r1, [r7, #7]
 8000e96:	54d1      	strb	r1, [r2, r3]
			counter++;
 8000e98:	4b10      	ldr	r3, [pc, #64]	; (8000edc <USART3_IRQHandler+0x80>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <USART3_IRQHandler+0x80>)
 8000ea2:	701a      	strb	r2, [r3, #0]
 8000ea4:	e015      	b.n	8000ed2 <USART3_IRQHandler+0x76>
		} else {

			// Reset counter
			counter = 0;
 8000ea6:	4b0d      	ldr	r3, [pc, #52]	; (8000edc <USART3_IRQHandler+0x80>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	701a      	strb	r2, [r3, #0]

			// If received_string is a packet, put it in the queue
			if( received_string[0] == '+' ) {
 8000eac:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <USART3_IRQHandler+0x84>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	2b2b      	cmp	r3, #43	; 0x2b
 8000eb4:	d10a      	bne.n	8000ecc <USART3_IRQHandler+0x70>
				xQueueSendToBackFromISR( xPacketQueue, &received_string, pdFALSE);
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <USART3_IRQHandler+0x88>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	4908      	ldr	r1, [pc, #32]	; (8000ee0 <USART3_IRQHandler+0x84>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	f006 ffaf 	bl	8007e24 <xQueueGenericSendFromISR>
				process_packet = TRUE;
 8000ec6:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <USART3_IRQHandler+0x8c>)
 8000ec8:	2201      	movs	r2, #1
 8000eca:	701a      	strb	r2, [r3, #0]
			}

			// Clear received_string
			received_string[0] = '\n';
 8000ecc:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <USART3_IRQHandler+0x84>)
 8000ece:	220a      	movs	r2, #10
 8000ed0:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40004800 	.word	0x40004800
 8000edc:	20000070 	.word	0x20000070
 8000ee0:	2001c238 	.word	0x2001c238
 8000ee4:	2001c234 	.word	0x2001c234
 8000ee8:	2001c230 	.word	0x2001c230

08000eec <copyString>:


/*********************************************************************************************
 * Copy original string to a new copy
 *********************************************************************************************/
void copyString( volatile char* original, char* new, uint8_t length ) {
 8000eec:	b480      	push	{r7}
 8000eee:	b087      	sub	sp, #28
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	71fb      	strb	r3, [r7, #7]

	// Iterate through string and copy each char
	int i;
	for( i=0; i<=length; i++ ) {
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]
 8000efe:	e00b      	b.n	8000f18 <copyString+0x2c>
		new[i] = original[i];
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	68ba      	ldr	r2, [r7, #8]
 8000f04:	4413      	add	r3, r2
 8000f06:	697a      	ldr	r2, [r7, #20]
 8000f08:	68f9      	ldr	r1, [r7, #12]
 8000f0a:	440a      	add	r2, r1
 8000f0c:	7812      	ldrb	r2, [r2, #0]
 8000f0e:	b2d2      	uxtb	r2, r2
 8000f10:	701a      	strb	r2, [r3, #0]
 *********************************************************************************************/
void copyString( volatile char* original, char* new, uint8_t length ) {

	// Iterate through string and copy each char
	int i;
	for( i=0; i<=length; i++ ) {
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	3301      	adds	r3, #1
 8000f16:	617b      	str	r3, [r7, #20]
 8000f18:	79fa      	ldrb	r2, [r7, #7]
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	daef      	bge.n	8000f00 <copyString+0x14>
		new[i] = original[i];
	}
}
 8000f20:	371c      	adds	r7, #28
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop

08000f2c <setMotor>:


/*********************************************************************************************
 * Set the motor output and speed
 *********************************************************************************************/
uint8_t setMotor( MotorOutput motor_output, uint8_t speed ) {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4602      	mov	r2, r0
 8000f34:	460b      	mov	r3, r1
 8000f36:	71fa      	strb	r2, [r7, #7]
 8000f38:	71bb      	strb	r3, [r7, #6]

	switch( motor_output ) {
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	2b03      	cmp	r3, #3
 8000f3e:	d831      	bhi.n	8000fa4 <setMotor+0x78>
 8000f40:	a201      	add	r2, pc, #4	; (adr r2, 8000f48 <setMotor+0x1c>)
 8000f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f46:	bf00      	nop
 8000f48:	08000f59 	.word	0x08000f59
 8000f4c:	08000f6b 	.word	0x08000f6b
 8000f50:	08000f7f 	.word	0x08000f7f
 8000f54:	08000f93 	.word	0x08000f93
			case coast:
				pwmSet(0, motor1);
 8000f58:	2000      	movs	r0, #0
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	f000 f828 	bl	8000fb0 <pwmSet>
				pwmSet(0, motor2);
 8000f60:	2000      	movs	r0, #0
 8000f62:	2101      	movs	r1, #1
 8000f64:	f000 f824 	bl	8000fb0 <pwmSet>
				break;
 8000f68:	e01c      	b.n	8000fa4 <setMotor+0x78>
			case reverse:
				pwmSet(0, motor1);
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	f000 f81f 	bl	8000fb0 <pwmSet>
				pwmSet(speed, motor2);
 8000f72:	79bb      	ldrb	r3, [r7, #6]
 8000f74:	4618      	mov	r0, r3
 8000f76:	2101      	movs	r1, #1
 8000f78:	f000 f81a 	bl	8000fb0 <pwmSet>
				break;
 8000f7c:	e012      	b.n	8000fa4 <setMotor+0x78>
			case forward:
				pwmSet(speed, motor1);
 8000f7e:	79bb      	ldrb	r3, [r7, #6]
 8000f80:	4618      	mov	r0, r3
 8000f82:	2100      	movs	r1, #0
 8000f84:	f000 f814 	bl	8000fb0 <pwmSet>
				pwmSet(0, motor2);
 8000f88:	2000      	movs	r0, #0
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	f000 f810 	bl	8000fb0 <pwmSet>
				break;
 8000f90:	e008      	b.n	8000fa4 <setMotor+0x78>
			case brake:
				pwmSet(1, motor1);
 8000f92:	2001      	movs	r0, #1
 8000f94:	2100      	movs	r1, #0
 8000f96:	f000 f80b 	bl	8000fb0 <pwmSet>
				pwmSet(1, motor2);
 8000f9a:	2001      	movs	r0, #1
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	f000 f807 	bl	8000fb0 <pwmSet>
				break;
 8000fa2:	bf00      	nop
	}

	return SUCCESS;
 8000fa4:	2301      	movs	r3, #1
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop

08000fb0 <pwmSet>:


/*********************************************************************************************
 * Set PWM to given duty cycle
 *********************************************************************************************/
void pwmSet(uint8_t dutyCycle, Motor motor) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	460b      	mov	r3, r1
 8000fba:	71fa      	strb	r2, [r7, #7]
 8000fbc:	71bb      	strb	r3, [r7, #6]
	// Timer output compare initialization
	TIM_OCInitTypeDef TIM_OC_InitStructure;

	// Configure TIM OC
	TIM_OC_InitStructure.TIM_OCMode = TIM_OCMode_PWM2;					// PWM 1 = Clear on match, PWM 2 = Set on match
 8000fbe:	2370      	movs	r3, #112	; 0x70
 8000fc0:	813b      	strh	r3, [r7, #8]
	TIM_OC_InitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	817b      	strh	r3, [r7, #10]
	TIM_OC_InitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	82bb      	strh	r3, [r7, #20]

	// Convert duty cycle to TIM pulse
	uint32_t duty = (PWM_TIM_PERIOD + 1) * dutyCycle;
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	f246 227b 	movw	r2, #25211	; 0x627b
 8000fd0:	fb02 f303 	mul.w	r3, r2, r3
 8000fd4:	61fb      	str	r3, [r7, #28]
	duty = (uint32_t) ((duty/100));
 8000fd6:	69fa      	ldr	r2, [r7, #28]
 8000fd8:	4b19      	ldr	r3, [pc, #100]	; (8001040 <pwmSet+0x90>)
 8000fda:	fba3 1302 	umull	r1, r3, r3, r2
 8000fde:	095b      	lsrs	r3, r3, #5
 8000fe0:	61fb      	str	r3, [r7, #28]

	// Set duty cycle
	TIM_OC_InitStructure.TIM_Pulse = duty;
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	613b      	str	r3, [r7, #16]

	// Select the corresponding OCInit function
	switch( motor ) {
 8000fe6:	79bb      	ldrb	r3, [r7, #6]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d00f      	beq.n	800100c <pwmSet+0x5c>
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d018      	beq.n	8001022 <pwmSet+0x72>
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d000      	beq.n	8000ff6 <pwmSet+0x46>
		case servo:
			TIM_OC4Init(PWM_TIM, &TIM_OC_InitStructure);
			TIM_OC4PreloadConfig(PWM_TIM, TIM_OCPreload_Enable);
			break;
		default:
			break;
 8000ff4:	e020      	b.n	8001038 <pwmSet+0x88>
	TIM_OC_InitStructure.TIM_Pulse = duty;

	// Select the corresponding OCInit function
	switch( motor ) {
		case motor1:
			TIM_OC2Init(PWM_TIM, &TIM_OC_InitStructure);
 8000ff6:	f107 0308 	add.w	r3, r7, #8
 8000ffa:	4812      	ldr	r0, [pc, #72]	; (8001044 <pwmSet+0x94>)
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f001 fbc5 	bl	800278c <TIM_OC2Init>
			TIM_OC2PreloadConfig(PWM_TIM, TIM_OCPreload_Enable);
 8001002:	4810      	ldr	r0, [pc, #64]	; (8001044 <pwmSet+0x94>)
 8001004:	2108      	movs	r1, #8
 8001006:	f001 fe75 	bl	8002cf4 <TIM_OC2PreloadConfig>
			break;
 800100a:	e015      	b.n	8001038 <pwmSet+0x88>
		case motor2:
			TIM_OC3Init(PWM_TIM, &TIM_OC_InitStructure);
 800100c:	f107 0308 	add.w	r3, r7, #8
 8001010:	480c      	ldr	r0, [pc, #48]	; (8001044 <pwmSet+0x94>)
 8001012:	4619      	mov	r1, r3
 8001014:	f001 fc42 	bl	800289c <TIM_OC3Init>
			TIM_OC3PreloadConfig(PWM_TIM, TIM_OCPreload_Enable);
 8001018:	480a      	ldr	r0, [pc, #40]	; (8001044 <pwmSet+0x94>)
 800101a:	2108      	movs	r1, #8
 800101c:	f001 fe88 	bl	8002d30 <TIM_OC3PreloadConfig>
			break;
 8001020:	e00a      	b.n	8001038 <pwmSet+0x88>
		case servo:
			TIM_OC4Init(PWM_TIM, &TIM_OC_InitStructure);
 8001022:	f107 0308 	add.w	r3, r7, #8
 8001026:	4807      	ldr	r0, [pc, #28]	; (8001044 <pwmSet+0x94>)
 8001028:	4619      	mov	r1, r3
 800102a:	f001 fcbd 	bl	80029a8 <TIM_OC4Init>
			TIM_OC4PreloadConfig(PWM_TIM, TIM_OCPreload_Enable);
 800102e:	4805      	ldr	r0, [pc, #20]	; (8001044 <pwmSet+0x94>)
 8001030:	2108      	movs	r1, #8
 8001032:	f001 fe99 	bl	8002d68 <TIM_OC4PreloadConfig>
			break;
 8001036:	bf00      	nop
		default:
			break;
	}
}
 8001038:	3720      	adds	r7, #32
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	51eb851f 	.word	0x51eb851f
 8001044:	40000400 	.word	0x40000400

08001048 <prvSetMotorCallback>:


/*********************************************************************************************
 * Timer callback to read photo resistors
 *********************************************************************************************/
void prvSetMotorCallback( TimerHandle_t pxTimer ) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]

//	static uint8_t state = 0;

	pwmSet(0, servo);
 8001050:	2000      	movs	r0, #0
 8001052:	2102      	movs	r1, #2
 8001054:	f7ff ffac 	bl	8000fb0 <pwmSet>
	setMotor(forward, 50);
 8001058:	2002      	movs	r0, #2
 800105a:	2132      	movs	r1, #50	; 0x32
 800105c:	f7ff ff66 	bl	8000f2c <setMotor>
//			state = 0;
//		default:
//			break;
//	}

}
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop

08001068 <main>:


#include "main.h"


int main(void) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af04      	add	r7, sp, #16

	// Create initial task to connect to Base Station
	xTaskCreate( prvSetupTask, "", 300 * sizeof(uint8_t), NULL, setupPriority, xSetupHandle );
 800106e:	4b09      	ldr	r3, [pc, #36]	; (8001094 <main+0x2c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2201      	movs	r2, #1
 8001074:	9200      	str	r2, [sp, #0]
 8001076:	9301      	str	r3, [sp, #4]
 8001078:	2300      	movs	r3, #0
 800107a:	9302      	str	r3, [sp, #8]
 800107c:	2300      	movs	r3, #0
 800107e:	9303      	str	r3, [sp, #12]
 8001080:	4805      	ldr	r0, [pc, #20]	; (8001098 <main+0x30>)
 8001082:	4906      	ldr	r1, [pc, #24]	; (800109c <main+0x34>)
 8001084:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001088:	2300      	movs	r3, #0
 800108a:	f005 f83d 	bl	8006108 <xTaskGenericCreate>

	// Start the scheduler which begins to run the tasks
	vTaskStartScheduler();
 800108e:	f005 fc2f 	bl	80068f0 <vTaskStartScheduler>
	/* If all is well, the scheduler will now be running, and the following line
	will never be reached.  If the following line does execute, then there was
	insufficient FreeRTOS heap memory available for the idle and/or timer tasks
	to be created.  See the memory management section on the FreeRTOS web site
	for more details. */
	for( ;; );
 8001092:	e7fe      	b.n	8001092 <main+0x2a>
 8001094:	20000074 	.word	0x20000074
 8001098:	080010a1 	.word	0x080010a1
 800109c:	08008d84 	.word	0x08008d84

080010a0 <prvSetupTask>:


/*********************************************************************************************
 * Setup hardware/software
 *********************************************************************************************/
void prvSetupTask( void *pvParameters ) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af04      	add	r7, sp, #16
 80010a6:	6078      	str	r0, [r7, #4]

	// Setup hardware
	prvSetupHardware();
 80010a8:	f000 f83c 	bl	8001124 <prvSetupHardware>

	// Test LEDs and indicate program is starting
	prvBlinkLeds();
 80010ac:	f000 f84e 	bl	800114c <prvBlinkLeds>

	// Set motors
	swTimerStart( set_motor, 0 );
 80010b0:	4b15      	ldr	r3, [pc, #84]	; (8001108 <prvSetupTask+0x68>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4618      	mov	r0, r3
 80010b6:	2100      	movs	r1, #0
 80010b8:	f7ff fa0e 	bl	80004d8 <swTimerStart>

	// Setup WiFi connection
	prvSetupWifi();
 80010bc:	f000 f8a4 	bl	8001208 <prvSetupWifi>

	// Set initial mode to allModes
	my_mode = allModes;
 80010c0:	4b12      	ldr	r3, [pc, #72]	; (800110c <prvSetupTask+0x6c>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	701a      	strb	r2, [r3, #0]

	// Create queue for packets
	xPacketQueue = xQueueCreate( maxPacketQueueLength, MAX_LENGTH*sizeof(uint8_t) );
 80010c6:	2005      	movs	r0, #5
 80010c8:	2110      	movs	r1, #16
 80010ca:	2200      	movs	r2, #0
 80010cc:	f006 fd88 	bl	8007be0 <xQueueGenericCreate>
 80010d0:	4602      	mov	r2, r0
 80010d2:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <prvSetupTask+0x70>)
 80010d4:	601a      	str	r2, [r3, #0]

	// Create initial task to connect to Base Station
	xTaskCreate( prvConnectTask, "", 300 * sizeof(uint8_t), NULL, connectPriority, xConnectHandle );
 80010d6:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <prvSetupTask+0x74>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2201      	movs	r2, #1
 80010dc:	9200      	str	r2, [sp, #0]
 80010de:	9301      	str	r3, [sp, #4]
 80010e0:	2300      	movs	r3, #0
 80010e2:	9302      	str	r3, [sp, #8]
 80010e4:	2300      	movs	r3, #0
 80010e6:	9303      	str	r3, [sp, #12]
 80010e8:	480b      	ldr	r0, [pc, #44]	; (8001118 <prvSetupTask+0x78>)
 80010ea:	490c      	ldr	r1, [pc, #48]	; (800111c <prvSetupTask+0x7c>)
 80010ec:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010f0:	2300      	movs	r3, #0
 80010f2:	f005 f809 	bl	8006108 <xTaskGenericCreate>

	// Delete this task
	vTaskDelete( xSetupHandle );
 80010f6:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <prvSetupTask+0x80>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f005 f8a6 	bl	800624c <vTaskDelete>
}
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	2001c1d0 	.word	0x2001c1d0
 800110c:	2001c22e 	.word	0x2001c22e
 8001110:	2001c234 	.word	0x2001c234
 8001114:	20000078 	.word	0x20000078
 8001118:	08001245 	.word	0x08001245
 800111c:	08008d84 	.word	0x08008d84
 8001120:	20000074 	.word	0x20000074

08001124 <prvSetupHardware>:


/*********************************************************************************************
 * Setup relevant hardware
 *********************************************************************************************/
static void prvSetupHardware( void ) {
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
	// Ensure that all 4 interrupt priority bits are used as the pre-emption priority
	NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );
 8001128:	f44f 7040 	mov.w	r0, #768	; 0x300
 800112c:	f004 fc5c 	bl	80059e8 <NVIC_PriorityGroupConfig>

	// Setup LEDs
	ledInit();
 8001130:	f000 f9a6 	bl	8001480 <ledInit>

	// Setup WiFi
	wifiInit();
 8001134:	f000 f9f0 	bl	8001518 <wifiInit>

	// Setup PWM
	pwmInit();
 8001138:	f000 fa4c 	bl	80015d4 <pwmInit>

	// Setup Photo Resistors
	photoResistorInit();
 800113c:	f000 faac 	bl	8001698 <photoResistorInit>

	// Setup Measured Power
	measuredPowerInit();
 8001140:	f000 faf4 	bl	800172c <measuredPowerInit>

	// Setup Ultrasonic
	ultrasonicInit();
 8001144:	f000 fb16 	bl	8001774 <ultrasonicInit>
}
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop

0800114c <prvBlinkLeds>:


/*********************************************************************************************
 * Blink LEDs on board
 *********************************************************************************************/
static void prvBlinkLeds( void ) {
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
	// Turn on and off each LED in order

	// Error
	LED_ERROR_PORT->ON = LED_ERROR_PIN;
 8001150:	4b2b      	ldr	r3, [pc, #172]	; (8001200 <prvBlinkLeds+0xb4>)
 8001152:	2280      	movs	r2, #128	; 0x80
 8001154:	831a      	strh	r2, [r3, #24]
	swDelay(100);
 8001156:	2064      	movs	r0, #100	; 0x64
 8001158:	f7ff fa1c 	bl	8000594 <swDelay>
	LED_ERROR_PORT->OFF = LED_ERROR_PIN;
 800115c:	4b28      	ldr	r3, [pc, #160]	; (8001200 <prvBlinkLeds+0xb4>)
 800115e:	2280      	movs	r2, #128	; 0x80
 8001160:	835a      	strh	r2, [r3, #26]

	// Wifi
	LED_WIFI_PORT->ON = LED_WIFI_RX_PIN;
 8001162:	4b27      	ldr	r3, [pc, #156]	; (8001200 <prvBlinkLeds+0xb4>)
 8001164:	2220      	movs	r2, #32
 8001166:	831a      	strh	r2, [r3, #24]
	swDelay(100);
 8001168:	2064      	movs	r0, #100	; 0x64
 800116a:	f7ff fa13 	bl	8000594 <swDelay>
	LED_WIFI_PORT->OFF = LED_WIFI_RX_PIN;
 800116e:	4b24      	ldr	r3, [pc, #144]	; (8001200 <prvBlinkLeds+0xb4>)
 8001170:	2220      	movs	r2, #32
 8001172:	835a      	strh	r2, [r3, #26]

	LED_WIFI_PORT->ON = LED_WIFI_TX_PIN;
 8001174:	4b22      	ldr	r3, [pc, #136]	; (8001200 <prvBlinkLeds+0xb4>)
 8001176:	2240      	movs	r2, #64	; 0x40
 8001178:	831a      	strh	r2, [r3, #24]
	swDelay(100);
 800117a:	2064      	movs	r0, #100	; 0x64
 800117c:	f7ff fa0a 	bl	8000594 <swDelay>
	LED_WIFI_PORT->OFF = LED_WIFI_TX_PIN;
 8001180:	4b1f      	ldr	r3, [pc, #124]	; (8001200 <prvBlinkLeds+0xb4>)
 8001182:	2240      	movs	r2, #64	; 0x40
 8001184:	835a      	strh	r2, [r3, #26]

	// Lights
	LED_LIGHT_PORT->ON = LED_LIGHT_GREEN_PIN;
 8001186:	4b1f      	ldr	r3, [pc, #124]	; (8001204 <prvBlinkLeds+0xb8>)
 8001188:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800118c:	831a      	strh	r2, [r3, #24]
	swDelay(100);
 800118e:	2064      	movs	r0, #100	; 0x64
 8001190:	f7ff fa00 	bl	8000594 <swDelay>
	LED_LIGHT_PORT->OFF = LED_LIGHT_GREEN_PIN;
 8001194:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <prvBlinkLeds+0xb8>)
 8001196:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800119a:	835a      	strh	r2, [r3, #26]

	LED_LIGHT_PORT->ON = LED_LIGHT_YELLOW_PIN;
 800119c:	4b19      	ldr	r3, [pc, #100]	; (8001204 <prvBlinkLeds+0xb8>)
 800119e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011a2:	831a      	strh	r2, [r3, #24]
	swDelay(100);
 80011a4:	2064      	movs	r0, #100	; 0x64
 80011a6:	f7ff f9f5 	bl	8000594 <swDelay>
	LED_LIGHT_PORT->OFF = LED_LIGHT_YELLOW_PIN;
 80011aa:	4b16      	ldr	r3, [pc, #88]	; (8001204 <prvBlinkLeds+0xb8>)
 80011ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011b0:	835a      	strh	r2, [r3, #26]

	LED_LIGHT_PORT->ON = LED_LIGHT_RED_PIN;
 80011b2:	4b14      	ldr	r3, [pc, #80]	; (8001204 <prvBlinkLeds+0xb8>)
 80011b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011b8:	831a      	strh	r2, [r3, #24]
	swDelay(100);
 80011ba:	2064      	movs	r0, #100	; 0x64
 80011bc:	f7ff f9ea 	bl	8000594 <swDelay>
	LED_LIGHT_PORT->OFF = LED_LIGHT_RED_PIN;
 80011c0:	4b10      	ldr	r3, [pc, #64]	; (8001204 <prvBlinkLeds+0xb8>)
 80011c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011c6:	835a      	strh	r2, [r3, #26]

	// Mode
	LED_MODE_PORT->ON = LED_MODE_1_PIN;
 80011c8:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <prvBlinkLeds+0xb8>)
 80011ca:	2210      	movs	r2, #16
 80011cc:	831a      	strh	r2, [r3, #24]
	swDelay(100);
 80011ce:	2064      	movs	r0, #100	; 0x64
 80011d0:	f7ff f9e0 	bl	8000594 <swDelay>
	LED_MODE_PORT->OFF = LED_MODE_1_PIN;
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <prvBlinkLeds+0xb8>)
 80011d6:	2210      	movs	r2, #16
 80011d8:	835a      	strh	r2, [r3, #26]

	LED_MODE_PORT->ON = LED_MODE_2_PIN;
 80011da:	4b0a      	ldr	r3, [pc, #40]	; (8001204 <prvBlinkLeds+0xb8>)
 80011dc:	2220      	movs	r2, #32
 80011de:	831a      	strh	r2, [r3, #24]
	swDelay(100);
 80011e0:	2064      	movs	r0, #100	; 0x64
 80011e2:	f7ff f9d7 	bl	8000594 <swDelay>
	LED_MODE_PORT->OFF = LED_MODE_2_PIN;
 80011e6:	4b07      	ldr	r3, [pc, #28]	; (8001204 <prvBlinkLeds+0xb8>)
 80011e8:	2220      	movs	r2, #32
 80011ea:	835a      	strh	r2, [r3, #26]

	LED_MODE_PORT->ON = LED_MODE_3_PIN;
 80011ec:	4b05      	ldr	r3, [pc, #20]	; (8001204 <prvBlinkLeds+0xb8>)
 80011ee:	2240      	movs	r2, #64	; 0x40
 80011f0:	831a      	strh	r2, [r3, #24]
	swDelay(100);
 80011f2:	2064      	movs	r0, #100	; 0x64
 80011f4:	f7ff f9ce 	bl	8000594 <swDelay>
	LED_MODE_PORT->OFF = LED_MODE_3_PIN;
 80011f8:	4b02      	ldr	r3, [pc, #8]	; (8001204 <prvBlinkLeds+0xb8>)
 80011fa:	2240      	movs	r2, #64	; 0x40
 80011fc:	835a      	strh	r2, [r3, #26]
}
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40020400 	.word	0x40020400
 8001204:	40020800 	.word	0x40020800

08001208 <prvSetupWifi>:


/*********************************************************************************************
 * Setup Wifi connection
 *********************************************************************************************/
static void prvSetupWifi( void ) {
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
	// Turn on Echo commands (for Arduino)
//	sendPacket( "ATE1", 4);

	// Delay to give Wifi chip time to boot up
	swDelay(5000);
 800120c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001210:	f7ff f9c0 	bl	8000594 <swDelay>

	// Send AT
	sendPacket( "AT", 2, FALSE);
 8001214:	4809      	ldr	r0, [pc, #36]	; (800123c <prvSetupWifi+0x34>)
 8001216:	2102      	movs	r1, #2
 8001218:	2200      	movs	r2, #0
 800121a:	f7ff fb0f 	bl	800083c <sendPacket>
	swDelay(500);
 800121e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001222:	f7ff f9b7 	bl	8000594 <swDelay>
	// Connect to Wifi
//	sendPacket( "AT+CWJAP=\"OhmWreckers\",\"123\"", 28, FALSE);
//	swDelay(5000);

	// Connect to IP and set up TCP connection
	sendPacket( "AT+CIPSTART=\"TCP\",\"192.168.101.101\",1001", 40, FALSE);
 8001226:	4806      	ldr	r0, [pc, #24]	; (8001240 <prvSetupWifi+0x38>)
 8001228:	2128      	movs	r1, #40	; 0x28
 800122a:	2200      	movs	r2, #0
 800122c:	f7ff fb06 	bl	800083c <sendPacket>
	swDelay(2000);
 8001230:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001234:	f7ff f9ae 	bl	8000594 <swDelay>
}
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	08008d88 	.word	0x08008d88
 8001240:	08008d8c 	.word	0x08008d8c

08001244 <prvConnectTask>:
 * Initial bootup task to connect to Base Station
 * 		* Connect to Base Station 		- Send Ping packet
 * 		* Wait for response 			- Receive Ack packet
 * 		* If successful					- Turn on WiFi LEDs
 *********************************************************************************************/
void prvConnectTask( void *pvParameters ) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b08a      	sub	sp, #40	; 0x28
 8001248:	af04      	add	r7, sp, #16
 800124a:	6078      	str	r0, [r7, #4]

	// Setup local variables
	uint8_t send_ping = TRUE;
 800124c:	2301      	movs	r3, #1
 800124e:	75fb      	strb	r3, [r7, #23]

	// Let task run infinitely
	for(;;) {

		if( send_ping ) {
 8001250:	7dfb      	ldrb	r3, [r7, #23]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d017      	beq.n	8001286 <prvConnectTask+0x42>
			// Setup header to Base Station
			Header* header = pvPortMalloc( sizeof(Header) );
 8001256:	2005      	movs	r0, #5
 8001258:	f007 fb52 	bl	8008900 <pvPortMalloc>
 800125c:	6138      	str	r0, [r7, #16]
			header->dest = baseStation;
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	2202      	movs	r2, #2
 8001262:	701a      	strb	r2, [r3, #0]
			header->addr = MY_ADDR;
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	2201      	movs	r2, #1
 8001268:	705a      	strb	r2, [r3, #1]
			header->mode = allModes;
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	2200      	movs	r2, #0
 800126e:	709a      	strb	r2, [r3, #2]
			header->type = ping;
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	2201      	movs	r2, #1
 8001274:	70da      	strb	r2, [r3, #3]

			sendPing( header );
 8001276:	6938      	ldr	r0, [r7, #16]
 8001278:	f7ff fb72 	bl	8000960 <sendPing>

			vPortFree(header);
 800127c:	6938      	ldr	r0, [r7, #16]
 800127e:	f007 fbd7 	bl	8008a30 <vPortFree>

			send_ping = FALSE;
 8001282:	2300      	movs	r3, #0
 8001284:	75fb      	strb	r3, [r7, #23]
		}

		// Continue to send Ping packet until get an Ack
		if( process_packet ) {
 8001286:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <prvConnectTask+0xc0>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d038      	beq.n	8001300 <prvConnectTask+0xbc>

			// Create local string to represent the packet
			char* packet = pvPortMalloc( MAX_LENGTH*sizeof(uint8_t) );
 800128e:	2010      	movs	r0, #16
 8001290:	f007 fb36 	bl	8008900 <pvPortMalloc>
 8001294:	60f8      	str	r0, [r7, #12]

			// Pop packet from queue
			xQueueReceive( xPacketQueue, packet, 0 );
 8001296:	4b1c      	ldr	r3, [pc, #112]	; (8001308 <prvConnectTask+0xc4>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4618      	mov	r0, r3
 800129c:	68f9      	ldr	r1, [r7, #12]
 800129e:	2200      	movs	r2, #0
 80012a0:	2300      	movs	r3, #0
 80012a2:	f006 fe5d 	bl	8007f60 <xQueueGenericReceive>

			// Process packet
			PacketResult packet_result = handlePacket( packet );
 80012a6:	68f8      	ldr	r0, [r7, #12]
 80012a8:	f7ff fc00 	bl	8000aac <handlePacket>
 80012ac:	4603      	mov	r3, r0
 80012ae:	813b      	strh	r3, [r7, #8]

			// Free variables
			vPortFree( packet );
 80012b0:	68f8      	ldr	r0, [r7, #12]
 80012b2:	f007 fbbd 	bl	8008a30 <vPortFree>

			if( (packet_result.result == SUCCESS) && (packet_result.type == ack) ) {
 80012b6:	7a7b      	ldrb	r3, [r7, #9]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d11e      	bne.n	80012fa <prvConnectTask+0xb6>
 80012bc:	7a3b      	ldrb	r3, [r7, #8]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d11b      	bne.n	80012fa <prvConnectTask+0xb6>
				// Turn on LEDs to indicate success
				LED_WIFI_PORT->ON = LED_WIFI_TX_PIN | LED_WIFI_RX_PIN;
 80012c2:	4b12      	ldr	r3, [pc, #72]	; (800130c <prvConnectTask+0xc8>)
 80012c4:	2260      	movs	r2, #96	; 0x60
 80012c6:	831a      	strh	r2, [r3, #24]

				// Reset process_packet
				process_packet = FALSE;
 80012c8:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <prvConnectTask+0xc0>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	701a      	strb	r2, [r3, #0]

				// If successful, move on to next task
				xTaskCreate( prvModeOfOperationTask, "", 300 * sizeof(uint8_t), NULL, modeOfOperationPriority, xModeOfOperationHandle );
 80012ce:	4b10      	ldr	r3, [pc, #64]	; (8001310 <prvConnectTask+0xcc>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2201      	movs	r2, #1
 80012d4:	9200      	str	r2, [sp, #0]
 80012d6:	9301      	str	r3, [sp, #4]
 80012d8:	2300      	movs	r3, #0
 80012da:	9302      	str	r3, [sp, #8]
 80012dc:	2300      	movs	r3, #0
 80012de:	9303      	str	r3, [sp, #12]
 80012e0:	480c      	ldr	r0, [pc, #48]	; (8001314 <prvConnectTask+0xd0>)
 80012e2:	490d      	ldr	r1, [pc, #52]	; (8001318 <prvConnectTask+0xd4>)
 80012e4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80012e8:	2300      	movs	r3, #0
 80012ea:	f004 ff0d 	bl	8006108 <xTaskGenericCreate>

				// Delete this task
				vTaskDelete( xConnectHandle );
 80012ee:	4b0b      	ldr	r3, [pc, #44]	; (800131c <prvConnectTask+0xd8>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f004 ffaa 	bl	800624c <vTaskDelete>
 80012f8:	e002      	b.n	8001300 <prvConnectTask+0xbc>
			}
			 else {
				 send_ping = TRUE;
 80012fa:	2301      	movs	r3, #1
 80012fc:	75fb      	strb	r3, [r7, #23]
			}

		}
	}
 80012fe:	e7a7      	b.n	8001250 <prvConnectTask+0xc>
 8001300:	e7a6      	b.n	8001250 <prvConnectTask+0xc>
 8001302:	bf00      	nop
 8001304:	2001c230 	.word	0x2001c230
 8001308:	2001c234 	.word	0x2001c234
 800130c:	40020400 	.word	0x40020400
 8001310:	2000007c 	.word	0x2000007c
 8001314:	08001321 	.word	0x08001321
 8001318:	08008d84 	.word	0x08008d84
 800131c:	20000078 	.word	0x20000078

08001320 <prvModeOfOperationTask>:
/*********************************************************************************************
 * Initial bootup task to setup default mode of operation
 * 		* Indicate SAV needs to set default mode of operation
 * 		* Wait for changeMode packet
 *********************************************************************************************/
void prvModeOfOperationTask( void *pvParameters ) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	; 0x28
 8001324:	af04      	add	r7, sp, #16
 8001326:	6078      	str	r0, [r7, #4]

	// Send SetMode packet
	Header* header = pvPortMalloc( sizeof(Header) );
 8001328:	2005      	movs	r0, #5
 800132a:	f007 fae9 	bl	8008900 <pvPortMalloc>
 800132e:	6178      	str	r0, [r7, #20]
	header->dest = baseStation;
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	2202      	movs	r2, #2
 8001334:	701a      	strb	r2, [r3, #0]
	header->addr = MY_ADDR;
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	2201      	movs	r2, #1
 800133a:	705a      	strb	r2, [r3, #1]
	header->mode = allModes;
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	2200      	movs	r2, #0
 8001340:	709a      	strb	r2, [r3, #2]
	header->type = setMode;
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	2205      	movs	r2, #5
 8001346:	70da      	strb	r2, [r3, #3]
	sendSetMode( header );
 8001348:	6978      	ldr	r0, [r7, #20]
 800134a:	f7ff fb37 	bl	80009bc <sendSetMode>

	// Let task run infinitely
	for(;;) {

		if( process_packet ) {
 800134e:	4b20      	ldr	r3, [pc, #128]	; (80013d0 <prvModeOfOperationTask+0xb0>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d03b      	beq.n	80013ce <prvModeOfOperationTask+0xae>

			// Create local string to represent the packet
			char* packet = pvPortMalloc( MAX_LENGTH*sizeof(uint8_t) );
 8001356:	2010      	movs	r0, #16
 8001358:	f007 fad2 	bl	8008900 <pvPortMalloc>
 800135c:	6138      	str	r0, [r7, #16]

			// Pop packet from queue
			xQueueReceive( xPacketQueue, packet, 0 );
 800135e:	4b1d      	ldr	r3, [pc, #116]	; (80013d4 <prvModeOfOperationTask+0xb4>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	6939      	ldr	r1, [r7, #16]
 8001366:	2200      	movs	r2, #0
 8001368:	2300      	movs	r3, #0
 800136a:	f006 fdf9 	bl	8007f60 <xQueueGenericReceive>

			// Process packet
			PacketResult packet_result = handlePacket( packet );
 800136e:	6938      	ldr	r0, [r7, #16]
 8001370:	f7ff fb9c 	bl	8000aac <handlePacket>
 8001374:	4603      	mov	r3, r0
 8001376:	81bb      	strh	r3, [r7, #12]

			// Free variables
			vPortFree( packet );
 8001378:	6938      	ldr	r0, [r7, #16]
 800137a:	f007 fb59 	bl	8008a30 <vPortFree>

			if( (packet_result.result == SUCCESS) && (packet_result.type == changeMode) ) {
 800137e:	7b7b      	ldrb	r3, [r7, #13]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d11b      	bne.n	80013bc <prvModeOfOperationTask+0x9c>
 8001384:	7b3b      	ldrb	r3, [r7, #12]
 8001386:	2b04      	cmp	r3, #4
 8001388:	d118      	bne.n	80013bc <prvModeOfOperationTask+0x9c>

				// Reset process_packet
				process_packet = FALSE;
 800138a:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <prvModeOfOperationTask+0xb0>)
 800138c:	2200      	movs	r2, #0
 800138e:	701a      	strb	r2, [r3, #0]

				// If successful, move on to next task
				xTaskCreate( prvTrafficLightTask, "", ( unsigned short ) 300, NULL, trafficLightPriority, xTrafficLightHandle );
 8001390:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <prvModeOfOperationTask+0xb8>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2201      	movs	r2, #1
 8001396:	9200      	str	r2, [sp, #0]
 8001398:	9301      	str	r3, [sp, #4]
 800139a:	2300      	movs	r3, #0
 800139c:	9302      	str	r3, [sp, #8]
 800139e:	2300      	movs	r3, #0
 80013a0:	9303      	str	r3, [sp, #12]
 80013a2:	480e      	ldr	r0, [pc, #56]	; (80013dc <prvModeOfOperationTask+0xbc>)
 80013a4:	490e      	ldr	r1, [pc, #56]	; (80013e0 <prvModeOfOperationTask+0xc0>)
 80013a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80013aa:	2300      	movs	r3, #0
 80013ac:	f004 feac 	bl	8006108 <xTaskGenericCreate>

				// Delete this task
				vTaskDelete( xModeOfOperationHandle );
 80013b0:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <prvModeOfOperationTask+0xc4>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f004 ff49 	bl	800624c <vTaskDelete>
 80013ba:	e008      	b.n	80013ce <prvModeOfOperationTask+0xae>
			} else {
				// Throw error
				LED_ERROR_PORT->ON &= LED_ERROR_PIN;
 80013bc:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <prvModeOfOperationTask+0xc8>)
 80013be:	4a0a      	ldr	r2, [pc, #40]	; (80013e8 <prvModeOfOperationTask+0xc8>)
 80013c0:	8b12      	ldrh	r2, [r2, #24]
 80013c2:	b292      	uxth	r2, r2
 80013c4:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80013c8:	b292      	uxth	r2, r2
 80013ca:	831a      	strh	r2, [r3, #24]
			}
		}
	}
 80013cc:	e7bf      	b.n	800134e <prvModeOfOperationTask+0x2e>
 80013ce:	e7be      	b.n	800134e <prvModeOfOperationTask+0x2e>
 80013d0:	2001c230 	.word	0x2001c230
 80013d4:	2001c234 	.word	0x2001c234
 80013d8:	20000080 	.word	0x20000080
 80013dc:	080013ed 	.word	0x080013ed
 80013e0:	08008d84 	.word	0x08008d84
 80013e4:	2000007c 	.word	0x2000007c
 80013e8:	40020400 	.word	0x40020400

080013ec <prvTrafficLightTask>:

/*********************************************************************************************
 * Task to handle (TrafficLight) packets
 * 		*
 *********************************************************************************************/
void prvTrafficLightTask( void *pvParameters ) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]

	// Read Measured Power
	swTimerStart( read_power, 0 );
 80013f4:	4b13      	ldr	r3, [pc, #76]	; (8001444 <prvTrafficLightTask+0x58>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	2100      	movs	r1, #0
 80013fc:	f7ff f86c 	bl	80004d8 <swTimerStart>

	// Read Photo Resistor
	swTimerStart( read_photo, 0 );
 8001400:	4b11      	ldr	r3, [pc, #68]	; (8001448 <prvTrafficLightTask+0x5c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	2100      	movs	r1, #0
 8001408:	f7ff f866 	bl	80004d8 <swTimerStart>
//	swTimerStart( set_motor, 0 );

	// Let task run infinitely
	for(;;) {

		if( process_packet ) {
 800140c:	4b0f      	ldr	r3, [pc, #60]	; (800144c <prvTrafficLightTask+0x60>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d015      	beq.n	8001440 <prvTrafficLightTask+0x54>

			// Create local string to represent the packet
			char* packet = pvPortMalloc( MAX_LENGTH*sizeof(uint8_t) );
 8001414:	2010      	movs	r0, #16
 8001416:	f007 fa73 	bl	8008900 <pvPortMalloc>
 800141a:	60f8      	str	r0, [r7, #12]

			// Pop packet from queue
			xQueueReceive( xPacketQueue, packet, 0 );
 800141c:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <prvTrafficLightTask+0x64>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	68f9      	ldr	r1, [r7, #12]
 8001424:	2200      	movs	r2, #0
 8001426:	2300      	movs	r3, #0
 8001428:	f006 fd9a 	bl	8007f60 <xQueueGenericReceive>

			// Process packet
			handlePacket( packet );
 800142c:	68f8      	ldr	r0, [r7, #12]
 800142e:	f7ff fb3d 	bl	8000aac <handlePacket>

			// Free variables
			vPortFree( packet );
 8001432:	68f8      	ldr	r0, [r7, #12]
 8001434:	f007 fafc 	bl	8008a30 <vPortFree>

			// Reset process_packet
			process_packet = FALSE;
 8001438:	4b04      	ldr	r3, [pc, #16]	; (800144c <prvTrafficLightTask+0x60>)
 800143a:	2200      	movs	r2, #0
 800143c:	701a      	strb	r2, [r3, #0]
		}
	}
 800143e:	e7e5      	b.n	800140c <prvTrafficLightTask+0x20>
 8001440:	e7e4      	b.n	800140c <prvTrafficLightTask+0x20>
 8001442:	bf00      	nop
 8001444:	2001c1f4 	.word	0x2001c1f4
 8001448:	2001c1ec 	.word	0x2001c1ec
 800144c:	2001c230 	.word	0x2001c230
 8001450:	2001c234 	.word	0x2001c234

08001454 <vApplicationMallocFailedHook>:

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 * Functions to handle errors if they occur
 *%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */
void vApplicationMallocFailedHook( void )
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
	free memory available in the FreeRTOS heap.  pvPortMalloc() is called
	internally by FreeRTOS API functions that create tasks, queues, software
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */

	for( ;; );
 8001458:	e7fe      	b.n	8001458 <vApplicationMallocFailedHook+0x4>
 800145a:	bf00      	nop

0800145c <vApplicationStackOverflowHook>:

/*********************************************************************************************
 * Functions to handle errors if they occur
 *********************************************************************************************/
void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	for( ;; );
 8001466:	e7fe      	b.n	8001466 <vApplicationStackOverflowHook+0xa>

08001468 <vApplicationIdleHook>:

/*********************************************************************************************
 * Functions to handle errors if they occur
 *********************************************************************************************/
void vApplicationIdleHook( void )
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
volatile size_t xFreeStackSpace;

	/* This function is called on each cycle of the idle task.  In this case it
	does nothing useful, other than report the amout of FreeRTOS heap that
	remains unallocated. */
	xFreeStackSpace = xPortGetFreeHeapSize();
 800146e:	f007 fb17 	bl	8008aa0 <xPortGetFreeHeapSize>
 8001472:	4603      	mov	r3, r0
 8001474:	607b      	str	r3, [r7, #4]

	if( xFreeStackSpace > 100 )
 8001476:	687b      	ldr	r3, [r7, #4]
		/* By now, the kernel has allocated everything it is going to, so
		if there is a lot of heap remaining unallocated then
		the value of configTOTAL_HEAP_SIZE in FreeRTOSConfig.h can be
		reduced accordingly. */
	}
}
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop

08001480 <ledInit>:
void ADC_Configuration(void);

/*********************************************************************************************
 * Initialize LEDs
 *********************************************************************************************/
void ledInit() {
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef  GPIO_InitStructure;

	// Enable clock
	RCC_AHB1PeriphClockCmd( LED_LIGHT_CLK | LED_WIFI_CLK | LED_MODE_CLK | LED_ERROR_CLK, ENABLE);
 8001486:	2006      	movs	r0, #6
 8001488:	2101      	movs	r1, #1
 800148a:	f002 ffd1 	bl	8004430 <RCC_AHB1PeriphClockCmd>

	// Configure GPIO
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800148e:	2301      	movs	r3, #1
 8001490:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001492:	2302      	movs	r3, #2
 8001494:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001496:	2300      	movs	r3, #0
 8001498:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800149a:	2301      	movs	r3, #1
 800149c:	71fb      	strb	r3, [r7, #7]

	GPIO_InitStructure.GPIO_Pin = LED_LIGHT_PINS;
 800149e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80014a2:	603b      	str	r3, [r7, #0]
	GPIO_Init(LED_LIGHT_PORT, &GPIO_InitStructure);
 80014a4:	463b      	mov	r3, r7
 80014a6:	4818      	ldr	r0, [pc, #96]	; (8001508 <ledInit+0x88>)
 80014a8:	4619      	mov	r1, r3
 80014aa:	f003 faab 	bl	8004a04 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = LED_WIFI_PINS;
 80014ae:	2360      	movs	r3, #96	; 0x60
 80014b0:	603b      	str	r3, [r7, #0]
	GPIO_Init(LED_WIFI_PORT, &GPIO_InitStructure);
 80014b2:	463b      	mov	r3, r7
 80014b4:	4815      	ldr	r0, [pc, #84]	; (800150c <ledInit+0x8c>)
 80014b6:	4619      	mov	r1, r3
 80014b8:	f003 faa4 	bl	8004a04 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = LED_MODE_PINS;
 80014bc:	2370      	movs	r3, #112	; 0x70
 80014be:	603b      	str	r3, [r7, #0]
	GPIO_Init(LED_MODE_PORT, &GPIO_InitStructure);
 80014c0:	463b      	mov	r3, r7
 80014c2:	4811      	ldr	r0, [pc, #68]	; (8001508 <ledInit+0x88>)
 80014c4:	4619      	mov	r1, r3
 80014c6:	f003 fa9d 	bl	8004a04 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = LED_ERROR_PIN;
 80014ca:	2380      	movs	r3, #128	; 0x80
 80014cc:	603b      	str	r3, [r7, #0]
	GPIO_Init(LED_ERROR_PORT, &GPIO_InitStructure);
 80014ce:	463b      	mov	r3, r7
 80014d0:	480e      	ldr	r0, [pc, #56]	; (800150c <ledInit+0x8c>)
 80014d2:	4619      	mov	r1, r3
 80014d4:	f003 fa96 	bl	8004a04 <GPIO_Init>

	// Make sure all LEDs are off
	LED_LIGHT_PORT->OFF = LED_LIGHT_PINS;
 80014d8:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <ledInit+0x88>)
 80014da:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80014de:	835a      	strh	r2, [r3, #26]
	LED_WIFI_PORT->OFF = LED_WIFI_PINS;
 80014e0:	4b0a      	ldr	r3, [pc, #40]	; (800150c <ledInit+0x8c>)
 80014e2:	2260      	movs	r2, #96	; 0x60
 80014e4:	835a      	strh	r2, [r3, #26]
	LED_MODE_PORT->OFF = LED_MODE_PINS;
 80014e6:	4b08      	ldr	r3, [pc, #32]	; (8001508 <ledInit+0x88>)
 80014e8:	2270      	movs	r2, #112	; 0x70
 80014ea:	835a      	strh	r2, [r3, #26]
	LED_ERROR_PORT->OFF = LED_ERROR_PIN;
 80014ec:	4b07      	ldr	r3, [pc, #28]	; (800150c <ledInit+0x8c>)
 80014ee:	2280      	movs	r2, #128	; 0x80
 80014f0:	835a      	strh	r2, [r3, #26]

	// Initialize Traffic Light timer
	blinkTrafficLight = swTimerInit( 100, REPEAT, prvblinkTrafficLightCallback );
 80014f2:	2064      	movs	r0, #100	; 0x64
 80014f4:	2101      	movs	r1, #1
 80014f6:	4a06      	ldr	r2, [pc, #24]	; (8001510 <ledInit+0x90>)
 80014f8:	f7fe ffd4 	bl	80004a4 <swTimerInit>
 80014fc:	4602      	mov	r2, r0
 80014fe:	4b05      	ldr	r3, [pc, #20]	; (8001514 <ledInit+0x94>)
 8001500:	601a      	str	r2, [r3, #0]
}
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40020800 	.word	0x40020800
 800150c:	40020400 	.word	0x40020400
 8001510:	080001c9 	.word	0x080001c9
 8001514:	2001c1e8 	.word	0x2001c1e8

08001518 <wifiInit>:


/*********************************************************************************************
 * Initialize WiFi USART GPIO
 *********************************************************************************************/
void wifiInit() {
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef     GPIO_InitStruct;

	// Enable clock
	RCC_AHB1PeriphClockCmd(WIFI_CLK, ENABLE);
 800151e:	2002      	movs	r0, #2
 8001520:	2101      	movs	r1, #1
 8001522:	f002 ff85 	bl	8004430 <RCC_AHB1PeriphClockCmd>

	// Set Pins to alternate function
	GPIO_PinAFConfig(WIFI_PORT, WIFI_TX_PINSOURCE, WIFI_AF);
 8001526:	480f      	ldr	r0, [pc, #60]	; (8001564 <wifiInit+0x4c>)
 8001528:	210a      	movs	r1, #10
 800152a:	2207      	movs	r2, #7
 800152c:	f003 fbd8 	bl	8004ce0 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(WIFI_PORT, WIFI_RX_PINSOURCE, WIFI_AF);
 8001530:	480c      	ldr	r0, [pc, #48]	; (8001564 <wifiInit+0x4c>)
 8001532:	210b      	movs	r1, #11
 8001534:	2207      	movs	r2, #7
 8001536:	f003 fbd3 	bl	8004ce0 <GPIO_PinAFConfig>

	// Initialize pins as alternating function
	GPIO_InitStruct.GPIO_Pin = WIFI_TX_PIN | WIFI_RX_PIN;
 800153a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800153e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8001540:	2302      	movs	r3, #2
 8001542:	713b      	strb	r3, [r7, #4]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8001544:	2300      	movs	r3, #0
 8001546:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8001548:	2301      	movs	r3, #1
 800154a:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 800154c:	2303      	movs	r3, #3
 800154e:	717b      	strb	r3, [r7, #5]
	GPIO_Init(WIFI_PORT, &GPIO_InitStruct);
 8001550:	463b      	mov	r3, r7
 8001552:	4804      	ldr	r0, [pc, #16]	; (8001564 <wifiInit+0x4c>)
 8001554:	4619      	mov	r1, r3
 8001556:	f003 fa55 	bl	8004a04 <GPIO_Init>

	wifiConfig();
 800155a:	f000 f805 	bl	8001568 <wifiConfig>
}
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40020400 	.word	0x40020400

08001568 <wifiConfig>:


/*********************************************************************************************
 * Initialize WiFi USART
 *********************************************************************************************/
void wifiConfig() {
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
	USART_InitTypeDef USART_InitStruct;
	NVIC_InitTypeDef NVIC_InitStruct;

	// Enable clock
	RCC_APB1PeriphClockCmd(WIFI_USART_CLK, ENABLE);
 800156e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001572:	2101      	movs	r1, #1
 8001574:	f002 ffb6 	bl	80044e4 <RCC_APB1PeriphClockCmd>

	// Initialize USART
	USART_InitStruct.USART_BaudRate = WIFI_USART_BAUD;
 8001578:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800157c:	60bb      	str	r3, [r7, #8]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 800157e:	2300      	movs	r3, #0
 8001580:	82bb      	strh	r3, [r7, #20]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 8001582:	230c      	movs	r3, #12
 8001584:	827b      	strh	r3, [r7, #18]
	USART_InitStruct.USART_Parity = USART_Parity_No;
 8001586:	2300      	movs	r3, #0
 8001588:	823b      	strh	r3, [r7, #16]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;
 800158a:	2300      	movs	r3, #0
 800158c:	81fb      	strh	r3, [r7, #14]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;
 800158e:	2300      	movs	r3, #0
 8001590:	81bb      	strh	r3, [r7, #12]
	USART_Cmd(WIFI_USART, ENABLE);
 8001592:	480f      	ldr	r0, [pc, #60]	; (80015d0 <wifiConfig+0x68>)
 8001594:	2101      	movs	r1, #1
 8001596:	f000 faf3 	bl	8001b80 <USART_Cmd>
	USART_Init(WIFI_USART, &USART_InitStruct);
 800159a:	f107 0308 	add.w	r3, r7, #8
 800159e:	480c      	ldr	r0, [pc, #48]	; (80015d0 <wifiConfig+0x68>)
 80015a0:	4619      	mov	r1, r3
 80015a2:	f000 f9d7 	bl	8001954 <USART_Init>

	// Enable RX interrupt
	USART_ITConfig(WIFI_USART, USART_IT_RXNE, ENABLE);
 80015a6:	480a      	ldr	r0, [pc, #40]	; (80015d0 <wifiConfig+0x68>)
 80015a8:	f240 5125 	movw	r1, #1317	; 0x525
 80015ac:	2201      	movs	r2, #1
 80015ae:	f000 fd0b 	bl	8001fc8 <USART_ITConfig>

	// Initialize NVIC
	NVIC_InitStruct.NVIC_IRQChannel = WIFI_USART_IRQ;
 80015b2:	2327      	movs	r3, #39	; 0x27
 80015b4:	713b      	strb	r3, [r7, #4]
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 80015b6:	2301      	movs	r3, #1
 80015b8:	71fb      	strb	r3, [r7, #7]
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	717b      	strb	r3, [r7, #5]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	71bb      	strb	r3, [r7, #6]
	NVIC_Init(&NVIC_InitStruct);
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	4618      	mov	r0, r3
 80015c6:	f004 fa21 	bl	8005a0c <NVIC_Init>
}
 80015ca:	3718      	adds	r7, #24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40004800 	.word	0x40004800

080015d4 <pwmInit>:


/*********************************************************************************************
 * Initialize PWM GPIO
 *********************************************************************************************/
void pwmInit() {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	// Enable clock
	RCC_AHB1PeriphClockCmd(PWM_MOTOR_CLK | PWM_SERVO_CLK, ENABLE);
 80015da:	2004      	movs	r0, #4
 80015dc:	2101      	movs	r1, #1
 80015de:	f002 ff27 	bl	8004430 <RCC_AHB1PeriphClockCmd>

	// Set alternate function
	GPIO_PinAFConfig(PWM_MOTOR_PORT, PWM_MOTOR_1_PINSOURCE, PWM_MOTOR_AF);
 80015e2:	481a      	ldr	r0, [pc, #104]	; (800164c <pwmInit+0x78>)
 80015e4:	2107      	movs	r1, #7
 80015e6:	2202      	movs	r2, #2
 80015e8:	f003 fb7a 	bl	8004ce0 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PWM_MOTOR_PORT, PWM_MOTOR_2_PINSOURCE, PWM_MOTOR_AF);
 80015ec:	4817      	ldr	r0, [pc, #92]	; (800164c <pwmInit+0x78>)
 80015ee:	2108      	movs	r1, #8
 80015f0:	2202      	movs	r2, #2
 80015f2:	f003 fb75 	bl	8004ce0 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PWM_SERVO_PORT, PWM_SERVO_PINSOURCE, PWM_SERVO_AF);
 80015f6:	4815      	ldr	r0, [pc, #84]	; (800164c <pwmInit+0x78>)
 80015f8:	2109      	movs	r1, #9
 80015fa:	2202      	movs	r2, #2
 80015fc:	f003 fb70 	bl	8004ce0 <GPIO_PinAFConfig>

	// Configure GPIO
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;					// Set pin to alternate mode
 8001600:	2302      	movs	r3, #2
 8001602:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001604:	2300      	movs	r3, #0
 8001606:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800160c:	2302      	movs	r3, #2
 800160e:	717b      	strb	r3, [r7, #5]

	GPIO_InitStructure.GPIO_Pin = PWM_MOTOR_1_PIN | PWM_MOTOR_2_PIN;
 8001610:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001614:	603b      	str	r3, [r7, #0]
	GPIO_Init(PWM_MOTOR_PORT, &GPIO_InitStructure);
 8001616:	463b      	mov	r3, r7
 8001618:	480c      	ldr	r0, [pc, #48]	; (800164c <pwmInit+0x78>)
 800161a:	4619      	mov	r1, r3
 800161c:	f003 f9f2 	bl	8004a04 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = PWM_SERVO_PIN;
 8001620:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001624:	603b      	str	r3, [r7, #0]
	GPIO_Init(PWM_SERVO_PORT, &GPIO_InitStructure);
 8001626:	463b      	mov	r3, r7
 8001628:	4808      	ldr	r0, [pc, #32]	; (800164c <pwmInit+0x78>)
 800162a:	4619      	mov	r1, r3
 800162c:	f003 f9ea 	bl	8004a04 <GPIO_Init>

	pwmTimerConfig();
 8001630:	f000 f812 	bl	8001658 <pwmTimerConfig>

	// Initialize set motor timer
	set_motor = swTimerInit( 1000, REPEAT, prvSetMotorCallback );
 8001634:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001638:	2101      	movs	r1, #1
 800163a:	4a05      	ldr	r2, [pc, #20]	; (8001650 <pwmInit+0x7c>)
 800163c:	f7fe ff32 	bl	80004a4 <swTimerInit>
 8001640:	4602      	mov	r2, r0
 8001642:	4b04      	ldr	r3, [pc, #16]	; (8001654 <pwmInit+0x80>)
 8001644:	601a      	str	r2, [r3, #0]
}
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40020800 	.word	0x40020800
 8001650:	08001049 	.word	0x08001049
 8001654:	2001c1d0 	.word	0x2001c1d0

08001658 <pwmTimerConfig>:


/*********************************************************************************************
 * Initializes Timer
 *********************************************************************************************/
void pwmTimerConfig() {
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef TIM_InitStructure;

	// Enable clock
	RCC_APB1PeriphClockCmd(PWM_TIM_CLK, ENABLE);
 800165e:	2002      	movs	r0, #2
 8001660:	2101      	movs	r1, #1
 8001662:	f002 ff3f 	bl	80044e4 <RCC_APB1PeriphClockCmd>
	/*******************************************
	 * For servo, want PWM pulses such that:
	 * 		- 50% duty (1500us) -> 0 degrees
	 * Max values: 700us - 2300us
	 *******************************************/
	TIM_InitStructure.TIM_Prescaler = PWM_TIM_PRESCALER;
 8001666:	2309      	movs	r3, #9
 8001668:	80bb      	strh	r3, [r7, #4]
	TIM_InitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800166a:	2300      	movs	r3, #0
 800166c:	80fb      	strh	r3, [r7, #6]
	TIM_InitStructure.TIM_Period = PWM_TIM_PERIOD;
 800166e:	f246 237a 	movw	r3, #25210	; 0x627a
 8001672:	60bb      	str	r3, [r7, #8]
	TIM_InitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8001674:	2300      	movs	r3, #0
 8001676:	81bb      	strh	r3, [r7, #12]
	TIM_InitStructure.TIM_RepetitionCounter = 0;						// Don't count repetitions
 8001678:	2300      	movs	r3, #0
 800167a:	73bb      	strb	r3, [r7, #14]
	TIM_TimeBaseInit(PWM_TIM, &TIM_InitStructure);
 800167c:	1d3b      	adds	r3, r7, #4
 800167e:	4805      	ldr	r0, [pc, #20]	; (8001694 <pwmTimerConfig+0x3c>)
 8001680:	4619      	mov	r1, r3
 8001682:	f000 fe67 	bl	8002354 <TIM_TimeBaseInit>

	// Start timer
	TIM_Cmd(PWM_TIM, ENABLE);
 8001686:	4803      	ldr	r0, [pc, #12]	; (8001694 <pwmTimerConfig+0x3c>)
 8001688:	2101      	movs	r1, #1
 800168a:	f000 ffe5 	bl	8002658 <TIM_Cmd>
}
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40000400 	.word	0x40000400

08001698 <photoResistorInit>:


/*********************************************************************************************
 * Initializes Photo Resistors
 *********************************************************************************************/
void photoResistorInit() {
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	// Enable clock
	RCC_AHB1PeriphClockCmd(PHOTO_CLK, ENABLE);
 800169e:	2004      	movs	r0, #4
 80016a0:	2101      	movs	r1, #1
 80016a2:	f002 fec5 	bl	8004430 <RCC_AHB1PeriphClockCmd>

	// Configure GPIO
	GPIO_InitStructure.GPIO_Pin = PHOTO_PINS;
 80016a6:	2307      	movs	r3, #7
 80016a8:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;					// Set pin to analog mode
 80016aa:	2303      	movs	r3, #3
 80016ac:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(PHOTO_PORT, &GPIO_InitStructure);
 80016b2:	463b      	mov	r3, r7
 80016b4:	4808      	ldr	r0, [pc, #32]	; (80016d8 <photoResistorInit+0x40>)
 80016b6:	4619      	mov	r1, r3
 80016b8:	f003 f9a4 	bl	8004a04 <GPIO_Init>

	// Configure ADC
	adcConfig();
 80016bc:	f000 f812 	bl	80016e4 <adcConfig>

	// Initialize read photo resistor timer
	read_photo = swTimerInit( 1000, REPEAT, prvReadPhotoCallback );
 80016c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016c4:	2101      	movs	r1, #1
 80016c6:	4a05      	ldr	r2, [pc, #20]	; (80016dc <photoResistorInit+0x44>)
 80016c8:	f7fe feec 	bl	80004a4 <swTimerInit>
 80016cc:	4602      	mov	r2, r0
 80016ce:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <photoResistorInit+0x48>)
 80016d0:	601a      	str	r2, [r3, #0]
}
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40020800 	.word	0x40020800
 80016dc:	080006d5 	.word	0x080006d5
 80016e0:	2001c1ec 	.word	0x2001c1ec

080016e4 <adcConfig>:


/*********************************************************************************************
 * Initializes ADC
 *********************************************************************************************/
void adcConfig() {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
	ADC_InitTypeDef  ADC_InitStructure;

	// Enable clock
	RCC_APB2PeriphClockCmd(PHOTO_ADC_CLK, ENABLE);
 80016ea:	f44f 7080 	mov.w	r0, #256	; 0x100
 80016ee:	2101      	movs	r1, #1
 80016f0:	f002 ff16 	bl	8004520 <RCC_APB2PeriphClockCmd>

	// Put everything back to default values
	ADC_DeInit();
 80016f4:	f003 fc44 	bl	8004f80 <ADC_DeInit>

	// Configure ADC
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 80016f8:	2300      	movs	r3, #0
 80016fa:	603b      	str	r3, [r7, #0]
	ADC_InitStructure.ADC_ScanConvMode = DISABLE;
 80016fc:	2300      	movs	r3, #0
 80016fe:	713b      	strb	r3, [r7, #4]
	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
 8001700:	2300      	movs	r3, #0
 8001702:	717b      	strb	r3, [r7, #5]
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8001704:	2300      	movs	r3, #0
 8001706:	60bb      	str	r3, [r7, #8]
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 8001708:	2300      	movs	r3, #0
 800170a:	613b      	str	r3, [r7, #16]
	ADC_InitStructure.ADC_NbrOfConversion= 1;
 800170c:	2301      	movs	r3, #1
 800170e:	753b      	strb	r3, [r7, #20]
	ADC_Init(PHOTO_ADC, &ADC_InitStructure);
 8001710:	463b      	mov	r3, r7
 8001712:	4805      	ldr	r0, [pc, #20]	; (8001728 <adcConfig+0x44>)
 8001714:	4619      	mov	r1, r3
 8001716:	f003 fc41 	bl	8004f9c <ADC_Init>

	// Enable ADC
	ADC_Cmd(PHOTO_ADC, ENABLE);
 800171a:	4803      	ldr	r0, [pc, #12]	; (8001728 <adcConfig+0x44>)
 800171c:	2101      	movs	r1, #1
 800171e:	f003 fced 	bl	80050fc <ADC_Cmd>
}
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40012000 	.word	0x40012000

0800172c <measuredPowerInit>:


/*********************************************************************************************
 * Initializes Measured Power GPIO
 *********************************************************************************************/
void measuredPowerInit() {
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	// Enable clock
	RCC_AHB1PeriphClockCmd(MEASURED_POWER_CLK, ENABLE);
 8001732:	2004      	movs	r0, #4
 8001734:	2101      	movs	r1, #1
 8001736:	f002 fe7b 	bl	8004430 <RCC_AHB1PeriphClockCmd>

	// Configure GPIO
	GPIO_InitStructure.GPIO_Pin = MEASURED_POWER_PIN;
 800173a:	2308      	movs	r3, #8
 800173c:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;					// Set pin to analog mode
 800173e:	2303      	movs	r3, #3
 8001740:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(MEASURED_POWER_PORT, &GPIO_InitStructure);
 8001746:	463b      	mov	r3, r7
 8001748:	4807      	ldr	r0, [pc, #28]	; (8001768 <measuredPowerInit+0x3c>)
 800174a:	4619      	mov	r1, r3
 800174c:	f003 f95a 	bl	8004a04 <GPIO_Init>

	// Note: Since both get initialized and use the same ADC, don't need to call it twice
	// adcConfig();

	// Initialize read measured power timer
	read_power = swTimerInit( 5000, REPEAT, prvReadPowerCallback );
 8001750:	f241 3088 	movw	r0, #5000	; 0x1388
 8001754:	2101      	movs	r1, #1
 8001756:	4a05      	ldr	r2, [pc, #20]	; (800176c <measuredPowerInit+0x40>)
 8001758:	f7fe fea4 	bl	80004a4 <swTimerInit>
 800175c:	4602      	mov	r2, r0
 800175e:	4b04      	ldr	r3, [pc, #16]	; (8001770 <measuredPowerInit+0x44>)
 8001760:	601a      	str	r2, [r3, #0]
}
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40020800 	.word	0x40020800
 800176c:	08000619 	.word	0x08000619
 8001770:	2001c1f4 	.word	0x2001c1f4

08001774 <ultrasonicInit>:


/*********************************************************************************************
 * Initializes Ultrasonic GPIO
 *********************************************************************************************/
void ultrasonicInit() {
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;

    // Enable clock
    RCC_AHB1PeriphClockCmd(ULTRA_CLK, ENABLE);
 800177a:	2001      	movs	r0, #1
 800177c:	2101      	movs	r1, #1
 800177e:	f002 fe57 	bl	8004430 <RCC_AHB1PeriphClockCmd>

    // Configure GPIO
    GPIO_InitStruct.GPIO_Pin = ULTRA_PINS;
 8001782:	23e0      	movs	r3, #224	; 0xe0
 8001784:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 8001786:	2300      	movs	r3, #0
 8001788:	713b      	strb	r3, [r7, #4]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 800178a:	2300      	movs	r3, #0
 800178c:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 800178e:	2301      	movs	r3, #1
 8001790:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8001792:	2303      	movs	r3, #3
 8001794:	717b      	strb	r3, [r7, #5]
	GPIO_Init(ULTRA_PORT, &GPIO_InitStruct);
 8001796:	463b      	mov	r3, r7
 8001798:	4805      	ldr	r0, [pc, #20]	; (80017b0 <ultrasonicInit+0x3c>)
 800179a:	4619      	mov	r1, r3
 800179c:	f003 f932 	bl	8004a04 <GPIO_Init>

	extiConfig();
 80017a0:	f000 f808 	bl	80017b4 <extiConfig>

	ultrasonicTimerConfig();
 80017a4:	f000 f82a 	bl	80017fc <ultrasonicTimerConfig>
}
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40020000 	.word	0x40020000

080017b4 <extiConfig>:


/*********************************************************************************************
 * Initializes Ultrasonic EXTI
 *********************************************************************************************/
void extiConfig() {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
    EXTI_InitTypeDef EXTI_InitStruct;

    // Set pinsources
    SYSCFG_EXTILineConfig(ULTRA_EXTI_PORT, ULTRA_EXTI_PINSOURCES);
 80017ba:	2000      	movs	r0, #0
 80017bc:	2107      	movs	r1, #7
 80017be:	f002 fac9 	bl	8003d54 <SYSCFG_EXTILineConfig>

    // Configure EXTI
    EXTI_InitStruct.EXTI_Line = ULTRA_EXTI_LINES;
 80017c2:	23e0      	movs	r3, #224	; 0xe0
 80017c4:	60bb      	str	r3, [r7, #8]
	EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 80017c6:	2301      	movs	r3, #1
 80017c8:	73bb      	strb	r3, [r7, #14]
	EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
 80017ca:	2300      	movs	r3, #0
 80017cc:	733b      	strb	r3, [r7, #12]
	EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
 80017ce:	2310      	movs	r3, #16
 80017d0:	737b      	strb	r3, [r7, #13]
	EXTI_Init(&EXTI_InitStruct);
 80017d2:	f107 0308 	add.w	r3, r7, #8
 80017d6:	4618      	mov	r0, r3
 80017d8:	f003 fae2 	bl	8004da0 <EXTI_Init>

	NVIC_InitTypeDef NVIC_InitStruct;

	// Configure Interrupt
	NVIC_InitStruct.NVIC_IRQChannel = ULTRA_EXTI_IRQ;
 80017dc:	2317      	movs	r3, #23
 80017de:	713b      	strb	r3, [r7, #4]
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0x00;
 80017e0:	2300      	movs	r3, #0
 80017e2:	717b      	strb	r3, [r7, #5]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0x01;
 80017e4:	2301      	movs	r3, #1
 80017e6:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 80017e8:	2301      	movs	r3, #1
 80017ea:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStruct);
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	4618      	mov	r0, r3
 80017f0:	f004 f90c 	bl	8005a0c <NVIC_Init>
}
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop

080017fc <ultrasonicTimerConfig>:


void ultrasonicTimerConfig() {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef timerInitStructure;

	// Enable clock
	RCC_APB1PeriphClockCmd(ULTRA_TIM_CLK, ENABLE);
 8001802:	2001      	movs	r0, #1
 8001804:	2101      	movs	r1, #1
 8001806:	f002 fe6d 	bl	80044e4 <RCC_APB1PeriphClockCmd>

	// Configure timer
	timerInitStructure.TIM_Prescaler = ULTRA_TIM_PRESCALER;
 800180a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800180e:	80bb      	strh	r3, [r7, #4]
	timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8001810:	2300      	movs	r3, #0
 8001812:	80fb      	strh	r3, [r7, #6]
	timerInitStructure.TIM_Period = ULTRA_TIM_PERIOD;
 8001814:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001818:	60bb      	str	r3, [r7, #8]
	timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 800181a:	2300      	movs	r3, #0
 800181c:	81bb      	strh	r3, [r7, #12]
	timerInitStructure.TIM_RepetitionCounter = 0;
 800181e:	2300      	movs	r3, #0
 8001820:	73bb      	strb	r3, [r7, #14]
	TIM_TimeBaseInit(ULTRA_TIM, &timerInitStructure);
 8001822:	1d3b      	adds	r3, r7, #4
 8001824:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001828:	4619      	mov	r1, r3
 800182a:	f000 fd93 	bl	8002354 <TIM_TimeBaseInit>

	// Enable timer
	TIM_Cmd(ULTRA_TIM, ENABLE);
 800182e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001832:	2101      	movs	r1, #1
 8001834:	f000 ff10 	bl	8002658 <TIM_Cmd>
}
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop

08001840 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	4b3a      	ldr	r3, [pc, #232]	; (8001934 <USART_DeInit+0xf4>)
 800184c:	429a      	cmp	r2, r3
 800184e:	d108      	bne.n	8001862 <USART_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8001850:	2010      	movs	r0, #16
 8001852:	2101      	movs	r1, #1
 8001854:	f002 fefa 	bl	800464c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8001858:	2010      	movs	r0, #16
 800185a:	2100      	movs	r1, #0
 800185c:	f002 fef6 	bl	800464c <RCC_APB2PeriphResetCmd>
 8001860:	e065      	b.n	800192e <USART_DeInit+0xee>
  }
  else if (USARTx == USART2)
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	4b34      	ldr	r3, [pc, #208]	; (8001938 <USART_DeInit+0xf8>)
 8001866:	429a      	cmp	r2, r3
 8001868:	d10a      	bne.n	8001880 <USART_DeInit+0x40>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 800186a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800186e:	2101      	movs	r1, #1
 8001870:	f002 fece 	bl	8004610 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8001874:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001878:	2100      	movs	r1, #0
 800187a:	f002 fec9 	bl	8004610 <RCC_APB1PeriphResetCmd>
 800187e:	e056      	b.n	800192e <USART_DeInit+0xee>
  }
  else if (USARTx == USART3)
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	4b2e      	ldr	r3, [pc, #184]	; (800193c <USART_DeInit+0xfc>)
 8001884:	429a      	cmp	r2, r3
 8001886:	d10a      	bne.n	800189e <USART_DeInit+0x5e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8001888:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800188c:	2101      	movs	r1, #1
 800188e:	f002 febf 	bl	8004610 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8001892:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001896:	2100      	movs	r1, #0
 8001898:	f002 feba 	bl	8004610 <RCC_APB1PeriphResetCmd>
 800189c:	e047      	b.n	800192e <USART_DeInit+0xee>
  }    
  else if (USARTx == UART4)
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	4b27      	ldr	r3, [pc, #156]	; (8001940 <USART_DeInit+0x100>)
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d10a      	bne.n	80018bc <USART_DeInit+0x7c>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 80018a6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80018aa:	2101      	movs	r1, #1
 80018ac:	f002 feb0 	bl	8004610 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 80018b0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80018b4:	2100      	movs	r1, #0
 80018b6:	f002 feab 	bl	8004610 <RCC_APB1PeriphResetCmd>
 80018ba:	e038      	b.n	800192e <USART_DeInit+0xee>
  }
  else if (USARTx == UART5)
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	4b21      	ldr	r3, [pc, #132]	; (8001944 <USART_DeInit+0x104>)
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d10a      	bne.n	80018da <USART_DeInit+0x9a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 80018c4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80018c8:	2101      	movs	r1, #1
 80018ca:	f002 fea1 	bl	8004610 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 80018ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80018d2:	2100      	movs	r1, #0
 80018d4:	f002 fe9c 	bl	8004610 <RCC_APB1PeriphResetCmd>
 80018d8:	e029      	b.n	800192e <USART_DeInit+0xee>
  }  
  else if (USARTx == USART6)
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	4b1a      	ldr	r3, [pc, #104]	; (8001948 <USART_DeInit+0x108>)
 80018de:	429a      	cmp	r2, r3
 80018e0:	d108      	bne.n	80018f4 <USART_DeInit+0xb4>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 80018e2:	2020      	movs	r0, #32
 80018e4:	2101      	movs	r1, #1
 80018e6:	f002 feb1 	bl	800464c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 80018ea:	2020      	movs	r0, #32
 80018ec:	2100      	movs	r1, #0
 80018ee:	f002 fead 	bl	800464c <RCC_APB2PeriphResetCmd>
 80018f2:	e01c      	b.n	800192e <USART_DeInit+0xee>
  }
  else if (USARTx == UART7)
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	4b15      	ldr	r3, [pc, #84]	; (800194c <USART_DeInit+0x10c>)
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d10a      	bne.n	8001912 <USART_DeInit+0xd2>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
 80018fc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001900:	2101      	movs	r1, #1
 8001902:	f002 fe85 	bl	8004610 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 8001906:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800190a:	2100      	movs	r1, #0
 800190c:	f002 fe80 	bl	8004610 <RCC_APB1PeriphResetCmd>
 8001910:	e00d      	b.n	800192e <USART_DeInit+0xee>
  }     
  else
  {
    if (USARTx == UART8)
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <USART_DeInit+0x110>)
 8001916:	429a      	cmp	r2, r3
 8001918:	d109      	bne.n	800192e <USART_DeInit+0xee>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
 800191a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800191e:	2101      	movs	r1, #1
 8001920:	f002 fe76 	bl	8004610 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
 8001924:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8001928:	2100      	movs	r1, #0
 800192a:	f002 fe71 	bl	8004610 <RCC_APB1PeriphResetCmd>
    }
  }
}
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40011000 	.word	0x40011000
 8001938:	40004400 	.word	0x40004400
 800193c:	40004800 	.word	0x40004800
 8001940:	40004c00 	.word	0x40004c00
 8001944:	40005000 	.word	0x40005000
 8001948:	40011400 	.word	0x40011400
 800194c:	40007800 	.word	0x40007800
 8001950:	40007c00 	.word	0x40007c00

08001954 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08a      	sub	sp, #40	; 0x28
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800195e:	2300      	movs	r3, #0
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
 8001962:	2300      	movs	r3, #0
 8001964:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800196a:	2300      	movs	r3, #0
 800196c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	8a1b      	ldrh	r3, [r3, #16]
 8001972:	b29b      	uxth	r3, r3
 8001974:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001978:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800197c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	88db      	ldrh	r3, [r3, #6]
 8001982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001984:	4313      	orrs	r3, r2
 8001986:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	b29a      	uxth	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	899b      	ldrh	r3, [r3, #12]
 8001994:	b29b      	uxth	r3, r3
 8001996:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8001998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800199e:	f023 030c 	bic.w	r3, r3, #12
 80019a2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	889a      	ldrh	r2, [r3, #4]
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	891b      	ldrh	r3, [r3, #8]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80019b4:	4313      	orrs	r3, r2
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ba:	4313      	orrs	r3, r2
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	8a9b      	ldrh	r3, [r3, #20]
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	899b      	ldrh	r3, [r3, #12]
 80019da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019dc:	4313      	orrs	r3, r2
 80019de:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80019e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80019e8:	f107 0308 	add.w	r3, r7, #8
 80019ec:	4618      	mov	r0, r3
 80019ee:	f002 fc0b 	bl	8004208 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	4b31      	ldr	r3, [pc, #196]	; (8001abc <USART_Init+0x168>)
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d003      	beq.n	8001a02 <USART_Init+0xae>
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	4b30      	ldr	r3, [pc, #192]	; (8001ac0 <USART_Init+0x16c>)
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d102      	bne.n	8001a08 <USART_Init+0xb4>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	623b      	str	r3, [r7, #32]
 8001a06:	e001      	b.n	8001a0c <USART_Init+0xb8>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	899b      	ldrh	r3, [r3, #12]
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	b21b      	sxth	r3, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	da0c      	bge.n	8001a34 <USART_Init+0xe0>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8001a1a:	6a3a      	ldr	r2, [r7, #32]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	4413      	add	r3, r2
 8001a22:	009a      	lsls	r2, r3, #2
 8001a24:	441a      	add	r2, r3
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a30:	61fb      	str	r3, [r7, #28]
 8001a32:	e00b      	b.n	8001a4c <USART_Init+0xf8>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8001a34:	6a3a      	ldr	r2, [r7, #32]
 8001a36:	4613      	mov	r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	4413      	add	r3, r2
 8001a3c:	009a      	lsls	r2, r3, #2
 8001a3e:	441a      	add	r2, r3
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4a:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8001a4c:	69fa      	ldr	r2, [r7, #28]
 8001a4e:	4b1d      	ldr	r3, [pc, #116]	; (8001ac4 <USART_Init+0x170>)
 8001a50:	fba3 1302 	umull	r1, r3, r3, r2
 8001a54:	095b      	lsrs	r3, r3, #5
 8001a56:	011b      	lsls	r3, r3, #4
 8001a58:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5c:	091b      	lsrs	r3, r3, #4
 8001a5e:	2264      	movs	r2, #100	; 0x64
 8001a60:	fb02 f303 	mul.w	r3, r2, r3
 8001a64:	69fa      	ldr	r2, [r7, #28]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	899b      	ldrh	r3, [r3, #12]
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	b21b      	sxth	r3, r3
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	da0d      	bge.n	8001a94 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001a80:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <USART_Init+0x170>)
 8001a82:	fba3 1302 	umull	r1, r3, r3, r2
 8001a86:	095b      	lsrs	r3, r3, #5
 8001a88:	f003 0307 	and.w	r3, r3, #7
 8001a8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24
 8001a92:	e00c      	b.n	8001aae <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	011b      	lsls	r3, r3, #4
 8001a98:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001a9c:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <USART_Init+0x170>)
 8001a9e:	fba3 1302 	umull	r1, r3, r3, r2
 8001aa2:	095b      	lsrs	r3, r3, #5
 8001aa4:	f003 030f 	and.w	r3, r3, #15
 8001aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	811a      	strh	r2, [r3, #8]
}
 8001ab6:	3728      	adds	r7, #40	; 0x28
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40011000 	.word	0x40011000
 8001ac0:	40011400 	.word	0x40011400
 8001ac4:	51eb851f 	.word	0x51eb851f

08001ac8 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ad6:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	220c      	movs	r2, #12
 8001aee:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	819a      	strh	r2, [r3, #12]
}
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <USART_ClockInit>:
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	8a1b      	ldrh	r3, [r3, #16]
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b1c:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	881a      	ldrh	r2, [r3, #0]
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8001b26:	4313      	orrs	r3, r2
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	889b      	ldrh	r3, [r3, #4]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	88db      	ldrh	r3, [r3, #6]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	821a      	strh	r2, [r3, #16]
}
 8001b48:	3714      	adds	r7, #20
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop

08001b54 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	80da      	strh	r2, [r3, #6]
}
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop

08001b80 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	460b      	mov	r3, r1
 8001b8a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001b8c:	78fb      	ldrb	r3, [r7, #3]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d008      	beq.n	8001ba4 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	899b      	ldrh	r3, [r3, #12]
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	819a      	strh	r2, [r3, #12]
 8001ba2:	e007      	b.n	8001bb4 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	899b      	ldrh	r3, [r3, #12]
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	819a      	strh	r2, [r3, #12]
  }
}
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop

08001bc0 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock. 
  * @note   The function is used for IrDA mode with UART4 and UART5.   
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	8b1b      	ldrh	r3, [r3, #24]
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	8b1b      	ldrh	r3, [r3, #24]
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	78fb      	ldrb	r3, [r7, #3]
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	4313      	orrs	r3, r2
 8001be8:	b29a      	uxth	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	831a      	strh	r2, [r3, #24]
}
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <USART_OverSampling8Cmd>:
  * @param  NewState: new state of the USART 8x oversampling mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	460b      	mov	r3, r1
 8001c02:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001c04:	78fb      	ldrb	r3, [r7, #3]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d00a      	beq.n	8001c20 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	899b      	ldrh	r3, [r3, #12]
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	819a      	strh	r2, [r3, #12]
 8001c1e:	e007      	b.n	8001c30 <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	899b      	ldrh	r3, [r3, #12]
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	819a      	strh	r2, [r3, #12]
  }
}  
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop

08001c3c <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	460b      	mov	r3, r1
 8001c46:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001c48:	78fb      	ldrb	r3, [r7, #3]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d008      	beq.n	8001c60 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	8a9b      	ldrh	r3, [r3, #20]
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	829a      	strh	r2, [r3, #20]
 8001c5e:	e007      	b.n	8001c70 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	8a9b      	ldrh	r3, [r3, #20]
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	829a      	strh	r2, [r3, #20]
  }
}
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop

08001c7c <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8001c88:	887b      	ldrh	r3, [r7, #2]
 8001c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	809a      	strh	r2, [r3, #4]
}
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop

08001ca0 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	889b      	ldrh	r3, [r3, #4]
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cb2:	b29b      	uxth	r3, r3
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <USART_SetAddress>:
  *         UART peripheral.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	8a1b      	ldrh	r3, [r3, #16]
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	f023 030f 	bic.w	r3, r3, #15
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	8a1b      	ldrh	r3, [r3, #16]
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	78fb      	ldrb	r3, [r7, #3]
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	821a      	strh	r2, [r3, #16]
}
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	460b      	mov	r3, r1
 8001d02:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8001d04:	78fb      	ldrb	r3, [r7, #3]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d008      	beq.n	8001d1c <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	899b      	ldrh	r3, [r3, #12]
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	f043 0302 	orr.w	r3, r3, #2
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	819a      	strh	r2, [r3, #12]
 8001d1a:	e007      	b.n	8001d2c <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	899b      	ldrh	r3, [r3, #12]
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	f023 0302 	bic.w	r3, r3, #2
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	819a      	strh	r2, [r3, #12]
  }
}
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop

08001d38 <USART_WakeUpConfig>:
  *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	460b      	mov	r3, r1
 8001d42:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	899b      	ldrh	r3, [r3, #12]
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	899b      	ldrh	r3, [r3, #12]
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	887b      	ldrh	r3, [r7, #2]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	819a      	strh	r2, [r3, #12]
}
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop

08001d70 <USART_LINBreakDetectLengthConfig>:
  *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	8a1b      	ldrh	r3, [r3, #16]
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	f023 0320 	bic.w	r3, r3, #32
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	8a1b      	ldrh	r3, [r3, #16]
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	887b      	ldrh	r3, [r7, #2]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	821a      	strh	r2, [r3, #16]
}
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop

08001da8 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001db4:	78fb      	ldrb	r3, [r7, #3]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d008      	beq.n	8001dcc <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	8a1b      	ldrh	r3, [r3, #16]
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	821a      	strh	r2, [r3, #16]
 8001dca:	e007      	b.n	8001ddc <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	8a1b      	ldrh	r3, [r3, #16]
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	821a      	strh	r2, [r3, #16]
  }
}
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop

08001de8 <USART_SendBreak>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	899b      	ldrh	r3, [r3, #12]
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	f043 0301 	orr.w	r3, r3, #1
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	819a      	strh	r2, [r3, #12]
}
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop

08001e0c <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	460b      	mov	r3, r1
 8001e16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001e18:	78fb      	ldrb	r3, [r7, #3]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d008      	beq.n	8001e30 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	8a9b      	ldrh	r3, [r3, #20]
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	f043 0308 	orr.w	r3, r3, #8
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	829a      	strh	r2, [r3, #20]
 8001e2e:	e007      	b.n	8001e40 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	8a9b      	ldrh	r3, [r3, #20]
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	f023 0308 	bic.w	r3, r3, #8
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	829a      	strh	r2, [r3, #20]
  }
}
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop

08001e4c <USART_SetGuardTime>:
  *         UART peripheral.
  * @param  USART_GuardTime: specifies the guard time.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	460b      	mov	r3, r1
 8001e56:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	8b1b      	ldrh	r3, [r3, #24]
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	8b1b      	ldrh	r3, [r3, #24]
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	78fb      	ldrb	r3, [r7, #3]
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	021b      	lsls	r3, r3, #8
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	4313      	orrs	r3, r2
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	831a      	strh	r2, [r3, #24]
}
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop

08001e88 <USART_SmartCardCmd>:
  * @param  NewState: new state of the Smart Card mode.
  *          This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	460b      	mov	r3, r1
 8001e92:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001e94:	78fb      	ldrb	r3, [r7, #3]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d008      	beq.n	8001eac <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	8a9b      	ldrh	r3, [r3, #20]
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	f043 0320 	orr.w	r3, r3, #32
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	829a      	strh	r2, [r3, #20]
 8001eaa:	e007      	b.n	8001ebc <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	8a9b      	ldrh	r3, [r3, #20]
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	f023 0320 	bic.w	r3, r3, #32
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	829a      	strh	r2, [r3, #20]
  }
}
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop

08001ec8 <USART_SmartCardNACKCmd>:
  * @param  NewState: new state of the NACK transmission.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001ed4:	78fb      	ldrb	r3, [r7, #3]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d008      	beq.n	8001eec <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	8a9b      	ldrh	r3, [r3, #20]
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	f043 0310 	orr.w	r3, r3, #16
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	829a      	strh	r2, [r3, #20]
 8001eea:	e007      	b.n	8001efc <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	8a9b      	ldrh	r3, [r3, #20]
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	f023 0310 	bic.w	r3, r3, #16
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	829a      	strh	r2, [r3, #20]
  }
}
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop

08001f08 <USART_IrDAConfig>:
  *            @arg USART_IrDAMode_LowPower
  *            @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	460b      	mov	r3, r1
 8001f12:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	8a9b      	ldrh	r3, [r3, #20]
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	f023 0304 	bic.w	r3, r3, #4
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	8a9b      	ldrh	r3, [r3, #20]
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	887b      	ldrh	r3, [r7, #2]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	829a      	strh	r2, [r3, #20]
}
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop

08001f40 <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8001f4c:	78fb      	ldrb	r3, [r7, #3]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d008      	beq.n	8001f64 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	8a9b      	ldrh	r3, [r3, #20]
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	f043 0302 	orr.w	r3, r3, #2
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	829a      	strh	r2, [r3, #20]
 8001f62:	e007      	b.n	8001f74 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	8a9b      	ldrh	r3, [r3, #20]
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	f023 0302 	bic.w	r3, r3, #2
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	829a      	strh	r2, [r3, #20]
  }
}
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop

08001f80 <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.   
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	460a      	mov	r2, r1
 8001f8c:	807a      	strh	r2, [r7, #2]
 8001f8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8001f90:	787b      	ldrb	r3, [r7, #1]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d008      	beq.n	8001fa8 <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	8a9b      	ldrh	r3, [r3, #20]
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	887b      	ldrh	r3, [r7, #2]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	829a      	strh	r2, [r3, #20]
 8001fa6:	e009      	b.n	8001fbc <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	8a9b      	ldrh	r3, [r3, #20]
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	887b      	ldrh	r3, [r7, #2]
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	829a      	strh	r2, [r3, #20]
  }
}
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop

08001fc8 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b087      	sub	sp, #28
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	460a      	mov	r2, r1
 8001fd4:	807a      	strh	r2, [r7, #2]
 8001fd6:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001fec:	887b      	ldrh	r3, [r7, #2]
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	095b      	lsrs	r3, r3, #5
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8001ff6:	887b      	ldrh	r3, [r7, #2]
 8001ff8:	f003 031f 	and.w	r3, r3, #31
 8001ffc:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2201      	movs	r2, #1
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d103      	bne.n	8002016 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	330c      	adds	r3, #12
 8002012:	617b      	str	r3, [r7, #20]
 8002014:	e009      	b.n	800202a <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	2b02      	cmp	r3, #2
 800201a:	d103      	bne.n	8002024 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	3310      	adds	r3, #16
 8002020:	617b      	str	r3, [r7, #20]
 8002022:	e002      	b.n	800202a <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	3314      	adds	r3, #20
 8002028:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 800202a:	787b      	ldrb	r3, [r7, #1]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d006      	beq.n	800203e <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	6811      	ldr	r1, [r2, #0]
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	430a      	orrs	r2, r1
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	e006      	b.n	800204c <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	6811      	ldr	r1, [r2, #0]
 8002044:	68ba      	ldr	r2, [r7, #8]
 8002046:	43d2      	mvns	r2, r2
 8002048:	400a      	ands	r2, r1
 800204a:	601a      	str	r2, [r3, #0]
  }
}
 800204c:	371c      	adds	r7, #28
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop

08002058 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	460b      	mov	r3, r1
 8002062:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8002064:	2300      	movs	r3, #0
 8002066:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	881b      	ldrh	r3, [r3, #0]
 800206c:	b29a      	uxth	r2, r3
 800206e:	887b      	ldrh	r3, [r7, #2]
 8002070:	4013      	ands	r3, r2
 8002072:	b29b      	uxth	r3, r3
 8002074:	2b00      	cmp	r3, #0
 8002076:	d002      	beq.n	800207e <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8002078:	2301      	movs	r3, #1
 800207a:	73fb      	strb	r3, [r7, #15]
 800207c:	e001      	b.n	8002082 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 800207e:	2300      	movs	r3, #0
 8002080:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002082:	7bfb      	ldrb	r3, [r7, #15]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <USART_ClearFlag>:
  *          (USART_SendData()).
  *   
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	460b      	mov	r3, r1
 800209a:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 800209c:	887b      	ldrh	r3, [r7, #2]
 800209e:	43db      	mvns	r3, r3
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	801a      	strh	r2, [r3, #0]
}
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b087      	sub	sp, #28
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	460b      	mov	r3, r1
 80020ba:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 80020bc:	2300      	movs	r3, #0
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]
 80020c4:	2300      	movs	r3, #0
 80020c6:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 80020c8:	2300      	movs	r3, #0
 80020ca:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80020cc:	887b      	ldrh	r3, [r7, #2]
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	095b      	lsrs	r3, r3, #5
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 80020d6:	887b      	ldrh	r3, [r7, #2]
 80020d8:	f003 031f 	and.w	r3, r3, #31
 80020dc:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	2201      	movs	r2, #1
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d106      	bne.n	80020fc <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	899b      	ldrh	r3, [r3, #12]
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	697a      	ldr	r2, [r7, #20]
 80020f6:	4013      	ands	r3, r2
 80020f8:	617b      	str	r3, [r7, #20]
 80020fa:	e00f      	b.n	800211c <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d106      	bne.n	8002110 <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	8a1b      	ldrh	r3, [r3, #16]
 8002106:	b29b      	uxth	r3, r3
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	4013      	ands	r3, r2
 800210c:	617b      	str	r3, [r7, #20]
 800210e:	e005      	b.n	800211c <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	8a9b      	ldrh	r3, [r3, #20]
 8002114:	b29b      	uxth	r3, r3
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	4013      	ands	r3, r2
 800211a:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 800211c:	887b      	ldrh	r3, [r7, #2]
 800211e:	0a1b      	lsrs	r3, r3, #8
 8002120:	b29b      	uxth	r3, r3
 8002122:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2201      	movs	r2, #1
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	881b      	ldrh	r3, [r3, #0]
 8002132:	b29b      	uxth	r3, r3
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	4013      	ands	r3, r2
 8002138:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d005      	beq.n	800214c <USART_GetITStatus+0x9c>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d002      	beq.n	800214c <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
 8002146:	2301      	movs	r3, #1
 8002148:	74fb      	strb	r3, [r7, #19]
 800214a:	e001      	b.n	8002150 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
 800214c:	2300      	movs	r3, #0
 800214e:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8002150:	7cfb      	ldrb	r3, [r7, #19]
}
 8002152:	4618      	mov	r0, r3
 8002154:	371c      	adds	r7, #28
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop

08002160 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	460b      	mov	r3, r1
 800216a:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 800216c:	2300      	movs	r3, #0
 800216e:	81fb      	strh	r3, [r7, #14]
 8002170:	2300      	movs	r3, #0
 8002172:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8002174:	887b      	ldrh	r3, [r7, #2]
 8002176:	0a1b      	lsrs	r3, r3, #8
 8002178:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 800217a:	89fb      	ldrh	r3, [r7, #14]
 800217c:	2201      	movs	r2, #1
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8002184:	89bb      	ldrh	r3, [r7, #12]
 8002186:	43db      	mvns	r3, r3
 8002188:	b29a      	uxth	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	801a      	strh	r2, [r3, #0]
}
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	4b5f      	ldr	r3, [pc, #380]	; (8002320 <TIM_DeInit+0x188>)
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d108      	bne.n	80021ba <TIM_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 80021a8:	2001      	movs	r0, #1
 80021aa:	2101      	movs	r1, #1
 80021ac:	f002 fa4e 	bl	800464c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 80021b0:	2001      	movs	r0, #1
 80021b2:	2100      	movs	r1, #0
 80021b4:	f002 fa4a 	bl	800464c <RCC_APB2PeriphResetCmd>
 80021b8:	e0af      	b.n	800231a <TIM_DeInit+0x182>
  } 
  else if (TIMx == TIM2) 
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021c0:	d108      	bne.n	80021d4 <TIM_DeInit+0x3c>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 80021c2:	2001      	movs	r0, #1
 80021c4:	2101      	movs	r1, #1
 80021c6:	f002 fa23 	bl	8004610 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 80021ca:	2001      	movs	r0, #1
 80021cc:	2100      	movs	r1, #0
 80021ce:	f002 fa1f 	bl	8004610 <RCC_APB1PeriphResetCmd>
 80021d2:	e0a2      	b.n	800231a <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM3)
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	4b53      	ldr	r3, [pc, #332]	; (8002324 <TIM_DeInit+0x18c>)
 80021d8:	429a      	cmp	r2, r3
 80021da:	d108      	bne.n	80021ee <TIM_DeInit+0x56>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 80021dc:	2002      	movs	r0, #2
 80021de:	2101      	movs	r1, #1
 80021e0:	f002 fa16 	bl	8004610 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 80021e4:	2002      	movs	r0, #2
 80021e6:	2100      	movs	r1, #0
 80021e8:	f002 fa12 	bl	8004610 <RCC_APB1PeriphResetCmd>
 80021ec:	e095      	b.n	800231a <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM4)
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	4b4d      	ldr	r3, [pc, #308]	; (8002328 <TIM_DeInit+0x190>)
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d108      	bne.n	8002208 <TIM_DeInit+0x70>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 80021f6:	2004      	movs	r0, #4
 80021f8:	2101      	movs	r1, #1
 80021fa:	f002 fa09 	bl	8004610 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 80021fe:	2004      	movs	r0, #4
 8002200:	2100      	movs	r1, #0
 8002202:	f002 fa05 	bl	8004610 <RCC_APB1PeriphResetCmd>
 8002206:	e088      	b.n	800231a <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM5)
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	4b48      	ldr	r3, [pc, #288]	; (800232c <TIM_DeInit+0x194>)
 800220c:	429a      	cmp	r2, r3
 800220e:	d108      	bne.n	8002222 <TIM_DeInit+0x8a>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8002210:	2008      	movs	r0, #8
 8002212:	2101      	movs	r1, #1
 8002214:	f002 f9fc 	bl	8004610 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8002218:	2008      	movs	r0, #8
 800221a:	2100      	movs	r1, #0
 800221c:	f002 f9f8 	bl	8004610 <RCC_APB1PeriphResetCmd>
 8002220:	e07b      	b.n	800231a <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM6)  
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	4b42      	ldr	r3, [pc, #264]	; (8002330 <TIM_DeInit+0x198>)
 8002226:	429a      	cmp	r2, r3
 8002228:	d108      	bne.n	800223c <TIM_DeInit+0xa4>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 800222a:	2010      	movs	r0, #16
 800222c:	2101      	movs	r1, #1
 800222e:	f002 f9ef 	bl	8004610 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8002232:	2010      	movs	r0, #16
 8002234:	2100      	movs	r1, #0
 8002236:	f002 f9eb 	bl	8004610 <RCC_APB1PeriphResetCmd>
 800223a:	e06e      	b.n	800231a <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM7)
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	4b3d      	ldr	r3, [pc, #244]	; (8002334 <TIM_DeInit+0x19c>)
 8002240:	429a      	cmp	r2, r3
 8002242:	d108      	bne.n	8002256 <TIM_DeInit+0xbe>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8002244:	2020      	movs	r0, #32
 8002246:	2101      	movs	r1, #1
 8002248:	f002 f9e2 	bl	8004610 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 800224c:	2020      	movs	r0, #32
 800224e:	2100      	movs	r1, #0
 8002250:	f002 f9de 	bl	8004610 <RCC_APB1PeriphResetCmd>
 8002254:	e061      	b.n	800231a <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM8)
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	4b37      	ldr	r3, [pc, #220]	; (8002338 <TIM_DeInit+0x1a0>)
 800225a:	429a      	cmp	r2, r3
 800225c:	d108      	bne.n	8002270 <TIM_DeInit+0xd8>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 800225e:	2002      	movs	r0, #2
 8002260:	2101      	movs	r1, #1
 8002262:	f002 f9f3 	bl	800464c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8002266:	2002      	movs	r0, #2
 8002268:	2100      	movs	r1, #0
 800226a:	f002 f9ef 	bl	800464c <RCC_APB2PeriphResetCmd>
 800226e:	e054      	b.n	800231a <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM9)
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	4b32      	ldr	r3, [pc, #200]	; (800233c <TIM_DeInit+0x1a4>)
 8002274:	429a      	cmp	r2, r3
 8002276:	d10a      	bne.n	800228e <TIM_DeInit+0xf6>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 8002278:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800227c:	2101      	movs	r1, #1
 800227e:	f002 f9e5 	bl	800464c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 8002282:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002286:	2100      	movs	r1, #0
 8002288:	f002 f9e0 	bl	800464c <RCC_APB2PeriphResetCmd>
 800228c:	e045      	b.n	800231a <TIM_DeInit+0x182>
   }  
  else if (TIMx == TIM10)
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	4b2b      	ldr	r3, [pc, #172]	; (8002340 <TIM_DeInit+0x1a8>)
 8002292:	429a      	cmp	r2, r3
 8002294:	d10a      	bne.n	80022ac <TIM_DeInit+0x114>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 8002296:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800229a:	2101      	movs	r1, #1
 800229c:	f002 f9d6 	bl	800464c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 80022a0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80022a4:	2100      	movs	r1, #0
 80022a6:	f002 f9d1 	bl	800464c <RCC_APB2PeriphResetCmd>
 80022aa:	e036      	b.n	800231a <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM11) 
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	4b25      	ldr	r3, [pc, #148]	; (8002344 <TIM_DeInit+0x1ac>)
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d10a      	bne.n	80022ca <TIM_DeInit+0x132>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 80022b4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80022b8:	2101      	movs	r1, #1
 80022ba:	f002 f9c7 	bl	800464c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 80022be:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80022c2:	2100      	movs	r1, #0
 80022c4:	f002 f9c2 	bl	800464c <RCC_APB2PeriphResetCmd>
 80022c8:	e027      	b.n	800231a <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM12)
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	4b1e      	ldr	r3, [pc, #120]	; (8002348 <TIM_DeInit+0x1b0>)
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d108      	bne.n	80022e4 <TIM_DeInit+0x14c>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 80022d2:	2040      	movs	r0, #64	; 0x40
 80022d4:	2101      	movs	r1, #1
 80022d6:	f002 f99b 	bl	8004610 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 80022da:	2040      	movs	r0, #64	; 0x40
 80022dc:	2100      	movs	r1, #0
 80022de:	f002 f997 	bl	8004610 <RCC_APB1PeriphResetCmd>
 80022e2:	e01a      	b.n	800231a <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM13) 
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	4b19      	ldr	r3, [pc, #100]	; (800234c <TIM_DeInit+0x1b4>)
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d108      	bne.n	80022fe <TIM_DeInit+0x166>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 80022ec:	2080      	movs	r0, #128	; 0x80
 80022ee:	2101      	movs	r1, #1
 80022f0:	f002 f98e 	bl	8004610 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 80022f4:	2080      	movs	r0, #128	; 0x80
 80022f6:	2100      	movs	r1, #0
 80022f8:	f002 f98a 	bl	8004610 <RCC_APB1PeriphResetCmd>
 80022fc:	e00d      	b.n	800231a <TIM_DeInit+0x182>
  }  
  else
  { 
    if (TIMx == TIM14) 
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	4b13      	ldr	r3, [pc, #76]	; (8002350 <TIM_DeInit+0x1b8>)
 8002302:	429a      	cmp	r2, r3
 8002304:	d109      	bne.n	800231a <TIM_DeInit+0x182>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 8002306:	f44f 7080 	mov.w	r0, #256	; 0x100
 800230a:	2101      	movs	r1, #1
 800230c:	f002 f980 	bl	8004610 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8002310:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002314:	2100      	movs	r1, #0
 8002316:	f002 f97b 	bl	8004610 <RCC_APB1PeriphResetCmd>
    }   
  }
}
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40010000 	.word	0x40010000
 8002324:	40000400 	.word	0x40000400
 8002328:	40000800 	.word	0x40000800
 800232c:	40000c00 	.word	0x40000c00
 8002330:	40001000 	.word	0x40001000
 8002334:	40001400 	.word	0x40001400
 8002338:	40010400 	.word	0x40010400
 800233c:	40014000 	.word	0x40014000
 8002340:	40014400 	.word	0x40014400
 8002344:	40014800 	.word	0x40014800
 8002348:	40001800 	.word	0x40001800
 800234c:	40001c00 	.word	0x40001c00
 8002350:	40002000 	.word	0x40002000

08002354 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800235e:	2300      	movs	r3, #0
 8002360:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	881b      	ldrh	r3, [r3, #0]
 8002366:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	4b28      	ldr	r3, [pc, #160]	; (800240c <TIM_TimeBaseInit+0xb8>)
 800236c:	429a      	cmp	r2, r3
 800236e:	d013      	beq.n	8002398 <TIM_TimeBaseInit+0x44>
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	4b27      	ldr	r3, [pc, #156]	; (8002410 <TIM_TimeBaseInit+0xbc>)
 8002374:	429a      	cmp	r2, r3
 8002376:	d00f      	beq.n	8002398 <TIM_TimeBaseInit+0x44>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800237e:	d00b      	beq.n	8002398 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	4b24      	ldr	r3, [pc, #144]	; (8002414 <TIM_TimeBaseInit+0xc0>)
 8002384:	429a      	cmp	r2, r3
 8002386:	d007      	beq.n	8002398 <TIM_TimeBaseInit+0x44>
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	4b23      	ldr	r3, [pc, #140]	; (8002418 <TIM_TimeBaseInit+0xc4>)
 800238c:	429a      	cmp	r2, r3
 800238e:	d003      	beq.n	8002398 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	4b22      	ldr	r3, [pc, #136]	; (800241c <TIM_TimeBaseInit+0xc8>)
 8002394:	429a      	cmp	r2, r3
 8002396:	d108      	bne.n	80023aa <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8002398:	89fb      	ldrh	r3, [r7, #14]
 800239a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800239e:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	885a      	ldrh	r2, [r3, #2]
 80023a4:	89fb      	ldrh	r3, [r7, #14]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	4b1c      	ldr	r3, [pc, #112]	; (8002420 <TIM_TimeBaseInit+0xcc>)
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d00c      	beq.n	80023cc <TIM_TimeBaseInit+0x78>
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	4b1b      	ldr	r3, [pc, #108]	; (8002424 <TIM_TimeBaseInit+0xd0>)
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d008      	beq.n	80023cc <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80023ba:	89fb      	ldrh	r3, [r7, #14]
 80023bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023c0:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	891a      	ldrh	r2, [r3, #8]
 80023c6:	89fb      	ldrh	r3, [r7, #14]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	89fa      	ldrh	r2, [r7, #14]
 80023d0:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	881a      	ldrh	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	4b09      	ldr	r3, [pc, #36]	; (800240c <TIM_TimeBaseInit+0xb8>)
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d003      	beq.n	80023f2 <TIM_TimeBaseInit+0x9e>
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	4b08      	ldr	r3, [pc, #32]	; (8002410 <TIM_TimeBaseInit+0xbc>)
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d104      	bne.n	80023fc <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	7a9b      	ldrb	r3, [r3, #10]
 80023f6:	461a      	mov	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	829a      	strh	r2, [r3, #20]
}
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	40010000 	.word	0x40010000
 8002410:	40010400 	.word	0x40010400
 8002414:	40000400 	.word	0x40000400
 8002418:	40000800 	.word	0x40000800
 800241c:	40000c00 	.word	0x40000c00
 8002420:	40001000 	.word	0x40001000
 8002424:	40001400 	.word	0x40001400

08002428 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f04f 32ff 	mov.w	r2, #4294967295
 8002436:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	729a      	strb	r2, [r3, #10]
}
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop

0800245c <TIM_PrescalerConfig>:
  *            @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *            @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediatly.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	4613      	mov	r3, r2
 8002466:	460a      	mov	r2, r1
 8002468:	807a      	strh	r2, [r7, #2]
 800246a:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	887a      	ldrh	r2, [r7, #2]
 8002470:	851a      	strh	r2, [r3, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	883a      	ldrh	r2, [r7, #0]
 8002476:	829a      	strh	r2, [r3, #20]
}
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop

08002484 <TIM_CounterModeConfig>:
  *            @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *            @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	460b      	mov	r3, r1
 800248e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpcr1 = 0;
 8002490:	2300      	movs	r3, #0
 8002492:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	881b      	ldrh	r3, [r3, #0]
 8002498:	81fb      	strh	r3, [r7, #14]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 800249a:	89fb      	ldrh	r3, [r7, #14]
 800249c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024a0:	81fb      	strh	r3, [r7, #14]

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 80024a2:	89fa      	ldrh	r2, [r7, #14]
 80024a4:	887b      	ldrh	r3, [r7, #2]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	89fa      	ldrh	r2, [r7, #14]
 80024ae:	801a      	strh	r2, [r3, #0]
}
 80024b0:	3714      	adds	r7, #20
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop

080024bc <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	625a      	str	r2, [r3, #36]	; 0x24
}
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop

080024d8 <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop

080024f4 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002500:	4618      	mov	r0, r3
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002518:	b29b      	uxth	r3, r3
}
 800251a:	4618      	mov	r0, r3
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop

08002528 <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	460b      	mov	r3, r1
 8002532:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002534:	78fb      	ldrb	r3, [r7, #3]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d008      	beq.n	800254c <TIM_UpdateDisableConfig+0x24>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	881b      	ldrh	r3, [r3, #0]
 800253e:	b29b      	uxth	r3, r3
 8002540:	f043 0302 	orr.w	r3, r3, #2
 8002544:	b29a      	uxth	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	801a      	strh	r2, [r3, #0]
 800254a:	e007      	b.n	800255c <TIM_UpdateDisableConfig+0x34>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	881b      	ldrh	r3, [r3, #0]
 8002550:	b29b      	uxth	r3, r3
 8002552:	f023 0302 	bic.w	r3, r3, #2
 8002556:	b29a      	uxth	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	801a      	strh	r2, [r3, #0]
  }
}
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop

08002568 <TIM_UpdateRequestConfig>:
  *                 generation through the slave mode controller.
  *            @arg TIM_UpdateSource_Regular: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	460b      	mov	r3, r1
 8002572:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 8002574:	887b      	ldrh	r3, [r7, #2]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d008      	beq.n	800258c <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	881b      	ldrh	r3, [r3, #0]
 800257e:	b29b      	uxth	r3, r3
 8002580:	f043 0304 	orr.w	r3, r3, #4
 8002584:	b29a      	uxth	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	801a      	strh	r2, [r3, #0]
 800258a:	e007      	b.n	800259c <TIM_UpdateRequestConfig+0x34>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	881b      	ldrh	r3, [r3, #0]
 8002590:	b29b      	uxth	r3, r3
 8002592:	f023 0304 	bic.w	r3, r3, #4
 8002596:	b29a      	uxth	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	801a      	strh	r2, [r3, #0]
  }
}
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop

080025a8 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	460b      	mov	r3, r1
 80025b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80025b4:	78fb      	ldrb	r3, [r7, #3]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d008      	beq.n	80025cc <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	b29b      	uxth	r3, r3
 80025c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	801a      	strh	r2, [r3, #0]
 80025ca:	e007      	b.n	80025dc <TIM_ARRPreloadConfig+0x34>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	881b      	ldrh	r3, [r3, #0]
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	801a      	strh	r2, [r3, #0]
  }
}
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop

080025e8 <TIM_SelectOnePulseMode>:
  *            @arg TIM_OPMode_Single
  *            @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	881b      	ldrh	r3, [r3, #0]
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	f023 0308 	bic.w	r3, r3, #8
 80025fe:	b29a      	uxth	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	801a      	strh	r2, [r3, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	881b      	ldrh	r3, [r3, #0]
 8002608:	b29a      	uxth	r2, r3
 800260a:	887b      	ldrh	r3, [r7, #2]
 800260c:	4313      	orrs	r3, r2
 800260e:	b29a      	uxth	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	801a      	strh	r2, [r3, #0]
}
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop

08002620 <TIM_SetClockDivision>:
  *            @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *            @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	460b      	mov	r3, r1
 800262a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	881b      	ldrh	r3, [r3, #0]
 8002630:	b29b      	uxth	r3, r3
 8002632:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002636:	b29a      	uxth	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	801a      	strh	r2, [r3, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	881b      	ldrh	r3, [r3, #0]
 8002640:	b29a      	uxth	r2, r3
 8002642:	887b      	ldrh	r3, [r7, #2]
 8002644:	4313      	orrs	r3, r2
 8002646:	b29a      	uxth	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	801a      	strh	r2, [r3, #0]
}
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop

08002658 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	460b      	mov	r3, r1
 8002662:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002664:	78fb      	ldrb	r3, [r7, #3]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d008      	beq.n	800267c <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	881b      	ldrh	r3, [r3, #0]
 800266e:	b29b      	uxth	r3, r3
 8002670:	f043 0301 	orr.w	r3, r3, #1
 8002674:	b29a      	uxth	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	801a      	strh	r2, [r3, #0]
 800267a:	e007      	b.n	800268c <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	881b      	ldrh	r3, [r3, #0]
 8002680:	b29b      	uxth	r3, r3
 8002682:	f023 0301 	bic.w	r3, r3, #1
 8002686:	b29a      	uxth	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	801a      	strh	r2, [r3, #0]
  }
}
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop

08002698 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80026a2:	2300      	movs	r3, #0
 80026a4:	817b      	strh	r3, [r7, #10]
 80026a6:	2300      	movs	r3, #0
 80026a8:	81fb      	strh	r3, [r7, #14]
 80026aa:	2300      	movs	r3, #0
 80026ac:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	8c1b      	ldrh	r3, [r3, #32]
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	f023 0301 	bic.w	r3, r3, #1
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	8c1b      	ldrh	r3, [r3, #32]
 80026c2:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	889b      	ldrh	r3, [r3, #4]
 80026c8:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	8b1b      	ldrh	r3, [r3, #24]
 80026ce:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 80026d0:	897b      	ldrh	r3, [r7, #10]
 80026d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026d6:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 80026d8:	897b      	ldrh	r3, [r7, #10]
 80026da:	f023 0303 	bic.w	r3, r3, #3
 80026de:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	881a      	ldrh	r2, [r3, #0]
 80026e4:	897b      	ldrh	r3, [r7, #10]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 80026ea:	89fb      	ldrh	r3, [r7, #14]
 80026ec:	f023 0302 	bic.w	r3, r3, #2
 80026f0:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	899a      	ldrh	r2, [r3, #12]
 80026f6:	89fb      	ldrh	r3, [r7, #14]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	885a      	ldrh	r2, [r3, #2]
 8002700:	89fb      	ldrh	r3, [r7, #14]
 8002702:	4313      	orrs	r3, r2
 8002704:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	4b1e      	ldr	r3, [pc, #120]	; (8002784 <TIM_OC1Init+0xec>)
 800270a:	429a      	cmp	r2, r3
 800270c:	d003      	beq.n	8002716 <TIM_OC1Init+0x7e>
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	4b1d      	ldr	r3, [pc, #116]	; (8002788 <TIM_OC1Init+0xf0>)
 8002712:	429a      	cmp	r2, r3
 8002714:	d123      	bne.n	800275e <TIM_OC1Init+0xc6>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8002716:	89fb      	ldrh	r3, [r7, #14]
 8002718:	f023 0308 	bic.w	r3, r3, #8
 800271c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	89da      	ldrh	r2, [r3, #14]
 8002722:	89fb      	ldrh	r3, [r7, #14]
 8002724:	4313      	orrs	r3, r2
 8002726:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 8002728:	89fb      	ldrh	r3, [r7, #14]
 800272a:	f023 0304 	bic.w	r3, r3, #4
 800272e:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	889a      	ldrh	r2, [r3, #4]
 8002734:	89fb      	ldrh	r3, [r7, #14]
 8002736:	4313      	orrs	r3, r2
 8002738:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 800273a:	89bb      	ldrh	r3, [r7, #12]
 800273c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002740:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 8002742:	89bb      	ldrh	r3, [r7, #12]
 8002744:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002748:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	8a1a      	ldrh	r2, [r3, #16]
 800274e:	89bb      	ldrh	r3, [r7, #12]
 8002750:	4313      	orrs	r3, r2
 8002752:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	8a5a      	ldrh	r2, [r3, #18]
 8002758:	89bb      	ldrh	r3, [r7, #12]
 800275a:	4313      	orrs	r3, r2
 800275c:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	89ba      	ldrh	r2, [r7, #12]
 8002762:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	897a      	ldrh	r2, [r7, #10]
 8002768:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	689a      	ldr	r2, [r3, #8]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	89fa      	ldrh	r2, [r7, #14]
 8002776:	841a      	strh	r2, [r3, #32]
}
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	40010000 	.word	0x40010000
 8002788:	40010400 	.word	0x40010400

0800278c <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8002796:	2300      	movs	r3, #0
 8002798:	817b      	strh	r3, [r7, #10]
 800279a:	2300      	movs	r3, #0
 800279c:	81fb      	strh	r3, [r7, #14]
 800279e:	2300      	movs	r3, #0
 80027a0:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	8c1b      	ldrh	r3, [r3, #32]
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	f023 0310 	bic.w	r3, r3, #16
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	8c1b      	ldrh	r3, [r3, #32]
 80027b6:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	889b      	ldrh	r3, [r3, #4]
 80027bc:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	8b1b      	ldrh	r3, [r3, #24]
 80027c2:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
 80027c4:	897b      	ldrh	r3, [r7, #10]
 80027c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027ca:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 80027cc:	897b      	ldrh	r3, [r7, #10]
 80027ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027d2:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	881b      	ldrh	r3, [r3, #0]
 80027d8:	021b      	lsls	r3, r3, #8
 80027da:	b29a      	uxth	r2, r3
 80027dc:	897b      	ldrh	r3, [r7, #10]
 80027de:	4313      	orrs	r3, r2
 80027e0:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 80027e2:	89fb      	ldrh	r3, [r7, #14]
 80027e4:	f023 0320 	bic.w	r3, r3, #32
 80027e8:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	899b      	ldrh	r3, [r3, #12]
 80027ee:	011b      	lsls	r3, r3, #4
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	89fb      	ldrh	r3, [r7, #14]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	885b      	ldrh	r3, [r3, #2]
 80027fc:	011b      	lsls	r3, r3, #4
 80027fe:	b29a      	uxth	r2, r3
 8002800:	89fb      	ldrh	r3, [r7, #14]
 8002802:	4313      	orrs	r3, r2
 8002804:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	4b22      	ldr	r3, [pc, #136]	; (8002894 <TIM_OC2Init+0x108>)
 800280a:	429a      	cmp	r2, r3
 800280c:	d003      	beq.n	8002816 <TIM_OC2Init+0x8a>
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	4b21      	ldr	r3, [pc, #132]	; (8002898 <TIM_OC2Init+0x10c>)
 8002812:	429a      	cmp	r2, r3
 8002814:	d12b      	bne.n	800286e <TIM_OC2Init+0xe2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8002816:	89fb      	ldrh	r3, [r7, #14]
 8002818:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800281c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	89db      	ldrh	r3, [r3, #14]
 8002822:	011b      	lsls	r3, r3, #4
 8002824:	b29a      	uxth	r2, r3
 8002826:	89fb      	ldrh	r3, [r7, #14]
 8002828:	4313      	orrs	r3, r2
 800282a:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 800282c:	89fb      	ldrh	r3, [r7, #14]
 800282e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002832:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	889b      	ldrh	r3, [r3, #4]
 8002838:	011b      	lsls	r3, r3, #4
 800283a:	b29a      	uxth	r2, r3
 800283c:	89fb      	ldrh	r3, [r7, #14]
 800283e:	4313      	orrs	r3, r2
 8002840:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
 8002842:	89bb      	ldrh	r3, [r7, #12]
 8002844:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002848:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 800284a:	89bb      	ldrh	r3, [r7, #12]
 800284c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002850:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	8a1b      	ldrh	r3, [r3, #16]
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	b29a      	uxth	r2, r3
 800285a:	89bb      	ldrh	r3, [r7, #12]
 800285c:	4313      	orrs	r3, r2
 800285e:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	8a5b      	ldrh	r3, [r3, #18]
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	b29a      	uxth	r2, r3
 8002868:	89bb      	ldrh	r3, [r7, #12]
 800286a:	4313      	orrs	r3, r2
 800286c:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	89ba      	ldrh	r2, [r7, #12]
 8002872:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	897a      	ldrh	r2, [r7, #10]
 8002878:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	689a      	ldr	r2, [r3, #8]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	89fa      	ldrh	r2, [r7, #14]
 8002886:	841a      	strh	r2, [r3, #32]
}
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	40010000 	.word	0x40010000
 8002898:	40010400 	.word	0x40010400

0800289c <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80028a6:	2300      	movs	r3, #0
 80028a8:	817b      	strh	r3, [r7, #10]
 80028aa:	2300      	movs	r3, #0
 80028ac:	81fb      	strh	r3, [r7, #14]
 80028ae:	2300      	movs	r3, #0
 80028b0:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	8c1b      	ldrh	r3, [r3, #32]
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028bc:	b29a      	uxth	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	8c1b      	ldrh	r3, [r3, #32]
 80028c6:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	889b      	ldrh	r3, [r3, #4]
 80028cc:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	8b9b      	ldrh	r3, [r3, #28]
 80028d2:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 80028d4:	897b      	ldrh	r3, [r7, #10]
 80028d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028da:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 80028dc:	897b      	ldrh	r3, [r7, #10]
 80028de:	f023 0303 	bic.w	r3, r3, #3
 80028e2:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	881a      	ldrh	r2, [r3, #0]
 80028e8:	897b      	ldrh	r3, [r7, #10]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 80028ee:	89fb      	ldrh	r3, [r7, #14]
 80028f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028f4:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	899b      	ldrh	r3, [r3, #12]
 80028fa:	021b      	lsls	r3, r3, #8
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	89fb      	ldrh	r3, [r7, #14]
 8002900:	4313      	orrs	r3, r2
 8002902:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	885b      	ldrh	r3, [r3, #2]
 8002908:	021b      	lsls	r3, r3, #8
 800290a:	b29a      	uxth	r2, r3
 800290c:	89fb      	ldrh	r3, [r7, #14]
 800290e:	4313      	orrs	r3, r2
 8002910:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	4b22      	ldr	r3, [pc, #136]	; (80029a0 <TIM_OC3Init+0x104>)
 8002916:	429a      	cmp	r2, r3
 8002918:	d003      	beq.n	8002922 <TIM_OC3Init+0x86>
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	4b21      	ldr	r3, [pc, #132]	; (80029a4 <TIM_OC3Init+0x108>)
 800291e:	429a      	cmp	r2, r3
 8002920:	d12b      	bne.n	800297a <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8002922:	89fb      	ldrh	r3, [r7, #14]
 8002924:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002928:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	89db      	ldrh	r3, [r3, #14]
 800292e:	021b      	lsls	r3, r3, #8
 8002930:	b29a      	uxth	r2, r3
 8002932:	89fb      	ldrh	r3, [r7, #14]
 8002934:	4313      	orrs	r3, r2
 8002936:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8002938:	89fb      	ldrh	r3, [r7, #14]
 800293a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800293e:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	889b      	ldrh	r3, [r3, #4]
 8002944:	021b      	lsls	r3, r3, #8
 8002946:	b29a      	uxth	r2, r3
 8002948:	89fb      	ldrh	r3, [r7, #14]
 800294a:	4313      	orrs	r3, r2
 800294c:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 800294e:	89bb      	ldrh	r3, [r7, #12]
 8002950:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002954:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 8002956:	89bb      	ldrh	r3, [r7, #12]
 8002958:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800295c:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	8a1b      	ldrh	r3, [r3, #16]
 8002962:	011b      	lsls	r3, r3, #4
 8002964:	b29a      	uxth	r2, r3
 8002966:	89bb      	ldrh	r3, [r7, #12]
 8002968:	4313      	orrs	r3, r2
 800296a:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	8a5b      	ldrh	r3, [r3, #18]
 8002970:	011b      	lsls	r3, r3, #4
 8002972:	b29a      	uxth	r2, r3
 8002974:	89bb      	ldrh	r3, [r7, #12]
 8002976:	4313      	orrs	r3, r2
 8002978:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	89ba      	ldrh	r2, [r7, #12]
 800297e:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	897a      	ldrh	r2, [r7, #10]
 8002984:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	689a      	ldr	r2, [r3, #8]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	89fa      	ldrh	r2, [r7, #14]
 8002992:	841a      	strh	r2, [r3, #32]
}
 8002994:	3714      	adds	r7, #20
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	40010000 	.word	0x40010000
 80029a4:	40010400 	.word	0x40010400

080029a8 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80029b2:	2300      	movs	r3, #0
 80029b4:	81bb      	strh	r3, [r7, #12]
 80029b6:	2300      	movs	r3, #0
 80029b8:	817b      	strh	r3, [r7, #10]
 80029ba:	2300      	movs	r3, #0
 80029bc:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	8c1b      	ldrh	r3, [r3, #32]
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	8c1b      	ldrh	r3, [r3, #32]
 80029d2:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	889b      	ldrh	r3, [r3, #4]
 80029d8:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	8b9b      	ldrh	r3, [r3, #28]
 80029de:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 80029e0:	89bb      	ldrh	r3, [r7, #12]
 80029e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029e6:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 80029e8:	89bb      	ldrh	r3, [r7, #12]
 80029ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029ee:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	881b      	ldrh	r3, [r3, #0]
 80029f4:	021b      	lsls	r3, r3, #8
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	89bb      	ldrh	r3, [r7, #12]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 80029fe:	897b      	ldrh	r3, [r7, #10]
 8002a00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a04:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	899b      	ldrh	r3, [r3, #12]
 8002a0a:	031b      	lsls	r3, r3, #12
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	897b      	ldrh	r3, [r7, #10]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	885b      	ldrh	r3, [r3, #2]
 8002a18:	031b      	lsls	r3, r3, #12
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	897b      	ldrh	r3, [r7, #10]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	4b11      	ldr	r3, [pc, #68]	; (8002a6c <TIM_OC4Init+0xc4>)
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d003      	beq.n	8002a32 <TIM_OC4Init+0x8a>
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	4b10      	ldr	r3, [pc, #64]	; (8002a70 <TIM_OC4Init+0xc8>)
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d10a      	bne.n	8002a48 <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 8002a32:	89fb      	ldrh	r3, [r7, #14]
 8002a34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a38:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	8a1b      	ldrh	r3, [r3, #16]
 8002a3e:	019b      	lsls	r3, r3, #6
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	89fb      	ldrh	r3, [r7, #14]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	89fa      	ldrh	r2, [r7, #14]
 8002a4c:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	89ba      	ldrh	r2, [r7, #12]
 8002a52:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	897a      	ldrh	r2, [r7, #10]
 8002a60:	841a      	strh	r2, [r3, #32]
}
 8002a62:	3714      	adds	r7, #20
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	40010000 	.word	0x40010000
 8002a70:	40010400 	.word	0x40010400

08002a74 <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	801a      	strh	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	805a      	strh	r2, [r3, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	609a      	str	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	81da      	strh	r2, [r3, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	821a      	strh	r2, [r3, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	825a      	strh	r2, [r3, #18]
}
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop

08002ab8 <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	460a      	mov	r2, r1
 8002ac4:	807a      	strh	r2, [r7, #2]
 8002ac6:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	60fb      	str	r3, [r7, #12]
  uint16_t tmp1 = 0;
 8002acc:	2300      	movs	r3, #0
 8002ace:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	60fb      	str	r3, [r7, #12]
  tmp += CCMR_OFFSET;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	3318      	adds	r3, #24
 8002ad8:	60fb      	str	r3, [r7, #12]

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 8002ada:	887b      	ldrh	r3, [r7, #2]
 8002adc:	2201      	movs	r2, #1
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	817b      	strh	r3, [r7, #10]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	8c1b      	ldrh	r3, [r3, #32]
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	897b      	ldrh	r3, [r7, #10]
 8002aec:	43db      	mvns	r3, r3
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	4013      	ands	r3, r2
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	841a      	strh	r2, [r3, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8002af8:	887b      	ldrh	r3, [r7, #2]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d002      	beq.n	8002b04 <TIM_SelectOCxM+0x4c>
 8002afe:	887b      	ldrh	r3, [r7, #2]
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d113      	bne.n	8002b2c <TIM_SelectOCxM+0x74>
  {
    tmp += (TIM_Channel>>1);
 8002b04:	887b      	ldrh	r3, [r7, #2]
 8002b06:	085b      	lsrs	r3, r3, #1
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6819      	ldr	r1, [r3, #0]
 8002b16:	f64f 738f 	movw	r3, #65423	; 0xff8f
 8002b1a:	400b      	ands	r3, r1
 8002b1c:	6013      	str	r3, [r2, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	6811      	ldr	r1, [r2, #0]
 8002b24:	883a      	ldrh	r2, [r7, #0]
 8002b26:	430a      	orrs	r2, r1
 8002b28:	601a      	str	r2, [r3, #0]
 8002b2a:	e016      	b.n	8002b5a <TIM_SelectOCxM+0xa2>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 8002b2c:	887b      	ldrh	r3, [r7, #2]
 8002b2e:	3b04      	subs	r3, #4
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	085b      	lsrs	r3, r3, #1
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	4413      	add	r3, r2
 8002b3a:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6819      	ldr	r1, [r3, #0]
 8002b42:	f648 73ff 	movw	r3, #36863	; 0x8fff
 8002b46:	400b      	ands	r3, r1
 8002b48:	6013      	str	r3, [r2, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	6811      	ldr	r1, [r2, #0]
 8002b50:	883a      	ldrh	r2, [r7, #0]
 8002b52:	0212      	lsls	r2, r2, #8
 8002b54:	b292      	uxth	r2, r2
 8002b56:	430a      	orrs	r2, r1
 8002b58:	601a      	str	r2, [r3, #0]
  }
}
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop

08002b80 <TIM_SetCompare2>:
  *         peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop

08002b9c <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop

08002bb8 <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop

08002bd4 <TIM_ForcedOC1Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	460b      	mov	r3, r1
 8002bde:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8002be0:	2300      	movs	r3, #0
 8002be2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	8b1b      	ldrh	r3, [r3, #24]
 8002be8:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
 8002bea:	89fb      	ldrh	r3, [r7, #14]
 8002bec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bf0:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 8002bf2:	89fa      	ldrh	r2, [r7, #14]
 8002bf4:	887b      	ldrh	r3, [r7, #2]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	89fa      	ldrh	r2, [r7, #14]
 8002bfe:	831a      	strh	r2, [r3, #24]
}
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop

08002c0c <TIM_ForcedOC2Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	460b      	mov	r3, r1
 8002c16:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	8b1b      	ldrh	r3, [r3, #24]
 8002c20:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
 8002c22:	89fb      	ldrh	r3, [r7, #14]
 8002c24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c28:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 8002c2a:	887b      	ldrh	r3, [r7, #2]
 8002c2c:	021b      	lsls	r3, r3, #8
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	89fb      	ldrh	r3, [r7, #14]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	89fa      	ldrh	r2, [r7, #14]
 8002c3a:	831a      	strh	r2, [r3, #24]
}
 8002c3c:	3714      	adds	r7, #20
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop

08002c48 <TIM_ForcedOC3Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	460b      	mov	r3, r1
 8002c52:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8002c54:	2300      	movs	r3, #0
 8002c56:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	8b9b      	ldrh	r3, [r3, #28]
 8002c5c:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
 8002c5e:	89fb      	ldrh	r3, [r7, #14]
 8002c60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c64:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 8002c66:	89fa      	ldrh	r2, [r7, #14]
 8002c68:	887b      	ldrh	r3, [r7, #2]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	89fa      	ldrh	r2, [r7, #14]
 8002c72:	839a      	strh	r2, [r3, #28]
}
 8002c74:	3714      	adds	r7, #20
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop

08002c80 <TIM_ForcedOC4Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	460b      	mov	r3, r1
 8002c8a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	8b9b      	ldrh	r3, [r3, #28]
 8002c94:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
 8002c96:	89fb      	ldrh	r3, [r7, #14]
 8002c98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c9c:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 8002c9e:	887b      	ldrh	r3, [r7, #2]
 8002ca0:	021b      	lsls	r3, r3, #8
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	89fb      	ldrh	r3, [r7, #14]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	89fa      	ldrh	r2, [r7, #14]
 8002cae:	839a      	strh	r2, [r3, #28]
}
 8002cb0:	3714      	adds	r7, #20
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop

08002cbc <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	8b1b      	ldrh	r3, [r3, #24]
 8002cd0:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 8002cd2:	89fb      	ldrh	r3, [r7, #14]
 8002cd4:	f023 0308 	bic.w	r3, r3, #8
 8002cd8:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8002cda:	89fa      	ldrh	r2, [r7, #14]
 8002cdc:	887b      	ldrh	r3, [r7, #2]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	89fa      	ldrh	r2, [r7, #14]
 8002ce6:	831a      	strh	r2, [r3, #24]
}
 8002ce8:	3714      	adds	r7, #20
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop

08002cf4 <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8002d00:	2300      	movs	r3, #0
 8002d02:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	8b1b      	ldrh	r3, [r3, #24]
 8002d08:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 8002d0a:	89fb      	ldrh	r3, [r7, #14]
 8002d0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d10:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8002d12:	887b      	ldrh	r3, [r7, #2]
 8002d14:	021b      	lsls	r3, r3, #8
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	89fb      	ldrh	r3, [r7, #14]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	89fa      	ldrh	r2, [r7, #14]
 8002d22:	831a      	strh	r2, [r3, #24]
}
 8002d24:	3714      	adds	r7, #20
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop

08002d30 <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	8b9b      	ldrh	r3, [r3, #28]
 8002d44:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8002d46:	89fb      	ldrh	r3, [r7, #14]
 8002d48:	f023 0308 	bic.w	r3, r3, #8
 8002d4c:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8002d4e:	89fa      	ldrh	r2, [r7, #14]
 8002d50:	887b      	ldrh	r3, [r7, #2]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	89fa      	ldrh	r2, [r7, #14]
 8002d5a:	839a      	strh	r2, [r3, #28]
}
 8002d5c:	3714      	adds	r7, #20
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop

08002d68 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	460b      	mov	r3, r1
 8002d72:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8002d74:	2300      	movs	r3, #0
 8002d76:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	8b9b      	ldrh	r3, [r3, #28]
 8002d7c:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 8002d7e:	89fb      	ldrh	r3, [r7, #14]
 8002d80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d84:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8002d86:	887b      	ldrh	r3, [r7, #2]
 8002d88:	021b      	lsls	r3, r3, #8
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	89fb      	ldrh	r3, [r7, #14]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	89fa      	ldrh	r2, [r7, #14]
 8002d96:	839a      	strh	r2, [r3, #28]
}
 8002d98:	3714      	adds	r7, #20
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop

08002da4 <TIM_OC1FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	460b      	mov	r3, r1
 8002dae:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8002db0:	2300      	movs	r3, #0
 8002db2:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	8b1b      	ldrh	r3, [r3, #24]
 8002db8:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
 8002dba:	89fb      	ldrh	r3, [r7, #14]
 8002dbc:	f023 0304 	bic.w	r3, r3, #4
 8002dc0:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 8002dc2:	89fa      	ldrh	r2, [r7, #14]
 8002dc4:	887b      	ldrh	r3, [r7, #2]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	89fa      	ldrh	r2, [r7, #14]
 8002dce:	831a      	strh	r2, [r3, #24]
}
 8002dd0:	3714      	adds	r7, #20
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop

08002ddc <TIM_OC2FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	460b      	mov	r3, r1
 8002de6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8002de8:	2300      	movs	r3, #0
 8002dea:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	8b1b      	ldrh	r3, [r3, #24]
 8002df0:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
 8002df2:	89fb      	ldrh	r3, [r7, #14]
 8002df4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002df8:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 8002dfa:	887b      	ldrh	r3, [r7, #2]
 8002dfc:	021b      	lsls	r3, r3, #8
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	89fb      	ldrh	r3, [r7, #14]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	89fa      	ldrh	r2, [r7, #14]
 8002e0a:	831a      	strh	r2, [r3, #24]
}
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop

08002e18 <TIM_OC3FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	460b      	mov	r3, r1
 8002e22:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8002e24:	2300      	movs	r3, #0
 8002e26:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	8b9b      	ldrh	r3, [r3, #28]
 8002e2c:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
 8002e2e:	89fb      	ldrh	r3, [r7, #14]
 8002e30:	f023 0304 	bic.w	r3, r3, #4
 8002e34:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 8002e36:	89fa      	ldrh	r2, [r7, #14]
 8002e38:	887b      	ldrh	r3, [r7, #2]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	89fa      	ldrh	r2, [r7, #14]
 8002e42:	839a      	strh	r2, [r3, #28]
}
 8002e44:	3714      	adds	r7, #20
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop

08002e50 <TIM_OC4FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	460b      	mov	r3, r1
 8002e5a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	8b9b      	ldrh	r3, [r3, #28]
 8002e64:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
 8002e66:	89fb      	ldrh	r3, [r7, #14]
 8002e68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e6c:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 8002e6e:	887b      	ldrh	r3, [r7, #2]
 8002e70:	021b      	lsls	r3, r3, #8
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	89fb      	ldrh	r3, [r7, #14]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	89fa      	ldrh	r2, [r7, #14]
 8002e7e:	839a      	strh	r2, [r3, #28]
}
 8002e80:	3714      	adds	r7, #20
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop

08002e8c <TIM_ClearOC1Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	460b      	mov	r3, r1
 8002e96:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	8b1b      	ldrh	r3, [r3, #24]
 8002ea0:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
 8002ea2:	89fb      	ldrh	r3, [r7, #14]
 8002ea4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ea8:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 8002eaa:	89fa      	ldrh	r2, [r7, #14]
 8002eac:	887b      	ldrh	r3, [r7, #2]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	89fa      	ldrh	r2, [r7, #14]
 8002eb6:	831a      	strh	r2, [r3, #24]
}
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop

08002ec4 <TIM_ClearOC2Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	460b      	mov	r3, r1
 8002ece:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	8b1b      	ldrh	r3, [r3, #24]
 8002ed8:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
 8002eda:	89fb      	ldrh	r3, [r7, #14]
 8002edc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002ee0:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 8002ee2:	887b      	ldrh	r3, [r7, #2]
 8002ee4:	021b      	lsls	r3, r3, #8
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	89fb      	ldrh	r3, [r7, #14]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	89fa      	ldrh	r2, [r7, #14]
 8002ef2:	831a      	strh	r2, [r3, #24]
}
 8002ef4:	3714      	adds	r7, #20
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop

08002f00 <TIM_ClearOC3Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	460b      	mov	r3, r1
 8002f0a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	8b9b      	ldrh	r3, [r3, #28]
 8002f14:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
 8002f16:	89fb      	ldrh	r3, [r7, #14]
 8002f18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f1c:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 8002f1e:	89fa      	ldrh	r2, [r7, #14]
 8002f20:	887b      	ldrh	r3, [r7, #2]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	89fa      	ldrh	r2, [r7, #14]
 8002f2a:	839a      	strh	r2, [r3, #28]
}
 8002f2c:	3714      	adds	r7, #20
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop

08002f38 <TIM_ClearOC4Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	460b      	mov	r3, r1
 8002f42:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8002f44:	2300      	movs	r3, #0
 8002f46:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	8b9b      	ldrh	r3, [r3, #28]
 8002f4c:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
 8002f4e:	89fb      	ldrh	r3, [r7, #14]
 8002f50:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002f54:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 8002f56:	887b      	ldrh	r3, [r7, #2]
 8002f58:	021b      	lsls	r3, r3, #8
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	89fb      	ldrh	r3, [r7, #14]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	89fa      	ldrh	r2, [r7, #14]
 8002f66:	839a      	strh	r2, [r3, #28]
}
 8002f68:	3714      	adds	r7, #20
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop

08002f74 <TIM_OC1PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8002f80:	2300      	movs	r3, #0
 8002f82:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	8c1b      	ldrh	r3, [r3, #32]
 8002f88:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
 8002f8a:	89fb      	ldrh	r3, [r7, #14]
 8002f8c:	f023 0302 	bic.w	r3, r3, #2
 8002f90:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCPolarity;
 8002f92:	89fa      	ldrh	r2, [r7, #14]
 8002f94:	887b      	ldrh	r3, [r7, #2]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	89fa      	ldrh	r2, [r7, #14]
 8002f9e:	841a      	strh	r2, [r3, #32]
}
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop

08002fac <TIM_OC1NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	8c1b      	ldrh	r3, [r3, #32]
 8002fc0:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8002fc2:	89fb      	ldrh	r3, [r7, #14]
 8002fc4:	f023 0308 	bic.w	r3, r3, #8
 8002fc8:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCNPolarity;
 8002fca:	89fa      	ldrh	r2, [r7, #14]
 8002fcc:	887b      	ldrh	r3, [r7, #2]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	89fa      	ldrh	r2, [r7, #14]
 8002fd6:	841a      	strh	r2, [r3, #32]
}
 8002fd8:	3714      	adds	r7, #20
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop

08002fe4 <TIM_OC2PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	460b      	mov	r3, r1
 8002fee:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	8c1b      	ldrh	r3, [r3, #32]
 8002ff8:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
 8002ffa:	89fb      	ldrh	r3, [r7, #14]
 8002ffc:	f023 0320 	bic.w	r3, r3, #32
 8003000:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 8003002:	887b      	ldrh	r3, [r7, #2]
 8003004:	011b      	lsls	r3, r3, #4
 8003006:	b29a      	uxth	r2, r3
 8003008:	89fb      	ldrh	r3, [r7, #14]
 800300a:	4313      	orrs	r3, r2
 800300c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	89fa      	ldrh	r2, [r7, #14]
 8003012:	841a      	strh	r2, [r3, #32]
}
 8003014:	3714      	adds	r7, #20
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop

08003020 <TIM_OC2NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	460b      	mov	r3, r1
 800302a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800302c:	2300      	movs	r3, #0
 800302e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	8c1b      	ldrh	r3, [r3, #32]
 8003034:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8003036:	89fb      	ldrh	r3, [r7, #14]
 8003038:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800303c:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 800303e:	887b      	ldrh	r3, [r7, #2]
 8003040:	011b      	lsls	r3, r3, #4
 8003042:	b29a      	uxth	r2, r3
 8003044:	89fb      	ldrh	r3, [r7, #14]
 8003046:	4313      	orrs	r3, r2
 8003048:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	89fa      	ldrh	r2, [r7, #14]
 800304e:	841a      	strh	r2, [r3, #32]
}
 8003050:	3714      	adds	r7, #20
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop

0800305c <TIM_OC3PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	460b      	mov	r3, r1
 8003066:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8003068:	2300      	movs	r3, #0
 800306a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	8c1b      	ldrh	r3, [r3, #32]
 8003070:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8003072:	89fb      	ldrh	r3, [r7, #14]
 8003074:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003078:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 800307a:	887b      	ldrh	r3, [r7, #2]
 800307c:	021b      	lsls	r3, r3, #8
 800307e:	b29a      	uxth	r2, r3
 8003080:	89fb      	ldrh	r3, [r7, #14]
 8003082:	4313      	orrs	r3, r2
 8003084:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	89fa      	ldrh	r2, [r7, #14]
 800308a:	841a      	strh	r2, [r3, #32]
}
 800308c:	3714      	adds	r7, #20
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop

08003098 <TIM_OC3NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	460b      	mov	r3, r1
 80030a2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 80030a4:	2300      	movs	r3, #0
 80030a6:	81fb      	strh	r3, [r7, #14]
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	8c1b      	ldrh	r3, [r3, #32]
 80030ac:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 80030ae:	89fb      	ldrh	r3, [r7, #14]
 80030b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030b4:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 80030b6:	887b      	ldrh	r3, [r7, #2]
 80030b8:	021b      	lsls	r3, r3, #8
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	89fb      	ldrh	r3, [r7, #14]
 80030be:	4313      	orrs	r3, r2
 80030c0:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	89fa      	ldrh	r2, [r7, #14]
 80030c6:	841a      	strh	r2, [r3, #32]
}
 80030c8:	3714      	adds	r7, #20
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop

080030d4 <TIM_OC4PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	460b      	mov	r3, r1
 80030de:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 80030e0:	2300      	movs	r3, #0
 80030e2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	8c1b      	ldrh	r3, [r3, #32]
 80030e8:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 80030ea:	89fb      	ldrh	r3, [r7, #14]
 80030ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030f0:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 80030f2:	887b      	ldrh	r3, [r7, #2]
 80030f4:	031b      	lsls	r3, r3, #12
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	89fb      	ldrh	r3, [r7, #14]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	89fa      	ldrh	r2, [r7, #14]
 8003102:	841a      	strh	r2, [r3, #32]
}
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop

08003110 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	4613      	mov	r3, r2
 800311a:	460a      	mov	r2, r1
 800311c:	807a      	strh	r2, [r7, #2]
 800311e:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 8003120:	2300      	movs	r3, #0
 8003122:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 8003124:	887b      	ldrh	r3, [r7, #2]
 8003126:	2201      	movs	r2, #1
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	8c1b      	ldrh	r3, [r3, #32]
 8003132:	b29a      	uxth	r2, r3
 8003134:	89fb      	ldrh	r3, [r7, #14]
 8003136:	43db      	mvns	r3, r3
 8003138:	b29b      	uxth	r3, r3
 800313a:	4013      	ands	r3, r2
 800313c:	b29a      	uxth	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	8c1b      	ldrh	r3, [r3, #32]
 8003146:	b29a      	uxth	r2, r3
 8003148:	8839      	ldrh	r1, [r7, #0]
 800314a:	887b      	ldrh	r3, [r7, #2]
 800314c:	fa01 f303 	lsl.w	r3, r1, r3
 8003150:	b29b      	uxth	r3, r3
 8003152:	4313      	orrs	r3, r2
 8003154:	b29a      	uxth	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	841a      	strh	r2, [r3, #32]
}
 800315a:	3714      	adds	r7, #20
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	4613      	mov	r3, r2
 800316e:	460a      	mov	r2, r1
 8003170:	807a      	strh	r2, [r7, #2]
 8003172:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 8003174:	2300      	movs	r3, #0
 8003176:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 8003178:	887b      	ldrh	r3, [r7, #2]
 800317a:	2204      	movs	r2, #4
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	8c1b      	ldrh	r3, [r3, #32]
 8003186:	b29a      	uxth	r2, r3
 8003188:	89fb      	ldrh	r3, [r7, #14]
 800318a:	43db      	mvns	r3, r3
 800318c:	b29b      	uxth	r3, r3
 800318e:	4013      	ands	r3, r2
 8003190:	b29a      	uxth	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	8c1b      	ldrh	r3, [r3, #32]
 800319a:	b29a      	uxth	r2, r3
 800319c:	8839      	ldrh	r1, [r7, #0]
 800319e:	887b      	ldrh	r3, [r7, #2]
 80031a0:	fa01 f303 	lsl.w	r3, r1, r3
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	4313      	orrs	r3, r2
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	841a      	strh	r2, [r3, #32]
}
 80031ae:	3714      	adds	r7, #20
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	881b      	ldrh	r3, [r3, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10f      	bne.n	80031ea <TIM_ICInit+0x32>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	8859      	ldrh	r1, [r3, #2]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	889a      	ldrh	r2, [r3, #4]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	891b      	ldrh	r3, [r3, #8]
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 fc92 	bl	8003b00 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	88db      	ldrh	r3, [r3, #6]
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	4619      	mov	r1, r3
 80031e4:	f000 f8e0 	bl	80033a8 <TIM_SetIC1Prescaler>
 80031e8:	e036      	b.n	8003258 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	881b      	ldrh	r3, [r3, #0]
 80031ee:	2b04      	cmp	r3, #4
 80031f0:	d10f      	bne.n	8003212 <TIM_ICInit+0x5a>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	8859      	ldrh	r1, [r3, #2]
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	889a      	ldrh	r2, [r3, #4]
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	891b      	ldrh	r3, [r3, #8]
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 fcba 	bl	8003b78 <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	88db      	ldrh	r3, [r3, #6]
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	4619      	mov	r1, r3
 800320c:	f000 f8e8 	bl	80033e0 <TIM_SetIC2Prescaler>
 8003210:	e022      	b.n	8003258 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	881b      	ldrh	r3, [r3, #0]
 8003216:	2b08      	cmp	r3, #8
 8003218:	d10f      	bne.n	800323a <TIM_ICInit+0x82>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	8859      	ldrh	r1, [r3, #2]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	889a      	ldrh	r2, [r3, #4]
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	891b      	ldrh	r3, [r3, #8]
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 fcec 	bl	8003c04 <TI3_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	88db      	ldrh	r3, [r3, #6]
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	4619      	mov	r1, r3
 8003234:	f000 f8f2 	bl	800341c <TIM_SetIC3Prescaler>
 8003238:	e00e      	b.n	8003258 <TIM_ICInit+0xa0>
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	8859      	ldrh	r1, [r3, #2]
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	889a      	ldrh	r2, [r3, #4]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	891b      	ldrh	r3, [r3, #8]
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 fd1e 	bl	8003c88 <TI4_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	88db      	ldrh	r3, [r3, #6]
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	4619      	mov	r1, r3
 8003254:	f000 f8fe 	bl	8003454 <TIM_SetIC4Prescaler>
  }
}
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop

08003260 <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	811a      	strh	r2, [r3, #8]
}
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
 800329a:	2300      	movs	r3, #0
 800329c:	81fb      	strh	r3, [r7, #14]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
 800329e:	2301      	movs	r3, #1
 80032a0:	81bb      	strh	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	885b      	ldrh	r3, [r3, #2]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d102      	bne.n	80032b0 <TIM_PWMIConfig+0x20>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 80032aa:	2302      	movs	r3, #2
 80032ac:	81fb      	strh	r3, [r7, #14]
 80032ae:	e001      	b.n	80032b4 <TIM_PWMIConfig+0x24>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 80032b0:	2300      	movs	r3, #0
 80032b2:	81fb      	strh	r3, [r7, #14]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	889b      	ldrh	r3, [r3, #4]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d102      	bne.n	80032c2 <TIM_PWMIConfig+0x32>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 80032bc:	2302      	movs	r3, #2
 80032be:	81bb      	strh	r3, [r7, #12]
 80032c0:	e001      	b.n	80032c6 <TIM_PWMIConfig+0x36>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 80032c2:	2301      	movs	r3, #1
 80032c4:	81bb      	strh	r3, [r7, #12]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	881b      	ldrh	r3, [r3, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d11c      	bne.n	8003308 <TIM_PWMIConfig+0x78>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	8859      	ldrh	r1, [r3, #2]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	889a      	ldrh	r2, [r3, #4]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	891b      	ldrh	r3, [r3, #8]
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 fc10 	bl	8003b00 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	88db      	ldrh	r3, [r3, #6]
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	4619      	mov	r1, r3
 80032e8:	f000 f85e 	bl	80033a8 <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	891b      	ldrh	r3, [r3, #8]
 80032f0:	89f9      	ldrh	r1, [r7, #14]
 80032f2:	89ba      	ldrh	r2, [r7, #12]
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 fc3f 	bl	8003b78 <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	88db      	ldrh	r3, [r3, #6]
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	4619      	mov	r1, r3
 8003302:	f000 f86d 	bl	80033e0 <TIM_SetIC2Prescaler>
 8003306:	e01b      	b.n	8003340 <TIM_PWMIConfig+0xb0>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	8859      	ldrh	r1, [r3, #2]
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	889a      	ldrh	r2, [r3, #4]
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	891b      	ldrh	r3, [r3, #8]
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 fc2f 	bl	8003b78 <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	88db      	ldrh	r3, [r3, #6]
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	4619      	mov	r1, r3
 8003322:	f000 f85d 	bl	80033e0 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	891b      	ldrh	r3, [r3, #8]
 800332a:	89f9      	ldrh	r1, [r7, #14]
 800332c:	89ba      	ldrh	r2, [r7, #12]
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 fbe6 	bl	8003b00 <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	88db      	ldrh	r3, [r3, #6]
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	4619      	mov	r1, r3
 800333c:	f000 f834 	bl	80033a8 <TIM_SetIC1Prescaler>
  }
}
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop

08003348 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8003354:	4618      	mov	r0, r3
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <TIM_GetCapture2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint32_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 800336c:	4618      	mov	r0, r3
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8003384:	4618      	mov	r0, r3
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800339c:	4618      	mov	r0, r3
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <TIM_SetIC1Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	460b      	mov	r3, r1
 80033b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	8b1b      	ldrh	r3, [r3, #24]
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	f023 030c 	bic.w	r3, r3, #12
 80033be:	b29a      	uxth	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	831a      	strh	r2, [r3, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	8b1b      	ldrh	r3, [r3, #24]
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	887b      	ldrh	r3, [r7, #2]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	831a      	strh	r2, [r3, #24]
}
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop

080033e0 <TIM_SetIC2Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	460b      	mov	r3, r1
 80033ea:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	8b1b      	ldrh	r3, [r3, #24]
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	831a      	strh	r2, [r3, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	8b1b      	ldrh	r3, [r3, #24]
 8003400:	b29a      	uxth	r2, r3
 8003402:	887b      	ldrh	r3, [r7, #2]
 8003404:	021b      	lsls	r3, r3, #8
 8003406:	b29b      	uxth	r3, r3
 8003408:	4313      	orrs	r3, r2
 800340a:	b29a      	uxth	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	831a      	strh	r2, [r3, #24]
}
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop

0800341c <TIM_SetIC3Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	460b      	mov	r3, r1
 8003426:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	8b9b      	ldrh	r3, [r3, #28]
 800342c:	b29b      	uxth	r3, r3
 800342e:	f023 030c 	bic.w	r3, r3, #12
 8003432:	b29a      	uxth	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	839a      	strh	r2, [r3, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	8b9b      	ldrh	r3, [r3, #28]
 800343c:	b29a      	uxth	r2, r3
 800343e:	887b      	ldrh	r3, [r7, #2]
 8003440:	4313      	orrs	r3, r2
 8003442:	b29a      	uxth	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	839a      	strh	r2, [r3, #28]
}
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop

08003454 <TIM_SetIC4Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	460b      	mov	r3, r1
 800345e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	8b9b      	ldrh	r3, [r3, #28]
 8003464:	b29b      	uxth	r3, r3
 8003466:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800346a:	b29a      	uxth	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	839a      	strh	r2, [r3, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	8b9b      	ldrh	r3, [r3, #28]
 8003474:	b29a      	uxth	r2, r3
 8003476:	887b      	ldrh	r3, [r7, #2]
 8003478:	021b      	lsls	r3, r3, #8
 800347a:	b29b      	uxth	r3, r3
 800347c:	4313      	orrs	r3, r2
 800347e:	b29a      	uxth	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	839a      	strh	r2, [r3, #28]
}
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop

08003490 <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	881a      	ldrh	r2, [r3, #0]
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	885b      	ldrh	r3, [r3, #2]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	889b      	ldrh	r3, [r3, #4]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 80034aa:	4313      	orrs	r3, r2
 80034ac:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	88db      	ldrh	r3, [r3, #6]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 80034b2:	4313      	orrs	r3, r2
 80034b4:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	891b      	ldrh	r3, [r3, #8]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 80034ba:	4313      	orrs	r3, r2
 80034bc:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	895b      	ldrh	r3, [r3, #10]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 80034c2:	4313      	orrs	r3, r2
 80034c4:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	899b      	ldrh	r3, [r3, #12]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 80034ca:	4313      	orrs	r3, r2
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop

080034e0 <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	801a      	strh	r2, [r3, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	805a      	strh	r2, [r3, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	809a      	strh	r2, [r3, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	80da      	strh	r2, [r3, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	811a      	strh	r2, [r3, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	815a      	strh	r2, [r3, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	819a      	strh	r2, [r3, #12]
}
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	460b      	mov	r3, r1
 8003526:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003528:	78fb      	ldrb	r3, [r7, #3]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00c      	beq.n	8003548 <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003534:	b29b      	uxth	r3, r3
 8003536:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800353a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800353e:	b29a      	uxth	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8003546:	e009      	b.n	800355c <TIM_CtrlPWMOutputs+0x40>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800354e:	b29b      	uxth	r3, r3
 8003550:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003554:	b29a      	uxth	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }  
}
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop

08003568 <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	460b      	mov	r3, r1
 8003572:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003574:	78fb      	ldrb	r3, [r7, #3]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d008      	beq.n	800358c <TIM_SelectCOM+0x24>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	889b      	ldrh	r3, [r3, #4]
 800357e:	b29b      	uxth	r3, r3
 8003580:	f043 0304 	orr.w	r3, r3, #4
 8003584:	b29a      	uxth	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	809a      	strh	r2, [r3, #4]
 800358a:	e007      	b.n	800359c <TIM_SelectCOM+0x34>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	889b      	ldrh	r3, [r3, #4]
 8003590:	b29b      	uxth	r3, r3
 8003592:	f023 0304 	bic.w	r3, r3, #4
 8003596:	b29a      	uxth	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	809a      	strh	r2, [r3, #4]
  }
}
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop

080035a8 <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	460b      	mov	r3, r1
 80035b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80035b4:	78fb      	ldrb	r3, [r7, #3]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d008      	beq.n	80035cc <TIM_CCPreloadControl+0x24>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	889b      	ldrh	r3, [r3, #4]
 80035be:	b29b      	uxth	r3, r3
 80035c0:	f043 0301 	orr.w	r3, r3, #1
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	809a      	strh	r2, [r3, #4]
 80035ca:	e007      	b.n	80035dc <TIM_CCPreloadControl+0x34>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	889b      	ldrh	r3, [r3, #4]
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	f023 0301 	bic.w	r3, r3, #1
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	809a      	strh	r2, [r3, #4]
  }
}
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop

080035e8 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	4613      	mov	r3, r2
 80035f2:	460a      	mov	r2, r1
 80035f4:	807a      	strh	r2, [r7, #2]
 80035f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80035f8:	787b      	ldrb	r3, [r7, #1]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d008      	beq.n	8003610 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	899b      	ldrh	r3, [r3, #12]
 8003602:	b29a      	uxth	r2, r3
 8003604:	887b      	ldrh	r3, [r7, #2]
 8003606:	4313      	orrs	r3, r2
 8003608:	b29a      	uxth	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	819a      	strh	r2, [r3, #12]
 800360e:	e009      	b.n	8003624 <TIM_ITConfig+0x3c>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	899b      	ldrh	r3, [r3, #12]
 8003614:	b29a      	uxth	r2, r3
 8003616:	887b      	ldrh	r3, [r7, #2]
 8003618:	43db      	mvns	r3, r3
 800361a:	b29b      	uxth	r3, r3
 800361c:	4013      	ands	r3, r2
 800361e:	b29a      	uxth	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	819a      	strh	r2, [r3, #12]
  }
}
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop

08003630 <TIM_GenerateEvent>:
  * @note   TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.
  *        
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	460b      	mov	r3, r1
 800363a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	887a      	ldrh	r2, [r7, #2]
 8003640:	829a      	strh	r2, [r3, #20]
}
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <TIM_GetFlagStatus>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.    
  *
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	460b      	mov	r3, r1
 8003656:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8003658:	2300      	movs	r3, #0
 800365a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	8a1b      	ldrh	r3, [r3, #16]
 8003660:	b29a      	uxth	r2, r3
 8003662:	887b      	ldrh	r3, [r7, #2]
 8003664:	4013      	ands	r3, r2
 8003666:	b29b      	uxth	r3, r3
 8003668:	2b00      	cmp	r3, #0
 800366a:	d002      	beq.n	8003672 <TIM_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 800366c:	2301      	movs	r3, #1
 800366e:	73fb      	strb	r3, [r7, #15]
 8003670:	e001      	b.n	8003676 <TIM_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8003672:	2300      	movs	r3, #0
 8003674:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003676:	7bfb      	ldrb	r3, [r7, #15]
}
 8003678:	4618      	mov	r0, r3
 800367a:	3714      	adds	r7, #20
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <TIM_ClearFlag>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.
  *    
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	460b      	mov	r3, r1
 800368e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 8003690:	887b      	ldrh	r3, [r7, #2]
 8003692:	43db      	mvns	r3, r3
 8003694:	b29a      	uxth	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	821a      	strh	r2, [r3, #16]
}
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	460b      	mov	r3, r1
 80036ae:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 80036b0:	2300      	movs	r3, #0
 80036b2:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 80036b4:	2300      	movs	r3, #0
 80036b6:	81bb      	strh	r3, [r7, #12]
 80036b8:	2300      	movs	r3, #0
 80036ba:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	8a1b      	ldrh	r3, [r3, #16]
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	887b      	ldrh	r3, [r7, #2]
 80036c4:	4013      	ands	r3, r2
 80036c6:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	899b      	ldrh	r3, [r3, #12]
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	887b      	ldrh	r3, [r7, #2]
 80036d0:	4013      	ands	r3, r2
 80036d2:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80036d4:	89bb      	ldrh	r3, [r7, #12]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d005      	beq.n	80036e6 <TIM_GetITStatus+0x42>
 80036da:	897b      	ldrh	r3, [r7, #10]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d002      	beq.n	80036e6 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 80036e0:	2301      	movs	r3, #1
 80036e2:	73fb      	strb	r3, [r7, #15]
 80036e4:	e001      	b.n	80036ea <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 80036e6:	2300      	movs	r3, #0
 80036e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3714      	adds	r7, #20
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8003704:	887b      	ldrh	r3, [r7, #2]
 8003706:	43db      	mvns	r3, r3
 8003708:	b29a      	uxth	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	821a      	strh	r2, [r3, #16]
}
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <TIM_DMAConfig>:
  * @param  TIM_DMABurstLength: DMA Burst length. This parameter can be one value
  *         between: TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	4613      	mov	r3, r2
 8003722:	460a      	mov	r2, r1
 8003724:	807a      	strh	r2, [r7, #2]
 8003726:	803b      	strh	r3, [r7, #0]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 8003728:	887a      	ldrh	r2, [r7, #2]
 800372a:	883b      	ldrh	r3, [r7, #0]
 800372c:	4313      	orrs	r3, r2
 800372e:	b29a      	uxth	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	4613      	mov	r3, r2
 800374a:	460a      	mov	r2, r1
 800374c:	807a      	strh	r2, [r7, #2]
 800374e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003750:	787b      	ldrb	r3, [r7, #1]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d008      	beq.n	8003768 <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	899b      	ldrh	r3, [r3, #12]
 800375a:	b29a      	uxth	r2, r3
 800375c:	887b      	ldrh	r3, [r7, #2]
 800375e:	4313      	orrs	r3, r2
 8003760:	b29a      	uxth	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	819a      	strh	r2, [r3, #12]
 8003766:	e009      	b.n	800377c <TIM_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	899b      	ldrh	r3, [r3, #12]
 800376c:	b29a      	uxth	r2, r3
 800376e:	887b      	ldrh	r3, [r7, #2]
 8003770:	43db      	mvns	r3, r3
 8003772:	b29b      	uxth	r3, r3
 8003774:	4013      	ands	r3, r2
 8003776:	b29a      	uxth	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	819a      	strh	r2, [r3, #12]
  }
}
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop

08003788 <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	460b      	mov	r3, r1
 8003792:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003794:	78fb      	ldrb	r3, [r7, #3]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d008      	beq.n	80037ac <TIM_SelectCCDMA+0x24>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	889b      	ldrh	r3, [r3, #4]
 800379e:	b29b      	uxth	r3, r3
 80037a0:	f043 0308 	orr.w	r3, r3, #8
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	809a      	strh	r2, [r3, #4]
 80037aa:	e007      	b.n	80037bc <TIM_SelectCCDMA+0x34>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	889b      	ldrh	r3, [r3, #4]
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	f023 0308 	bic.w	r3, r3, #8
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	809a      	strh	r2, [r3, #4]
  }
}
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop

080037c8 <TIM_InternalClockConfig>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	891b      	ldrh	r3, [r3, #8]
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	f023 0307 	bic.w	r3, r3, #7
 80037da:	b29a      	uxth	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	811a      	strh	r2, [r3, #8]
}
 80037e0:	370c      	adds	r7, #12
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop

080037ec <TIM_ITRxExternalClockConfig>:
  *            @arg TIM_TS_ITR2: Internal Trigger 2
  *            @arg TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	460b      	mov	r3, r1
 80037f6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
 80037f8:	887b      	ldrh	r3, [r7, #2]
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	4619      	mov	r1, r3
 80037fe:	f000 f875 	bl	80038ec <TIM_SelectInputTrigger>

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	891b      	ldrh	r3, [r3, #8]
 8003806:	b29b      	uxth	r3, r3
 8003808:	f043 0307 	orr.w	r3, r3, #7
 800380c:	b29a      	uxth	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	811a      	strh	r2, [r3, #8]
}
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <TIM_TIxExternalClockConfig>:
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	8179      	strh	r1, [r7, #10]
 8003822:	813a      	strh	r2, [r7, #8]
 8003824:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 8003826:	897b      	ldrh	r3, [r7, #10]
 8003828:	2b60      	cmp	r3, #96	; 0x60
 800382a:	d107      	bne.n	800383c <TIM_TIxExternalClockConfig+0x24>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 800382c:	893a      	ldrh	r2, [r7, #8]
 800382e:	88fb      	ldrh	r3, [r7, #6]
 8003830:	68f8      	ldr	r0, [r7, #12]
 8003832:	4611      	mov	r1, r2
 8003834:	2201      	movs	r2, #1
 8003836:	f000 f99f 	bl	8003b78 <TI2_Config>
 800383a:	e006      	b.n	800384a <TIM_TIxExternalClockConfig+0x32>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 800383c:	893a      	ldrh	r2, [r7, #8]
 800383e:	88fb      	ldrh	r3, [r7, #6]
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	4611      	mov	r1, r2
 8003844:	2201      	movs	r2, #1
 8003846:	f000 f95b 	bl	8003b00 <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
 800384a:	897b      	ldrh	r3, [r7, #10]
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	4619      	mov	r1, r3
 8003850:	f000 f84c 	bl	80038ec <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	891b      	ldrh	r3, [r3, #8]
 8003858:	b29b      	uxth	r3, r3
 800385a:	f043 0307 	orr.w	r3, r3, #7
 800385e:	b29a      	uxth	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	811a      	strh	r2, [r3, #8]
}
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop

0800386c <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	8179      	strh	r1, [r7, #10]
 8003876:	813a      	strh	r2, [r7, #8]
 8003878:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 800387a:	2300      	movs	r3, #0
 800387c:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 800387e:	8979      	ldrh	r1, [r7, #10]
 8003880:	893a      	ldrh	r2, [r7, #8]
 8003882:	88fb      	ldrh	r3, [r7, #6]
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 f8a1 	bl	80039cc <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	891b      	ldrh	r3, [r3, #8]
 800388e:	82fb      	strh	r3, [r7, #22]

  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8003890:	8afb      	ldrh	r3, [r7, #22]
 8003892:	f023 0307 	bic.w	r3, r3, #7
 8003896:	82fb      	strh	r3, [r7, #22]

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 8003898:	8afb      	ldrh	r3, [r7, #22]
 800389a:	f043 0307 	orr.w	r3, r3, #7
 800389e:	82fb      	strh	r3, [r7, #22]

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 80038a0:	8afb      	ldrh	r3, [r7, #22]
 80038a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038a6:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_TS_ETRF;
 80038a8:	8afb      	ldrh	r3, [r7, #22]
 80038aa:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80038ae:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8afa      	ldrh	r2, [r7, #22]
 80038b4:	811a      	strh	r2, [r3, #8]
}
 80038b6:	3718      	adds	r7, #24
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	8179      	strh	r1, [r7, #10]
 80038c6:	813a      	strh	r2, [r7, #8]
 80038c8:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 80038ca:	8979      	ldrh	r1, [r7, #10]
 80038cc:	893a      	ldrh	r2, [r7, #8]
 80038ce:	88fb      	ldrh	r3, [r7, #6]
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f000 f87b 	bl	80039cc <TIM_ETRConfig>

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	891b      	ldrh	r3, [r3, #8]
 80038da:	b29b      	uxth	r3, r3
 80038dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	811a      	strh	r2, [r3, #8]
}
 80038e6:	3710      	adds	r7, #16
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <TIM_SelectInputTrigger>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	460b      	mov	r3, r1
 80038f6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
 80038f8:	2300      	movs	r3, #0
 80038fa:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	891b      	ldrh	r3, [r3, #8]
 8003900:	81fb      	strh	r3, [r7, #14]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8003902:	89fb      	ldrh	r3, [r7, #14]
 8003904:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003908:	81fb      	strh	r3, [r7, #14]

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 800390a:	89fa      	ldrh	r2, [r7, #14]
 800390c:	887b      	ldrh	r3, [r7, #2]
 800390e:	4313      	orrs	r3, r2
 8003910:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	89fa      	ldrh	r2, [r7, #14]
 8003916:	811a      	strh	r2, [r3, #8]
}
 8003918:	3714      	adds	r7, #20
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop

08003924 <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	460b      	mov	r3, r1
 800392e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	889b      	ldrh	r3, [r3, #4]
 8003934:	b29b      	uxth	r3, r3
 8003936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800393a:	b29a      	uxth	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	889b      	ldrh	r3, [r3, #4]
 8003944:	b29a      	uxth	r2, r3
 8003946:	887b      	ldrh	r3, [r7, #2]
 8003948:	4313      	orrs	r3, r2
 800394a:	b29a      	uxth	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	809a      	strh	r2, [r3, #4]
}
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop

0800395c <TIM_SelectSlaveMode>:
  *            @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI
  *            @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	460b      	mov	r3, r1
 8003966:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	891b      	ldrh	r3, [r3, #8]
 800396c:	b29b      	uxth	r3, r3
 800396e:	f023 0307 	bic.w	r3, r3, #7
 8003972:	b29a      	uxth	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	811a      	strh	r2, [r3, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	891b      	ldrh	r3, [r3, #8]
 800397c:	b29a      	uxth	r2, r3
 800397e:	887b      	ldrh	r3, [r7, #2]
 8003980:	4313      	orrs	r3, r2
 8003982:	b29a      	uxth	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	811a      	strh	r2, [r3, #8]
}
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop

08003994 <TIM_SelectMasterSlaveMode>:
  *                                             and its slaves (through TRGO)
  *            @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	460b      	mov	r3, r1
 800399e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	891b      	ldrh	r3, [r3, #8]
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	811a      	strh	r2, [r3, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	891b      	ldrh	r3, [r3, #8]
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	887b      	ldrh	r3, [r7, #2]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	811a      	strh	r2, [r3, #8]
}
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop

080039cc <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b087      	sub	sp, #28
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	8179      	strh	r1, [r7, #10]
 80039d6:	813a      	strh	r2, [r7, #8]
 80039d8:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 80039da:	2300      	movs	r3, #0
 80039dc:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	891b      	ldrh	r3, [r3, #8]
 80039e2:	82fb      	strh	r3, [r7, #22]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 80039e4:	8afb      	ldrh	r3, [r7, #22]
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	82fb      	strh	r3, [r7, #22]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 80039ea:	88fb      	ldrh	r3, [r7, #6]
 80039ec:	021b      	lsls	r3, r3, #8
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	893b      	ldrh	r3, [r7, #8]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	897b      	ldrh	r3, [r7, #10]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	8afb      	ldrh	r3, [r7, #22]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8afa      	ldrh	r2, [r7, #22]
 8003a06:	811a      	strh	r2, [r3, #8]
}
 8003a08:	371c      	adds	r7, #28
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop

08003a14 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b087      	sub	sp, #28
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	8179      	strh	r1, [r7, #10]
 8003a1e:	813a      	strh	r2, [r7, #8]
 8003a20:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 8003a22:	2300      	movs	r3, #0
 8003a24:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
 8003a26:	2300      	movs	r3, #0
 8003a28:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	891b      	ldrh	r3, [r3, #8]
 8003a32:	82fb      	strh	r3, [r7, #22]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	8b1b      	ldrh	r3, [r3, #24]
 8003a38:	82bb      	strh	r3, [r7, #20]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	8c1b      	ldrh	r3, [r3, #32]
 8003a3e:	827b      	strh	r3, [r7, #18]

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8003a40:	8afb      	ldrh	r3, [r7, #22]
 8003a42:	f023 0307 	bic.w	r3, r3, #7
 8003a46:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
 8003a48:	8afa      	ldrh	r2, [r7, #22]
 8003a4a:	897b      	ldrh	r3, [r7, #10]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	82fb      	strh	r3, [r7, #22]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8003a50:	8abb      	ldrh	r3, [r7, #20]
 8003a52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a56:	f023 0303 	bic.w	r3, r3, #3
 8003a5a:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8003a5c:	8abb      	ldrh	r3, [r7, #20]
 8003a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a62:	f043 0301 	orr.w	r3, r3, #1
 8003a66:	82bb      	strh	r3, [r7, #20]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 8003a68:	8a7b      	ldrh	r3, [r7, #18]
 8003a6a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003a6e:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8003a70:	88fb      	ldrh	r3, [r7, #6]
 8003a72:	011b      	lsls	r3, r3, #4
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	893b      	ldrh	r3, [r7, #8]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	8a7b      	ldrh	r3, [r7, #18]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	827b      	strh	r3, [r7, #18]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	8afa      	ldrh	r2, [r7, #22]
 8003a86:	811a      	strh	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8aba      	ldrh	r2, [r7, #20]
 8003a8c:	831a      	strh	r2, [r3, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8a7a      	ldrh	r2, [r7, #18]
 8003a92:	841a      	strh	r2, [r3, #32]
}
 8003a94:	371c      	adds	r7, #28
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop

08003aa0 <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003aac:	78fb      	ldrb	r3, [r7, #3]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d008      	beq.n	8003ac4 <TIM_SelectHallSensor+0x24>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	889b      	ldrh	r3, [r3, #4]
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003abc:	b29a      	uxth	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	809a      	strh	r2, [r3, #4]
 8003ac2:	e007      	b.n	8003ad4 <TIM_SelectHallSensor+0x34>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	889b      	ldrh	r3, [r3, #4]
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	809a      	strh	r2, [r3, #4]
  }
}
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop

08003ae0 <TIM_RemapConfig>:
  *            @arg TIM11_HSE:      TIM11 CH4 input is connected to HSE_RTC clock
  *                                 (HSE divided by a programmable prescaler)  
  * @retval None
  */
void TIM_RemapConfig(TIM_TypeDef* TIMx, uint16_t TIM_Remap)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	460b      	mov	r3, r1
 8003aea:	807b      	strh	r3, [r7, #2]
 /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	887a      	ldrh	r2, [r7, #2]
 8003af0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop

08003b00 <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b087      	sub	sp, #28
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	8179      	strh	r1, [r7, #10]
 8003b0a:	813a      	strh	r2, [r7, #8]
 8003b0c:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	82fb      	strh	r3, [r7, #22]
 8003b12:	2300      	movs	r3, #0
 8003b14:	82bb      	strh	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	8c1b      	ldrh	r3, [r3, #32]
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	f023 0301 	bic.w	r3, r3, #1
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8b1b      	ldrh	r3, [r3, #24]
 8003b2a:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8c1b      	ldrh	r3, [r3, #32]
 8003b30:	82bb      	strh	r3, [r7, #20]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8003b32:	8afb      	ldrh	r3, [r7, #22]
 8003b34:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8003b38:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8003b3a:	88fb      	ldrh	r3, [r7, #6]
 8003b3c:	011b      	lsls	r3, r3, #4
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	893b      	ldrh	r3, [r7, #8]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	8afb      	ldrh	r3, [r7, #22]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b4c:	8abb      	ldrh	r3, [r7, #20]
 8003b4e:	f023 030a 	bic.w	r3, r3, #10
 8003b52:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8003b54:	897a      	ldrh	r2, [r7, #10]
 8003b56:	8abb      	ldrh	r3, [r7, #20]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	f043 0301 	orr.w	r3, r3, #1
 8003b60:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8afa      	ldrh	r2, [r7, #22]
 8003b66:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8aba      	ldrh	r2, [r7, #20]
 8003b6c:	841a      	strh	r2, [r3, #32]
}
 8003b6e:	371c      	adds	r7, #28
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b087      	sub	sp, #28
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	8179      	strh	r1, [r7, #10]
 8003b82:	813a      	strh	r2, [r7, #8]
 8003b84:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 8003b86:	2300      	movs	r3, #0
 8003b88:	82fb      	strh	r3, [r7, #22]
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	82bb      	strh	r3, [r7, #20]
 8003b8e:	2300      	movs	r3, #0
 8003b90:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8c1b      	ldrh	r3, [r3, #32]
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	f023 0310 	bic.w	r3, r3, #16
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	8b1b      	ldrh	r3, [r3, #24]
 8003ba6:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8c1b      	ldrh	r3, [r3, #32]
 8003bac:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8003bae:	897b      	ldrh	r3, [r7, #10]
 8003bb0:	011b      	lsls	r3, r3, #4
 8003bb2:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8003bb4:	8afb      	ldrh	r3, [r7, #22]
 8003bb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bba:	051b      	lsls	r3, r3, #20
 8003bbc:	0d1b      	lsrs	r3, r3, #20
 8003bbe:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8003bc0:	88fb      	ldrh	r3, [r7, #6]
 8003bc2:	031b      	lsls	r3, r3, #12
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	8afb      	ldrh	r3, [r7, #22]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8003bcc:	893b      	ldrh	r3, [r7, #8]
 8003bce:	021b      	lsls	r3, r3, #8
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	8afb      	ldrh	r3, [r7, #22]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bd8:	8abb      	ldrh	r3, [r7, #20]
 8003bda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003bde:	82bb      	strh	r3, [r7, #20]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8003be0:	8a7a      	ldrh	r2, [r7, #18]
 8003be2:	8abb      	ldrh	r3, [r7, #20]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	f043 0310 	orr.w	r3, r3, #16
 8003bec:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	8afa      	ldrh	r2, [r7, #22]
 8003bf2:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8aba      	ldrh	r2, [r7, #20]
 8003bf8:	841a      	strh	r2, [r3, #32]
}
 8003bfa:	371c      	adds	r7, #28
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <TI3_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b087      	sub	sp, #28
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	8179      	strh	r1, [r7, #10]
 8003c0e:	813a      	strh	r2, [r7, #8]
 8003c10:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8003c12:	2300      	movs	r3, #0
 8003c14:	82fb      	strh	r3, [r7, #22]
 8003c16:	2300      	movs	r3, #0
 8003c18:	82bb      	strh	r3, [r7, #20]
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8c1b      	ldrh	r3, [r3, #32]
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8b9b      	ldrh	r3, [r3, #28]
 8003c32:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8c1b      	ldrh	r3, [r3, #32]
 8003c38:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 8003c3a:	897b      	ldrh	r3, [r7, #10]
 8003c3c:	021b      	lsls	r3, r3, #8
 8003c3e:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 8003c40:	8afb      	ldrh	r3, [r7, #22]
 8003c42:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8003c46:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8003c48:	88fb      	ldrh	r3, [r7, #6]
 8003c4a:	011b      	lsls	r3, r3, #4
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	893b      	ldrh	r3, [r7, #8]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	8afb      	ldrh	r3, [r7, #22]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003c5a:	8abb      	ldrh	r3, [r7, #20]
 8003c5c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003c60:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8003c62:	8a7a      	ldrh	r2, [r7, #18]
 8003c64:	8abb      	ldrh	r3, [r7, #20]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c6e:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	8afa      	ldrh	r2, [r7, #22]
 8003c74:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	8aba      	ldrh	r2, [r7, #20]
 8003c7a:	841a      	strh	r2, [r3, #32]
}
 8003c7c:	371c      	adds	r7, #28
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop

08003c88 <TI4_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b087      	sub	sp, #28
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	8179      	strh	r1, [r7, #10]
 8003c92:	813a      	strh	r2, [r7, #8]
 8003c94:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8003c96:	2300      	movs	r3, #0
 8003c98:	82fb      	strh	r3, [r7, #22]
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	82bb      	strh	r3, [r7, #20]
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8c1b      	ldrh	r3, [r3, #32]
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	8b9b      	ldrh	r3, [r3, #28]
 8003cb6:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8c1b      	ldrh	r3, [r3, #32]
 8003cbc:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 8003cbe:	897b      	ldrh	r3, [r7, #10]
 8003cc0:	031b      	lsls	r3, r3, #12
 8003cc2:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8003cc4:	8afb      	ldrh	r3, [r7, #22]
 8003cc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cca:	051b      	lsls	r3, r3, #20
 8003ccc:	0d1b      	lsrs	r3, r3, #20
 8003cce:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8003cd0:	893b      	ldrh	r3, [r7, #8]
 8003cd2:	021b      	lsls	r3, r3, #8
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	8afb      	ldrh	r3, [r7, #22]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8003cdc:	88fb      	ldrh	r3, [r7, #6]
 8003cde:	031b      	lsls	r3, r3, #12
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	8afb      	ldrh	r3, [r7, #22]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003ce8:	8abb      	ldrh	r3, [r7, #20]
 8003cea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cee:	045b      	lsls	r3, r3, #17
 8003cf0:	0c5b      	lsrs	r3, r3, #17
 8003cf2:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8003cf4:	8a7a      	ldrh	r2, [r7, #18]
 8003cf6:	8abb      	ldrh	r3, [r7, #20]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d00:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8afa      	ldrh	r2, [r7, #22]
 8003d06:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8aba      	ldrh	r2, [r7, #20]
 8003d0c:	841a      	strh	r2, [r3, #32]
}
 8003d0e:	371c      	adds	r7, #28
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <SYSCFG_DeInit>:
  *   registers to their default reset values.
  * @param  None
  * @retval None
  */
void SYSCFG_DeInit(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8003d1c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003d20:	2101      	movs	r1, #1
 8003d22:	f000 fc93 	bl	800464c <RCC_APB2PeriphResetCmd>
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 8003d26:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	f000 fc8e 	bl	800464c <RCC_APB2PeriphResetCmd>
}
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop

08003d34 <SYSCFG_MemoryRemapConfig>:
  *            @arg SYSCFG_MemoryRemap_FSMC:        FSMC (Bank1 (NOR/PSRAM 1 and 2) mapped at 0x00000000   
  *            @arg SYSCFG_MemoryRemap_SRAM:        Embedded SRAM (112kB) mapped at 0x00000000          
  * @retval None
  */
void SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap));

  SYSCFG->MEMRMP = SYSCFG_MemoryRemap;
 8003d3e:	4b04      	ldr	r3, [pc, #16]	; (8003d50 <SYSCFG_MemoryRemapConfig+0x1c>)
 8003d40:	79fa      	ldrb	r2, [r7, #7]
 8003d42:	601a      	str	r2, [r3, #0]
}
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	40013800 	.word	0x40013800

08003d54 <SYSCFG_EXTILineConfig>:
  *           and STM32F427x/STM32F437x devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8003d54:	b490      	push	{r4, r7}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	71fa      	strb	r2, [r7, #7]
 8003d60:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8003d62:	2300      	movs	r3, #0
 8003d64:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8003d66:	79bb      	ldrb	r3, [r7, #6]
 8003d68:	f003 0303 	and.w	r3, r3, #3
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	220f      	movs	r2, #15
 8003d70:	fa02 f303 	lsl.w	r3, r2, r3
 8003d74:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8003d76:	4b15      	ldr	r3, [pc, #84]	; (8003dcc <SYSCFG_EXTILineConfig+0x78>)
 8003d78:	79ba      	ldrb	r2, [r7, #6]
 8003d7a:	0892      	lsrs	r2, r2, #2
 8003d7c:	b2d2      	uxtb	r2, r2
 8003d7e:	4913      	ldr	r1, [pc, #76]	; (8003dcc <SYSCFG_EXTILineConfig+0x78>)
 8003d80:	79b8      	ldrb	r0, [r7, #6]
 8003d82:	0880      	lsrs	r0, r0, #2
 8003d84:	b2c0      	uxtb	r0, r0
 8003d86:	3002      	adds	r0, #2
 8003d88:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8003d8c:	68f9      	ldr	r1, [r7, #12]
 8003d8e:	43c9      	mvns	r1, r1
 8003d90:	4001      	ands	r1, r0
 8003d92:	3202      	adds	r2, #2
 8003d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8003d98:	4b0c      	ldr	r3, [pc, #48]	; (8003dcc <SYSCFG_EXTILineConfig+0x78>)
 8003d9a:	79ba      	ldrb	r2, [r7, #6]
 8003d9c:	0892      	lsrs	r2, r2, #2
 8003d9e:	b2d2      	uxtb	r2, r2
 8003da0:	490a      	ldr	r1, [pc, #40]	; (8003dcc <SYSCFG_EXTILineConfig+0x78>)
 8003da2:	79b8      	ldrb	r0, [r7, #6]
 8003da4:	0880      	lsrs	r0, r0, #2
 8003da6:	b2c0      	uxtb	r0, r0
 8003da8:	3002      	adds	r0, #2
 8003daa:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8003dae:	79fc      	ldrb	r4, [r7, #7]
 8003db0:	79b9      	ldrb	r1, [r7, #6]
 8003db2:	f001 0103 	and.w	r1, r1, #3
 8003db6:	0089      	lsls	r1, r1, #2
 8003db8:	fa04 f101 	lsl.w	r1, r4, r1
 8003dbc:	4301      	orrs	r1, r0
 8003dbe:	3202      	adds	r2, #2
 8003dc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bc90      	pop	{r4, r7}
 8003dca:	4770      	bx	lr
 8003dcc:	40013800 	.word	0x40013800

08003dd0 <SYSCFG_ETH_MediaInterfaceConfig>:
  *            @arg SYSCFG_ETH_MediaInterface_MII: MII mode selected
  *            @arg SYSCFG_ETH_MediaInterface_RMII: RMII mode selected 
  * @retval None 
  */
void SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface) 
{ 
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_ETH_MEDIA_INTERFACE(SYSCFG_ETH_MediaInterface)); 
  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) PMC_MII_RMII_SEL_BB = SYSCFG_ETH_MediaInterface; 
 8003dd8:	4b03      	ldr	r3, [pc, #12]	; (8003de8 <SYSCFG_ETH_MediaInterfaceConfig+0x18>)
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	601a      	str	r2, [r3, #0]
}
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr
 8003de8:	422700dc 	.word	0x422700dc

08003dec <SYSCFG_CompensationCellCmd>:
  *            @arg ENABLE: I/O compensation cell enabled  
  *            @arg DISABLE: I/O compensation cell power-down mode  
  * @retval None
  */
void SYSCFG_CompensationCellCmd(FunctionalState NewState)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	4603      	mov	r3, r0
 8003df4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CMPCR_CMP_PD_BB = (uint32_t)NewState;
 8003df6:	4b04      	ldr	r3, [pc, #16]	; (8003e08 <SYSCFG_CompensationCellCmd+0x1c>)
 8003df8:	79fa      	ldrb	r2, [r7, #7]
 8003dfa:	601a      	str	r2, [r3, #0]
}
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	42270400 	.word	0x42270400

08003e0c <SYSCFG_GetCompensationCellStatus>:
  * @brief  Checks whether the I/O Compensation Cell ready flag is set or not.
  * @param  None
  * @retval The new state of the I/O Compensation Cell ready flag (SET or RESET)
  */
FlagStatus SYSCFG_GetCompensationCellStatus(void)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
  FlagStatus bitstatus = RESET;
 8003e12:	2300      	movs	r3, #0
 8003e14:	71fb      	strb	r3, [r7, #7]
    
  if ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY ) != (uint32_t)RESET)
 8003e16:	4b09      	ldr	r3, [pc, #36]	; (8003e3c <SYSCFG_GetCompensationCellStatus+0x30>)
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d002      	beq.n	8003e28 <SYSCFG_GetCompensationCellStatus+0x1c>
  {
    bitstatus = SET;
 8003e22:	2301      	movs	r3, #1
 8003e24:	71fb      	strb	r3, [r7, #7]
 8003e26:	e001      	b.n	8003e2c <SYSCFG_GetCompensationCellStatus+0x20>
  }
  else
  {
    bitstatus = RESET;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	71fb      	strb	r3, [r7, #7]
  }
  return bitstatus;
 8003e2c:	79fb      	ldrb	r3, [r7, #7]
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	40013800 	.word	0x40013800

08003e40 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8003e40:	b480      	push	{r7}
 8003e42:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003e44:	4b12      	ldr	r3, [pc, #72]	; (8003e90 <RCC_DeInit+0x50>)
 8003e46:	4a12      	ldr	r2, [pc, #72]	; (8003e90 <RCC_DeInit+0x50>)
 8003e48:	6812      	ldr	r2, [r2, #0]
 8003e4a:	f042 0201 	orr.w	r2, r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003e50:	4b0f      	ldr	r3, [pc, #60]	; (8003e90 <RCC_DeInit+0x50>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON and PLLI2S bits */
  RCC->CR &= (uint32_t)0xFAF6FFFF;
 8003e56:	4a0e      	ldr	r2, [pc, #56]	; (8003e90 <RCC_DeInit+0x50>)
 8003e58:	4b0d      	ldr	r3, [pc, #52]	; (8003e90 <RCC_DeInit+0x50>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f023 63a1 	bic.w	r3, r3, #84410368	; 0x5080000
 8003e60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e64:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003e66:	4b0a      	ldr	r3, [pc, #40]	; (8003e90 <RCC_DeInit+0x50>)
 8003e68:	4a0a      	ldr	r2, [pc, #40]	; (8003e94 <RCC_DeInit+0x54>)
 8003e6a:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8003e6c:	4b08      	ldr	r3, [pc, #32]	; (8003e90 <RCC_DeInit+0x50>)
 8003e6e:	4a0a      	ldr	r2, [pc, #40]	; (8003e98 <RCC_DeInit+0x58>)
 8003e70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003e74:	4b06      	ldr	r3, [pc, #24]	; (8003e90 <RCC_DeInit+0x50>)
 8003e76:	4a06      	ldr	r2, [pc, #24]	; (8003e90 <RCC_DeInit+0x50>)
 8003e78:	6812      	ldr	r2, [r2, #0]
 8003e7a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e7e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003e80:	4b03      	ldr	r3, [pc, #12]	; (8003e90 <RCC_DeInit+0x50>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	60da      	str	r2, [r3, #12]
#ifdef STM32F427X 
  /* Disable Timers clock prescalers selection */
  RCC->DCKCFGR = 0x00000000;
#endif /* STM32F427X */ 

}
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	40023800 	.word	0x40023800
 8003e94:	24003010 	.word	0x24003010
 8003e98:	20003000 	.word	0x20003000

08003e9c <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 8003ea6:	4b05      	ldr	r3, [pc, #20]	; (8003ebc <RCC_HSEConfig+0x20>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 8003eac:	4b03      	ldr	r3, [pc, #12]	; (8003ebc <RCC_HSEConfig+0x20>)
 8003eae:	79fa      	ldrb	r2, [r7, #7]
 8003eb0:	701a      	strb	r2, [r3, #0]
}
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	40023802 	.word	0x40023802

08003ec0 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	71fb      	strb	r3, [r7, #7]
  FlagStatus hsestatus = RESET;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	71bb      	strb	r3, [r7, #6]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8003ed2:	2031      	movs	r0, #49	; 0x31
 8003ed4:	f000 fc92 	bl	80047fc <RCC_GetFlagStatus>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	71bb      	strb	r3, [r7, #6]
    startupcounter++;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	3301      	adds	r3, #1
 8003ee0:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003ee8:	d002      	beq.n	8003ef0 <RCC_WaitForHSEStartUp+0x30>
 8003eea:	79bb      	ldrb	r3, [r7, #6]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d0f0      	beq.n	8003ed2 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8003ef0:	2031      	movs	r0, #49	; 0x31
 8003ef2:	f000 fc83 	bl	80047fc <RCC_GetFlagStatus>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d002      	beq.n	8003f02 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 8003efc:	2301      	movs	r3, #1
 8003efe:	71fb      	strb	r3, [r7, #7]
 8003f00:	e001      	b.n	8003f06 <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 8003f02:	2300      	movs	r3, #0
 8003f04:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 8003f06:	79fb      	ldrb	r3, [r7, #7]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3708      	adds	r7, #8
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	4603      	mov	r3, r0
 8003f18:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 8003f1e:	4b0a      	ldr	r3, [pc, #40]	; (8003f48 <RCC_AdjustHSICalibrationValue+0x38>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003f2a:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8003f2c:	79fb      	ldrb	r3, [r7, #7]
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
 8003f36:	4b04      	ldr	r3, [pc, #16]	; (8003f48 <RCC_AdjustHSICalibrationValue+0x38>)
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	601a      	str	r2, [r3, #0]
}
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	40023800 	.word	0x40023800

08003f4c <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	4603      	mov	r3, r0
 8003f54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8003f56:	4b04      	ldr	r3, [pc, #16]	; (8003f68 <RCC_HSICmd+0x1c>)
 8003f58:	79fa      	ldrb	r2, [r7, #7]
 8003f5a:	601a      	str	r2, [r3, #0]
}
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	42470000 	.word	0x42470000

08003f6c <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	4603      	mov	r3, r0
 8003f74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8003f76:	4b0c      	ldr	r3, [pc, #48]	; (8003fa8 <RCC_LSEConfig+0x3c>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8003f7c:	4b0a      	ldr	r3, [pc, #40]	; (8003fa8 <RCC_LSEConfig+0x3c>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8003f82:	79fb      	ldrb	r3, [r7, #7]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d002      	beq.n	8003f8e <RCC_LSEConfig+0x22>
 8003f88:	2b04      	cmp	r3, #4
 8003f8a:	d004      	beq.n	8003f96 <RCC_LSEConfig+0x2a>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;
    default:
      break;
 8003f8c:	e007      	b.n	8003f9e <RCC_LSEConfig+0x32>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 8003f8e:	4b06      	ldr	r3, [pc, #24]	; (8003fa8 <RCC_LSEConfig+0x3c>)
 8003f90:	2201      	movs	r2, #1
 8003f92:	701a      	strb	r2, [r3, #0]
      break;
 8003f94:	e003      	b.n	8003f9e <RCC_LSEConfig+0x32>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8003f96:	4b04      	ldr	r3, [pc, #16]	; (8003fa8 <RCC_LSEConfig+0x3c>)
 8003f98:	2205      	movs	r2, #5
 8003f9a:	701a      	strb	r2, [r3, #0]
      break;
 8003f9c:	bf00      	nop
    default:
      break;
  }
}
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	40023870 	.word	0x40023870

08003fac <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8003fb6:	4b04      	ldr	r3, [pc, #16]	; (8003fc8 <RCC_LSICmd+0x1c>)
 8003fb8:	79fa      	ldrb	r2, [r7, #7]
 8003fba:	601a      	str	r2, [r3, #0]
}
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	42470e80 	.word	0x42470e80

08003fcc <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
 8003fd8:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8003fda:	4b0a      	ldr	r3, [pc, #40]	; (8004004 <RCC_PLLConfig+0x38>)
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	0191      	lsls	r1, r2, #6
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	4311      	orrs	r1, r2
 8003fe4:	683a      	ldr	r2, [r7, #0]
 8003fe6:	0852      	lsrs	r2, r2, #1
 8003fe8:	3a01      	subs	r2, #1
 8003fea:	0412      	lsls	r2, r2, #16
 8003fec:	4311      	orrs	r1, r2
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	4311      	orrs	r1, r2
                 (PLLQ << 24);
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	0612      	lsls	r2, r2, #24
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	605a      	str	r2, [r3, #4]
                 (PLLQ << 24);
}
 8003ffa:	3714      	adds	r7, #20
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr
 8004004:	40023800 	.word	0x40023800

08004008 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	4603      	mov	r3, r0
 8004010:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8004012:	4b04      	ldr	r3, [pc, #16]	; (8004024 <RCC_PLLCmd+0x1c>)
 8004014:	79fa      	ldrb	r2, [r7, #7]
 8004016:	601a      	str	r2, [r3, #0]
}
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	42470060 	.word	0x42470060

08004028 <RCC_PLLI2SConfig>:
  *         on the I2S clock frequency.
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 8004032:	4b06      	ldr	r3, [pc, #24]	; (800404c <RCC_PLLI2SConfig+0x24>)
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	0191      	lsls	r1, r2, #6
 8004038:	683a      	ldr	r2, [r7, #0]
 800403a:	0712      	lsls	r2, r2, #28
 800403c:	430a      	orrs	r2, r1
 800403e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr
 800404c:	40023800 	.word	0x40023800

08004050 <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	4603      	mov	r3, r0
 8004058:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 800405a:	4b04      	ldr	r3, [pc, #16]	; (800406c <RCC_PLLI2SCmd+0x1c>)
 800405c:	79fa      	ldrb	r2, [r7, #7]
 800405e:	601a      	str	r2, [r3, #0]
}
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	42470068 	.word	0x42470068

08004070 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	4603      	mov	r3, r0
 8004078:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 800407a:	4b04      	ldr	r3, [pc, #16]	; (800408c <RCC_ClockSecuritySystemCmd+0x1c>)
 800407c:	79fa      	ldrb	r2, [r7, #7]
 800407e:	601a      	str	r2, [r3, #0]
}
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	4247004c 	.word	0x4247004c

08004090 <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800409a:	2300      	movs	r3, #0
 800409c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 800409e:	4b0a      	ldr	r3, [pc, #40]	; (80040c8 <RCC_MCO1Config+0x38>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 80040aa:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 80040b8:	4b03      	ldr	r3, [pc, #12]	; (80040c8 <RCC_MCO1Config+0x38>)
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	609a      	str	r2, [r3, #8]
}
 80040be:	3714      	adds	r7, #20
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr
 80040c8:	40023800 	.word	0x40023800

080040cc <RCC_MCO2Config>:
  *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
  *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80040d6:	2300      	movs	r3, #0
 80040d8:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 80040da:	4b0a      	ldr	r3, [pc, #40]	; (8004104 <RCC_MCO2Config+0x38>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80040e6:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 80040f4:	4b03      	ldr	r3, [pc, #12]	; (8004104 <RCC_MCO2Config+0x38>)
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	609a      	str	r2, [r3, #8]
}
 80040fa:	3714      	adds	r7, #20
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr
 8004104:	40023800 	.word	0x40023800

08004108 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8004110:	2300      	movs	r3, #0
 8004112:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8004114:	4b09      	ldr	r3, [pc, #36]	; (800413c <RCC_SYSCLKConfig+0x34>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f023 0303 	bic.w	r3, r3, #3
 8004120:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4313      	orrs	r3, r2
 8004128:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800412a:	4b04      	ldr	r3, [pc, #16]	; (800413c <RCC_SYSCLKConfig+0x34>)
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	609a      	str	r2, [r3, #8]
}
 8004130:	3714      	adds	r7, #20
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	40023800 	.word	0x40023800

08004140 <RCC_GetSYSCLKSource>:
  *              - 0x00: HSI used as system clock
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 8004140:	b480      	push	{r7}
 8004142:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8004144:	4b05      	ldr	r3, [pc, #20]	; (800415c <RCC_GetSYSCLKSource+0x1c>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	b2db      	uxtb	r3, r3
 800414a:	f003 030c 	and.w	r3, r3, #12
 800414e:	b2db      	uxtb	r3, r3
}
 8004150:	4618      	mov	r0, r3
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	40023800 	.word	0x40023800

08004160 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8004168:	2300      	movs	r3, #0
 800416a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 800416c:	4b09      	ldr	r3, [pc, #36]	; (8004194 <RCC_HCLKConfig+0x34>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004178:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4313      	orrs	r3, r2
 8004180:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004182:	4b04      	ldr	r3, [pc, #16]	; (8004194 <RCC_HCLKConfig+0x34>)
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	609a      	str	r2, [r3, #8]
}
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	40023800 	.word	0x40023800

08004198 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80041a0:	2300      	movs	r3, #0
 80041a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 80041a4:	4b09      	ldr	r3, [pc, #36]	; (80041cc <RCC_PCLK1Config+0x34>)
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80041b0:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80041ba:	4b04      	ldr	r3, [pc, #16]	; (80041cc <RCC_PCLK1Config+0x34>)
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	609a      	str	r2, [r3, #8]
}
 80041c0:	3714      	adds	r7, #20
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	40023800 	.word	0x40023800

080041d0 <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b085      	sub	sp, #20
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80041d8:	2300      	movs	r3, #0
 80041da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 80041dc:	4b09      	ldr	r3, [pc, #36]	; (8004204 <RCC_PCLK2Config+0x34>)
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80041e8:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	00db      	lsls	r3, r3, #3
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80041f4:	4b03      	ldr	r3, [pc, #12]	; (8004204 <RCC_PCLK2Config+0x34>)
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	609a      	str	r2, [r3, #8]
}
 80041fa:	3714      	adds	r7, #20
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr
 8004204:	40023800 	.word	0x40023800

08004208 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8004208:	b480      	push	{r7}
 800420a:	b089      	sub	sp, #36	; 0x24
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8004210:	2300      	movs	r3, #0
 8004212:	61bb      	str	r3, [r7, #24]
 8004214:	2300      	movs	r3, #0
 8004216:	617b      	str	r3, [r7, #20]
 8004218:	2300      	movs	r3, #0
 800421a:	61fb      	str	r3, [r7, #28]
 800421c:	2302      	movs	r3, #2
 800421e:	613b      	str	r3, [r7, #16]
 8004220:	2300      	movs	r3, #0
 8004222:	60fb      	str	r3, [r7, #12]
 8004224:	2302      	movs	r3, #2
 8004226:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8004228:	4b48      	ldr	r3, [pc, #288]	; (800434c <RCC_GetClocksFreq+0x144>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f003 030c 	and.w	r3, r3, #12
 8004230:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	2b04      	cmp	r3, #4
 8004236:	d007      	beq.n	8004248 <RCC_GetClocksFreq+0x40>
 8004238:	2b08      	cmp	r3, #8
 800423a:	d009      	beq.n	8004250 <RCC_GetClocksFreq+0x48>
 800423c:	2b00      	cmp	r3, #0
 800423e:	d13f      	bne.n	80042c0 <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a43      	ldr	r2, [pc, #268]	; (8004350 <RCC_GetClocksFreq+0x148>)
 8004244:	601a      	str	r2, [r3, #0]
      break;
 8004246:	e03f      	b.n	80042c8 <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a42      	ldr	r2, [pc, #264]	; (8004354 <RCC_GetClocksFreq+0x14c>)
 800424c:	601a      	str	r2, [r3, #0]
      break;
 800424e:	e03b      	b.n	80042c8 <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8004250:	4b3e      	ldr	r3, [pc, #248]	; (800434c <RCC_GetClocksFreq+0x144>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004258:	0d9b      	lsrs	r3, r3, #22
 800425a:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800425c:	4b3b      	ldr	r3, [pc, #236]	; (800434c <RCC_GetClocksFreq+0x144>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004264:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00d      	beq.n	8004288 <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800426c:	4a39      	ldr	r2, [pc, #228]	; (8004354 <RCC_GetClocksFreq+0x14c>)
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	fbb2 f2f3 	udiv	r2, r2, r3
 8004274:	4b35      	ldr	r3, [pc, #212]	; (800434c <RCC_GetClocksFreq+0x144>)
 8004276:	6859      	ldr	r1, [r3, #4]
 8004278:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800427c:	400b      	ands	r3, r1
 800427e:	099b      	lsrs	r3, r3, #6
 8004280:	fb03 f302 	mul.w	r3, r3, r2
 8004284:	61fb      	str	r3, [r7, #28]
 8004286:	e00c      	b.n	80042a2 <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8004288:	4a31      	ldr	r2, [pc, #196]	; (8004350 <RCC_GetClocksFreq+0x148>)
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004290:	4b2e      	ldr	r3, [pc, #184]	; (800434c <RCC_GetClocksFreq+0x144>)
 8004292:	6859      	ldr	r1, [r3, #4]
 8004294:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004298:	400b      	ands	r3, r1
 800429a:	099b      	lsrs	r3, r3, #6
 800429c:	fb03 f302 	mul.w	r3, r3, r2
 80042a0:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80042a2:	4b2a      	ldr	r3, [pc, #168]	; (800434c <RCC_GetClocksFreq+0x144>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042aa:	0c1b      	lsrs	r3, r3, #16
 80042ac:	3301      	adds	r3, #1
 80042ae:	005b      	lsls	r3, r3, #1
 80042b0:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80042b2:	69fa      	ldr	r2, [r7, #28]
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	601a      	str	r2, [r3, #0]
      break;
 80042be:	e003      	b.n	80042c8 <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a23      	ldr	r2, [pc, #140]	; (8004350 <RCC_GetClocksFreq+0x148>)
 80042c4:	601a      	str	r2, [r3, #0]
      break;
 80042c6:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80042c8:	4b20      	ldr	r3, [pc, #128]	; (800434c <RCC_GetClocksFreq+0x144>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042d0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	091b      	lsrs	r3, r3, #4
 80042d6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80042d8:	4a1f      	ldr	r2, [pc, #124]	; (8004358 <RCC_GetClocksFreq+0x150>)
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	4413      	add	r3, r2
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	40da      	lsrs	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80042f0:	4b16      	ldr	r3, [pc, #88]	; (800434c <RCC_GetClocksFreq+0x144>)
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80042f8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	0a9b      	lsrs	r3, r3, #10
 80042fe:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8004300:	4a15      	ldr	r2, [pc, #84]	; (8004358 <RCC_GetClocksFreq+0x150>)
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	4413      	add	r3, r2
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	b2db      	uxtb	r3, r3
 800430a:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685a      	ldr	r2, [r3, #4]
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	40da      	lsrs	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8004318:	4b0c      	ldr	r3, [pc, #48]	; (800434c <RCC_GetClocksFreq+0x144>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004320:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	0b5b      	lsrs	r3, r3, #13
 8004326:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8004328:	4a0b      	ldr	r2, [pc, #44]	; (8004358 <RCC_GetClocksFreq+0x150>)
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	4413      	add	r3, r2
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	b2db      	uxtb	r3, r3
 8004332:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	40da      	lsrs	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	60da      	str	r2, [r3, #12]
}
 8004340:	3724      	adds	r7, #36	; 0x24
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	40023800 	.word	0x40023800
 8004350:	00f42400 	.word	0x00f42400
 8004354:	01312d00 	.word	0x01312d00
 8004358:	20000030 	.word	0x20000030

0800435c <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8004364:	2300      	movs	r3, #0
 8004366:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800436e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004372:	d111      	bne.n	8004398 <RCC_RTCCLKConfig+0x3c>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8004374:	4b0f      	ldr	r3, [pc, #60]	; (80043b4 <RCC_RTCCLKConfig+0x58>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004380:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	4313      	orrs	r3, r2
 8004390:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8004392:	4b08      	ldr	r3, [pc, #32]	; (80043b4 <RCC_RTCCLKConfig+0x58>)
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8004398:	4b06      	ldr	r3, [pc, #24]	; (80043b4 <RCC_RTCCLKConfig+0x58>)
 800439a:	4a06      	ldr	r2, [pc, #24]	; (80043b4 <RCC_RTCCLKConfig+0x58>)
 800439c:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80043a4:	430a      	orrs	r2, r1
 80043a6:	671a      	str	r2, [r3, #112]	; 0x70
}
 80043a8:	3714      	adds	r7, #20
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	40023800 	.word	0x40023800

080043b8 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	4603      	mov	r3, r0
 80043c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 80043c2:	4b04      	ldr	r3, [pc, #16]	; (80043d4 <RCC_RTCCLKCmd+0x1c>)
 80043c4:	79fa      	ldrb	r2, [r7, #7]
 80043c6:	601a      	str	r2, [r3, #0]
}
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	42470e3c 	.word	0x42470e3c

080043d8 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	4603      	mov	r3, r0
 80043e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 80043e2:	4b04      	ldr	r3, [pc, #16]	; (80043f4 <RCC_BackupResetCmd+0x1c>)
 80043e4:	79fa      	ldrb	r2, [r7, #7]
 80043e6:	601a      	str	r2, [r3, #0]
}
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	42470e40 	.word	0x42470e40

080043f8 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 8004400:	4b03      	ldr	r3, [pc, #12]	; (8004410 <RCC_I2SCLKConfig+0x18>)
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	601a      	str	r2, [r3, #0]
}
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr
 8004410:	4247015c 	.word	0x4247015c

08004414 <RCC_TIMCLKPresConfig>:
  *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
  *                 to division by 8 or more.
  * @retval None
  */
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
 800441c:	4b03      	ldr	r3, [pc, #12]	; (800442c <RCC_TIMCLKPresConfig+0x18>)
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	601a      	str	r2, [r3, #0]
  
}
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr
 800442c:	424711e0 	.word	0x424711e0

08004430 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	460b      	mov	r3, r1
 800443a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800443c:	78fb      	ldrb	r3, [r7, #3]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d006      	beq.n	8004450 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8004442:	4b09      	ldr	r3, [pc, #36]	; (8004468 <RCC_AHB1PeriphClockCmd+0x38>)
 8004444:	4a08      	ldr	r2, [pc, #32]	; (8004468 <RCC_AHB1PeriphClockCmd+0x38>)
 8004446:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	430a      	orrs	r2, r1
 800444c:	631a      	str	r2, [r3, #48]	; 0x30
 800444e:	e006      	b.n	800445e <RCC_AHB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8004450:	4b05      	ldr	r3, [pc, #20]	; (8004468 <RCC_AHB1PeriphClockCmd+0x38>)
 8004452:	4a05      	ldr	r2, [pc, #20]	; (8004468 <RCC_AHB1PeriphClockCmd+0x38>)
 8004454:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	43d2      	mvns	r2, r2
 800445a:	400a      	ands	r2, r1
 800445c:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr
 8004468:	40023800 	.word	0x40023800

0800446c <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	460b      	mov	r3, r1
 8004476:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004478:	78fb      	ldrb	r3, [r7, #3]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d006      	beq.n	800448c <RCC_AHB2PeriphClockCmd+0x20>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 800447e:	4b09      	ldr	r3, [pc, #36]	; (80044a4 <RCC_AHB2PeriphClockCmd+0x38>)
 8004480:	4a08      	ldr	r2, [pc, #32]	; (80044a4 <RCC_AHB2PeriphClockCmd+0x38>)
 8004482:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	430a      	orrs	r2, r1
 8004488:	635a      	str	r2, [r3, #52]	; 0x34
 800448a:	e006      	b.n	800449a <RCC_AHB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 800448c:	4b05      	ldr	r3, [pc, #20]	; (80044a4 <RCC_AHB2PeriphClockCmd+0x38>)
 800448e:	4a05      	ldr	r2, [pc, #20]	; (80044a4 <RCC_AHB2PeriphClockCmd+0x38>)
 8004490:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	43d2      	mvns	r2, r2
 8004496:	400a      	ands	r2, r1
 8004498:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr
 80044a4:	40023800 	.word	0x40023800

080044a8 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	460b      	mov	r3, r1
 80044b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80044b4:	78fb      	ldrb	r3, [r7, #3]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d006      	beq.n	80044c8 <RCC_AHB3PeriphClockCmd+0x20>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 80044ba:	4b09      	ldr	r3, [pc, #36]	; (80044e0 <RCC_AHB3PeriphClockCmd+0x38>)
 80044bc:	4a08      	ldr	r2, [pc, #32]	; (80044e0 <RCC_AHB3PeriphClockCmd+0x38>)
 80044be:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	639a      	str	r2, [r3, #56]	; 0x38
 80044c6:	e006      	b.n	80044d6 <RCC_AHB3PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 80044c8:	4b05      	ldr	r3, [pc, #20]	; (80044e0 <RCC_AHB3PeriphClockCmd+0x38>)
 80044ca:	4a05      	ldr	r2, [pc, #20]	; (80044e0 <RCC_AHB3PeriphClockCmd+0x38>)
 80044cc:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	43d2      	mvns	r2, r2
 80044d2:	400a      	ands	r2, r1
 80044d4:	639a      	str	r2, [r3, #56]	; 0x38
  }
}
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr
 80044e0:	40023800 	.word	0x40023800

080044e4 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	460b      	mov	r3, r1
 80044ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80044f0:	78fb      	ldrb	r3, [r7, #3]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d006      	beq.n	8004504 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80044f6:	4b09      	ldr	r3, [pc, #36]	; (800451c <RCC_APB1PeriphClockCmd+0x38>)
 80044f8:	4a08      	ldr	r2, [pc, #32]	; (800451c <RCC_APB1PeriphClockCmd+0x38>)
 80044fa:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	430a      	orrs	r2, r1
 8004500:	641a      	str	r2, [r3, #64]	; 0x40
 8004502:	e006      	b.n	8004512 <RCC_APB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8004504:	4b05      	ldr	r3, [pc, #20]	; (800451c <RCC_APB1PeriphClockCmd+0x38>)
 8004506:	4a05      	ldr	r2, [pc, #20]	; (800451c <RCC_APB1PeriphClockCmd+0x38>)
 8004508:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	43d2      	mvns	r2, r2
 800450e:	400a      	ands	r2, r1
 8004510:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr
 800451c:	40023800 	.word	0x40023800

08004520 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	460b      	mov	r3, r1
 800452a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800452c:	78fb      	ldrb	r3, [r7, #3]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d006      	beq.n	8004540 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8004532:	4b09      	ldr	r3, [pc, #36]	; (8004558 <RCC_APB2PeriphClockCmd+0x38>)
 8004534:	4a08      	ldr	r2, [pc, #32]	; (8004558 <RCC_APB2PeriphClockCmd+0x38>)
 8004536:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	430a      	orrs	r2, r1
 800453c:	645a      	str	r2, [r3, #68]	; 0x44
 800453e:	e006      	b.n	800454e <RCC_APB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8004540:	4b05      	ldr	r3, [pc, #20]	; (8004558 <RCC_APB2PeriphClockCmd+0x38>)
 8004542:	4a05      	ldr	r2, [pc, #20]	; (8004558 <RCC_APB2PeriphClockCmd+0x38>)
 8004544:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	43d2      	mvns	r2, r2
 800454a:	400a      	ands	r2, r1
 800454c:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr
 8004558:	40023800 	.word	0x40023800

0800455c <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	460b      	mov	r3, r1
 8004566:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004568:	78fb      	ldrb	r3, [r7, #3]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d006      	beq.n	800457c <RCC_AHB1PeriphResetCmd+0x20>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 800456e:	4b09      	ldr	r3, [pc, #36]	; (8004594 <RCC_AHB1PeriphResetCmd+0x38>)
 8004570:	4a08      	ldr	r2, [pc, #32]	; (8004594 <RCC_AHB1PeriphResetCmd+0x38>)
 8004572:	6911      	ldr	r1, [r2, #16]
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	430a      	orrs	r2, r1
 8004578:	611a      	str	r2, [r3, #16]
 800457a:	e006      	b.n	800458a <RCC_AHB1PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 800457c:	4b05      	ldr	r3, [pc, #20]	; (8004594 <RCC_AHB1PeriphResetCmd+0x38>)
 800457e:	4a05      	ldr	r2, [pc, #20]	; (8004594 <RCC_AHB1PeriphResetCmd+0x38>)
 8004580:	6911      	ldr	r1, [r2, #16]
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	43d2      	mvns	r2, r2
 8004586:	400a      	ands	r2, r1
 8004588:	611a      	str	r2, [r3, #16]
  }
}
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr
 8004594:	40023800 	.word	0x40023800

08004598 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	460b      	mov	r3, r1
 80045a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80045a4:	78fb      	ldrb	r3, [r7, #3]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d006      	beq.n	80045b8 <RCC_AHB2PeriphResetCmd+0x20>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 80045aa:	4b09      	ldr	r3, [pc, #36]	; (80045d0 <RCC_AHB2PeriphResetCmd+0x38>)
 80045ac:	4a08      	ldr	r2, [pc, #32]	; (80045d0 <RCC_AHB2PeriphResetCmd+0x38>)
 80045ae:	6951      	ldr	r1, [r2, #20]
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	615a      	str	r2, [r3, #20]
 80045b6:	e006      	b.n	80045c6 <RCC_AHB2PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 80045b8:	4b05      	ldr	r3, [pc, #20]	; (80045d0 <RCC_AHB2PeriphResetCmd+0x38>)
 80045ba:	4a05      	ldr	r2, [pc, #20]	; (80045d0 <RCC_AHB2PeriphResetCmd+0x38>)
 80045bc:	6951      	ldr	r1, [r2, #20]
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	43d2      	mvns	r2, r2
 80045c2:	400a      	ands	r2, r1
 80045c4:	615a      	str	r2, [r3, #20]
  }
}
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr
 80045d0:	40023800 	.word	0x40023800

080045d4 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	460b      	mov	r3, r1
 80045de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80045e0:	78fb      	ldrb	r3, [r7, #3]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d006      	beq.n	80045f4 <RCC_AHB3PeriphResetCmd+0x20>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 80045e6:	4b09      	ldr	r3, [pc, #36]	; (800460c <RCC_AHB3PeriphResetCmd+0x38>)
 80045e8:	4a08      	ldr	r2, [pc, #32]	; (800460c <RCC_AHB3PeriphResetCmd+0x38>)
 80045ea:	6991      	ldr	r1, [r2, #24]
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	619a      	str	r2, [r3, #24]
 80045f2:	e006      	b.n	8004602 <RCC_AHB3PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 80045f4:	4b05      	ldr	r3, [pc, #20]	; (800460c <RCC_AHB3PeriphResetCmd+0x38>)
 80045f6:	4a05      	ldr	r2, [pc, #20]	; (800460c <RCC_AHB3PeriphResetCmd+0x38>)
 80045f8:	6991      	ldr	r1, [r2, #24]
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	43d2      	mvns	r2, r2
 80045fe:	400a      	ands	r2, r1
 8004600:	619a      	str	r2, [r3, #24]
  }
}
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr
 800460c:	40023800 	.word	0x40023800

08004610 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	460b      	mov	r3, r1
 800461a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800461c:	78fb      	ldrb	r3, [r7, #3]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d006      	beq.n	8004630 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8004622:	4b09      	ldr	r3, [pc, #36]	; (8004648 <RCC_APB1PeriphResetCmd+0x38>)
 8004624:	4a08      	ldr	r2, [pc, #32]	; (8004648 <RCC_APB1PeriphResetCmd+0x38>)
 8004626:	6a11      	ldr	r1, [r2, #32]
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	430a      	orrs	r2, r1
 800462c:	621a      	str	r2, [r3, #32]
 800462e:	e006      	b.n	800463e <RCC_APB1PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8004630:	4b05      	ldr	r3, [pc, #20]	; (8004648 <RCC_APB1PeriphResetCmd+0x38>)
 8004632:	4a05      	ldr	r2, [pc, #20]	; (8004648 <RCC_APB1PeriphResetCmd+0x38>)
 8004634:	6a11      	ldr	r1, [r2, #32]
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	43d2      	mvns	r2, r2
 800463a:	400a      	ands	r2, r1
 800463c:	621a      	str	r2, [r3, #32]
  }
}
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr
 8004648:	40023800 	.word	0x40023800

0800464c <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	460b      	mov	r3, r1
 8004656:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004658:	78fb      	ldrb	r3, [r7, #3]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d006      	beq.n	800466c <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 800465e:	4b09      	ldr	r3, [pc, #36]	; (8004684 <RCC_APB2PeriphResetCmd+0x38>)
 8004660:	4a08      	ldr	r2, [pc, #32]	; (8004684 <RCC_APB2PeriphResetCmd+0x38>)
 8004662:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	430a      	orrs	r2, r1
 8004668:	625a      	str	r2, [r3, #36]	; 0x24
 800466a:	e006      	b.n	800467a <RCC_APB2PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 800466c:	4b05      	ldr	r3, [pc, #20]	; (8004684 <RCC_APB2PeriphResetCmd+0x38>)
 800466e:	4a05      	ldr	r2, [pc, #20]	; (8004684 <RCC_APB2PeriphResetCmd+0x38>)
 8004670:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	43d2      	mvns	r2, r2
 8004676:	400a      	ands	r2, r1
 8004678:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr
 8004684:	40023800 	.word	0x40023800

08004688 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	460b      	mov	r3, r1
 8004692:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004694:	78fb      	ldrb	r3, [r7, #3]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d006      	beq.n	80046a8 <RCC_AHB1PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 800469a:	4b09      	ldr	r3, [pc, #36]	; (80046c0 <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 800469c:	4a08      	ldr	r2, [pc, #32]	; (80046c0 <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 800469e:	6d11      	ldr	r1, [r2, #80]	; 0x50
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	430a      	orrs	r2, r1
 80046a4:	651a      	str	r2, [r3, #80]	; 0x50
 80046a6:	e006      	b.n	80046b6 <RCC_AHB1PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 80046a8:	4b05      	ldr	r3, [pc, #20]	; (80046c0 <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 80046aa:	4a05      	ldr	r2, [pc, #20]	; (80046c0 <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 80046ac:	6d11      	ldr	r1, [r2, #80]	; 0x50
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	43d2      	mvns	r2, r2
 80046b2:	400a      	ands	r2, r1
 80046b4:	651a      	str	r2, [r3, #80]	; 0x50
  }
}
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr
 80046c0:	40023800 	.word	0x40023800

080046c4 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	460b      	mov	r3, r1
 80046ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80046d0:	78fb      	ldrb	r3, [r7, #3]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d006      	beq.n	80046e4 <RCC_AHB2PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 80046d6:	4b09      	ldr	r3, [pc, #36]	; (80046fc <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 80046d8:	4a08      	ldr	r2, [pc, #32]	; (80046fc <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 80046da:	6d51      	ldr	r1, [r2, #84]	; 0x54
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	430a      	orrs	r2, r1
 80046e0:	655a      	str	r2, [r3, #84]	; 0x54
 80046e2:	e006      	b.n	80046f2 <RCC_AHB2PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 80046e4:	4b05      	ldr	r3, [pc, #20]	; (80046fc <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 80046e6:	4a05      	ldr	r2, [pc, #20]	; (80046fc <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 80046e8:	6d51      	ldr	r1, [r2, #84]	; 0x54
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	43d2      	mvns	r2, r2
 80046ee:	400a      	ands	r2, r1
 80046f0:	655a      	str	r2, [r3, #84]	; 0x54
  }
}
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr
 80046fc:	40023800 	.word	0x40023800

08004700 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	460b      	mov	r3, r1
 800470a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800470c:	78fb      	ldrb	r3, [r7, #3]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d006      	beq.n	8004720 <RCC_AHB3PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8004712:	4b09      	ldr	r3, [pc, #36]	; (8004738 <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 8004714:	4a08      	ldr	r2, [pc, #32]	; (8004738 <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 8004716:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	430a      	orrs	r2, r1
 800471c:	659a      	str	r2, [r3, #88]	; 0x58
 800471e:	e006      	b.n	800472e <RCC_AHB3PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 8004720:	4b05      	ldr	r3, [pc, #20]	; (8004738 <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 8004722:	4a05      	ldr	r2, [pc, #20]	; (8004738 <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 8004724:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	43d2      	mvns	r2, r2
 800472a:	400a      	ands	r2, r1
 800472c:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr
 8004738:	40023800 	.word	0x40023800

0800473c <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	460b      	mov	r3, r1
 8004746:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004748:	78fb      	ldrb	r3, [r7, #3]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d006      	beq.n	800475c <RCC_APB1PeriphClockLPModeCmd+0x20>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 800474e:	4b09      	ldr	r3, [pc, #36]	; (8004774 <RCC_APB1PeriphClockLPModeCmd+0x38>)
 8004750:	4a08      	ldr	r2, [pc, #32]	; (8004774 <RCC_APB1PeriphClockLPModeCmd+0x38>)
 8004752:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	430a      	orrs	r2, r1
 8004758:	661a      	str	r2, [r3, #96]	; 0x60
 800475a:	e006      	b.n	800476a <RCC_APB1PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 800475c:	4b05      	ldr	r3, [pc, #20]	; (8004774 <RCC_APB1PeriphClockLPModeCmd+0x38>)
 800475e:	4a05      	ldr	r2, [pc, #20]	; (8004774 <RCC_APB1PeriphClockLPModeCmd+0x38>)
 8004760:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	43d2      	mvns	r2, r2
 8004766:	400a      	ands	r2, r1
 8004768:	661a      	str	r2, [r3, #96]	; 0x60
  }
}
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr
 8004774:	40023800 	.word	0x40023800

08004778 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	460b      	mov	r3, r1
 8004782:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004784:	78fb      	ldrb	r3, [r7, #3]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d006      	beq.n	8004798 <RCC_APB2PeriphClockLPModeCmd+0x20>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 800478a:	4b09      	ldr	r3, [pc, #36]	; (80047b0 <RCC_APB2PeriphClockLPModeCmd+0x38>)
 800478c:	4a08      	ldr	r2, [pc, #32]	; (80047b0 <RCC_APB2PeriphClockLPModeCmd+0x38>)
 800478e:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	430a      	orrs	r2, r1
 8004794:	665a      	str	r2, [r3, #100]	; 0x64
 8004796:	e006      	b.n	80047a6 <RCC_APB2PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 8004798:	4b05      	ldr	r3, [pc, #20]	; (80047b0 <RCC_APB2PeriphClockLPModeCmd+0x38>)
 800479a:	4a05      	ldr	r2, [pc, #20]	; (80047b0 <RCC_APB2PeriphClockLPModeCmd+0x38>)
 800479c:	6e51      	ldr	r1, [r2, #100]	; 0x64
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	43d2      	mvns	r2, r2
 80047a2:	400a      	ands	r2, r1
 80047a4:	665a      	str	r2, [r3, #100]	; 0x64
  }
}
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr
 80047b0:	40023800 	.word	0x40023800

080047b4 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	4602      	mov	r2, r0
 80047bc:	460b      	mov	r3, r1
 80047be:	71fa      	strb	r2, [r7, #7]
 80047c0:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80047c2:	79bb      	ldrb	r3, [r7, #6]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d008      	beq.n	80047da <RCC_ITConfig+0x26>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 80047c8:	4b0b      	ldr	r3, [pc, #44]	; (80047f8 <RCC_ITConfig+0x44>)
 80047ca:	4a0b      	ldr	r2, [pc, #44]	; (80047f8 <RCC_ITConfig+0x44>)
 80047cc:	7812      	ldrb	r2, [r2, #0]
 80047ce:	b2d1      	uxtb	r1, r2
 80047d0:	79fa      	ldrb	r2, [r7, #7]
 80047d2:	430a      	orrs	r2, r1
 80047d4:	b2d2      	uxtb	r2, r2
 80047d6:	701a      	strb	r2, [r3, #0]
 80047d8:	e009      	b.n	80047ee <RCC_ITConfig+0x3a>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 80047da:	4b07      	ldr	r3, [pc, #28]	; (80047f8 <RCC_ITConfig+0x44>)
 80047dc:	4a06      	ldr	r2, [pc, #24]	; (80047f8 <RCC_ITConfig+0x44>)
 80047de:	7812      	ldrb	r2, [r2, #0]
 80047e0:	b2d1      	uxtb	r1, r2
 80047e2:	79fa      	ldrb	r2, [r7, #7]
 80047e4:	43d2      	mvns	r2, r2
 80047e6:	b2d2      	uxtb	r2, r2
 80047e8:	400a      	ands	r2, r1
 80047ea:	b2d2      	uxtb	r2, r2
 80047ec:	701a      	strb	r2, [r3, #0]
  }
}
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr
 80047f8:	4002380d 	.word	0x4002380d

080047fc <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b087      	sub	sp, #28
 8004800:	af00      	add	r7, sp, #0
 8004802:	4603      	mov	r3, r0
 8004804:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8004806:	2300      	movs	r3, #0
 8004808:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 800480a:	2300      	movs	r3, #0
 800480c:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 800480e:	2300      	movs	r3, #0
 8004810:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8004812:	79fb      	ldrb	r3, [r7, #7]
 8004814:	095b      	lsrs	r3, r3, #5
 8004816:	b2db      	uxtb	r3, r3
 8004818:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d103      	bne.n	8004828 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8004820:	4b12      	ldr	r3, [pc, #72]	; (800486c <RCC_GetFlagStatus+0x70>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	617b      	str	r3, [r7, #20]
 8004826:	e009      	b.n	800483c <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2b02      	cmp	r3, #2
 800482c:	d103      	bne.n	8004836 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 800482e:	4b0f      	ldr	r3, [pc, #60]	; (800486c <RCC_GetFlagStatus+0x70>)
 8004830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004832:	617b      	str	r3, [r7, #20]
 8004834:	e002      	b.n	800483c <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8004836:	4b0d      	ldr	r3, [pc, #52]	; (800486c <RCC_GetFlagStatus+0x70>)
 8004838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800483a:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 800483c:	79fb      	ldrb	r3, [r7, #7]
 800483e:	f003 031f 	and.w	r3, r3, #31
 8004842:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	fa22 f303 	lsr.w	r3, r2, r3
 800484c:	f003 0301 	and.w	r3, r3, #1
 8004850:	2b00      	cmp	r3, #0
 8004852:	d002      	beq.n	800485a <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 8004854:	2301      	movs	r3, #1
 8004856:	74fb      	strb	r3, [r7, #19]
 8004858:	e001      	b.n	800485e <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 800485a:	2300      	movs	r3, #0
 800485c:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 800485e:	7cfb      	ldrb	r3, [r7, #19]
}
 8004860:	4618      	mov	r0, r3
 8004862:	371c      	adds	r7, #28
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr
 800486c:	40023800 	.word	0x40023800

08004870 <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
 8004870:	b480      	push	{r7}
 8004872:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8004874:	4b04      	ldr	r3, [pc, #16]	; (8004888 <RCC_ClearFlag+0x18>)
 8004876:	4a04      	ldr	r2, [pc, #16]	; (8004888 <RCC_ClearFlag+0x18>)
 8004878:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800487a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800487e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr
 8004888:	40023800 	.word	0x40023800

0800488c <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt             
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	4603      	mov	r3, r0
 8004894:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 8004896:	2300      	movs	r3, #0
 8004898:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 800489a:	4b09      	ldr	r3, [pc, #36]	; (80048c0 <RCC_GetITStatus+0x34>)
 800489c:	68da      	ldr	r2, [r3, #12]
 800489e:	79fb      	ldrb	r3, [r7, #7]
 80048a0:	4013      	ands	r3, r2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d002      	beq.n	80048ac <RCC_GetITStatus+0x20>
  {
    bitstatus = SET;
 80048a6:	2301      	movs	r3, #1
 80048a8:	73fb      	strb	r3, [r7, #15]
 80048aa:	e001      	b.n	80048b0 <RCC_GetITStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 80048ac:	2300      	movs	r3, #0
 80048ae:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 80048b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3714      	adds	r7, #20
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	40023800 	.word	0x40023800

080048c4 <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	4603      	mov	r3, r0
 80048cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 80048ce:	4b04      	ldr	r3, [pc, #16]	; (80048e0 <RCC_ClearITPendingBit+0x1c>)
 80048d0:	79fa      	ldrb	r2, [r7, #7]
 80048d2:	701a      	strb	r2, [r3, #0]
}
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	4002380e 	.word	0x4002380e

080048e4 <GPIO_DeInit>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for 
  *                STM32F40xx/41xx and STM32F427x/437x devices. 
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	4b3c      	ldr	r3, [pc, #240]	; (80049e0 <GPIO_DeInit+0xfc>)
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d108      	bne.n	8004906 <GPIO_DeInit+0x22>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80048f4:	2001      	movs	r0, #1
 80048f6:	2101      	movs	r1, #1
 80048f8:	f7ff fe30 	bl	800455c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 80048fc:	2001      	movs	r0, #1
 80048fe:	2100      	movs	r1, #0
 8004900:	f7ff fe2c 	bl	800455c <RCC_AHB1PeriphResetCmd>
 8004904:	e068      	b.n	80049d8 <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOB)
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	4b36      	ldr	r3, [pc, #216]	; (80049e4 <GPIO_DeInit+0x100>)
 800490a:	429a      	cmp	r2, r3
 800490c:	d108      	bne.n	8004920 <GPIO_DeInit+0x3c>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800490e:	2002      	movs	r0, #2
 8004910:	2101      	movs	r1, #1
 8004912:	f7ff fe23 	bl	800455c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 8004916:	2002      	movs	r0, #2
 8004918:	2100      	movs	r1, #0
 800491a:	f7ff fe1f 	bl	800455c <RCC_AHB1PeriphResetCmd>
 800491e:	e05b      	b.n	80049d8 <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOC)
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	4b31      	ldr	r3, [pc, #196]	; (80049e8 <GPIO_DeInit+0x104>)
 8004924:	429a      	cmp	r2, r3
 8004926:	d108      	bne.n	800493a <GPIO_DeInit+0x56>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8004928:	2004      	movs	r0, #4
 800492a:	2101      	movs	r1, #1
 800492c:	f7ff fe16 	bl	800455c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 8004930:	2004      	movs	r0, #4
 8004932:	2100      	movs	r1, #0
 8004934:	f7ff fe12 	bl	800455c <RCC_AHB1PeriphResetCmd>
 8004938:	e04e      	b.n	80049d8 <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOD)
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	4b2b      	ldr	r3, [pc, #172]	; (80049ec <GPIO_DeInit+0x108>)
 800493e:	429a      	cmp	r2, r3
 8004940:	d108      	bne.n	8004954 <GPIO_DeInit+0x70>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8004942:	2008      	movs	r0, #8
 8004944:	2101      	movs	r1, #1
 8004946:	f7ff fe09 	bl	800455c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 800494a:	2008      	movs	r0, #8
 800494c:	2100      	movs	r1, #0
 800494e:	f7ff fe05 	bl	800455c <RCC_AHB1PeriphResetCmd>
 8004952:	e041      	b.n	80049d8 <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOE)
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	4b26      	ldr	r3, [pc, #152]	; (80049f0 <GPIO_DeInit+0x10c>)
 8004958:	429a      	cmp	r2, r3
 800495a:	d108      	bne.n	800496e <GPIO_DeInit+0x8a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 800495c:	2010      	movs	r0, #16
 800495e:	2101      	movs	r1, #1
 8004960:	f7ff fdfc 	bl	800455c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 8004964:	2010      	movs	r0, #16
 8004966:	2100      	movs	r1, #0
 8004968:	f7ff fdf8 	bl	800455c <RCC_AHB1PeriphResetCmd>
 800496c:	e034      	b.n	80049d8 <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOF)
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	4b20      	ldr	r3, [pc, #128]	; (80049f4 <GPIO_DeInit+0x110>)
 8004972:	429a      	cmp	r2, r3
 8004974:	d108      	bne.n	8004988 <GPIO_DeInit+0xa4>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8004976:	2020      	movs	r0, #32
 8004978:	2101      	movs	r1, #1
 800497a:	f7ff fdef 	bl	800455c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 800497e:	2020      	movs	r0, #32
 8004980:	2100      	movs	r1, #0
 8004982:	f7ff fdeb 	bl	800455c <RCC_AHB1PeriphResetCmd>
 8004986:	e027      	b.n	80049d8 <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOG)
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	4b1b      	ldr	r3, [pc, #108]	; (80049f8 <GPIO_DeInit+0x114>)
 800498c:	429a      	cmp	r2, r3
 800498e:	d108      	bne.n	80049a2 <GPIO_DeInit+0xbe>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8004990:	2040      	movs	r0, #64	; 0x40
 8004992:	2101      	movs	r1, #1
 8004994:	f7ff fde2 	bl	800455c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8004998:	2040      	movs	r0, #64	; 0x40
 800499a:	2100      	movs	r1, #0
 800499c:	f7ff fdde 	bl	800455c <RCC_AHB1PeriphResetCmd>
 80049a0:	e01a      	b.n	80049d8 <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOH)
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	4b15      	ldr	r3, [pc, #84]	; (80049fc <GPIO_DeInit+0x118>)
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d108      	bne.n	80049bc <GPIO_DeInit+0xd8>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 80049aa:	2080      	movs	r0, #128	; 0x80
 80049ac:	2101      	movs	r1, #1
 80049ae:	f7ff fdd5 	bl	800455c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 80049b2:	2080      	movs	r0, #128	; 0x80
 80049b4:	2100      	movs	r1, #0
 80049b6:	f7ff fdd1 	bl	800455c <RCC_AHB1PeriphResetCmd>
 80049ba:	e00d      	b.n	80049d8 <GPIO_DeInit+0xf4>
  }
  else
  {
    if (GPIOx == GPIOI)
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	4b10      	ldr	r3, [pc, #64]	; (8004a00 <GPIO_DeInit+0x11c>)
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d109      	bne.n	80049d8 <GPIO_DeInit+0xf4>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 80049c4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80049c8:	2101      	movs	r1, #1
 80049ca:	f7ff fdc7 	bl	800455c <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 80049ce:	f44f 7080 	mov.w	r0, #256	; 0x100
 80049d2:	2100      	movs	r1, #0
 80049d4:	f7ff fdc2 	bl	800455c <RCC_AHB1PeriphResetCmd>
    }
  }
}
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	40020000 	.word	0x40020000
 80049e4:	40020400 	.word	0x40020400
 80049e8:	40020800 	.word	0x40020800
 80049ec:	40020c00 	.word	0x40020c00
 80049f0:	40021000 	.word	0x40021000
 80049f4:	40021400 	.word	0x40021400
 80049f8:	40021800 	.word	0x40021800
 80049fc:	40021c00 	.word	0x40021c00
 8004a00:	40022000 	.word	0x40022000

08004a04 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b087      	sub	sp, #28
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	617b      	str	r3, [r7, #20]
 8004a12:	2300      	movs	r3, #0
 8004a14:	613b      	str	r3, [r7, #16]
 8004a16:	2300      	movs	r3, #0
 8004a18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	617b      	str	r3, [r7, #20]
 8004a1e:	e076      	b.n	8004b0e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	2201      	movs	r2, #1
 8004a24:	fa02 f303 	lsl.w	r3, r2, r3
 8004a28:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	4013      	ands	r3, r2
 8004a32:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d165      	bne.n	8004b08 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	005b      	lsls	r3, r3, #1
 8004a44:	2103      	movs	r1, #3
 8004a46:	fa01 f303 	lsl.w	r3, r1, r3
 8004a4a:	43db      	mvns	r3, r3
 8004a4c:	401a      	ands	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	791b      	ldrb	r3, [r3, #4]
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	005b      	lsls	r3, r3, #1
 8004a60:	fa01 f303 	lsl.w	r3, r1, r3
 8004a64:	431a      	orrs	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	791b      	ldrb	r3, [r3, #4]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d003      	beq.n	8004a7a <GPIO_Init+0x76>
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	791b      	ldrb	r3, [r3, #4]
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d12e      	bne.n	8004ad8 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	689a      	ldr	r2, [r3, #8]
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	005b      	lsls	r3, r3, #1
 8004a82:	2103      	movs	r1, #3
 8004a84:	fa01 f303 	lsl.w	r3, r1, r3
 8004a88:	43db      	mvns	r3, r3
 8004a8a:	401a      	ands	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689a      	ldr	r2, [r3, #8]
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	795b      	ldrb	r3, [r3, #5]
 8004a98:	4619      	mov	r1, r3
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	005b      	lsls	r3, r3, #1
 8004a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685a      	ldr	r2, [r3, #4]
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	2101      	movs	r1, #1
 8004ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ab6:	43db      	mvns	r3, r3
 8004ab8:	401a      	ands	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	799b      	ldrb	r3, [r3, #6]
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	431a      	orrs	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	68da      	ldr	r2, [r3, #12]
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	2103      	movs	r1, #3
 8004ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae8:	43db      	mvns	r3, r3
 8004aea:	401a      	ands	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68da      	ldr	r2, [r3, #12]
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	79db      	ldrb	r3, [r3, #7]
 8004af8:	4619      	mov	r1, r3
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	005b      	lsls	r3, r3, #1
 8004afe:	fa01 f303 	lsl.w	r3, r1, r3
 8004b02:	431a      	orrs	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	617b      	str	r3, [r7, #20]
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	2b0f      	cmp	r3, #15
 8004b12:	d985      	bls.n	8004a20 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8004b14:	371c      	adds	r7, #28
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop

08004b20 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b2e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	71da      	strb	r2, [r3, #7]
}
 8004b48:	370c      	adds	r7, #12
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop

08004b54 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0x00010000;
 8004b60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004b64:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8004b66:	887a      	ldrh	r2, [r7, #2]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8004b74:	887a      	ldrh	r2, [r7, #2]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	69db      	ldr	r3, [r3, #28]
 8004b84:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	69db      	ldr	r3, [r3, #28]
 8004b8a:	60fb      	str	r3, [r7, #12]
}
 8004b8c:	3714      	adds	r7, #20
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop

08004b98 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	691a      	ldr	r2, [r3, #16]
 8004bac:	887b      	ldrh	r3, [r7, #2]
 8004bae:	4013      	ands	r3, r2
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d002      	beq.n	8004bba <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	73fb      	strb	r3, [r7, #15]
 8004bb8:	e001      	b.n	8004bbe <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3714      	adds	r7, #20
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <GPIO_ReadInputData>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for 
  *                STM32F40xx/41xx and STM32F427x/437x devices. 
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	b29b      	uxth	r3, r3
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop

08004be8 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	695a      	ldr	r2, [r3, #20]
 8004bfc:	887b      	ldrh	r3, [r7, #2]
 8004bfe:	4013      	ands	r3, r2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d002      	beq.n	8004c0a <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8004c04:	2301      	movs	r3, #1
 8004c06:	73fb      	strb	r3, [r7, #15]
 8004c08:	e001      	b.n	8004c0e <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3714      	adds	r7, #20
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <GPIO_ReadOutputData>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for 
  *                STM32F40xx/41xx and STM32F427x/437x devices.  
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	b29b      	uxth	r3, r3
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop

08004c38 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	460b      	mov	r3, r1
 8004c42:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	887a      	ldrh	r2, [r7, #2]
 8004c48:	831a      	strh	r2, [r3, #24]
}
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	887a      	ldrh	r2, [r7, #2]
 8004c64:	835a      	strh	r2, [r3, #26]
}
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	4613      	mov	r3, r2
 8004c7a:	460a      	mov	r2, r1
 8004c7c:	807a      	strh	r2, [r7, #2]
 8004c7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8004c80:	787b      	ldrb	r3, [r7, #1]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d003      	beq.n	8004c8e <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	887a      	ldrh	r2, [r7, #2]
 8004c8a:	831a      	strh	r2, [r3, #24]
 8004c8c:	e002      	b.n	8004c94 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	887a      	ldrh	r2, [r7, #2]
 8004c92:	835a      	strh	r2, [r3, #26]
  }
}
 8004c94:	370c      	adds	r7, #12
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop

08004ca0 <GPIO_Write>:
  *                STM32F40xx/41xx and STM32F427x/437x devices.  
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	460b      	mov	r3, r1
 8004caa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 8004cac:	887a      	ldrh	r2, [r7, #2]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	615a      	str	r2, [r3, #20]
}
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <GPIO_ToggleBits>:
  *                STM32F40xx/41xx and STM32F427x/437x devices.  
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	695a      	ldr	r2, [r3, #20]
 8004ccc:	887b      	ldrh	r3, [r7, #2]
 8004cce:	405a      	eors	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	615a      	str	r2, [r3, #20]
}
 8004cd4:	370c      	adds	r7, #12
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop

08004ce0 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b085      	sub	sp, #20
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	4613      	mov	r3, r2
 8004cea:	460a      	mov	r2, r1
 8004cec:	807a      	strh	r2, [r7, #2]
 8004cee:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8004cf8:	787a      	ldrb	r2, [r7, #1]
 8004cfa:	887b      	ldrh	r3, [r7, #2]
 8004cfc:	f003 0307 	and.w	r3, r3, #7
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	fa02 f303 	lsl.w	r3, r2, r3
 8004d06:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8004d08:	887b      	ldrh	r3, [r7, #2]
 8004d0a:	08db      	lsrs	r3, r3, #3
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	461a      	mov	r2, r3
 8004d10:	887b      	ldrh	r3, [r7, #2]
 8004d12:	08db      	lsrs	r3, r3, #3
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	4619      	mov	r1, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	3108      	adds	r1, #8
 8004d1c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8004d20:	887b      	ldrh	r3, [r7, #2]
 8004d22:	f003 0307 	and.w	r3, r3, #7
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	200f      	movs	r0, #15
 8004d2a:	fa00 f303 	lsl.w	r3, r0, r3
 8004d2e:	43db      	mvns	r3, r3
 8004d30:	4019      	ands	r1, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	3208      	adds	r2, #8
 8004d36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8004d3a:	887b      	ldrh	r3, [r7, #2]
 8004d3c:	08db      	lsrs	r3, r3, #3
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	461a      	mov	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	3208      	adds	r2, #8
 8004d46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8004d50:	887b      	ldrh	r3, [r7, #2]
 8004d52:	08db      	lsrs	r3, r3, #3
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	461a      	mov	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	3208      	adds	r2, #8
 8004d5c:	68b9      	ldr	r1, [r7, #8]
 8004d5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8004d62:	3714      	adds	r7, #20
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
 8004d70:	4b09      	ldr	r3, [pc, #36]	; (8004d98 <EXTI_DeInit+0x2c>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
 8004d76:	4b08      	ldr	r3, [pc, #32]	; (8004d98 <EXTI_DeInit+0x2c>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
 8004d7c:	4b06      	ldr	r3, [pc, #24]	; (8004d98 <EXTI_DeInit+0x2c>)
 8004d7e:	2200      	movs	r2, #0
 8004d80:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
 8004d82:	4b05      	ldr	r3, [pc, #20]	; (8004d98 <EXTI_DeInit+0x2c>)
 8004d84:	2200      	movs	r2, #0
 8004d86:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x007FFFFF;
 8004d88:	4b03      	ldr	r3, [pc, #12]	; (8004d98 <EXTI_DeInit+0x2c>)
 8004d8a:	4a04      	ldr	r2, [pc, #16]	; (8004d9c <EXTI_DeInit+0x30>)
 8004d8c:	615a      	str	r2, [r3, #20]
}
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	40013c00 	.word	0x40013c00
 8004d9c:	007fffff 	.word	0x007fffff

08004da0 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8004da8:	2300      	movs	r3, #0
 8004daa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8004dac:	4b32      	ldr	r3, [pc, #200]	; (8004e78 <EXTI_Init+0xd8>)
 8004dae:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	799b      	ldrb	r3, [r3, #6]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d04d      	beq.n	8004e54 <EXTI_Init+0xb4>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8004db8:	4b2f      	ldr	r3, [pc, #188]	; (8004e78 <EXTI_Init+0xd8>)
 8004dba:	4a2f      	ldr	r2, [pc, #188]	; (8004e78 <EXTI_Init+0xd8>)
 8004dbc:	6811      	ldr	r1, [r2, #0]
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	6812      	ldr	r2, [r2, #0]
 8004dc2:	43d2      	mvns	r2, r2
 8004dc4:	400a      	ands	r2, r1
 8004dc6:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8004dc8:	4b2b      	ldr	r3, [pc, #172]	; (8004e78 <EXTI_Init+0xd8>)
 8004dca:	4a2b      	ldr	r2, [pc, #172]	; (8004e78 <EXTI_Init+0xd8>)
 8004dcc:	6851      	ldr	r1, [r2, #4]
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	6812      	ldr	r2, [r2, #0]
 8004dd2:	43d2      	mvns	r2, r2
 8004dd4:	400a      	ands	r2, r1
 8004dd6:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	791b      	ldrb	r3, [r3, #4]
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	4413      	add	r3, r2
 8004de0:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	6811      	ldr	r1, [r2, #0]
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	6812      	ldr	r2, [r2, #0]
 8004dec:	430a      	orrs	r2, r1
 8004dee:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8004df0:	4b21      	ldr	r3, [pc, #132]	; (8004e78 <EXTI_Init+0xd8>)
 8004df2:	4a21      	ldr	r2, [pc, #132]	; (8004e78 <EXTI_Init+0xd8>)
 8004df4:	6891      	ldr	r1, [r2, #8]
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	6812      	ldr	r2, [r2, #0]
 8004dfa:	43d2      	mvns	r2, r2
 8004dfc:	400a      	ands	r2, r1
 8004dfe:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8004e00:	4b1d      	ldr	r3, [pc, #116]	; (8004e78 <EXTI_Init+0xd8>)
 8004e02:	4a1d      	ldr	r2, [pc, #116]	; (8004e78 <EXTI_Init+0xd8>)
 8004e04:	68d1      	ldr	r1, [r2, #12]
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	6812      	ldr	r2, [r2, #0]
 8004e0a:	43d2      	mvns	r2, r2
 8004e0c:	400a      	ands	r2, r1
 8004e0e:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	795b      	ldrb	r3, [r3, #5]
 8004e14:	2b10      	cmp	r3, #16
 8004e16:	d10e      	bne.n	8004e36 <EXTI_Init+0x96>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8004e18:	4b17      	ldr	r3, [pc, #92]	; (8004e78 <EXTI_Init+0xd8>)
 8004e1a:	4a17      	ldr	r2, [pc, #92]	; (8004e78 <EXTI_Init+0xd8>)
 8004e1c:	6891      	ldr	r1, [r2, #8]
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	6812      	ldr	r2, [r2, #0]
 8004e22:	430a      	orrs	r2, r1
 8004e24:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8004e26:	4b14      	ldr	r3, [pc, #80]	; (8004e78 <EXTI_Init+0xd8>)
 8004e28:	4a13      	ldr	r2, [pc, #76]	; (8004e78 <EXTI_Init+0xd8>)
 8004e2a:	68d1      	ldr	r1, [r2, #12]
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	6812      	ldr	r2, [r2, #0]
 8004e30:	430a      	orrs	r2, r1
 8004e32:	60da      	str	r2, [r3, #12]
 8004e34:	e01b      	b.n	8004e6e <EXTI_Init+0xce>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 8004e36:	4b10      	ldr	r3, [pc, #64]	; (8004e78 <EXTI_Init+0xd8>)
 8004e38:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	795b      	ldrb	r3, [r3, #5]
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	4413      	add	r3, r2
 8004e42:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	6811      	ldr	r1, [r2, #0]
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	6812      	ldr	r2, [r2, #0]
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	601a      	str	r2, [r3, #0]
 8004e52:	e00c      	b.n	8004e6e <EXTI_Init+0xce>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	791b      	ldrb	r3, [r3, #4]
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	6811      	ldr	r1, [r2, #0]
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	6812      	ldr	r2, [r2, #0]
 8004e68:	43d2      	mvns	r2, r2
 8004e6a:	400a      	ands	r2, r1
 8004e6c:	601a      	str	r2, [r3, #0]
  }
}
 8004e6e:	3714      	adds	r7, #20
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr
 8004e78:	40013c00 	.word	0x40013c00

08004e7c <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	220c      	movs	r2, #12
 8004e94:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	719a      	strb	r2, [r3, #6]
}
 8004e9c:	370c      	adds	r7, #12
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop

08004ea8 <EXTI_GenerateSWInterrupt>:
  *         will be generated.
  *         This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
 8004eb0:	4b05      	ldr	r3, [pc, #20]	; (8004ec8 <EXTI_GenerateSWInterrupt+0x20>)
 8004eb2:	4a05      	ldr	r2, [pc, #20]	; (8004ec8 <EXTI_GenerateSWInterrupt+0x20>)
 8004eb4:	6911      	ldr	r1, [r2, #16]
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	611a      	str	r2, [r3, #16]
}
 8004ebc:	370c      	adds	r7, #12
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	40013c00 	.word	0x40013c00

08004ecc <EXTI_GetFlagStatus>:
  * @param  EXTI_Line: specifies the EXTI line flag to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b085      	sub	sp, #20
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8004ed8:	4b08      	ldr	r3, [pc, #32]	; (8004efc <EXTI_GetFlagStatus+0x30>)
 8004eda:	695a      	ldr	r2, [r3, #20]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4013      	ands	r3, r2
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d002      	beq.n	8004eea <EXTI_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	73fb      	strb	r3, [r7, #15]
 8004ee8:	e001      	b.n	8004eee <EXTI_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 8004eea:	2300      	movs	r3, #0
 8004eec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3714      	adds	r7, #20
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr
 8004efc:	40013c00 	.word	0x40013c00

08004f00 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8004f08:	4b03      	ldr	r3, [pc, #12]	; (8004f18 <EXTI_ClearFlag+0x18>)
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	615a      	str	r2, [r3, #20]
}
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr
 8004f18:	40013c00 	.word	0x40013c00

08004f1c <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8004f24:	2300      	movs	r3, #0
 8004f26:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8004f2c:	4b0c      	ldr	r3, [pc, #48]	; (8004f60 <EXTI_GetITStatus+0x44>)
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4013      	ands	r3, r2
 8004f34:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8004f36:	4b0a      	ldr	r3, [pc, #40]	; (8004f60 <EXTI_GetITStatus+0x44>)
 8004f38:	695a      	ldr	r2, [r3, #20]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d005      	beq.n	8004f4e <EXTI_GetITStatus+0x32>
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d002      	beq.n	8004f4e <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	73fb      	strb	r3, [r7, #15]
 8004f4c:	e001      	b.n	8004f52 <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3714      	adds	r7, #20
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr
 8004f60:	40013c00 	.word	0x40013c00

08004f64 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8004f6c:	4b03      	ldr	r3, [pc, #12]	; (8004f7c <EXTI_ClearITPendingBit+0x18>)
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	615a      	str	r2, [r3, #20]
}
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr
 8004f7c:	40013c00 	.word	0x40013c00

08004f80 <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	af00      	add	r7, sp, #0
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 8004f84:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004f88:	2101      	movs	r1, #1
 8004f8a:	f7ff fb5f 	bl	800464c <RCC_APB2PeriphResetCmd>
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 8004f8e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004f92:	2100      	movs	r1, #0
 8004f94:	f7ff fb5a 	bl	800464c <RCC_APB2PeriphResetCmd>
}
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop

08004f9c <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8004faa:	2300      	movs	r3, #0
 8004fac:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8004fba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fbe:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	791b      	ldrb	r3, [r3, #4]
 8004fc4:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	681b      	ldr	r3, [r3, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	60fb      	str	r3, [r7, #12]
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	4b17      	ldr	r3, [pc, #92]	; (8005040 <ADC_Init+0xa4>)
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	68db      	ldr	r3, [r3, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8004fee:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	689b      	ldr	r3, [r3, #8]
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8004ff4:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	795b      	ldrb	r3, [r3, #5]
 8004ffa:	005b      	lsls	r3, r3, #1
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	4313      	orrs	r3, r2
 8005002:	60fb      	str	r3, [r7, #12]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500e:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005016:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	7d1b      	ldrb	r3, [r3, #20]
 800501c:	3b01      	subs	r3, #1
 800501e:	b2da      	uxtb	r2, r3
 8005020:	7afb      	ldrb	r3, [r7, #11]
 8005022:	4313      	orrs	r3, r2
 8005024:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8005026:	7afb      	ldrb	r3, [r7, #11]
 8005028:	051b      	lsls	r3, r3, #20
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	4313      	orrs	r3, r2
 800502e:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005036:	3714      	adds	r7, #20
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr
 8005040:	c0fff7fd 	.word	0xc0fff7fd

08005044 <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	751a      	strb	r2, [r3, #20]
}
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 8005088:	2300      	movs	r3, #0
 800508a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 800508c:	4b0e      	ldr	r3, [pc, #56]	; (80050c8 <ADC_CommonInit+0x48>)
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	4b0d      	ldr	r3, [pc, #52]	; (80050cc <ADC_CommonInit+0x4c>)
 8005096:	4013      	ands	r3, r2
 8005098:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 80050a2:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	689b      	ldr	r3, [r3, #8]
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
 80050a8:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	68db      	ldr	r3, [r3, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 80050ae:	4313      	orrs	r3, r2
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	60fb      	str	r3, [r7, #12]
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 80050b6:	4b04      	ldr	r3, [pc, #16]	; (80050c8 <ADC_CommonInit+0x48>)
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	605a      	str	r2, [r3, #4]
}
 80050bc:	3714      	adds	r7, #20
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	40012300 	.word	0x40012300
 80050cc:	fffc30e0 	.word	0xfffc30e0

080050d0 <ADC_CommonStructInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_Prescaler member */
  ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	605a      	str	r2, [r3, #4]

  /* Initialize the ADC_DMAAccessMode member */
  ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_TwoSamplingDelay member */
  ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	60da      	str	r2, [r3, #12]
}
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop

080050fc <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	460b      	mov	r3, r1
 8005106:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005108:	78fb      	ldrb	r3, [r7, #3]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d006      	beq.n	800511c <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f043 0201 	orr.w	r2, r3, #1
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	609a      	str	r2, [r3, #8]
 800511a:	e005      	b.n	8005128 <ADC_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f023 0201 	bic.w	r2, r3, #1
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	609a      	str	r2, [r3, #8]
  }
}
 8005128:	370c      	adds	r7, #12
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop

08005134 <ADC_AnalogWatchdogCmd>:
  *            @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and injected channels
  *            @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
  * @retval None	  
  */
void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
{
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800513e:	2300      	movs	r3, #0
 8005140:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
  
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	60fb      	str	r3, [r7, #12]
  
  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  tmpreg &= CR1_AWDMode_RESET;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800514e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005152:	60fb      	str	r3, [r7, #12]
  
  /* Set the analog watchdog enable mode */
  tmpreg |= ADC_AnalogWatchdog;
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	4313      	orrs	r3, r2
 800515a:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	605a      	str	r2, [r3, #4]
}
 8005162:	3714      	adds	r7, #20
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <ADC_AnalogWatchdogThresholdsConfig>:
  *          This parameter must be a 12-bit value.
  * @retval None
  */
void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
                                        uint16_t LowThreshold)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	4613      	mov	r3, r2
 8005176:	460a      	mov	r2, r1
 8005178:	807a      	strh	r2, [r7, #2]
 800517a:	803b      	strh	r3, [r7, #0]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));
  
  /* Set the ADCx high threshold */
  ADCx->HTR = HighThreshold;
 800517c:	887a      	ldrh	r2, [r7, #2]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the ADCx low threshold */
  ADCx->LTR = LowThreshold;
 8005182:	883a      	ldrh	r2, [r7, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop

08005194 <ADC_AnalogWatchdogSingleChannelConfig>:
  *            @arg ADC_Channel_17: ADC Channel17 selected
  *            @arg ADC_Channel_18: ADC Channel18 selected
  * @retval None
  */
void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	460b      	mov	r3, r1
 800519e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 80051a0:	2300      	movs	r3, #0
 80051a2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	60fb      	str	r3, [r7, #12]
  
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= CR1_AWDCH_RESET;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f023 031f 	bic.w	r3, r3, #31
 80051b0:	60fb      	str	r3, [r7, #12]
  
  /* Set the Analog watchdog channel */
  tmpreg |= ADC_Channel;
 80051b2:	78fb      	ldrb	r3, [r7, #3]
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	605a      	str	r2, [r3, #4]
}
 80051c0:	3714      	adds	r7, #20
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop

080051cc <ADC_TempSensorVrefintCmd>:
  * @param  NewState: new state of the temperature sensor and Vrefint channels.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	4603      	mov	r3, r0
 80051d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80051d6:	79fb      	ldrb	r3, [r7, #7]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d006      	beq.n	80051ea <ADC_TempSensorVrefintCmd+0x1e>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 80051dc:	4b08      	ldr	r3, [pc, #32]	; (8005200 <ADC_TempSensorVrefintCmd+0x34>)
 80051de:	4a08      	ldr	r2, [pc, #32]	; (8005200 <ADC_TempSensorVrefintCmd+0x34>)
 80051e0:	6852      	ldr	r2, [r2, #4]
 80051e2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80051e6:	605a      	str	r2, [r3, #4]
 80051e8:	e005      	b.n	80051f6 <ADC_TempSensorVrefintCmd+0x2a>
  }
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 80051ea:	4b05      	ldr	r3, [pc, #20]	; (8005200 <ADC_TempSensorVrefintCmd+0x34>)
 80051ec:	4a04      	ldr	r2, [pc, #16]	; (8005200 <ADC_TempSensorVrefintCmd+0x34>)
 80051ee:	6852      	ldr	r2, [r2, #4]
 80051f0:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80051f4:	605a      	str	r2, [r3, #4]
  }
}
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr
 8005200:	40012300 	.word	0x40012300

08005204 <ADC_VBATCmd>:
  * @param  NewState: new state of the VBAT channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_VBATCmd(FunctionalState NewState)                             
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	4603      	mov	r3, r0
 800520c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800520e:	79fb      	ldrb	r3, [r7, #7]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d006      	beq.n	8005222 <ADC_VBATCmd+0x1e>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_VBATE;
 8005214:	4b08      	ldr	r3, [pc, #32]	; (8005238 <ADC_VBATCmd+0x34>)
 8005216:	4a08      	ldr	r2, [pc, #32]	; (8005238 <ADC_VBATCmd+0x34>)
 8005218:	6852      	ldr	r2, [r2, #4]
 800521a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800521e:	605a      	str	r2, [r3, #4]
 8005220:	e005      	b.n	800522e <ADC_VBATCmd+0x2a>
  }
  else
  {
    /* Disable the VBAT channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_VBATE);
 8005222:	4b05      	ldr	r3, [pc, #20]	; (8005238 <ADC_VBATCmd+0x34>)
 8005224:	4a04      	ldr	r2, [pc, #16]	; (8005238 <ADC_VBATCmd+0x34>)
 8005226:	6852      	ldr	r2, [r2, #4]
 8005228:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 800522c:	605a      	str	r2, [r3, #4]
  }
}
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr
 8005238:	40012300 	.word	0x40012300

0800523c <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	70f9      	strb	r1, [r7, #3]
 8005246:	70ba      	strb	r2, [r7, #2]
 8005248:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 800524a:	2300      	movs	r3, #0
 800524c:	60fb      	str	r3, [r7, #12]
 800524e:	2300      	movs	r3, #0
 8005250:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8005252:	78fb      	ldrb	r3, [r7, #3]
 8005254:	2b09      	cmp	r3, #9
 8005256:	d923      	bls.n	80052a0 <ADC_RegularChannelConfig+0x64>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 800525e:	78fb      	ldrb	r3, [r7, #3]
 8005260:	f1a3 020a 	sub.w	r2, r3, #10
 8005264:	4613      	mov	r3, r2
 8005266:	005b      	lsls	r3, r3, #1
 8005268:	4413      	add	r3, r2
 800526a:	2207      	movs	r2, #7
 800526c:	fa02 f303 	lsl.w	r3, r2, r3
 8005270:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	43db      	mvns	r3, r3
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	4013      	ands	r3, r2
 800527a:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 800527c:	7879      	ldrb	r1, [r7, #1]
 800527e:	78fb      	ldrb	r3, [r7, #3]
 8005280:	f1a3 020a 	sub.w	r2, r3, #10
 8005284:	4613      	mov	r3, r2
 8005286:	005b      	lsls	r3, r3, #1
 8005288:	4413      	add	r3, r2
 800528a:	fa01 f303 	lsl.w	r3, r1, r3
 800528e:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	4313      	orrs	r3, r2
 8005296:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	60da      	str	r2, [r3, #12]
 800529e:	e01e      	b.n	80052de <ADC_RegularChannelConfig+0xa2>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 80052a6:	78fa      	ldrb	r2, [r7, #3]
 80052a8:	4613      	mov	r3, r2
 80052aa:	005b      	lsls	r3, r3, #1
 80052ac:	4413      	add	r3, r2
 80052ae:	2207      	movs	r2, #7
 80052b0:	fa02 f303 	lsl.w	r3, r2, r3
 80052b4:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	43db      	mvns	r3, r3
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	4013      	ands	r3, r2
 80052be:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 80052c0:	7879      	ldrb	r1, [r7, #1]
 80052c2:	78fa      	ldrb	r2, [r7, #3]
 80052c4:	4613      	mov	r3, r2
 80052c6:	005b      	lsls	r3, r3, #1
 80052c8:	4413      	add	r3, r2
 80052ca:	fa01 f303 	lsl.w	r3, r1, r3
 80052ce:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80052de:	78bb      	ldrb	r3, [r7, #2]
 80052e0:	2b06      	cmp	r3, #6
 80052e2:	d821      	bhi.n	8005328 <ADC_RegularChannelConfig+0xec>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052e8:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 80052ea:	78bb      	ldrb	r3, [r7, #2]
 80052ec:	1e5a      	subs	r2, r3, #1
 80052ee:	4613      	mov	r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	4413      	add	r3, r2
 80052f4:	221f      	movs	r2, #31
 80052f6:	fa02 f303 	lsl.w	r3, r2, r3
 80052fa:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	43db      	mvns	r3, r3
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	4013      	ands	r3, r2
 8005304:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8005306:	78f9      	ldrb	r1, [r7, #3]
 8005308:	78bb      	ldrb	r3, [r7, #2]
 800530a:	1e5a      	subs	r2, r3, #1
 800530c:	4613      	mov	r3, r2
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	4413      	add	r3, r2
 8005312:	fa01 f303 	lsl.w	r3, r1, r3
 8005316:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	4313      	orrs	r3, r2
 800531e:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	635a      	str	r2, [r3, #52]	; 0x34
 8005326:	e047      	b.n	80053b8 <ADC_RegularChannelConfig+0x17c>
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8005328:	78bb      	ldrb	r3, [r7, #2]
 800532a:	2b0c      	cmp	r3, #12
 800532c:	d821      	bhi.n	8005372 <ADC_RegularChannelConfig+0x136>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005332:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8005334:	78bb      	ldrb	r3, [r7, #2]
 8005336:	1fda      	subs	r2, r3, #7
 8005338:	4613      	mov	r3, r2
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	4413      	add	r3, r2
 800533e:	221f      	movs	r2, #31
 8005340:	fa02 f303 	lsl.w	r3, r2, r3
 8005344:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	43db      	mvns	r3, r3
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	4013      	ands	r3, r2
 800534e:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8005350:	78f9      	ldrb	r1, [r7, #3]
 8005352:	78bb      	ldrb	r3, [r7, #2]
 8005354:	1fda      	subs	r2, r3, #7
 8005356:	4613      	mov	r3, r2
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4413      	add	r3, r2
 800535c:	fa01 f303 	lsl.w	r3, r1, r3
 8005360:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	4313      	orrs	r3, r2
 8005368:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	631a      	str	r2, [r3, #48]	; 0x30
 8005370:	e022      	b.n	80053b8 <ADC_RegularChannelConfig+0x17c>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005376:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8005378:	78bb      	ldrb	r3, [r7, #2]
 800537a:	f1a3 020d 	sub.w	r2, r3, #13
 800537e:	4613      	mov	r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	4413      	add	r3, r2
 8005384:	221f      	movs	r2, #31
 8005386:	fa02 f303 	lsl.w	r3, r2, r3
 800538a:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	43db      	mvns	r3, r3
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	4013      	ands	r3, r2
 8005394:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8005396:	78f9      	ldrb	r1, [r7, #3]
 8005398:	78bb      	ldrb	r3, [r7, #2]
 800539a:	f1a3 020d 	sub.w	r2, r3, #13
 800539e:	4613      	mov	r3, r2
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4413      	add	r3, r2
 80053a4:	fa01 f303 	lsl.w	r3, r1, r3
 80053a8:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80053b8:	3714      	adds	r7, #20
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop

080053c4 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	609a      	str	r2, [r3, #8]
}
 80053d8:	370c      	adds	r7, #12
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop

080053e4 <ADC_GetSoftwareStartConvStatus>:
  * @brief  Gets the selected ADC Software start regular conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80053ec:	2300      	movs	r3, #0
 80053ee:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Check the status of SWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d002      	beq.n	8005402 <ADC_GetSoftwareStartConvStatus+0x1e>
  {
    /* SWSTART bit is set */
    bitstatus = SET;
 80053fc:	2301      	movs	r3, #1
 80053fe:	73fb      	strb	r3, [r7, #15]
 8005400:	e001      	b.n	8005406 <ADC_GetSoftwareStartConvStatus+0x22>
  }
  else
  {
    /* SWSTART bit is reset */
    bitstatus = RESET;
 8005402:	2300      	movs	r3, #0
 8005404:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the SWSTART bit status */
  return  bitstatus;
 8005406:	7bfb      	ldrb	r3, [r7, #15]
}
 8005408:	4618      	mov	r0, r3
 800540a:	3714      	adds	r7, #20
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <ADC_EOCOnEachRegularChannelCmd>:
  * @param  NewState: new state of the selected ADC EOC flag rising
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_EOCOnEachRegularChannelCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	460b      	mov	r3, r1
 800541e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005420:	78fb      	ldrb	r3, [r7, #3]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d006      	beq.n	8005434 <ADC_EOCOnEachRegularChannelCmd+0x20>
  {
    /* Enable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	609a      	str	r2, [r3, #8]
 8005432:	e005      	b.n	8005440 <ADC_EOCOnEachRegularChannelCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	609a      	str	r2, [r3, #8]
  }
}
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop

0800544c <ADC_ContinuousModeCmd>:
  * @param  NewState: new state of the selected ADC continuous conversion mode
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ContinuousModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	460b      	mov	r3, r1
 8005456:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005458:	78fb      	ldrb	r3, [r7, #3]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d006      	beq.n	800546c <ADC_ContinuousModeCmd+0x20>
  {
    /* Enable the selected ADC continuous conversion mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f043 0202 	orr.w	r2, r3, #2
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	609a      	str	r2, [r3, #8]
 800546a:	e005      	b.n	8005478 <ADC_ContinuousModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC continuous conversion mode */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f023 0202 	bic.w	r2, r3, #2
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	609a      	str	r2, [r3, #8]
  }
}
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop

08005484 <ADC_DiscModeChannelCountConfig>:
  * @param  Number: specifies the discontinuous mode regular channel count value.
  *          This number must be between 1 and 8.
  * @retval None
  */
void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	460b      	mov	r3, r1
 800548e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 8005490:	2300      	movs	r3, #0
 8005492:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 8005494:	2300      	movs	r3, #0
 8005496:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
  
  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_RESET;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80054a4:	60fb      	str	r3, [r7, #12]
  
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
 80054a6:	78fb      	ldrb	r3, [r7, #3]
 80054a8:	3b01      	subs	r3, #1
 80054aa:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 13;
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	035b      	lsls	r3, r3, #13
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg1;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	605a      	str	r2, [r3, #4]
}
 80054bc:	3714      	adds	r7, #20
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop

080054c8 <ADC_DiscModeCmd>:
  *         regular group channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	460b      	mov	r3, r1
 80054d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80054d4:	78fb      	ldrb	r3, [r7, #3]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d006      	beq.n	80054e8 <ADC_DiscModeCmd+0x20>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	605a      	str	r2, [r3, #4]
 80054e6:	e005      	b.n	80054f4 <ADC_DiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	605a      	str	r2, [r3, #4]
  }
}
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop

08005500 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800550c:	b29b      	uxth	r3, r3
}
 800550e:	4618      	mov	r0, r3
 8005510:	370c      	adds	r7, #12
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop

0800551c <ADC_GetMultiModeConversionValue>:
  * @note   In triple mode, the value returned by this function is as following
  *           Data[15:0] : these bits contain alternatively the regular data of ADC1, ADC3 and ADC2.
  *           Data[31:16]: these bits contain alternatively the regular data of ADC2, ADC1 and ADC3.           
  */
uint32_t ADC_GetMultiModeConversionValue(void)
{
 800551c:	b480      	push	{r7}
 800551e:	af00      	add	r7, sp, #0
  /* Return the multi mode conversion value */
  return (*(__IO uint32_t *) CDR_ADDRESS);
 8005520:	4b03      	ldr	r3, [pc, #12]	; (8005530 <ADC_GetMultiModeConversionValue+0x14>)
 8005522:	681b      	ldr	r3, [r3, #0]
}
 8005524:	4618      	mov	r0, r3
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	40012308 	.word	0x40012308

08005534 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	460b      	mov	r3, r1
 800553e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005540:	78fb      	ldrb	r3, [r7, #3]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d006      	beq.n	8005554 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	609a      	str	r2, [r3, #8]
 8005552:	e005      	b.n	8005560 <ADC_DMACmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	609a      	str	r2, [r3, #8]
  }
}
 8005560:	370c      	adds	r7, #12
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop

0800556c <ADC_DMARequestAfterLastTransferCmd>:
  * @param  NewState: new state of the selected ADC DMA request after last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	460b      	mov	r3, r1
 8005576:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005578:	78fb      	ldrb	r3, [r7, #3]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d006      	beq.n	800558c <ADC_DMARequestAfterLastTransferCmd+0x20>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	609a      	str	r2, [r3, #8]
 800558a:	e005      	b.n	8005598 <ADC_DMARequestAfterLastTransferCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	609a      	str	r2, [r3, #8]
  }
}
 8005598:	370c      	adds	r7, #12
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop

080055a4 <ADC_MultiModeDMARequestAfterLastTransferCmd>:
  *         by ADC_CommonInitStruct.ADC_DMAAccessMode structure member) is 
  *          ADC_DMAAccessMode_1, ADC_DMAAccessMode_2 or ADC_DMAAccessMode_3.     
  * @retval None
  */
void ADC_MultiModeDMARequestAfterLastTransferCmd(FunctionalState NewState)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	4603      	mov	r3, r0
 80055ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80055ae:	79fb      	ldrb	r3, [r7, #7]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d006      	beq.n	80055c2 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x1e>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 80055b4:	4b08      	ldr	r3, [pc, #32]	; (80055d8 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x34>)
 80055b6:	4a08      	ldr	r2, [pc, #32]	; (80055d8 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x34>)
 80055b8:	6852      	ldr	r2, [r2, #4]
 80055ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055be:	605a      	str	r2, [r3, #4]
 80055c0:	e005      	b.n	80055ce <ADC_MultiModeDMARequestAfterLastTransferCmd+0x2a>
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
 80055c2:	4b05      	ldr	r3, [pc, #20]	; (80055d8 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x34>)
 80055c4:	4a04      	ldr	r2, [pc, #16]	; (80055d8 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x34>)
 80055c6:	6852      	ldr	r2, [r2, #4]
 80055c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055cc:	605a      	str	r2, [r3, #4]
  }
}
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr
 80055d8:	40012300 	.word	0x40012300

080055dc <ADC_InjectedChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80055dc:	b480      	push	{r7}
 80055de:	b087      	sub	sp, #28
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	70f9      	strb	r1, [r7, #3]
 80055e6:	70ba      	strb	r2, [r7, #2]
 80055e8:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
 80055ea:	2300      	movs	r3, #0
 80055ec:	617b      	str	r3, [r7, #20]
 80055ee:	2300      	movs	r3, #0
 80055f0:	613b      	str	r3, [r7, #16]
 80055f2:	2300      	movs	r3, #0
 80055f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80055f6:	78fb      	ldrb	r3, [r7, #3]
 80055f8:	2b09      	cmp	r3, #9
 80055fa:	d923      	bls.n	8005644 <ADC_InjectedChannelConfig+0x68>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 8005602:	78fb      	ldrb	r3, [r7, #3]
 8005604:	f1a3 020a 	sub.w	r2, r3, #10
 8005608:	4613      	mov	r3, r2
 800560a:	005b      	lsls	r3, r3, #1
 800560c:	4413      	add	r3, r2
 800560e:	2207      	movs	r2, #7
 8005610:	fa02 f303 	lsl.w	r3, r2, r3
 8005614:	613b      	str	r3, [r7, #16]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	43db      	mvns	r3, r3
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	4013      	ands	r3, r2
 800561e:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 8005620:	7879      	ldrb	r1, [r7, #1]
 8005622:	78fb      	ldrb	r3, [r7, #3]
 8005624:	f1a3 020a 	sub.w	r2, r3, #10
 8005628:	4613      	mov	r3, r2
 800562a:	005b      	lsls	r3, r3, #1
 800562c:	4413      	add	r3, r2
 800562e:	fa01 f303 	lsl.w	r3, r1, r3
 8005632:	613b      	str	r3, [r7, #16]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8005634:	697a      	ldr	r2, [r7, #20]
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	4313      	orrs	r3, r2
 800563a:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	60da      	str	r2, [r3, #12]
 8005642:	e01e      	b.n	8005682 <ADC_InjectedChannelConfig+0xa6>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 800564a:	78fa      	ldrb	r2, [r7, #3]
 800564c:	4613      	mov	r3, r2
 800564e:	005b      	lsls	r3, r3, #1
 8005650:	4413      	add	r3, r2
 8005652:	2207      	movs	r2, #7
 8005654:	fa02 f303 	lsl.w	r3, r2, r3
 8005658:	613b      	str	r3, [r7, #16]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	43db      	mvns	r3, r3
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	4013      	ands	r3, r2
 8005662:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8005664:	7879      	ldrb	r1, [r7, #1]
 8005666:	78fa      	ldrb	r2, [r7, #3]
 8005668:	4613      	mov	r3, r2
 800566a:	005b      	lsls	r3, r3, #1
 800566c:	4413      	add	r3, r2
 800566e:	fa01 f303 	lsl.w	r3, r1, r3
 8005672:	613b      	str	r3, [r7, #16]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8005674:	697a      	ldr	r2, [r7, #20]
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	4313      	orrs	r3, r2
 800567a:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	611a      	str	r2, [r3, #16]
  }
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005686:	617b      	str	r3, [r7, #20]
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800568e:	0d1b      	lsrs	r3, r3, #20
 8005690:	60fb      	str	r3, [r7, #12]
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	b2db      	uxtb	r3, r3
 8005696:	78ba      	ldrb	r2, [r7, #2]
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	b2db      	uxtb	r3, r3
 800569c:	3302      	adds	r3, #2
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	461a      	mov	r2, r3
 80056a2:	4613      	mov	r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	4413      	add	r3, r2
 80056a8:	221f      	movs	r2, #31
 80056aa:	fa02 f303 	lsl.w	r3, r2, r3
 80056ae:	613b      	str	r3, [r7, #16]
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	43db      	mvns	r3, r3
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	4013      	ands	r3, r2
 80056b8:	617b      	str	r3, [r7, #20]
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 80056ba:	78f9      	ldrb	r1, [r7, #3]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	78ba      	ldrb	r2, [r7, #2]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	3302      	adds	r3, #2
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	461a      	mov	r2, r3
 80056cc:	4613      	mov	r3, r2
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	4413      	add	r3, r2
 80056d2:	fa01 f303 	lsl.w	r3, r1, r3
 80056d6:	613b      	str	r3, [r7, #16]
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	4313      	orrs	r3, r2
 80056de:	617b      	str	r3, [r7, #20]
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80056e6:	371c      	adds	r7, #28
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <ADC_InjectedSequencerLengthConfig>:
  * @param  Length: The sequencer length. 
  *          This parameter must be a number between 1 to 4.
  * @retval None
  */
void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	460b      	mov	r3, r1
 80056fa:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 80056fc:	2300      	movs	r3, #0
 80056fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 8005700:	2300      	movs	r3, #0
 8005702:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005708:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old injected sequence length JL bits */
  tmpreg1 &= JSQR_JL_RESET;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005710:	60fb      	str	r3, [r7, #12]
  
  /* Set the injected sequence length JL bits */
  tmpreg2 = Length - 1; 
 8005712:	78fb      	ldrb	r3, [r7, #3]
 8005714:	3b01      	subs	r3, #1
 8005716:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 20;
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	051b      	lsls	r3, r3, #20
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	4313      	orrs	r3, r2
 8005720:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005728:	3714      	adds	r7, #20
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop

08005734 <ADC_SetInjectedOffset>:
  * @param  Offset: the offset value for the selected ADC injected channel
  *          This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	4613      	mov	r3, r2
 800573e:	460a      	mov	r2, r1
 8005740:	70fa      	strb	r2, [r7, #3]
 8005742:	803b      	strh	r3, [r7, #0]
    __IO uint32_t tmp = 0;
 8005744:	2300      	movs	r3, #0
 8005746:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_OFFSET(Offset));
  
  tmp = (uint32_t)ADCx;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel;
 800574c:	78fa      	ldrb	r2, [r7, #3]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	4413      	add	r3, r2
 8005752:	60fb      	str	r3, [r7, #12]
  
  /* Set the selected injected channel data offset */
 *(__IO uint32_t *) tmp = (uint32_t)Offset;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	883a      	ldrh	r2, [r7, #0]
 8005758:	601a      	str	r2, [r3, #0]
}
 800575a:	3714      	adds	r7, #20
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <ADC_ExternalTrigInjectedConvConfig>:
  *            @arg ADC_ExternalTrigInjecConv_T8_CC4: Timer8 capture compare4 selected 
  *            @arg ADC_ExternalTrigInjecConv_Ext_IT15: External interrupt line 15 event selected                          
  * @retval None
  */
void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800576e:	2300      	movs	r3, #0
 8005770:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
  
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old external event selection for injected group */
  tmpreg &= CR2_JEXTSEL_RESET;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800577e:	60fb      	str	r3, [r7, #12]
  
  /* Set the external event selection for injected group */
  tmpreg |= ADC_ExternalTrigInjecConv;
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	4313      	orrs	r3, r2
 8005786:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	609a      	str	r2, [r3, #8]
}
 800578e:	3714      	adds	r7, #20
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <ADC_ExternalTrigInjectedConvEdgeConfig>:
  *            @arg ADC_ExternalTrigInjecConvEdge_RisingFalling: detection on both rising 
  *                                                               and falling edge
  * @retval None
  */
void ADC_ExternalTrigInjectedConvEdgeConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConvEdge)
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80057a2:	2300      	movs	r3, #0
 80057a4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(ADC_ExternalTrigInjecConvEdge));
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	60fb      	str	r3, [r7, #12]
  /* Clear the old external trigger edge for injected group */
  tmpreg &= CR2_JEXTEN_RESET;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80057b2:	60fb      	str	r3, [r7, #12]
  /* Set the new external trigger edge for injected group */
  tmpreg |= ADC_ExternalTrigInjecConvEdge;
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	609a      	str	r2, [r3, #8]
}
 80057c2:	3714      	adds	r7, #20
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <ADC_SoftwareStartInjectedConv>:
  * @brief  Enables the selected ADC software start conversion of the injected channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartInjectedConv(ADC_TypeDef* ADCx)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC conversion for injected group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_JSWSTART;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	609a      	str	r2, [r3, #8]
}
 80057e0:	370c      	adds	r7, #12
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop

080057ec <ADC_GetSoftwareStartInjectedConvCmdStatus>:
  * @brief  Gets the selected ADC Software start injected conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start injected conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80057f4:	2300      	movs	r3, #0
 80057f6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Check the status of JSWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005800:	2b00      	cmp	r3, #0
 8005802:	d002      	beq.n	800580a <ADC_GetSoftwareStartInjectedConvCmdStatus+0x1e>
  {
    /* JSWSTART bit is set */
    bitstatus = SET;
 8005804:	2301      	movs	r3, #1
 8005806:	73fb      	strb	r3, [r7, #15]
 8005808:	e001      	b.n	800580e <ADC_GetSoftwareStartInjectedConvCmdStatus+0x22>
  }
  else
  {
    /* JSWSTART bit is reset */
    bitstatus = RESET;
 800580a:	2300      	movs	r3, #0
 800580c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the JSWSTART bit status */
  return  bitstatus;
 800580e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005810:	4618      	mov	r0, r3
 8005812:	3714      	adds	r7, #20
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <ADC_AutoInjectedConvCmd>:
  * @param  NewState: new state of the selected ADC auto injected conversion
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	460b      	mov	r3, r1
 8005826:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005828:	78fb      	ldrb	r3, [r7, #3]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d006      	beq.n	800583c <ADC_AutoInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	605a      	str	r2, [r3, #4]
 800583a:	e005      	b.n	8005848 <ADC_AutoInjectedConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JAUTO);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	605a      	str	r2, [r3, #4]
  }
}
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop

08005854 <ADC_InjectedDiscModeCmd>:
  *         group channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	460b      	mov	r3, r1
 800585e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005860:	78fb      	ldrb	r3, [r7, #3]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d006      	beq.n	8005874 <ADC_InjectedDiscModeCmd+0x20>
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	605a      	str	r2, [r3, #4]
 8005872:	e005      	b.n	8005880 <ADC_InjectedDiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JDISCEN);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	605a      	str	r2, [r3, #4]
  }
}
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop

0800588c <ADC_GetInjectedConversionValue>:
  *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
  *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
{
 800588c:	b480      	push	{r7}
 800588e:	b085      	sub	sp, #20
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	460b      	mov	r3, r1
 8005896:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
 8005898:	2300      	movs	r3, #0
 800589a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  tmp = (uint32_t)ADCx;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel + JDR_OFFSET;
 80058a0:	78fa      	ldrb	r2, [r7, #3]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	4413      	add	r3, r2
 80058a6:	3328      	adds	r3, #40	; 0x28
 80058a8:	60fb      	str	r3, [r7, #12]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp); 
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	b29b      	uxth	r3, r3
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3714      	adds	r7, #20
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <ADC_ITConfig>:
  * @param  NewState: new state of the specified ADC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)  
{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	4613      	mov	r3, r2
 80058c6:	460a      	mov	r2, r1
 80058c8:	807a      	strh	r2, [r7, #2]
 80058ca:	707b      	strb	r3, [r7, #1]
  uint32_t itmask = 0;
 80058cc:	2300      	movs	r3, #0
 80058ce:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT)); 

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
 80058d0:	887b      	ldrh	r3, [r7, #2]
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	60fb      	str	r3, [r7, #12]
  itmask = (uint32_t)0x01 << itmask;    
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2201      	movs	r2, #1
 80058da:	fa02 f303 	lsl.w	r3, r2, r3
 80058de:	60fb      	str	r3, [r7, #12]

  if (NewState != DISABLE)
 80058e0:	787b      	ldrb	r3, [r7, #1]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d006      	beq.n	80058f4 <ADC_ITConfig+0x38>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685a      	ldr	r2, [r3, #4]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	431a      	orrs	r2, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	605a      	str	r2, [r3, #4]
 80058f2:	e006      	b.n	8005902 <ADC_ITConfig+0x46>
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685a      	ldr	r2, [r3, #4]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	43db      	mvns	r3, r3
 80058fc:	401a      	ands	r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	605a      	str	r2, [r3, #4]
  }
}
 8005902:	3714      	adds	r7, #20
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <ADC_GetFlagStatus>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                                                 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 800590c:	b480      	push	{r7}
 800590e:	b085      	sub	sp, #20
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	460b      	mov	r3, r1
 8005916:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
 8005918:	2300      	movs	r3, #0
 800591a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	78fb      	ldrb	r3, [r7, #3]
 8005922:	4013      	ands	r3, r2
 8005924:	2b00      	cmp	r3, #0
 8005926:	d002      	beq.n	800592e <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 8005928:	2301      	movs	r3, #1
 800592a:	73fb      	strb	r3, [r7, #15]
 800592c:	e001      	b.n	8005932 <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 800592e:	2300      	movs	r3, #0
 8005930:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8005932:	7bfb      	ldrb	r3, [r7, #15]
}
 8005934:	4618      	mov	r0, r3
 8005936:	3714      	adds	r7, #20
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <ADC_ClearFlag>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                          
  * @retval None
  */
void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	460b      	mov	r3, r1
 800594a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));

  /* Clear the selected ADC flags */
  ADCx->SR = ~(uint32_t)ADC_FLAG;
 800594c:	78fb      	ldrb	r3, [r7, #3]
 800594e:	43da      	mvns	r2, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	601a      	str	r2, [r3, #0]
}
 8005954:	370c      	adds	r7, #12
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop

08005960 <ADC_GetITStatus>:
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                        
  * @retval The new state of ADC_IT (SET or RESET).
  */
ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 8005960:	b480      	push	{r7}
 8005962:	b087      	sub	sp, #28
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	460b      	mov	r3, r1
 800596a:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;
 800596c:	2300      	movs	r3, #0
 800596e:	75fb      	strb	r3, [r7, #23]
  uint32_t itmask = 0, enablestatus = 0;
 8005970:	2300      	movs	r3, #0
 8005972:	613b      	str	r3, [r7, #16]
 8005974:	2300      	movs	r3, #0
 8005976:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT));

  /* Get the ADC IT index */
  itmask = ADC_IT >> 8;
 8005978:	887b      	ldrh	r3, [r7, #2]
 800597a:	0a1b      	lsrs	r3, r3, #8
 800597c:	b29b      	uxth	r3, r3
 800597e:	613b      	str	r3, [r7, #16]

  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)) ;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685a      	ldr	r2, [r3, #4]
 8005984:	887b      	ldrh	r3, [r7, #2]
 8005986:	b2db      	uxtb	r3, r3
 8005988:	2101      	movs	r1, #1
 800598a:	fa01 f303 	lsl.w	r3, r1, r3
 800598e:	4013      	ands	r3, r2
 8005990:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified ADC interrupt */
  if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	4013      	ands	r3, r2
 800599a:	2b00      	cmp	r3, #0
 800599c:	d005      	beq.n	80059aa <ADC_GetITStatus+0x4a>
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d002      	beq.n	80059aa <ADC_GetITStatus+0x4a>
  {
    /* ADC_IT is set */
    bitstatus = SET;
 80059a4:	2301      	movs	r3, #1
 80059a6:	75fb      	strb	r3, [r7, #23]
 80059a8:	e001      	b.n	80059ae <ADC_GetITStatus+0x4e>
  }
  else
  {
    /* ADC_IT is reset */
    bitstatus = RESET;
 80059aa:	2300      	movs	r3, #0
 80059ac:	75fb      	strb	r3, [r7, #23]
  }
  /* Return the ADC_IT status */
  return  bitstatus;
 80059ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	371c      	adds	r7, #28
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <ADC_ClearITPendingBit>:
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                         
  * @retval None
  */
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 80059bc:	b480      	push	{r7}
 80059be:	b085      	sub	sp, #20
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	460b      	mov	r3, r1
 80059c6:	807b      	strh	r3, [r7, #2]
  uint8_t itmask = 0;
 80059c8:	2300      	movs	r3, #0
 80059ca:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT)); 
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
 80059cc:	887b      	ldrh	r3, [r7, #2]
 80059ce:	0a1b      	lsrs	r3, r3, #8
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	73fb      	strb	r3, [r7, #15]
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
 80059d4:	7bfb      	ldrb	r3, [r7, #15]
 80059d6:	43da      	mvns	r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	601a      	str	r2, [r3, #0]
}                    
 80059dc:	3714      	adds	r7, #20
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr
 80059e6:	bf00      	nop

080059e8 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80059f0:	4a05      	ldr	r2, [pc, #20]	; (8005a08 <NVIC_PriorityGroupConfig+0x20>)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80059f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059fc:	60d3      	str	r3, [r2, #12]
}
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr
 8005a08:	e000ed00 	.word	0xe000ed00

08005a0c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8005a14:	2300      	movs	r3, #0
 8005a16:	73fb      	strb	r3, [r7, #15]
 8005a18:	2300      	movs	r3, #0
 8005a1a:	73bb      	strb	r3, [r7, #14]
 8005a1c:	230f      	movs	r3, #15
 8005a1e:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	78db      	ldrb	r3, [r3, #3]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d037      	beq.n	8005a98 <NVIC_Init+0x8c>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8005a28:	4b25      	ldr	r3, [pc, #148]	; (8005ac0 <NVIC_Init+0xb4>)
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	43db      	mvns	r3, r3
 8005a2e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a32:	0a1b      	lsrs	r3, r3, #8
 8005a34:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8005a36:	7bfb      	ldrb	r3, [r7, #15]
 8005a38:	f1c3 0304 	rsb	r3, r3, #4
 8005a3c:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8005a3e:	7b7a      	ldrb	r2, [r7, #13]
 8005a40:	7bfb      	ldrb	r3, [r7, #15]
 8005a42:	fa42 f303 	asr.w	r3, r2, r3
 8005a46:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	785b      	ldrb	r3, [r3, #1]
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	7bbb      	ldrb	r3, [r7, #14]
 8005a50:	fa02 f303 	lsl.w	r3, r2, r3
 8005a54:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	789a      	ldrb	r2, [r3, #2]
 8005a5a:	7b7b      	ldrb	r3, [r7, #13]
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	b2da      	uxtb	r2, r3
 8005a60:	7bfb      	ldrb	r3, [r7, #15]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8005a66:	7bfb      	ldrb	r3, [r7, #15]
 8005a68:	011b      	lsls	r3, r3, #4
 8005a6a:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8005a6c:	4a15      	ldr	r2, [pc, #84]	; (8005ac4 <NVIC_Init+0xb8>)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	4413      	add	r3, r2
 8005a74:	7bfa      	ldrb	r2, [r7, #15]
 8005a76:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005a7a:	4b12      	ldr	r3, [pc, #72]	; (8005ac4 <NVIC_Init+0xb8>)
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	7812      	ldrb	r2, [r2, #0]
 8005a80:	0952      	lsrs	r2, r2, #5
 8005a82:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8005a84:	6879      	ldr	r1, [r7, #4]
 8005a86:	7809      	ldrb	r1, [r1, #0]
 8005a88:	f001 011f 	and.w	r1, r1, #31
 8005a8c:	2001      	movs	r0, #1
 8005a8e:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005a92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005a96:	e00e      	b.n	8005ab6 <NVIC_Init+0xaa>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005a98:	4b0a      	ldr	r3, [pc, #40]	; (8005ac4 <NVIC_Init+0xb8>)
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	7812      	ldrb	r2, [r2, #0]
 8005a9e:	0952      	lsrs	r2, r2, #5
 8005aa0:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8005aa2:	6879      	ldr	r1, [r7, #4]
 8005aa4:	7809      	ldrb	r1, [r1, #0]
 8005aa6:	f001 011f 	and.w	r1, r1, #31
 8005aaa:	2001      	movs	r0, #1
 8005aac:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005ab0:	3220      	adds	r2, #32
 8005ab2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8005ab6:	3714      	adds	r7, #20
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr
 8005ac0:	e000ed00 	.word	0xe000ed00
 8005ac4:	e000e100 	.word	0xe000e100

08005ac8 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8005ad2:	4a07      	ldr	r2, [pc, #28]	; (8005af0 <NVIC_SetVectorTable+0x28>)
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8005ada:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005ade:	6879      	ldr	r1, [r7, #4]
 8005ae0:	430b      	orrs	r3, r1
 8005ae2:	6093      	str	r3, [r2, #8]
}
 8005ae4:	370c      	adds	r7, #12
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	e000ed00 	.word	0xe000ed00

08005af4 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	4602      	mov	r2, r0
 8005afc:	460b      	mov	r3, r1
 8005afe:	71fa      	strb	r2, [r7, #7]
 8005b00:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8005b02:	79bb      	ldrb	r3, [r7, #6]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d006      	beq.n	8005b16 <NVIC_SystemLPConfig+0x22>
  {
    SCB->SCR |= LowPowerMode;
 8005b08:	4b09      	ldr	r3, [pc, #36]	; (8005b30 <NVIC_SystemLPConfig+0x3c>)
 8005b0a:	4a09      	ldr	r2, [pc, #36]	; (8005b30 <NVIC_SystemLPConfig+0x3c>)
 8005b0c:	6911      	ldr	r1, [r2, #16]
 8005b0e:	79fa      	ldrb	r2, [r7, #7]
 8005b10:	430a      	orrs	r2, r1
 8005b12:	611a      	str	r2, [r3, #16]
 8005b14:	e006      	b.n	8005b24 <NVIC_SystemLPConfig+0x30>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8005b16:	4b06      	ldr	r3, [pc, #24]	; (8005b30 <NVIC_SystemLPConfig+0x3c>)
 8005b18:	4a05      	ldr	r2, [pc, #20]	; (8005b30 <NVIC_SystemLPConfig+0x3c>)
 8005b1a:	6911      	ldr	r1, [r2, #16]
 8005b1c:	79fa      	ldrb	r2, [r7, #7]
 8005b1e:	43d2      	mvns	r2, r2
 8005b20:	400a      	ands	r2, r1
 8005b22:	611a      	str	r2, [r3, #16]
  }
}
 8005b24:	370c      	adds	r7, #12
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	e000ed00 	.word	0xe000ed00

08005b34 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2b04      	cmp	r3, #4
 8005b40:	d106      	bne.n	8005b50 <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8005b42:	4b09      	ldr	r3, [pc, #36]	; (8005b68 <SysTick_CLKSourceConfig+0x34>)
 8005b44:	4a08      	ldr	r2, [pc, #32]	; (8005b68 <SysTick_CLKSourceConfig+0x34>)
 8005b46:	6812      	ldr	r2, [r2, #0]
 8005b48:	f042 0204 	orr.w	r2, r2, #4
 8005b4c:	601a      	str	r2, [r3, #0]
 8005b4e:	e005      	b.n	8005b5c <SysTick_CLKSourceConfig+0x28>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8005b50:	4b05      	ldr	r3, [pc, #20]	; (8005b68 <SysTick_CLKSourceConfig+0x34>)
 8005b52:	4a05      	ldr	r2, [pc, #20]	; (8005b68 <SysTick_CLKSourceConfig+0x34>)
 8005b54:	6812      	ldr	r2, [r2, #0]
 8005b56:	f022 0204 	bic.w	r2, r2, #4
 8005b5a:	601a      	str	r2, [r3, #0]
  }
}
 8005b5c:	370c      	adds	r7, #12
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	e000e010 	.word	0xe000e010

08005b6c <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005b72:	2300      	movs	r3, #0
 8005b74:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005b76:	f000 fa77 	bl	8006068 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005b7a:	4b0c      	ldr	r3, [pc, #48]	; (8005bac <xTimerCreateTimerTask+0x40>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00e      	beq.n	8005ba0 <xTimerCreateTimerTask+0x34>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 8005b82:	2303      	movs	r3, #3
 8005b84:	9300      	str	r3, [sp, #0]
 8005b86:	2300      	movs	r3, #0
 8005b88:	9301      	str	r3, [sp, #4]
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	9302      	str	r3, [sp, #8]
 8005b8e:	2300      	movs	r3, #0
 8005b90:	9303      	str	r3, [sp, #12]
 8005b92:	4807      	ldr	r0, [pc, #28]	; (8005bb0 <xTimerCreateTimerTask+0x44>)
 8005b94:	4907      	ldr	r1, [pc, #28]	; (8005bb4 <xTimerCreateTimerTask+0x48>)
 8005b96:	2246      	movs	r2, #70	; 0x46
 8005b98:	2300      	movs	r3, #0
 8005b9a:	f000 fab5 	bl	8006108 <xTaskGenericCreate>
 8005b9e:	6078      	str	r0, [r7, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
	return xReturn;
 8005ba0:	687b      	ldr	r3, [r7, #4]
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3708      	adds	r7, #8
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	200000b4 	.word	0x200000b4
 8005bb0:	08005d25 	.word	0x08005d25
 8005bb4:	08008db8 	.word	0x08008db8

08005bb8 <xTimerCreate>:
/*-----------------------------------------------------------*/

TimerHandle_t xTimerCreate( const char * const pcTimerName, const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b086      	sub	sp, #24
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	607a      	str	r2, [r7, #4]
 8005bc4:	603b      	str	r3, [r7, #0]
Timer_t *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d102      	bne.n	8005bd2 <xTimerCreate+0x1a>
	{
		pxNewTimer = NULL;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	617b      	str	r3, [r7, #20]
 8005bd0:	e01c      	b.n	8005c0c <xTimerCreate+0x54>
	}
	else
	{
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8005bd2:	2028      	movs	r0, #40	; 0x28
 8005bd4:	f002 fe94 	bl	8008900 <pvPortMalloc>
 8005bd8:	6178      	str	r0, [r7, #20]
		if( pxNewTimer != NULL )
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d015      	beq.n	8005c0c <xTimerCreate+0x54>
		{
			/* Ensure the infrastructure used by the timer service task has been
			created/initialised. */
			prvCheckForValidListAndQueue();
 8005be0:	f000 fa42 	bl	8006068 <prvCheckForValidListAndQueue>

			/* Initialise the timer structure members using the function parameters. */
			pxNewTimer->pcTimerName = pcTimerName;
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	601a      	str	r2, [r3, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	619a      	str	r2, [r3, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	61da      	str	r2, [r3, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	683a      	ldr	r2, [r7, #0]
 8005bfa:	621a      	str	r2, [r3, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	6a3a      	ldr	r2, [r7, #32]
 8005c00:	625a      	str	r2, [r3, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	3304      	adds	r3, #4
 8005c06:	4618      	mov	r0, r3
 8005c08:	f002 fcbc 	bl	8008584 <vListInitialiseItem>
	}

	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );

	return ( TimerHandle_t ) pxNewTimer;
 8005c0c:	697b      	ldr	r3, [r7, #20]
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3718      	adds	r7, #24
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop

08005c18 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b088      	sub	sp, #32
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
 8005c24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005c26:	2300      	movs	r3, #0
 8005c28:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005c2a:	4b1d      	ldr	r3, [pc, #116]	; (8005ca0 <xTimerGenericCommand+0x88>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d030      	beq.n	8005c94 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	2b05      	cmp	r3, #5
 8005c42:	dc1c      	bgt.n	8005c7e <xTimerGenericCommand+0x66>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005c44:	f001 fbce 	bl	80073e4 <xTaskGetSchedulerState>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d10b      	bne.n	8005c66 <xTimerGenericCommand+0x4e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005c4e:	4b14      	ldr	r3, [pc, #80]	; (8005ca0 <xTimerGenericCommand+0x88>)
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	f107 0310 	add.w	r3, r7, #16
 8005c56:	4610      	mov	r0, r2
 8005c58:	4619      	mov	r1, r3
 8005c5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	f002 f83b 	bl	8007cd8 <xQueueGenericSend>
 8005c62:	61f8      	str	r0, [r7, #28]
 8005c64:	e016      	b.n	8005c94 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005c66:	4b0e      	ldr	r3, [pc, #56]	; (8005ca0 <xTimerGenericCommand+0x88>)
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	f107 0310 	add.w	r3, r7, #16
 8005c6e:	4610      	mov	r0, r2
 8005c70:	4619      	mov	r1, r3
 8005c72:	2200      	movs	r2, #0
 8005c74:	2300      	movs	r3, #0
 8005c76:	f002 f82f 	bl	8007cd8 <xQueueGenericSend>
 8005c7a:	61f8      	str	r0, [r7, #28]
 8005c7c:	e00a      	b.n	8005c94 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005c7e:	4b08      	ldr	r3, [pc, #32]	; (8005ca0 <xTimerGenericCommand+0x88>)
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	f107 0310 	add.w	r3, r7, #16
 8005c86:	4610      	mov	r0, r2
 8005c88:	4619      	mov	r1, r3
 8005c8a:	683a      	ldr	r2, [r7, #0]
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	f002 f8c9 	bl	8007e24 <xQueueGenericSendFromISR>
 8005c92:	61f8      	str	r0, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005c94:	69fb      	ldr	r3, [r7, #28]
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3720      	adds	r7, #32
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	200000b4 	.word	0x200000b4

08005ca4 <pcTimerGetTimerName>:

#endif
/*-----------------------------------------------------------*/

const char * pcTimerGetTimerName( TimerHandle_t xTimer )
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
Timer_t *pxTimer = ( Timer_t * ) xTimer;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	60fb      	str	r3, [r7, #12]

	return pxTimer->pcTimerName;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3714      	adds	r7, #20
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b086      	sub	sp, #24
 8005cc4:	af02      	add	r7, sp, #8
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005cca:	4b15      	ldr	r3, [pc, #84]	; (8005d20 <prvProcessExpiredTimer+0x60>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	3304      	adds	r3, #4
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f002 fcbb 	bl	8008654 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	69db      	ldr	r3, [r3, #28]
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d115      	bne.n	8005d12 <prvProcessExpiredTimer+0x52>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	699a      	ldr	r2, [r3, #24]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4413      	add	r3, r2
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	683a      	ldr	r2, [r7, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f000 f8a9 	bl	8005e4c <prvInsertTimerInActiveList>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d108      	bne.n	8005d12 <prvProcessExpiredTimer+0x52>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005d00:	2300      	movs	r3, #0
 8005d02:	9300      	str	r3, [sp, #0]
 8005d04:	68f8      	ldr	r0, [r7, #12]
 8005d06:	2100      	movs	r1, #0
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	f7ff ff84 	bl	8005c18 <xTimerGenericCommand>
 8005d10:	60b8      	str	r0, [r7, #8]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d16:	68f8      	ldr	r0, [r7, #12]
 8005d18:	4798      	blx	r3
}
 8005d1a:	3710      	adds	r7, #16
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	200000ac 	.word	0x200000ac

08005d24 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d2c:	f107 0308 	add.w	r3, r7, #8
 8005d30:	4618      	mov	r0, r3
 8005d32:	f000 f847 	bl	8005dc4 <prvGetNextExpireTime>
 8005d36:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	68f8      	ldr	r0, [r7, #12]
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	f000 f803 	bl	8005d48 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005d42:	f000 f8c5 	bl	8005ed0 <prvProcessReceivedCommands>
	}
 8005d46:	e7f1      	b.n	8005d2c <prvTimerTask+0x8>

08005d48 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005d52:	f000 fe1b 	bl	800698c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d56:	f107 0308 	add.w	r3, r7, #8
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f000 f856 	bl	8005e0c <prvSampleTimeNow>
 8005d60:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d124      	bne.n	8005db2 <prvProcessTimerOrBlockTask+0x6a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d10a      	bne.n	8005d84 <prvProcessTimerOrBlockTask+0x3c>
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d806      	bhi.n	8005d84 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005d76:	f000 fe17 	bl	80069a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	68f9      	ldr	r1, [r7, #12]
 8005d7e:	f7ff ff9f 	bl	8005cc0 <prvProcessExpiredTimer>
 8005d82:	e018      	b.n	8005db6 <prvProcessTimerOrBlockTask+0x6e>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 8005d84:	4b0d      	ldr	r3, [pc, #52]	; (8005dbc <prvProcessTimerOrBlockTask+0x74>)
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	6879      	ldr	r1, [r7, #4]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	1acb      	subs	r3, r1, r3
 8005d8e:	4610      	mov	r0, r2
 8005d90:	4619      	mov	r1, r3
 8005d92:	f002 fbab 	bl	80084ec <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 8005d96:	f000 fe07 	bl	80069a8 <xTaskResumeAll>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d10a      	bne.n	8005db6 <prvProcessTimerOrBlockTask+0x6e>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
 8005da0:	4b07      	ldr	r3, [pc, #28]	; (8005dc0 <prvProcessTimerOrBlockTask+0x78>)
 8005da2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005da6:	601a      	str	r2, [r3, #0]
 8005da8:	f3bf 8f4f 	dsb	sy
 8005dac:	f3bf 8f6f 	isb	sy
 8005db0:	e001      	b.n	8005db6 <prvProcessTimerOrBlockTask+0x6e>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 8005db2:	f000 fdf9 	bl	80069a8 <xTaskResumeAll>
		}
	}
}
 8005db6:	3710      	adds	r7, #16
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	200000b4 	.word	0x200000b4
 8005dc0:	e000ed04 	.word	0xe000ed04

08005dc4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005dcc:	4b0e      	ldr	r3, [pc, #56]	; (8005e08 <prvGetNextExpireTime+0x44>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	bf14      	ite	ne
 8005dd6:	2300      	movne	r3, #0
 8005dd8:	2301      	moveq	r3, #1
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	461a      	mov	r2, r3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d105      	bne.n	8005df6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005dea:	4b07      	ldr	r3, [pc, #28]	; (8005e08 <prvGetNextExpireTime+0x44>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	60fb      	str	r3, [r7, #12]
 8005df4:	e001      	b.n	8005dfa <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005df6:	2300      	movs	r3, #0
 8005df8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3714      	adds	r7, #20
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr
 8005e08:	200000ac 	.word	0x200000ac

08005e0c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005e14:	f000 fe4e 	bl	8006ab4 <xTaskGetTickCount>
 8005e18:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005e1a:	4b0b      	ldr	r3, [pc, #44]	; (8005e48 <prvSampleTimeNow+0x3c>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d205      	bcs.n	8005e30 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005e24:	f000 f8ce 	bl	8005fc4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	601a      	str	r2, [r3, #0]
 8005e2e:	e002      	b.n	8005e36 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005e36:	4b04      	ldr	r3, [pc, #16]	; (8005e48 <prvSampleTimeNow+0x3c>)
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	200000b8 	.word	0x200000b8

08005e4c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b086      	sub	sp, #24
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]
 8005e58:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	68ba      	ldr	r2, [r7, #8]
 8005e62:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005e6a:	68ba      	ldr	r2, [r7, #8]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d812      	bhi.n	8005e98 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	1ad2      	subs	r2, r2, r3
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d302      	bcc.n	8005e86 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005e80:	2301      	movs	r3, #1
 8005e82:	617b      	str	r3, [r7, #20]
 8005e84:	e01b      	b.n	8005ebe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005e86:	4b10      	ldr	r3, [pc, #64]	; (8005ec8 <prvInsertTimerInActiveList+0x7c>)
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	3304      	adds	r3, #4
 8005e8e:	4610      	mov	r0, r2
 8005e90:	4619      	mov	r1, r3
 8005e92:	f002 fba7 	bl	80085e4 <vListInsert>
 8005e96:	e012      	b.n	8005ebe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d206      	bcs.n	8005eae <prvInsertTimerInActiveList+0x62>
 8005ea0:	68ba      	ldr	r2, [r7, #8]
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d302      	bcc.n	8005eae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	617b      	str	r3, [r7, #20]
 8005eac:	e007      	b.n	8005ebe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005eae:	4b07      	ldr	r3, [pc, #28]	; (8005ecc <prvInsertTimerInActiveList+0x80>)
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	3304      	adds	r3, #4
 8005eb6:	4610      	mov	r0, r2
 8005eb8:	4619      	mov	r1, r3
 8005eba:	f002 fb93 	bl	80085e4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005ebe:	697b      	ldr	r3, [r7, #20]
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3718      	adds	r7, #24
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	200000b0 	.word	0x200000b0
 8005ecc:	200000ac 	.word	0x200000ac

08005ed0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b08a      	sub	sp, #40	; 0x28
 8005ed4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005ed6:	e063      	b.n	8005fa0 <prvProcessReceivedCommands+0xd0>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	db60      	blt.n	8005fa0 <prvProcessReceivedCommands+0xd0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	695b      	ldr	r3, [r3, #20]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d004      	beq.n	8005ef4 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	3304      	adds	r3, #4
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f002 fbb0 	bl	8008654 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005ef4:	1d3b      	adds	r3, r7, #4
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7ff ff88 	bl	8005e0c <prvSampleTimeNow>
 8005efc:	61b8      	str	r0, [r7, #24]

			switch( xMessage.xMessageID )
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	2b09      	cmp	r3, #9
 8005f02:	d84c      	bhi.n	8005f9e <prvProcessReceivedCommands+0xce>
 8005f04:	a201      	add	r2, pc, #4	; (adr r2, 8005f0c <prvProcessReceivedCommands+0x3c>)
 8005f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f0a:	bf00      	nop
 8005f0c:	08005f35 	.word	0x08005f35
 8005f10:	08005f35 	.word	0x08005f35
 8005f14:	08005f35 	.word	0x08005f35
 8005f18:	08005f9f 	.word	0x08005f9f
 8005f1c:	08005f7b 	.word	0x08005f7b
 8005f20:	08005f97 	.word	0x08005f97
 8005f24:	08005f35 	.word	0x08005f35
 8005f28:	08005f35 	.word	0x08005f35
 8005f2c:	08005f9f 	.word	0x08005f9f
 8005f30:	08005f7b 	.word	0x08005f7b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	441a      	add	r2, r3
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	69f8      	ldr	r0, [r7, #28]
 8005f40:	4611      	mov	r1, r2
 8005f42:	69ba      	ldr	r2, [r7, #24]
 8005f44:	f7ff ff82 	bl	8005e4c <prvInsertTimerInActiveList>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d114      	bne.n	8005f78 <prvProcessReceivedCommands+0xa8>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f52:	69f8      	ldr	r0, [r7, #28]
 8005f54:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	69db      	ldr	r3, [r3, #28]
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d10c      	bne.n	8005f78 <prvProcessReceivedCommands+0xa8>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	699b      	ldr	r3, [r3, #24]
 8005f64:	4413      	add	r3, r2
 8005f66:	2200      	movs	r2, #0
 8005f68:	9200      	str	r2, [sp, #0]
 8005f6a:	69f8      	ldr	r0, [r7, #28]
 8005f6c:	2100      	movs	r1, #0
 8005f6e:	461a      	mov	r2, r3
 8005f70:	2300      	movs	r3, #0
 8005f72:	f7ff fe51 	bl	8005c18 <xTimerGenericCommand>
 8005f76:	6178      	str	r0, [r7, #20]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 8005f78:	e012      	b.n	8005fa0 <prvProcessReceivedCommands+0xd0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	619a      	str	r2, [r3, #24]
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	699a      	ldr	r2, [r3, #24]
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	4413      	add	r3, r2
 8005f88:	69f8      	ldr	r0, [r7, #28]
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	69ba      	ldr	r2, [r7, #24]
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	f7ff ff5c 	bl	8005e4c <prvInsertTimerInActiveList>
					break;
 8005f94:	e004      	b.n	8005fa0 <prvProcessReceivedCommands+0xd0>

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
 8005f96:	69f8      	ldr	r0, [r7, #28]
 8005f98:	f002 fd4a 	bl	8008a30 <vPortFree>
					break;
 8005f9c:	e000      	b.n	8005fa0 <prvProcessReceivedCommands+0xd0>

				default	:
					/* Don't expect to get here. */
					break;
 8005f9e:	bf00      	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005fa0:	4b07      	ldr	r3, [pc, #28]	; (8005fc0 <prvProcessReceivedCommands+0xf0>)
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	f107 0308 	add.w	r3, r7, #8
 8005fa8:	4610      	mov	r0, r2
 8005faa:	4619      	mov	r1, r3
 8005fac:	2200      	movs	r2, #0
 8005fae:	2300      	movs	r3, #0
 8005fb0:	f001 ffd6 	bl	8007f60 <xQueueGenericReceive>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d18e      	bne.n	8005ed8 <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
 8005fba:	3720      	adds	r7, #32
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	200000b4 	.word	0x200000b4

08005fc4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b088      	sub	sp, #32
 8005fc8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005fca:	e037      	b.n	800603c <prvSwitchTimerLists+0x78>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005fcc:	4b24      	ldr	r3, [pc, #144]	; (8006060 <prvSwitchTimerLists+0x9c>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005fd6:	4b22      	ldr	r3, [pc, #136]	; (8006060 <prvSwitchTimerLists+0x9c>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	3304      	adds	r3, #4
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f002 fb35 	bl	8008654 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fee:	6938      	ldr	r0, [r7, #16]
 8005ff0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	69db      	ldr	r3, [r3, #28]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d120      	bne.n	800603c <prvSwitchTimerLists+0x78>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	699a      	ldr	r2, [r3, #24]
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	4413      	add	r3, r2
 8006002:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	429a      	cmp	r2, r3
 800600a:	d90e      	bls.n	800602a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006018:	4b11      	ldr	r3, [pc, #68]	; (8006060 <prvSwitchTimerLists+0x9c>)
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	3304      	adds	r3, #4
 8006020:	4610      	mov	r0, r2
 8006022:	4619      	mov	r1, r3
 8006024:	f002 fade 	bl	80085e4 <vListInsert>
 8006028:	e008      	b.n	800603c <prvSwitchTimerLists+0x78>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800602a:	2300      	movs	r3, #0
 800602c:	9300      	str	r3, [sp, #0]
 800602e:	6938      	ldr	r0, [r7, #16]
 8006030:	2100      	movs	r1, #0
 8006032:	697a      	ldr	r2, [r7, #20]
 8006034:	2300      	movs	r3, #0
 8006036:	f7ff fdef 	bl	8005c18 <xTimerGenericCommand>
 800603a:	60b8      	str	r0, [r7, #8]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800603c:	4b08      	ldr	r3, [pc, #32]	; (8006060 <prvSwitchTimerLists+0x9c>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d1c2      	bne.n	8005fcc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006046:	4b06      	ldr	r3, [pc, #24]	; (8006060 <prvSwitchTimerLists+0x9c>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 800604c:	4b05      	ldr	r3, [pc, #20]	; (8006064 <prvSwitchTimerLists+0xa0>)
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	4b03      	ldr	r3, [pc, #12]	; (8006060 <prvSwitchTimerLists+0x9c>)
 8006052:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8006054:	4b03      	ldr	r3, [pc, #12]	; (8006064 <prvSwitchTimerLists+0xa0>)
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	601a      	str	r2, [r3, #0]
}
 800605a:	3718      	adds	r7, #24
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}
 8006060:	200000ac 	.word	0x200000ac
 8006064:	200000b0 	.word	0x200000b0

08006068 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006068:	b580      	push	{r7, lr}
 800606a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800606c:	f002 fba8 	bl	80087c0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006070:	4b0d      	ldr	r3, [pc, #52]	; (80060a8 <prvCheckForValidListAndQueue+0x40>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d113      	bne.n	80060a0 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
 8006078:	480c      	ldr	r0, [pc, #48]	; (80060ac <prvCheckForValidListAndQueue+0x44>)
 800607a:	f002 fa63 	bl	8008544 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800607e:	480c      	ldr	r0, [pc, #48]	; (80060b0 <prvCheckForValidListAndQueue+0x48>)
 8006080:	f002 fa60 	bl	8008544 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006084:	4b0b      	ldr	r3, [pc, #44]	; (80060b4 <prvCheckForValidListAndQueue+0x4c>)
 8006086:	4a09      	ldr	r2, [pc, #36]	; (80060ac <prvCheckForValidListAndQueue+0x44>)
 8006088:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800608a:	4b0b      	ldr	r3, [pc, #44]	; (80060b8 <prvCheckForValidListAndQueue+0x50>)
 800608c:	4a08      	ldr	r2, [pc, #32]	; (80060b0 <prvCheckForValidListAndQueue+0x48>)
 800608e:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8006090:	2005      	movs	r0, #5
 8006092:	210c      	movs	r1, #12
 8006094:	2200      	movs	r2, #0
 8006096:	f001 fda3 	bl	8007be0 <xQueueGenericCreate>
 800609a:	4602      	mov	r2, r0
 800609c:	4b02      	ldr	r3, [pc, #8]	; (80060a8 <prvCheckForValidListAndQueue+0x40>)
 800609e:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80060a0:	f002 fba6 	bl	80087f0 <vPortExitCritical>
}
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	200000b4 	.word	0x200000b4
 80060ac:	20000084 	.word	0x20000084
 80060b0:	20000098 	.word	0x20000098
 80060b4:	200000ac 	.word	0x200000ac
 80060b8:	200000b0 	.word	0x200000b0

080060bc <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	60fb      	str	r3, [r7, #12]

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 80060c8:	f002 fb7a 	bl	80087c0 <vPortEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	695b      	ldr	r3, [r3, #20]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	bf0c      	ite	eq
 80060d4:	2300      	moveq	r3, #0
 80060d6:	2301      	movne	r3, #1
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
 80060dc:	f002 fb88 	bl	80087f0 <vPortExitCritical>

	return xTimerIsInActiveList;
 80060e0:	68bb      	ldr	r3, [r7, #8]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 80060e2:	4618      	mov	r0, r3
 80060e4:	3710      	adds	r7, #16
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop

080060ec <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80060ec:	b480      	push	{r7}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	60fb      	str	r3, [r7, #12]

	return pxTimer->pvTimerID;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6a1b      	ldr	r3, [r3, #32]
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3714      	adds	r7, #20
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b08a      	sub	sp, #40	; 0x28
 800610c:	af02      	add	r7, sp, #8
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	603b      	str	r3, [r7, #0]
 8006114:	4613      	mov	r3, r2
 8006116:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 8006118:	88fb      	ldrh	r3, [r7, #6]
 800611a:	4618      	mov	r0, r3
 800611c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800611e:	f001 f8e5 	bl	80072ec <prvAllocateTCBAndStack>
 8006122:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d065      	beq.n	80061f6 <xTaskGenericCreate+0xee>
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800612e:	88fb      	ldrh	r3, [r7, #6]
 8006130:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006134:	3b01      	subs	r3, #1
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	4413      	add	r3, r2
 800613a:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	f023 0307 	bic.w	r3, r3, #7
 8006142:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 8006144:	88fb      	ldrh	r3, [r7, #6]
 8006146:	9300      	str	r3, [sp, #0]
 8006148:	69b8      	ldr	r0, [r7, #24]
 800614a:	68b9      	ldr	r1, [r7, #8]
 800614c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800614e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006150:	f000 ffcc 	bl	80070ec <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006154:	6978      	ldr	r0, [r7, #20]
 8006156:	68f9      	ldr	r1, [r7, #12]
 8006158:	683a      	ldr	r2, [r7, #0]
 800615a:	f002 faa5 	bl	80086a8 <pxPortInitialiseStack>
 800615e:	4602      	mov	r2, r0
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	601a      	str	r2, [r3, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 8006164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006166:	2b00      	cmp	r3, #0
 8006168:	d002      	beq.n	8006170 <xTaskGenericCreate+0x68>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800616a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800616c:	69ba      	ldr	r2, [r7, #24]
 800616e:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
 8006170:	f002 fb26 	bl	80087c0 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 8006174:	4b2e      	ldr	r3, [pc, #184]	; (8006230 <xTaskGenericCreate+0x128>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	1c5a      	adds	r2, r3, #1
 800617a:	4b2d      	ldr	r3, [pc, #180]	; (8006230 <xTaskGenericCreate+0x128>)
 800617c:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
 800617e:	4b2d      	ldr	r3, [pc, #180]	; (8006234 <xTaskGenericCreate+0x12c>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d109      	bne.n	800619a <xTaskGenericCreate+0x92>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 8006186:	4b2b      	ldr	r3, [pc, #172]	; (8006234 <xTaskGenericCreate+0x12c>)
 8006188:	69ba      	ldr	r2, [r7, #24]
 800618a:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800618c:	4b28      	ldr	r3, [pc, #160]	; (8006230 <xTaskGenericCreate+0x128>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d10f      	bne.n	80061b4 <xTaskGenericCreate+0xac>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 8006194:	f000 fffc 	bl	8007190 <prvInitialiseTaskLists>
 8006198:	e00c      	b.n	80061b4 <xTaskGenericCreate+0xac>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 800619a:	4b27      	ldr	r3, [pc, #156]	; (8006238 <xTaskGenericCreate+0x130>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d108      	bne.n	80061b4 <xTaskGenericCreate+0xac>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 80061a2:	4b24      	ldr	r3, [pc, #144]	; (8006234 <xTaskGenericCreate+0x12c>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d802      	bhi.n	80061b4 <xTaskGenericCreate+0xac>
					{
						pxCurrentTCB = pxNewTCB;
 80061ae:	4b21      	ldr	r3, [pc, #132]	; (8006234 <xTaskGenericCreate+0x12c>)
 80061b0:	69ba      	ldr	r2, [r7, #24]
 80061b2:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 80061b4:	4b21      	ldr	r3, [pc, #132]	; (800623c <xTaskGenericCreate+0x134>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	1c5a      	adds	r2, r3, #1
 80061ba:	4b20      	ldr	r3, [pc, #128]	; (800623c <xTaskGenericCreate+0x134>)
 80061bc:	601a      	str	r2, [r3, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c2:	2201      	movs	r2, #1
 80061c4:	409a      	lsls	r2, r3
 80061c6:	4b1e      	ldr	r3, [pc, #120]	; (8006240 <xTaskGenericCreate+0x138>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	431a      	orrs	r2, r3
 80061cc:	4b1c      	ldr	r3, [pc, #112]	; (8006240 <xTaskGenericCreate+0x138>)
 80061ce:	601a      	str	r2, [r3, #0]
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061d4:	4613      	mov	r3, r2
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	4413      	add	r3, r2
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	4a19      	ldr	r2, [pc, #100]	; (8006244 <xTaskGenericCreate+0x13c>)
 80061de:	441a      	add	r2, r3
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	3304      	adds	r3, #4
 80061e4:	4610      	mov	r0, r2
 80061e6:	4619      	mov	r1, r3
 80061e8:	f002 f9d8 	bl	800859c <vListInsertEnd>

			xReturn = pdPASS;
 80061ec:	2301      	movs	r3, #1
 80061ee:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 80061f0:	f002 fafe 	bl	80087f0 <vPortExitCritical>
 80061f4:	e002      	b.n	80061fc <xTaskGenericCreate+0xf4>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80061f6:	f04f 33ff 	mov.w	r3, #4294967295
 80061fa:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d111      	bne.n	8006226 <xTaskGenericCreate+0x11e>
	{
		if( xSchedulerRunning != pdFALSE )
 8006202:	4b0d      	ldr	r3, [pc, #52]	; (8006238 <xTaskGenericCreate+0x130>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00d      	beq.n	8006226 <xTaskGenericCreate+0x11e>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 800620a:	4b0a      	ldr	r3, [pc, #40]	; (8006234 <xTaskGenericCreate+0x12c>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006212:	429a      	cmp	r2, r3
 8006214:	d207      	bcs.n	8006226 <xTaskGenericCreate+0x11e>
			{
				taskYIELD_IF_USING_PREEMPTION();
 8006216:	4b0c      	ldr	r3, [pc, #48]	; (8006248 <xTaskGenericCreate+0x140>)
 8006218:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800621c:	601a      	str	r2, [r3, #0]
 800621e:	f3bf 8f4f 	dsb	sy
 8006222:	f3bf 8f6f 	isb	sy
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
 8006226:	69fb      	ldr	r3, [r7, #28]
}
 8006228:	4618      	mov	r0, r3
 800622a:	3720      	adds	r7, #32
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}
 8006230:	20000194 	.word	0x20000194
 8006234:	200000bc 	.word	0x200000bc
 8006238:	200001a0 	.word	0x200001a0
 800623c:	200001b0 	.word	0x200001b0
 8006240:	2000019c 	.word	0x2000019c
 8006244:	200000c0 	.word	0x200000c0
 8006248:	e000ed04 	.word	0xe000ed04

0800624c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006254:	f002 fab4 	bl	80087c0 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d102      	bne.n	8006264 <vTaskDelete+0x18>
 800625e:	4b2c      	ldr	r3, [pc, #176]	; (8006310 <vTaskDelete+0xc4>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	e000      	b.n	8006266 <vTaskDelete+0x1a>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	3304      	adds	r3, #4
 800626c:	4618      	mov	r0, r3
 800626e:	f002 f9f1 	bl	8008654 <uxListRemove>
 8006272:	4603      	mov	r3, r0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d115      	bne.n	80062a4 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800627c:	4925      	ldr	r1, [pc, #148]	; (8006314 <vTaskDelete+0xc8>)
 800627e:	4613      	mov	r3, r2
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	4413      	add	r3, r2
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	440b      	add	r3, r1
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d10a      	bne.n	80062a4 <vTaskDelete+0x58>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006292:	2201      	movs	r2, #1
 8006294:	fa02 f303 	lsl.w	r3, r2, r3
 8006298:	43da      	mvns	r2, r3
 800629a:	4b1f      	ldr	r3, [pc, #124]	; (8006318 <vTaskDelete+0xcc>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	401a      	ands	r2, r3
 80062a0:	4b1d      	ldr	r3, [pc, #116]	; (8006318 <vTaskDelete+0xcc>)
 80062a2:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d004      	beq.n	80062b6 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	3318      	adds	r3, #24
 80062b0:	4618      	mov	r0, r3
 80062b2:	f002 f9cf 	bl	8008654 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	3304      	adds	r3, #4
 80062ba:	4818      	ldr	r0, [pc, #96]	; (800631c <vTaskDelete+0xd0>)
 80062bc:	4619      	mov	r1, r3
 80062be:	f002 f96d 	bl	800859c <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
 80062c2:	4b17      	ldr	r3, [pc, #92]	; (8006320 <vTaskDelete+0xd4>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	1c5a      	adds	r2, r3, #1
 80062c8:	4b15      	ldr	r3, [pc, #84]	; (8006320 <vTaskDelete+0xd4>)
 80062ca:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
 80062cc:	4b15      	ldr	r3, [pc, #84]	; (8006324 <vTaskDelete+0xd8>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	1c5a      	adds	r2, r3, #1
 80062d2:	4b14      	ldr	r3, [pc, #80]	; (8006324 <vTaskDelete+0xd8>)
 80062d4:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 80062d6:	f002 fa8b 	bl	80087f0 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80062da:	4b13      	ldr	r3, [pc, #76]	; (8006328 <vTaskDelete+0xdc>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d013      	beq.n	800630a <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 80062e2:	4b0b      	ldr	r3, [pc, #44]	; (8006310 <vTaskDelete+0xc4>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d108      	bne.n	80062fe <vTaskDelete+0xb2>
				in which Windows specific clean up operations are performed,
				after which it is not possible to yield away from this task -
				hence xYieldPending is used to latch that a context switch is
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
				portYIELD_WITHIN_API();
 80062ec:	4b0f      	ldr	r3, [pc, #60]	; (800632c <vTaskDelete+0xe0>)
 80062ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062f2:	601a      	str	r2, [r3, #0]
 80062f4:	f3bf 8f4f 	dsb	sy
 80062f8:	f3bf 8f6f 	isb	sy
 80062fc:	e005      	b.n	800630a <vTaskDelete+0xbe>
			}
			else
			{
				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				taskENTER_CRITICAL();
 80062fe:	f002 fa5f 	bl	80087c0 <vPortEnterCritical>
				{
					prvResetNextTaskUnblockTime();
 8006302:	f001 f83b 	bl	800737c <prvResetNextTaskUnblockTime>
				}
				taskEXIT_CRITICAL();
 8006306:	f002 fa73 	bl	80087f0 <vPortExitCritical>
			}
		}
	}
 800630a:	3710      	adds	r7, #16
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	200000bc 	.word	0x200000bc
 8006314:	200000c0 	.word	0x200000c0
 8006318:	2000019c 	.word	0x2000019c
 800631c:	20000168 	.word	0x20000168
 8006320:	2000017c 	.word	0x2000017c
 8006324:	200001b0 	.word	0x200001b0
 8006328:	200001a0 	.word	0x200001a0
 800632c:	e000ed04 	.word	0xe000ed04

08006330 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8006330:	b580      	push	{r7, lr}
 8006332:	b086      	sub	sp, #24
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800633a:	2300      	movs	r3, #0
 800633c:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );
		configASSERT( uxSchedulerSuspended == 0 );

		vTaskSuspendAll();
 800633e:	f000 fb25 	bl	800698c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8006342:	4b29      	ldr	r3, [pc, #164]	; (80063e8 <vTaskDelayUntil+0xb8>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	4413      	add	r3, r2
 8006350:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	429a      	cmp	r2, r3
 800635a:	d90b      	bls.n	8006374 <vTaskDelayUntil+0x44>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	429a      	cmp	r2, r3
 8006364:	d911      	bls.n	800638a <vTaskDelayUntil+0x5a>
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	429a      	cmp	r2, r3
 800636c:	d90d      	bls.n	800638a <vTaskDelayUntil+0x5a>
				{
					xShouldDelay = pdTRUE;
 800636e:	2301      	movs	r3, #1
 8006370:	617b      	str	r3, [r7, #20]
 8006372:	e00a      	b.n	800638a <vTaskDelayUntil+0x5a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	429a      	cmp	r2, r3
 800637c:	d803      	bhi.n	8006386 <vTaskDelayUntil+0x56>
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	429a      	cmp	r2, r3
 8006384:	d901      	bls.n	800638a <vTaskDelayUntil+0x5a>
				{
					xShouldDelay = pdTRUE;
 8006386:	2301      	movs	r3, #1
 8006388:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d017      	beq.n	80063c6 <vTaskDelayUntil+0x96>
			{
				traceTASK_DELAY_UNTIL();

				/* Remove the task from the ready list before adding it to the
				blocked list as the same list item is used for both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8006396:	4b15      	ldr	r3, [pc, #84]	; (80063ec <vTaskDelayUntil+0xbc>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	3304      	adds	r3, #4
 800639c:	4618      	mov	r0, r3
 800639e:	f002 f959 	bl	8008654 <uxListRemove>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d10b      	bne.n	80063c0 <vTaskDelayUntil+0x90>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80063a8:	4b10      	ldr	r3, [pc, #64]	; (80063ec <vTaskDelayUntil+0xbc>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ae:	2201      	movs	r2, #1
 80063b0:	fa02 f303 	lsl.w	r3, r2, r3
 80063b4:	43da      	mvns	r2, r3
 80063b6:	4b0e      	ldr	r3, [pc, #56]	; (80063f0 <vTaskDelayUntil+0xc0>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	401a      	ands	r2, r3
 80063bc:	4b0c      	ldr	r3, [pc, #48]	; (80063f0 <vTaskDelayUntil+0xc0>)
 80063be:	601a      	str	r2, [r3, #0]
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
 80063c0:	68f8      	ldr	r0, [r7, #12]
 80063c2:	f000 ff5d 	bl	8007280 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80063c6:	f000 faef 	bl	80069a8 <xTaskResumeAll>
 80063ca:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d107      	bne.n	80063e2 <vTaskDelayUntil+0xb2>
		{
			portYIELD_WITHIN_API();
 80063d2:	4b08      	ldr	r3, [pc, #32]	; (80063f4 <vTaskDelayUntil+0xc4>)
 80063d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063d8:	601a      	str	r2, [r3, #0]
 80063da:	f3bf 8f4f 	dsb	sy
 80063de:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80063e2:	3718      	adds	r7, #24
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	20000198 	.word	0x20000198
 80063ec:	200000bc 	.word	0x200000bc
 80063f0:	2000019c 	.word	0x2000019c
 80063f4:	e000ed04 	.word	0xe000ed04

080063f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;
 8006400:	2300      	movs	r3, #0
 8006402:	60fb      	str	r3, [r7, #12]


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d021      	beq.n	800644e <vTaskDelay+0x56>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 800640a:	f000 fabf 	bl	800698c <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 800640e:	4b17      	ldr	r3, [pc, #92]	; (800646c <vTaskDelay+0x74>)
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4413      	add	r3, r2
 8006416:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8006418:	4b15      	ldr	r3, [pc, #84]	; (8006470 <vTaskDelay+0x78>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	3304      	adds	r3, #4
 800641e:	4618      	mov	r0, r3
 8006420:	f002 f918 	bl	8008654 <uxListRemove>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d10b      	bne.n	8006442 <vTaskDelay+0x4a>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800642a:	4b11      	ldr	r3, [pc, #68]	; (8006470 <vTaskDelay+0x78>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006430:	2201      	movs	r2, #1
 8006432:	fa02 f303 	lsl.w	r3, r2, r3
 8006436:	43da      	mvns	r2, r3
 8006438:	4b0e      	ldr	r3, [pc, #56]	; (8006474 <vTaskDelay+0x7c>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	401a      	ands	r2, r3
 800643e:	4b0d      	ldr	r3, [pc, #52]	; (8006474 <vTaskDelay+0x7c>)
 8006440:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8006442:	68b8      	ldr	r0, [r7, #8]
 8006444:	f000 ff1c 	bl	8007280 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006448:	f000 faae 	bl	80069a8 <xTaskResumeAll>
 800644c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d107      	bne.n	8006464 <vTaskDelay+0x6c>
		{
			portYIELD_WITHIN_API();
 8006454:	4b08      	ldr	r3, [pc, #32]	; (8006478 <vTaskDelay+0x80>)
 8006456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800645a:	601a      	str	r2, [r3, #0]
 800645c:	f3bf 8f4f 	dsb	sy
 8006460:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006464:	3710      	adds	r7, #16
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	20000198 	.word	0x20000198
 8006470:	200000bc 	.word	0x200000bc
 8006474:	2000019c 	.word	0x2000019c
 8006478:	e000ed04 	.word	0xe000ed04

0800647c <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 8006484:	f002 f99c 	bl	80087c0 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d102      	bne.n	8006494 <uxTaskPriorityGet+0x18>
 800648e:	4b07      	ldr	r3, [pc, #28]	; (80064ac <uxTaskPriorityGet+0x30>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	e000      	b.n	8006496 <uxTaskPriorityGet+0x1a>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800649c:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
 800649e:	f002 f9a7 	bl	80087f0 <vPortExitCritical>

		return uxReturn;
 80064a2:	68bb      	ldr	r3, [r7, #8]
	}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3710      	adds	r7, #16
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	200000bc 	.word	0x200000bc

080064b0 <uxTaskPriorityGetFromISR>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
	{
 80064b0:	b480      	push	{r7}
 80064b2:	b089      	sub	sp, #36	; 0x24
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80064b8:	f3ef 8211 	mrs	r2, BASEPRI
 80064bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c0:	f383 8811 	msr	BASEPRI, r3
 80064c4:	f3bf 8f6f 	isb	sy
 80064c8:	f3bf 8f4f 	dsb	sy
 80064cc:	613a      	str	r2, [r7, #16]
 80064ce:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80064d0:	693b      	ldr	r3, [r7, #16]
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 80064d2:	61fb      	str	r3, [r7, #28]
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d102      	bne.n	80064e0 <uxTaskPriorityGetFromISR+0x30>
 80064da:	4b0a      	ldr	r3, [pc, #40]	; (8006504 <uxTaskPriorityGetFromISR+0x54>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	e000      	b.n	80064e2 <uxTaskPriorityGetFromISR+0x32>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	61bb      	str	r3, [r7, #24]
			uxReturn = pxTCB->uxPriority;
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e8:	617b      	str	r3, [r7, #20]
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	f383 8811 	msr	BASEPRI, r3
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );

		return uxReturn;
 80064f4:	697b      	ldr	r3, [r7, #20]
	}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3724      	adds	r7, #36	; 0x24
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	200000bc 	.word	0x200000bc

08006508 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8006508:	b580      	push	{r7, lr}
 800650a:	b086      	sub	sp, #24
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8006512:	2300      	movs	r3, #0
 8006514:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	2b04      	cmp	r3, #4
 800651a:	d901      	bls.n	8006520 <vTaskPrioritySet+0x18>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800651c:	2304      	movs	r3, #4
 800651e:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8006520:	f002 f94e 	bl	80087c0 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d102      	bne.n	8006530 <vTaskPrioritySet+0x28>
 800652a:	4b43      	ldr	r3, [pc, #268]	; (8006638 <vTaskPrioritySet+0x130>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	e000      	b.n	8006532 <vTaskPrioritySet+0x2a>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006538:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	429a      	cmp	r2, r3
 8006540:	d074      	beq.n	800662c <vTaskPrioritySet+0x124>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8006542:	683a      	ldr	r2, [r7, #0]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	429a      	cmp	r2, r3
 8006548:	d90d      	bls.n	8006566 <vTaskPrioritySet+0x5e>
				{
					if( pxTCB != pxCurrentTCB )
 800654a:	4b3b      	ldr	r3, [pc, #236]	; (8006638 <vTaskPrioritySet+0x130>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	693a      	ldr	r2, [r7, #16]
 8006550:	429a      	cmp	r2, r3
 8006552:	d00f      	beq.n	8006574 <vTaskPrioritySet+0x6c>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8006554:	4b38      	ldr	r3, [pc, #224]	; (8006638 <vTaskPrioritySet+0x130>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	429a      	cmp	r2, r3
 800655e:	d809      	bhi.n	8006574 <vTaskPrioritySet+0x6c>
						{
							xYieldRequired = pdTRUE;
 8006560:	2301      	movs	r3, #1
 8006562:	617b      	str	r3, [r7, #20]
 8006564:	e006      	b.n	8006574 <vTaskPrioritySet+0x6c>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8006566:	4b34      	ldr	r3, [pc, #208]	; (8006638 <vTaskPrioritySet+0x130>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	693a      	ldr	r2, [r7, #16]
 800656c:	429a      	cmp	r2, r3
 800656e:	d101      	bne.n	8006574 <vTaskPrioritySet+0x6c>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8006570:	2301      	movs	r3, #1
 8006572:	617b      	str	r3, [r7, #20]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006578:	60bb      	str	r3, [r7, #8]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006582:	429a      	cmp	r2, r3
 8006584:	d102      	bne.n	800658c <vTaskPrioritySet+0x84>
					{
						pxTCB->uxPriority = uxNewPriority;
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	683a      	ldr	r2, [r7, #0]
 800658a:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	683a      	ldr	r2, [r7, #0]
 8006590:	641a      	str	r2, [r3, #64]	; 0x40
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	699b      	ldr	r3, [r3, #24]
 8006596:	2b00      	cmp	r3, #0
 8006598:	db04      	blt.n	80065a4 <vTaskPrioritySet+0x9c>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	f1c3 0205 	rsb	r2, r3, #5
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	6959      	ldr	r1, [r3, #20]
 80065a8:	68ba      	ldr	r2, [r7, #8]
 80065aa:	4613      	mov	r3, r2
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	4413      	add	r3, r2
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	4a22      	ldr	r2, [pc, #136]	; (800663c <vTaskPrioritySet+0x134>)
 80065b4:	4413      	add	r3, r2
 80065b6:	4299      	cmp	r1, r3
 80065b8:	d101      	bne.n	80065be <vTaskPrioritySet+0xb6>
 80065ba:	2301      	movs	r3, #1
 80065bc:	e000      	b.n	80065c0 <vTaskPrioritySet+0xb8>
 80065be:	2300      	movs	r3, #0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d028      	beq.n	8006616 <vTaskPrioritySet+0x10e>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	3304      	adds	r3, #4
 80065c8:	4618      	mov	r0, r3
 80065ca:	f002 f843 	bl	8008654 <uxListRemove>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d109      	bne.n	80065e8 <vTaskPrioritySet+0xe0>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	2201      	movs	r2, #1
 80065d8:	fa02 f303 	lsl.w	r3, r2, r3
 80065dc:	43da      	mvns	r2, r3
 80065de:	4b18      	ldr	r3, [pc, #96]	; (8006640 <vTaskPrioritySet+0x138>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	401a      	ands	r2, r3
 80065e4:	4b16      	ldr	r3, [pc, #88]	; (8006640 <vTaskPrioritySet+0x138>)
 80065e6:	601a      	str	r2, [r3, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ec:	2201      	movs	r2, #1
 80065ee:	409a      	lsls	r2, r3
 80065f0:	4b13      	ldr	r3, [pc, #76]	; (8006640 <vTaskPrioritySet+0x138>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	431a      	orrs	r2, r3
 80065f6:	4b12      	ldr	r3, [pc, #72]	; (8006640 <vTaskPrioritySet+0x138>)
 80065f8:	601a      	str	r2, [r3, #0]
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065fe:	4613      	mov	r3, r2
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	4413      	add	r3, r2
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	4a0d      	ldr	r2, [pc, #52]	; (800663c <vTaskPrioritySet+0x134>)
 8006608:	441a      	add	r2, r3
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	3304      	adds	r3, #4
 800660e:	4610      	mov	r0, r2
 8006610:	4619      	mov	r1, r3
 8006612:	f001 ffc3 	bl	800859c <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired == pdTRUE )
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	2b01      	cmp	r3, #1
 800661a:	d107      	bne.n	800662c <vTaskPrioritySet+0x124>
				{
					taskYIELD_IF_USING_PREEMPTION();
 800661c:	4b09      	ldr	r3, [pc, #36]	; (8006644 <vTaskPrioritySet+0x13c>)
 800661e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006622:	601a      	str	r2, [r3, #0]
 8006624:	f3bf 8f4f 	dsb	sy
 8006628:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 800662c:	f002 f8e0 	bl	80087f0 <vPortExitCritical>
	}
 8006630:	3718      	adds	r7, #24
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	200000bc 	.word	0x200000bc
 800663c:	200000c0 	.word	0x200000c0
 8006640:	2000019c 	.word	0x2000019c
 8006644:	e000ed04 	.word	0xe000ed04

08006648 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006650:	f002 f8b6 	bl	80087c0 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d102      	bne.n	8006660 <vTaskSuspend+0x18>
 800665a:	4b30      	ldr	r3, [pc, #192]	; (800671c <vTaskSuspend+0xd4>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	e000      	b.n	8006662 <vTaskSuspend+0x1a>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	3304      	adds	r3, #4
 8006668:	4618      	mov	r0, r3
 800666a:	f001 fff3 	bl	8008654 <uxListRemove>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d115      	bne.n	80066a0 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006678:	4929      	ldr	r1, [pc, #164]	; (8006720 <vTaskSuspend+0xd8>)
 800667a:	4613      	mov	r3, r2
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	4413      	add	r3, r2
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	440b      	add	r3, r1
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d10a      	bne.n	80066a0 <vTaskSuspend+0x58>
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668e:	2201      	movs	r2, #1
 8006690:	fa02 f303 	lsl.w	r3, r2, r3
 8006694:	43da      	mvns	r2, r3
 8006696:	4b23      	ldr	r3, [pc, #140]	; (8006724 <vTaskSuspend+0xdc>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	401a      	ands	r2, r3
 800669c:	4b21      	ldr	r3, [pc, #132]	; (8006724 <vTaskSuspend+0xdc>)
 800669e:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d004      	beq.n	80066b2 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	3318      	adds	r3, #24
 80066ac:	4618      	mov	r0, r3
 80066ae:	f001 ffd1 	bl	8008654 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	3304      	adds	r3, #4
 80066b6:	481c      	ldr	r0, [pc, #112]	; (8006728 <vTaskSuspend+0xe0>)
 80066b8:	4619      	mov	r1, r3
 80066ba:	f001 ff6f 	bl	800859c <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
 80066be:	f002 f897 	bl	80087f0 <vPortExitCritical>

		if( pxTCB == pxCurrentTCB )
 80066c2:	4b16      	ldr	r3, [pc, #88]	; (800671c <vTaskSuspend+0xd4>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d119      	bne.n	8006700 <vTaskSuspend+0xb8>
		{
			if( xSchedulerRunning != pdFALSE )
 80066cc:	4b17      	ldr	r3, [pc, #92]	; (800672c <vTaskSuspend+0xe4>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d008      	beq.n	80066e6 <vTaskSuspend+0x9e>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
 80066d4:	4b16      	ldr	r3, [pc, #88]	; (8006730 <vTaskSuspend+0xe8>)
 80066d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066da:	601a      	str	r2, [r3, #0]
 80066dc:	f3bf 8f4f 	dsb	sy
 80066e0:	f3bf 8f6f 	isb	sy
 80066e4:	e016      	b.n	8006714 <vTaskSuspend+0xcc>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 80066e6:	4b10      	ldr	r3, [pc, #64]	; (8006728 <vTaskSuspend+0xe0>)
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	4b12      	ldr	r3, [pc, #72]	; (8006734 <vTaskSuspend+0xec>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d103      	bne.n	80066fa <vTaskSuspend+0xb2>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
 80066f2:	4b0a      	ldr	r3, [pc, #40]	; (800671c <vTaskSuspend+0xd4>)
 80066f4:	2200      	movs	r2, #0
 80066f6:	601a      	str	r2, [r3, #0]
 80066f8:	e00c      	b.n	8006714 <vTaskSuspend+0xcc>
				}
				else
				{
					vTaskSwitchContext();
 80066fa:	f000 fab7 	bl	8006c6c <vTaskSwitchContext>
 80066fe:	e009      	b.n	8006714 <vTaskSuspend+0xcc>
				}
			}
		}
		else
		{
			if( xSchedulerRunning != pdFALSE )
 8006700:	4b0a      	ldr	r3, [pc, #40]	; (800672c <vTaskSuspend+0xe4>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d005      	beq.n	8006714 <vTaskSuspend+0xcc>
			{
				/* A task other than the currently running task was suspended,
				reset the next expected unblock time in case it referred to the
				task that is now in the Suspended state. */
				taskENTER_CRITICAL();
 8006708:	f002 f85a 	bl	80087c0 <vPortEnterCritical>
				{
					prvResetNextTaskUnblockTime();
 800670c:	f000 fe36 	bl	800737c <prvResetNextTaskUnblockTime>
				}
				taskEXIT_CRITICAL();
 8006710:	f002 f86e 	bl	80087f0 <vPortExitCritical>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006714:	3710      	adds	r7, #16
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	200000bc 	.word	0x200000bc
 8006720:	200000c0 	.word	0x200000c0
 8006724:	2000019c 	.word	0x2000019c
 8006728:	20000180 	.word	0x20000180
 800672c:	200001a0 	.word	0x200001a0
 8006730:	e000ed04 	.word	0xe000ed04
 8006734:	20000194 	.word	0x20000194

08006738 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8006738:	b480      	push	{r7}
 800673a:	b085      	sub	sp, #20
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8006740:	2300      	movs	r3, #0
 8006742:	60fb      	str	r3, [r7, #12]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	60bb      	str	r3, [r7, #8]

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	695a      	ldr	r2, [r3, #20]
 800674c:	4b0f      	ldr	r3, [pc, #60]	; (800678c <prvTaskIsTaskSuspended+0x54>)
 800674e:	429a      	cmp	r2, r3
 8006750:	d101      	bne.n	8006756 <prvTaskIsTaskSuspended+0x1e>
 8006752:	2301      	movs	r3, #1
 8006754:	e000      	b.n	8006758 <prvTaskIsTaskSuspended+0x20>
 8006756:	2300      	movs	r3, #0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d00f      	beq.n	800677c <prvTaskIsTaskSuspended+0x44>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006760:	4b0b      	ldr	r3, [pc, #44]	; (8006790 <prvTaskIsTaskSuspended+0x58>)
 8006762:	429a      	cmp	r2, r3
 8006764:	d00a      	beq.n	800677c <prvTaskIsTaskSuspended+0x44>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800676a:	2b00      	cmp	r3, #0
 800676c:	d101      	bne.n	8006772 <prvTaskIsTaskSuspended+0x3a>
 800676e:	2301      	movs	r3, #1
 8006770:	e000      	b.n	8006774 <prvTaskIsTaskSuspended+0x3c>
 8006772:	2300      	movs	r3, #0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d001      	beq.n	800677c <prvTaskIsTaskSuspended+0x44>
				{
					xReturn = pdTRUE;
 8006778:	2301      	movs	r3, #1
 800677a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800677c:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800677e:	4618      	mov	r0, r3
 8006780:	3714      	adds	r7, #20
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	20000180 	.word	0x20000180
 8006790:	20000154 	.word	0x20000154

08006794 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	60fb      	str	r3, [r7, #12]
		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d039      	beq.n	800681a <vTaskResume+0x86>
 80067a6:	4b1e      	ldr	r3, [pc, #120]	; (8006820 <vTaskResume+0x8c>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d034      	beq.n	800681a <vTaskResume+0x86>
		{
			taskENTER_CRITICAL();
 80067b0:	f002 f806 	bl	80087c0 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f7ff ffbf 	bl	8006738 <prvTaskIsTaskSuspended>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d12a      	bne.n	8006816 <vTaskResume+0x82>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	3304      	adds	r3, #4
 80067c4:	4618      	mov	r0, r3
 80067c6:	f001 ff45 	bl	8008654 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ce:	2201      	movs	r2, #1
 80067d0:	409a      	lsls	r2, r3
 80067d2:	4b14      	ldr	r3, [pc, #80]	; (8006824 <vTaskResume+0x90>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	431a      	orrs	r2, r3
 80067d8:	4b12      	ldr	r3, [pc, #72]	; (8006824 <vTaskResume+0x90>)
 80067da:	601a      	str	r2, [r3, #0]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067e0:	4613      	mov	r3, r2
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	4413      	add	r3, r2
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	4a0f      	ldr	r2, [pc, #60]	; (8006828 <vTaskResume+0x94>)
 80067ea:	441a      	add	r2, r3
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	3304      	adds	r3, #4
 80067f0:	4610      	mov	r0, r2
 80067f2:	4619      	mov	r1, r3
 80067f4:	f001 fed2 	bl	800859c <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067fc:	4b08      	ldr	r3, [pc, #32]	; (8006820 <vTaskResume+0x8c>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006802:	429a      	cmp	r2, r3
 8006804:	d307      	bcc.n	8006816 <vTaskResume+0x82>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8006806:	4b09      	ldr	r3, [pc, #36]	; (800682c <vTaskResume+0x98>)
 8006808:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800680c:	601a      	str	r2, [r3, #0]
 800680e:	f3bf 8f4f 	dsb	sy
 8006812:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8006816:	f001 ffeb 	bl	80087f0 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800681a:	3710      	adds	r7, #16
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}
 8006820:	200000bc 	.word	0x200000bc
 8006824:	2000019c 	.word	0x2000019c
 8006828:	200000c0 	.word	0x200000c0
 800682c:	e000ed04 	.word	0xe000ed04

08006830 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8006830:	b580      	push	{r7, lr}
 8006832:	b088      	sub	sp, #32
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8006838:	2300      	movs	r3, #0
 800683a:	61fb      	str	r3, [r7, #28]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	61bb      	str	r3, [r7, #24]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006840:	f3ef 8211 	mrs	r2, BASEPRI
 8006844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006848:	f383 8811 	msr	BASEPRI, r3
 800684c:	f3bf 8f6f 	isb	sy
 8006850:	f3bf 8f4f 	dsb	sy
 8006854:	613a      	str	r2, [r7, #16]
 8006856:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006858:	693b      	ldr	r3, [r7, #16]
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800685a:	617b      	str	r3, [r7, #20]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 800685c:	69b8      	ldr	r0, [r7, #24]
 800685e:	f7ff ff6b 	bl	8006738 <prvTaskIsTaskSuspended>
 8006862:	4603      	mov	r3, r0
 8006864:	2b01      	cmp	r3, #1
 8006866:	d12f      	bne.n	80068c8 <xTaskResumeFromISR+0x98>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006868:	4b1c      	ldr	r3, [pc, #112]	; (80068dc <xTaskResumeFromISR+0xac>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d125      	bne.n	80068bc <xTaskResumeFromISR+0x8c>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006874:	4b1a      	ldr	r3, [pc, #104]	; (80068e0 <xTaskResumeFromISR+0xb0>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800687a:	429a      	cmp	r2, r3
 800687c:	d301      	bcc.n	8006882 <xTaskResumeFromISR+0x52>
					{
						xYieldRequired = pdTRUE;
 800687e:	2301      	movs	r3, #1
 8006880:	61fb      	str	r3, [r7, #28]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	3304      	adds	r3, #4
 8006886:	4618      	mov	r0, r3
 8006888:	f001 fee4 	bl	8008654 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006890:	2201      	movs	r2, #1
 8006892:	409a      	lsls	r2, r3
 8006894:	4b13      	ldr	r3, [pc, #76]	; (80068e4 <xTaskResumeFromISR+0xb4>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	431a      	orrs	r2, r3
 800689a:	4b12      	ldr	r3, [pc, #72]	; (80068e4 <xTaskResumeFromISR+0xb4>)
 800689c:	601a      	str	r2, [r3, #0]
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068a2:	4613      	mov	r3, r2
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	4413      	add	r3, r2
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	4a0f      	ldr	r2, [pc, #60]	; (80068e8 <xTaskResumeFromISR+0xb8>)
 80068ac:	441a      	add	r2, r3
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	3304      	adds	r3, #4
 80068b2:	4610      	mov	r0, r2
 80068b4:	4619      	mov	r1, r3
 80068b6:	f001 fe71 	bl	800859c <vListInsertEnd>
 80068ba:	e005      	b.n	80068c8 <xTaskResumeFromISR+0x98>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80068bc:	69bb      	ldr	r3, [r7, #24]
 80068be:	3318      	adds	r3, #24
 80068c0:	480a      	ldr	r0, [pc, #40]	; (80068ec <xTaskResumeFromISR+0xbc>)
 80068c2:	4619      	mov	r1, r3
 80068c4:	f001 fe6a 	bl	800859c <vListInsertEnd>
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	f383 8811 	msr	BASEPRI, r3
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 80068d2:	69fb      	ldr	r3, [r7, #28]
	}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3720      	adds	r7, #32
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	200001b4 	.word	0x200001b4
 80068e0:	200000bc 	.word	0x200000bc
 80068e4:	2000019c 	.word	0x2000019c
 80068e8:	200000c0 	.word	0x200000c0
 80068ec:	20000154 	.word	0x20000154

080068f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b086      	sub	sp, #24
 80068f4:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 80068f6:	2300      	movs	r3, #0
 80068f8:	9300      	str	r3, [sp, #0]
 80068fa:	2300      	movs	r3, #0
 80068fc:	9301      	str	r3, [sp, #4]
 80068fe:	2300      	movs	r3, #0
 8006900:	9302      	str	r3, [sp, #8]
 8006902:	2300      	movs	r3, #0
 8006904:	9303      	str	r3, [sp, #12]
 8006906:	4812      	ldr	r0, [pc, #72]	; (8006950 <vTaskStartScheduler+0x60>)
 8006908:	4912      	ldr	r1, [pc, #72]	; (8006954 <vTaskStartScheduler+0x64>)
 800690a:	2246      	movs	r2, #70	; 0x46
 800690c:	2300      	movs	r3, #0
 800690e:	f7ff fbfb 	bl	8006108 <xTaskGenericCreate>
 8006912:	6078      	str	r0, [r7, #4]
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2b01      	cmp	r3, #1
 8006918:	d102      	bne.n	8006920 <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
 800691a:	f7ff f927 	bl	8005b6c <xTimerCreateTimerTask>
 800691e:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2b01      	cmp	r3, #1
 8006924:	d110      	bne.n	8006948 <vTaskStartScheduler+0x58>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692a:	f383 8811 	msr	BASEPRI, r3
 800692e:	f3bf 8f6f 	isb	sy
 8006932:	f3bf 8f4f 	dsb	sy
 8006936:	603b      	str	r3, [r7, #0]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
 8006938:	4b07      	ldr	r3, [pc, #28]	; (8006958 <vTaskStartScheduler+0x68>)
 800693a:	2201      	movs	r2, #1
 800693c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800693e:	4b07      	ldr	r3, [pc, #28]	; (800695c <vTaskStartScheduler+0x6c>)
 8006940:	2200      	movs	r2, #0
 8006942:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006944:	f001 ff0e 	bl	8008764 <xPortStartScheduler>
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
 8006948:	3708      	adds	r7, #8
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	080070b9 	.word	0x080070b9
 8006954:	08008dc0 	.word	0x08008dc0
 8006958:	200001a0 	.word	0x200001a0
 800695c:	20000198 	.word	0x20000198

08006960 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800696a:	f383 8811 	msr	BASEPRI, r3
 800696e:	f3bf 8f6f 	isb	sy
 8006972:	f3bf 8f4f 	dsb	sy
 8006976:	607b      	str	r3, [r7, #4]
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
	xSchedulerRunning = pdFALSE;
 8006978:	4b03      	ldr	r3, [pc, #12]	; (8006988 <vTaskEndScheduler+0x28>)
 800697a:	2200      	movs	r2, #0
 800697c:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
 800697e:	f001 ff19 	bl	80087b4 <vPortEndScheduler>
}
 8006982:	3708      	adds	r7, #8
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}
 8006988:	200001a0 	.word	0x200001a0

0800698c <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800698c:	b480      	push	{r7}
 800698e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006990:	4b04      	ldr	r3, [pc, #16]	; (80069a4 <vTaskSuspendAll+0x18>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	1c5a      	adds	r2, r3, #1
 8006996:	4b03      	ldr	r3, [pc, #12]	; (80069a4 <vTaskSuspendAll+0x18>)
 8006998:	601a      	str	r2, [r3, #0]
}
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	200001b4 	.word	0x200001b4

080069a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
 80069ae:	2300      	movs	r3, #0
 80069b0:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80069b2:	f001 ff05 	bl	80087c0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80069b6:	4b36      	ldr	r3, [pc, #216]	; (8006a90 <xTaskResumeAll+0xe8>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	1e5a      	subs	r2, r3, #1
 80069bc:	4b34      	ldr	r3, [pc, #208]	; (8006a90 <xTaskResumeAll+0xe8>)
 80069be:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069c0:	4b33      	ldr	r3, [pc, #204]	; (8006a90 <xTaskResumeAll+0xe8>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d15b      	bne.n	8006a80 <xTaskResumeAll+0xd8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80069c8:	4b32      	ldr	r3, [pc, #200]	; (8006a94 <xTaskResumeAll+0xec>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d057      	beq.n	8006a80 <xTaskResumeAll+0xd8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069d0:	e02e      	b.n	8006a30 <xTaskResumeAll+0x88>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80069d2:	4b31      	ldr	r3, [pc, #196]	; (8006a98 <xTaskResumeAll+0xf0>)
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	3318      	adds	r3, #24
 80069de:	4618      	mov	r0, r3
 80069e0:	f001 fe38 	bl	8008654 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	3304      	adds	r3, #4
 80069e8:	4618      	mov	r0, r3
 80069ea:	f001 fe33 	bl	8008654 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f2:	2201      	movs	r2, #1
 80069f4:	409a      	lsls	r2, r3
 80069f6:	4b29      	ldr	r3, [pc, #164]	; (8006a9c <xTaskResumeAll+0xf4>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	431a      	orrs	r2, r3
 80069fc:	4b27      	ldr	r3, [pc, #156]	; (8006a9c <xTaskResumeAll+0xf4>)
 80069fe:	601a      	str	r2, [r3, #0]
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a04:	4613      	mov	r3, r2
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	4413      	add	r3, r2
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	4a24      	ldr	r2, [pc, #144]	; (8006aa0 <xTaskResumeAll+0xf8>)
 8006a0e:	441a      	add	r2, r3
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	3304      	adds	r3, #4
 8006a14:	4610      	mov	r0, r2
 8006a16:	4619      	mov	r1, r3
 8006a18:	f001 fdc0 	bl	800859c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a20:	4b20      	ldr	r3, [pc, #128]	; (8006aa4 <xTaskResumeAll+0xfc>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d302      	bcc.n	8006a30 <xTaskResumeAll+0x88>
					{
						xYieldPending = pdTRUE;
 8006a2a:	4b1f      	ldr	r3, [pc, #124]	; (8006aa8 <xTaskResumeAll+0x100>)
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a30:	4b19      	ldr	r3, [pc, #100]	; (8006a98 <xTaskResumeAll+0xf0>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d1cc      	bne.n	80069d2 <xTaskResumeAll+0x2a>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 8006a38:	4b1c      	ldr	r3, [pc, #112]	; (8006aac <xTaskResumeAll+0x104>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d011      	beq.n	8006a64 <xTaskResumeAll+0xbc>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 8006a40:	e00c      	b.n	8006a5c <xTaskResumeAll+0xb4>
					{
						if( xTaskIncrementTick() != pdFALSE )
 8006a42:	f000 f865 	bl	8006b10 <xTaskIncrementTick>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d002      	beq.n	8006a52 <xTaskResumeAll+0xaa>
						{
							xYieldPending = pdTRUE;
 8006a4c:	4b16      	ldr	r3, [pc, #88]	; (8006aa8 <xTaskResumeAll+0x100>)
 8006a4e:	2201      	movs	r2, #1
 8006a50:	601a      	str	r2, [r3, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
 8006a52:	4b16      	ldr	r3, [pc, #88]	; (8006aac <xTaskResumeAll+0x104>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	1e5a      	subs	r2, r3, #1
 8006a58:	4b14      	ldr	r3, [pc, #80]	; (8006aac <xTaskResumeAll+0x104>)
 8006a5a:	601a      	str	r2, [r3, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 8006a5c:	4b13      	ldr	r3, [pc, #76]	; (8006aac <xTaskResumeAll+0x104>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d1ee      	bne.n	8006a42 <xTaskResumeAll+0x9a>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
 8006a64:	4b10      	ldr	r3, [pc, #64]	; (8006aa8 <xTaskResumeAll+0x100>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d109      	bne.n	8006a80 <xTaskResumeAll+0xd8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	607b      	str	r3, [r7, #4]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006a70:	4b0f      	ldr	r3, [pc, #60]	; (8006ab0 <xTaskResumeAll+0x108>)
 8006a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a76:	601a      	str	r2, [r3, #0]
 8006a78:	f3bf 8f4f 	dsb	sy
 8006a7c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a80:	f001 feb6 	bl	80087f0 <vPortExitCritical>

	return xAlreadyYielded;
 8006a84:	687b      	ldr	r3, [r7, #4]
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3708      	adds	r7, #8
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	200001b4 	.word	0x200001b4
 8006a94:	20000194 	.word	0x20000194
 8006a98:	20000154 	.word	0x20000154
 8006a9c:	2000019c 	.word	0x2000019c
 8006aa0:	200000c0 	.word	0x200000c0
 8006aa4:	200000bc 	.word	0x200000bc
 8006aa8:	200001a8 	.word	0x200001a8
 8006aac:	200001a4 	.word	0x200001a4
 8006ab0:	e000ed04 	.word	0xe000ed04

08006ab4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006aba:	4b05      	ldr	r3, [pc, #20]	; (8006ad0 <xTaskGetTickCount+0x1c>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006ac0:	687b      	ldr	r3, [r7, #4]
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	370c      	adds	r7, #12
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	20000198 	.word	0x20000198

08006ad4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006ada:	2300      	movs	r3, #0
 8006adc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006ade:	4b05      	ldr	r3, [pc, #20]	; (8006af4 <xTaskGetTickCountFromISR+0x20>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006ae4:	683b      	ldr	r3, [r7, #0]
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	370c      	adds	r7, #12
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr
 8006af2:	bf00      	nop
 8006af4:	20000198 	.word	0x20000198

08006af8 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8006af8:	b480      	push	{r7}
 8006afa:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
 8006afc:	4b03      	ldr	r3, [pc, #12]	; (8006b0c <uxTaskGetNumberOfTasks+0x14>)
 8006afe:	681b      	ldr	r3, [r3, #0]
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	20000194 	.word	0x20000194

08006b10 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b086      	sub	sp, #24
 8006b14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006b16:	2300      	movs	r3, #0
 8006b18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b1a:	4b49      	ldr	r3, [pc, #292]	; (8006c40 <xTaskIncrementTick+0x130>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d17d      	bne.n	8006c1e <xTaskIncrementTick+0x10e>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 8006b22:	4b48      	ldr	r3, [pc, #288]	; (8006c44 <xTaskIncrementTick+0x134>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	1c5a      	adds	r2, r3, #1
 8006b28:	4b46      	ldr	r3, [pc, #280]	; (8006c44 <xTaskIncrementTick+0x134>)
 8006b2a:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8006b2c:	4b45      	ldr	r3, [pc, #276]	; (8006c44 <xTaskIncrementTick+0x134>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	613b      	str	r3, [r7, #16]

			if( xConstTickCount == ( TickType_t ) 0U )
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d110      	bne.n	8006b5a <xTaskIncrementTick+0x4a>
			{
				taskSWITCH_DELAYED_LISTS();
 8006b38:	4b43      	ldr	r3, [pc, #268]	; (8006c48 <xTaskIncrementTick+0x138>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	60fb      	str	r3, [r7, #12]
 8006b3e:	4b43      	ldr	r3, [pc, #268]	; (8006c4c <xTaskIncrementTick+0x13c>)
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	4b41      	ldr	r3, [pc, #260]	; (8006c48 <xTaskIncrementTick+0x138>)
 8006b44:	601a      	str	r2, [r3, #0]
 8006b46:	4b41      	ldr	r3, [pc, #260]	; (8006c4c <xTaskIncrementTick+0x13c>)
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	601a      	str	r2, [r3, #0]
 8006b4c:	4b40      	ldr	r3, [pc, #256]	; (8006c50 <xTaskIncrementTick+0x140>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	1c5a      	adds	r2, r3, #1
 8006b52:	4b3f      	ldr	r3, [pc, #252]	; (8006c50 <xTaskIncrementTick+0x140>)
 8006b54:	601a      	str	r2, [r3, #0]
 8006b56:	f000 fc11 	bl	800737c <prvResetNextTaskUnblockTime>

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 8006b5a:	4b3e      	ldr	r3, [pc, #248]	; (8006c54 <xTaskIncrementTick+0x144>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	693a      	ldr	r2, [r7, #16]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d34d      	bcc.n	8006c00 <xTaskIncrementTick+0xf0>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b64:	4b38      	ldr	r3, [pc, #224]	; (8006c48 <xTaskIncrementTick+0x138>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d101      	bne.n	8006b72 <xTaskIncrementTick+0x62>
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e000      	b.n	8006b74 <xTaskIncrementTick+0x64>
 8006b72:	2300      	movs	r3, #0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d004      	beq.n	8006b82 <xTaskIncrementTick+0x72>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 8006b78:	4b36      	ldr	r3, [pc, #216]	; (8006c54 <xTaskIncrementTick+0x144>)
 8006b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b7e:	601a      	str	r2, [r3, #0]
						break;
 8006b80:	e03e      	b.n	8006c00 <xTaskIncrementTick+0xf0>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006b82:	4b31      	ldr	r3, [pc, #196]	; (8006c48 <xTaskIncrementTick+0x138>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	60bb      	str	r3, [r7, #8]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	607b      	str	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
 8006b92:	693a      	ldr	r2, [r7, #16]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d203      	bcs.n	8006ba2 <xTaskIncrementTick+0x92>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
 8006b9a:	4b2e      	ldr	r3, [pc, #184]	; (8006c54 <xTaskIncrementTick+0x144>)
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	601a      	str	r2, [r3, #0]
							break;
 8006ba0:	e02e      	b.n	8006c00 <xTaskIncrementTick+0xf0>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	3304      	adds	r3, #4
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f001 fd54 	bl	8008654 <uxListRemove>

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d004      	beq.n	8006bbe <xTaskIncrementTick+0xae>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	3318      	adds	r3, #24
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f001 fd4b 	bl	8008654 <uxListRemove>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	409a      	lsls	r2, r3
 8006bc6:	4b24      	ldr	r3, [pc, #144]	; (8006c58 <xTaskIncrementTick+0x148>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	431a      	orrs	r2, r3
 8006bcc:	4b22      	ldr	r3, [pc, #136]	; (8006c58 <xTaskIncrementTick+0x148>)
 8006bce:	601a      	str	r2, [r3, #0]
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bd4:	4613      	mov	r3, r2
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	4413      	add	r3, r2
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	4a1f      	ldr	r2, [pc, #124]	; (8006c5c <xTaskIncrementTick+0x14c>)
 8006bde:	441a      	add	r2, r3
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	3304      	adds	r3, #4
 8006be4:	4610      	mov	r0, r2
 8006be6:	4619      	mov	r1, r3
 8006be8:	f001 fcd8 	bl	800859c <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bf0:	4b1b      	ldr	r3, [pc, #108]	; (8006c60 <xTaskIncrementTick+0x150>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d301      	bcc.n	8006bfe <xTaskIncrementTick+0xee>
							{
								xSwitchRequired = pdTRUE;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	617b      	str	r3, [r7, #20]
								mtCOVERAGE_TEST_MARKER();
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
 8006bfe:	e7b1      	b.n	8006b64 <xTaskIncrementTick+0x54>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006c00:	4b17      	ldr	r3, [pc, #92]	; (8006c60 <xTaskIncrementTick+0x150>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c06:	4915      	ldr	r1, [pc, #84]	; (8006c5c <xTaskIncrementTick+0x14c>)
 8006c08:	4613      	mov	r3, r2
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	4413      	add	r3, r2
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	440b      	add	r3, r1
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d907      	bls.n	8006c28 <xTaskIncrementTick+0x118>
			{
				xSwitchRequired = pdTRUE;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	617b      	str	r3, [r7, #20]
 8006c1c:	e004      	b.n	8006c28 <xTaskIncrementTick+0x118>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006c1e:	4b11      	ldr	r3, [pc, #68]	; (8006c64 <xTaskIncrementTick+0x154>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	1c5a      	adds	r2, r3, #1
 8006c24:	4b0f      	ldr	r3, [pc, #60]	; (8006c64 <xTaskIncrementTick+0x154>)
 8006c26:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006c28:	4b0f      	ldr	r3, [pc, #60]	; (8006c68 <xTaskIncrementTick+0x158>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d001      	beq.n	8006c34 <xTaskIncrementTick+0x124>
		{
			xSwitchRequired = pdTRUE;
 8006c30:	2301      	movs	r3, #1
 8006c32:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006c34:	697b      	ldr	r3, [r7, #20]
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3718      	adds	r7, #24
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	200001b4 	.word	0x200001b4
 8006c44:	20000198 	.word	0x20000198
 8006c48:	2000014c 	.word	0x2000014c
 8006c4c:	20000150 	.word	0x20000150
 8006c50:	200001ac 	.word	0x200001ac
 8006c54:	20000040 	.word	0x20000040
 8006c58:	2000019c 	.word	0x2000019c
 8006c5c:	200000c0 	.word	0x200000c0
 8006c60:	200000bc 	.word	0x200000bc
 8006c64:	200001a4 	.word	0x200001a4
 8006c68:	200001a8 	.word	0x200001a8

08006c6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c72:	4b2d      	ldr	r3, [pc, #180]	; (8006d28 <vTaskSwitchContext+0xbc>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d003      	beq.n	8006c82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006c7a:	4b2c      	ldr	r3, [pc, #176]	; (8006d2c <vTaskSwitchContext+0xc0>)
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	601a      	str	r2, [r3, #0]
 8006c80:	e04f      	b.n	8006d22 <vTaskSwitchContext+0xb6>
	}
	else
	{
		xYieldPending = pdFALSE;
 8006c82:	4b2a      	ldr	r3, [pc, #168]	; (8006d2c <vTaskSwitchContext+0xc0>)
 8006c84:	2200      	movs	r2, #0
 8006c86:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 8006c88:	4b29      	ldr	r3, [pc, #164]	; (8006d30 <vTaskSwitchContext+0xc4>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	4b28      	ldr	r3, [pc, #160]	; (8006d30 <vTaskSwitchContext+0xc4>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d808      	bhi.n	8006caa <vTaskSwitchContext+0x3e>
 8006c98:	4b25      	ldr	r3, [pc, #148]	; (8006d30 <vTaskSwitchContext+0xc4>)
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	4b24      	ldr	r3, [pc, #144]	; (8006d30 <vTaskSwitchContext+0xc4>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	3334      	adds	r3, #52	; 0x34
 8006ca2:	4610      	mov	r0, r2
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	f7fa fbd9 	bl	800145c <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 8006caa:	4b21      	ldr	r3, [pc, #132]	; (8006d30 <vTaskSwitchContext+0xc4>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	4920      	ldr	r1, [pc, #128]	; (8006d34 <vTaskSwitchContext+0xc8>)
 8006cb4:	2214      	movs	r2, #20
 8006cb6:	f002 f81f 	bl	8008cf8 <memcmp>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d008      	beq.n	8006cd2 <vTaskSwitchContext+0x66>
 8006cc0:	4b1b      	ldr	r3, [pc, #108]	; (8006d30 <vTaskSwitchContext+0xc4>)
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	4b1a      	ldr	r3, [pc, #104]	; (8006d30 <vTaskSwitchContext+0xc4>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	3334      	adds	r3, #52	; 0x34
 8006cca:	4610      	mov	r0, r2
 8006ccc:	4619      	mov	r1, r3
 8006cce:	f7fa fbc5 	bl	800145c <vApplicationStackOverflowHook>

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006cd2:	4b19      	ldr	r3, [pc, #100]	; (8006d38 <vTaskSwitchContext+0xcc>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	607b      	str	r3, [r7, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	fab3 f383 	clz	r3, r3
 8006cde:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 8006ce0:	78fb      	ldrb	r3, [r7, #3]
 8006ce2:	f1c3 031f 	rsb	r3, r3, #31
 8006ce6:	60fb      	str	r3, [r7, #12]
 8006ce8:	68fa      	ldr	r2, [r7, #12]
 8006cea:	4613      	mov	r3, r2
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	4413      	add	r3, r2
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	4a12      	ldr	r2, [pc, #72]	; (8006d3c <vTaskSwitchContext+0xd0>)
 8006cf4:	4413      	add	r3, r2
 8006cf6:	60bb      	str	r3, [r7, #8]
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	685a      	ldr	r2, [r3, #4]
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	605a      	str	r2, [r3, #4]
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	685a      	ldr	r2, [r3, #4]
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	3308      	adds	r3, #8
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d104      	bne.n	8006d18 <vTaskSwitchContext+0xac>
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	685a      	ldr	r2, [r3, #4]
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	605a      	str	r2, [r3, #4]
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	68da      	ldr	r2, [r3, #12]
 8006d1e:	4b04      	ldr	r3, [pc, #16]	; (8006d30 <vTaskSwitchContext+0xc4>)
 8006d20:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006d22:	3710      	adds	r7, #16
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	200001b4 	.word	0x200001b4
 8006d2c:	200001a8 	.word	0x200001a8
 8006d30:	200000bc 	.word	0x200000bc
 8006d34:	08008dc8 	.word	0x08008dc8
 8006d38:	2000019c 	.word	0x2000019c
 8006d3c:	200000c0 	.word	0x200000c0

08006d40 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d4a:	4b19      	ldr	r3, [pc, #100]	; (8006db0 <vTaskPlaceOnEventList+0x70>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	3318      	adds	r3, #24
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	4619      	mov	r1, r3
 8006d54:	f001 fc46 	bl	80085e4 <vListInsert>

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8006d58:	4b15      	ldr	r3, [pc, #84]	; (8006db0 <vTaskPlaceOnEventList+0x70>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	3304      	adds	r3, #4
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f001 fc78 	bl	8008654 <uxListRemove>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d10b      	bne.n	8006d82 <vTaskPlaceOnEventList+0x42>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006d6a:	4b11      	ldr	r3, [pc, #68]	; (8006db0 <vTaskPlaceOnEventList+0x70>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d70:	2201      	movs	r2, #1
 8006d72:	fa02 f303 	lsl.w	r3, r2, r3
 8006d76:	43da      	mvns	r2, r3
 8006d78:	4b0e      	ldr	r3, [pc, #56]	; (8006db4 <vTaskPlaceOnEventList+0x74>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	401a      	ands	r2, r3
 8006d7e:	4b0d      	ldr	r3, [pc, #52]	; (8006db4 <vTaskPlaceOnEventList+0x74>)
 8006d80:	601a      	str	r2, [r3, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d88:	d107      	bne.n	8006d9a <vTaskPlaceOnEventList+0x5a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8006d8a:	4b09      	ldr	r3, [pc, #36]	; (8006db0 <vTaskPlaceOnEventList+0x70>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	3304      	adds	r3, #4
 8006d90:	4809      	ldr	r0, [pc, #36]	; (8006db8 <vTaskPlaceOnEventList+0x78>)
 8006d92:	4619      	mov	r1, r3
 8006d94:	f001 fc02 	bl	800859c <vListInsertEnd>
 8006d98:	e007      	b.n	8006daa <vTaskPlaceOnEventList+0x6a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
 8006d9a:	4b08      	ldr	r3, [pc, #32]	; (8006dbc <vTaskPlaceOnEventList+0x7c>)
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	4413      	add	r3, r2
 8006da2:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f000 fa6b 	bl	8007280 <prvAddCurrentTaskToDelayedList>
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006daa:	3710      	adds	r7, #16
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	200000bc 	.word	0x200000bc
 8006db4:	2000019c 	.word	0x2000019c
 8006db8:	20000180 	.word	0x20000180
 8006dbc:	20000198 	.word	0x20000198

08006dc0 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b086      	sub	sp, #24
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	607a      	str	r2, [r7, #4]
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006dcc:	4b1c      	ldr	r3, [pc, #112]	; (8006e40 <vTaskPlaceOnUnorderedEventList+0x80>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	68ba      	ldr	r2, [r7, #8]
 8006dd2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006dd6:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006dd8:	4b19      	ldr	r3, [pc, #100]	; (8006e40 <vTaskPlaceOnUnorderedEventList+0x80>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	3318      	adds	r3, #24
 8006dde:	68f8      	ldr	r0, [r7, #12]
 8006de0:	4619      	mov	r1, r3
 8006de2:	f001 fbdb 	bl	800859c <vListInsertEnd>

	/* The task must be removed from the ready list before it is added to the
	blocked list.  Exclusive access can be assured to the ready list as the
	scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8006de6:	4b16      	ldr	r3, [pc, #88]	; (8006e40 <vTaskPlaceOnUnorderedEventList+0x80>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	3304      	adds	r3, #4
 8006dec:	4618      	mov	r0, r3
 8006dee:	f001 fc31 	bl	8008654 <uxListRemove>
 8006df2:	4603      	mov	r3, r0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d10b      	bne.n	8006e10 <vTaskPlaceOnUnorderedEventList+0x50>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006df8:	4b11      	ldr	r3, [pc, #68]	; (8006e40 <vTaskPlaceOnUnorderedEventList+0x80>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dfe:	2201      	movs	r2, #1
 8006e00:	fa02 f303 	lsl.w	r3, r2, r3
 8006e04:	43da      	mvns	r2, r3
 8006e06:	4b0f      	ldr	r3, [pc, #60]	; (8006e44 <vTaskPlaceOnUnorderedEventList+0x84>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	401a      	ands	r2, r3
 8006e0c:	4b0d      	ldr	r3, [pc, #52]	; (8006e44 <vTaskPlaceOnUnorderedEventList+0x84>)
 8006e0e:	601a      	str	r2, [r3, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e16:	d107      	bne.n	8006e28 <vTaskPlaceOnUnorderedEventList+0x68>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8006e18:	4b09      	ldr	r3, [pc, #36]	; (8006e40 <vTaskPlaceOnUnorderedEventList+0x80>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	3304      	adds	r3, #4
 8006e1e:	480a      	ldr	r0, [pc, #40]	; (8006e48 <vTaskPlaceOnUnorderedEventList+0x88>)
 8006e20:	4619      	mov	r1, r3
 8006e22:	f001 fbbb 	bl	800859c <vListInsertEnd>
 8006e26:	e007      	b.n	8006e38 <vTaskPlaceOnUnorderedEventList+0x78>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xTickCount + xTicksToWait;
 8006e28:	4b08      	ldr	r3, [pc, #32]	; (8006e4c <vTaskPlaceOnUnorderedEventList+0x8c>)
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	4413      	add	r3, r2
 8006e30:	617b      	str	r3, [r7, #20]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 8006e32:	6978      	ldr	r0, [r7, #20]
 8006e34:	f000 fa24 	bl	8007280 <prvAddCurrentTaskToDelayedList>
			will manage it correctly. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006e38:	3718      	adds	r7, #24
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	200000bc 	.word	0x200000bc
 8006e44:	2000019c 	.word	0x2000019c
 8006e48:	20000180 	.word	0x20000180
 8006e4c:	20000198 	.word	0x20000198

08006e50 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e5a:	4b13      	ldr	r3, [pc, #76]	; (8006ea8 <vTaskPlaceOnEventListRestricted+0x58>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	3318      	adds	r3, #24
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	4619      	mov	r1, r3
 8006e64:	f001 fb9a 	bl	800859c <vListInsertEnd>

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8006e68:	4b0f      	ldr	r3, [pc, #60]	; (8006ea8 <vTaskPlaceOnEventListRestricted+0x58>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	3304      	adds	r3, #4
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f001 fbf0 	bl	8008654 <uxListRemove>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d10b      	bne.n	8006e92 <vTaskPlaceOnEventListRestricted+0x42>
		{
			/* The current task must be in a ready list, so there is no need to
			check, and the port reset macro can be called directly. */
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006e7a:	4b0b      	ldr	r3, [pc, #44]	; (8006ea8 <vTaskPlaceOnEventListRestricted+0x58>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e80:	2201      	movs	r2, #1
 8006e82:	fa02 f303 	lsl.w	r3, r2, r3
 8006e86:	43da      	mvns	r2, r3
 8006e88:	4b08      	ldr	r3, [pc, #32]	; (8006eac <vTaskPlaceOnEventListRestricted+0x5c>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	401a      	ands	r2, r3
 8006e8e:	4b07      	ldr	r3, [pc, #28]	; (8006eac <vTaskPlaceOnEventListRestricted+0x5c>)
 8006e90:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
 8006e92:	4b07      	ldr	r3, [pc, #28]	; (8006eb0 <vTaskPlaceOnEventListRestricted+0x60>)
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	4413      	add	r3, r2
 8006e9a:	60fb      	str	r3, [r7, #12]

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	f000 f9ef 	bl	8007280 <prvAddCurrentTaskToDelayedList>
	}
 8006ea2:	3710      	adds	r7, #16
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	200000bc 	.word	0x200000bc
 8006eac:	2000019c 	.word	0x2000019c
 8006eb0:	20000198 	.word	0x20000198

08006eb4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	3318      	adds	r3, #24
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f001 fbc3 	bl	8008654 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ece:	4b1d      	ldr	r3, [pc, #116]	; (8006f44 <xTaskRemoveFromEventList+0x90>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d11c      	bne.n	8006f10 <xTaskRemoveFromEventList+0x5c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	3304      	adds	r3, #4
 8006eda:	4618      	mov	r0, r3
 8006edc:	f001 fbba 	bl	8008654 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	409a      	lsls	r2, r3
 8006ee8:	4b17      	ldr	r3, [pc, #92]	; (8006f48 <xTaskRemoveFromEventList+0x94>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	431a      	orrs	r2, r3
 8006eee:	4b16      	ldr	r3, [pc, #88]	; (8006f48 <xTaskRemoveFromEventList+0x94>)
 8006ef0:	601a      	str	r2, [r3, #0]
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ef6:	4613      	mov	r3, r2
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	4413      	add	r3, r2
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	4a13      	ldr	r2, [pc, #76]	; (8006f4c <xTaskRemoveFromEventList+0x98>)
 8006f00:	441a      	add	r2, r3
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	3304      	adds	r3, #4
 8006f06:	4610      	mov	r0, r2
 8006f08:	4619      	mov	r1, r3
 8006f0a:	f001 fb47 	bl	800859c <vListInsertEnd>
 8006f0e:	e005      	b.n	8006f1c <xTaskRemoveFromEventList+0x68>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	3318      	adds	r3, #24
 8006f14:	480e      	ldr	r0, [pc, #56]	; (8006f50 <xTaskRemoveFromEventList+0x9c>)
 8006f16:	4619      	mov	r1, r3
 8006f18:	f001 fb40 	bl	800859c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f20:	4b0c      	ldr	r3, [pc, #48]	; (8006f54 <xTaskRemoveFromEventList+0xa0>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d905      	bls.n	8006f36 <xTaskRemoveFromEventList+0x82>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006f2e:	4b0a      	ldr	r3, [pc, #40]	; (8006f58 <xTaskRemoveFromEventList+0xa4>)
 8006f30:	2201      	movs	r2, #1
 8006f32:	601a      	str	r2, [r3, #0]
 8006f34:	e001      	b.n	8006f3a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		xReturn = pdFALSE;
 8006f36:	2300      	movs	r3, #0
 8006f38:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3710      	adds	r7, #16
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}
 8006f44:	200001b4 	.word	0x200001b4
 8006f48:	2000019c 	.word	0x2000019c
 8006f4c:	200000c0 	.word	0x200000c0
 8006f50:	20000154 	.word	0x20000154
 8006f54:	200000bc 	.word	0x200000bc
 8006f58:	200001a8 	.word	0x200001a8

08006f5c <xTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f001 fb6c 	bl	8008654 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	3304      	adds	r3, #4
 8006f80:	4618      	mov	r0, r3
 8006f82:	f001 fb67 	bl	8008654 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	409a      	lsls	r2, r3
 8006f8e:	4b13      	ldr	r3, [pc, #76]	; (8006fdc <xTaskRemoveFromUnorderedEventList+0x80>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	431a      	orrs	r2, r3
 8006f94:	4b11      	ldr	r3, [pc, #68]	; (8006fdc <xTaskRemoveFromUnorderedEventList+0x80>)
 8006f96:	601a      	str	r2, [r3, #0]
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f9c:	4613      	mov	r3, r2
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	4413      	add	r3, r2
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	4a0e      	ldr	r2, [pc, #56]	; (8006fe0 <xTaskRemoveFromUnorderedEventList+0x84>)
 8006fa6:	441a      	add	r2, r3
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	3304      	adds	r3, #4
 8006fac:	4610      	mov	r0, r2
 8006fae:	4619      	mov	r1, r3
 8006fb0:	f001 faf4 	bl	800859c <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb8:	4b0a      	ldr	r3, [pc, #40]	; (8006fe4 <xTaskRemoveFromUnorderedEventList+0x88>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d905      	bls.n	8006fce <xTaskRemoveFromUnorderedEventList+0x72>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006fc6:	4b08      	ldr	r3, [pc, #32]	; (8006fe8 <xTaskRemoveFromUnorderedEventList+0x8c>)
 8006fc8:	2201      	movs	r2, #1
 8006fca:	601a      	str	r2, [r3, #0]
 8006fcc:	e001      	b.n	8006fd2 <xTaskRemoveFromUnorderedEventList+0x76>
	}
	else
	{
		xReturn = pdFALSE;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3710      	adds	r7, #16
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	2000019c 	.word	0x2000019c
 8006fe0:	200000c0 	.word	0x200000c0
 8006fe4:	200000bc 	.word	0x200000bc
 8006fe8:	200001a8 	.word	0x200001a8

08006fec <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006ff4:	4b06      	ldr	r3, [pc, #24]	; (8007010 <vTaskSetTimeOutState+0x24>)
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006ffc:	4b05      	ldr	r3, [pc, #20]	; (8007014 <vTaskSetTimeOutState+0x28>)
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	605a      	str	r2, [r3, #4]
}
 8007004:	370c      	adds	r7, #12
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop
 8007010:	200001ac 	.word	0x200001ac
 8007014:	20000198 	.word	0x20000198

08007018 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 8007022:	f001 fbcd 	bl	80087c0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007026:	4b1c      	ldr	r3, [pc, #112]	; (8007098 <xTaskCheckForTimeOut+0x80>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	60bb      	str	r3, [r7, #8]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007034:	d102      	bne.n	800703c <xTaskCheckForTimeOut+0x24>
			{
				xReturn = pdFALSE;
 8007036:	2300      	movs	r3, #0
 8007038:	60fb      	str	r3, [r7, #12]
 800703a:	e026      	b.n	800708a <xTaskCheckForTimeOut+0x72>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	4b16      	ldr	r3, [pc, #88]	; (800709c <xTaskCheckForTimeOut+0x84>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	429a      	cmp	r2, r3
 8007046:	d007      	beq.n	8007058 <xTaskCheckForTimeOut+0x40>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	685a      	ldr	r2, [r3, #4]
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	429a      	cmp	r2, r3
 8007050:	d802      	bhi.n	8007058 <xTaskCheckForTimeOut+0x40>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 8007052:	2301      	movs	r3, #1
 8007054:	60fb      	str	r3, [r7, #12]
 8007056:	e018      	b.n	800708a <xTaskCheckForTimeOut+0x72>
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	68ba      	ldr	r2, [r7, #8]
 800705e:	1ad2      	subs	r2, r2, r3
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	429a      	cmp	r2, r3
 8007066:	d20e      	bcs.n	8007086 <xTaskCheckForTimeOut+0x6e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6859      	ldr	r1, [r3, #4]
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	1acb      	subs	r3, r1, r3
 8007074:	441a      	add	r2, r3
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f7ff ffb6 	bl	8006fec <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8007080:	2300      	movs	r3, #0
 8007082:	60fb      	str	r3, [r7, #12]
 8007084:	e001      	b.n	800708a <xTaskCheckForTimeOut+0x72>
		}
		else
		{
			xReturn = pdTRUE;
 8007086:	2301      	movs	r3, #1
 8007088:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800708a:	f001 fbb1 	bl	80087f0 <vPortExitCritical>

	return xReturn;
 800708e:	68fb      	ldr	r3, [r7, #12]
}
 8007090:	4618      	mov	r0, r3
 8007092:	3710      	adds	r7, #16
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	20000198 	.word	0x20000198
 800709c:	200001ac 	.word	0x200001ac

080070a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80070a0:	b480      	push	{r7}
 80070a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80070a4:	4b03      	ldr	r3, [pc, #12]	; (80070b4 <vTaskMissedYield+0x14>)
 80070a6:	2201      	movs	r2, #1
 80070a8:	601a      	str	r2, [r3, #0]
}
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	200001a8 	.word	0x200001a8

080070b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
 80070c0:	f000 f8a4 	bl	800720c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80070c4:	4b07      	ldr	r3, [pc, #28]	; (80070e4 <prvIdleTask+0x2c>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d907      	bls.n	80070dc <prvIdleTask+0x24>
			{
				taskYIELD();
 80070cc:	4b06      	ldr	r3, [pc, #24]	; (80070e8 <prvIdleTask+0x30>)
 80070ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070d2:	601a      	str	r2, [r3, #0]
 80070d4:	f3bf 8f4f 	dsb	sy
 80070d8:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80070dc:	f7fa f9c4 	bl	8001468 <vApplicationIdleHook>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 80070e0:	e7ee      	b.n	80070c0 <prvIdleTask+0x8>
 80070e2:	bf00      	nop
 80070e4:	200000c0 	.word	0x200000c0
 80070e8:	e000ed04 	.word	0xe000ed04

080070ec <prvInitialiseTCBVariables>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b086      	sub	sp, #24
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	60b9      	str	r1, [r7, #8]
 80070f6:	607a      	str	r2, [r7, #4]
 80070f8:	603b      	str	r3, [r7, #0]
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80070fa:	2300      	movs	r3, #0
 80070fc:	617b      	str	r3, [r7, #20]
 80070fe:	e012      	b.n	8007126 <prvInitialiseTCBVariables+0x3a>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8007100:	68ba      	ldr	r2, [r7, #8]
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	4413      	add	r3, r2
 8007106:	781a      	ldrb	r2, [r3, #0]
 8007108:	68f9      	ldr	r1, [r7, #12]
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	440b      	add	r3, r1
 800710e:	3330      	adds	r3, #48	; 0x30
 8007110:	711a      	strb	r2, [r3, #4]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007112:	68ba      	ldr	r2, [r7, #8]
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	4413      	add	r3, r2
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d100      	bne.n	8007120 <prvInitialiseTCBVariables+0x34>
		{
			break;
 800711e:	e005      	b.n	800712c <prvInitialiseTCBVariables+0x40>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	3301      	adds	r3, #1
 8007124:	617b      	str	r3, [r7, #20]
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	2b09      	cmp	r3, #9
 800712a:	d9e9      	bls.n	8007100 <prvInitialiseTCBVariables+0x14>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2200      	movs	r2, #0
 8007130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2b04      	cmp	r3, #4
 8007138:	d901      	bls.n	800713e <prvInitialiseTCBVariables+0x52>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800713a:	2304      	movs	r3, #4
 800713c:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	641a      	str	r2, [r3, #64]	; 0x40
		pxTCB->uxMutexesHeld = 0;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2200      	movs	r2, #0
 800714e:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	3304      	adds	r3, #4
 8007154:	4618      	mov	r0, r3
 8007156:	f001 fa15 	bl	8008584 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	3318      	adds	r3, #24
 800715e:	4618      	mov	r0, r3
 8007160:	f001 fa10 	bl	8008584 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	68fa      	ldr	r2, [r7, #12]
 8007168:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f1c3 0205 	rsb	r2, r3, #5
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	68fa      	ldr	r2, [r7, #12]
 8007178:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portUSING_MPU_WRAPPERS */

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2200      	movs	r2, #0
 800717e:	649a      	str	r2, [r3, #72]	; 0x48
		pxTCB->eNotifyState = eNotWaitingNotification;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2200      	movs	r2, #0
 8007184:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
 8007188:	3718      	adds	r7, #24
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop

08007190 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007196:	2300      	movs	r3, #0
 8007198:	607b      	str	r3, [r7, #4]
 800719a:	e00c      	b.n	80071b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	4613      	mov	r3, r2
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	4413      	add	r3, r2
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	4a11      	ldr	r2, [pc, #68]	; (80071ec <prvInitialiseTaskLists+0x5c>)
 80071a8:	4413      	add	r3, r2
 80071aa:	4618      	mov	r0, r3
 80071ac:	f001 f9ca 	bl	8008544 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	3301      	adds	r3, #1
 80071b4:	607b      	str	r3, [r7, #4]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2b04      	cmp	r3, #4
 80071ba:	d9ef      	bls.n	800719c <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 80071bc:	480c      	ldr	r0, [pc, #48]	; (80071f0 <prvInitialiseTaskLists+0x60>)
 80071be:	f001 f9c1 	bl	8008544 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80071c2:	480c      	ldr	r0, [pc, #48]	; (80071f4 <prvInitialiseTaskLists+0x64>)
 80071c4:	f001 f9be 	bl	8008544 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80071c8:	480b      	ldr	r0, [pc, #44]	; (80071f8 <prvInitialiseTaskLists+0x68>)
 80071ca:	f001 f9bb 	bl	8008544 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80071ce:	480b      	ldr	r0, [pc, #44]	; (80071fc <prvInitialiseTaskLists+0x6c>)
 80071d0:	f001 f9b8 	bl	8008544 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80071d4:	480a      	ldr	r0, [pc, #40]	; (8007200 <prvInitialiseTaskLists+0x70>)
 80071d6:	f001 f9b5 	bl	8008544 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80071da:	4b0a      	ldr	r3, [pc, #40]	; (8007204 <prvInitialiseTaskLists+0x74>)
 80071dc:	4a04      	ldr	r2, [pc, #16]	; (80071f0 <prvInitialiseTaskLists+0x60>)
 80071de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80071e0:	4b09      	ldr	r3, [pc, #36]	; (8007208 <prvInitialiseTaskLists+0x78>)
 80071e2:	4a04      	ldr	r2, [pc, #16]	; (80071f4 <prvInitialiseTaskLists+0x64>)
 80071e4:	601a      	str	r2, [r3, #0]
}
 80071e6:	3708      	adds	r7, #8
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}
 80071ec:	200000c0 	.word	0x200000c0
 80071f0:	20000124 	.word	0x20000124
 80071f4:	20000138 	.word	0x20000138
 80071f8:	20000154 	.word	0x20000154
 80071fc:	20000168 	.word	0x20000168
 8007200:	20000180 	.word	0x20000180
 8007204:	2000014c 	.word	0x2000014c
 8007208:	20000150 	.word	0x20000150

0800720c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b082      	sub	sp, #8
 8007210:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 8007212:	e028      	b.n	8007266 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8007214:	f7ff fbba 	bl	800698c <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8007218:	4b16      	ldr	r3, [pc, #88]	; (8007274 <prvCheckTasksWaitingTermination+0x68>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	bf14      	ite	ne
 8007220:	2300      	movne	r3, #0
 8007222:	2301      	moveq	r3, #1
 8007224:	b2db      	uxtb	r3, r3
 8007226:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8007228:	f7ff fbbe 	bl	80069a8 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d119      	bne.n	8007266 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8007232:	f001 fac5 	bl	80087c0 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007236:	4b0f      	ldr	r3, [pc, #60]	; (8007274 <prvCheckTasksWaitingTermination+0x68>)
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	3304      	adds	r3, #4
 8007242:	4618      	mov	r0, r3
 8007244:	f001 fa06 	bl	8008654 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8007248:	4b0b      	ldr	r3, [pc, #44]	; (8007278 <prvCheckTasksWaitingTermination+0x6c>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	1e5a      	subs	r2, r3, #1
 800724e:	4b0a      	ldr	r3, [pc, #40]	; (8007278 <prvCheckTasksWaitingTermination+0x6c>)
 8007250:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
 8007252:	4b0a      	ldr	r3, [pc, #40]	; (800727c <prvCheckTasksWaitingTermination+0x70>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	1e5a      	subs	r2, r3, #1
 8007258:	4b08      	ldr	r3, [pc, #32]	; (800727c <prvCheckTasksWaitingTermination+0x70>)
 800725a:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
 800725c:	f001 fac8 	bl	80087f0 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8007260:	6838      	ldr	r0, [r7, #0]
 8007262:	f000 f87b 	bl	800735c <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 8007266:	4b05      	ldr	r3, [pc, #20]	; (800727c <prvCheckTasksWaitingTermination+0x70>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d1d2      	bne.n	8007214 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
 800726e:	3708      	adds	r7, #8
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}
 8007274:	20000168 	.word	0x20000168
 8007278:	20000194 	.word	0x20000194
 800727c:	2000017c 	.word	0x2000017c

08007280 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8007288:	4b13      	ldr	r3, [pc, #76]	; (80072d8 <prvAddCurrentTaskToDelayedList+0x58>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
 8007290:	4b12      	ldr	r3, [pc, #72]	; (80072dc <prvAddCurrentTaskToDelayedList+0x5c>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	429a      	cmp	r2, r3
 8007298:	d209      	bcs.n	80072ae <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800729a:	4b11      	ldr	r3, [pc, #68]	; (80072e0 <prvAddCurrentTaskToDelayedList+0x60>)
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	4b0e      	ldr	r3, [pc, #56]	; (80072d8 <prvAddCurrentTaskToDelayedList+0x58>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	3304      	adds	r3, #4
 80072a4:	4610      	mov	r0, r2
 80072a6:	4619      	mov	r1, r3
 80072a8:	f001 f99c 	bl	80085e4 <vListInsert>
 80072ac:	e010      	b.n	80072d0 <prvAddCurrentTaskToDelayedList+0x50>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80072ae:	4b0d      	ldr	r3, [pc, #52]	; (80072e4 <prvAddCurrentTaskToDelayedList+0x64>)
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	4b09      	ldr	r3, [pc, #36]	; (80072d8 <prvAddCurrentTaskToDelayedList+0x58>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	3304      	adds	r3, #4
 80072b8:	4610      	mov	r0, r2
 80072ba:	4619      	mov	r1, r3
 80072bc:	f001 f992 	bl	80085e4 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 80072c0:	4b09      	ldr	r3, [pc, #36]	; (80072e8 <prvAddCurrentTaskToDelayedList+0x68>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d202      	bcs.n	80072d0 <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
 80072ca:	4b07      	ldr	r3, [pc, #28]	; (80072e8 <prvAddCurrentTaskToDelayedList+0x68>)
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80072d0:	3708      	adds	r7, #8
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop
 80072d8:	200000bc 	.word	0x200000bc
 80072dc:	20000198 	.word	0x20000198
 80072e0:	20000150 	.word	0x20000150
 80072e4:	2000014c 	.word	0x2000014c
 80072e8:	20000040 	.word	0x20000040

080072ec <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	4603      	mov	r3, r0
 80072f4:	6039      	str	r1, [r7, #0]
 80072f6:	80fb      	strh	r3, [r7, #6]
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d106      	bne.n	800730c <prvAllocateTCBAndStack+0x20>
 80072fe:	88fb      	ldrh	r3, [r7, #6]
 8007300:	009b      	lsls	r3, r3, #2
 8007302:	4618      	mov	r0, r3
 8007304:	f001 fafc 	bl	8008900 <pvPortMalloc>
 8007308:	4603      	mov	r3, r0
 800730a:	e000      	b.n	800730e <prvAllocateTCBAndStack+0x22>
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	60bb      	str	r3, [r7, #8]

		if( pxStack != NULL )
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d00e      	beq.n	8007334 <prvAllocateTCBAndStack+0x48>
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8007316:	2050      	movs	r0, #80	; 0x50
 8007318:	f001 faf2 	bl	8008900 <pvPortMalloc>
 800731c:	60f8      	str	r0, [r7, #12]

			if( pxNewTCB != NULL )
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d003      	beq.n	800732c <prvAllocateTCBAndStack+0x40>
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	68ba      	ldr	r2, [r7, #8]
 8007328:	631a      	str	r2, [r3, #48]	; 0x30
 800732a:	e005      	b.n	8007338 <prvAllocateTCBAndStack+0x4c>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
 800732c:	68b8      	ldr	r0, [r7, #8]
 800732e:	f001 fb7f 	bl	8008a30 <vPortFree>
 8007332:	e001      	b.n	8007338 <prvAllocateTCBAndStack+0x4c>
			}
		}
		else
		{
			pxNewTCB = NULL;
 8007334:	2300      	movs	r3, #0
 8007336:	60fb      	str	r3, [r7, #12]
		}
	}
	#endif /* portSTACK_GROWTH */

	if( pxNewTCB != NULL )
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d008      	beq.n	8007350 <prvAllocateTCBAndStack+0x64>
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007342:	88fb      	ldrh	r3, [r7, #6]
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	4610      	mov	r0, r2
 8007348:	21a5      	movs	r1, #165	; 0xa5
 800734a:	461a      	mov	r2, r3
 800734c:	f001 fcec 	bl	8008d28 <memset>
		}
		#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
	}

	return pxNewTCB;
 8007350:	68fb      	ldr	r3, [r7, #12]
}
 8007352:	4618      	mov	r0, r3
 8007354:	3710      	adds	r7, #16
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
 800735a:	bf00      	nop

0800735c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007368:	4618      	mov	r0, r3
 800736a:	f001 fb61 	bl	8008a30 <vPortFree>
		}
		#endif

		vPortFree( pxTCB );
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f001 fb5e 	bl	8008a30 <vPortFree>
	}
 8007374:	3708      	adds	r7, #8
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop

0800737c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007382:	4b0e      	ldr	r3, [pc, #56]	; (80073bc <prvResetNextTaskUnblockTime+0x40>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d101      	bne.n	8007390 <prvResetNextTaskUnblockTime+0x14>
 800738c:	2301      	movs	r3, #1
 800738e:	e000      	b.n	8007392 <prvResetNextTaskUnblockTime+0x16>
 8007390:	2300      	movs	r3, #0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d004      	beq.n	80073a0 <prvResetNextTaskUnblockTime+0x24>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007396:	4b0a      	ldr	r3, [pc, #40]	; (80073c0 <prvResetNextTaskUnblockTime+0x44>)
 8007398:	f04f 32ff 	mov.w	r2, #4294967295
 800739c:	601a      	str	r2, [r3, #0]
 800739e:	e008      	b.n	80073b2 <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80073a0:	4b06      	ldr	r3, [pc, #24]	; (80073bc <prvResetNextTaskUnblockTime+0x40>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	685a      	ldr	r2, [r3, #4]
 80073ae:	4b04      	ldr	r3, [pc, #16]	; (80073c0 <prvResetNextTaskUnblockTime+0x44>)
 80073b0:	601a      	str	r2, [r3, #0]
	}
}
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr
 80073bc:	2000014c 	.word	0x2000014c
 80073c0:	20000040 	.word	0x20000040

080073c4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80073ca:	4b05      	ldr	r3, [pc, #20]	; (80073e0 <xTaskGetCurrentTaskHandle+0x1c>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	607b      	str	r3, [r7, #4]

		return xReturn;
 80073d0:	687b      	ldr	r3, [r7, #4]
	}
 80073d2:	4618      	mov	r0, r3
 80073d4:	370c      	adds	r7, #12
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr
 80073de:	bf00      	nop
 80073e0:	200000bc 	.word	0x200000bc

080073e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80073ea:	4b0b      	ldr	r3, [pc, #44]	; (8007418 <xTaskGetSchedulerState+0x34>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d102      	bne.n	80073f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80073f2:	2301      	movs	r3, #1
 80073f4:	607b      	str	r3, [r7, #4]
 80073f6:	e008      	b.n	800740a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073f8:	4b08      	ldr	r3, [pc, #32]	; (800741c <xTaskGetSchedulerState+0x38>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d102      	bne.n	8007406 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007400:	2302      	movs	r3, #2
 8007402:	607b      	str	r3, [r7, #4]
 8007404:	e001      	b.n	800740a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007406:	2300      	movs	r3, #0
 8007408:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800740a:	687b      	ldr	r3, [r7, #4]
	}
 800740c:	4618      	mov	r0, r3
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr
 8007418:	200001a0 	.word	0x200001a0
 800741c:	200001b4 	.word	0x200001b4

08007420 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d062      	beq.n	80074f8 <vTaskPriorityInherit+0xd8>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007436:	4b32      	ldr	r3, [pc, #200]	; (8007500 <vTaskPriorityInherit+0xe0>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800743c:	429a      	cmp	r2, r3
 800743e:	d25b      	bcs.n	80074f8 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	699b      	ldr	r3, [r3, #24]
 8007444:	2b00      	cmp	r3, #0
 8007446:	db06      	blt.n	8007456 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007448:	4b2d      	ldr	r3, [pc, #180]	; (8007500 <vTaskPriorityInherit+0xe0>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800744e:	f1c3 0205 	rsb	r2, r3, #5
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	6959      	ldr	r1, [r3, #20]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800745e:	4613      	mov	r3, r2
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	4413      	add	r3, r2
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	4a27      	ldr	r2, [pc, #156]	; (8007504 <vTaskPriorityInherit+0xe4>)
 8007468:	4413      	add	r3, r2
 800746a:	4299      	cmp	r1, r3
 800746c:	d101      	bne.n	8007472 <vTaskPriorityInherit+0x52>
 800746e:	2301      	movs	r3, #1
 8007470:	e000      	b.n	8007474 <vTaskPriorityInherit+0x54>
 8007472:	2300      	movs	r3, #0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d03a      	beq.n	80074ee <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	3304      	adds	r3, #4
 800747c:	4618      	mov	r0, r3
 800747e:	f001 f8e9 	bl	8008654 <uxListRemove>
 8007482:	4603      	mov	r3, r0
 8007484:	2b00      	cmp	r3, #0
 8007486:	d115      	bne.n	80074b4 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800748c:	491d      	ldr	r1, [pc, #116]	; (8007504 <vTaskPriorityInherit+0xe4>)
 800748e:	4613      	mov	r3, r2
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	4413      	add	r3, r2
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	440b      	add	r3, r1
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d10a      	bne.n	80074b4 <vTaskPriorityInherit+0x94>
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a2:	2201      	movs	r2, #1
 80074a4:	fa02 f303 	lsl.w	r3, r2, r3
 80074a8:	43da      	mvns	r2, r3
 80074aa:	4b17      	ldr	r3, [pc, #92]	; (8007508 <vTaskPriorityInherit+0xe8>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	401a      	ands	r2, r3
 80074b0:	4b15      	ldr	r3, [pc, #84]	; (8007508 <vTaskPriorityInherit+0xe8>)
 80074b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80074b4:	4b12      	ldr	r3, [pc, #72]	; (8007500 <vTaskPriorityInherit+0xe0>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c2:	2201      	movs	r2, #1
 80074c4:	409a      	lsls	r2, r3
 80074c6:	4b10      	ldr	r3, [pc, #64]	; (8007508 <vTaskPriorityInherit+0xe8>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	431a      	orrs	r2, r3
 80074cc:	4b0e      	ldr	r3, [pc, #56]	; (8007508 <vTaskPriorityInherit+0xe8>)
 80074ce:	601a      	str	r2, [r3, #0]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074d4:	4613      	mov	r3, r2
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	4413      	add	r3, r2
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	4a09      	ldr	r2, [pc, #36]	; (8007504 <vTaskPriorityInherit+0xe4>)
 80074de:	441a      	add	r2, r3
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	3304      	adds	r3, #4
 80074e4:	4610      	mov	r0, r2
 80074e6:	4619      	mov	r1, r3
 80074e8:	f001 f858 	bl	800859c <vListInsertEnd>
 80074ec:	e004      	b.n	80074f8 <vTaskPriorityInherit+0xd8>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80074ee:	4b04      	ldr	r3, [pc, #16]	; (8007500 <vTaskPriorityInherit+0xe0>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80074f8:	3710      	adds	r7, #16
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	200000bc 	.word	0x200000bc
 8007504:	200000c0 	.word	0x200000c0
 8007508:	2000019c 	.word	0x2000019c

0800750c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007518:	2300      	movs	r3, #0
 800751a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d04f      	beq.n	80075c2 <xTaskPriorityDisinherit+0xb6>
		{
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007526:	1e5a      	subs	r2, r3, #1
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	645a      	str	r2, [r3, #68]	; 0x44

			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007534:	429a      	cmp	r2, r3
 8007536:	d044      	beq.n	80075c2 <xTaskPriorityDisinherit+0xb6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800753c:	2b00      	cmp	r3, #0
 800753e:	d140      	bne.n	80075c2 <xTaskPriorityDisinherit+0xb6>
					/* A task can only have an inhertied priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	3304      	adds	r3, #4
 8007544:	4618      	mov	r0, r3
 8007546:	f001 f885 	bl	8008654 <uxListRemove>
 800754a:	4603      	mov	r3, r0
 800754c:	2b00      	cmp	r3, #0
 800754e:	d115      	bne.n	800757c <xTaskPriorityDisinherit+0x70>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007554:	491d      	ldr	r1, [pc, #116]	; (80075cc <xTaskPriorityDisinherit+0xc0>)
 8007556:	4613      	mov	r3, r2
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	4413      	add	r3, r2
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	440b      	add	r3, r1
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d10a      	bne.n	800757c <xTaskPriorityDisinherit+0x70>
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800756a:	2201      	movs	r2, #1
 800756c:	fa02 f303 	lsl.w	r3, r2, r3
 8007570:	43da      	mvns	r2, r3
 8007572:	4b17      	ldr	r3, [pc, #92]	; (80075d0 <xTaskPriorityDisinherit+0xc4>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	401a      	ands	r2, r3
 8007578:	4b15      	ldr	r3, [pc, #84]	; (80075d0 <xTaskPriorityDisinherit+0xc4>)
 800757a:	601a      	str	r2, [r3, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007588:	f1c3 0205 	rsb	r2, r3, #5
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007594:	2201      	movs	r2, #1
 8007596:	409a      	lsls	r2, r3
 8007598:	4b0d      	ldr	r3, [pc, #52]	; (80075d0 <xTaskPriorityDisinherit+0xc4>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	431a      	orrs	r2, r3
 800759e:	4b0c      	ldr	r3, [pc, #48]	; (80075d0 <xTaskPriorityDisinherit+0xc4>)
 80075a0:	601a      	str	r2, [r3, #0]
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075a6:	4613      	mov	r3, r2
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	4413      	add	r3, r2
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	4a07      	ldr	r2, [pc, #28]	; (80075cc <xTaskPriorityDisinherit+0xc0>)
 80075b0:	441a      	add	r2, r3
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	3304      	adds	r3, #4
 80075b6:	4610      	mov	r0, r2
 80075b8:	4619      	mov	r1, r3
 80075ba:	f000 ffef 	bl	800859c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80075be:	2301      	movs	r3, #1
 80075c0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80075c2:	68fb      	ldr	r3, [r7, #12]
	}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	200000c0 	.word	0x200000c0
 80075d0:	2000019c 	.word	0x2000019c

080075d4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80075d4:	b480      	push	{r7}
 80075d6:	b083      	sub	sp, #12
 80075d8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80075da:	4b09      	ldr	r3, [pc, #36]	; (8007600 <uxTaskResetEventItemValue+0x2c>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	699b      	ldr	r3, [r3, #24]
 80075e0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075e2:	4b07      	ldr	r3, [pc, #28]	; (8007600 <uxTaskResetEventItemValue+0x2c>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a06      	ldr	r2, [pc, #24]	; (8007600 <uxTaskResetEventItemValue+0x2c>)
 80075e8:	6812      	ldr	r2, [r2, #0]
 80075ea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80075ec:	f1c2 0205 	rsb	r2, r2, #5
 80075f0:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80075f2:	687b      	ldr	r3, [r7, #4]
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	370c      	adds	r7, #12
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr
 8007600:	200000bc 	.word	0x200000bc

08007604 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8007604:	b480      	push	{r7}
 8007606:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007608:	4b07      	ldr	r3, [pc, #28]	; (8007628 <pvTaskIncrementMutexHeldCount+0x24>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d004      	beq.n	800761a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007610:	4b05      	ldr	r3, [pc, #20]	; (8007628 <pvTaskIncrementMutexHeldCount+0x24>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007616:	3201      	adds	r2, #1
 8007618:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
 800761a:	4b03      	ldr	r3, [pc, #12]	; (8007628 <pvTaskIncrementMutexHeldCount+0x24>)
 800761c:	681b      	ldr	r3, [r3, #0]
	}
 800761e:	4618      	mov	r0, r3
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr
 8007628:	200000bc 	.word	0x200000bc

0800762c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8007636:	f001 f8c3 	bl	80087c0 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800763a:	4b31      	ldr	r3, [pc, #196]	; (8007700 <ulTaskNotifyTake+0xd4>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007640:	2b00      	cmp	r3, #0
 8007642:	d138      	bne.n	80076b6 <ulTaskNotifyTake+0x8a>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 8007644:	4b2e      	ldr	r3, [pc, #184]	; (8007700 <ulTaskNotifyTake+0xd4>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	2201      	movs	r2, #1
 800764a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

				if( xTicksToWait > ( TickType_t ) 0 )
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d030      	beq.n	80076b6 <ulTaskNotifyTake+0x8a>
				{
					/* The task is going to block.  First it must be removed
					from the ready list. */
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8007654:	4b2a      	ldr	r3, [pc, #168]	; (8007700 <ulTaskNotifyTake+0xd4>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	3304      	adds	r3, #4
 800765a:	4618      	mov	r0, r3
 800765c:	f000 fffa 	bl	8008654 <uxListRemove>
 8007660:	4603      	mov	r3, r0
 8007662:	2b00      	cmp	r3, #0
 8007664:	d10b      	bne.n	800767e <ulTaskNotifyTake+0x52>
					{
						/* The current task must be in a ready list, so there is
						no need to check, and the port reset macro can be called
						directly. */
						portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007666:	4b26      	ldr	r3, [pc, #152]	; (8007700 <ulTaskNotifyTake+0xd4>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800766c:	2201      	movs	r2, #1
 800766e:	fa02 f303 	lsl.w	r3, r2, r3
 8007672:	43da      	mvns	r2, r3
 8007674:	4b23      	ldr	r3, [pc, #140]	; (8007704 <ulTaskNotifyTake+0xd8>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	401a      	ands	r2, r3
 800767a:	4b22      	ldr	r3, [pc, #136]	; (8007704 <ulTaskNotifyTake+0xd8>)
 800767c:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					#if ( INCLUDE_vTaskSuspend == 1 )
					{
						if( xTicksToWait == portMAX_DELAY )
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007684:	d107      	bne.n	8007696 <ulTaskNotifyTake+0x6a>
						{
							/* Add the task to the suspended task list instead
							of a delayed task list to ensure the task is not
							woken by a timing event.  It will block
							indefinitely. */
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8007686:	4b1e      	ldr	r3, [pc, #120]	; (8007700 <ulTaskNotifyTake+0xd4>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	3304      	adds	r3, #4
 800768c:	481e      	ldr	r0, [pc, #120]	; (8007708 <ulTaskNotifyTake+0xdc>)
 800768e:	4619      	mov	r1, r3
 8007690:	f000 ff84 	bl	800859c <vListInsertEnd>
 8007694:	e007      	b.n	80076a6 <ulTaskNotifyTake+0x7a>
						{
							/* Calculate the time at which the task should be
							woken if no notification events occur.  This may
							overflow but this doesn't matter, the scheduler will
							handle it. */
							xTimeToWake = xTickCount + xTicksToWait;
 8007696:	4b1d      	ldr	r3, [pc, #116]	; (800770c <ulTaskNotifyTake+0xe0>)
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	4413      	add	r3, r2
 800769e:	60fb      	str	r3, [r7, #12]
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 80076a0:	68f8      	ldr	r0, [r7, #12]
 80076a2:	f7ff fded 	bl	8007280 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80076a6:	4b1a      	ldr	r3, [pc, #104]	; (8007710 <ulTaskNotifyTake+0xe4>)
 80076a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076ac:	601a      	str	r2, [r3, #0]
 80076ae:	f3bf 8f4f 	dsb	sy
 80076b2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80076b6:	f001 f89b 	bl	80087f0 <vPortExitCritical>

		taskENTER_CRITICAL();
 80076ba:	f001 f881 	bl	80087c0 <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80076be:	4b10      	ldr	r3, [pc, #64]	; (8007700 <ulTaskNotifyTake+0xd4>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076c4:	60bb      	str	r3, [r7, #8]

			if( ulReturn != 0UL )
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d00c      	beq.n	80076e6 <ulTaskNotifyTake+0xba>
			{
				if( xClearCountOnExit != pdFALSE )
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d004      	beq.n	80076dc <ulTaskNotifyTake+0xb0>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80076d2:	4b0b      	ldr	r3, [pc, #44]	; (8007700 <ulTaskNotifyTake+0xd4>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2200      	movs	r2, #0
 80076d8:	649a      	str	r2, [r3, #72]	; 0x48
 80076da:	e004      	b.n	80076e6 <ulTaskNotifyTake+0xba>
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
 80076dc:	4b08      	ldr	r3, [pc, #32]	; (8007700 <ulTaskNotifyTake+0xd4>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80076e2:	3a01      	subs	r2, #1
 80076e4:	649a      	str	r2, [r3, #72]	; 0x48
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 80076e6:	4b06      	ldr	r3, [pc, #24]	; (8007700 <ulTaskNotifyTake+0xd4>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		}
		taskEXIT_CRITICAL();
 80076f0:	f001 f87e 	bl	80087f0 <vPortExitCritical>

		return ulReturn;
 80076f4:	68bb      	ldr	r3, [r7, #8]
	}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3710      	adds	r7, #16
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	200000bc 	.word	0x200000bc
 8007704:	2000019c 	.word	0x2000019c
 8007708:	20000180 	.word	0x20000180
 800770c:	20000198 	.word	0x20000198
 8007710:	e000ed04 	.word	0xe000ed04

08007714 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8007714:	b580      	push	{r7, lr}
 8007716:	b086      	sub	sp, #24
 8007718:	af00      	add	r7, sp, #0
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	60b9      	str	r1, [r7, #8]
 800771e:	607a      	str	r2, [r7, #4]
 8007720:	603b      	str	r3, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8007722:	f001 f84d 	bl	80087c0 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->eNotifyState != eNotified )
 8007726:	4b39      	ldr	r3, [pc, #228]	; (800780c <xTaskNotifyWait+0xf8>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800772e:	b2db      	uxtb	r3, r3
 8007730:	2b02      	cmp	r3, #2
 8007732:	d03f      	beq.n	80077b4 <xTaskNotifyWait+0xa0>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8007734:	4b35      	ldr	r3, [pc, #212]	; (800780c <xTaskNotifyWait+0xf8>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	43d2      	mvns	r2, r2
 800773e:	400a      	ands	r2, r1
 8007740:	649a      	str	r2, [r3, #72]	; 0x48

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 8007742:	4b32      	ldr	r3, [pc, #200]	; (800780c <xTaskNotifyWait+0xf8>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

				if( xTicksToWait > ( TickType_t ) 0 )
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d030      	beq.n	80077b4 <xTaskNotifyWait+0xa0>
				{
					/* The task is going to block.  First it must be removed
					from the	ready list. */
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8007752:	4b2e      	ldr	r3, [pc, #184]	; (800780c <xTaskNotifyWait+0xf8>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	3304      	adds	r3, #4
 8007758:	4618      	mov	r0, r3
 800775a:	f000 ff7b 	bl	8008654 <uxListRemove>
 800775e:	4603      	mov	r3, r0
 8007760:	2b00      	cmp	r3, #0
 8007762:	d10b      	bne.n	800777c <xTaskNotifyWait+0x68>
					{
						/* The current task must be in a ready list, so there is
						no need to check, and the port reset macro can be called
						directly. */
						portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007764:	4b29      	ldr	r3, [pc, #164]	; (800780c <xTaskNotifyWait+0xf8>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800776a:	2201      	movs	r2, #1
 800776c:	fa02 f303 	lsl.w	r3, r2, r3
 8007770:	43da      	mvns	r2, r3
 8007772:	4b27      	ldr	r3, [pc, #156]	; (8007810 <xTaskNotifyWait+0xfc>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	401a      	ands	r2, r3
 8007778:	4b25      	ldr	r3, [pc, #148]	; (8007810 <xTaskNotifyWait+0xfc>)
 800777a:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					#if ( INCLUDE_vTaskSuspend == 1 )
					{
						if( xTicksToWait == portMAX_DELAY )
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007782:	d107      	bne.n	8007794 <xTaskNotifyWait+0x80>
						{
							/* Add the task to the suspended task list instead
							of a delayed task list to ensure the task is not
							woken by a timing event.  It will block
							indefinitely. */
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8007784:	4b21      	ldr	r3, [pc, #132]	; (800780c <xTaskNotifyWait+0xf8>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	3304      	adds	r3, #4
 800778a:	4822      	ldr	r0, [pc, #136]	; (8007814 <xTaskNotifyWait+0x100>)
 800778c:	4619      	mov	r1, r3
 800778e:	f000 ff05 	bl	800859c <vListInsertEnd>
 8007792:	e007      	b.n	80077a4 <xTaskNotifyWait+0x90>
						{
							/* Calculate the time at which the task should be
							woken if no notification events occur.  This may
							overflow but this doesn't matter, the scheduler will
							handle it. */
							xTimeToWake = xTickCount + xTicksToWait;
 8007794:	4b20      	ldr	r3, [pc, #128]	; (8007818 <xTaskNotifyWait+0x104>)
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	4413      	add	r3, r2
 800779c:	613b      	str	r3, [r7, #16]
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 800779e:	6938      	ldr	r0, [r7, #16]
 80077a0:	f7ff fd6e 	bl	8007280 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80077a4:	4b1d      	ldr	r3, [pc, #116]	; (800781c <xTaskNotifyWait+0x108>)
 80077a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077aa:	601a      	str	r2, [r3, #0]
 80077ac:	f3bf 8f4f 	dsb	sy
 80077b0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80077b4:	f001 f81c 	bl	80087f0 <vPortExitCritical>

		taskENTER_CRITICAL();
 80077b8:	f001 f802 	bl	80087c0 <vPortEnterCritical>
		{
			if( pulNotificationValue != NULL )
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d004      	beq.n	80077cc <xTaskNotifyWait+0xb8>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80077c2:	4b12      	ldr	r3, [pc, #72]	; (800780c <xTaskNotifyWait+0xf8>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	601a      	str	r2, [r3, #0]

			/* If eNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->eNotifyState == eWaitingNotification )
 80077cc:	4b0f      	ldr	r3, [pc, #60]	; (800780c <xTaskNotifyWait+0xf8>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d102      	bne.n	80077e0 <xTaskNotifyWait+0xcc>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80077da:	2300      	movs	r3, #0
 80077dc:	617b      	str	r3, [r7, #20]
 80077de:	e008      	b.n	80077f2 <xTaskNotifyWait+0xde>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80077e0:	4b0a      	ldr	r3, [pc, #40]	; (800780c <xTaskNotifyWait+0xf8>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80077e6:	68ba      	ldr	r2, [r7, #8]
 80077e8:	43d2      	mvns	r2, r2
 80077ea:	400a      	ands	r2, r1
 80077ec:	649a      	str	r2, [r3, #72]	; 0x48
				xReturn = pdTRUE;
 80077ee:	2301      	movs	r3, #1
 80077f0:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 80077f2:	4b06      	ldr	r3, [pc, #24]	; (800780c <xTaskNotifyWait+0xf8>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		}
		taskEXIT_CRITICAL();
 80077fc:	f000 fff8 	bl	80087f0 <vPortExitCritical>

		return xReturn;
 8007800:	697b      	ldr	r3, [r7, #20]
	}
 8007802:	4618      	mov	r0, r3
 8007804:	3718      	adds	r7, #24
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	200000bc 	.word	0x200000bc
 8007810:	2000019c 	.word	0x2000019c
 8007814:	20000180 	.word	0x20000180
 8007818:	20000198 	.word	0x20000198
 800781c:	e000ed04 	.word	0xe000ed04

08007820 <xTaskNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction )
	{
 8007820:	b580      	push	{r7, lr}
 8007822:	b088      	sub	sp, #32
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	4613      	mov	r3, r2
 800782c:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800782e:	2301      	movs	r3, #1
 8007830:	61fb      	str	r3, [r7, #28]

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	61bb      	str	r3, [r7, #24]

		taskENTER_CRITICAL();
 8007836:	f000 ffc3 	bl	80087c0 <vPortEnterCritical>
		{
			eOriginalNotifyState = pxTCB->eNotifyState;
 800783a:	69bb      	ldr	r3, [r7, #24]
 800783c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007840:	75fb      	strb	r3, [r7, #23]

			pxTCB->eNotifyState = eNotified;
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	2202      	movs	r2, #2
 8007846:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

			switch( eAction )
 800784a:	79fb      	ldrb	r3, [r7, #7]
 800784c:	2b04      	cmp	r3, #4
 800784e:	d828      	bhi.n	80078a2 <xTaskNotify+0x82>
 8007850:	a201      	add	r2, pc, #4	; (adr r2, 8007858 <xTaskNotify+0x38>)
 8007852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007856:	bf00      	nop
 8007858:	080078a3 	.word	0x080078a3
 800785c:	0800786d 	.word	0x0800786d
 8007860:	0800787b 	.word	0x0800787b
 8007864:	08007887 	.word	0x08007887
 8007868:	0800788f 	.word	0x0800788f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	431a      	orrs	r2, r3
 8007874:	69bb      	ldr	r3, [r7, #24]
 8007876:	649a      	str	r2, [r3, #72]	; 0x48
					break;
 8007878:	e013      	b.n	80078a2 <xTaskNotify+0x82>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800787e:	1c5a      	adds	r2, r3, #1
 8007880:	69bb      	ldr	r3, [r7, #24]
 8007882:	649a      	str	r2, [r3, #72]	; 0x48
					break;
 8007884:	e00d      	b.n	80078a2 <xTaskNotify+0x82>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007886:	69bb      	ldr	r3, [r7, #24]
 8007888:	68ba      	ldr	r2, [r7, #8]
 800788a:	649a      	str	r2, [r3, #72]	; 0x48
					break;
 800788c:	e009      	b.n	80078a2 <xTaskNotify+0x82>

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 800788e:	7dfb      	ldrb	r3, [r7, #23]
 8007890:	2b02      	cmp	r3, #2
 8007892:	d003      	beq.n	800789c <xTaskNotify+0x7c>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007894:	69bb      	ldr	r3, [r7, #24]
 8007896:	68ba      	ldr	r2, [r7, #8]
 8007898:	649a      	str	r2, [r3, #72]	; 0x48
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800789a:	e001      	b.n	80078a0 <xTaskNotify+0x80>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
 800789c:	2300      	movs	r3, #0
 800789e:	61fb      	str	r3, [r7, #28]
					}
					break;
 80078a0:	bf00      	nop
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 80078a2:	7dfb      	ldrb	r3, [r7, #23]
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d12a      	bne.n	80078fe <xTaskNotify+0xde>
			{
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	3304      	adds	r3, #4
 80078ac:	4618      	mov	r0, r3
 80078ae:	f000 fed1 	bl	8008654 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80078b2:	69bb      	ldr	r3, [r7, #24]
 80078b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b6:	2201      	movs	r2, #1
 80078b8:	409a      	lsls	r2, r3
 80078ba:	4b14      	ldr	r3, [pc, #80]	; (800790c <xTaskNotify+0xec>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	431a      	orrs	r2, r3
 80078c0:	4b12      	ldr	r3, [pc, #72]	; (800790c <xTaskNotify+0xec>)
 80078c2:	601a      	str	r2, [r3, #0]
 80078c4:	69bb      	ldr	r3, [r7, #24]
 80078c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078c8:	4613      	mov	r3, r2
 80078ca:	009b      	lsls	r3, r3, #2
 80078cc:	4413      	add	r3, r2
 80078ce:	009b      	lsls	r3, r3, #2
 80078d0:	4a0f      	ldr	r2, [pc, #60]	; (8007910 <xTaskNotify+0xf0>)
 80078d2:	441a      	add	r2, r3
 80078d4:	69bb      	ldr	r3, [r7, #24]
 80078d6:	3304      	adds	r3, #4
 80078d8:	4610      	mov	r0, r2
 80078da:	4619      	mov	r1, r3
 80078dc:	f000 fe5e 	bl	800859c <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078e4:	4b0b      	ldr	r3, [pc, #44]	; (8007914 <xTaskNotify+0xf4>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d907      	bls.n	80078fe <xTaskNotify+0xde>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					portYIELD_WITHIN_API();
 80078ee:	4b0a      	ldr	r3, [pc, #40]	; (8007918 <xTaskNotify+0xf8>)
 80078f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078f4:	601a      	str	r2, [r3, #0]
 80078f6:	f3bf 8f4f 	dsb	sy
 80078fa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80078fe:	f000 ff77 	bl	80087f0 <vPortExitCritical>

		return xReturn;
 8007902:	69fb      	ldr	r3, [r7, #28]
	}
 8007904:	4618      	mov	r0, r3
 8007906:	3720      	adds	r7, #32
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}
 800790c:	2000019c 	.word	0x2000019c
 8007910:	200000c0 	.word	0x200000c0
 8007914:	200000bc 	.word	0x200000bc
 8007918:	e000ed04 	.word	0xe000ed04

0800791c <xTaskNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800791c:	b580      	push	{r7, lr}
 800791e:	b08c      	sub	sp, #48	; 0x30
 8007920:	af00      	add	r7, sp, #0
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	603b      	str	r3, [r7, #0]
 8007928:	4613      	mov	r3, r2
 800792a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800792c:	2301      	movs	r3, #1
 800792e:	62fb      	str	r3, [r7, #44]	; 0x2c
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	62bb      	str	r3, [r7, #40]	; 0x28

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007934:	f3ef 8211 	mrs	r2, BASEPRI
 8007938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800793c:	f383 8811 	msr	BASEPRI, r3
 8007940:	f3bf 8f6f 	isb	sy
 8007944:	f3bf 8f4f 	dsb	sy
 8007948:	61fa      	str	r2, [r7, #28]
 800794a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800794c:	69fb      	ldr	r3, [r7, #28]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800794e:	627b      	str	r3, [r7, #36]	; 0x24
		{
			eOriginalNotifyState = pxTCB->eNotifyState;
 8007950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007952:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007956:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

			pxTCB->eNotifyState = eNotified;
 800795a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800795c:	2202      	movs	r2, #2
 800795e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

			switch( eAction )
 8007962:	79fb      	ldrb	r3, [r7, #7]
 8007964:	2b04      	cmp	r3, #4
 8007966:	d829      	bhi.n	80079bc <xTaskNotifyFromISR+0xa0>
 8007968:	a201      	add	r2, pc, #4	; (adr r2, 8007970 <xTaskNotifyFromISR+0x54>)
 800796a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800796e:	bf00      	nop
 8007970:	080079bd 	.word	0x080079bd
 8007974:	08007985 	.word	0x08007985
 8007978:	08007993 	.word	0x08007993
 800797c:	0800799f 	.word	0x0800799f
 8007980:	080079a7 	.word	0x080079a7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007986:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	431a      	orrs	r2, r3
 800798c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800798e:	649a      	str	r2, [r3, #72]	; 0x48
					break;
 8007990:	e014      	b.n	80079bc <xTaskNotifyFromISR+0xa0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007996:	1c5a      	adds	r2, r3, #1
 8007998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800799a:	649a      	str	r2, [r3, #72]	; 0x48
					break;
 800799c:	e00e      	b.n	80079bc <xTaskNotifyFromISR+0xa0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800799e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a0:	68ba      	ldr	r2, [r7, #8]
 80079a2:	649a      	str	r2, [r3, #72]	; 0x48
					break;
 80079a4:	e00a      	b.n	80079bc <xTaskNotifyFromISR+0xa0>

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 80079a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80079aa:	2b02      	cmp	r3, #2
 80079ac:	d003      	beq.n	80079b6 <xTaskNotifyFromISR+0x9a>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80079ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b0:	68ba      	ldr	r2, [r7, #8]
 80079b2:	649a      	str	r2, [r3, #72]	; 0x48
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80079b4:	e001      	b.n	80079ba <xTaskNotifyFromISR+0x9e>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
 80079b6:	2300      	movs	r3, #0
 80079b8:	62fb      	str	r3, [r7, #44]	; 0x2c
					}
					break;
 80079ba:	bf00      	nop
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 80079bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d133      	bne.n	8007a2c <xTaskNotifyFromISR+0x110>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079c4:	4b1e      	ldr	r3, [pc, #120]	; (8007a40 <xTaskNotifyFromISR+0x124>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d11c      	bne.n	8007a06 <xTaskNotifyFromISR+0xea>
				{
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 80079cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ce:	3304      	adds	r3, #4
 80079d0:	4618      	mov	r0, r3
 80079d2:	f000 fe3f 	bl	8008654 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80079d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079da:	2201      	movs	r2, #1
 80079dc:	409a      	lsls	r2, r3
 80079de:	4b19      	ldr	r3, [pc, #100]	; (8007a44 <xTaskNotifyFromISR+0x128>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	431a      	orrs	r2, r3
 80079e4:	4b17      	ldr	r3, [pc, #92]	; (8007a44 <xTaskNotifyFromISR+0x128>)
 80079e6:	601a      	str	r2, [r3, #0]
 80079e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079ec:	4613      	mov	r3, r2
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	4413      	add	r3, r2
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	4a14      	ldr	r2, [pc, #80]	; (8007a48 <xTaskNotifyFromISR+0x12c>)
 80079f6:	441a      	add	r2, r3
 80079f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fa:	3304      	adds	r3, #4
 80079fc:	4610      	mov	r0, r2
 80079fe:	4619      	mov	r1, r3
 8007a00:	f000 fdcc 	bl	800859c <vListInsertEnd>
 8007a04:	e005      	b.n	8007a12 <xTaskNotifyFromISR+0xf6>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a08:	3318      	adds	r3, #24
 8007a0a:	4810      	ldr	r0, [pc, #64]	; (8007a4c <xTaskNotifyFromISR+0x130>)
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	f000 fdc5 	bl	800859c <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a16:	4b0e      	ldr	r3, [pc, #56]	; (8007a50 <xTaskNotifyFromISR+0x134>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d905      	bls.n	8007a2c <xTaskNotifyFromISR+0x110>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d002      	beq.n	8007a2c <xTaskNotifyFromISR+0x110>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	2201      	movs	r2, #1
 8007a2a:	601a      	str	r2, [r3, #0]
 8007a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8007a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3730      	adds	r7, #48	; 0x30
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	200001b4 	.word	0x200001b4
 8007a44:	2000019c 	.word	0x2000019c
 8007a48:	200000c0 	.word	0x200000c0
 8007a4c:	20000154 	.word	0x20000154
 8007a50:	200000bc 	.word	0x200000bc

08007a54 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b088      	sub	sp, #32
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007a62:	f3ef 8211 	mrs	r2, BASEPRI
 8007a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a6a:	f383 8811 	msr	BASEPRI, r3
 8007a6e:	f3bf 8f6f 	isb	sy
 8007a72:	f3bf 8f4f 	dsb	sy
 8007a76:	613a      	str	r2, [r7, #16]
 8007a78:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007a7a:	693b      	ldr	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a7c:	61bb      	str	r3, [r7, #24]
		{
			eOriginalNotifyState = pxTCB->eNotifyState;
 8007a7e:	69fb      	ldr	r3, [r7, #28]
 8007a80:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007a84:	75fb      	strb	r3, [r7, #23]
			pxTCB->eNotifyState = eNotified;
 8007a86:	69fb      	ldr	r3, [r7, #28]
 8007a88:	2202      	movs	r2, #2
 8007a8a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8007a8e:	69fb      	ldr	r3, [r7, #28]
 8007a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a92:	1c5a      	adds	r2, r3, #1
 8007a94:	69fb      	ldr	r3, [r7, #28]
 8007a96:	649a      	str	r2, [r3, #72]	; 0x48

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 8007a98:	7dfb      	ldrb	r3, [r7, #23]
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d133      	bne.n	8007b06 <vTaskNotifyGiveFromISR+0xb2>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a9e:	4b1e      	ldr	r3, [pc, #120]	; (8007b18 <vTaskNotifyGiveFromISR+0xc4>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d11c      	bne.n	8007ae0 <vTaskNotifyGiveFromISR+0x8c>
				{
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8007aa6:	69fb      	ldr	r3, [r7, #28]
 8007aa8:	3304      	adds	r3, #4
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f000 fdd2 	bl	8008654 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007ab0:	69fb      	ldr	r3, [r7, #28]
 8007ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	409a      	lsls	r2, r3
 8007ab8:	4b18      	ldr	r3, [pc, #96]	; (8007b1c <vTaskNotifyGiveFromISR+0xc8>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	431a      	orrs	r2, r3
 8007abe:	4b17      	ldr	r3, [pc, #92]	; (8007b1c <vTaskNotifyGiveFromISR+0xc8>)
 8007ac0:	601a      	str	r2, [r3, #0]
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ac6:	4613      	mov	r3, r2
 8007ac8:	009b      	lsls	r3, r3, #2
 8007aca:	4413      	add	r3, r2
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	4a14      	ldr	r2, [pc, #80]	; (8007b20 <vTaskNotifyGiveFromISR+0xcc>)
 8007ad0:	441a      	add	r2, r3
 8007ad2:	69fb      	ldr	r3, [r7, #28]
 8007ad4:	3304      	adds	r3, #4
 8007ad6:	4610      	mov	r0, r2
 8007ad8:	4619      	mov	r1, r3
 8007ada:	f000 fd5f 	bl	800859c <vListInsertEnd>
 8007ade:	e005      	b.n	8007aec <vTaskNotifyGiveFromISR+0x98>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	3318      	adds	r3, #24
 8007ae4:	480f      	ldr	r0, [pc, #60]	; (8007b24 <vTaskNotifyGiveFromISR+0xd0>)
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	f000 fd58 	bl	800859c <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007aec:	69fb      	ldr	r3, [r7, #28]
 8007aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007af0:	4b0d      	ldr	r3, [pc, #52]	; (8007b28 <vTaskNotifyGiveFromISR+0xd4>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d905      	bls.n	8007b06 <vTaskNotifyGiveFromISR+0xb2>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d002      	beq.n	8007b06 <vTaskNotifyGiveFromISR+0xb2>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	2201      	movs	r2, #1
 8007b04:	601a      	str	r2, [r3, #0]
 8007b06:	69bb      	ldr	r3, [r7, #24]
 8007b08:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	f383 8811 	msr	BASEPRI, r3
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8007b10:	3720      	adds	r7, #32
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	200001b4 	.word	0x200001b4
 8007b1c:	2000019c 	.word	0x2000019c
 8007b20:	200000c0 	.word	0x200000c0
 8007b24:	20000154 	.word	0x20000154
 8007b28:	200000bc 	.word	0x200000bc

08007b2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 8007b3a:	f000 fe41 	bl	80087c0 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b46:	68f9      	ldr	r1, [r7, #12]
 8007b48:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007b4a:	fb01 f303 	mul.w	r3, r1, r3
 8007b4e:	441a      	add	r2, r3
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2200      	movs	r2, #0
 8007b58:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b6a:	3b01      	subs	r3, #1
 8007b6c:	68f9      	ldr	r1, [r7, #12]
 8007b6e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007b70:	fb01 f303 	mul.w	r3, r1, r3
 8007b74:	441a      	add	r2, r3
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b80:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f04f 32ff 	mov.w	r2, #4294967295
 8007b88:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d114      	bne.n	8007bba <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d01a      	beq.n	8007bce <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	3310      	adds	r3, #16
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f7ff f989 	bl	8006eb4 <xTaskRemoveFromEventList>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d112      	bne.n	8007bce <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007ba8:	4b0c      	ldr	r3, [pc, #48]	; (8007bdc <xQueueGenericReset+0xb0>)
 8007baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bae:	601a      	str	r2, [r3, #0]
 8007bb0:	f3bf 8f4f 	dsb	sy
 8007bb4:	f3bf 8f6f 	isb	sy
 8007bb8:	e009      	b.n	8007bce <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	3310      	adds	r3, #16
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f000 fcc0 	bl	8008544 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	3324      	adds	r3, #36	; 0x24
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f000 fcbb 	bl	8008544 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007bce:	f000 fe0f 	bl	80087f0 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007bd2:	2301      	movs	r3, #1
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3710      	adds	r7, #16
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}
 8007bdc:	e000ed04 	.word	0xe000ed04

08007be0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b088      	sub	sp, #32
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	4613      	mov	r3, r2
 8007bec:	71fb      	strb	r3, [r7, #7]
Queue_t *pxNewQueue;
size_t xQueueSizeInBytes;
QueueHandle_t xReturn = NULL;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	61bb      	str	r3, [r7, #24]
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d102      	bne.n	8007bfe <xQueueGenericCreate+0x1e>
	{
		/* There is not going to be a queue storage area. */
		xQueueSizeInBytes = ( size_t ) 0;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	61fb      	str	r3, [r7, #28]
 8007bfc:	e005      	b.n	8007c0a <xQueueGenericCreate+0x2a>
	}
	else
	{
		/* The queue is one byte longer than asked for to make wrap checking
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	68ba      	ldr	r2, [r7, #8]
 8007c02:	fb02 f303 	mul.w	r3, r2, r3
 8007c06:	3301      	adds	r3, #1
 8007c08:	61fb      	str	r3, [r7, #28]
	}

	/* Allocate the new queue structure and storage area. */
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007c0a:	69fb      	ldr	r3, [r7, #28]
 8007c0c:	334c      	adds	r3, #76	; 0x4c
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f000 fe76 	bl	8008900 <pvPortMalloc>
 8007c14:	6178      	str	r0, [r7, #20]

	if( pcAllocatedBuffer != NULL )
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d019      	beq.n	8007c50 <xQueueGenericCreate+0x70>
	{
		pxNewQueue = ( Queue_t * ) pcAllocatedBuffer; /*lint !e826 MISRA The buffer cannot be to small because it was dimensioned by sizeof( Queue_t ) + xQueueSizeInBytes. */
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	613b      	str	r3, [r7, #16]

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d103      	bne.n	8007c2e <xQueueGenericCreate+0x4e>
		{
			/* No RAM was allocated for the queue storage area, but PC head
			cannot be set to NULL because NULL is used as a key to say the queue
			is used as a mutex.  Therefore just set pcHead to point to the queue
			as a benign value that is known to be within the memory map. */
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	693a      	ldr	r2, [r7, #16]
 8007c2a:	601a      	str	r2, [r3, #0]
 8007c2c:	e004      	b.n	8007c38 <xQueueGenericCreate+0x58>
		}
		else
		{
			/* Jump past the queue structure to find the location of the queue
			storage area - adding the padding bytes to get a better alignment. */
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	601a      	str	r2, [r3, #0]
		}

		/* Initialise the queue members as described above where the queue type
		is defined. */
		pxNewQueue->uxLength = uxQueueLength;
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	63da      	str	r2, [r3, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	68ba      	ldr	r2, [r7, #8]
 8007c42:	641a      	str	r2, [r3, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007c44:	6938      	ldr	r0, [r7, #16]
 8007c46:	2101      	movs	r1, #1
 8007c48:	f7ff ff70 	bl	8007b2c <xQueueGenericReset>
			pxNewQueue->pxQueueSetContainer = NULL;
		}
		#endif /* configUSE_QUEUE_SETS */

		traceQUEUE_CREATE( pxNewQueue );
		xReturn = pxNewQueue;
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	61bb      	str	r3, [r7, #24]
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );

	return xReturn;
 8007c50:	69bb      	ldr	r3, [r7, #24]
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3720      	adds	r7, #32
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop

08007c5c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	4603      	mov	r3, r0
 8007c64:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
 8007c66:	204c      	movs	r0, #76	; 0x4c
 8007c68:	f000 fe4a 	bl	8008900 <pvPortMalloc>
 8007c6c:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d02c      	beq.n	8007cce <xQueueCreateMutex+0x72>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2200      	movs	r2, #0
 8007c78:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2200      	movs	r2, #0
 8007c84:	609a      	str	r2, [r3, #8]
			pxNewQueue->u.pcReadFrom = NULL;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2201      	movs	r2, #1
 8007c96:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ca4:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8007cac:	649a      	str	r2, [r3, #72]	; 0x48
				pxNewQueue->pxQueueSetContainer = NULL;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	3310      	adds	r3, #16
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f000 fc46 	bl	8008544 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	3324      	adds	r3, #36	; 0x24
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f000 fc41 	bl	8008544 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007cc2:	68f8      	ldr	r0, [r7, #12]
 8007cc4:	2100      	movs	r1, #0
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	2300      	movs	r3, #0
 8007cca:	f000 f805 	bl	8007cd8 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
 8007cce:	68fb      	ldr	r3, [r7, #12]
	}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3710      	adds	r7, #16
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b08a      	sub	sp, #40	; 0x28
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	60f8      	str	r0, [r7, #12]
 8007ce0:	60b9      	str	r1, [r7, #8]
 8007ce2:	607a      	str	r2, [r7, #4]
 8007ce4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	623b      	str	r3, [r7, #32]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007cee:	f000 fd67 	bl	80087c0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007cf2:	6a3b      	ldr	r3, [r7, #32]
 8007cf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cf6:	6a3b      	ldr	r3, [r7, #32]
 8007cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d302      	bcc.n	8007d04 <xQueueGenericSend+0x2c>
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	2b02      	cmp	r3, #2
 8007d02:	d129      	bne.n	8007d58 <xQueueGenericSend+0x80>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d04:	6a38      	ldr	r0, [r7, #32]
 8007d06:	68b9      	ldr	r1, [r7, #8]
 8007d08:	683a      	ldr	r2, [r7, #0]
 8007d0a:	f000 fab7 	bl	800827c <prvCopyDataToQueue>
 8007d0e:	61f8      	str	r0, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d10:	6a3b      	ldr	r3, [r7, #32]
 8007d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d010      	beq.n	8007d3a <xQueueGenericSend+0x62>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 8007d18:	6a3b      	ldr	r3, [r7, #32]
 8007d1a:	3324      	adds	r3, #36	; 0x24
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f7ff f8c9 	bl	8006eb4 <xTaskRemoveFromEventList>
 8007d22:	4603      	mov	r3, r0
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d113      	bne.n	8007d50 <xQueueGenericSend+0x78>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007d28:	4b3d      	ldr	r3, [pc, #244]	; (8007e20 <xQueueGenericSend+0x148>)
 8007d2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d2e:	601a      	str	r2, [r3, #0]
 8007d30:	f3bf 8f4f 	dsb	sy
 8007d34:	f3bf 8f6f 	isb	sy
 8007d38:	e00a      	b.n	8007d50 <xQueueGenericSend+0x78>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007d3a:	69fb      	ldr	r3, [r7, #28]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d007      	beq.n	8007d50 <xQueueGenericSend+0x78>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007d40:	4b37      	ldr	r3, [pc, #220]	; (8007e20 <xQueueGenericSend+0x148>)
 8007d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d46:	601a      	str	r2, [r3, #0]
 8007d48:	f3bf 8f4f 	dsb	sy
 8007d4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007d50:	f000 fd4e 	bl	80087f0 <vPortExitCritical>
				return pdPASS;
 8007d54:	2301      	movs	r3, #1
 8007d56:	e05f      	b.n	8007e18 <xQueueGenericSend+0x140>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d103      	bne.n	8007d66 <xQueueGenericSend+0x8e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d5e:	f000 fd47 	bl	80087f0 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007d62:	2300      	movs	r3, #0
 8007d64:	e058      	b.n	8007e18 <xQueueGenericSend+0x140>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d106      	bne.n	8007d7a <xQueueGenericSend+0xa2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8007d6c:	f107 0314 	add.w	r3, r7, #20
 8007d70:	4618      	mov	r0, r3
 8007d72:	f7ff f93b 	bl	8006fec <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d76:	2301      	movs	r3, #1
 8007d78:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d7a:	f000 fd39 	bl	80087f0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d7e:	f7fe fe05 	bl	800698c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d82:	f000 fd1d 	bl	80087c0 <vPortEnterCritical>
 8007d86:	6a3b      	ldr	r3, [r7, #32]
 8007d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d8e:	d102      	bne.n	8007d96 <xQueueGenericSend+0xbe>
 8007d90:	6a3b      	ldr	r3, [r7, #32]
 8007d92:	2200      	movs	r2, #0
 8007d94:	645a      	str	r2, [r3, #68]	; 0x44
 8007d96:	6a3b      	ldr	r3, [r7, #32]
 8007d98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d9e:	d102      	bne.n	8007da6 <xQueueGenericSend+0xce>
 8007da0:	6a3b      	ldr	r3, [r7, #32]
 8007da2:	2200      	movs	r2, #0
 8007da4:	649a      	str	r2, [r3, #72]	; 0x48
 8007da6:	f000 fd23 	bl	80087f0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007daa:	f107 0214 	add.w	r2, r7, #20
 8007dae:	1d3b      	adds	r3, r7, #4
 8007db0:	4610      	mov	r0, r2
 8007db2:	4619      	mov	r1, r3
 8007db4:	f7ff f930 	bl	8007018 <xTaskCheckForTimeOut>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d124      	bne.n	8007e08 <xQueueGenericSend+0x130>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007dbe:	6a38      	ldr	r0, [r7, #32]
 8007dc0:	f000 fb66 	bl	8008490 <prvIsQueueFull>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d018      	beq.n	8007dfc <xQueueGenericSend+0x124>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007dca:	6a3b      	ldr	r3, [r7, #32]
 8007dcc:	f103 0210 	add.w	r2, r3, #16
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	4610      	mov	r0, r2
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	f7fe ffb3 	bl	8006d40 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007dda:	6a38      	ldr	r0, [r7, #32]
 8007ddc:	f000 fae2 	bl	80083a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007de0:	f7fe fde2 	bl	80069a8 <xTaskResumeAll>
 8007de4:	4603      	mov	r3, r0
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d115      	bne.n	8007e16 <xQueueGenericSend+0x13e>
				{
					portYIELD_WITHIN_API();
 8007dea:	4b0d      	ldr	r3, [pc, #52]	; (8007e20 <xQueueGenericSend+0x148>)
 8007dec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007df0:	601a      	str	r2, [r3, #0]
 8007df2:	f3bf 8f4f 	dsb	sy
 8007df6:	f3bf 8f6f 	isb	sy
 8007dfa:	e00c      	b.n	8007e16 <xQueueGenericSend+0x13e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007dfc:	6a38      	ldr	r0, [r7, #32]
 8007dfe:	f000 fad1 	bl	80083a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e02:	f7fe fdd1 	bl	80069a8 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 8007e06:	e772      	b.n	8007cee <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007e08:	6a38      	ldr	r0, [r7, #32]
 8007e0a:	f000 facb 	bl	80083a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e0e:	f7fe fdcb 	bl	80069a8 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007e12:	2300      	movs	r3, #0
 8007e14:	e000      	b.n	8007e18 <xQueueGenericSend+0x140>
		}
	}
 8007e16:	e76a      	b.n	8007cee <xQueueGenericSend+0x16>
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3728      	adds	r7, #40	; 0x28
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}
 8007e20:	e000ed04 	.word	0xe000ed04

08007e24 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b08a      	sub	sp, #40	; 0x28
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	607a      	str	r2, [r7, #4]
 8007e30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	623b      	str	r3, [r7, #32]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007e36:	f3ef 8211 	mrs	r2, BASEPRI
 8007e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3e:	f383 8811 	msr	BASEPRI, r3
 8007e42:	f3bf 8f6f 	isb	sy
 8007e46:	f3bf 8f4f 	dsb	sy
 8007e4a:	61ba      	str	r2, [r7, #24]
 8007e4c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007e4e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007e50:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e52:	6a3b      	ldr	r3, [r7, #32]
 8007e54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e56:	6a3b      	ldr	r3, [r7, #32]
 8007e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d302      	bcc.n	8007e64 <xQueueGenericSendFromISR+0x40>
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	2b02      	cmp	r3, #2
 8007e62:	d124      	bne.n	8007eae <xQueueGenericSendFromISR+0x8a>
			/* A task can only have an inherited priority if it is a mutex
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  Therefore, unlike the xQueueGenericGive()
			function, there is no need to determine the need for priority
			disinheritance here or to clear the mutex holder TCB member. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e64:	6a38      	ldr	r0, [r7, #32]
 8007e66:	68b9      	ldr	r1, [r7, #8]
 8007e68:	683a      	ldr	r2, [r7, #0]
 8007e6a:	f000 fa07 	bl	800827c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 8007e6e:	6a3b      	ldr	r3, [r7, #32]
 8007e70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e76:	d112      	bne.n	8007e9e <xQueueGenericSendFromISR+0x7a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e78:	6a3b      	ldr	r3, [r7, #32]
 8007e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d013      	beq.n	8007ea8 <xQueueGenericSendFromISR+0x84>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e80:	6a3b      	ldr	r3, [r7, #32]
 8007e82:	3324      	adds	r3, #36	; 0x24
 8007e84:	4618      	mov	r0, r3
 8007e86:	f7ff f815 	bl	8006eb4 <xTaskRemoveFromEventList>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d00b      	beq.n	8007ea8 <xQueueGenericSendFromISR+0x84>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d008      	beq.n	8007ea8 <xQueueGenericSendFromISR+0x84>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2201      	movs	r2, #1
 8007e9a:	601a      	str	r2, [r3, #0]
 8007e9c:	e004      	b.n	8007ea8 <xQueueGenericSendFromISR+0x84>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 8007e9e:	6a3b      	ldr	r3, [r7, #32]
 8007ea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ea2:	1c5a      	adds	r2, r3, #1
 8007ea4:	6a3b      	ldr	r3, [r7, #32]
 8007ea6:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8007eac:	e001      	b.n	8007eb2 <xQueueGenericSendFromISR+0x8e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8007eb2:	69fb      	ldr	r3, [r7, #28]
 8007eb4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3728      	adds	r7, #40	; 0x28
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop

08007ec8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b088      	sub	sp, #32
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	61bb      	str	r3, [r7, #24]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007ed6:	f3ef 8211 	mrs	r2, BASEPRI
 8007eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ede:	f383 8811 	msr	BASEPRI, r3
 8007ee2:	f3bf 8f6f 	isb	sy
 8007ee6:	f3bf 8f4f 	dsb	sy
 8007eea:	613a      	str	r2, [r7, #16]
 8007eec:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007eee:	693b      	ldr	r3, [r7, #16]
	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ef0:	617b      	str	r3, [r7, #20]
	{
		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d224      	bcs.n	8007f48 <xQueueGiveFromISR+0x80>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  Therefore, unlike the xQueueGenericGive()
			function, there is no need to determine the need for priority
			disinheritance here or to clear the mutex holder TCB member. */

			++( pxQueue->uxMessagesWaiting );
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f02:	1c5a      	adds	r2, r3, #1
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 8007f08:	69bb      	ldr	r3, [r7, #24]
 8007f0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f10:	d112      	bne.n	8007f38 <xQueueGiveFromISR+0x70>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f12:	69bb      	ldr	r3, [r7, #24]
 8007f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d013      	beq.n	8007f42 <xQueueGiveFromISR+0x7a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f1a:	69bb      	ldr	r3, [r7, #24]
 8007f1c:	3324      	adds	r3, #36	; 0x24
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f7fe ffc8 	bl	8006eb4 <xTaskRemoveFromEventList>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d00b      	beq.n	8007f42 <xQueueGiveFromISR+0x7a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d008      	beq.n	8007f42 <xQueueGiveFromISR+0x7a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	2201      	movs	r2, #1
 8007f34:	601a      	str	r2, [r3, #0]
 8007f36:	e004      	b.n	8007f42 <xQueueGiveFromISR+0x7a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 8007f38:	69bb      	ldr	r3, [r7, #24]
 8007f3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f3c:	1c5a      	adds	r2, r3, #1
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
 8007f42:	2301      	movs	r3, #1
 8007f44:	61fb      	str	r3, [r7, #28]
 8007f46:	e001      	b.n	8007f4c <xQueueGiveFromISR+0x84>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	61fb      	str	r3, [r7, #28]
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007f56:	69fb      	ldr	r3, [r7, #28]
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3720      	adds	r7, #32
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b08a      	sub	sp, #40	; 0x28
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	60f8      	str	r0, [r7, #12]
 8007f68:	60b9      	str	r1, [r7, #8]
 8007f6a:	607a      	str	r2, [r7, #4]
 8007f6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	623b      	str	r3, [r7, #32]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f76:	f000 fc23 	bl	80087c0 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f7a:	6a3b      	ldr	r3, [r7, #32]
 8007f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d047      	beq.n	8008012 <xQueueGenericReceive+0xb2>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8007f82:	6a3b      	ldr	r3, [r7, #32]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	61fb      	str	r3, [r7, #28]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007f88:	6a38      	ldr	r0, [r7, #32]
 8007f8a:	68b9      	ldr	r1, [r7, #8]
 8007f8c:	f000 f9e4 	bl	8008358 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d122      	bne.n	8007fdc <xQueueGenericReceive+0x7c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
 8007f96:	6a3b      	ldr	r3, [r7, #32]
 8007f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f9a:	1e5a      	subs	r2, r3, #1
 8007f9c:	6a3b      	ldr	r3, [r7, #32]
 8007f9e:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007fa0:	6a3b      	ldr	r3, [r7, #32]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d104      	bne.n	8007fb2 <xQueueGenericReceive+0x52>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8007fa8:	f7ff fb2c 	bl	8007604 <pvTaskIncrementMutexHeldCount>
 8007fac:	4602      	mov	r2, r0
 8007fae:	6a3b      	ldr	r3, [r7, #32]
 8007fb0:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007fb2:	6a3b      	ldr	r3, [r7, #32]
 8007fb4:	691b      	ldr	r3, [r3, #16]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d027      	beq.n	800800a <xQueueGenericReceive+0xaa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8007fba:	6a3b      	ldr	r3, [r7, #32]
 8007fbc:	3310      	adds	r3, #16
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f7fe ff78 	bl	8006eb4 <xTaskRemoveFromEventList>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d11f      	bne.n	800800a <xQueueGenericReceive+0xaa>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8007fca:	4b4a      	ldr	r3, [pc, #296]	; (80080f4 <xQueueGenericReceive+0x194>)
 8007fcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fd0:	601a      	str	r2, [r3, #0]
 8007fd2:	f3bf 8f4f 	dsb	sy
 8007fd6:	f3bf 8f6f 	isb	sy
 8007fda:	e016      	b.n	800800a <xQueueGenericReceive+0xaa>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8007fdc:	6a3b      	ldr	r3, [r7, #32]
 8007fde:	69fa      	ldr	r2, [r7, #28]
 8007fe0:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fe2:	6a3b      	ldr	r3, [r7, #32]
 8007fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d00f      	beq.n	800800a <xQueueGenericReceive+0xaa>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fea:	6a3b      	ldr	r3, [r7, #32]
 8007fec:	3324      	adds	r3, #36	; 0x24
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f7fe ff60 	bl	8006eb4 <xTaskRemoveFromEventList>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d007      	beq.n	800800a <xQueueGenericReceive+0xaa>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8007ffa:	4b3e      	ldr	r3, [pc, #248]	; (80080f4 <xQueueGenericReceive+0x194>)
 8007ffc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008000:	601a      	str	r2, [r3, #0]
 8008002:	f3bf 8f4f 	dsb	sy
 8008006:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 800800a:	f000 fbf1 	bl	80087f0 <vPortExitCritical>
				return pdPASS;
 800800e:	2301      	movs	r3, #1
 8008010:	e06c      	b.n	80080ec <xQueueGenericReceive+0x18c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d103      	bne.n	8008020 <xQueueGenericReceive+0xc0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008018:	f000 fbea 	bl	80087f0 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800801c:	2300      	movs	r3, #0
 800801e:	e065      	b.n	80080ec <xQueueGenericReceive+0x18c>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008022:	2b00      	cmp	r3, #0
 8008024:	d106      	bne.n	8008034 <xQueueGenericReceive+0xd4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8008026:	f107 0314 	add.w	r3, r7, #20
 800802a:	4618      	mov	r0, r3
 800802c:	f7fe ffde 	bl	8006fec <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008030:	2301      	movs	r3, #1
 8008032:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008034:	f000 fbdc 	bl	80087f0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008038:	f7fe fca8 	bl	800698c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800803c:	f000 fbc0 	bl	80087c0 <vPortEnterCritical>
 8008040:	6a3b      	ldr	r3, [r7, #32]
 8008042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008048:	d102      	bne.n	8008050 <xQueueGenericReceive+0xf0>
 800804a:	6a3b      	ldr	r3, [r7, #32]
 800804c:	2200      	movs	r2, #0
 800804e:	645a      	str	r2, [r3, #68]	; 0x44
 8008050:	6a3b      	ldr	r3, [r7, #32]
 8008052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008058:	d102      	bne.n	8008060 <xQueueGenericReceive+0x100>
 800805a:	6a3b      	ldr	r3, [r7, #32]
 800805c:	2200      	movs	r2, #0
 800805e:	649a      	str	r2, [r3, #72]	; 0x48
 8008060:	f000 fbc6 	bl	80087f0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008064:	f107 0214 	add.w	r2, r7, #20
 8008068:	1d3b      	adds	r3, r7, #4
 800806a:	4610      	mov	r0, r2
 800806c:	4619      	mov	r1, r3
 800806e:	f7fe ffd3 	bl	8007018 <xTaskCheckForTimeOut>
 8008072:	4603      	mov	r3, r0
 8008074:	2b00      	cmp	r3, #0
 8008076:	d131      	bne.n	80080dc <xQueueGenericReceive+0x17c>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008078:	6a38      	ldr	r0, [r7, #32]
 800807a:	f000 f9df 	bl	800843c <prvIsQueueEmpty>
 800807e:	4603      	mov	r3, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	d025      	beq.n	80080d0 <xQueueGenericReceive+0x170>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008084:	6a3b      	ldr	r3, [r7, #32]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d108      	bne.n	800809e <xQueueGenericReceive+0x13e>
					{
						taskENTER_CRITICAL();
 800808c:	f000 fb98 	bl	80087c0 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8008090:	6a3b      	ldr	r3, [r7, #32]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	4618      	mov	r0, r3
 8008096:	f7ff f9c3 	bl	8007420 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 800809a:	f000 fba9 	bl	80087f0 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800809e:	6a3b      	ldr	r3, [r7, #32]
 80080a0:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	4610      	mov	r0, r2
 80080a8:	4619      	mov	r1, r3
 80080aa:	f7fe fe49 	bl	8006d40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80080ae:	6a38      	ldr	r0, [r7, #32]
 80080b0:	f000 f978 	bl	80083a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80080b4:	f7fe fc78 	bl	80069a8 <xTaskResumeAll>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d115      	bne.n	80080ea <xQueueGenericReceive+0x18a>
				{
					portYIELD_WITHIN_API();
 80080be:	4b0d      	ldr	r3, [pc, #52]	; (80080f4 <xQueueGenericReceive+0x194>)
 80080c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080c4:	601a      	str	r2, [r3, #0]
 80080c6:	f3bf 8f4f 	dsb	sy
 80080ca:	f3bf 8f6f 	isb	sy
 80080ce:	e00c      	b.n	80080ea <xQueueGenericReceive+0x18a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80080d0:	6a38      	ldr	r0, [r7, #32]
 80080d2:	f000 f967 	bl	80083a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80080d6:	f7fe fc67 	bl	80069a8 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 80080da:	e74c      	b.n	8007f76 <xQueueGenericReceive+0x16>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 80080dc:	6a38      	ldr	r0, [r7, #32]
 80080de:	f000 f961 	bl	80083a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80080e2:	f7fe fc61 	bl	80069a8 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 80080e6:	2300      	movs	r3, #0
 80080e8:	e000      	b.n	80080ec <xQueueGenericReceive+0x18c>
		}
	}
 80080ea:	e744      	b.n	8007f76 <xQueueGenericReceive+0x16>
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3728      	adds	r7, #40	; 0x28
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}
 80080f4:	e000ed04 	.word	0xe000ed04

080080f8 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b08a      	sub	sp, #40	; 0x28
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	60f8      	str	r0, [r7, #12]
 8008100:	60b9      	str	r1, [r7, #8]
 8008102:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	623b      	str	r3, [r7, #32]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008108:	f3ef 8211 	mrs	r2, BASEPRI
 800810c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008110:	f383 8811 	msr	BASEPRI, r3
 8008114:	f3bf 8f6f 	isb	sy
 8008118:	f3bf 8f4f 	dsb	sy
 800811c:	61ba      	str	r2, [r7, #24]
 800811e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008120:	69bb      	ldr	r3, [r7, #24]
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008122:	61fb      	str	r3, [r7, #28]
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008124:	6a3b      	ldr	r3, [r7, #32]
 8008126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008128:	2b00      	cmp	r3, #0
 800812a:	d028      	beq.n	800817e <xQueueReceiveFromISR+0x86>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800812c:	6a38      	ldr	r0, [r7, #32]
 800812e:	68b9      	ldr	r1, [r7, #8]
 8008130:	f000 f912 	bl	8008358 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 8008134:	6a3b      	ldr	r3, [r7, #32]
 8008136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008138:	1e5a      	subs	r2, r3, #1
 800813a:	6a3b      	ldr	r3, [r7, #32]
 800813c:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
 800813e:	6a3b      	ldr	r3, [r7, #32]
 8008140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008146:	d112      	bne.n	800816e <xQueueReceiveFromISR+0x76>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008148:	6a3b      	ldr	r3, [r7, #32]
 800814a:	691b      	ldr	r3, [r3, #16]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d013      	beq.n	8008178 <xQueueReceiveFromISR+0x80>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008150:	6a3b      	ldr	r3, [r7, #32]
 8008152:	3310      	adds	r3, #16
 8008154:	4618      	mov	r0, r3
 8008156:	f7fe fead 	bl	8006eb4 <xTaskRemoveFromEventList>
 800815a:	4603      	mov	r3, r0
 800815c:	2b00      	cmp	r3, #0
 800815e:	d00b      	beq.n	8008178 <xQueueReceiveFromISR+0x80>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d008      	beq.n	8008178 <xQueueReceiveFromISR+0x80>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2201      	movs	r2, #1
 800816a:	601a      	str	r2, [r3, #0]
 800816c:	e004      	b.n	8008178 <xQueueReceiveFromISR+0x80>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
 800816e:	6a3b      	ldr	r3, [r7, #32]
 8008170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008172:	1c5a      	adds	r2, r3, #1
 8008174:	6a3b      	ldr	r3, [r7, #32]
 8008176:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008178:	2301      	movs	r3, #1
 800817a:	627b      	str	r3, [r7, #36]	; 0x24
 800817c:	e001      	b.n	8008182 <xQueueReceiveFromISR+0x8a>
		}
		else
		{
			xReturn = pdFAIL;
 800817e:	2300      	movs	r3, #0
 8008180:	627b      	str	r3, [r7, #36]	; 0x24
 8008182:	69fb      	ldr	r3, [r7, #28]
 8008184:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800818c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800818e:	4618      	mov	r0, r3
 8008190:	3728      	adds	r7, #40	; 0x28
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop

08008198 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b08a      	sub	sp, #40	; 0x28
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	623b      	str	r3, [r7, #32]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80081a6:	f3ef 8211 	mrs	r2, BASEPRI
 80081aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ae:	f383 8811 	msr	BASEPRI, r3
 80081b2:	f3bf 8f6f 	isb	sy
 80081b6:	f3bf 8f4f 	dsb	sy
 80081ba:	617a      	str	r2, [r7, #20]
 80081bc:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80081be:	697b      	ldr	r3, [r7, #20]
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80081c0:	61fb      	str	r3, [r7, #28]
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 80081c2:	6a3b      	ldr	r3, [r7, #32]
 80081c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d00c      	beq.n	80081e4 <xQueuePeekFromISR+0x4c>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80081ca:	6a3b      	ldr	r3, [r7, #32]
 80081cc:	68db      	ldr	r3, [r3, #12]
 80081ce:	61bb      	str	r3, [r7, #24]
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80081d0:	6a38      	ldr	r0, [r7, #32]
 80081d2:	6839      	ldr	r1, [r7, #0]
 80081d4:	f000 f8c0 	bl	8008358 <prvCopyDataFromQueue>
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 80081d8:	6a3b      	ldr	r3, [r7, #32]
 80081da:	69ba      	ldr	r2, [r7, #24]
 80081dc:	60da      	str	r2, [r3, #12]

			xReturn = pdPASS;
 80081de:	2301      	movs	r3, #1
 80081e0:	627b      	str	r3, [r7, #36]	; 0x24
 80081e2:	e001      	b.n	80081e8 <xQueuePeekFromISR+0x50>
		}
		else
		{
			xReturn = pdFAIL;
 80081e4:	2300      	movs	r3, #0
 80081e6:	627b      	str	r3, [r7, #36]	; 0x24
 80081e8:	69fb      	ldr	r3, [r7, #28]
 80081ea:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80081f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3728      	adds	r7, #40	; 0x28
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b084      	sub	sp, #16
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
 8008204:	f000 fadc 	bl	80087c0 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800820c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800820e:	f000 faef 	bl	80087f0 <vPortExitCritical>

	return uxReturn;
 8008212:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008214:	4618      	mov	r0, r3
 8008216:	3710      	adds	r7, #16
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	60fb      	str	r3, [r7, #12]
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 8008228:	f000 faca 	bl	80087c0 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008234:	1ad3      	subs	r3, r2, r3
 8008236:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
 8008238:	f000 fada 	bl	80087f0 <vPortExitCritical>

	return uxReturn;
 800823c:	68bb      	ldr	r3, [r7, #8]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800823e:	4618      	mov	r0, r3
 8008240:	3710      	adds	r7, #16
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop

08008248 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8008248:	b480      	push	{r7}
 800824a:	b085      	sub	sp, #20
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008254:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 8008256:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008258:	4618      	mov	r0, r3
 800825a:	3714      	adds	r7, #20
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr

08008264 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	60fb      	str	r3, [r7, #12]
	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
	}
	#endif
	vPortFree( pxQueue );
 8008270:	68f8      	ldr	r0, [r7, #12]
 8008272:	f000 fbdd 	bl	8008a30 <vPortFree>
}
 8008276:	3710      	adds	r7, #16
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b086      	sub	sp, #24
 8008280:	af00      	add	r7, sp, #0
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	60b9      	str	r1, [r7, #8]
 8008286:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008288:	2300      	movs	r3, #0
 800828a:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008290:	2b00      	cmp	r3, #0
 8008292:	d10d      	bne.n	80082b0 <prvCopyDataToQueue+0x34>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d152      	bne.n	8008342 <prvCopyDataToQueue+0xc6>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	4618      	mov	r0, r3
 80082a2:	f7ff f933 	bl	800750c <xTaskPriorityDisinherit>
 80082a6:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2200      	movs	r2, #0
 80082ac:	605a      	str	r2, [r3, #4]
 80082ae:	e048      	b.n	8008342 <prvCopyDataToQueue+0xc6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d11a      	bne.n	80082ec <prvCopyDataToQueue+0x70>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	689a      	ldr	r2, [r3, #8]
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082be:	4610      	mov	r0, r2
 80082c0:	68b9      	ldr	r1, [r7, #8]
 80082c2:	461a      	mov	r2, r3
 80082c4:	f000 fd27 	bl	8008d16 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	689a      	ldr	r2, [r3, #8]
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d0:	441a      	add	r2, r3
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	689a      	ldr	r2, [r3, #8]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	429a      	cmp	r2, r3
 80082e0:	d32f      	bcc.n	8008342 <prvCopyDataToQueue+0xc6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	609a      	str	r2, [r3, #8]
 80082ea:	e02a      	b.n	8008342 <prvCopyDataToQueue+0xc6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	68da      	ldr	r2, [r3, #12]
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f4:	4610      	mov	r0, r2
 80082f6:	68b9      	ldr	r1, [r7, #8]
 80082f8:	461a      	mov	r2, r3
 80082fa:	f000 fd0c 	bl	8008d16 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	68da      	ldr	r2, [r3, #12]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008306:	425b      	negs	r3, r3
 8008308:	441a      	add	r2, r3
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	68da      	ldr	r2, [r3, #12]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	429a      	cmp	r2, r3
 8008318:	d207      	bcs.n	800832a <prvCopyDataToQueue+0xae>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	685a      	ldr	r2, [r3, #4]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008322:	425b      	negs	r3, r3
 8008324:	441a      	add	r2, r3
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2b02      	cmp	r3, #2
 800832e:	d108      	bne.n	8008342 <prvCopyDataToQueue+0xc6>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008334:	2b00      	cmp	r3, #0
 8008336:	d004      	beq.n	8008342 <prvCopyDataToQueue+0xc6>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800833c:	1e5a      	subs	r2, r3, #1
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	639a      	str	r2, [r3, #56]	; 0x38
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008346:	1c5a      	adds	r2, r3, #1
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800834c:	697b      	ldr	r3, [r7, #20]
}
 800834e:	4618      	mov	r0, r3
 8008350:	3718      	adds	r7, #24
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop

08008358 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008366:	2b00      	cmp	r3, #0
 8008368:	d019      	beq.n	800839e <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	68da      	ldr	r2, [r3, #12]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008372:	441a      	add	r2, r3
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	68da      	ldr	r2, [r3, #12]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	429a      	cmp	r2, r3
 8008382:	d303      	bcc.n	800838c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	68da      	ldr	r2, [r3, #12]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008394:	6838      	ldr	r0, [r7, #0]
 8008396:	4611      	mov	r1, r2
 8008398:	461a      	mov	r2, r3
 800839a:	f000 fcbc 	bl	8008d16 <memcpy>
	}
}
 800839e:	3708      	adds	r7, #8
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80083ac:	f000 fa08 	bl	80087c0 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 80083b0:	e014      	b.n	80083dc <prvUnlockQueue+0x38>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00a      	beq.n	80083d0 <prvUnlockQueue+0x2c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	3324      	adds	r3, #36	; 0x24
 80083be:	4618      	mov	r0, r3
 80083c0:	f7fe fd78 	bl	8006eb4 <xTaskRemoveFromEventList>
 80083c4:	4603      	mov	r3, r0
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d003      	beq.n	80083d2 <prvUnlockQueue+0x2e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 80083ca:	f7fe fe69 	bl	80070a0 <vTaskMissedYield>
 80083ce:	e000      	b.n	80083d2 <prvUnlockQueue+0x2e>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
 80083d0:	e008      	b.n	80083e4 <prvUnlockQueue+0x40>
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083d6:	1e5a      	subs	r2, r3, #1
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	dce6      	bgt.n	80083b2 <prvUnlockQueue+0xe>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f04f 32ff 	mov.w	r2, #4294967295
 80083ea:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 80083ec:	f000 fa00 	bl	80087f0 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80083f0:	f000 f9e6 	bl	80087c0 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 80083f4:	e014      	b.n	8008420 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	691b      	ldr	r3, [r3, #16]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d00f      	beq.n	800841e <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	3310      	adds	r3, #16
 8008402:	4618      	mov	r0, r3
 8008404:	f7fe fd56 	bl	8006eb4 <xTaskRemoveFromEventList>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d001      	beq.n	8008412 <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
 800840e:	f7fe fe47 	bl	80070a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008416:	1e5a      	subs	r2, r3, #1
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	645a      	str	r2, [r3, #68]	; 0x44
 800841c:	e000      	b.n	8008420 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
 800841e:	e003      	b.n	8008428 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008424:	2b00      	cmp	r3, #0
 8008426:	dce6      	bgt.n	80083f6 <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f04f 32ff 	mov.w	r2, #4294967295
 800842e:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008430:	f000 f9de 	bl	80087f0 <vPortExitCritical>
}
 8008434:	3708      	adds	r7, #8
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop

0800843c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008444:	f000 f9bc 	bl	80087c0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800844c:	2b00      	cmp	r3, #0
 800844e:	d102      	bne.n	8008456 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008450:	2301      	movs	r3, #1
 8008452:	60fb      	str	r3, [r7, #12]
 8008454:	e001      	b.n	800845a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008456:	2300      	movs	r3, #0
 8008458:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800845a:	f000 f9c9 	bl	80087f0 <vPortExitCritical>

	return xReturn;
 800845e:	68fb      	ldr	r3, [r7, #12]
}
 8008460:	4618      	mov	r0, r3
 8008462:	3710      	adds	r7, #16
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
 8008468:	b480      	push	{r7}
 800846a:	b085      	sub	sp, #20
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008474:	2b00      	cmp	r3, #0
 8008476:	d102      	bne.n	800847e <xQueueIsQueueEmptyFromISR+0x16>
	{
		xReturn = pdTRUE;
 8008478:	2301      	movs	r3, #1
 800847a:	60fb      	str	r3, [r7, #12]
 800847c:	e001      	b.n	8008482 <xQueueIsQueueEmptyFromISR+0x1a>
	}
	else
	{
		xReturn = pdFALSE;
 800847e:	2300      	movs	r3, #0
 8008480:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8008482:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008484:	4618      	mov	r0, r3
 8008486:	3714      	adds	r7, #20
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b084      	sub	sp, #16
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008498:	f000 f992 	bl	80087c0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d102      	bne.n	80084ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80084a8:	2301      	movs	r3, #1
 80084aa:	60fb      	str	r3, [r7, #12]
 80084ac:	e001      	b.n	80084b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80084ae:	2300      	movs	r3, #0
 80084b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80084b2:	f000 f99d 	bl	80087f0 <vPortExitCritical>

	return xReturn;
 80084b6:	68fb      	ldr	r3, [r7, #12]
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3710      	adds	r7, #16
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 80084c0:	b480      	push	{r7}
 80084c2:	b085      	sub	sp, #20
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d102      	bne.n	80084da <xQueueIsQueueFullFromISR+0x1a>
	{
		xReturn = pdTRUE;
 80084d4:	2301      	movs	r3, #1
 80084d6:	60fb      	str	r3, [r7, #12]
 80084d8:	e001      	b.n	80084de <xQueueIsQueueFullFromISR+0x1e>
	}
	else
	{
		xReturn = pdFALSE;
 80084da:	2300      	movs	r3, #0
 80084dc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 80084de:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80084e0:	4618      	mov	r0, r3
 80084e2:	3714      	adds	r7, #20
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr

080084ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	6039      	str	r1, [r7, #0]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	60fb      	str	r3, [r7, #12]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80084fa:	f000 f961 	bl	80087c0 <vPortEnterCritical>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008506:	d102      	bne.n	800850e <vQueueWaitForMessageRestricted+0x22>
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2200      	movs	r2, #0
 800850c:	645a      	str	r2, [r3, #68]	; 0x44
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008516:	d102      	bne.n	800851e <vQueueWaitForMessageRestricted+0x32>
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2200      	movs	r2, #0
 800851c:	649a      	str	r2, [r3, #72]	; 0x48
 800851e:	f000 f967 	bl	80087f0 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008526:	2b00      	cmp	r3, #0
 8008528:	d105      	bne.n	8008536 <vQueueWaitForMessageRestricted+0x4a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	3324      	adds	r3, #36	; 0x24
 800852e:	4618      	mov	r0, r3
 8008530:	6839      	ldr	r1, [r7, #0]
 8008532:	f7fe fc8d 	bl	8006e50 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008536:	68f8      	ldr	r0, [r7, #12]
 8008538:	f7ff ff34 	bl	80083a4 <prvUnlockQueue>
	}
 800853c:	3710      	adds	r7, #16
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop

08008544 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f103 0208 	add.w	r2, r3, #8
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f04f 32ff 	mov.w	r2, #4294967295
 800855c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f103 0208 	add.w	r2, r3, #8
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f103 0208 	add.w	r2, r3, #8
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2200      	movs	r2, #0
 8008576:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008578:	370c      	adds	r7, #12
 800857a:	46bd      	mov	sp, r7
 800857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008580:	4770      	bx	lr
 8008582:	bf00      	nop

08008584 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008584:	b480      	push	{r7}
 8008586:	b083      	sub	sp, #12
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2200      	movs	r2, #0
 8008590:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008592:	370c      	adds	r7, #12
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr

0800859c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800859c:	b480      	push	{r7}
 800859e:	b085      	sub	sp, #20
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	68fa      	ldr	r2, [r7, #12]
 80085b0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	689a      	ldr	r2, [r3, #8]
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	609a      	str	r2, [r3, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	683a      	ldr	r2, [r7, #0]
 80085c0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	683a      	ldr	r2, [r7, #0]
 80085c6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	1c5a      	adds	r2, r3, #1
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	601a      	str	r2, [r3, #0]
}
 80085d8:	3714      	adds	r7, #20
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr
 80085e2:	bf00      	nop

080085e4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80085e4:	b480      	push	{r7}
 80085e6:	b085      	sub	sp, #20
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085fa:	d103      	bne.n	8008604 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	691b      	ldr	r3, [r3, #16]
 8008600:	60fb      	str	r3, [r7, #12]
 8008602:	e00c      	b.n	800861e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	3308      	adds	r3, #8
 8008608:	60fb      	str	r3, [r7, #12]
 800860a:	e002      	b.n	8008612 <vListInsert+0x2e>
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	60fb      	str	r3, [r7, #12]
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	681a      	ldr	r2, [r3, #0]
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	429a      	cmp	r2, r3
 800861c:	d9f6      	bls.n	800860c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	685a      	ldr	r2, [r3, #4]
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	683a      	ldr	r2, [r7, #0]
 800862c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	68fa      	ldr	r2, [r7, #12]
 8008632:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	683a      	ldr	r2, [r7, #0]
 8008638:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	687a      	ldr	r2, [r7, #4]
 800863e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	1c5a      	adds	r2, r3, #1
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	601a      	str	r2, [r3, #0]
}
 800864a:	3714      	adds	r7, #20
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008654:	b480      	push	{r7}
 8008656:	b085      	sub	sp, #20
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	691b      	ldr	r3, [r3, #16]
 8008660:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	6892      	ldr	r2, [r2, #8]
 800866a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	6852      	ldr	r2, [r2, #4]
 8008674:	605a      	str	r2, [r3, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	685a      	ldr	r2, [r3, #4]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	429a      	cmp	r2, r3
 800867e:	d103      	bne.n	8008688 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	689a      	ldr	r2, [r3, #8]
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	1e5a      	subs	r2, r3, #1
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
}
 800869c:	4618      	mov	r0, r3
 800869e:	3714      	adds	r7, #20
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80086a8:	b480      	push	{r7}
 80086aa:	b085      	sub	sp, #20
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	3b04      	subs	r3, #4
 80086b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80086c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	3b04      	subs	r3, #4
 80086c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80086c8:	68ba      	ldr	r2, [r7, #8]
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	3b04      	subs	r3, #4
 80086d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80086d4:	4a0c      	ldr	r2, [pc, #48]	; (8008708 <pxPortInitialiseStack+0x60>)
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	3b14      	subs	r3, #20
 80086de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	3b04      	subs	r3, #4
 80086ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f06f 0202 	mvn.w	r2, #2
 80086f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	3b20      	subs	r3, #32
 80086f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80086fa:	68fb      	ldr	r3, [r7, #12]
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3714      	adds	r7, #20
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr
 8008708:	0800870d 	.word	0x0800870d

0800870c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800870c:	b480      	push	{r7}
 800870e:	b083      	sub	sp, #12
 8008710:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008716:	f383 8811 	msr	BASEPRI, r3
 800871a:	f3bf 8f6f 	isb	sy
 800871e:	f3bf 8f4f 	dsb	sy
 8008722:	607b      	str	r3, [r7, #4]

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	for( ;; );
 8008724:	e7fe      	b.n	8008724 <prvTaskExitError+0x18>
 8008726:	bf00      	nop

08008728 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008728:	4b06      	ldr	r3, [pc, #24]	; (8008744 <pxCurrentTCBConst2>)
 800872a:	6819      	ldr	r1, [r3, #0]
 800872c:	6808      	ldr	r0, [r1, #0]
 800872e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008732:	f380 8809 	msr	PSP, r0
 8008736:	f3bf 8f6f 	isb	sy
 800873a:	f04f 0000 	mov.w	r0, #0
 800873e:	f380 8811 	msr	BASEPRI, r0
 8008742:	4770      	bx	lr

08008744 <pxCurrentTCBConst2>:
 8008744:	200000bc 	.word	0x200000bc

08008748 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008748:	486b      	ldr	r0, [pc, #428]	; (80088f8 <vPortEnableVFP+0x10>)
 800874a:	6800      	ldr	r0, [r0, #0]
 800874c:	6800      	ldr	r0, [r0, #0]
 800874e:	f380 8808 	msr	MSP, r0
 8008752:	b662      	cpsie	i
 8008754:	b661      	cpsie	f
 8008756:	f3bf 8f4f 	dsb	sy
 800875a:	f3bf 8f6f 	isb	sy
 800875e:	df00      	svc	0
 8008760:	bf00      	nop
 8008762:	bf00      	nop

08008764 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008764:	b580      	push	{r7, lr}
 8008766:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008768:	4b0f      	ldr	r3, [pc, #60]	; (80087a8 <xPortStartScheduler+0x44>)
 800876a:	4a0f      	ldr	r2, [pc, #60]	; (80087a8 <xPortStartScheduler+0x44>)
 800876c:	6812      	ldr	r2, [r2, #0]
 800876e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8008772:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008774:	4b0c      	ldr	r3, [pc, #48]	; (80087a8 <xPortStartScheduler+0x44>)
 8008776:	4a0c      	ldr	r2, [pc, #48]	; (80087a8 <xPortStartScheduler+0x44>)
 8008778:	6812      	ldr	r2, [r2, #0]
 800877a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800877e:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008780:	f000 f8a0 	bl	80088c4 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008784:	4b09      	ldr	r3, [pc, #36]	; (80087ac <xPortStartScheduler+0x48>)
 8008786:	2200      	movs	r2, #0
 8008788:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800878a:	f000 f8ad 	bl	80088e8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800878e:	4b08      	ldr	r3, [pc, #32]	; (80087b0 <xPortStartScheduler+0x4c>)
 8008790:	4a07      	ldr	r2, [pc, #28]	; (80087b0 <xPortStartScheduler+0x4c>)
 8008792:	6812      	ldr	r2, [r2, #0]
 8008794:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8008798:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800879a:	f7ff ffd5 	bl	8008748 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 800879e:	f7ff ffb5 	bl	800870c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80087a2:	2300      	movs	r3, #0
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	bd80      	pop	{r7, pc}
 80087a8:	e000ed20 	.word	0xe000ed20
 80087ac:	20000044 	.word	0x20000044
 80087b0:	e000ef34 	.word	0xe000ef34

080087b4 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 80087b4:	b480      	push	{r7}
 80087b6:	af00      	add	r7, sp, #0
	/* Not implemented in ports where there is nothing to return to.
	Artificially force an assert. */
	configASSERT( uxCriticalNesting == 1000UL );
}
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr

080087c0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80087c0:	b480      	push	{r7}
 80087c2:	b083      	sub	sp, #12
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ca:	f383 8811 	msr	BASEPRI, r3
 80087ce:	f3bf 8f6f 	isb	sy
 80087d2:	f3bf 8f4f 	dsb	sy
 80087d6:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80087d8:	4b04      	ldr	r3, [pc, #16]	; (80087ec <vPortEnterCritical+0x2c>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	1c5a      	adds	r2, r3, #1
 80087de:	4b03      	ldr	r3, [pc, #12]	; (80087ec <vPortEnterCritical+0x2c>)
 80087e0:	601a      	str	r2, [r3, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 80087e2:	370c      	adds	r7, #12
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr
 80087ec:	20000044 	.word	0x20000044

080087f0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80087f0:	b480      	push	{r7}
 80087f2:	b083      	sub	sp, #12
 80087f4:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 80087f6:	4b09      	ldr	r3, [pc, #36]	; (800881c <vPortExitCritical+0x2c>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	1e5a      	subs	r2, r3, #1
 80087fc:	4b07      	ldr	r3, [pc, #28]	; (800881c <vPortExitCritical+0x2c>)
 80087fe:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8008800:	4b06      	ldr	r3, [pc, #24]	; (800881c <vPortExitCritical+0x2c>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d104      	bne.n	8008812 <vPortExitCritical+0x22>
 8008808:	2300      	movs	r3, #0
 800880a:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008812:	370c      	adds	r7, #12
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr
 800881c:	20000044 	.word	0x20000044

08008820 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008820:	f3ef 8009 	mrs	r0, PSP
 8008824:	f3bf 8f6f 	isb	sy
 8008828:	4b14      	ldr	r3, [pc, #80]	; (800887c <pxCurrentTCBConst>)
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	f01e 0f10 	tst.w	lr, #16
 8008830:	bf08      	it	eq
 8008832:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008836:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800883a:	6010      	str	r0, [r2, #0]
 800883c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8008840:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008844:	f380 8811 	msr	BASEPRI, r0
 8008848:	f3bf 8f4f 	dsb	sy
 800884c:	f3bf 8f6f 	isb	sy
 8008850:	f7fe fa0c 	bl	8006c6c <vTaskSwitchContext>
 8008854:	f04f 0000 	mov.w	r0, #0
 8008858:	f380 8811 	msr	BASEPRI, r0
 800885c:	bc08      	pop	{r3}
 800885e:	6819      	ldr	r1, [r3, #0]
 8008860:	6808      	ldr	r0, [r1, #0]
 8008862:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008866:	f01e 0f10 	tst.w	lr, #16
 800886a:	bf08      	it	eq
 800886c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008870:	f380 8809 	msr	PSP, r0
 8008874:	f3bf 8f6f 	isb	sy
 8008878:	4770      	bx	lr
 800887a:	bf00      	nop

0800887c <pxCurrentTCBConst>:
 800887c:	200000bc 	.word	0x200000bc

08008880 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008886:	f3ef 8211 	mrs	r2, BASEPRI
 800888a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800888e:	f383 8811 	msr	BASEPRI, r3
 8008892:	f3bf 8f6f 	isb	sy
 8008896:	f3bf 8f4f 	dsb	sy
 800889a:	60fa      	str	r2, [r7, #12]
 800889c:	60bb      	str	r3, [r7, #8]
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800889e:	f7fe f937 	bl	8006b10 <xTaskIncrementTick>
 80088a2:	4603      	mov	r3, r0
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d003      	beq.n	80088b0 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80088a8:	4b05      	ldr	r3, [pc, #20]	; (80088c0 <SysTick_Handler+0x40>)
 80088aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088ae:	601a      	str	r2, [r3, #0]
 80088b0:	2300      	movs	r3, #0
 80088b2:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
}
 80088ba:	3710      	adds	r7, #16
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}
 80088c0:	e000ed04 	.word	0xe000ed04

080088c4 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80088c4:	b480      	push	{r7}
 80088c6:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80088c8:	4b04      	ldr	r3, [pc, #16]	; (80088dc <vPortSetupTimerInterrupt+0x18>)
 80088ca:	4a05      	ldr	r2, [pc, #20]	; (80088e0 <vPortSetupTimerInterrupt+0x1c>)
 80088cc:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80088ce:	4b05      	ldr	r3, [pc, #20]	; (80088e4 <vPortSetupTimerInterrupt+0x20>)
 80088d0:	2207      	movs	r2, #7
 80088d2:	601a      	str	r2, [r3, #0]
}
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr
 80088dc:	e000e014 	.word	0xe000e014
 80088e0:	0002903f 	.word	0x0002903f
 80088e4:	e000e010 	.word	0xe000e010

080088e8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80088e8:	f8df 0010 	ldr.w	r0, [pc, #16]	; 80088fc <vPortEnableVFP+0x14>
 80088ec:	6801      	ldr	r1, [r0, #0]
 80088ee:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80088f2:	6001      	str	r1, [r0, #0]
 80088f4:	4770      	bx	lr
 80088f6:	0000      	.short	0x0000
 80088f8:	e000ed08 	.word	0xe000ed08
 80088fc:	e000ed88 	.word	0xe000ed88

08008900 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b086      	sub	sp, #24
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008908:	2300      	movs	r3, #0
 800890a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800890c:	f7fe f83e 	bl	800698c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008910:	4b42      	ldr	r3, [pc, #264]	; (8008a1c <pvPortMalloc+0x11c>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d101      	bne.n	800891c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008918:	f000 f8e0 	bl	8008adc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800891c:	4b40      	ldr	r3, [pc, #256]	; (8008a20 <pvPortMalloc+0x120>)
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	4013      	ands	r3, r2
 8008924:	2b00      	cmp	r3, #0
 8008926:	d16d      	bne.n	8008a04 <pvPortMalloc+0x104>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d00d      	beq.n	800894a <pvPortMalloc+0x4a>
			{
				xWantedSize += xHeapStructSize;
 800892e:	2308      	movs	r3, #8
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	4413      	add	r3, r2
 8008934:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f003 0307 	and.w	r3, r3, #7
 800893c:	2b00      	cmp	r3, #0
 800893e:	d004      	beq.n	800894a <pvPortMalloc+0x4a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f023 0307 	bic.w	r3, r3, #7
 8008946:	3308      	adds	r3, #8
 8008948:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d059      	beq.n	8008a04 <pvPortMalloc+0x104>
 8008950:	4b34      	ldr	r3, [pc, #208]	; (8008a24 <pvPortMalloc+0x124>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	429a      	cmp	r2, r3
 8008958:	d854      	bhi.n	8008a04 <pvPortMalloc+0x104>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800895a:	4b33      	ldr	r3, [pc, #204]	; (8008a28 <pvPortMalloc+0x128>)
 800895c:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800895e:	4b32      	ldr	r3, [pc, #200]	; (8008a28 <pvPortMalloc+0x128>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008964:	e004      	b.n	8008970 <pvPortMalloc+0x70>
				{
					pxPreviousBlock = pxBlock;
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	617b      	str	r3, [r7, #20]
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	685a      	ldr	r2, [r3, #4]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	429a      	cmp	r2, r3
 8008978:	d203      	bcs.n	8008982 <pvPortMalloc+0x82>
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d1f1      	bne.n	8008966 <pvPortMalloc+0x66>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008982:	4b26      	ldr	r3, [pc, #152]	; (8008a1c <pvPortMalloc+0x11c>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	697a      	ldr	r2, [r7, #20]
 8008988:	429a      	cmp	r2, r3
 800898a:	d03b      	beq.n	8008a04 <pvPortMalloc+0x104>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	2308      	movs	r3, #8
 8008992:	4413      	add	r3, r2
 8008994:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	681a      	ldr	r2, [r3, #0]
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	685a      	ldr	r2, [r3, #4]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	1ad2      	subs	r2, r2, r3
 80089a6:	2308      	movs	r3, #8
 80089a8:	005b      	lsls	r3, r3, #1
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d90f      	bls.n	80089ce <pvPortMalloc+0xce>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80089ae:	697a      	ldr	r2, [r7, #20]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	4413      	add	r3, r2
 80089b4:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	685a      	ldr	r2, [r3, #4]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	1ad2      	subs	r2, r2, r3
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 80089c8:	68b8      	ldr	r0, [r7, #8]
 80089ca:	f000 f8e9 	bl	8008ba0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80089ce:	4b15      	ldr	r3, [pc, #84]	; (8008a24 <pvPortMalloc+0x124>)
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	1ad2      	subs	r2, r2, r3
 80089d8:	4b12      	ldr	r3, [pc, #72]	; (8008a24 <pvPortMalloc+0x124>)
 80089da:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80089dc:	4b11      	ldr	r3, [pc, #68]	; (8008a24 <pvPortMalloc+0x124>)
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	4b12      	ldr	r3, [pc, #72]	; (8008a2c <pvPortMalloc+0x12c>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d203      	bcs.n	80089f0 <pvPortMalloc+0xf0>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80089e8:	4b0e      	ldr	r3, [pc, #56]	; (8008a24 <pvPortMalloc+0x124>)
 80089ea:	681a      	ldr	r2, [r3, #0]
 80089ec:	4b0f      	ldr	r3, [pc, #60]	; (8008a2c <pvPortMalloc+0x12c>)
 80089ee:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	685a      	ldr	r2, [r3, #4]
 80089f4:	4b0a      	ldr	r3, [pc, #40]	; (8008a20 <pvPortMalloc+0x120>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	431a      	orrs	r2, r3
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	2200      	movs	r2, #0
 8008a02:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a04:	f7fd ffd0 	bl	80069a8 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d101      	bne.n	8008a12 <pvPortMalloc+0x112>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8008a0e:	f7f8 fd21 	bl	8001454 <vApplicationMallocFailedHook>
		}
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
 8008a12:	68fb      	ldr	r3, [r7, #12]
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3718      	adds	r7, #24
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}
 8008a1c:	2001c1c0 	.word	0x2001c1c0
 8008a20:	2001c1cc 	.word	0x2001c1cc
 8008a24:	2001c1c4 	.word	0x2001c1c4
 8008a28:	2001c1b8 	.word	0x2001c1b8
 8008a2c:	2001c1c8 	.word	0x2001c1c8

08008a30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d027      	beq.n	8008a92 <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008a42:	2308      	movs	r3, #8
 8008a44:	425b      	negs	r3, r3
 8008a46:	68fa      	ldr	r2, [r7, #12]
 8008a48:	4413      	add	r3, r2
 8008a4a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	685a      	ldr	r2, [r3, #4]
 8008a54:	4b10      	ldr	r3, [pc, #64]	; (8008a98 <vPortFree+0x68>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4013      	ands	r3, r2
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d019      	beq.n	8008a92 <vPortFree+0x62>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d115      	bne.n	8008a92 <vPortFree+0x62>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	685a      	ldr	r2, [r3, #4]
 8008a6a:	4b0b      	ldr	r3, [pc, #44]	; (8008a98 <vPortFree+0x68>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	43db      	mvns	r3, r3
 8008a70:	401a      	ands	r2, r3
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008a76:	f7fd ff89 	bl	800698c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	685a      	ldr	r2, [r3, #4]
 8008a7e:	4b07      	ldr	r3, [pc, #28]	; (8008a9c <vPortFree+0x6c>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	441a      	add	r2, r3
 8008a84:	4b05      	ldr	r3, [pc, #20]	; (8008a9c <vPortFree+0x6c>)
 8008a86:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008a88:	68b8      	ldr	r0, [r7, #8]
 8008a8a:	f000 f889 	bl	8008ba0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008a8e:	f7fd ff8b 	bl	80069a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008a92:	3710      	adds	r7, #16
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}
 8008a98:	2001c1cc 	.word	0x2001c1cc
 8008a9c:	2001c1c4 	.word	0x2001c1c4

08008aa0 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8008aa4:	4b03      	ldr	r3, [pc, #12]	; (8008ab4 <xPortGetFreeHeapSize+0x14>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr
 8008ab2:	bf00      	nop
 8008ab4:	2001c1c4 	.word	0x2001c1c4

08008ab8 <xPortGetMinimumEverFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
 8008ab8:	b480      	push	{r7}
 8008aba:	af00      	add	r7, sp, #0
	return xMinimumEverFreeBytesRemaining;
 8008abc:	4b03      	ldr	r3, [pc, #12]	; (8008acc <xPortGetMinimumEverFreeHeapSize+0x14>)
 8008abe:	681b      	ldr	r3, [r3, #0]
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac8:	4770      	bx	lr
 8008aca:	bf00      	nop
 8008acc:	2001c1c8 	.word	0x2001c1c8

08008ad0 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	af00      	add	r7, sp, #0
	/* This just exists to keep the linker quiet. */
}
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr

08008adc <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008adc:	b480      	push	{r7}
 8008ade:	b085      	sub	sp, #20
 8008ae0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
uint32_t ulAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008ae2:	f44f 33e0 	mov.w	r3, #114688	; 0x1c000
 8008ae6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	ulAddress = ( uint32_t ) ucHeap;
 8008ae8:	4b27      	ldr	r3, [pc, #156]	; (8008b88 <prvHeapInit+0xac>)
 8008aea:	60fb      	str	r3, [r7, #12]

	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f003 0307 	and.w	r3, r3, #7
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d00c      	beq.n	8008b10 <prvHeapInit+0x34>
	{
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	3307      	adds	r3, #7
 8008afa:	60fb      	str	r3, [r7, #12]
		ulAddress &= ~portBYTE_ALIGNMENT_MASK;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f023 0307 	bic.w	r3, r3, #7
 8008b02:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
 8008b04:	68ba      	ldr	r2, [r7, #8]
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	1ad2      	subs	r2, r2, r3
 8008b0a:	4b1f      	ldr	r3, [pc, #124]	; (8008b88 <prvHeapInit+0xac>)
 8008b0c:	4413      	add	r3, r2
 8008b0e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) ulAddress;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008b14:	4b1d      	ldr	r3, [pc, #116]	; (8008b8c <prvHeapInit+0xb0>)
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008b1a:	4b1c      	ldr	r3, [pc, #112]	; (8008b8c <prvHeapInit+0xb0>)
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	4413      	add	r3, r2
 8008b26:	60fb      	str	r3, [r7, #12]
	ulAddress -= xHeapStructSize;
 8008b28:	2308      	movs	r3, #8
 8008b2a:	68fa      	ldr	r2, [r7, #12]
 8008b2c:	1ad3      	subs	r3, r2, r3
 8008b2e:	60fb      	str	r3, [r7, #12]
	ulAddress &= ~portBYTE_ALIGNMENT_MASK;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f023 0307 	bic.w	r3, r3, #7
 8008b36:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) ulAddress;
 8008b38:	68fa      	ldr	r2, [r7, #12]
 8008b3a:	4b15      	ldr	r3, [pc, #84]	; (8008b90 <prvHeapInit+0xb4>)
 8008b3c:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8008b3e:	4b14      	ldr	r3, [pc, #80]	; (8008b90 <prvHeapInit+0xb4>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	2200      	movs	r2, #0
 8008b44:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008b46:	4b12      	ldr	r3, [pc, #72]	; (8008b90 <prvHeapInit+0xb4>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	68fa      	ldr	r2, [r7, #12]
 8008b56:	1ad2      	subs	r2, r2, r3
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008b5c:	4b0c      	ldr	r3, [pc, #48]	; (8008b90 <prvHeapInit+0xb4>)
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	685a      	ldr	r2, [r3, #4]
 8008b68:	4b0a      	ldr	r3, [pc, #40]	; (8008b94 <prvHeapInit+0xb8>)
 8008b6a:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	685a      	ldr	r2, [r3, #4]
 8008b70:	4b09      	ldr	r3, [pc, #36]	; (8008b98 <prvHeapInit+0xbc>)
 8008b72:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008b74:	4b09      	ldr	r3, [pc, #36]	; (8008b9c <prvHeapInit+0xc0>)
 8008b76:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008b7a:	601a      	str	r2, [r3, #0]
}
 8008b7c:	3714      	adds	r7, #20
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr
 8008b86:	bf00      	nop
 8008b88:	200001b8 	.word	0x200001b8
 8008b8c:	2001c1b8 	.word	0x2001c1b8
 8008b90:	2001c1c0 	.word	0x2001c1c0
 8008b94:	2001c1c8 	.word	0x2001c1c8
 8008b98:	2001c1c4 	.word	0x2001c1c4
 8008b9c:	2001c1cc 	.word	0x2001c1cc

08008ba0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b085      	sub	sp, #20
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008ba8:	4b27      	ldr	r3, [pc, #156]	; (8008c48 <prvInsertBlockIntoFreeList+0xa8>)
 8008baa:	60fb      	str	r3, [r7, #12]
 8008bac:	e002      	b.n	8008bb4 <prvInsertBlockIntoFreeList+0x14>
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	60fb      	str	r3, [r7, #12]
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d3f7      	bcc.n	8008bae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	68ba      	ldr	r2, [r7, #8]
 8008bc8:	441a      	add	r2, r3
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d108      	bne.n	8008be2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	685a      	ldr	r2, [r3, #4]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	441a      	add	r2, r3
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	68ba      	ldr	r2, [r7, #8]
 8008bec:	441a      	add	r2, r3
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d118      	bne.n	8008c28 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	4b14      	ldr	r3, [pc, #80]	; (8008c4c <prvInsertBlockIntoFreeList+0xac>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d00d      	beq.n	8008c1e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	685a      	ldr	r2, [r3, #4]
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	441a      	add	r2, r3
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	601a      	str	r2, [r3, #0]
 8008c1c:	e008      	b.n	8008c30 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008c1e:	4b0b      	ldr	r3, [pc, #44]	; (8008c4c <prvInsertBlockIntoFreeList+0xac>)
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	601a      	str	r2, [r3, #0]
 8008c26:	e003      	b.n	8008c30 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681a      	ldr	r2, [r3, #0]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008c30:	68fa      	ldr	r2, [r7, #12]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d002      	beq.n	8008c3e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c3e:	3714      	adds	r7, #20
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr
 8008c48:	2001c1b8 	.word	0x2001c1b8
 8008c4c:	2001c1c0 	.word	0x2001c1c0

08008c50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8008c50:	f8df d03c 	ldr.w	sp, [pc, #60]	; 8008c90 <LoopFillZerobss+0x16>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008c54:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008c56:	f000 b804 	b.w	8008c62 <LoopCopyDataInit>

08008c5a <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008c5a:	4b0e      	ldr	r3, [pc, #56]	; (8008c94 <LoopFillZerobss+0x1a>)
  ldr  r3, [r3, r1]
 8008c5c:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008c5e:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008c60:	3104      	adds	r1, #4

08008c62 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008c62:	480d      	ldr	r0, [pc, #52]	; (8008c98 <LoopFillZerobss+0x1e>)
  ldr  r3, =_edata
 8008c64:	4b0d      	ldr	r3, [pc, #52]	; (8008c9c <LoopFillZerobss+0x22>)
  adds  r2, r0, r1
 8008c66:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008c68:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008c6a:	f4ff aff6 	bcc.w	8008c5a <CopyDataInit>
  ldr  r2, =_sbss
 8008c6e:	4a0c      	ldr	r2, [pc, #48]	; (8008ca0 <LoopFillZerobss+0x26>)
  b  LoopFillZerobss
 8008c70:	f000 b803 	b.w	8008c7a <LoopFillZerobss>

08008c74 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008c74:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008c76:	f842 3b04 	str.w	r3, [r2], #4

08008c7a <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008c7a:	4b0a      	ldr	r3, [pc, #40]	; (8008ca4 <LoopFillZerobss+0x2a>)
  cmp  r2, r3
 8008c7c:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008c7e:	f4ff aff9 	bcc.w	8008c74 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008c82:	f7f7 fae5 	bl	8000250 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008c86:	f000 f811 	bl	8008cac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008c8a:	f7f8 f9ed 	bl	8001068 <main>
  bx  lr    
 8008c8e:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8008c90:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8008c94:	08008de4 	.word	0x08008de4
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008c98:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008c9c:	20000048 	.word	0x20000048
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8008ca0:	20000048 	.word	0x20000048
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008ca4:	2001c248 	.word	0x2001c248

08008ca8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008ca8:	f7ff bffe 	b.w	8008ca8 <ADC_IRQHandler>

08008cac <__libc_init_array>:
 8008cac:	b570      	push	{r4, r5, r6, lr}
 8008cae:	4b0e      	ldr	r3, [pc, #56]	; (8008ce8 <__libc_init_array+0x3c>)
 8008cb0:	4d0e      	ldr	r5, [pc, #56]	; (8008cec <__libc_init_array+0x40>)
 8008cb2:	1aed      	subs	r5, r5, r3
 8008cb4:	10ad      	asrs	r5, r5, #2
 8008cb6:	2400      	movs	r4, #0
 8008cb8:	461e      	mov	r6, r3
 8008cba:	42ac      	cmp	r4, r5
 8008cbc:	d004      	beq.n	8008cc8 <__libc_init_array+0x1c>
 8008cbe:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008cc2:	4790      	blx	r2
 8008cc4:	3401      	adds	r4, #1
 8008cc6:	e7f8      	b.n	8008cba <__libc_init_array+0xe>
 8008cc8:	f000 f836 	bl	8008d38 <_init>
 8008ccc:	4d08      	ldr	r5, [pc, #32]	; (8008cf0 <__libc_init_array+0x44>)
 8008cce:	4b09      	ldr	r3, [pc, #36]	; (8008cf4 <__libc_init_array+0x48>)
 8008cd0:	1aed      	subs	r5, r5, r3
 8008cd2:	10ad      	asrs	r5, r5, #2
 8008cd4:	2400      	movs	r4, #0
 8008cd6:	461e      	mov	r6, r3
 8008cd8:	42ac      	cmp	r4, r5
 8008cda:	d004      	beq.n	8008ce6 <__libc_init_array+0x3a>
 8008cdc:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008ce0:	4790      	blx	r2
 8008ce2:	3401      	adds	r4, #1
 8008ce4:	e7f8      	b.n	8008cd8 <__libc_init_array+0x2c>
 8008ce6:	bd70      	pop	{r4, r5, r6, pc}
 8008ce8:	08008ddc 	.word	0x08008ddc
 8008cec:	08008ddc 	.word	0x08008ddc
 8008cf0:	08008de0 	.word	0x08008de0
 8008cf4:	08008ddc 	.word	0x08008ddc

08008cf8 <memcmp>:
 8008cf8:	b530      	push	{r4, r5, lr}
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d008      	beq.n	8008d12 <memcmp+0x1a>
 8008d00:	5cc5      	ldrb	r5, [r0, r3]
 8008d02:	3301      	adds	r3, #1
 8008d04:	18cc      	adds	r4, r1, r3
 8008d06:	f814 4c01 	ldrb.w	r4, [r4, #-1]
 8008d0a:	42a5      	cmp	r5, r4
 8008d0c:	d0f6      	beq.n	8008cfc <memcmp+0x4>
 8008d0e:	1b28      	subs	r0, r5, r4
 8008d10:	bd30      	pop	{r4, r5, pc}
 8008d12:	2000      	movs	r0, #0
 8008d14:	bd30      	pop	{r4, r5, pc}

08008d16 <memcpy>:
 8008d16:	b510      	push	{r4, lr}
 8008d18:	2300      	movs	r3, #0
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d003      	beq.n	8008d26 <memcpy+0x10>
 8008d1e:	5ccc      	ldrb	r4, [r1, r3]
 8008d20:	54c4      	strb	r4, [r0, r3]
 8008d22:	3301      	adds	r3, #1
 8008d24:	e7f9      	b.n	8008d1a <memcpy+0x4>
 8008d26:	bd10      	pop	{r4, pc}

08008d28 <memset>:
 8008d28:	4402      	add	r2, r0
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d002      	beq.n	8008d36 <memset+0xe>
 8008d30:	f803 1b01 	strb.w	r1, [r3], #1
 8008d34:	e7fa      	b.n	8008d2c <memset+0x4>
 8008d36:	4770      	bx	lr

08008d38 <_init>:
 8008d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d3a:	bf00      	nop
 8008d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d3e:	bc08      	pop	{r3}
 8008d40:	469e      	mov	lr, r3
 8008d42:	4770      	bx	lr

08008d44 <_fini>:
 8008d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d46:	bf00      	nop
 8008d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d4a:	bc08      	pop	{r3}
 8008d4c:	469e      	mov	lr, r3
 8008d4e:	4770      	bx	lr
