
SAV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e08  08000188  08000188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08008f90  08008f90  00010f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008ff8  08008ff8  00010ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08008ffc  08008ffc  00010ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000003c  20000000  08009000  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00007198  2000003c  2000003c  0001803c  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  200071d4  200071d4  0001803c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0001803c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000b242  00000000  00000000  0001806c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001dd2  00000000  00000000  000232ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000288  00000000  00000000  00025080  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000405b  00000000  00000000  00025308  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000047c0  00000000  00000000  00029363  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      00000082  00000000  00000000  0002db23  2**0
                  CONTENTS, READONLY
 15 .debug_frame  00002d78  00000000  00000000  0002dba8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000020  00000000  00000000  00030920  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000003c 	.word	0x2000003c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008f78 	.word	0x08008f78

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008f78 	.word	0x08008f78
 80001c4:	20000040 	.word	0x20000040

080001c8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001cc:	4b15      	ldr	r3, [pc, #84]	; (8000224 <SystemInit+0x5c>)
 80001ce:	4a15      	ldr	r2, [pc, #84]	; (8000224 <SystemInit+0x5c>)
 80001d0:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80001d4:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80001d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001dc:	4b12      	ldr	r3, [pc, #72]	; (8000228 <SystemInit+0x60>)
 80001de:	4a12      	ldr	r2, [pc, #72]	; (8000228 <SystemInit+0x60>)
 80001e0:	6812      	ldr	r2, [r2, #0]
 80001e2:	f042 0201 	orr.w	r2, r2, #1
 80001e6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80001e8:	4b0f      	ldr	r3, [pc, #60]	; (8000228 <SystemInit+0x60>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001ee:	4a0e      	ldr	r2, [pc, #56]	; (8000228 <SystemInit+0x60>)
 80001f0:	4b0d      	ldr	r3, [pc, #52]	; (8000228 <SystemInit+0x60>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80001f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80001fc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80001fe:	4b0a      	ldr	r3, [pc, #40]	; (8000228 <SystemInit+0x60>)
 8000200:	4a0a      	ldr	r2, [pc, #40]	; (800022c <SystemInit+0x64>)
 8000202:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000204:	4b08      	ldr	r3, [pc, #32]	; (8000228 <SystemInit+0x60>)
 8000206:	4a08      	ldr	r2, [pc, #32]	; (8000228 <SystemInit+0x60>)
 8000208:	6812      	ldr	r2, [r2, #0]
 800020a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800020e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000210:	4b05      	ldr	r3, [pc, #20]	; (8000228 <SystemInit+0x60>)
 8000212:	2200      	movs	r2, #0
 8000214:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000216:	f000 f887 	bl	8000328 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800021a:	4b02      	ldr	r3, [pc, #8]	; (8000224 <SystemInit+0x5c>)
 800021c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000220:	609a      	str	r2, [r3, #8]
#endif
}
 8000222:	bd80      	pop	{r7, pc}
 8000224:	e000ed00 	.word	0xe000ed00
 8000228:	40023800 	.word	0x40023800
 800022c:	24003010 	.word	0x24003010

08000230 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000230:	b480      	push	{r7}
 8000232:	b087      	sub	sp, #28
 8000234:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000236:	2300      	movs	r3, #0
 8000238:	613b      	str	r3, [r7, #16]
 800023a:	2300      	movs	r3, #0
 800023c:	617b      	str	r3, [r7, #20]
 800023e:	2302      	movs	r3, #2
 8000240:	60fb      	str	r3, [r7, #12]
 8000242:	2300      	movs	r3, #0
 8000244:	60bb      	str	r3, [r7, #8]
 8000246:	2302      	movs	r3, #2
 8000248:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800024a:	4b32      	ldr	r3, [pc, #200]	; (8000314 <SystemCoreClockUpdate+0xe4>)
 800024c:	689b      	ldr	r3, [r3, #8]
 800024e:	f003 030c 	and.w	r3, r3, #12
 8000252:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000254:	693b      	ldr	r3, [r7, #16]
 8000256:	2b04      	cmp	r3, #4
 8000258:	d007      	beq.n	800026a <SystemCoreClockUpdate+0x3a>
 800025a:	2b08      	cmp	r3, #8
 800025c:	d009      	beq.n	8000272 <SystemCoreClockUpdate+0x42>
 800025e:	2b00      	cmp	r3, #0
 8000260:	d13f      	bne.n	80002e2 <SystemCoreClockUpdate+0xb2>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000262:	4b2d      	ldr	r3, [pc, #180]	; (8000318 <SystemCoreClockUpdate+0xe8>)
 8000264:	4a2d      	ldr	r2, [pc, #180]	; (800031c <SystemCoreClockUpdate+0xec>)
 8000266:	601a      	str	r2, [r3, #0]
      break;
 8000268:	e03f      	b.n	80002ea <SystemCoreClockUpdate+0xba>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800026a:	4b2b      	ldr	r3, [pc, #172]	; (8000318 <SystemCoreClockUpdate+0xe8>)
 800026c:	4a2c      	ldr	r2, [pc, #176]	; (8000320 <SystemCoreClockUpdate+0xf0>)
 800026e:	601a      	str	r2, [r3, #0]
      break;
 8000270:	e03b      	b.n	80002ea <SystemCoreClockUpdate+0xba>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000272:	4b28      	ldr	r3, [pc, #160]	; (8000314 <SystemCoreClockUpdate+0xe4>)
 8000274:	685b      	ldr	r3, [r3, #4]
 8000276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800027a:	0d9b      	lsrs	r3, r3, #22
 800027c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800027e:	4b25      	ldr	r3, [pc, #148]	; (8000314 <SystemCoreClockUpdate+0xe4>)
 8000280:	685b      	ldr	r3, [r3, #4]
 8000282:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000286:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d00d      	beq.n	80002aa <SystemCoreClockUpdate+0x7a>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800028e:	4a24      	ldr	r2, [pc, #144]	; (8000320 <SystemCoreClockUpdate+0xf0>)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	fbb2 f2f3 	udiv	r2, r2, r3
 8000296:	4b1f      	ldr	r3, [pc, #124]	; (8000314 <SystemCoreClockUpdate+0xe4>)
 8000298:	6859      	ldr	r1, [r3, #4]
 800029a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800029e:	400b      	ands	r3, r1
 80002a0:	099b      	lsrs	r3, r3, #6
 80002a2:	fb03 f302 	mul.w	r3, r3, r2
 80002a6:	617b      	str	r3, [r7, #20]
 80002a8:	e00c      	b.n	80002c4 <SystemCoreClockUpdate+0x94>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80002aa:	4a1c      	ldr	r2, [pc, #112]	; (800031c <SystemCoreClockUpdate+0xec>)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80002b2:	4b18      	ldr	r3, [pc, #96]	; (8000314 <SystemCoreClockUpdate+0xe4>)
 80002b4:	6859      	ldr	r1, [r3, #4]
 80002b6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80002ba:	400b      	ands	r3, r1
 80002bc:	099b      	lsrs	r3, r3, #6
 80002be:	fb03 f302 	mul.w	r3, r3, r2
 80002c2:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80002c4:	4b13      	ldr	r3, [pc, #76]	; (8000314 <SystemCoreClockUpdate+0xe4>)
 80002c6:	685b      	ldr	r3, [r3, #4]
 80002c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80002cc:	0c1b      	lsrs	r3, r3, #16
 80002ce:	3301      	adds	r3, #1
 80002d0:	005b      	lsls	r3, r3, #1
 80002d2:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80002d4:	697a      	ldr	r2, [r7, #20]
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80002dc:	4b0e      	ldr	r3, [pc, #56]	; (8000318 <SystemCoreClockUpdate+0xe8>)
 80002de:	601a      	str	r2, [r3, #0]
      break;
 80002e0:	e003      	b.n	80002ea <SystemCoreClockUpdate+0xba>
    default:
      SystemCoreClock = HSI_VALUE;
 80002e2:	4b0d      	ldr	r3, [pc, #52]	; (8000318 <SystemCoreClockUpdate+0xe8>)
 80002e4:	4a0d      	ldr	r2, [pc, #52]	; (800031c <SystemCoreClockUpdate+0xec>)
 80002e6:	601a      	str	r2, [r3, #0]
      break;
 80002e8:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80002ea:	4b0a      	ldr	r3, [pc, #40]	; (8000314 <SystemCoreClockUpdate+0xe4>)
 80002ec:	689b      	ldr	r3, [r3, #8]
 80002ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80002f2:	091b      	lsrs	r3, r3, #4
 80002f4:	4a0b      	ldr	r2, [pc, #44]	; (8000324 <SystemCoreClockUpdate+0xf4>)
 80002f6:	5cd3      	ldrb	r3, [r2, r3]
 80002f8:	b2db      	uxtb	r3, r3
 80002fa:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80002fc:	4b06      	ldr	r3, [pc, #24]	; (8000318 <SystemCoreClockUpdate+0xe8>)
 80002fe:	681a      	ldr	r2, [r3, #0]
 8000300:	693b      	ldr	r3, [r7, #16]
 8000302:	40da      	lsrs	r2, r3
 8000304:	4b04      	ldr	r3, [pc, #16]	; (8000318 <SystemCoreClockUpdate+0xe8>)
 8000306:	601a      	str	r2, [r3, #0]
}
 8000308:	371c      	adds	r7, #28
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	40023800 	.word	0x40023800
 8000318:	20000000 	.word	0x20000000
 800031c:	00f42400 	.word	0x00f42400
 8000320:	007a1200 	.word	0x007a1200
 8000324:	20000004 	.word	0x20000004

08000328 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800032e:	2300      	movs	r3, #0
 8000330:	607b      	str	r3, [r7, #4]
 8000332:	2300      	movs	r3, #0
 8000334:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000336:	4b35      	ldr	r3, [pc, #212]	; (800040c <SetSysClock+0xe4>)
 8000338:	4a34      	ldr	r2, [pc, #208]	; (800040c <SetSysClock+0xe4>)
 800033a:	6812      	ldr	r2, [r2, #0]
 800033c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000340:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000342:	4b32      	ldr	r3, [pc, #200]	; (800040c <SetSysClock+0xe4>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800034a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	3301      	adds	r3, #1
 8000350:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000352:	683b      	ldr	r3, [r7, #0]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d103      	bne.n	8000360 <SetSysClock+0x38>
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800035e:	d1f0      	bne.n	8000342 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000360:	4b2a      	ldr	r3, [pc, #168]	; (800040c <SetSysClock+0xe4>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000368:	2b00      	cmp	r3, #0
 800036a:	d002      	beq.n	8000372 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800036c:	2301      	movs	r3, #1
 800036e:	603b      	str	r3, [r7, #0]
 8000370:	e001      	b.n	8000376 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000372:	2300      	movs	r3, #0
 8000374:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000376:	683b      	ldr	r3, [r7, #0]
 8000378:	2b01      	cmp	r3, #1
 800037a:	d142      	bne.n	8000402 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800037c:	4b23      	ldr	r3, [pc, #140]	; (800040c <SetSysClock+0xe4>)
 800037e:	4a23      	ldr	r2, [pc, #140]	; (800040c <SetSysClock+0xe4>)
 8000380:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000382:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000386:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000388:	4b21      	ldr	r3, [pc, #132]	; (8000410 <SetSysClock+0xe8>)
 800038a:	4a21      	ldr	r2, [pc, #132]	; (8000410 <SetSysClock+0xe8>)
 800038c:	6812      	ldr	r2, [r2, #0]
 800038e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000392:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000394:	4b1d      	ldr	r3, [pc, #116]	; (800040c <SetSysClock+0xe4>)
 8000396:	4a1d      	ldr	r2, [pc, #116]	; (800040c <SetSysClock+0xe4>)
 8000398:	6892      	ldr	r2, [r2, #8]
 800039a:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800039c:	4b1b      	ldr	r3, [pc, #108]	; (800040c <SetSysClock+0xe4>)
 800039e:	4a1b      	ldr	r2, [pc, #108]	; (800040c <SetSysClock+0xe4>)
 80003a0:	6892      	ldr	r2, [r2, #8]
 80003a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80003a6:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80003a8:	4b18      	ldr	r3, [pc, #96]	; (800040c <SetSysClock+0xe4>)
 80003aa:	4a18      	ldr	r2, [pc, #96]	; (800040c <SetSysClock+0xe4>)
 80003ac:	6892      	ldr	r2, [r2, #8]
 80003ae:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 80003b2:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80003b4:	4b15      	ldr	r3, [pc, #84]	; (800040c <SetSysClock+0xe4>)
 80003b6:	4a17      	ldr	r2, [pc, #92]	; (8000414 <SetSysClock+0xec>)
 80003b8:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80003ba:	4b14      	ldr	r3, [pc, #80]	; (800040c <SetSysClock+0xe4>)
 80003bc:	4a13      	ldr	r2, [pc, #76]	; (800040c <SetSysClock+0xe4>)
 80003be:	6812      	ldr	r2, [r2, #0]
 80003c0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80003c4:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80003c6:	bf00      	nop
 80003c8:	4b10      	ldr	r3, [pc, #64]	; (800040c <SetSysClock+0xe4>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d0f9      	beq.n	80003c8 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80003d4:	4b10      	ldr	r3, [pc, #64]	; (8000418 <SetSysClock+0xf0>)
 80003d6:	f240 7205 	movw	r2, #1797	; 0x705
 80003da:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80003dc:	4b0b      	ldr	r3, [pc, #44]	; (800040c <SetSysClock+0xe4>)
 80003de:	4a0b      	ldr	r2, [pc, #44]	; (800040c <SetSysClock+0xe4>)
 80003e0:	6892      	ldr	r2, [r2, #8]
 80003e2:	f022 0203 	bic.w	r2, r2, #3
 80003e6:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80003e8:	4b08      	ldr	r3, [pc, #32]	; (800040c <SetSysClock+0xe4>)
 80003ea:	4a08      	ldr	r2, [pc, #32]	; (800040c <SetSysClock+0xe4>)
 80003ec:	6892      	ldr	r2, [r2, #8]
 80003ee:	f042 0202 	orr.w	r2, r2, #2
 80003f2:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80003f4:	bf00      	nop
 80003f6:	4b05      	ldr	r3, [pc, #20]	; (800040c <SetSysClock+0xe4>)
 80003f8:	689b      	ldr	r3, [r3, #8]
 80003fa:	f003 030c 	and.w	r3, r3, #12
 80003fe:	2b08      	cmp	r3, #8
 8000400:	d1f9      	bne.n	80003f6 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr
 800040c:	40023800 	.word	0x40023800
 8000410:	40007000 	.word	0x40007000
 8000414:	07405410 	.word	0x07405410
 8000418:	40023c00 	.word	0x40023c00

0800041c <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
}
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr

08000428 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 800042c:	e7fe      	b.n	800042c <HardFault_Handler+0x4>
 800042e:	bf00      	nop

08000430 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000434:	e7fe      	b.n	8000434 <MemManage_Handler+0x4>
 8000436:	bf00      	nop

08000438 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 800043c:	e7fe      	b.n	800043c <BusFault_Handler+0x4>
 800043e:	bf00      	nop

08000440 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000444:	e7fe      	b.n	8000444 <UsageFault_Handler+0x4>
 8000446:	bf00      	nop

08000448 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
}
 800044c:	46bd      	mov	sp, r7
 800044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000452:	4770      	bx	lr

08000454 <sendPacket>:
 * %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */

/*********************************************************************************************
 * Base function to send all packets (or strings to setup WiFi module)
 *********************************************************************************************/
uint8_t sendPacket( char* packet, uint8_t length ) {
 8000454:	b580      	push	{r7, lr}
 8000456:	b084      	sub	sp, #16
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	460b      	mov	r3, r1
 800045e:	70fb      	strb	r3, [r7, #3]
	int i;
	for( i=0; i < length; i++ ) {
 8000460:	2300      	movs	r3, #0
 8000462:	60fb      	str	r3, [r7, #12]
 8000464:	e013      	b.n	800048e <sendPacket+0x3a>
		// Wait for data register to be empty before adding the next char
		while( !(WIFI_USART->SR & 0x00000040) );
 8000466:	bf00      	nop
 8000468:	4b19      	ldr	r3, [pc, #100]	; (80004d0 <sendPacket+0x7c>)
 800046a:	881b      	ldrh	r3, [r3, #0]
 800046c:	b29b      	uxth	r3, r3
 800046e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000472:	2b00      	cmp	r3, #0
 8000474:	d0f8      	beq.n	8000468 <sendPacket+0x14>

		// Put into TX register
		USART_SendData( WIFI_USART, *packet );
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	4815      	ldr	r0, [pc, #84]	; (80004d0 <sendPacket+0x7c>)
 800047c:	4619      	mov	r1, r3
 800047e:	f001 f805 	bl	800148c <USART_SendData>
		packet++;
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	3301      	adds	r3, #1
 8000486:	607b      	str	r3, [r7, #4]
/*********************************************************************************************
 * Base function to send all packets (or strings to setup WiFi module)
 *********************************************************************************************/
uint8_t sendPacket( char* packet, uint8_t length ) {
	int i;
	for( i=0; i < length; i++ ) {
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	3301      	adds	r3, #1
 800048c:	60fb      	str	r3, [r7, #12]
 800048e:	78fa      	ldrb	r2, [r7, #3]
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	429a      	cmp	r2, r3
 8000494:	dce7      	bgt.n	8000466 <sendPacket+0x12>
		USART_SendData( WIFI_USART, *packet );
		packet++;
	}

	// WiFi module expects \r\n at the end of every string
	while( !(WIFI_USART->SR & 0x00000040) );
 8000496:	bf00      	nop
 8000498:	4b0d      	ldr	r3, [pc, #52]	; (80004d0 <sendPacket+0x7c>)
 800049a:	881b      	ldrh	r3, [r3, #0]
 800049c:	b29b      	uxth	r3, r3
 800049e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d0f8      	beq.n	8000498 <sendPacket+0x44>
	USART_SendData( WIFI_USART, '\r' );
 80004a6:	480a      	ldr	r0, [pc, #40]	; (80004d0 <sendPacket+0x7c>)
 80004a8:	210d      	movs	r1, #13
 80004aa:	f000 ffef 	bl	800148c <USART_SendData>

	while( !(WIFI_USART->SR & 0x00000040) );
 80004ae:	bf00      	nop
 80004b0:	4b07      	ldr	r3, [pc, #28]	; (80004d0 <sendPacket+0x7c>)
 80004b2:	881b      	ldrh	r3, [r3, #0]
 80004b4:	b29b      	uxth	r3, r3
 80004b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d0f8      	beq.n	80004b0 <sendPacket+0x5c>
	USART_SendData( WIFI_USART, '\n' );
 80004be:	4804      	ldr	r0, [pc, #16]	; (80004d0 <sendPacket+0x7c>)
 80004c0:	210a      	movs	r1, #10
 80004c2:	f000 ffe3 	bl	800148c <USART_SendData>

	return SUCCESS;
 80004c6:	2301      	movs	r3, #1
}
 80004c8:	4618      	mov	r0, r3
 80004ca:	3710      	adds	r7, #16
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	40011000 	.word	0x40011000

080004d4 <sendAck>:


/*********************************************************************************************
 * Send Ack
 *********************************************************************************************/
uint8_t sendAck( Header* header, uint8_t success ) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b088      	sub	sp, #32
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 80004dc:	460b      	mov	r3, r1
 80004de:	70fb      	strb	r3, [r7, #3]

	// Fill Ack struct
	Ack* ack = pvPortMalloc( sizeof(Ack) );
 80004e0:	2001      	movs	r0, #1
 80004e2:	f008 fadf 	bl	8008aa4 <pvPortMalloc>
 80004e6:	61f8      	str	r0, [r7, #28]
	ack->success = success;
 80004e8:	69fb      	ldr	r3, [r7, #28]
 80004ea:	78fa      	ldrb	r2, [r7, #3]
 80004ec:	701a      	strb	r2, [r3, #0]

	// Update the length of the packet in the header
	header->length = (HEADER_LENGTH + ACK_LENGTH);
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	2206      	movs	r2, #6
 80004f2:	711a      	strb	r2, [r3, #4]

	// Convert structs into strings
	char* header_char = (char*) header;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	61bb      	str	r3, [r7, #24]
	char* ack_char = (char*) ack;
 80004f8:	69fb      	ldr	r3, [r7, #28]
 80004fa:	617b      	str	r3, [r7, #20]

	// Package header and payload together
	char* ack_packet = pvPortMalloc( sizeof((uint8_t)(header->length)) );
 80004fc:	2001      	movs	r0, #1
 80004fe:	f008 fad1 	bl	8008aa4 <pvPortMalloc>
 8000502:	6138      	str	r0, [r7, #16]
	pack( ack_packet, header_char, 0 );
 8000504:	6938      	ldr	r0, [r7, #16]
 8000506:	69b9      	ldr	r1, [r7, #24]
 8000508:	2200      	movs	r2, #0
 800050a:	f000 f999 	bl	8000840 <pack>
	pack( ack_packet, ack_char, HEADER_LENGTH );
 800050e:	6938      	ldr	r0, [r7, #16]
 8000510:	6979      	ldr	r1, [r7, #20]
 8000512:	2205      	movs	r2, #5
 8000514:	f000 f994 	bl	8000840 <pack>

	// Send packet
	uint8_t result = sendPacket( ack_packet, header->length );
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	791b      	ldrb	r3, [r3, #4]
 800051c:	6938      	ldr	r0, [r7, #16]
 800051e:	4619      	mov	r1, r3
 8000520:	f7ff ff98 	bl	8000454 <sendPacket>
 8000524:	4603      	mov	r3, r0
 8000526:	73fb      	strb	r3, [r7, #15]

	// Free variables
	vPortFree(ack);
 8000528:	69f8      	ldr	r0, [r7, #28]
 800052a:	f008 fb81 	bl	8008c30 <vPortFree>
	vPortFree(ack_packet);
 800052e:	6938      	ldr	r0, [r7, #16]
 8000530:	f008 fb7e 	bl	8008c30 <vPortFree>

	return result;
 8000534:	7bfb      	ldrb	r3, [r7, #15]
}
 8000536:	4618      	mov	r0, r3
 8000538:	3720      	adds	r7, #32
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop

08000540 <sendPing>:


/*********************************************************************************************
 * Send Ping
 *********************************************************************************************/
uint8_t sendPing( Header* header ) {
 8000540:	b580      	push	{r7, lr}
 8000542:	b086      	sub	sp, #24
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]

	// Update the length of the packet in the header
	header->length = (HEADER_LENGTH + PING_LENGTH);
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2205      	movs	r2, #5
 800054c:	711a      	strb	r2, [r3, #4]

	// Convert structs into strings
	char* header_char = (char*) header;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	617b      	str	r3, [r7, #20]

	// Package header and payload together
	char* ping_packet = pvPortMalloc( sizeof((uint8_t)(header->length)) );
 8000552:	2001      	movs	r0, #1
 8000554:	f008 faa6 	bl	8008aa4 <pvPortMalloc>
 8000558:	6138      	str	r0, [r7, #16]
	pack( ping_packet, header_char, 0 );
 800055a:	6938      	ldr	r0, [r7, #16]
 800055c:	6979      	ldr	r1, [r7, #20]
 800055e:	2200      	movs	r2, #0
 8000560:	f000 f96e 	bl	8000840 <pack>

	// Send packet
	sendPacket( "AT+CIPSEND=5", 12 );
 8000564:	480c      	ldr	r0, [pc, #48]	; (8000598 <sendPing+0x58>)
 8000566:	210c      	movs	r1, #12
 8000568:	f7ff ff74 	bl	8000454 <sendPacket>
	while(received_string[0] != 'O');
 800056c:	bf00      	nop
 800056e:	4b0b      	ldr	r3, [pc, #44]	; (800059c <sendPing+0x5c>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	b2db      	uxtb	r3, r3
 8000574:	2b4f      	cmp	r3, #79	; 0x4f
 8000576:	d1fa      	bne.n	800056e <sendPing+0x2e>
//	uint32_t t = 10000000;
//	while( t-- );
	uint8_t result = sendPacket( ping_packet, header->length );
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	791b      	ldrb	r3, [r3, #4]
 800057c:	6938      	ldr	r0, [r7, #16]
 800057e:	4619      	mov	r1, r3
 8000580:	f7ff ff68 	bl	8000454 <sendPacket>
 8000584:	4603      	mov	r3, r0
 8000586:	73fb      	strb	r3, [r7, #15]

	// Free variables
	vPortFree(ping_packet);
 8000588:	6938      	ldr	r0, [r7, #16]
 800058a:	f008 fb51 	bl	8008c30 <vPortFree>

	return result;
 800058e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000590:	4618      	mov	r0, r3
 8000592:	3718      	adds	r7, #24
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	08008f90 	.word	0x08008f90
 800059c:	200071c4 	.word	0x200071c4

080005a0 <sendSetMode>:


/*********************************************************************************************
 * Send SetMode
 *********************************************************************************************/
uint8_t sendSetMode( Header* header ) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b088      	sub	sp, #32
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	// Fill SetMode struct
	SetMode* set_mode = pvPortMalloc( sizeof(SetMode) );
 80005a8:	2000      	movs	r0, #0
 80005aa:	f008 fa7b 	bl	8008aa4 <pvPortMalloc>
 80005ae:	61f8      	str	r0, [r7, #28]

	// Update the length of the packet in the header
	header->length = (HEADER_LENGTH + SET_MODE_LENGTH);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	2205      	movs	r2, #5
 80005b4:	711a      	strb	r2, [r3, #4]

	// Convert structs into strings
	char* header_char = (char*) header;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	61bb      	str	r3, [r7, #24]
	char* set_mode_char = (char*) set_mode;
 80005ba:	69fb      	ldr	r3, [r7, #28]
 80005bc:	617b      	str	r3, [r7, #20]

	// Package header and payload together
	char* set_mode_packet = pvPortMalloc( sizeof((uint8_t)(header->length)) );
 80005be:	2001      	movs	r0, #1
 80005c0:	f008 fa70 	bl	8008aa4 <pvPortMalloc>
 80005c4:	6138      	str	r0, [r7, #16]
	pack( set_mode_packet, header_char, 0 );
 80005c6:	6938      	ldr	r0, [r7, #16]
 80005c8:	69b9      	ldr	r1, [r7, #24]
 80005ca:	2200      	movs	r2, #0
 80005cc:	f000 f938 	bl	8000840 <pack>
	pack( set_mode_packet, set_mode_char, HEADER_LENGTH );
 80005d0:	6938      	ldr	r0, [r7, #16]
 80005d2:	6979      	ldr	r1, [r7, #20]
 80005d4:	2205      	movs	r2, #5
 80005d6:	f000 f933 	bl	8000840 <pack>

	// Send packet
	uint8_t result = sendPacket( set_mode_packet, header->length );
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	791b      	ldrb	r3, [r3, #4]
 80005de:	6938      	ldr	r0, [r7, #16]
 80005e0:	4619      	mov	r1, r3
 80005e2:	f7ff ff37 	bl	8000454 <sendPacket>
 80005e6:	4603      	mov	r3, r0
 80005e8:	73fb      	strb	r3, [r7, #15]

	// Free variables
	vPortFree(set_mode);
 80005ea:	69f8      	ldr	r0, [r7, #28]
 80005ec:	f008 fb20 	bl	8008c30 <vPortFree>
	vPortFree(set_mode_packet);
 80005f0:	6938      	ldr	r0, [r7, #16]
 80005f2:	f008 fb1d 	bl	8008c30 <vPortFree>

	return result;
 80005f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3720      	adds	r7, #32
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <handlePacket>:
 * %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */

/*********************************************************************************************
 * Base function to handle all packets
 *********************************************************************************************/
PacketResult handlePacket( char* packet ) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]

	// Extract the header
	Header* header = pvPortMalloc( sizeof(Header) );
 8000608:	2005      	movs	r0, #5
 800060a:	f008 fa4b 	bl	8008aa4 <pvPortMalloc>
 800060e:	6178      	str	r0, [r7, #20]
	char* header_char = (char*) header;
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	613b      	str	r3, [r7, #16]
	unpack( packet, header_char, 0 );
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	6939      	ldr	r1, [r7, #16]
 8000618:	2200      	movs	r2, #0
 800061a:	f000 f933 	bl	8000884 <unpack>

	// Convert string back to Header struct
	header = (Header*) header_char;
 800061e:	693b      	ldr	r3, [r7, #16]
 8000620:	617b      	str	r3, [r7, #20]

	// Based on packet type, call the correct handle function
	PacketResult packet_result;
	packet_result.type = header->type;
 8000622:	697b      	ldr	r3, [r7, #20]
 8000624:	78db      	ldrb	r3, [r3, #3]
 8000626:	723b      	strb	r3, [r7, #8]
	switch( header->type ) {
 8000628:	697b      	ldr	r3, [r7, #20]
 800062a:	78db      	ldrb	r3, [r3, #3]
 800062c:	2b04      	cmp	r3, #4
 800062e:	d829      	bhi.n	8000684 <handlePacket+0x84>
 8000630:	a201      	add	r2, pc, #4	; (adr r2, 8000638 <handlePacket+0x38>)
 8000632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000636:	bf00      	nop
 8000638:	0800064d 	.word	0x0800064d
 800063c:	0800065b 	.word	0x0800065b
 8000640:	08000669 	.word	0x08000669
 8000644:	080006a9 	.word	0x080006a9
 8000648:	08000677 	.word	0x08000677
		case ack:
			packet_result.result = handleAck( header, packet );
 800064c:	6978      	ldr	r0, [r7, #20]
 800064e:	6879      	ldr	r1, [r7, #4]
 8000650:	f000 f83c 	bl	80006cc <handleAck>
 8000654:	4603      	mov	r3, r0
 8000656:	727b      	strb	r3, [r7, #9]
			break;
 8000658:	e027      	b.n	80006aa <handlePacket+0xaa>
		case ping:
			packet_result.result = handlePing( header, packet );
 800065a:	6978      	ldr	r0, [r7, #20]
 800065c:	6879      	ldr	r1, [r7, #4]
 800065e:	f000 f853 	bl	8000708 <handlePing>
 8000662:	4603      	mov	r3, r0
 8000664:	727b      	strb	r3, [r7, #9]
			break;
 8000666:	e020      	b.n	80006aa <handlePacket+0xaa>
		case trafficLightCurrent:
			packet_result.result = handleTrafficLightCurrent( header, packet );
 8000668:	6978      	ldr	r0, [r7, #20]
 800066a:	6879      	ldr	r1, [r7, #4]
 800066c:	f000 f87a 	bl	8000764 <handleTrafficLightCurrent>
 8000670:	4603      	mov	r3, r0
 8000672:	727b      	strb	r3, [r7, #9]
			break;
 8000674:	e019      	b.n	80006aa <handlePacket+0xaa>
		case trafficLightFuture:
			//packet_result.result = handleTrafficLightFuture( header, packet );
			break;
		case changeMode:
			packet_result.result = handleChangeMode( header, packet );
 8000676:	6978      	ldr	r0, [r7, #20]
 8000678:	6879      	ldr	r1, [r7, #4]
 800067a:	f000 f8a7 	bl	80007cc <handleChangeMode>
 800067e:	4603      	mov	r3, r0
 8000680:	727b      	strb	r3, [r7, #9]
			break;
 8000682:	e012      	b.n	80006aa <handlePacket+0xaa>
		default:
			// If there is no handle function, send back negative Ack
			header->dest = header->addr;
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	785a      	ldrb	r2, [r3, #1]
 8000688:	697b      	ldr	r3, [r7, #20]
 800068a:	701a      	strb	r2, [r3, #0]
			header->addr = MY_ADDR;
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	2202      	movs	r2, #2
 8000690:	705a      	strb	r2, [r3, #1]
			header->mode = allModes;
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	2200      	movs	r2, #0
 8000696:	709a      	strb	r2, [r3, #2]
			header->type = ack;
 8000698:	697b      	ldr	r3, [r7, #20]
 800069a:	2200      	movs	r2, #0
 800069c:	70da      	strb	r2, [r3, #3]
			sendAck( header, FAILURE );
 800069e:	6978      	ldr	r0, [r7, #20]
 80006a0:	2100      	movs	r1, #0
 80006a2:	f7ff ff17 	bl	80004d4 <sendAck>
			break;
 80006a6:	e000      	b.n	80006aa <handlePacket+0xaa>
		case trafficLightCurrent:
			packet_result.result = handleTrafficLightCurrent( header, packet );
			break;
		case trafficLightFuture:
			//packet_result.result = handleTrafficLightFuture( header, packet );
			break;
 80006a8:	bf00      	nop
			sendAck( header, FAILURE );
			break;
	}

	// Free variables
	vPortFree( header );
 80006aa:	6978      	ldr	r0, [r7, #20]
 80006ac:	f008 fac0 	bl	8008c30 <vPortFree>

	return packet_result;
 80006b0:	893b      	ldrh	r3, [r7, #8]
 80006b2:	81bb      	strh	r3, [r7, #12]
 80006b4:	2300      	movs	r3, #0
 80006b6:	7b3a      	ldrb	r2, [r7, #12]
 80006b8:	f362 0307 	bfi	r3, r2, #0, #8
 80006bc:	7b7a      	ldrb	r2, [r7, #13]
 80006be:	f362 230f 	bfi	r3, r2, #8, #8
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3718      	adds	r7, #24
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop

080006cc <handleAck>:


/*********************************************************************************************
 * Handle Ack
 *********************************************************************************************/
uint8_t handleAck( Header* header, char* packet ) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b086      	sub	sp, #24
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	6039      	str	r1, [r7, #0]

	// Extract the pay load
	Ack* ack = pvPortMalloc( sizeof(Ack) );
 80006d6:	2001      	movs	r0, #1
 80006d8:	f008 f9e4 	bl	8008aa4 <pvPortMalloc>
 80006dc:	6178      	str	r0, [r7, #20]
	char* ack_char = (char*) ack;
 80006de:	697b      	ldr	r3, [r7, #20]
 80006e0:	613b      	str	r3, [r7, #16]
	unpack( packet, ack_char, HEADER_LENGTH );
 80006e2:	6838      	ldr	r0, [r7, #0]
 80006e4:	6939      	ldr	r1, [r7, #16]
 80006e6:	2205      	movs	r2, #5
 80006e8:	f000 f8cc 	bl	8000884 <unpack>

	// Convert string back to Ack struct
	ack = (Ack*) ack_char;
 80006ec:	693b      	ldr	r3, [r7, #16]
 80006ee:	617b      	str	r3, [r7, #20]

	// Indicate success or failure from packet
	uint8_t result = ack->success;
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	73fb      	strb	r3, [r7, #15]

	// Free variables
	vPortFree( ack );
 80006f6:	6978      	ldr	r0, [r7, #20]
 80006f8:	f008 fa9a 	bl	8008c30 <vPortFree>

	return result;
 80006fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3718      	adds	r7, #24
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop

08000708 <handlePing>:


/*********************************************************************************************
 * Handle Ping
 *********************************************************************************************/
uint8_t handlePing( Header* header, char* packet ) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	6039      	str	r1, [r7, #0]

	// Extract the pay load
	Ping* ping = pvPortMalloc( sizeof(Ping) );
 8000712:	2000      	movs	r0, #0
 8000714:	f008 f9c6 	bl	8008aa4 <pvPortMalloc>
 8000718:	6178      	str	r0, [r7, #20]
	char* ping_char = (char*) ping;
 800071a:	697b      	ldr	r3, [r7, #20]
 800071c:	613b      	str	r3, [r7, #16]
	unpack( packet, ping_char, HEADER_LENGTH );
 800071e:	6838      	ldr	r0, [r7, #0]
 8000720:	6939      	ldr	r1, [r7, #16]
 8000722:	2205      	movs	r2, #5
 8000724:	f000 f8ae 	bl	8000884 <unpack>

	// Convert string back to Ping struct
	ping = (Ping*) ping_char;
 8000728:	693b      	ldr	r3, [r7, #16]
 800072a:	617b      	str	r3, [r7, #20]

	// Restructure header to send back ack
	header->dest = header->addr;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	785a      	ldrb	r2, [r3, #1]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	701a      	strb	r2, [r3, #0]
	header->addr = MY_ADDR;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2202      	movs	r2, #2
 8000738:	705a      	strb	r2, [r3, #1]
	header->mode = allModes;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2200      	movs	r2, #0
 800073e:	709a      	strb	r2, [r3, #2]
	header->type = ack;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2200      	movs	r2, #0
 8000744:	70da      	strb	r2, [r3, #3]

	// Send Ack
	uint8_t result = sendAck( header, SUCCESS );
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	2101      	movs	r1, #1
 800074a:	f7ff fec3 	bl	80004d4 <sendAck>
 800074e:	4603      	mov	r3, r0
 8000750:	73fb      	strb	r3, [r7, #15]

	// Free variables
	vPortFree( ping );
 8000752:	6978      	ldr	r0, [r7, #20]
 8000754:	f008 fa6c 	bl	8008c30 <vPortFree>

	return result;
 8000758:	7bfb      	ldrb	r3, [r7, #15]
}
 800075a:	4618      	mov	r0, r3
 800075c:	3718      	adds	r7, #24
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop

08000764 <handleTrafficLightCurrent>:


/*********************************************************************************************
 * Handle TrafficLightCurrent
 *********************************************************************************************/
uint8_t handleTrafficLightCurrent( Header* header, char* packet ) {
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	6039      	str	r1, [r7, #0]

	// Extract the pay load
	TrafficLightCurrent* current = pvPortMalloc( sizeof(TrafficLightCurrent) );
 800076e:	2002      	movs	r0, #2
 8000770:	f008 f998 	bl	8008aa4 <pvPortMalloc>
 8000774:	60f8      	str	r0, [r7, #12]
	char* current_char = (char*) current;
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	60bb      	str	r3, [r7, #8]
	unpack( packet, current_char, HEADER_LENGTH );
 800077a:	6838      	ldr	r0, [r7, #0]
 800077c:	68b9      	ldr	r1, [r7, #8]
 800077e:	2205      	movs	r2, #5
 8000780:	f000 f880 	bl	8000884 <unpack>

	// Convert string back to TrafficLightCurrent struct
	current = (TrafficLightCurrent*) current_char;
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	60fb      	str	r3, [r7, #12]

	// Turn on corresponding LED
	// TODO: need to know what direction SAV is headed (northSouth / eastWest)
	LED_LIGHT_PORT->OFF &= LED_LIGHT_PINS;
 8000788:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <handleTrafficLightCurrent+0x60>)
 800078a:	4a0e      	ldr	r2, [pc, #56]	; (80007c4 <handleTrafficLightCurrent+0x60>)
 800078c:	8b52      	ldrh	r2, [r2, #26]
 800078e:	b292      	uxth	r2, r2
 8000790:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8000794:	b292      	uxth	r2, r2
 8000796:	835a      	strh	r2, [r3, #26]
	LED_LIGHT_PORT->ON &= led_light_pin[ current->northSouth ];
 8000798:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <handleTrafficLightCurrent+0x60>)
 800079a:	4a0a      	ldr	r2, [pc, #40]	; (80007c4 <handleTrafficLightCurrent+0x60>)
 800079c:	8b12      	ldrh	r2, [r2, #24]
 800079e:	b291      	uxth	r1, r2
 80007a0:	68fa      	ldr	r2, [r7, #12]
 80007a2:	7812      	ldrb	r2, [r2, #0]
 80007a4:	4610      	mov	r0, r2
 80007a6:	4a08      	ldr	r2, [pc, #32]	; (80007c8 <handleTrafficLightCurrent+0x64>)
 80007a8:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 80007ac:	400a      	ands	r2, r1
 80007ae:	b292      	uxth	r2, r2
 80007b0:	831a      	strh	r2, [r3, #24]

	// Free variables
	vPortFree( current );
 80007b2:	68f8      	ldr	r0, [r7, #12]
 80007b4:	f008 fa3c 	bl	8008c30 <vPortFree>

	return SUCCESS;
 80007b8:	2301      	movs	r3, #1
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40020800 	.word	0x40020800
 80007c8:	20000014 	.word	0x20000014

080007cc <handleChangeMode>:


/*********************************************************************************************
 * Handle ChangeMode
 *********************************************************************************************/
uint8_t handleChangeMode( Header* header, char* packet ) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	6039      	str	r1, [r7, #0]

	// Extract the pay load
	ChangeMode* change_mode = pvPortMalloc( sizeof(ChangeMode) );
 80007d6:	2001      	movs	r0, #1
 80007d8:	f008 f964 	bl	8008aa4 <pvPortMalloc>
 80007dc:	60f8      	str	r0, [r7, #12]
	char* change_mode_char = (char*) change_mode;
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	60bb      	str	r3, [r7, #8]
	unpack( packet, change_mode_char, HEADER_LENGTH );
 80007e2:	6838      	ldr	r0, [r7, #0]
 80007e4:	68b9      	ldr	r1, [r7, #8]
 80007e6:	2205      	movs	r2, #5
 80007e8:	f000 f84c 	bl	8000884 <unpack>

	// Convert string back to ChangeMode struct
	change_mode = (ChangeMode*) change_mode_char;
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	60fb      	str	r3, [r7, #12]

	// Set SAV's Mode of Operation
	my_mode = change_mode->newMode;
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	781a      	ldrb	r2, [r3, #0]
 80007f4:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <handleChangeMode+0x68>)
 80007f6:	701a      	strb	r2, [r3, #0]

	// Set corresponding LED
	LED_MODE_PORT->OFF &= led_mode_pin[ allModes ];
 80007f8:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <handleChangeMode+0x6c>)
 80007fa:	4a0f      	ldr	r2, [pc, #60]	; (8000838 <handleChangeMode+0x6c>)
 80007fc:	8b52      	ldrh	r2, [r2, #26]
 80007fe:	b291      	uxth	r1, r2
 8000800:	4a0e      	ldr	r2, [pc, #56]	; (800083c <handleChangeMode+0x70>)
 8000802:	8812      	ldrh	r2, [r2, #0]
 8000804:	400a      	ands	r2, r1
 8000806:	b292      	uxth	r2, r2
 8000808:	835a      	strh	r2, [r3, #26]
	LED_MODE_PORT->ON &= led_mode_pin[ my_mode ];
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <handleChangeMode+0x6c>)
 800080c:	4a0a      	ldr	r2, [pc, #40]	; (8000838 <handleChangeMode+0x6c>)
 800080e:	8b12      	ldrh	r2, [r2, #24]
 8000810:	b291      	uxth	r1, r2
 8000812:	4a08      	ldr	r2, [pc, #32]	; (8000834 <handleChangeMode+0x68>)
 8000814:	7812      	ldrb	r2, [r2, #0]
 8000816:	4610      	mov	r0, r2
 8000818:	4a08      	ldr	r2, [pc, #32]	; (800083c <handleChangeMode+0x70>)
 800081a:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 800081e:	400a      	ands	r2, r1
 8000820:	b292      	uxth	r2, r2
 8000822:	831a      	strh	r2, [r3, #24]

	// Free variables
	vPortFree( change_mode );
 8000824:	68f8      	ldr	r0, [r7, #12]
 8000826:	f008 fa03 	bl	8008c30 <vPortFree>

	return SUCCESS;
 800082a:	2301      	movs	r3, #1
}
 800082c:	4618      	mov	r0, r3
 800082e:	3710      	adds	r7, #16
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	200071c0 	.word	0x200071c0
 8000838:	40020800 	.word	0x40020800
 800083c:	2000001c 	.word	0x2000001c

08000840 <pack>:
 * %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */

/*********************************************************************************************
 * Package string into container
 *********************************************************************************************/
void pack( char* container, char* field, uint8_t start ) {
 8000840:	b480      	push	{r7}
 8000842:	b087      	sub	sp, #28
 8000844:	af00      	add	r7, sp, #0
 8000846:	60f8      	str	r0, [r7, #12]
 8000848:	60b9      	str	r1, [r7, #8]
 800084a:	4613      	mov	r3, r2
 800084c:	71fb      	strb	r3, [r7, #7]

	// Iterate through field, copying each char into the container
	// Note: By adding 48, the integer value is represented as its ascii counterpart
	int i;
	for( i=0; i<=sizeof(field); i++) {
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]
 8000852:	e00e      	b.n	8000872 <pack+0x32>
		container[start + i] = field[i] + 48;
 8000854:	79fa      	ldrb	r2, [r7, #7]
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	4413      	add	r3, r2
 800085a:	68fa      	ldr	r2, [r7, #12]
 800085c:	4413      	add	r3, r2
 800085e:	697a      	ldr	r2, [r7, #20]
 8000860:	68b9      	ldr	r1, [r7, #8]
 8000862:	440a      	add	r2, r1
 8000864:	7812      	ldrb	r2, [r2, #0]
 8000866:	3230      	adds	r2, #48	; 0x30
 8000868:	b2d2      	uxtb	r2, r2
 800086a:	701a      	strb	r2, [r3, #0]
void pack( char* container, char* field, uint8_t start ) {

	// Iterate through field, copying each char into the container
	// Note: By adding 48, the integer value is represented as its ascii counterpart
	int i;
	for( i=0; i<=sizeof(field); i++) {
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	3301      	adds	r3, #1
 8000870:	617b      	str	r3, [r7, #20]
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	2b04      	cmp	r3, #4
 8000876:	d9ed      	bls.n	8000854 <pack+0x14>
		container[start + i] = field[i] + 48;
	}
}
 8000878:	371c      	adds	r7, #28
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop

08000884 <unpack>:


/*********************************************************************************************
 * Unpack strings from the container
 *********************************************************************************************/
void unpack( char* container, char* field, uint8_t start ) {
 8000884:	b480      	push	{r7}
 8000886:	b087      	sub	sp, #28
 8000888:	af00      	add	r7, sp, #0
 800088a:	60f8      	str	r0, [r7, #12]
 800088c:	60b9      	str	r1, [r7, #8]
 800088e:	4613      	mov	r3, r2
 8000890:	71fb      	strb	r3, [r7, #7]

	// Note: By subtracting 48, the ascii is converted back to the correct uint
	// Note: Each packet is of the form: +IPD,(length):(packet)

	// Begin by creating an offset to the actual packet
	int offset = 6;
 8000892:	2306      	movs	r3, #6
 8000894:	617b      	str	r3, [r7, #20]
	while( container[offset] != ':' ) {
 8000896:	e002      	b.n	800089e <unpack+0x1a>
		offset++;
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	3301      	adds	r3, #1
 800089c:	617b      	str	r3, [r7, #20]
	// Note: By subtracting 48, the ascii is converted back to the correct uint
	// Note: Each packet is of the form: +IPD,(length):(packet)

	// Begin by creating an offset to the actual packet
	int offset = 6;
	while( container[offset] != ':' ) {
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	68fa      	ldr	r2, [r7, #12]
 80008a2:	4413      	add	r3, r2
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	2b3a      	cmp	r3, #58	; 0x3a
 80008a8:	d1f6      	bne.n	8000898 <unpack+0x14>
		offset++;
	}

	// Iterate through container, copying each char into the field
	int i;
	for( i=0; i<=sizeof(field); i++) {
 80008aa:	2300      	movs	r3, #0
 80008ac:	613b      	str	r3, [r7, #16]
 80008ae:	e010      	b.n	80008d2 <unpack+0x4e>
		field[i] = container[start + offset + i] - 48;
 80008b0:	693b      	ldr	r3, [r7, #16]
 80008b2:	68ba      	ldr	r2, [r7, #8]
 80008b4:	4413      	add	r3, r2
 80008b6:	79f9      	ldrb	r1, [r7, #7]
 80008b8:	697a      	ldr	r2, [r7, #20]
 80008ba:	4411      	add	r1, r2
 80008bc:	693a      	ldr	r2, [r7, #16]
 80008be:	440a      	add	r2, r1
 80008c0:	68f9      	ldr	r1, [r7, #12]
 80008c2:	440a      	add	r2, r1
 80008c4:	7812      	ldrb	r2, [r2, #0]
 80008c6:	3a30      	subs	r2, #48	; 0x30
 80008c8:	b2d2      	uxtb	r2, r2
 80008ca:	701a      	strb	r2, [r3, #0]
		offset++;
	}

	// Iterate through container, copying each char into the field
	int i;
	for( i=0; i<=sizeof(field); i++) {
 80008cc:	693b      	ldr	r3, [r7, #16]
 80008ce:	3301      	adds	r3, #1
 80008d0:	613b      	str	r3, [r7, #16]
 80008d2:	693b      	ldr	r3, [r7, #16]
 80008d4:	2b04      	cmp	r3, #4
 80008d6:	d9eb      	bls.n	80008b0 <unpack+0x2c>
		field[i] = container[start + offset + i] - 48;
	}
}
 80008d8:	371c      	adds	r7, #28
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop

080008e4 <USART1_IRQHandler>:


/*********************************************************************************************
 * USART IRQ Handler for WiFi module
 *********************************************************************************************/
void USART1_IRQHandler( void ) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0

	// Make sure USART recieve interrupt flag was set
	if( USART_GetITStatus( WIFI_USART, USART_IT_RXNE ) ) {
 80008ea:	481c      	ldr	r0, [pc, #112]	; (800095c <USART1_IRQHandler+0x78>)
 80008ec:	f240 5125 	movw	r1, #1317	; 0x525
 80008f0:	f000 ffe6 	bl	80018c0 <USART_GetITStatus>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d02c      	beq.n	8000954 <USART1_IRQHandler+0x70>

		// Counter to track packet length
		static uint8_t counter = 0;

		// Character retrieved from data register
		char t = WIFI_USART->DR;
 80008fa:	4b18      	ldr	r3, [pc, #96]	; (800095c <USART1_IRQHandler+0x78>)
 80008fc:	889b      	ldrh	r3, [r3, #4]
 80008fe:	b29b      	uxth	r3, r3
 8000900:	71fb      	strb	r3, [r7, #7]

		// Check if string has ended or it exceeded the maximum packet length
		if( (t != '\n') && (counter < MAX_LENGTH) ) {
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	2b0a      	cmp	r3, #10
 8000906:	d00f      	beq.n	8000928 <USART1_IRQHandler+0x44>
 8000908:	4b15      	ldr	r3, [pc, #84]	; (8000960 <USART1_IRQHandler+0x7c>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b0f      	cmp	r3, #15
 800090e:	d80b      	bhi.n	8000928 <USART1_IRQHandler+0x44>
			received_string[counter] = t;
 8000910:	4b13      	ldr	r3, [pc, #76]	; (8000960 <USART1_IRQHandler+0x7c>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	4a13      	ldr	r2, [pc, #76]	; (8000964 <USART1_IRQHandler+0x80>)
 8000916:	79f9      	ldrb	r1, [r7, #7]
 8000918:	54d1      	strb	r1, [r2, r3]
			counter++;
 800091a:	4b11      	ldr	r3, [pc, #68]	; (8000960 <USART1_IRQHandler+0x7c>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	3301      	adds	r3, #1
 8000920:	b2da      	uxtb	r2, r3
 8000922:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <USART1_IRQHandler+0x7c>)
 8000924:	701a      	strb	r2, [r3, #0]
 8000926:	e015      	b.n	8000954 <USART1_IRQHandler+0x70>
		} else {

			// Reset counter
			counter = 0;
 8000928:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <USART1_IRQHandler+0x7c>)
 800092a:	2200      	movs	r2, #0
 800092c:	701a      	strb	r2, [r3, #0]

			// If received_string is a packet, put it in the queue
			if( received_string[0] == '+' ) {
 800092e:	4b0d      	ldr	r3, [pc, #52]	; (8000964 <USART1_IRQHandler+0x80>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	b2db      	uxtb	r3, r3
 8000934:	2b2b      	cmp	r3, #43	; 0x2b
 8000936:	d10a      	bne.n	800094e <USART1_IRQHandler+0x6a>
				xQueueSendToBackFromISR( xPacketQueue, &received_string, pdFALSE);
 8000938:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <USART1_IRQHandler+0x84>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4618      	mov	r0, r3
 800093e:	4909      	ldr	r1, [pc, #36]	; (8000964 <USART1_IRQHandler+0x80>)
 8000940:	2200      	movs	r2, #0
 8000942:	2300      	movs	r3, #0
 8000944:	f007 f940 	bl	8007bc8 <xQueueGenericSendFromISR>
				process_packet = TRUE;
 8000948:	4b08      	ldr	r3, [pc, #32]	; (800096c <USART1_IRQHandler+0x88>)
 800094a:	2201      	movs	r2, #1
 800094c:	701a      	strb	r2, [r3, #0]
			}

			// Clear received_string
			received_string[0] = '\n';
 800094e:	4b05      	ldr	r3, [pc, #20]	; (8000964 <USART1_IRQHandler+0x80>)
 8000950:	220a      	movs	r2, #10
 8000952:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40011000 	.word	0x40011000
 8000960:	20000058 	.word	0x20000058
 8000964:	200071c4 	.word	0x200071c4
 8000968:	200071bc 	.word	0x200071bc
 800096c:	200071b8 	.word	0x200071b8

08000970 <copyString>:


/*********************************************************************************************
 * Copy original string to a new copy
 *********************************************************************************************/
void copyString( volatile char* original, char* new, uint8_t length ) {
 8000970:	b480      	push	{r7}
 8000972:	b087      	sub	sp, #28
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	4613      	mov	r3, r2
 800097c:	71fb      	strb	r3, [r7, #7]

	// Iterate through string and copy each char
	int i;
	for( i=0; i<=length; i++ ) {
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]
 8000982:	e00b      	b.n	800099c <copyString+0x2c>
		new[i] = original[i];
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	68ba      	ldr	r2, [r7, #8]
 8000988:	4413      	add	r3, r2
 800098a:	697a      	ldr	r2, [r7, #20]
 800098c:	68f9      	ldr	r1, [r7, #12]
 800098e:	440a      	add	r2, r1
 8000990:	7812      	ldrb	r2, [r2, #0]
 8000992:	b2d2      	uxtb	r2, r2
 8000994:	701a      	strb	r2, [r3, #0]
 *********************************************************************************************/
void copyString( volatile char* original, char* new, uint8_t length ) {

	// Iterate through string and copy each char
	int i;
	for( i=0; i<=length; i++ ) {
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	3301      	adds	r3, #1
 800099a:	617b      	str	r3, [r7, #20]
 800099c:	79fa      	ldrb	r2, [r7, #7]
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	daef      	bge.n	8000984 <copyString+0x14>
		new[i] = original[i];
	}
}
 80009a4:	371c      	adds	r7, #28
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <main>:


#include "main.h"


int main(void) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af04      	add	r7, sp, #16

	// Setup hardware
	prvSetupHardware();
 80009b6:	f000 f825 	bl	8000a04 <prvSetupHardware>

	// Setup WiFi connection
	prvSetupWifi();
 80009ba:	f000 f837 	bl	8000a2c <prvSetupWifi>

	// Create queue for packets
	xPacketQueue = xQueueCreate( maxPacketQueueLength, MAX_LENGTH );
 80009be:	2005      	movs	r0, #5
 80009c0:	2110      	movs	r1, #16
 80009c2:	2200      	movs	r2, #0
 80009c4:	f006 ff66 	bl	8007894 <xQueueGenericCreate>
 80009c8:	4602      	mov	r2, r0
 80009ca:	4b0a      	ldr	r3, [pc, #40]	; (80009f4 <main+0x44>)
 80009cc:	601a      	str	r2, [r3, #0]

	// Create initial task to connect to Base Station
	xTaskCreate( prvConnectTask, "", ( unsigned short ) 280, NULL, connectPriority, xConnectHandle );
 80009ce:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <main+0x48>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2201      	movs	r2, #1
 80009d4:	9200      	str	r2, [sp, #0]
 80009d6:	9301      	str	r3, [sp, #4]
 80009d8:	2300      	movs	r3, #0
 80009da:	9302      	str	r3, [sp, #8]
 80009dc:	2300      	movs	r3, #0
 80009de:	9303      	str	r3, [sp, #12]
 80009e0:	4806      	ldr	r0, [pc, #24]	; (80009fc <main+0x4c>)
 80009e2:	4907      	ldr	r1, [pc, #28]	; (8000a00 <main+0x50>)
 80009e4:	f44f 728c 	mov.w	r2, #280	; 0x118
 80009e8:	2300      	movs	r3, #0
 80009ea:	f004 fff5 	bl	80059d8 <xTaskGenericCreate>

	// Start the scheduler which begins to run the tasks
	vTaskStartScheduler();
 80009ee:	f005 fca1 	bl	8006334 <vTaskStartScheduler>
	/* If all is well, the scheduler will now be running, and the following line
	will never be reached.  If the following line does execute, then there was
	insufficient FreeRTOS heap memory available for the idle and/or timer tasks
	to be created.  See the memory management section on the FreeRTOS web site
	for more details. */
	for( ;; );
 80009f2:	e7fe      	b.n	80009f2 <main+0x42>
 80009f4:	200071bc 	.word	0x200071bc
 80009f8:	2000005c 	.word	0x2000005c
 80009fc:	08000a89 	.word	0x08000a89
 8000a00:	08008fa0 	.word	0x08008fa0

08000a04 <prvSetupHardware>:


/*********************************************************************************************
 * Setup relevant hardware
 *********************************************************************************************/
static void prvSetupHardware( void ) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	// Ensure that all 4 interrupt priority bits are used as the pre-emption priority
	NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );
 8000a08:	f44f 7040 	mov.w	r0, #768	; 0x300
 8000a0c:	f004 fbf4 	bl	80051f8 <NVIC_PriorityGroupConfig>

	// Setup LEDs
	ledInit();
 8000a10:	f000 f974 	bl	8000cfc <ledInit>

	// Setup WiFi
	wifiInit();
 8000a14:	f000 f9b2 	bl	8000d7c <wifiInit>

	// Setup PWM
	pwmInit();
 8000a18:	f000 fa0e 	bl	8000e38 <pwmInit>

	// Setup Photo Resistors
	photoResistorInit();
 8000a1c:	f000 fa5c 	bl	8000ed8 <photoResistorInit>

	// Setup Measured Power
	measuredPowerInit();
 8000a20:	f000 fa98 	bl	8000f54 <measuredPowerInit>

	// Setup Ultrasonic
	ultrasonicInit();
 8000a24:	f000 faae 	bl	8000f84 <ultrasonicInit>
}
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop

08000a2c <prvSetupWifi>:


/*********************************************************************************************
 * Setup Wifi connection
 *********************************************************************************************/
static void prvSetupWifi( void ) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
//	sendPacket( "ATE1", 4);
//	while( !process_packet );
//	process_packet = FALSE;

	sendPacket( "AT", 2);
 8000a32:	4811      	ldr	r0, [pc, #68]	; (8000a78 <prvSetupWifi+0x4c>)
 8000a34:	2102      	movs	r1, #2
 8000a36:	f7ff fd0d 	bl	8000454 <sendPacket>
	while( !process_packet );
 8000a3a:	bf00      	nop
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <prvSetupWifi+0x50>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d0fb      	beq.n	8000a3c <prvSetupWifi+0x10>
	process_packet = FALSE;
 8000a44:	4b0d      	ldr	r3, [pc, #52]	; (8000a7c <prvSetupWifi+0x50>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	701a      	strb	r2, [r3, #0]

	uint32_t t = 10000000;
 8000a4a:	4b0d      	ldr	r3, [pc, #52]	; (8000a80 <prvSetupWifi+0x54>)
 8000a4c:	607b      	str	r3, [r7, #4]
	while( t-- );
 8000a4e:	bf00      	nop
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	1e5a      	subs	r2, r3, #1
 8000a54:	607a      	str	r2, [r7, #4]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d1fa      	bne.n	8000a50 <prvSetupWifi+0x24>

	// sendPacket( "AT+CWJAP=\"OhmWreckers\",\"123\"", 28);

	sendPacket( "AT+CIPSTART=\"TCP\",\"192.168.101.101\",1001", 40);
 8000a5a:	480a      	ldr	r0, [pc, #40]	; (8000a84 <prvSetupWifi+0x58>)
 8000a5c:	2128      	movs	r1, #40	; 0x28
 8000a5e:	f7ff fcf9 	bl	8000454 <sendPacket>
	while( !process_packet );
 8000a62:	bf00      	nop
 8000a64:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <prvSetupWifi+0x50>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d0fb      	beq.n	8000a64 <prvSetupWifi+0x38>
	process_packet = FALSE;
 8000a6c:	4b03      	ldr	r3, [pc, #12]	; (8000a7c <prvSetupWifi+0x50>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	701a      	strb	r2, [r3, #0]
//
//	sendPacket( "AT+CIPSEND=4", 12);
//	t = 10000000;
//	while( t-- );
//	sendPacket( "SWAG", 4 );
}
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	08008fa4 	.word	0x08008fa4
 8000a7c:	200071b8 	.word	0x200071b8
 8000a80:	00989680 	.word	0x00989680
 8000a84:	08008fa8 	.word	0x08008fa8

08000a88 <prvConnectTask>:
 * Initial bootup task to connect to Base Station
 * 		* Connect to Base Station 		- Send Ping packet
 * 		* Wait for response 			- Receive Ack packet
 * 		* If successful					- Turn on WiFi LEDs
 *********************************************************************************************/
void prvConnectTask( void *pvParameters ) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08a      	sub	sp, #40	; 0x28
 8000a8c:	af04      	add	r7, sp, #16
 8000a8e:	6078      	str	r0, [r7, #4]

	// Setup local variables
	uint8_t send_ping = TRUE;
 8000a90:	2301      	movs	r3, #1
 8000a92:	75fb      	strb	r3, [r7, #23]

	// Let task run infinitely
	for(;;) {

		if( send_ping ) {
 8000a94:	7dfb      	ldrb	r3, [r7, #23]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d017      	beq.n	8000aca <prvConnectTask+0x42>
			// Setup header to Base Station
			Header* header = pvPortMalloc( sizeof(Header) );
 8000a9a:	2005      	movs	r0, #5
 8000a9c:	f008 f802 	bl	8008aa4 <pvPortMalloc>
 8000aa0:	6138      	str	r0, [r7, #16]
			header->dest = baseStation;
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	701a      	strb	r2, [r3, #0]
			header->addr = MY_ADDR;
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	2202      	movs	r2, #2
 8000aac:	705a      	strb	r2, [r3, #1]
			header->mode = allModes;
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	709a      	strb	r2, [r3, #2]
			header->type = ping;
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	70da      	strb	r2, [r3, #3]

			sendPing( header );
 8000aba:	6938      	ldr	r0, [r7, #16]
 8000abc:	f7ff fd40 	bl	8000540 <sendPing>

			vPortFree(header);
 8000ac0:	6938      	ldr	r0, [r7, #16]
 8000ac2:	f008 f8b5 	bl	8008c30 <vPortFree>

			send_ping = FALSE;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	75fb      	strb	r3, [r7, #23]
		}

		// Continue to send Ping packet until get an Ack
		if( process_packet ) {
 8000aca:	4b21      	ldr	r3, [pc, #132]	; (8000b50 <prvConnectTask+0xc8>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d03c      	beq.n	8000b4c <prvConnectTask+0xc4>

			// Create local string to represent the packet
			char* packet = pvPortMalloc( sizeof(MAX_LENGTH) );
 8000ad2:	2004      	movs	r0, #4
 8000ad4:	f007 ffe6 	bl	8008aa4 <pvPortMalloc>
 8000ad8:	60f8      	str	r0, [r7, #12]

			// Pop packet from queue

			xQueueReceive( xPacketQueue, packet, 0 );
 8000ada:	4b1e      	ldr	r3, [pc, #120]	; (8000b54 <prvConnectTask+0xcc>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4618      	mov	r0, r3
 8000ae0:	68f9      	ldr	r1, [r7, #12]
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	f007 f965 	bl	8007db4 <xQueueGenericReceive>

			// Process packet
			PacketResult packet_result = handlePacket( packet );
 8000aea:	68f8      	ldr	r0, [r7, #12]
 8000aec:	f7ff fd88 	bl	8000600 <handlePacket>
 8000af0:	4603      	mov	r3, r0
 8000af2:	813b      	strh	r3, [r7, #8]

			// Free variables
			vPortFree( packet );
 8000af4:	68f8      	ldr	r0, [r7, #12]
 8000af6:	f008 f89b 	bl	8008c30 <vPortFree>

			if( (packet_result.result == SUCCESS) && (packet_result.type == ack) ) {
 8000afa:	7a7b      	ldrb	r3, [r7, #9]
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d122      	bne.n	8000b46 <prvConnectTask+0xbe>
 8000b00:	7a3b      	ldrb	r3, [r7, #8]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d11f      	bne.n	8000b46 <prvConnectTask+0xbe>
				// Turn on LEDs to indicate success
				LED_WIFI_PORT->ON &= LED_WIFI_TX_PIN | LED_WIFI_RX_PIN;
 8000b06:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <prvConnectTask+0xd0>)
 8000b08:	4a13      	ldr	r2, [pc, #76]	; (8000b58 <prvConnectTask+0xd0>)
 8000b0a:	8b12      	ldrh	r2, [r2, #24]
 8000b0c:	b292      	uxth	r2, r2
 8000b0e:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8000b12:	b292      	uxth	r2, r2
 8000b14:	831a      	strh	r2, [r3, #24]

				// Reset process_packet
				process_packet = FALSE;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <prvConnectTask+0xc8>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	701a      	strb	r2, [r3, #0]

				// If successful, move on to next task
				xTaskCreate( prvModeOfOperationTask, "", configMINIMAL_STACK_SIZE, NULL, modeOfOperationPriority, xModeOfOperationHandle );
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <prvConnectTask+0xd4>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2201      	movs	r2, #1
 8000b22:	9200      	str	r2, [sp, #0]
 8000b24:	9301      	str	r3, [sp, #4]
 8000b26:	2300      	movs	r3, #0
 8000b28:	9302      	str	r3, [sp, #8]
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	9303      	str	r3, [sp, #12]
 8000b2e:	480c      	ldr	r0, [pc, #48]	; (8000b60 <prvConnectTask+0xd8>)
 8000b30:	490c      	ldr	r1, [pc, #48]	; (8000b64 <prvConnectTask+0xdc>)
 8000b32:	2246      	movs	r2, #70	; 0x46
 8000b34:	2300      	movs	r3, #0
 8000b36:	f004 ff4f 	bl	80059d8 <xTaskGenericCreate>

				// Delete this task
				vTaskDelete( xConnectHandle );
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <prvConnectTask+0xe0>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f005 f816 	bl	8005b70 <vTaskDelete>
 8000b44:	e002      	b.n	8000b4c <prvConnectTask+0xc4>
			}
			 else {
				 send_ping = TRUE;
 8000b46:	2301      	movs	r3, #1
 8000b48:	75fb      	strb	r3, [r7, #23]
			}

		}
	}
 8000b4a:	e7a3      	b.n	8000a94 <prvConnectTask+0xc>
 8000b4c:	e7a2      	b.n	8000a94 <prvConnectTask+0xc>
 8000b4e:	bf00      	nop
 8000b50:	200071b8 	.word	0x200071b8
 8000b54:	200071bc 	.word	0x200071bc
 8000b58:	40020400 	.word	0x40020400
 8000b5c:	20000060 	.word	0x20000060
 8000b60:	08000b6d 	.word	0x08000b6d
 8000b64:	08008fa0 	.word	0x08008fa0
 8000b68:	2000005c 	.word	0x2000005c

08000b6c <prvModeOfOperationTask>:
/*********************************************************************************************
 * Initial bootup task to setup default mode of operation
 * 		* Indicate SAV needs to set default mode of operation
 * 		* Wait for changeMode packet
 *********************************************************************************************/
void prvModeOfOperationTask( void *pvParameters ) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08a      	sub	sp, #40	; 0x28
 8000b70:	af04      	add	r7, sp, #16
 8000b72:	6078      	str	r0, [r7, #4]

	// Send Ack
	Header* header = pvPortMalloc( sizeof(Header) );
 8000b74:	2005      	movs	r0, #5
 8000b76:	f007 ff95 	bl	8008aa4 <pvPortMalloc>
 8000b7a:	6178      	str	r0, [r7, #20]
	header->dest = baseStation;
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	2201      	movs	r2, #1
 8000b80:	701a      	strb	r2, [r3, #0]
	header->addr = MY_ADDR;
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	2202      	movs	r2, #2
 8000b86:	705a      	strb	r2, [r3, #1]
	header->mode = allModes;
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	709a      	strb	r2, [r3, #2]
	header->type = setMode;
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	2205      	movs	r2, #5
 8000b92:	70da      	strb	r2, [r3, #3]
	sendSetMode( header );
 8000b94:	6978      	ldr	r0, [r7, #20]
 8000b96:	f7ff fd03 	bl	80005a0 <sendSetMode>

	// Let task run infinitely
	for(;;) {

		if( process_packet ) {
 8000b9a:	4b24      	ldr	r3, [pc, #144]	; (8000c2c <prvModeOfOperationTask+0xc0>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d043      	beq.n	8000c2a <prvModeOfOperationTask+0xbe>

			// Disable WIFI_USART interrupt
			USART_ITConfig(WIFI_USART, USART_IT_RXNE, DISABLE);
 8000ba2:	4823      	ldr	r0, [pc, #140]	; (8000c30 <prvModeOfOperationTask+0xc4>)
 8000ba4:	f240 5125 	movw	r1, #1317	; 0x525
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f000 fe15 	bl	80017d8 <USART_ITConfig>

			// Create local string to represent the packet
			char* packet = pvPortMalloc( sizeof(MAX_LENGTH) );
 8000bae:	2004      	movs	r0, #4
 8000bb0:	f007 ff78 	bl	8008aa4 <pvPortMalloc>
 8000bb4:	6138      	str	r0, [r7, #16]

			// Copy received packet to a local copy
			copyString( received_string, packet, MAX_LENGTH );
 8000bb6:	481f      	ldr	r0, [pc, #124]	; (8000c34 <prvModeOfOperationTask+0xc8>)
 8000bb8:	6939      	ldr	r1, [r7, #16]
 8000bba:	2210      	movs	r2, #16
 8000bbc:	f7ff fed8 	bl	8000970 <copyString>

			// Enable WIFI_USART interrupt
			USART_ITConfig(WIFI_USART, USART_IT_RXNE, ENABLE);
 8000bc0:	481b      	ldr	r0, [pc, #108]	; (8000c30 <prvModeOfOperationTask+0xc4>)
 8000bc2:	f240 5125 	movw	r1, #1317	; 0x525
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	f000 fe06 	bl	80017d8 <USART_ITConfig>

			// Process packet
			PacketResult packet_result = handlePacket( packet );
 8000bcc:	6938      	ldr	r0, [r7, #16]
 8000bce:	f7ff fd17 	bl	8000600 <handlePacket>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	81bb      	strh	r3, [r7, #12]

			// Free variables
			vPortFree( packet );
 8000bd6:	6938      	ldr	r0, [r7, #16]
 8000bd8:	f008 f82a 	bl	8008c30 <vPortFree>

			if( (packet_result.result == SUCCESS) && (packet_result.type == changeMode) ) {
 8000bdc:	7b7b      	ldrb	r3, [r7, #13]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d11a      	bne.n	8000c18 <prvModeOfOperationTask+0xac>
 8000be2:	7b3b      	ldrb	r3, [r7, #12]
 8000be4:	2b04      	cmp	r3, #4
 8000be6:	d117      	bne.n	8000c18 <prvModeOfOperationTask+0xac>

				// Reset process_packet
				process_packet = FALSE;
 8000be8:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <prvModeOfOperationTask+0xc0>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	701a      	strb	r2, [r3, #0]

				// If successful, move on to next task
				xTaskCreate( prvModeOfOperationTask, "", configMINIMAL_STACK_SIZE, NULL, modeOfOperationPriority, xModeOfOperationHandle );
 8000bee:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <prvModeOfOperationTask+0xcc>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	9200      	str	r2, [sp, #0]
 8000bf6:	9301      	str	r3, [sp, #4]
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	9302      	str	r3, [sp, #8]
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	9303      	str	r3, [sp, #12]
 8000c00:	480e      	ldr	r0, [pc, #56]	; (8000c3c <prvModeOfOperationTask+0xd0>)
 8000c02:	490f      	ldr	r1, [pc, #60]	; (8000c40 <prvModeOfOperationTask+0xd4>)
 8000c04:	2246      	movs	r2, #70	; 0x46
 8000c06:	2300      	movs	r3, #0
 8000c08:	f004 fee6 	bl	80059d8 <xTaskGenericCreate>

				// Delete this task
				vTaskDelete( xModeOfOperationHandle );
 8000c0c:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <prvModeOfOperationTask+0xcc>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f004 ffad 	bl	8005b70 <vTaskDelete>
 8000c16:	e008      	b.n	8000c2a <prvModeOfOperationTask+0xbe>
			} else {

				// Throw error
				LED_ERROR_PORT->ON &= LED_ERROR_PIN;
 8000c18:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <prvModeOfOperationTask+0xd8>)
 8000c1a:	4a0a      	ldr	r2, [pc, #40]	; (8000c44 <prvModeOfOperationTask+0xd8>)
 8000c1c:	8b12      	ldrh	r2, [r2, #24]
 8000c1e:	b292      	uxth	r2, r2
 8000c20:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000c24:	b292      	uxth	r2, r2
 8000c26:	831a      	strh	r2, [r3, #24]
			}
		}
	}
 8000c28:	e7b7      	b.n	8000b9a <prvModeOfOperationTask+0x2e>
 8000c2a:	e7b6      	b.n	8000b9a <prvModeOfOperationTask+0x2e>
 8000c2c:	200071b8 	.word	0x200071b8
 8000c30:	40011000 	.word	0x40011000
 8000c34:	200071c4 	.word	0x200071c4
 8000c38:	20000060 	.word	0x20000060
 8000c3c:	08000b6d 	.word	0x08000b6d
 8000c40:	08008fa0 	.word	0x08008fa0
 8000c44:	40020400 	.word	0x40020400

08000c48 <prvSWTimerPingCallback>:


/*********************************************************************************************
 * Send Ping packet
 *********************************************************************************************/
void prvSWTimerPingCallback( TimerHandle_t pxTimer ) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]

	// Setup header to Base Station
	Header* header = pvPortMalloc( sizeof(Header) );
 8000c50:	2005      	movs	r0, #5
 8000c52:	f007 ff27 	bl	8008aa4 <pvPortMalloc>
 8000c56:	60f8      	str	r0, [r7, #12]
	header->dest = baseStation;
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	701a      	strb	r2, [r3, #0]
	header->addr = MY_ADDR;
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	2202      	movs	r2, #2
 8000c62:	705a      	strb	r2, [r3, #1]
	header->mode = allModes;
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	2200      	movs	r2, #0
 8000c68:	709a      	strb	r2, [r3, #2]
	header->type = ping;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	70da      	strb	r2, [r3, #3]

	sendPing( header );
 8000c70:	68f8      	ldr	r0, [r7, #12]
 8000c72:	f7ff fc65 	bl	8000540 <sendPing>

	vPortFree(header);
 8000c76:	68f8      	ldr	r0, [r7, #12]
 8000c78:	f007 ffda 	bl	8008c30 <vPortFree>
}
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop

08000c84 <prvSWTimerCallback>:


/*********************************************************************************************
 * Callback function for the test SW timer
 *********************************************************************************************/
void prvSWTimerCallback( TimerHandle_t pxTimer ){
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
	LED2_PORT->ODR ^= LED2_PIN;
 8000c8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <prvSWTimerCallback+0x48>)
 8000c8e:	4a0f      	ldr	r2, [pc, #60]	; (8000ccc <prvSWTimerCallback+0x48>)
 8000c90:	6952      	ldr	r2, [r2, #20]
 8000c92:	f082 0220 	eor.w	r2, r2, #32
 8000c96:	615a      	str	r2, [r3, #20]

	// Create fake header
	Header* header = pvPortMalloc( sizeof(Header) );
 8000c98:	2005      	movs	r0, #5
 8000c9a:	f007 ff03 	bl	8008aa4 <pvPortMalloc>
 8000c9e:	60f8      	str	r0, [r7, #12]
	header->dest = baseStation;
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	701a      	strb	r2, [r3, #0]
	header->addr = MY_ADDR;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	2202      	movs	r2, #2
 8000caa:	705a      	strb	r2, [r3, #1]
	header->mode = allModes;
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	709a      	strb	r2, [r3, #2]
	header->type = ack;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	70da      	strb	r2, [r3, #3]

	sendAck( header, SUCCESS );
 8000cb8:	68f8      	ldr	r0, [r7, #12]
 8000cba:	2101      	movs	r1, #1
 8000cbc:	f7ff fc0a 	bl	80004d4 <sendAck>

	vPortFree(header);
 8000cc0:	68f8      	ldr	r0, [r7, #12]
 8000cc2:	f007 ffb5 	bl	8008c30 <vPortFree>
}
 8000cc6:	3710      	adds	r7, #16
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40020000 	.word	0x40020000

08000cd0 <vApplicationMallocFailedHook>:

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 * Functions to handle errors if they occur
 *%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */
void vApplicationMallocFailedHook( void )
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
	/* Called if a call to pvPortMalloc() fails because there is insufficient
	free memory available in the FreeRTOS heap.  pvPortMalloc() is called
	internally by FreeRTOS API functions that create tasks, queues, software
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
	for( ;; );
 8000cd4:	e7fe      	b.n	8000cd4 <vApplicationMallocFailedHook+0x4>
 8000cd6:	bf00      	nop

08000cd8 <vApplicationStackOverflowHook>:

/*********************************************************************************************
 * Functions to handle errors if they occur
 *********************************************************************************************/
void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	6039      	str	r1, [r7, #0]
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	for( ;; );
 8000ce2:	e7fe      	b.n	8000ce2 <vApplicationStackOverflowHook+0xa>

08000ce4 <vApplicationIdleHook>:

/*********************************************************************************************
 * Functions to handle errors if they occur
 *********************************************************************************************/
void vApplicationIdleHook( void )
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
volatile size_t xFreeStackSpace;

	/* This function is called on each cycle of the idle task.  In this case it
	does nothing useful, other than report the amout of FreeRTOS heap that
	remains unallocated. */
	xFreeStackSpace = xPortGetFreeHeapSize();
 8000cea:	f007 fff9 	bl	8008ce0 <xPortGetFreeHeapSize>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	607b      	str	r3, [r7, #4]

	if( xFreeStackSpace > 100 )
 8000cf2:	687b      	ldr	r3, [r7, #4]
		/* By now, the kernel has allocated everything it is going to, so
		if there is a lot of heap remaining unallocated then
		the value of configTOTAL_HEAP_SIZE in FreeRTOSConfig.h can be
		reduced accordingly. */
	}
}
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop

08000cfc <ledInit>:
void ADC_Configuration(void);

/*********************************************************************************************
 * Initialize LEDs
 *********************************************************************************************/
void ledInit() {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef  GPIO_InitStructure;

	// Enable clock
	RCC_AHB1PeriphClockCmd( LED_LIGHT_CLK | LED_WIFI_CLK | LED_MODE_CLK | LED_ERROR_CLK, ENABLE);
 8000d02:	2006      	movs	r0, #6
 8000d04:	2101      	movs	r1, #1
 8000d06:	f002 ff9b 	bl	8003c40 <RCC_AHB1PeriphClockCmd>

	// Configure GPIO
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000d12:	2300      	movs	r3, #0
 8000d14:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000d16:	2301      	movs	r3, #1
 8000d18:	71fb      	strb	r3, [r7, #7]

	GPIO_InitStructure.GPIO_Pin = LED_LIGHT_PINS;
 8000d1a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000d1e:	603b      	str	r3, [r7, #0]
	GPIO_Init(LED_LIGHT_PORT, &GPIO_InitStructure);
 8000d20:	463b      	mov	r3, r7
 8000d22:	4814      	ldr	r0, [pc, #80]	; (8000d74 <ledInit+0x78>)
 8000d24:	4619      	mov	r1, r3
 8000d26:	f003 fa75 	bl	8004214 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = LED_WIFI_PINS;
 8000d2a:	2360      	movs	r3, #96	; 0x60
 8000d2c:	603b      	str	r3, [r7, #0]
	GPIO_Init(LED_WIFI_PORT, &GPIO_InitStructure);
 8000d2e:	463b      	mov	r3, r7
 8000d30:	4811      	ldr	r0, [pc, #68]	; (8000d78 <ledInit+0x7c>)
 8000d32:	4619      	mov	r1, r3
 8000d34:	f003 fa6e 	bl	8004214 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = LED_MODE_PINS;
 8000d38:	2370      	movs	r3, #112	; 0x70
 8000d3a:	603b      	str	r3, [r7, #0]
	GPIO_Init(LED_MODE_PORT, &GPIO_InitStructure);
 8000d3c:	463b      	mov	r3, r7
 8000d3e:	480d      	ldr	r0, [pc, #52]	; (8000d74 <ledInit+0x78>)
 8000d40:	4619      	mov	r1, r3
 8000d42:	f003 fa67 	bl	8004214 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = LED_ERROR_PIN;
 8000d46:	2380      	movs	r3, #128	; 0x80
 8000d48:	603b      	str	r3, [r7, #0]
	GPIO_Init(LED_ERROR_PORT, &GPIO_InitStructure);
 8000d4a:	463b      	mov	r3, r7
 8000d4c:	480a      	ldr	r0, [pc, #40]	; (8000d78 <ledInit+0x7c>)
 8000d4e:	4619      	mov	r1, r3
 8000d50:	f003 fa60 	bl	8004214 <GPIO_Init>

	// Make sure all LEDs are off
	LED_LIGHT_PORT->OFF = LED_LIGHT_PINS;
 8000d54:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <ledInit+0x78>)
 8000d56:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8000d5a:	835a      	strh	r2, [r3, #26]
	LED_WIFI_PORT->OFF = LED_WIFI_PINS;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <ledInit+0x7c>)
 8000d5e:	2260      	movs	r2, #96	; 0x60
 8000d60:	835a      	strh	r2, [r3, #26]
	LED_MODE_PORT->OFF = LED_MODE_PINS;
 8000d62:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <ledInit+0x78>)
 8000d64:	2270      	movs	r2, #112	; 0x70
 8000d66:	835a      	strh	r2, [r3, #26]
	LED_ERROR_PORT->OFF = LED_ERROR_PIN;
 8000d68:	4b03      	ldr	r3, [pc, #12]	; (8000d78 <ledInit+0x7c>)
 8000d6a:	2280      	movs	r2, #128	; 0x80
 8000d6c:	835a      	strh	r2, [r3, #26]
}
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40020800 	.word	0x40020800
 8000d78:	40020400 	.word	0x40020400

08000d7c <wifiInit>:


/*********************************************************************************************
 * Initialize WiFi USART GPIO
 *********************************************************************************************/
void wifiInit() {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef     GPIO_InitStruct;

	// Enable clock
	RCC_AHB1PeriphClockCmd(WIFI_CLK, ENABLE);
 8000d82:	2001      	movs	r0, #1
 8000d84:	2101      	movs	r1, #1
 8000d86:	f002 ff5b 	bl	8003c40 <RCC_AHB1PeriphClockCmd>

	// Set Pins to alternate function
	GPIO_PinAFConfig(WIFI_PORT, WIFI_TX_PINSOURCE, WIFI_AF);
 8000d8a:	480f      	ldr	r0, [pc, #60]	; (8000dc8 <wifiInit+0x4c>)
 8000d8c:	2109      	movs	r1, #9
 8000d8e:	2207      	movs	r2, #7
 8000d90:	f003 fbae 	bl	80044f0 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(WIFI_PORT, WIFI_RX_PINSOURCE, WIFI_AF);
 8000d94:	480c      	ldr	r0, [pc, #48]	; (8000dc8 <wifiInit+0x4c>)
 8000d96:	210a      	movs	r1, #10
 8000d98:	2207      	movs	r2, #7
 8000d9a:	f003 fba9 	bl	80044f0 <GPIO_PinAFConfig>

	// Initialize pins as alternating function
	GPIO_InitStruct.GPIO_Pin = WIFI_TX_PIN | WIFI_RX_PIN;
 8000d9e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000da2:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8000da4:	2302      	movs	r3, #2
 8000da6:	713b      	strb	r3, [r7, #4]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000da8:	2300      	movs	r3, #0
 8000daa:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8000dac:	2301      	movs	r3, #1
 8000dae:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8000db0:	2303      	movs	r3, #3
 8000db2:	717b      	strb	r3, [r7, #5]
	GPIO_Init(WIFI_PORT, &GPIO_InitStruct);
 8000db4:	463b      	mov	r3, r7
 8000db6:	4804      	ldr	r0, [pc, #16]	; (8000dc8 <wifiInit+0x4c>)
 8000db8:	4619      	mov	r1, r3
 8000dba:	f003 fa2b 	bl	8004214 <GPIO_Init>

	wifiConfig();
 8000dbe:	f000 f805 	bl	8000dcc <wifiConfig>
}
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40020000 	.word	0x40020000

08000dcc <wifiConfig>:


/*********************************************************************************************
 * Initialize WiFi USART
 *********************************************************************************************/
void wifiConfig() {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
	USART_InitTypeDef USART_InitStruct;
	NVIC_InitTypeDef NVIC_InitStruct;

	// Enable clock
	RCC_APB2PeriphClockCmd(WIFI_USART_CLK, ENABLE);
 8000dd2:	2010      	movs	r0, #16
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	f002 ffab 	bl	8003d30 <RCC_APB2PeriphClockCmd>

	// Initialize USART
	USART_InitStruct.USART_BaudRate = WIFI_USART_BAUD;
 8000dda:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000dde:	60bb      	str	r3, [r7, #8]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000de0:	2300      	movs	r3, #0
 8000de2:	82bb      	strh	r3, [r7, #20]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 8000de4:	230c      	movs	r3, #12
 8000de6:	827b      	strh	r3, [r7, #18]
	USART_InitStruct.USART_Parity = USART_Parity_No;
 8000de8:	2300      	movs	r3, #0
 8000dea:	823b      	strh	r3, [r7, #16]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;
 8000dec:	2300      	movs	r3, #0
 8000dee:	81fb      	strh	r3, [r7, #14]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;
 8000df0:	2300      	movs	r3, #0
 8000df2:	81bb      	strh	r3, [r7, #12]
	USART_Cmd(WIFI_USART, ENABLE);
 8000df4:	480f      	ldr	r0, [pc, #60]	; (8000e34 <wifiConfig+0x68>)
 8000df6:	2101      	movs	r1, #1
 8000df8:	f000 faca 	bl	8001390 <USART_Cmd>
	USART_Init(WIFI_USART, &USART_InitStruct);
 8000dfc:	f107 0308 	add.w	r3, r7, #8
 8000e00:	480c      	ldr	r0, [pc, #48]	; (8000e34 <wifiConfig+0x68>)
 8000e02:	4619      	mov	r1, r3
 8000e04:	f000 f9ae 	bl	8001164 <USART_Init>

	// Enable RX interrupt
	USART_ITConfig(WIFI_USART, USART_IT_RXNE, ENABLE);
 8000e08:	480a      	ldr	r0, [pc, #40]	; (8000e34 <wifiConfig+0x68>)
 8000e0a:	f240 5125 	movw	r1, #1317	; 0x525
 8000e0e:	2201      	movs	r2, #1
 8000e10:	f000 fce2 	bl	80017d8 <USART_ITConfig>

	// Initialize NVIC
	NVIC_InitStruct.NVIC_IRQChannel = WIFI_USART_IRQ;
 8000e14:	2325      	movs	r3, #37	; 0x25
 8000e16:	713b      	strb	r3, [r7, #4]
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	71fb      	strb	r3, [r7, #7]
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	717b      	strb	r3, [r7, #5]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	71bb      	strb	r3, [r7, #6]
	NVIC_Init(&NVIC_InitStruct);
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	4618      	mov	r0, r3
 8000e28:	f004 f9f8 	bl	800521c <NVIC_Init>
}
 8000e2c:	3718      	adds	r7, #24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40011000 	.word	0x40011000

08000e38 <pwmInit>:


/*********************************************************************************************
 * Initialize PWM GPIO
 *********************************************************************************************/
void pwmInit() {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	// Enable clock
	RCC_AHB1PeriphClockCmd(PWM_MOTOR_CLK | PWM_SERVO_CLK, ENABLE);
 8000e3e:	2004      	movs	r0, #4
 8000e40:	2101      	movs	r1, #1
 8000e42:	f002 fefd 	bl	8003c40 <RCC_AHB1PeriphClockCmd>

	// Set alternate function
	GPIO_PinAFConfig(PWM_MOTOR_PORT, PWM_MOTOR_1_PINSOURCE | PWM_MOTOR_2_PINSOURCE, PWM_MOTOR_AF);
 8000e46:	4813      	ldr	r0, [pc, #76]	; (8000e94 <pwmInit+0x5c>)
 8000e48:	210f      	movs	r1, #15
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	f003 fb50 	bl	80044f0 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PWM_SERVO_PORT, PWM_SERVO_PINSOURCE, PWM_SERVO_AF);
 8000e50:	4810      	ldr	r0, [pc, #64]	; (8000e94 <pwmInit+0x5c>)
 8000e52:	2109      	movs	r1, #9
 8000e54:	2202      	movs	r2, #2
 8000e56:	f003 fb4b 	bl	80044f0 <GPIO_PinAFConfig>

	// Configure GPIO
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;					// Set pin to alternate mode
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000e66:	2302      	movs	r3, #2
 8000e68:	717b      	strb	r3, [r7, #5]

	GPIO_InitStructure.GPIO_Pin = PWM_MOTOR_1_PIN | PWM_MOTOR_2_PIN;
 8000e6a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e6e:	603b      	str	r3, [r7, #0]
	GPIO_Init(PWM_MOTOR_PORT, &GPIO_InitStructure);
 8000e70:	463b      	mov	r3, r7
 8000e72:	4808      	ldr	r0, [pc, #32]	; (8000e94 <pwmInit+0x5c>)
 8000e74:	4619      	mov	r1, r3
 8000e76:	f003 f9cd 	bl	8004214 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = PWM_SERVO_PIN;
 8000e7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e7e:	603b      	str	r3, [r7, #0]
	GPIO_Init(PWM_SERVO_PORT, &GPIO_InitStructure);
 8000e80:	463b      	mov	r3, r7
 8000e82:	4804      	ldr	r0, [pc, #16]	; (8000e94 <pwmInit+0x5c>)
 8000e84:	4619      	mov	r1, r3
 8000e86:	f003 f9c5 	bl	8004214 <GPIO_Init>

	pwmTimerConfig();
 8000e8a:	f000 f805 	bl	8000e98 <pwmTimerConfig>
}
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40020800 	.word	0x40020800

08000e98 <pwmTimerConfig>:


/*********************************************************************************************
 * Initializes Timer
 *********************************************************************************************/
void pwmTimerConfig() {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef TIM_InitStructure;

	// Enable clock
	RCC_APB1PeriphClockCmd(PWM_TIM_CLK, ENABLE);
 8000e9e:	2002      	movs	r0, #2
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	f002 ff27 	bl	8003cf4 <RCC_APB1PeriphClockCmd>
	/*******************************************
	 * For servo, want PWM pulses such that:
	 * 		- 50% duty (1500us) -> 0 degrees
	 * Max values: 700us - 2300us
	 *******************************************/
	TIM_InitStructure.TIM_Prescaler = PWM_TIM_PRESCALER;
 8000ea6:	2309      	movs	r3, #9
 8000ea8:	80bb      	strh	r3, [r7, #4]
	TIM_InitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	80fb      	strh	r3, [r7, #6]
	TIM_InitStructure.TIM_Period = PWM_TIM_PERIOD;
 8000eae:	f641 737f 	movw	r3, #8063	; 0x1f7f
 8000eb2:	60bb      	str	r3, [r7, #8]
	TIM_InitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	81bb      	strh	r3, [r7, #12]
	TIM_InitStructure.TIM_RepetitionCounter = 0;						// Don't count repetitions
 8000eb8:	2300      	movs	r3, #0
 8000eba:	73bb      	strb	r3, [r7, #14]
	TIM_TimeBaseInit(PWM_TIM, &TIM_InitStructure);
 8000ebc:	1d3b      	adds	r3, r7, #4
 8000ebe:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <pwmTimerConfig+0x3c>)
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f000 fe4f 	bl	8001b64 <TIM_TimeBaseInit>

	// Start timer
	TIM_Cmd(PWM_TIM, ENABLE);
 8000ec6:	4803      	ldr	r0, [pc, #12]	; (8000ed4 <pwmTimerConfig+0x3c>)
 8000ec8:	2101      	movs	r1, #1
 8000eca:	f000 ffcd 	bl	8001e68 <TIM_Cmd>
}
 8000ece:	3710      	adds	r7, #16
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40000400 	.word	0x40000400

08000ed8 <photoResistorInit>:


/*********************************************************************************************
 * Initializes Photo Resistors
 *********************************************************************************************/
void photoResistorInit() {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	// Enable clock
	RCC_AHB1PeriphClockCmd(PHOTO_CLK, ENABLE);
 8000ede:	2004      	movs	r0, #4
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	f002 fead 	bl	8003c40 <RCC_AHB1PeriphClockCmd>

	// Configure GPIO
	GPIO_InitStructure.GPIO_Pin = PHOTO_PINS;
 8000ee6:	2307      	movs	r3, #7
 8000ee8:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;					// Set pin to analog mode
 8000eea:	2303      	movs	r3, #3
 8000eec:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(PHOTO_PORT, &GPIO_InitStructure);
 8000ef2:	463b      	mov	r3, r7
 8000ef4:	4804      	ldr	r0, [pc, #16]	; (8000f08 <photoResistorInit+0x30>)
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	f003 f98c 	bl	8004214 <GPIO_Init>

	adcConfig();
 8000efc:	f000 f806 	bl	8000f0c <adcConfig>
}
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40020800 	.word	0x40020800

08000f0c <adcConfig>:


/*********************************************************************************************
 * Initializes ADC
 *********************************************************************************************/
void adcConfig() {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0
	ADC_InitTypeDef  ADC_InitStructure;

	// Enable clock
	RCC_APB2PeriphClockCmd(PHOTO_ADC_CLK, ENABLE);
 8000f12:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000f16:	2101      	movs	r1, #1
 8000f18:	f002 ff0a 	bl	8003d30 <RCC_APB2PeriphClockCmd>

	// Put everything back to default values
	ADC_DeInit();
 8000f1c:	f003 fc38 	bl	8004790 <ADC_DeInit>

	// Configure ADC
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 8000f20:	2300      	movs	r3, #0
 8000f22:	603b      	str	r3, [r7, #0]
	ADC_InitStructure.ADC_ScanConvMode = DISABLE;
 8000f24:	2300      	movs	r3, #0
 8000f26:	713b      	strb	r3, [r7, #4]
	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	717b      	strb	r3, [r7, #5]
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60bb      	str	r3, [r7, #8]
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 8000f30:	2300      	movs	r3, #0
 8000f32:	613b      	str	r3, [r7, #16]
	ADC_InitStructure.ADC_NbrOfConversion= 1;
 8000f34:	2301      	movs	r3, #1
 8000f36:	753b      	strb	r3, [r7, #20]
	ADC_Init(PHOTO_ADC, &ADC_InitStructure);
 8000f38:	463b      	mov	r3, r7
 8000f3a:	4805      	ldr	r0, [pc, #20]	; (8000f50 <adcConfig+0x44>)
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f003 fc35 	bl	80047ac <ADC_Init>

	// Enable ADC
	ADC_Cmd(PHOTO_ADC, ENABLE);
 8000f42:	4803      	ldr	r0, [pc, #12]	; (8000f50 <adcConfig+0x44>)
 8000f44:	2101      	movs	r1, #1
 8000f46:	f003 fce1 	bl	800490c <ADC_Cmd>
}
 8000f4a:	3718      	adds	r7, #24
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40012000 	.word	0x40012000

08000f54 <measuredPowerInit>:


/*********************************************************************************************
 * Initializes Measured Power GPIO
 *********************************************************************************************/
void measuredPowerInit() {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	// Enable clock
	RCC_AHB1PeriphClockCmd(MEASURED_POWER_CLK, ENABLE);
 8000f5a:	2004      	movs	r0, #4
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	f002 fe6f 	bl	8003c40 <RCC_AHB1PeriphClockCmd>

	// Configure GPIO
	GPIO_InitStructure.GPIO_Pin = MEASURED_POWER_PIN;
 8000f62:	2308      	movs	r3, #8
 8000f64:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;					// Set pin to analog mode
 8000f66:	2303      	movs	r3, #3
 8000f68:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(MEASURED_POWER_PORT, &GPIO_InitStructure);
 8000f6e:	463b      	mov	r3, r7
 8000f70:	4803      	ldr	r0, [pc, #12]	; (8000f80 <measuredPowerInit+0x2c>)
 8000f72:	4619      	mov	r1, r3
 8000f74:	f003 f94e 	bl	8004214 <GPIO_Init>

	// Note: Since both get initialized and use the same ADC, don't need to call it twice
	// adcConfig();
}
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40020800 	.word	0x40020800

08000f84 <ultrasonicInit>:


/*********************************************************************************************
 * Initializes Ultrasonic GPIO
 *********************************************************************************************/
void ultrasonicInit() {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;

    // Enable clock
    RCC_AHB1PeriphClockCmd(ULTRA_CLK, ENABLE);
 8000f8a:	2001      	movs	r0, #1
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	f002 fe57 	bl	8003c40 <RCC_AHB1PeriphClockCmd>

    // Configure GPIO
    GPIO_InitStruct.GPIO_Pin = ULTRA_PINS;
 8000f92:	23e0      	movs	r3, #224	; 0xe0
 8000f94:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 8000f96:	2300      	movs	r3, #0
 8000f98:	713b      	strb	r3, [r7, #4]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	717b      	strb	r3, [r7, #5]
	GPIO_Init(ULTRA_PORT, &GPIO_InitStruct);
 8000fa6:	463b      	mov	r3, r7
 8000fa8:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <ultrasonicInit+0x3c>)
 8000faa:	4619      	mov	r1, r3
 8000fac:	f003 f932 	bl	8004214 <GPIO_Init>

	extiConfig();
 8000fb0:	f000 f808 	bl	8000fc4 <extiConfig>

	ultrasonicTimerConfig();
 8000fb4:	f000 f82a 	bl	800100c <ultrasonicTimerConfig>
}
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40020000 	.word	0x40020000

08000fc4 <extiConfig>:


/*********************************************************************************************
 * Initializes Ultrasonic EXTI
 *********************************************************************************************/
void extiConfig() {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
    EXTI_InitTypeDef EXTI_InitStruct;

    // Set pinsources
    SYSCFG_EXTILineConfig(ULTRA_EXTI_PORT, ULTRA_EXTI_PINSOURCES);
 8000fca:	2000      	movs	r0, #0
 8000fcc:	2107      	movs	r1, #7
 8000fce:	f002 fac9 	bl	8003564 <SYSCFG_EXTILineConfig>

    // Configure EXTI
    EXTI_InitStruct.EXTI_Line = ULTRA_EXTI_LINES;
 8000fd2:	23e0      	movs	r3, #224	; 0xe0
 8000fd4:	60bb      	str	r3, [r7, #8]
	EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	73bb      	strb	r3, [r7, #14]
	EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	733b      	strb	r3, [r7, #12]
	EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
 8000fde:	2310      	movs	r3, #16
 8000fe0:	737b      	strb	r3, [r7, #13]
	EXTI_Init(&EXTI_InitStruct);
 8000fe2:	f107 0308 	add.w	r3, r7, #8
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f003 fae2 	bl	80045b0 <EXTI_Init>

	NVIC_InitTypeDef NVIC_InitStruct;

	// Configure Interrupt
	NVIC_InitStruct.NVIC_IRQChannel = ULTRA_EXTI_IRQ;
 8000fec:	2317      	movs	r3, #23
 8000fee:	713b      	strb	r3, [r7, #4]
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0x00;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	717b      	strb	r3, [r7, #5]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0x01;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStruct);
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	4618      	mov	r0, r3
 8001000:	f004 f90c 	bl	800521c <NVIC_Init>
}
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop

0800100c <ultrasonicTimerConfig>:


void ultrasonicTimerConfig() {
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef timerInitStructure;

	// Enable clock
	RCC_APB1PeriphClockCmd(ULTRA_TIM_CLK, ENABLE);
 8001012:	2001      	movs	r0, #1
 8001014:	2101      	movs	r1, #1
 8001016:	f002 fe6d 	bl	8003cf4 <RCC_APB1PeriphClockCmd>

	// Configure timer
	timerInitStructure.TIM_Prescaler = ULTRA_TIM_PRESCALER;
 800101a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800101e:	80bb      	strh	r3, [r7, #4]
	timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8001020:	2300      	movs	r3, #0
 8001022:	80fb      	strh	r3, [r7, #6]
	timerInitStructure.TIM_Period = ULTRA_TIM_PERIOD;
 8001024:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001028:	60bb      	str	r3, [r7, #8]
	timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 800102a:	2300      	movs	r3, #0
 800102c:	81bb      	strh	r3, [r7, #12]
	timerInitStructure.TIM_RepetitionCounter = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	73bb      	strb	r3, [r7, #14]
	TIM_TimeBaseInit(ULTRA_TIM, &timerInitStructure);
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001038:	4619      	mov	r1, r3
 800103a:	f000 fd93 	bl	8001b64 <TIM_TimeBaseInit>

	// Enable timer
	TIM_Cmd(ULTRA_TIM, ENABLE);
 800103e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001042:	2101      	movs	r1, #1
 8001044:	f000 ff10 	bl	8001e68 <TIM_Cmd>
}
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop

08001050 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	4b3a      	ldr	r3, [pc, #232]	; (8001144 <USART_DeInit+0xf4>)
 800105c:	429a      	cmp	r2, r3
 800105e:	d108      	bne.n	8001072 <USART_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8001060:	2010      	movs	r0, #16
 8001062:	2101      	movs	r1, #1
 8001064:	f002 fefa 	bl	8003e5c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8001068:	2010      	movs	r0, #16
 800106a:	2100      	movs	r1, #0
 800106c:	f002 fef6 	bl	8003e5c <RCC_APB2PeriphResetCmd>
 8001070:	e065      	b.n	800113e <USART_DeInit+0xee>
  }
  else if (USARTx == USART2)
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	4b34      	ldr	r3, [pc, #208]	; (8001148 <USART_DeInit+0xf8>)
 8001076:	429a      	cmp	r2, r3
 8001078:	d10a      	bne.n	8001090 <USART_DeInit+0x40>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 800107a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800107e:	2101      	movs	r1, #1
 8001080:	f002 fece 	bl	8003e20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8001084:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001088:	2100      	movs	r1, #0
 800108a:	f002 fec9 	bl	8003e20 <RCC_APB1PeriphResetCmd>
 800108e:	e056      	b.n	800113e <USART_DeInit+0xee>
  }
  else if (USARTx == USART3)
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	4b2e      	ldr	r3, [pc, #184]	; (800114c <USART_DeInit+0xfc>)
 8001094:	429a      	cmp	r2, r3
 8001096:	d10a      	bne.n	80010ae <USART_DeInit+0x5e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8001098:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800109c:	2101      	movs	r1, #1
 800109e:	f002 febf 	bl	8003e20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 80010a2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80010a6:	2100      	movs	r1, #0
 80010a8:	f002 feba 	bl	8003e20 <RCC_APB1PeriphResetCmd>
 80010ac:	e047      	b.n	800113e <USART_DeInit+0xee>
  }    
  else if (USARTx == UART4)
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	4b27      	ldr	r3, [pc, #156]	; (8001150 <USART_DeInit+0x100>)
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d10a      	bne.n	80010cc <USART_DeInit+0x7c>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 80010b6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80010ba:	2101      	movs	r1, #1
 80010bc:	f002 feb0 	bl	8003e20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 80010c0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80010c4:	2100      	movs	r1, #0
 80010c6:	f002 feab 	bl	8003e20 <RCC_APB1PeriphResetCmd>
 80010ca:	e038      	b.n	800113e <USART_DeInit+0xee>
  }
  else if (USARTx == UART5)
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	4b21      	ldr	r3, [pc, #132]	; (8001154 <USART_DeInit+0x104>)
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d10a      	bne.n	80010ea <USART_DeInit+0x9a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 80010d4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80010d8:	2101      	movs	r1, #1
 80010da:	f002 fea1 	bl	8003e20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 80010de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80010e2:	2100      	movs	r1, #0
 80010e4:	f002 fe9c 	bl	8003e20 <RCC_APB1PeriphResetCmd>
 80010e8:	e029      	b.n	800113e <USART_DeInit+0xee>
  }  
  else if (USARTx == USART6)
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	4b1a      	ldr	r3, [pc, #104]	; (8001158 <USART_DeInit+0x108>)
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d108      	bne.n	8001104 <USART_DeInit+0xb4>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 80010f2:	2020      	movs	r0, #32
 80010f4:	2101      	movs	r1, #1
 80010f6:	f002 feb1 	bl	8003e5c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 80010fa:	2020      	movs	r0, #32
 80010fc:	2100      	movs	r1, #0
 80010fe:	f002 fead 	bl	8003e5c <RCC_APB2PeriphResetCmd>
 8001102:	e01c      	b.n	800113e <USART_DeInit+0xee>
  }
  else if (USARTx == UART7)
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	4b15      	ldr	r3, [pc, #84]	; (800115c <USART_DeInit+0x10c>)
 8001108:	429a      	cmp	r2, r3
 800110a:	d10a      	bne.n	8001122 <USART_DeInit+0xd2>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
 800110c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001110:	2101      	movs	r1, #1
 8001112:	f002 fe85 	bl	8003e20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 8001116:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800111a:	2100      	movs	r1, #0
 800111c:	f002 fe80 	bl	8003e20 <RCC_APB1PeriphResetCmd>
 8001120:	e00d      	b.n	800113e <USART_DeInit+0xee>
  }     
  else
  {
    if (USARTx == UART8)
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <USART_DeInit+0x110>)
 8001126:	429a      	cmp	r2, r3
 8001128:	d109      	bne.n	800113e <USART_DeInit+0xee>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
 800112a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800112e:	2101      	movs	r1, #1
 8001130:	f002 fe76 	bl	8003e20 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
 8001134:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8001138:	2100      	movs	r1, #0
 800113a:	f002 fe71 	bl	8003e20 <RCC_APB1PeriphResetCmd>
    }
  }
}
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40011000 	.word	0x40011000
 8001148:	40004400 	.word	0x40004400
 800114c:	40004800 	.word	0x40004800
 8001150:	40004c00 	.word	0x40004c00
 8001154:	40005000 	.word	0x40005000
 8001158:	40011400 	.word	0x40011400
 800115c:	40007800 	.word	0x40007800
 8001160:	40007c00 	.word	0x40007c00

08001164 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08a      	sub	sp, #40	; 0x28
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800116e:	2300      	movs	r3, #0
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
 8001172:	2300      	movs	r3, #0
 8001174:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800117a:	2300      	movs	r3, #0
 800117c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	8a1b      	ldrh	r3, [r3, #16]
 8001182:	b29b      	uxth	r3, r3
 8001184:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001188:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800118c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	88db      	ldrh	r3, [r3, #6]
 8001192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001194:	4313      	orrs	r3, r2
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119a:	b29a      	uxth	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	899b      	ldrh	r3, [r3, #12]
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80011a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011aa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80011ae:	f023 030c 	bic.w	r3, r3, #12
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	889a      	ldrh	r2, [r3, #4]
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	891b      	ldrh	r3, [r3, #8]
 80011bc:	4313      	orrs	r3, r2
 80011be:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80011c4:	4313      	orrs	r3, r2
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011ca:	4313      	orrs	r3, r2
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80011ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	8a9b      	ldrh	r3, [r3, #20]
 80011da:	b29b      	uxth	r3, r3
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80011de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	899b      	ldrh	r3, [r3, #12]
 80011ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011ec:	4313      	orrs	r3, r2
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80011f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80011f8:	f107 0308 	add.w	r3, r7, #8
 80011fc:	4618      	mov	r0, r3
 80011fe:	f002 fc0b 	bl	8003a18 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	4b31      	ldr	r3, [pc, #196]	; (80012cc <USART_Init+0x168>)
 8001206:	429a      	cmp	r2, r3
 8001208:	d003      	beq.n	8001212 <USART_Init+0xae>
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	4b30      	ldr	r3, [pc, #192]	; (80012d0 <USART_Init+0x16c>)
 800120e:	429a      	cmp	r2, r3
 8001210:	d102      	bne.n	8001218 <USART_Init+0xb4>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	623b      	str	r3, [r7, #32]
 8001216:	e001      	b.n	800121c <USART_Init+0xb8>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	899b      	ldrh	r3, [r3, #12]
 8001220:	b29b      	uxth	r3, r3
 8001222:	b29b      	uxth	r3, r3
 8001224:	b21b      	sxth	r3, r3
 8001226:	2b00      	cmp	r3, #0
 8001228:	da0c      	bge.n	8001244 <USART_Init+0xe0>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800122a:	6a3a      	ldr	r2, [r7, #32]
 800122c:	4613      	mov	r3, r2
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	4413      	add	r3, r2
 8001232:	009a      	lsls	r2, r3, #2
 8001234:	441a      	add	r2, r3
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001240:	61fb      	str	r3, [r7, #28]
 8001242:	e00b      	b.n	800125c <USART_Init+0xf8>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8001244:	6a3a      	ldr	r2, [r7, #32]
 8001246:	4613      	mov	r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	4413      	add	r3, r2
 800124c:	009a      	lsls	r2, r3, #2
 800124e:	441a      	add	r2, r3
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	fbb2 f3f3 	udiv	r3, r2, r3
 800125a:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 800125c:	69fa      	ldr	r2, [r7, #28]
 800125e:	4b1d      	ldr	r3, [pc, #116]	; (80012d4 <USART_Init+0x170>)
 8001260:	fba3 1302 	umull	r1, r3, r3, r2
 8001264:	095b      	lsrs	r3, r3, #5
 8001266:	011b      	lsls	r3, r3, #4
 8001268:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126c:	091b      	lsrs	r3, r3, #4
 800126e:	2264      	movs	r2, #100	; 0x64
 8001270:	fb02 f303 	mul.w	r3, r2, r3
 8001274:	69fa      	ldr	r2, [r7, #28]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	899b      	ldrh	r3, [r3, #12]
 800127e:	b29b      	uxth	r3, r3
 8001280:	b29b      	uxth	r3, r3
 8001282:	b21b      	sxth	r3, r3
 8001284:	2b00      	cmp	r3, #0
 8001286:	da0d      	bge.n	80012a4 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	00db      	lsls	r3, r3, #3
 800128c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001290:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <USART_Init+0x170>)
 8001292:	fba3 1302 	umull	r1, r3, r3, r2
 8001296:	095b      	lsrs	r3, r3, #5
 8001298:	f003 0307 	and.w	r3, r3, #7
 800129c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800129e:	4313      	orrs	r3, r2
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
 80012a2:	e00c      	b.n	80012be <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	011b      	lsls	r3, r3, #4
 80012a8:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80012ac:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <USART_Init+0x170>)
 80012ae:	fba3 1302 	umull	r1, r3, r3, r2
 80012b2:	095b      	lsrs	r3, r3, #5
 80012b4:	f003 030f 	and.w	r3, r3, #15
 80012b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012ba:	4313      	orrs	r3, r2
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 80012be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c0:	b29a      	uxth	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	811a      	strh	r2, [r3, #8]
}
 80012c6:	3728      	adds	r7, #40	; 0x28
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40011000 	.word	0x40011000
 80012d0:	40011400 	.word	0x40011400
 80012d4:	51eb851f 	.word	0x51eb851f

080012d8 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80012e6:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	220c      	movs	r2, #12
 80012fe:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	819a      	strh	r2, [r3, #12]
}
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <USART_ClockInit>:
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	8a1b      	ldrh	r3, [r3, #16]
 8001322:	b29b      	uxth	r3, r3
 8001324:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800132c:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	881a      	ldrh	r2, [r3, #0]
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8001336:	4313      	orrs	r3, r2
 8001338:	b29a      	uxth	r2, r3
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	889b      	ldrh	r3, [r3, #4]
 800133e:	4313      	orrs	r3, r2
 8001340:	b29a      	uxth	r2, r3
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	88db      	ldrh	r3, [r3, #6]
 8001346:	4313      	orrs	r3, r2
 8001348:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 800134a:	68fa      	ldr	r2, [r7, #12]
 800134c:	4313      	orrs	r3, r2
 800134e:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	b29a      	uxth	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	821a      	strh	r2, [r3, #16]
}
 8001358:	3714      	adds	r7, #20
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop

08001364 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	80da      	strh	r2, [r3, #6]
}
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop

08001390 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	460b      	mov	r3, r1
 800139a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800139c:	78fb      	ldrb	r3, [r7, #3]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d008      	beq.n	80013b4 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	899b      	ldrh	r3, [r3, #12]
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	819a      	strh	r2, [r3, #12]
 80013b2:	e007      	b.n	80013c4 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	899b      	ldrh	r3, [r3, #12]
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80013be:	b29a      	uxth	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	819a      	strh	r2, [r3, #12]
  }
}
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop

080013d0 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock. 
  * @note   The function is used for IrDA mode with UART4 and UART5.   
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	460b      	mov	r3, r1
 80013da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	8b1b      	ldrh	r3, [r3, #24]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	8b1b      	ldrh	r3, [r3, #24]
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	78fb      	ldrb	r3, [r7, #3]
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	4313      	orrs	r3, r2
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	831a      	strh	r2, [r3, #24]
}
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <USART_OverSampling8Cmd>:
  * @param  NewState: new state of the USART 8x oversampling mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	460b      	mov	r3, r1
 8001412:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001414:	78fb      	ldrb	r3, [r7, #3]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d00a      	beq.n	8001430 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	899b      	ldrh	r3, [r3, #12]
 800141e:	b29b      	uxth	r3, r3
 8001420:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001424:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001428:	b29a      	uxth	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	819a      	strh	r2, [r3, #12]
 800142e:	e007      	b.n	8001440 <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	899b      	ldrh	r3, [r3, #12]
 8001434:	b29b      	uxth	r3, r3
 8001436:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800143a:	b29a      	uxth	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	819a      	strh	r2, [r3, #12]
  }
}  
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop

0800144c <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	460b      	mov	r3, r1
 8001456:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001458:	78fb      	ldrb	r3, [r7, #3]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d008      	beq.n	8001470 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	8a9b      	ldrh	r3, [r3, #20]
 8001462:	b29b      	uxth	r3, r3
 8001464:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001468:	b29a      	uxth	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	829a      	strh	r2, [r3, #20]
 800146e:	e007      	b.n	8001480 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	8a9b      	ldrh	r3, [r3, #20]
 8001474:	b29b      	uxth	r3, r3
 8001476:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800147a:	b29a      	uxth	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	829a      	strh	r2, [r3, #20]
  }
}
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop

0800148c <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	460b      	mov	r3, r1
 8001496:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8001498:	887b      	ldrh	r3, [r7, #2]
 800149a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800149e:	b29a      	uxth	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	809a      	strh	r2, [r3, #4]
}
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop

080014b0 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	889b      	ldrh	r3, [r3, #4]
 80014bc:	b29b      	uxth	r3, r3
 80014be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014c2:	b29b      	uxth	r3, r3
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <USART_SetAddress>:
  *         UART peripheral.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	460b      	mov	r3, r1
 80014da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	8a1b      	ldrh	r3, [r3, #16]
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	f023 030f 	bic.w	r3, r3, #15
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	8a1b      	ldrh	r3, [r3, #16]
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	78fb      	ldrb	r3, [r7, #3]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	4313      	orrs	r3, r2
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	821a      	strh	r2, [r3, #16]
}
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	460b      	mov	r3, r1
 8001512:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8001514:	78fb      	ldrb	r3, [r7, #3]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d008      	beq.n	800152c <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	899b      	ldrh	r3, [r3, #12]
 800151e:	b29b      	uxth	r3, r3
 8001520:	f043 0302 	orr.w	r3, r3, #2
 8001524:	b29a      	uxth	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	819a      	strh	r2, [r3, #12]
 800152a:	e007      	b.n	800153c <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	899b      	ldrh	r3, [r3, #12]
 8001530:	b29b      	uxth	r3, r3
 8001532:	f023 0302 	bic.w	r3, r3, #2
 8001536:	b29a      	uxth	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	819a      	strh	r2, [r3, #12]
  }
}
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop

08001548 <USART_WakeUpConfig>:
  *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	460b      	mov	r3, r1
 8001552:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	899b      	ldrh	r3, [r3, #12]
 8001558:	b29b      	uxth	r3, r3
 800155a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800155e:	b29a      	uxth	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	899b      	ldrh	r3, [r3, #12]
 8001568:	b29a      	uxth	r2, r3
 800156a:	887b      	ldrh	r3, [r7, #2]
 800156c:	4313      	orrs	r3, r2
 800156e:	b29a      	uxth	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	819a      	strh	r2, [r3, #12]
}
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop

08001580 <USART_LINBreakDetectLengthConfig>:
  *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	8a1b      	ldrh	r3, [r3, #16]
 8001590:	b29b      	uxth	r3, r3
 8001592:	f023 0320 	bic.w	r3, r3, #32
 8001596:	b29a      	uxth	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	8a1b      	ldrh	r3, [r3, #16]
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	887b      	ldrh	r3, [r7, #2]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	821a      	strh	r2, [r3, #16]
}
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop

080015b8 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80015c4:	78fb      	ldrb	r3, [r7, #3]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d008      	beq.n	80015dc <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	8a1b      	ldrh	r3, [r3, #16]
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	821a      	strh	r2, [r3, #16]
 80015da:	e007      	b.n	80015ec <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	8a1b      	ldrh	r3, [r3, #16]
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	821a      	strh	r2, [r3, #16]
  }
}
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop

080015f8 <USART_SendBreak>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	899b      	ldrh	r3, [r3, #12]
 8001604:	b29b      	uxth	r3, r3
 8001606:	f043 0301 	orr.w	r3, r3, #1
 800160a:	b29a      	uxth	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	819a      	strh	r2, [r3, #12]
}
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop

0800161c <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	460b      	mov	r3, r1
 8001626:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001628:	78fb      	ldrb	r3, [r7, #3]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d008      	beq.n	8001640 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	8a9b      	ldrh	r3, [r3, #20]
 8001632:	b29b      	uxth	r3, r3
 8001634:	f043 0308 	orr.w	r3, r3, #8
 8001638:	b29a      	uxth	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	829a      	strh	r2, [r3, #20]
 800163e:	e007      	b.n	8001650 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	8a9b      	ldrh	r3, [r3, #20]
 8001644:	b29b      	uxth	r3, r3
 8001646:	f023 0308 	bic.w	r3, r3, #8
 800164a:	b29a      	uxth	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	829a      	strh	r2, [r3, #20]
  }
}
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop

0800165c <USART_SetGuardTime>:
  *         UART peripheral.
  * @param  USART_GuardTime: specifies the guard time.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	460b      	mov	r3, r1
 8001666:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	8b1b      	ldrh	r3, [r3, #24]
 800166c:	b29b      	uxth	r3, r3
 800166e:	b2db      	uxtb	r3, r3
 8001670:	b29a      	uxth	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	8b1b      	ldrh	r3, [r3, #24]
 800167a:	b29a      	uxth	r2, r3
 800167c:	78fb      	ldrb	r3, [r7, #3]
 800167e:	b29b      	uxth	r3, r3
 8001680:	021b      	lsls	r3, r3, #8
 8001682:	b29b      	uxth	r3, r3
 8001684:	4313      	orrs	r3, r2
 8001686:	b29a      	uxth	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	831a      	strh	r2, [r3, #24]
}
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop

08001698 <USART_SmartCardCmd>:
  * @param  NewState: new state of the Smart Card mode.
  *          This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	460b      	mov	r3, r1
 80016a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80016a4:	78fb      	ldrb	r3, [r7, #3]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d008      	beq.n	80016bc <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	8a9b      	ldrh	r3, [r3, #20]
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	f043 0320 	orr.w	r3, r3, #32
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	829a      	strh	r2, [r3, #20]
 80016ba:	e007      	b.n	80016cc <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	8a9b      	ldrh	r3, [r3, #20]
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	f023 0320 	bic.w	r3, r3, #32
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	829a      	strh	r2, [r3, #20]
  }
}
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop

080016d8 <USART_SmartCardNACKCmd>:
  * @param  NewState: new state of the NACK transmission.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	460b      	mov	r3, r1
 80016e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80016e4:	78fb      	ldrb	r3, [r7, #3]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d008      	beq.n	80016fc <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	8a9b      	ldrh	r3, [r3, #20]
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	f043 0310 	orr.w	r3, r3, #16
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	829a      	strh	r2, [r3, #20]
 80016fa:	e007      	b.n	800170c <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	8a9b      	ldrh	r3, [r3, #20]
 8001700:	b29b      	uxth	r3, r3
 8001702:	f023 0310 	bic.w	r3, r3, #16
 8001706:	b29a      	uxth	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	829a      	strh	r2, [r3, #20]
  }
}
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop

08001718 <USART_IrDAConfig>:
  *            @arg USART_IrDAMode_LowPower
  *            @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	460b      	mov	r3, r1
 8001722:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	8a9b      	ldrh	r3, [r3, #20]
 8001728:	b29b      	uxth	r3, r3
 800172a:	f023 0304 	bic.w	r3, r3, #4
 800172e:	b29a      	uxth	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	8a9b      	ldrh	r3, [r3, #20]
 8001738:	b29a      	uxth	r2, r3
 800173a:	887b      	ldrh	r3, [r7, #2]
 800173c:	4313      	orrs	r3, r2
 800173e:	b29a      	uxth	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	829a      	strh	r2, [r3, #20]
}
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop

08001750 <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	460b      	mov	r3, r1
 800175a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 800175c:	78fb      	ldrb	r3, [r7, #3]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d008      	beq.n	8001774 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	8a9b      	ldrh	r3, [r3, #20]
 8001766:	b29b      	uxth	r3, r3
 8001768:	f043 0302 	orr.w	r3, r3, #2
 800176c:	b29a      	uxth	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	829a      	strh	r2, [r3, #20]
 8001772:	e007      	b.n	8001784 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	8a9b      	ldrh	r3, [r3, #20]
 8001778:	b29b      	uxth	r3, r3
 800177a:	f023 0302 	bic.w	r3, r3, #2
 800177e:	b29a      	uxth	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	829a      	strh	r2, [r3, #20]
  }
}
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop

08001790 <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.   
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	4613      	mov	r3, r2
 800179a:	460a      	mov	r2, r1
 800179c:	807a      	strh	r2, [r7, #2]
 800179e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 80017a0:	787b      	ldrb	r3, [r7, #1]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d008      	beq.n	80017b8 <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	8a9b      	ldrh	r3, [r3, #20]
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	887b      	ldrh	r3, [r7, #2]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	829a      	strh	r2, [r3, #20]
 80017b6:	e009      	b.n	80017cc <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	8a9b      	ldrh	r3, [r3, #20]
 80017bc:	b29a      	uxth	r2, r3
 80017be:	887b      	ldrh	r3, [r7, #2]
 80017c0:	43db      	mvns	r3, r3
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	4013      	ands	r3, r2
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	829a      	strh	r2, [r3, #20]
  }
}
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop

080017d8 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 80017d8:	b480      	push	{r7}
 80017da:	b087      	sub	sp, #28
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	4613      	mov	r3, r2
 80017e2:	460a      	mov	r2, r1
 80017e4:	807a      	strh	r2, [r7, #2]
 80017e6:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 80017e8:	2300      	movs	r3, #0
 80017ea:	613b      	str	r3, [r7, #16]
 80017ec:	2300      	movs	r3, #0
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	2300      	movs	r3, #0
 80017f2:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80017fc:	887b      	ldrh	r3, [r7, #2]
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	095b      	lsrs	r3, r3, #5
 8001802:	b2db      	uxtb	r3, r3
 8001804:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8001806:	887b      	ldrh	r3, [r7, #2]
 8001808:	f003 031f 	and.w	r3, r3, #31
 800180c:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2201      	movs	r2, #1
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d103      	bne.n	8001826 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	330c      	adds	r3, #12
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	e009      	b.n	800183a <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	2b02      	cmp	r3, #2
 800182a:	d103      	bne.n	8001834 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	3310      	adds	r3, #16
 8001830:	617b      	str	r3, [r7, #20]
 8001832:	e002      	b.n	800183a <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	3314      	adds	r3, #20
 8001838:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 800183a:	787b      	ldrb	r3, [r7, #1]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d006      	beq.n	800184e <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	697a      	ldr	r2, [r7, #20]
 8001844:	6811      	ldr	r1, [r2, #0]
 8001846:	68ba      	ldr	r2, [r7, #8]
 8001848:	430a      	orrs	r2, r1
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	e006      	b.n	800185c <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	697a      	ldr	r2, [r7, #20]
 8001852:	6811      	ldr	r1, [r2, #0]
 8001854:	68ba      	ldr	r2, [r7, #8]
 8001856:	43d2      	mvns	r2, r2
 8001858:	400a      	ands	r2, r1
 800185a:	601a      	str	r2, [r3, #0]
  }
}
 800185c:	371c      	adds	r7, #28
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop

08001868 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	460b      	mov	r3, r1
 8001872:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001874:	2300      	movs	r3, #0
 8001876:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	881b      	ldrh	r3, [r3, #0]
 800187c:	b29a      	uxth	r2, r3
 800187e:	887b      	ldrh	r3, [r7, #2]
 8001880:	4013      	ands	r3, r2
 8001882:	b29b      	uxth	r3, r3
 8001884:	2b00      	cmp	r3, #0
 8001886:	d002      	beq.n	800188e <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8001888:	2301      	movs	r3, #1
 800188a:	73fb      	strb	r3, [r7, #15]
 800188c:	e001      	b.n	8001892 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 800188e:	2300      	movs	r3, #0
 8001890:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001892:	7bfb      	ldrb	r3, [r7, #15]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <USART_ClearFlag>:
  *          (USART_SendData()).
  *   
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	460b      	mov	r3, r1
 80018aa:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 80018ac:	887b      	ldrh	r3, [r7, #2]
 80018ae:	43db      	mvns	r3, r3
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	801a      	strh	r2, [r3, #0]
}
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b087      	sub	sp, #28
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	460b      	mov	r3, r1
 80018ca:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 80018cc:	2300      	movs	r3, #0
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
 80018d4:	2300      	movs	r3, #0
 80018d6:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 80018d8:	2300      	movs	r3, #0
 80018da:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80018dc:	887b      	ldrh	r3, [r7, #2]
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	095b      	lsrs	r3, r3, #5
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 80018e6:	887b      	ldrh	r3, [r7, #2]
 80018e8:	f003 031f 	and.w	r3, r3, #31
 80018ec:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	2201      	movs	r2, #1
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d106      	bne.n	800190c <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	899b      	ldrh	r3, [r3, #12]
 8001902:	b29b      	uxth	r3, r3
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	4013      	ands	r3, r2
 8001908:	617b      	str	r3, [r7, #20]
 800190a:	e00f      	b.n	800192c <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	2b02      	cmp	r3, #2
 8001910:	d106      	bne.n	8001920 <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	8a1b      	ldrh	r3, [r3, #16]
 8001916:	b29b      	uxth	r3, r3
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	4013      	ands	r3, r2
 800191c:	617b      	str	r3, [r7, #20]
 800191e:	e005      	b.n	800192c <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	8a9b      	ldrh	r3, [r3, #20]
 8001924:	b29b      	uxth	r3, r3
 8001926:	697a      	ldr	r2, [r7, #20]
 8001928:	4013      	ands	r3, r2
 800192a:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 800192c:	887b      	ldrh	r3, [r7, #2]
 800192e:	0a1b      	lsrs	r3, r3, #8
 8001930:	b29b      	uxth	r3, r3
 8001932:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2201      	movs	r2, #1
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	881b      	ldrh	r3, [r3, #0]
 8001942:	b29b      	uxth	r3, r3
 8001944:	68fa      	ldr	r2, [r7, #12]
 8001946:	4013      	ands	r3, r2
 8001948:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d005      	beq.n	800195c <USART_GetITStatus+0x9c>
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d002      	beq.n	800195c <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
 8001956:	2301      	movs	r3, #1
 8001958:	74fb      	strb	r3, [r7, #19]
 800195a:	e001      	b.n	8001960 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
 800195c:	2300      	movs	r3, #0
 800195e:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8001960:	7cfb      	ldrb	r3, [r7, #19]
}
 8001962:	4618      	mov	r0, r3
 8001964:	371c      	adds	r7, #28
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop

08001970 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	460b      	mov	r3, r1
 800197a:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 800197c:	2300      	movs	r3, #0
 800197e:	81fb      	strh	r3, [r7, #14]
 8001980:	2300      	movs	r3, #0
 8001982:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8001984:	887b      	ldrh	r3, [r7, #2]
 8001986:	0a1b      	lsrs	r3, r3, #8
 8001988:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 800198a:	89fb      	ldrh	r3, [r7, #14]
 800198c:	2201      	movs	r2, #1
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8001994:	89bb      	ldrh	r3, [r7, #12]
 8001996:	43db      	mvns	r3, r3
 8001998:	b29a      	uxth	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	801a      	strh	r2, [r3, #0]
}
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	4b5f      	ldr	r3, [pc, #380]	; (8001b30 <TIM_DeInit+0x188>)
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d108      	bne.n	80019ca <TIM_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 80019b8:	2001      	movs	r0, #1
 80019ba:	2101      	movs	r1, #1
 80019bc:	f002 fa4e 	bl	8003e5c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 80019c0:	2001      	movs	r0, #1
 80019c2:	2100      	movs	r1, #0
 80019c4:	f002 fa4a 	bl	8003e5c <RCC_APB2PeriphResetCmd>
 80019c8:	e0af      	b.n	8001b2a <TIM_DeInit+0x182>
  } 
  else if (TIMx == TIM2) 
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019d0:	d108      	bne.n	80019e4 <TIM_DeInit+0x3c>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 80019d2:	2001      	movs	r0, #1
 80019d4:	2101      	movs	r1, #1
 80019d6:	f002 fa23 	bl	8003e20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 80019da:	2001      	movs	r0, #1
 80019dc:	2100      	movs	r1, #0
 80019de:	f002 fa1f 	bl	8003e20 <RCC_APB1PeriphResetCmd>
 80019e2:	e0a2      	b.n	8001b2a <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM3)
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	4b53      	ldr	r3, [pc, #332]	; (8001b34 <TIM_DeInit+0x18c>)
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d108      	bne.n	80019fe <TIM_DeInit+0x56>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 80019ec:	2002      	movs	r0, #2
 80019ee:	2101      	movs	r1, #1
 80019f0:	f002 fa16 	bl	8003e20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 80019f4:	2002      	movs	r0, #2
 80019f6:	2100      	movs	r1, #0
 80019f8:	f002 fa12 	bl	8003e20 <RCC_APB1PeriphResetCmd>
 80019fc:	e095      	b.n	8001b2a <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM4)
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	4b4d      	ldr	r3, [pc, #308]	; (8001b38 <TIM_DeInit+0x190>)
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d108      	bne.n	8001a18 <TIM_DeInit+0x70>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8001a06:	2004      	movs	r0, #4
 8001a08:	2101      	movs	r1, #1
 8001a0a:	f002 fa09 	bl	8003e20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8001a0e:	2004      	movs	r0, #4
 8001a10:	2100      	movs	r1, #0
 8001a12:	f002 fa05 	bl	8003e20 <RCC_APB1PeriphResetCmd>
 8001a16:	e088      	b.n	8001b2a <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM5)
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	4b48      	ldr	r3, [pc, #288]	; (8001b3c <TIM_DeInit+0x194>)
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d108      	bne.n	8001a32 <TIM_DeInit+0x8a>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8001a20:	2008      	movs	r0, #8
 8001a22:	2101      	movs	r1, #1
 8001a24:	f002 f9fc 	bl	8003e20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8001a28:	2008      	movs	r0, #8
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	f002 f9f8 	bl	8003e20 <RCC_APB1PeriphResetCmd>
 8001a30:	e07b      	b.n	8001b2a <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM6)  
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	4b42      	ldr	r3, [pc, #264]	; (8001b40 <TIM_DeInit+0x198>)
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d108      	bne.n	8001a4c <TIM_DeInit+0xa4>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8001a3a:	2010      	movs	r0, #16
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	f002 f9ef 	bl	8003e20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8001a42:	2010      	movs	r0, #16
 8001a44:	2100      	movs	r1, #0
 8001a46:	f002 f9eb 	bl	8003e20 <RCC_APB1PeriphResetCmd>
 8001a4a:	e06e      	b.n	8001b2a <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM7)
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	4b3d      	ldr	r3, [pc, #244]	; (8001b44 <TIM_DeInit+0x19c>)
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d108      	bne.n	8001a66 <TIM_DeInit+0xbe>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8001a54:	2020      	movs	r0, #32
 8001a56:	2101      	movs	r1, #1
 8001a58:	f002 f9e2 	bl	8003e20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8001a5c:	2020      	movs	r0, #32
 8001a5e:	2100      	movs	r1, #0
 8001a60:	f002 f9de 	bl	8003e20 <RCC_APB1PeriphResetCmd>
 8001a64:	e061      	b.n	8001b2a <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM8)
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	4b37      	ldr	r3, [pc, #220]	; (8001b48 <TIM_DeInit+0x1a0>)
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d108      	bne.n	8001a80 <TIM_DeInit+0xd8>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 8001a6e:	2002      	movs	r0, #2
 8001a70:	2101      	movs	r1, #1
 8001a72:	f002 f9f3 	bl	8003e5c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8001a76:	2002      	movs	r0, #2
 8001a78:	2100      	movs	r1, #0
 8001a7a:	f002 f9ef 	bl	8003e5c <RCC_APB2PeriphResetCmd>
 8001a7e:	e054      	b.n	8001b2a <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM9)
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	4b32      	ldr	r3, [pc, #200]	; (8001b4c <TIM_DeInit+0x1a4>)
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d10a      	bne.n	8001a9e <TIM_DeInit+0xf6>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 8001a88:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	f002 f9e5 	bl	8003e5c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 8001a92:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001a96:	2100      	movs	r1, #0
 8001a98:	f002 f9e0 	bl	8003e5c <RCC_APB2PeriphResetCmd>
 8001a9c:	e045      	b.n	8001b2a <TIM_DeInit+0x182>
   }  
  else if (TIMx == TIM10)
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	4b2b      	ldr	r3, [pc, #172]	; (8001b50 <TIM_DeInit+0x1a8>)
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d10a      	bne.n	8001abc <TIM_DeInit+0x114>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 8001aa6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001aaa:	2101      	movs	r1, #1
 8001aac:	f002 f9d6 	bl	8003e5c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 8001ab0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	f002 f9d1 	bl	8003e5c <RCC_APB2PeriphResetCmd>
 8001aba:	e036      	b.n	8001b2a <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM11) 
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	4b25      	ldr	r3, [pc, #148]	; (8001b54 <TIM_DeInit+0x1ac>)
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d10a      	bne.n	8001ada <TIM_DeInit+0x132>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 8001ac4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001ac8:	2101      	movs	r1, #1
 8001aca:	f002 f9c7 	bl	8003e5c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 8001ace:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	f002 f9c2 	bl	8003e5c <RCC_APB2PeriphResetCmd>
 8001ad8:	e027      	b.n	8001b2a <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM12)
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	4b1e      	ldr	r3, [pc, #120]	; (8001b58 <TIM_DeInit+0x1b0>)
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d108      	bne.n	8001af4 <TIM_DeInit+0x14c>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 8001ae2:	2040      	movs	r0, #64	; 0x40
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	f002 f99b 	bl	8003e20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 8001aea:	2040      	movs	r0, #64	; 0x40
 8001aec:	2100      	movs	r1, #0
 8001aee:	f002 f997 	bl	8003e20 <RCC_APB1PeriphResetCmd>
 8001af2:	e01a      	b.n	8001b2a <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM13) 
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	4b19      	ldr	r3, [pc, #100]	; (8001b5c <TIM_DeInit+0x1b4>)
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d108      	bne.n	8001b0e <TIM_DeInit+0x166>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 8001afc:	2080      	movs	r0, #128	; 0x80
 8001afe:	2101      	movs	r1, #1
 8001b00:	f002 f98e 	bl	8003e20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8001b04:	2080      	movs	r0, #128	; 0x80
 8001b06:	2100      	movs	r1, #0
 8001b08:	f002 f98a 	bl	8003e20 <RCC_APB1PeriphResetCmd>
 8001b0c:	e00d      	b.n	8001b2a <TIM_DeInit+0x182>
  }  
  else
  { 
    if (TIMx == TIM14) 
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	4b13      	ldr	r3, [pc, #76]	; (8001b60 <TIM_DeInit+0x1b8>)
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d109      	bne.n	8001b2a <TIM_DeInit+0x182>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 8001b16:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	f002 f980 	bl	8003e20 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8001b20:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001b24:	2100      	movs	r1, #0
 8001b26:	f002 f97b 	bl	8003e20 <RCC_APB1PeriphResetCmd>
    }   
  }
}
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40010000 	.word	0x40010000
 8001b34:	40000400 	.word	0x40000400
 8001b38:	40000800 	.word	0x40000800
 8001b3c:	40000c00 	.word	0x40000c00
 8001b40:	40001000 	.word	0x40001000
 8001b44:	40001400 	.word	0x40001400
 8001b48:	40010400 	.word	0x40010400
 8001b4c:	40014000 	.word	0x40014000
 8001b50:	40014400 	.word	0x40014400
 8001b54:	40014800 	.word	0x40014800
 8001b58:	40001800 	.word	0x40001800
 8001b5c:	40001c00 	.word	0x40001c00
 8001b60:	40002000 	.word	0x40002000

08001b64 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	881b      	ldrh	r3, [r3, #0]
 8001b76:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	4b28      	ldr	r3, [pc, #160]	; (8001c1c <TIM_TimeBaseInit+0xb8>)
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d013      	beq.n	8001ba8 <TIM_TimeBaseInit+0x44>
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	4b27      	ldr	r3, [pc, #156]	; (8001c20 <TIM_TimeBaseInit+0xbc>)
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d00f      	beq.n	8001ba8 <TIM_TimeBaseInit+0x44>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b8e:	d00b      	beq.n	8001ba8 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	4b24      	ldr	r3, [pc, #144]	; (8001c24 <TIM_TimeBaseInit+0xc0>)
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d007      	beq.n	8001ba8 <TIM_TimeBaseInit+0x44>
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	4b23      	ldr	r3, [pc, #140]	; (8001c28 <TIM_TimeBaseInit+0xc4>)
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d003      	beq.n	8001ba8 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	4b22      	ldr	r3, [pc, #136]	; (8001c2c <TIM_TimeBaseInit+0xc8>)
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d108      	bne.n	8001bba <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8001ba8:	89fb      	ldrh	r3, [r7, #14]
 8001baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bae:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	885a      	ldrh	r2, [r3, #2]
 8001bb4:	89fb      	ldrh	r3, [r7, #14]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	4b1c      	ldr	r3, [pc, #112]	; (8001c30 <TIM_TimeBaseInit+0xcc>)
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d00c      	beq.n	8001bdc <TIM_TimeBaseInit+0x78>
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	4b1b      	ldr	r3, [pc, #108]	; (8001c34 <TIM_TimeBaseInit+0xd0>)
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d008      	beq.n	8001bdc <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8001bca:	89fb      	ldrh	r3, [r7, #14]
 8001bcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bd0:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	891a      	ldrh	r2, [r3, #8]
 8001bd6:	89fb      	ldrh	r3, [r7, #14]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	89fa      	ldrh	r2, [r7, #14]
 8001be0:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685a      	ldr	r2, [r3, #4]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	881a      	ldrh	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	4b09      	ldr	r3, [pc, #36]	; (8001c1c <TIM_TimeBaseInit+0xb8>)
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d003      	beq.n	8001c02 <TIM_TimeBaseInit+0x9e>
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <TIM_TimeBaseInit+0xbc>)
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d104      	bne.n	8001c0c <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	7a9b      	ldrb	r3, [r3, #10]
 8001c06:	461a      	mov	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	829a      	strh	r2, [r3, #20]
}
 8001c12:	3714      	adds	r7, #20
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	40010000 	.word	0x40010000
 8001c20:	40010400 	.word	0x40010400
 8001c24:	40000400 	.word	0x40000400
 8001c28:	40000800 	.word	0x40000800
 8001c2c:	40000c00 	.word	0x40000c00
 8001c30:	40001000 	.word	0x40001000
 8001c34:	40001400 	.word	0x40001400

08001c38 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f04f 32ff 	mov.w	r2, #4294967295
 8001c46:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	729a      	strb	r2, [r3, #10]
}
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop

08001c6c <TIM_PrescalerConfig>:
  *            @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *            @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediatly.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	4613      	mov	r3, r2
 8001c76:	460a      	mov	r2, r1
 8001c78:	807a      	strh	r2, [r7, #2]
 8001c7a:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	887a      	ldrh	r2, [r7, #2]
 8001c80:	851a      	strh	r2, [r3, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	883a      	ldrh	r2, [r7, #0]
 8001c86:	829a      	strh	r2, [r3, #20]
}
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop

08001c94 <TIM_CounterModeConfig>:
  *            @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *            @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpcr1 = 0;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	881b      	ldrh	r3, [r3, #0]
 8001ca8:	81fb      	strh	r3, [r7, #14]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001caa:	89fb      	ldrh	r3, [r7, #14]
 8001cac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cb0:	81fb      	strh	r3, [r7, #14]

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 8001cb2:	89fa      	ldrh	r2, [r7, #14]
 8001cb4:	887b      	ldrh	r3, [r7, #2]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	89fa      	ldrh	r2, [r7, #14]
 8001cbe:	801a      	strh	r2, [r3, #0]
}
 8001cc0:	3714      	adds	r7, #20
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop

08001ccc <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop

08001ce8 <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop

08001d04 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d28:	b29b      	uxth	r3, r3
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop

08001d38 <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	460b      	mov	r3, r1
 8001d42:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001d44:	78fb      	ldrb	r3, [r7, #3]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d008      	beq.n	8001d5c <TIM_UpdateDisableConfig+0x24>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	881b      	ldrh	r3, [r3, #0]
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	f043 0302 	orr.w	r3, r3, #2
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	801a      	strh	r2, [r3, #0]
 8001d5a:	e007      	b.n	8001d6c <TIM_UpdateDisableConfig+0x34>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	881b      	ldrh	r3, [r3, #0]
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	f023 0302 	bic.w	r3, r3, #2
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	801a      	strh	r2, [r3, #0]
  }
}
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop

08001d78 <TIM_UpdateRequestConfig>:
  *                 generation through the slave mode controller.
  *            @arg TIM_UpdateSource_Regular: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	460b      	mov	r3, r1
 8001d82:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 8001d84:	887b      	ldrh	r3, [r7, #2]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d008      	beq.n	8001d9c <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	881b      	ldrh	r3, [r3, #0]
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	f043 0304 	orr.w	r3, r3, #4
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	801a      	strh	r2, [r3, #0]
 8001d9a:	e007      	b.n	8001dac <TIM_UpdateRequestConfig+0x34>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	881b      	ldrh	r3, [r3, #0]
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	f023 0304 	bic.w	r3, r3, #4
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	801a      	strh	r2, [r3, #0]
  }
}
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop

08001db8 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001dc4:	78fb      	ldrb	r3, [r7, #3]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d008      	beq.n	8001ddc <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	881b      	ldrh	r3, [r3, #0]
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	801a      	strh	r2, [r3, #0]
 8001dda:	e007      	b.n	8001dec <TIM_ARRPreloadConfig+0x34>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	881b      	ldrh	r3, [r3, #0]
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	801a      	strh	r2, [r3, #0]
  }
}
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop

08001df8 <TIM_SelectOnePulseMode>:
  *            @arg TIM_OPMode_Single
  *            @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	460b      	mov	r3, r1
 8001e02:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	881b      	ldrh	r3, [r3, #0]
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	f023 0308 	bic.w	r3, r3, #8
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	801a      	strh	r2, [r3, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	881b      	ldrh	r3, [r3, #0]
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	887b      	ldrh	r3, [r7, #2]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	801a      	strh	r2, [r3, #0]
}
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop

08001e30 <TIM_SetClockDivision>:
  *            @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *            @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	881b      	ldrh	r3, [r3, #0]
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	801a      	strh	r2, [r3, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	881b      	ldrh	r3, [r3, #0]
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	887b      	ldrh	r3, [r7, #2]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	801a      	strh	r2, [r3, #0]
}
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop

08001e68 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	460b      	mov	r3, r1
 8001e72:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001e74:	78fb      	ldrb	r3, [r7, #3]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d008      	beq.n	8001e8c <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	881b      	ldrh	r3, [r3, #0]
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	801a      	strh	r2, [r3, #0]
 8001e8a:	e007      	b.n	8001e9c <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	881b      	ldrh	r3, [r3, #0]
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	f023 0301 	bic.w	r3, r3, #1
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	801a      	strh	r2, [r3, #0]
  }
}
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop

08001ea8 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	817b      	strh	r3, [r7, #10]
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	81fb      	strh	r3, [r7, #14]
 8001eba:	2300      	movs	r3, #0
 8001ebc:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	8c1b      	ldrh	r3, [r3, #32]
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	f023 0301 	bic.w	r3, r3, #1
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	8c1b      	ldrh	r3, [r3, #32]
 8001ed2:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	889b      	ldrh	r3, [r3, #4]
 8001ed8:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	8b1b      	ldrh	r3, [r3, #24]
 8001ede:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 8001ee0:	897b      	ldrh	r3, [r7, #10]
 8001ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ee6:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 8001ee8:	897b      	ldrh	r3, [r7, #10]
 8001eea:	f023 0303 	bic.w	r3, r3, #3
 8001eee:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	881a      	ldrh	r2, [r3, #0]
 8001ef4:	897b      	ldrh	r3, [r7, #10]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 8001efa:	89fb      	ldrh	r3, [r7, #14]
 8001efc:	f023 0302 	bic.w	r3, r3, #2
 8001f00:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	899a      	ldrh	r2, [r3, #12]
 8001f06:	89fb      	ldrh	r3, [r7, #14]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	885a      	ldrh	r2, [r3, #2]
 8001f10:	89fb      	ldrh	r3, [r7, #14]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	4b1e      	ldr	r3, [pc, #120]	; (8001f94 <TIM_OC1Init+0xec>)
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d003      	beq.n	8001f26 <TIM_OC1Init+0x7e>
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	4b1d      	ldr	r3, [pc, #116]	; (8001f98 <TIM_OC1Init+0xf0>)
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d123      	bne.n	8001f6e <TIM_OC1Init+0xc6>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8001f26:	89fb      	ldrh	r3, [r7, #14]
 8001f28:	f023 0308 	bic.w	r3, r3, #8
 8001f2c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	89da      	ldrh	r2, [r3, #14]
 8001f32:	89fb      	ldrh	r3, [r7, #14]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 8001f38:	89fb      	ldrh	r3, [r7, #14]
 8001f3a:	f023 0304 	bic.w	r3, r3, #4
 8001f3e:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	889a      	ldrh	r2, [r3, #4]
 8001f44:	89fb      	ldrh	r3, [r7, #14]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 8001f4a:	89bb      	ldrh	r3, [r7, #12]
 8001f4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f50:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 8001f52:	89bb      	ldrh	r3, [r7, #12]
 8001f54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f58:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	8a1a      	ldrh	r2, [r3, #16]
 8001f5e:	89bb      	ldrh	r3, [r7, #12]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	8a5a      	ldrh	r2, [r3, #18]
 8001f68:	89bb      	ldrh	r3, [r7, #12]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	89ba      	ldrh	r2, [r7, #12]
 8001f72:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	897a      	ldrh	r2, [r7, #10]
 8001f78:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	689a      	ldr	r2, [r3, #8]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	89fa      	ldrh	r2, [r7, #14]
 8001f86:	841a      	strh	r2, [r3, #32]
}
 8001f88:	3714      	adds	r7, #20
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	40010000 	.word	0x40010000
 8001f98:	40010400 	.word	0x40010400

08001f9c <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	817b      	strh	r3, [r7, #10]
 8001faa:	2300      	movs	r3, #0
 8001fac:	81fb      	strh	r3, [r7, #14]
 8001fae:	2300      	movs	r3, #0
 8001fb0:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	8c1b      	ldrh	r3, [r3, #32]
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	f023 0310 	bic.w	r3, r3, #16
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	8c1b      	ldrh	r3, [r3, #32]
 8001fc6:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	889b      	ldrh	r3, [r3, #4]
 8001fcc:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	8b1b      	ldrh	r3, [r3, #24]
 8001fd2:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
 8001fd4:	897b      	ldrh	r3, [r7, #10]
 8001fd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001fda:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 8001fdc:	897b      	ldrh	r3, [r7, #10]
 8001fde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fe2:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	881b      	ldrh	r3, [r3, #0]
 8001fe8:	021b      	lsls	r3, r3, #8
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	897b      	ldrh	r3, [r7, #10]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 8001ff2:	89fb      	ldrh	r3, [r7, #14]
 8001ff4:	f023 0320 	bic.w	r3, r3, #32
 8001ff8:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	899b      	ldrh	r3, [r3, #12]
 8001ffe:	011b      	lsls	r3, r3, #4
 8002000:	b29a      	uxth	r2, r3
 8002002:	89fb      	ldrh	r3, [r7, #14]
 8002004:	4313      	orrs	r3, r2
 8002006:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	885b      	ldrh	r3, [r3, #2]
 800200c:	011b      	lsls	r3, r3, #4
 800200e:	b29a      	uxth	r2, r3
 8002010:	89fb      	ldrh	r3, [r7, #14]
 8002012:	4313      	orrs	r3, r2
 8002014:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	4b22      	ldr	r3, [pc, #136]	; (80020a4 <TIM_OC2Init+0x108>)
 800201a:	429a      	cmp	r2, r3
 800201c:	d003      	beq.n	8002026 <TIM_OC2Init+0x8a>
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	4b21      	ldr	r3, [pc, #132]	; (80020a8 <TIM_OC2Init+0x10c>)
 8002022:	429a      	cmp	r2, r3
 8002024:	d12b      	bne.n	800207e <TIM_OC2Init+0xe2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8002026:	89fb      	ldrh	r3, [r7, #14]
 8002028:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800202c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	89db      	ldrh	r3, [r3, #14]
 8002032:	011b      	lsls	r3, r3, #4
 8002034:	b29a      	uxth	r2, r3
 8002036:	89fb      	ldrh	r3, [r7, #14]
 8002038:	4313      	orrs	r3, r2
 800203a:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 800203c:	89fb      	ldrh	r3, [r7, #14]
 800203e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002042:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	889b      	ldrh	r3, [r3, #4]
 8002048:	011b      	lsls	r3, r3, #4
 800204a:	b29a      	uxth	r2, r3
 800204c:	89fb      	ldrh	r3, [r7, #14]
 800204e:	4313      	orrs	r3, r2
 8002050:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
 8002052:	89bb      	ldrh	r3, [r7, #12]
 8002054:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002058:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 800205a:	89bb      	ldrh	r3, [r7, #12]
 800205c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002060:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	8a1b      	ldrh	r3, [r3, #16]
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	b29a      	uxth	r2, r3
 800206a:	89bb      	ldrh	r3, [r7, #12]
 800206c:	4313      	orrs	r3, r2
 800206e:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	8a5b      	ldrh	r3, [r3, #18]
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	b29a      	uxth	r2, r3
 8002078:	89bb      	ldrh	r3, [r7, #12]
 800207a:	4313      	orrs	r3, r2
 800207c:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	89ba      	ldrh	r2, [r7, #12]
 8002082:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	897a      	ldrh	r2, [r7, #10]
 8002088:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	689a      	ldr	r2, [r3, #8]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	89fa      	ldrh	r2, [r7, #14]
 8002096:	841a      	strh	r2, [r3, #32]
}
 8002098:	3714      	adds	r7, #20
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	40010000 	.word	0x40010000
 80020a8:	40010400 	.word	0x40010400

080020ac <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80020b6:	2300      	movs	r3, #0
 80020b8:	817b      	strh	r3, [r7, #10]
 80020ba:	2300      	movs	r3, #0
 80020bc:	81fb      	strh	r3, [r7, #14]
 80020be:	2300      	movs	r3, #0
 80020c0:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	8c1b      	ldrh	r3, [r3, #32]
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	8c1b      	ldrh	r3, [r3, #32]
 80020d6:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	889b      	ldrh	r3, [r3, #4]
 80020dc:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	8b9b      	ldrh	r3, [r3, #28]
 80020e2:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 80020e4:	897b      	ldrh	r3, [r7, #10]
 80020e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020ea:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 80020ec:	897b      	ldrh	r3, [r7, #10]
 80020ee:	f023 0303 	bic.w	r3, r3, #3
 80020f2:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	881a      	ldrh	r2, [r3, #0]
 80020f8:	897b      	ldrh	r3, [r7, #10]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 80020fe:	89fb      	ldrh	r3, [r7, #14]
 8002100:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002104:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	899b      	ldrh	r3, [r3, #12]
 800210a:	021b      	lsls	r3, r3, #8
 800210c:	b29a      	uxth	r2, r3
 800210e:	89fb      	ldrh	r3, [r7, #14]
 8002110:	4313      	orrs	r3, r2
 8002112:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	885b      	ldrh	r3, [r3, #2]
 8002118:	021b      	lsls	r3, r3, #8
 800211a:	b29a      	uxth	r2, r3
 800211c:	89fb      	ldrh	r3, [r7, #14]
 800211e:	4313      	orrs	r3, r2
 8002120:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	4b22      	ldr	r3, [pc, #136]	; (80021b0 <TIM_OC3Init+0x104>)
 8002126:	429a      	cmp	r2, r3
 8002128:	d003      	beq.n	8002132 <TIM_OC3Init+0x86>
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	4b21      	ldr	r3, [pc, #132]	; (80021b4 <TIM_OC3Init+0x108>)
 800212e:	429a      	cmp	r2, r3
 8002130:	d12b      	bne.n	800218a <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8002132:	89fb      	ldrh	r3, [r7, #14]
 8002134:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002138:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	89db      	ldrh	r3, [r3, #14]
 800213e:	021b      	lsls	r3, r3, #8
 8002140:	b29a      	uxth	r2, r3
 8002142:	89fb      	ldrh	r3, [r7, #14]
 8002144:	4313      	orrs	r3, r2
 8002146:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8002148:	89fb      	ldrh	r3, [r7, #14]
 800214a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800214e:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	889b      	ldrh	r3, [r3, #4]
 8002154:	021b      	lsls	r3, r3, #8
 8002156:	b29a      	uxth	r2, r3
 8002158:	89fb      	ldrh	r3, [r7, #14]
 800215a:	4313      	orrs	r3, r2
 800215c:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 800215e:	89bb      	ldrh	r3, [r7, #12]
 8002160:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002164:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 8002166:	89bb      	ldrh	r3, [r7, #12]
 8002168:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800216c:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	8a1b      	ldrh	r3, [r3, #16]
 8002172:	011b      	lsls	r3, r3, #4
 8002174:	b29a      	uxth	r2, r3
 8002176:	89bb      	ldrh	r3, [r7, #12]
 8002178:	4313      	orrs	r3, r2
 800217a:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	8a5b      	ldrh	r3, [r3, #18]
 8002180:	011b      	lsls	r3, r3, #4
 8002182:	b29a      	uxth	r2, r3
 8002184:	89bb      	ldrh	r3, [r7, #12]
 8002186:	4313      	orrs	r3, r2
 8002188:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	89ba      	ldrh	r2, [r7, #12]
 800218e:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	897a      	ldrh	r2, [r7, #10]
 8002194:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	689a      	ldr	r2, [r3, #8]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	89fa      	ldrh	r2, [r7, #14]
 80021a2:	841a      	strh	r2, [r3, #32]
}
 80021a4:	3714      	adds	r7, #20
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	40010000 	.word	0x40010000
 80021b4:	40010400 	.word	0x40010400

080021b8 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80021c2:	2300      	movs	r3, #0
 80021c4:	81bb      	strh	r3, [r7, #12]
 80021c6:	2300      	movs	r3, #0
 80021c8:	817b      	strh	r3, [r7, #10]
 80021ca:	2300      	movs	r3, #0
 80021cc:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	8c1b      	ldrh	r3, [r3, #32]
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80021d8:	b29a      	uxth	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	8c1b      	ldrh	r3, [r3, #32]
 80021e2:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	889b      	ldrh	r3, [r3, #4]
 80021e8:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	8b9b      	ldrh	r3, [r3, #28]
 80021ee:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 80021f0:	89bb      	ldrh	r3, [r7, #12]
 80021f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021f6:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 80021f8:	89bb      	ldrh	r3, [r7, #12]
 80021fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021fe:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	881b      	ldrh	r3, [r3, #0]
 8002204:	021b      	lsls	r3, r3, #8
 8002206:	b29a      	uxth	r2, r3
 8002208:	89bb      	ldrh	r3, [r7, #12]
 800220a:	4313      	orrs	r3, r2
 800220c:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 800220e:	897b      	ldrh	r3, [r7, #10]
 8002210:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002214:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	899b      	ldrh	r3, [r3, #12]
 800221a:	031b      	lsls	r3, r3, #12
 800221c:	b29a      	uxth	r2, r3
 800221e:	897b      	ldrh	r3, [r7, #10]
 8002220:	4313      	orrs	r3, r2
 8002222:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	885b      	ldrh	r3, [r3, #2]
 8002228:	031b      	lsls	r3, r3, #12
 800222a:	b29a      	uxth	r2, r3
 800222c:	897b      	ldrh	r3, [r7, #10]
 800222e:	4313      	orrs	r3, r2
 8002230:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	4b11      	ldr	r3, [pc, #68]	; (800227c <TIM_OC4Init+0xc4>)
 8002236:	429a      	cmp	r2, r3
 8002238:	d003      	beq.n	8002242 <TIM_OC4Init+0x8a>
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	4b10      	ldr	r3, [pc, #64]	; (8002280 <TIM_OC4Init+0xc8>)
 800223e:	429a      	cmp	r2, r3
 8002240:	d10a      	bne.n	8002258 <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 8002242:	89fb      	ldrh	r3, [r7, #14]
 8002244:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002248:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	8a1b      	ldrh	r3, [r3, #16]
 800224e:	019b      	lsls	r3, r3, #6
 8002250:	b29a      	uxth	r2, r3
 8002252:	89fb      	ldrh	r3, [r7, #14]
 8002254:	4313      	orrs	r3, r2
 8002256:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	89fa      	ldrh	r2, [r7, #14]
 800225c:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	89ba      	ldrh	r2, [r7, #12]
 8002262:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	897a      	ldrh	r2, [r7, #10]
 8002270:	841a      	strh	r2, [r3, #32]
}
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	40010000 	.word	0x40010000
 8002280:	40010400 	.word	0x40010400

08002284 <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	801a      	strh	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	805a      	strh	r2, [r3, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	609a      	str	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	81da      	strh	r2, [r3, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	821a      	strh	r2, [r3, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	825a      	strh	r2, [r3, #18]
}
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop

080022c8 <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	4613      	mov	r3, r2
 80022d2:	460a      	mov	r2, r1
 80022d4:	807a      	strh	r2, [r7, #2]
 80022d6:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
 80022d8:	2300      	movs	r3, #0
 80022da:	60fb      	str	r3, [r7, #12]
  uint16_t tmp1 = 0;
 80022dc:	2300      	movs	r3, #0
 80022de:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	60fb      	str	r3, [r7, #12]
  tmp += CCMR_OFFSET;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	3318      	adds	r3, #24
 80022e8:	60fb      	str	r3, [r7, #12]

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 80022ea:	887b      	ldrh	r3, [r7, #2]
 80022ec:	2201      	movs	r2, #1
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	817b      	strh	r3, [r7, #10]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	8c1b      	ldrh	r3, [r3, #32]
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	897b      	ldrh	r3, [r7, #10]
 80022fc:	43db      	mvns	r3, r3
 80022fe:	b29b      	uxth	r3, r3
 8002300:	4013      	ands	r3, r2
 8002302:	b29a      	uxth	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	841a      	strh	r2, [r3, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8002308:	887b      	ldrh	r3, [r7, #2]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d002      	beq.n	8002314 <TIM_SelectOCxM+0x4c>
 800230e:	887b      	ldrh	r3, [r7, #2]
 8002310:	2b08      	cmp	r3, #8
 8002312:	d113      	bne.n	800233c <TIM_SelectOCxM+0x74>
  {
    tmp += (TIM_Channel>>1);
 8002314:	887b      	ldrh	r3, [r7, #2]
 8002316:	085b      	lsrs	r3, r3, #1
 8002318:	b29b      	uxth	r3, r3
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	4413      	add	r3, r2
 800231e:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6819      	ldr	r1, [r3, #0]
 8002326:	f64f 738f 	movw	r3, #65423	; 0xff8f
 800232a:	400b      	ands	r3, r1
 800232c:	6013      	str	r3, [r2, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	6811      	ldr	r1, [r2, #0]
 8002334:	883a      	ldrh	r2, [r7, #0]
 8002336:	430a      	orrs	r2, r1
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	e016      	b.n	800236a <TIM_SelectOCxM+0xa2>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 800233c:	887b      	ldrh	r3, [r7, #2]
 800233e:	3b04      	subs	r3, #4
 8002340:	b29b      	uxth	r3, r3
 8002342:	085b      	lsrs	r3, r3, #1
 8002344:	b29b      	uxth	r3, r3
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	4413      	add	r3, r2
 800234a:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6819      	ldr	r1, [r3, #0]
 8002352:	f648 73ff 	movw	r3, #36863	; 0x8fff
 8002356:	400b      	ands	r3, r1
 8002358:	6013      	str	r3, [r2, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	6811      	ldr	r1, [r2, #0]
 8002360:	883a      	ldrh	r2, [r7, #0]
 8002362:	0212      	lsls	r2, r2, #8
 8002364:	b292      	uxth	r2, r2
 8002366:	430a      	orrs	r2, r1
 8002368:	601a      	str	r2, [r3, #0]
  }
}
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop

08002390 <TIM_SetCompare2>:
  *         peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	639a      	str	r2, [r3, #56]	; 0x38
}
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop

080023ac <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop

080023c8 <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop

080023e4 <TIM_ForcedOC1Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	460b      	mov	r3, r1
 80023ee:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80023f0:	2300      	movs	r3, #0
 80023f2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	8b1b      	ldrh	r3, [r3, #24]
 80023f8:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
 80023fa:	89fb      	ldrh	r3, [r7, #14]
 80023fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002400:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 8002402:	89fa      	ldrh	r2, [r7, #14]
 8002404:	887b      	ldrh	r3, [r7, #2]
 8002406:	4313      	orrs	r3, r2
 8002408:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	89fa      	ldrh	r2, [r7, #14]
 800240e:	831a      	strh	r2, [r3, #24]
}
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop

0800241c <TIM_ForcedOC2Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	460b      	mov	r3, r1
 8002426:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8002428:	2300      	movs	r3, #0
 800242a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	8b1b      	ldrh	r3, [r3, #24]
 8002430:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
 8002432:	89fb      	ldrh	r3, [r7, #14]
 8002434:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002438:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 800243a:	887b      	ldrh	r3, [r7, #2]
 800243c:	021b      	lsls	r3, r3, #8
 800243e:	b29a      	uxth	r2, r3
 8002440:	89fb      	ldrh	r3, [r7, #14]
 8002442:	4313      	orrs	r3, r2
 8002444:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	89fa      	ldrh	r2, [r7, #14]
 800244a:	831a      	strh	r2, [r3, #24]
}
 800244c:	3714      	adds	r7, #20
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop

08002458 <TIM_ForcedOC3Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	460b      	mov	r3, r1
 8002462:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8002464:	2300      	movs	r3, #0
 8002466:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	8b9b      	ldrh	r3, [r3, #28]
 800246c:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
 800246e:	89fb      	ldrh	r3, [r7, #14]
 8002470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002474:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 8002476:	89fa      	ldrh	r2, [r7, #14]
 8002478:	887b      	ldrh	r3, [r7, #2]
 800247a:	4313      	orrs	r3, r2
 800247c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	89fa      	ldrh	r2, [r7, #14]
 8002482:	839a      	strh	r2, [r3, #28]
}
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop

08002490 <TIM_ForcedOC4Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	460b      	mov	r3, r1
 800249a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800249c:	2300      	movs	r3, #0
 800249e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	8b9b      	ldrh	r3, [r3, #28]
 80024a4:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
 80024a6:	89fb      	ldrh	r3, [r7, #14]
 80024a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024ac:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 80024ae:	887b      	ldrh	r3, [r7, #2]
 80024b0:	021b      	lsls	r3, r3, #8
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	89fb      	ldrh	r3, [r7, #14]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	89fa      	ldrh	r2, [r7, #14]
 80024be:	839a      	strh	r2, [r3, #28]
}
 80024c0:	3714      	adds	r7, #20
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop

080024cc <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	460b      	mov	r3, r1
 80024d6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80024d8:	2300      	movs	r3, #0
 80024da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	8b1b      	ldrh	r3, [r3, #24]
 80024e0:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 80024e2:	89fb      	ldrh	r3, [r7, #14]
 80024e4:	f023 0308 	bic.w	r3, r3, #8
 80024e8:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 80024ea:	89fa      	ldrh	r2, [r7, #14]
 80024ec:	887b      	ldrh	r3, [r7, #2]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	89fa      	ldrh	r2, [r7, #14]
 80024f6:	831a      	strh	r2, [r3, #24]
}
 80024f8:	3714      	adds	r7, #20
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop

08002504 <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	460b      	mov	r3, r1
 800250e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8002510:	2300      	movs	r3, #0
 8002512:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	8b1b      	ldrh	r3, [r3, #24]
 8002518:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 800251a:	89fb      	ldrh	r3, [r7, #14]
 800251c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002520:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8002522:	887b      	ldrh	r3, [r7, #2]
 8002524:	021b      	lsls	r3, r3, #8
 8002526:	b29a      	uxth	r2, r3
 8002528:	89fb      	ldrh	r3, [r7, #14]
 800252a:	4313      	orrs	r3, r2
 800252c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	89fa      	ldrh	r2, [r7, #14]
 8002532:	831a      	strh	r2, [r3, #24]
}
 8002534:	3714      	adds	r7, #20
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop

08002540 <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	460b      	mov	r3, r1
 800254a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800254c:	2300      	movs	r3, #0
 800254e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	8b9b      	ldrh	r3, [r3, #28]
 8002554:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8002556:	89fb      	ldrh	r3, [r7, #14]
 8002558:	f023 0308 	bic.w	r3, r3, #8
 800255c:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 800255e:	89fa      	ldrh	r2, [r7, #14]
 8002560:	887b      	ldrh	r3, [r7, #2]
 8002562:	4313      	orrs	r3, r2
 8002564:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	89fa      	ldrh	r2, [r7, #14]
 800256a:	839a      	strh	r2, [r3, #28]
}
 800256c:	3714      	adds	r7, #20
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop

08002578 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	460b      	mov	r3, r1
 8002582:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8002584:	2300      	movs	r3, #0
 8002586:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	8b9b      	ldrh	r3, [r3, #28]
 800258c:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 800258e:	89fb      	ldrh	r3, [r7, #14]
 8002590:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002594:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8002596:	887b      	ldrh	r3, [r7, #2]
 8002598:	021b      	lsls	r3, r3, #8
 800259a:	b29a      	uxth	r2, r3
 800259c:	89fb      	ldrh	r3, [r7, #14]
 800259e:	4313      	orrs	r3, r2
 80025a0:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	89fa      	ldrh	r2, [r7, #14]
 80025a6:	839a      	strh	r2, [r3, #28]
}
 80025a8:	3714      	adds	r7, #20
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop

080025b4 <TIM_OC1FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	460b      	mov	r3, r1
 80025be:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80025c0:	2300      	movs	r3, #0
 80025c2:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	8b1b      	ldrh	r3, [r3, #24]
 80025c8:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
 80025ca:	89fb      	ldrh	r3, [r7, #14]
 80025cc:	f023 0304 	bic.w	r3, r3, #4
 80025d0:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 80025d2:	89fa      	ldrh	r2, [r7, #14]
 80025d4:	887b      	ldrh	r3, [r7, #2]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	89fa      	ldrh	r2, [r7, #14]
 80025de:	831a      	strh	r2, [r3, #24]
}
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop

080025ec <TIM_OC2FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80025f8:	2300      	movs	r3, #0
 80025fa:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	8b1b      	ldrh	r3, [r3, #24]
 8002600:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
 8002602:	89fb      	ldrh	r3, [r7, #14]
 8002604:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002608:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 800260a:	887b      	ldrh	r3, [r7, #2]
 800260c:	021b      	lsls	r3, r3, #8
 800260e:	b29a      	uxth	r2, r3
 8002610:	89fb      	ldrh	r3, [r7, #14]
 8002612:	4313      	orrs	r3, r2
 8002614:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	89fa      	ldrh	r2, [r7, #14]
 800261a:	831a      	strh	r2, [r3, #24]
}
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop

08002628 <TIM_OC3FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	460b      	mov	r3, r1
 8002632:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8002634:	2300      	movs	r3, #0
 8002636:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	8b9b      	ldrh	r3, [r3, #28]
 800263c:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
 800263e:	89fb      	ldrh	r3, [r7, #14]
 8002640:	f023 0304 	bic.w	r3, r3, #4
 8002644:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 8002646:	89fa      	ldrh	r2, [r7, #14]
 8002648:	887b      	ldrh	r3, [r7, #2]
 800264a:	4313      	orrs	r3, r2
 800264c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	89fa      	ldrh	r2, [r7, #14]
 8002652:	839a      	strh	r2, [r3, #28]
}
 8002654:	3714      	adds	r7, #20
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop

08002660 <TIM_OC4FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	460b      	mov	r3, r1
 800266a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800266c:	2300      	movs	r3, #0
 800266e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	8b9b      	ldrh	r3, [r3, #28]
 8002674:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
 8002676:	89fb      	ldrh	r3, [r7, #14]
 8002678:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800267c:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 800267e:	887b      	ldrh	r3, [r7, #2]
 8002680:	021b      	lsls	r3, r3, #8
 8002682:	b29a      	uxth	r2, r3
 8002684:	89fb      	ldrh	r3, [r7, #14]
 8002686:	4313      	orrs	r3, r2
 8002688:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	89fa      	ldrh	r2, [r7, #14]
 800268e:	839a      	strh	r2, [r3, #28]
}
 8002690:	3714      	adds	r7, #20
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop

0800269c <TIM_ClearOC1Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	460b      	mov	r3, r1
 80026a6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80026a8:	2300      	movs	r3, #0
 80026aa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	8b1b      	ldrh	r3, [r3, #24]
 80026b0:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
 80026b2:	89fb      	ldrh	r3, [r7, #14]
 80026b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026b8:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 80026ba:	89fa      	ldrh	r2, [r7, #14]
 80026bc:	887b      	ldrh	r3, [r7, #2]
 80026be:	4313      	orrs	r3, r2
 80026c0:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	89fa      	ldrh	r2, [r7, #14]
 80026c6:	831a      	strh	r2, [r3, #24]
}
 80026c8:	3714      	adds	r7, #20
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop

080026d4 <TIM_ClearOC2Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	460b      	mov	r3, r1
 80026de:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80026e0:	2300      	movs	r3, #0
 80026e2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	8b1b      	ldrh	r3, [r3, #24]
 80026e8:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
 80026ea:	89fb      	ldrh	r3, [r7, #14]
 80026ec:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80026f0:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 80026f2:	887b      	ldrh	r3, [r7, #2]
 80026f4:	021b      	lsls	r3, r3, #8
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	89fb      	ldrh	r3, [r7, #14]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	89fa      	ldrh	r2, [r7, #14]
 8002702:	831a      	strh	r2, [r3, #24]
}
 8002704:	3714      	adds	r7, #20
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop

08002710 <TIM_ClearOC3Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	460b      	mov	r3, r1
 800271a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800271c:	2300      	movs	r3, #0
 800271e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	8b9b      	ldrh	r3, [r3, #28]
 8002724:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
 8002726:	89fb      	ldrh	r3, [r7, #14]
 8002728:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800272c:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 800272e:	89fa      	ldrh	r2, [r7, #14]
 8002730:	887b      	ldrh	r3, [r7, #2]
 8002732:	4313      	orrs	r3, r2
 8002734:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	89fa      	ldrh	r2, [r7, #14]
 800273a:	839a      	strh	r2, [r3, #28]
}
 800273c:	3714      	adds	r7, #20
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop

08002748 <TIM_ClearOC4Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	460b      	mov	r3, r1
 8002752:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8002754:	2300      	movs	r3, #0
 8002756:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	8b9b      	ldrh	r3, [r3, #28]
 800275c:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
 800275e:	89fb      	ldrh	r3, [r7, #14]
 8002760:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002764:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 8002766:	887b      	ldrh	r3, [r7, #2]
 8002768:	021b      	lsls	r3, r3, #8
 800276a:	b29a      	uxth	r2, r3
 800276c:	89fb      	ldrh	r3, [r7, #14]
 800276e:	4313      	orrs	r3, r2
 8002770:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	89fa      	ldrh	r2, [r7, #14]
 8002776:	839a      	strh	r2, [r3, #28]
}
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop

08002784 <TIM_OC1PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8002790:	2300      	movs	r3, #0
 8002792:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	8c1b      	ldrh	r3, [r3, #32]
 8002798:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
 800279a:	89fb      	ldrh	r3, [r7, #14]
 800279c:	f023 0302 	bic.w	r3, r3, #2
 80027a0:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCPolarity;
 80027a2:	89fa      	ldrh	r2, [r7, #14]
 80027a4:	887b      	ldrh	r3, [r7, #2]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	89fa      	ldrh	r2, [r7, #14]
 80027ae:	841a      	strh	r2, [r3, #32]
}
 80027b0:	3714      	adds	r7, #20
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop

080027bc <TIM_OC1NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	460b      	mov	r3, r1
 80027c6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 80027c8:	2300      	movs	r3, #0
 80027ca:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	8c1b      	ldrh	r3, [r3, #32]
 80027d0:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 80027d2:	89fb      	ldrh	r3, [r7, #14]
 80027d4:	f023 0308 	bic.w	r3, r3, #8
 80027d8:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCNPolarity;
 80027da:	89fa      	ldrh	r2, [r7, #14]
 80027dc:	887b      	ldrh	r3, [r7, #2]
 80027de:	4313      	orrs	r3, r2
 80027e0:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	89fa      	ldrh	r2, [r7, #14]
 80027e6:	841a      	strh	r2, [r3, #32]
}
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop

080027f4 <TIM_OC2PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	460b      	mov	r3, r1
 80027fe:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8002800:	2300      	movs	r3, #0
 8002802:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	8c1b      	ldrh	r3, [r3, #32]
 8002808:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
 800280a:	89fb      	ldrh	r3, [r7, #14]
 800280c:	f023 0320 	bic.w	r3, r3, #32
 8002810:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 8002812:	887b      	ldrh	r3, [r7, #2]
 8002814:	011b      	lsls	r3, r3, #4
 8002816:	b29a      	uxth	r2, r3
 8002818:	89fb      	ldrh	r3, [r7, #14]
 800281a:	4313      	orrs	r3, r2
 800281c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	89fa      	ldrh	r2, [r7, #14]
 8002822:	841a      	strh	r2, [r3, #32]
}
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop

08002830 <TIM_OC2NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	460b      	mov	r3, r1
 800283a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800283c:	2300      	movs	r3, #0
 800283e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	8c1b      	ldrh	r3, [r3, #32]
 8002844:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8002846:	89fb      	ldrh	r3, [r7, #14]
 8002848:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800284c:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 800284e:	887b      	ldrh	r3, [r7, #2]
 8002850:	011b      	lsls	r3, r3, #4
 8002852:	b29a      	uxth	r2, r3
 8002854:	89fb      	ldrh	r3, [r7, #14]
 8002856:	4313      	orrs	r3, r2
 8002858:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	89fa      	ldrh	r2, [r7, #14]
 800285e:	841a      	strh	r2, [r3, #32]
}
 8002860:	3714      	adds	r7, #20
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop

0800286c <TIM_OC3PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	460b      	mov	r3, r1
 8002876:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8002878:	2300      	movs	r3, #0
 800287a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	8c1b      	ldrh	r3, [r3, #32]
 8002880:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8002882:	89fb      	ldrh	r3, [r7, #14]
 8002884:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002888:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 800288a:	887b      	ldrh	r3, [r7, #2]
 800288c:	021b      	lsls	r3, r3, #8
 800288e:	b29a      	uxth	r2, r3
 8002890:	89fb      	ldrh	r3, [r7, #14]
 8002892:	4313      	orrs	r3, r2
 8002894:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	89fa      	ldrh	r2, [r7, #14]
 800289a:	841a      	strh	r2, [r3, #32]
}
 800289c:	3714      	adds	r7, #20
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop

080028a8 <TIM_OC3NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	460b      	mov	r3, r1
 80028b2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 80028b4:	2300      	movs	r3, #0
 80028b6:	81fb      	strh	r3, [r7, #14]
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	8c1b      	ldrh	r3, [r3, #32]
 80028bc:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 80028be:	89fb      	ldrh	r3, [r7, #14]
 80028c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028c4:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 80028c6:	887b      	ldrh	r3, [r7, #2]
 80028c8:	021b      	lsls	r3, r3, #8
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	89fb      	ldrh	r3, [r7, #14]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	89fa      	ldrh	r2, [r7, #14]
 80028d6:	841a      	strh	r2, [r3, #32]
}
 80028d8:	3714      	adds	r7, #20
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop

080028e4 <TIM_OC4PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	460b      	mov	r3, r1
 80028ee:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 80028f0:	2300      	movs	r3, #0
 80028f2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	8c1b      	ldrh	r3, [r3, #32]
 80028f8:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 80028fa:	89fb      	ldrh	r3, [r7, #14]
 80028fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002900:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 8002902:	887b      	ldrh	r3, [r7, #2]
 8002904:	031b      	lsls	r3, r3, #12
 8002906:	b29a      	uxth	r2, r3
 8002908:	89fb      	ldrh	r3, [r7, #14]
 800290a:	4313      	orrs	r3, r2
 800290c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	89fa      	ldrh	r2, [r7, #14]
 8002912:	841a      	strh	r2, [r3, #32]
}
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop

08002920 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	4613      	mov	r3, r2
 800292a:	460a      	mov	r2, r1
 800292c:	807a      	strh	r2, [r7, #2]
 800292e:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 8002930:	2300      	movs	r3, #0
 8002932:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 8002934:	887b      	ldrh	r3, [r7, #2]
 8002936:	2201      	movs	r2, #1
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	8c1b      	ldrh	r3, [r3, #32]
 8002942:	b29a      	uxth	r2, r3
 8002944:	89fb      	ldrh	r3, [r7, #14]
 8002946:	43db      	mvns	r3, r3
 8002948:	b29b      	uxth	r3, r3
 800294a:	4013      	ands	r3, r2
 800294c:	b29a      	uxth	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	8c1b      	ldrh	r3, [r3, #32]
 8002956:	b29a      	uxth	r2, r3
 8002958:	8839      	ldrh	r1, [r7, #0]
 800295a:	887b      	ldrh	r3, [r7, #2]
 800295c:	fa01 f303 	lsl.w	r3, r1, r3
 8002960:	b29b      	uxth	r3, r3
 8002962:	4313      	orrs	r3, r2
 8002964:	b29a      	uxth	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	841a      	strh	r2, [r3, #32]
}
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	4613      	mov	r3, r2
 800297e:	460a      	mov	r2, r1
 8002980:	807a      	strh	r2, [r7, #2]
 8002982:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 8002984:	2300      	movs	r3, #0
 8002986:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 8002988:	887b      	ldrh	r3, [r7, #2]
 800298a:	2204      	movs	r2, #4
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	8c1b      	ldrh	r3, [r3, #32]
 8002996:	b29a      	uxth	r2, r3
 8002998:	89fb      	ldrh	r3, [r7, #14]
 800299a:	43db      	mvns	r3, r3
 800299c:	b29b      	uxth	r3, r3
 800299e:	4013      	ands	r3, r2
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	8c1b      	ldrh	r3, [r3, #32]
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	8839      	ldrh	r1, [r7, #0]
 80029ae:	887b      	ldrh	r3, [r7, #2]
 80029b0:	fa01 f303 	lsl.w	r3, r1, r3
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	4313      	orrs	r3, r2
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	841a      	strh	r2, [r3, #32]
}
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	881b      	ldrh	r3, [r3, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10f      	bne.n	80029fa <TIM_ICInit+0x32>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	8859      	ldrh	r1, [r3, #2]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	889a      	ldrh	r2, [r3, #4]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	891b      	ldrh	r3, [r3, #8]
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 fc92 	bl	8003310 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	88db      	ldrh	r3, [r3, #6]
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	4619      	mov	r1, r3
 80029f4:	f000 f8e0 	bl	8002bb8 <TIM_SetIC1Prescaler>
 80029f8:	e036      	b.n	8002a68 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	881b      	ldrh	r3, [r3, #0]
 80029fe:	2b04      	cmp	r3, #4
 8002a00:	d10f      	bne.n	8002a22 <TIM_ICInit+0x5a>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	8859      	ldrh	r1, [r3, #2]
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	889a      	ldrh	r2, [r3, #4]
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	891b      	ldrh	r3, [r3, #8]
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 fcba 	bl	8003388 <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	88db      	ldrh	r3, [r3, #6]
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	f000 f8e8 	bl	8002bf0 <TIM_SetIC2Prescaler>
 8002a20:	e022      	b.n	8002a68 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	881b      	ldrh	r3, [r3, #0]
 8002a26:	2b08      	cmp	r3, #8
 8002a28:	d10f      	bne.n	8002a4a <TIM_ICInit+0x82>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	8859      	ldrh	r1, [r3, #2]
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	889a      	ldrh	r2, [r3, #4]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	891b      	ldrh	r3, [r3, #8]
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 fcec 	bl	8003414 <TI3_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	88db      	ldrh	r3, [r3, #6]
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	4619      	mov	r1, r3
 8002a44:	f000 f8f2 	bl	8002c2c <TIM_SetIC3Prescaler>
 8002a48:	e00e      	b.n	8002a68 <TIM_ICInit+0xa0>
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	8859      	ldrh	r1, [r3, #2]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	889a      	ldrh	r2, [r3, #4]
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	891b      	ldrh	r3, [r3, #8]
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 fd1e 	bl	8003498 <TI4_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	88db      	ldrh	r3, [r3, #6]
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	4619      	mov	r1, r3
 8002a64:	f000 f8fe 	bl	8002c64 <TIM_SetIC4Prescaler>
  }
}
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop

08002a70 <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	811a      	strh	r2, [r3, #8]
}
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	81fb      	strh	r3, [r7, #14]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	81bb      	strh	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	885b      	ldrh	r3, [r3, #2]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d102      	bne.n	8002ac0 <TIM_PWMIConfig+0x20>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 8002aba:	2302      	movs	r3, #2
 8002abc:	81fb      	strh	r3, [r7, #14]
 8002abe:	e001      	b.n	8002ac4 <TIM_PWMIConfig+0x24>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	81fb      	strh	r3, [r7, #14]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	889b      	ldrh	r3, [r3, #4]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d102      	bne.n	8002ad2 <TIM_PWMIConfig+0x32>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 8002acc:	2302      	movs	r3, #2
 8002ace:	81bb      	strh	r3, [r7, #12]
 8002ad0:	e001      	b.n	8002ad6 <TIM_PWMIConfig+0x36>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	81bb      	strh	r3, [r7, #12]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	881b      	ldrh	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d11c      	bne.n	8002b18 <TIM_PWMIConfig+0x78>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	8859      	ldrh	r1, [r3, #2]
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	889a      	ldrh	r2, [r3, #4]
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	891b      	ldrh	r3, [r3, #8]
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 fc10 	bl	8003310 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	88db      	ldrh	r3, [r3, #6]
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	4619      	mov	r1, r3
 8002af8:	f000 f85e 	bl	8002bb8 <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	891b      	ldrh	r3, [r3, #8]
 8002b00:	89f9      	ldrh	r1, [r7, #14]
 8002b02:	89ba      	ldrh	r2, [r7, #12]
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 fc3f 	bl	8003388 <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	88db      	ldrh	r3, [r3, #6]
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	4619      	mov	r1, r3
 8002b12:	f000 f86d 	bl	8002bf0 <TIM_SetIC2Prescaler>
 8002b16:	e01b      	b.n	8002b50 <TIM_PWMIConfig+0xb0>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	8859      	ldrh	r1, [r3, #2]
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	889a      	ldrh	r2, [r3, #4]
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	891b      	ldrh	r3, [r3, #8]
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 fc2f 	bl	8003388 <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	88db      	ldrh	r3, [r3, #6]
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	4619      	mov	r1, r3
 8002b32:	f000 f85d 	bl	8002bf0 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	891b      	ldrh	r3, [r3, #8]
 8002b3a:	89f9      	ldrh	r1, [r7, #14]
 8002b3c:	89ba      	ldrh	r2, [r7, #12]
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 fbe6 	bl	8003310 <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	88db      	ldrh	r3, [r3, #6]
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	f000 f834 	bl	8002bb8 <TIM_SetIC1Prescaler>
  }
}
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop

08002b58 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <TIM_GetCapture2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint32_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <TIM_SetIC1Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	8b1b      	ldrh	r3, [r3, #24]
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	f023 030c 	bic.w	r3, r3, #12
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	831a      	strh	r2, [r3, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	8b1b      	ldrh	r3, [r3, #24]
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	887b      	ldrh	r3, [r7, #2]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	831a      	strh	r2, [r3, #24]
}
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop

08002bf0 <TIM_SetIC2Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	8b1b      	ldrh	r3, [r3, #24]
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	831a      	strh	r2, [r3, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	8b1b      	ldrh	r3, [r3, #24]
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	887b      	ldrh	r3, [r7, #2]
 8002c14:	021b      	lsls	r3, r3, #8
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	831a      	strh	r2, [r3, #24]
}
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop

08002c2c <TIM_SetIC3Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	460b      	mov	r3, r1
 8002c36:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	8b9b      	ldrh	r3, [r3, #28]
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	f023 030c 	bic.w	r3, r3, #12
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	839a      	strh	r2, [r3, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	8b9b      	ldrh	r3, [r3, #28]
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	887b      	ldrh	r3, [r7, #2]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	839a      	strh	r2, [r3, #28]
}
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop

08002c64 <TIM_SetIC4Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	8b9b      	ldrh	r3, [r3, #28]
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	839a      	strh	r2, [r3, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	8b9b      	ldrh	r3, [r3, #28]
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	887b      	ldrh	r3, [r7, #2]
 8002c88:	021b      	lsls	r3, r3, #8
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	839a      	strh	r2, [r3, #28]
}
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop

08002ca0 <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	881a      	ldrh	r2, [r3, #0]
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	885b      	ldrh	r3, [r3, #2]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	889b      	ldrh	r3, [r3, #4]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	88db      	ldrh	r3, [r3, #6]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	891b      	ldrh	r3, [r3, #8]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	895b      	ldrh	r3, [r3, #10]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	899b      	ldrh	r3, [r3, #12]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop

08002cf0 <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	801a      	strh	r2, [r3, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	805a      	strh	r2, [r3, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	809a      	strh	r2, [r3, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	80da      	strh	r2, [r3, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	811a      	strh	r2, [r3, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	815a      	strh	r2, [r3, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	819a      	strh	r2, [r3, #12]
}
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	460b      	mov	r3, r1
 8002d36:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002d38:	78fb      	ldrb	r3, [r7, #3]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00c      	beq.n	8002d58 <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8002d56:	e009      	b.n	8002d6c <TIM_CtrlPWMOutputs+0x40>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }  
}
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop

08002d78 <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	460b      	mov	r3, r1
 8002d82:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002d84:	78fb      	ldrb	r3, [r7, #3]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d008      	beq.n	8002d9c <TIM_SelectCOM+0x24>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	889b      	ldrh	r3, [r3, #4]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	f043 0304 	orr.w	r3, r3, #4
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	809a      	strh	r2, [r3, #4]
 8002d9a:	e007      	b.n	8002dac <TIM_SelectCOM+0x34>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	889b      	ldrh	r3, [r3, #4]
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	f023 0304 	bic.w	r3, r3, #4
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	809a      	strh	r2, [r3, #4]
  }
}
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop

08002db8 <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002dc4:	78fb      	ldrb	r3, [r7, #3]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d008      	beq.n	8002ddc <TIM_CCPreloadControl+0x24>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	889b      	ldrh	r3, [r3, #4]
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	f043 0301 	orr.w	r3, r3, #1
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	809a      	strh	r2, [r3, #4]
 8002dda:	e007      	b.n	8002dec <TIM_CCPreloadControl+0x34>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	889b      	ldrh	r3, [r3, #4]
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	f023 0301 	bic.w	r3, r3, #1
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	809a      	strh	r2, [r3, #4]
  }
}
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop

08002df8 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	4613      	mov	r3, r2
 8002e02:	460a      	mov	r2, r1
 8002e04:	807a      	strh	r2, [r7, #2]
 8002e06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002e08:	787b      	ldrb	r3, [r7, #1]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d008      	beq.n	8002e20 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	899b      	ldrh	r3, [r3, #12]
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	887b      	ldrh	r3, [r7, #2]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	819a      	strh	r2, [r3, #12]
 8002e1e:	e009      	b.n	8002e34 <TIM_ITConfig+0x3c>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	899b      	ldrh	r3, [r3, #12]
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	887b      	ldrh	r3, [r7, #2]
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	819a      	strh	r2, [r3, #12]
  }
}
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop

08002e40 <TIM_GenerateEvent>:
  * @note   TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.
  *        
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	460b      	mov	r3, r1
 8002e4a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	887a      	ldrh	r2, [r7, #2]
 8002e50:	829a      	strh	r2, [r3, #20]
}
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <TIM_GetFlagStatus>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.    
  *
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	460b      	mov	r3, r1
 8002e66:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8002e68:	2300      	movs	r3, #0
 8002e6a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	8a1b      	ldrh	r3, [r3, #16]
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	887b      	ldrh	r3, [r7, #2]
 8002e74:	4013      	ands	r3, r2
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d002      	beq.n	8002e82 <TIM_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	73fb      	strb	r3, [r7, #15]
 8002e80:	e001      	b.n	8002e86 <TIM_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8002e82:	2300      	movs	r3, #0
 8002e84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <TIM_ClearFlag>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.
  *    
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 8002ea0:	887b      	ldrh	r3, [r7, #2]
 8002ea2:	43db      	mvns	r3, r3
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	821a      	strh	r2, [r3, #16]
}
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	81bb      	strh	r3, [r7, #12]
 8002ec8:	2300      	movs	r3, #0
 8002eca:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	8a1b      	ldrh	r3, [r3, #16]
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	887b      	ldrh	r3, [r7, #2]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	899b      	ldrh	r3, [r3, #12]
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	887b      	ldrh	r3, [r7, #2]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8002ee4:	89bb      	ldrh	r3, [r7, #12]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d005      	beq.n	8002ef6 <TIM_GetITStatus+0x42>
 8002eea:	897b      	ldrh	r3, [r7, #10]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d002      	beq.n	8002ef6 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	73fb      	strb	r3, [r7, #15]
 8002ef4:	e001      	b.n	8002efa <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3714      	adds	r7, #20
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	460b      	mov	r3, r1
 8002f12:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8002f14:	887b      	ldrh	r3, [r7, #2]
 8002f16:	43db      	mvns	r3, r3
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	821a      	strh	r2, [r3, #16]
}
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <TIM_DMAConfig>:
  * @param  TIM_DMABurstLength: DMA Burst length. This parameter can be one value
  *         between: TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	4613      	mov	r3, r2
 8002f32:	460a      	mov	r2, r1
 8002f34:	807a      	strh	r2, [r7, #2]
 8002f36:	803b      	strh	r3, [r7, #0]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 8002f38:	887a      	ldrh	r2, [r7, #2]
 8002f3a:	883b      	ldrh	r3, [r7, #0]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	460a      	mov	r2, r1
 8002f5c:	807a      	strh	r2, [r7, #2]
 8002f5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002f60:	787b      	ldrb	r3, [r7, #1]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d008      	beq.n	8002f78 <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	899b      	ldrh	r3, [r3, #12]
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	887b      	ldrh	r3, [r7, #2]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	819a      	strh	r2, [r3, #12]
 8002f76:	e009      	b.n	8002f8c <TIM_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	899b      	ldrh	r3, [r3, #12]
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	887b      	ldrh	r3, [r7, #2]
 8002f80:	43db      	mvns	r3, r3
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	4013      	ands	r3, r2
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	819a      	strh	r2, [r3, #12]
  }
}
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop

08002f98 <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002fa4:	78fb      	ldrb	r3, [r7, #3]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d008      	beq.n	8002fbc <TIM_SelectCCDMA+0x24>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	889b      	ldrh	r3, [r3, #4]
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	f043 0308 	orr.w	r3, r3, #8
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	809a      	strh	r2, [r3, #4]
 8002fba:	e007      	b.n	8002fcc <TIM_SelectCCDMA+0x34>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	889b      	ldrh	r3, [r3, #4]
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	f023 0308 	bic.w	r3, r3, #8
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	809a      	strh	r2, [r3, #4]
  }
}
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop

08002fd8 <TIM_InternalClockConfig>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	891b      	ldrh	r3, [r3, #8]
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	f023 0307 	bic.w	r3, r3, #7
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	811a      	strh	r2, [r3, #8]
}
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop

08002ffc <TIM_ITRxExternalClockConfig>:
  *            @arg TIM_TS_ITR2: Internal Trigger 2
  *            @arg TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	460b      	mov	r3, r1
 8003006:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
 8003008:	887b      	ldrh	r3, [r7, #2]
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	4619      	mov	r1, r3
 800300e:	f000 f875 	bl	80030fc <TIM_SelectInputTrigger>

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	891b      	ldrh	r3, [r3, #8]
 8003016:	b29b      	uxth	r3, r3
 8003018:	f043 0307 	orr.w	r3, r3, #7
 800301c:	b29a      	uxth	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	811a      	strh	r2, [r3, #8]
}
 8003022:	3708      	adds	r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <TIM_TIxExternalClockConfig>:
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	8179      	strh	r1, [r7, #10]
 8003032:	813a      	strh	r2, [r7, #8]
 8003034:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 8003036:	897b      	ldrh	r3, [r7, #10]
 8003038:	2b60      	cmp	r3, #96	; 0x60
 800303a:	d107      	bne.n	800304c <TIM_TIxExternalClockConfig+0x24>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 800303c:	893a      	ldrh	r2, [r7, #8]
 800303e:	88fb      	ldrh	r3, [r7, #6]
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	4611      	mov	r1, r2
 8003044:	2201      	movs	r2, #1
 8003046:	f000 f99f 	bl	8003388 <TI2_Config>
 800304a:	e006      	b.n	800305a <TIM_TIxExternalClockConfig+0x32>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 800304c:	893a      	ldrh	r2, [r7, #8]
 800304e:	88fb      	ldrh	r3, [r7, #6]
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	4611      	mov	r1, r2
 8003054:	2201      	movs	r2, #1
 8003056:	f000 f95b 	bl	8003310 <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
 800305a:	897b      	ldrh	r3, [r7, #10]
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	4619      	mov	r1, r3
 8003060:	f000 f84c 	bl	80030fc <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	891b      	ldrh	r3, [r3, #8]
 8003068:	b29b      	uxth	r3, r3
 800306a:	f043 0307 	orr.w	r3, r3, #7
 800306e:	b29a      	uxth	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	811a      	strh	r2, [r3, #8]
}
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop

0800307c <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	8179      	strh	r1, [r7, #10]
 8003086:	813a      	strh	r2, [r7, #8]
 8003088:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 800308a:	2300      	movs	r3, #0
 800308c:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 800308e:	8979      	ldrh	r1, [r7, #10]
 8003090:	893a      	ldrh	r2, [r7, #8]
 8003092:	88fb      	ldrh	r3, [r7, #6]
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f000 f8a1 	bl	80031dc <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	891b      	ldrh	r3, [r3, #8]
 800309e:	82fb      	strh	r3, [r7, #22]

  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 80030a0:	8afb      	ldrh	r3, [r7, #22]
 80030a2:	f023 0307 	bic.w	r3, r3, #7
 80030a6:	82fb      	strh	r3, [r7, #22]

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 80030a8:	8afb      	ldrh	r3, [r7, #22]
 80030aa:	f043 0307 	orr.w	r3, r3, #7
 80030ae:	82fb      	strh	r3, [r7, #22]

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 80030b0:	8afb      	ldrh	r3, [r7, #22]
 80030b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030b6:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_TS_ETRF;
 80030b8:	8afb      	ldrh	r3, [r7, #22]
 80030ba:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80030be:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8afa      	ldrh	r2, [r7, #22]
 80030c4:	811a      	strh	r2, [r3, #8]
}
 80030c6:	3718      	adds	r7, #24
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	8179      	strh	r1, [r7, #10]
 80030d6:	813a      	strh	r2, [r7, #8]
 80030d8:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 80030da:	8979      	ldrh	r1, [r7, #10]
 80030dc:	893a      	ldrh	r2, [r7, #8]
 80030de:	88fb      	ldrh	r3, [r7, #6]
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f000 f87b 	bl	80031dc <TIM_ETRConfig>

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	891b      	ldrh	r3, [r3, #8]
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	811a      	strh	r2, [r3, #8]
}
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <TIM_SelectInputTrigger>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	460b      	mov	r3, r1
 8003106:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
 8003108:	2300      	movs	r3, #0
 800310a:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	891b      	ldrh	r3, [r3, #8]
 8003110:	81fb      	strh	r3, [r7, #14]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8003112:	89fb      	ldrh	r3, [r7, #14]
 8003114:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003118:	81fb      	strh	r3, [r7, #14]

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 800311a:	89fa      	ldrh	r2, [r7, #14]
 800311c:	887b      	ldrh	r3, [r7, #2]
 800311e:	4313      	orrs	r3, r2
 8003120:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	89fa      	ldrh	r2, [r7, #14]
 8003126:	811a      	strh	r2, [r3, #8]
}
 8003128:	3714      	adds	r7, #20
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop

08003134 <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	460b      	mov	r3, r1
 800313e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	889b      	ldrh	r3, [r3, #4]
 8003144:	b29b      	uxth	r3, r3
 8003146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800314a:	b29a      	uxth	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	889b      	ldrh	r3, [r3, #4]
 8003154:	b29a      	uxth	r2, r3
 8003156:	887b      	ldrh	r3, [r7, #2]
 8003158:	4313      	orrs	r3, r2
 800315a:	b29a      	uxth	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	809a      	strh	r2, [r3, #4]
}
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop

0800316c <TIM_SelectSlaveMode>:
  *            @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI
  *            @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	460b      	mov	r3, r1
 8003176:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	891b      	ldrh	r3, [r3, #8]
 800317c:	b29b      	uxth	r3, r3
 800317e:	f023 0307 	bic.w	r3, r3, #7
 8003182:	b29a      	uxth	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	811a      	strh	r2, [r3, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	891b      	ldrh	r3, [r3, #8]
 800318c:	b29a      	uxth	r2, r3
 800318e:	887b      	ldrh	r3, [r7, #2]
 8003190:	4313      	orrs	r3, r2
 8003192:	b29a      	uxth	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	811a      	strh	r2, [r3, #8]
}
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop

080031a4 <TIM_SelectMasterSlaveMode>:
  *                                             and its slaves (through TRGO)
  *            @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	460b      	mov	r3, r1
 80031ae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	891b      	ldrh	r3, [r3, #8]
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	811a      	strh	r2, [r3, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	891b      	ldrh	r3, [r3, #8]
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	887b      	ldrh	r3, [r7, #2]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	811a      	strh	r2, [r3, #8]
}
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop

080031dc <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 80031dc:	b480      	push	{r7}
 80031de:	b087      	sub	sp, #28
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	8179      	strh	r1, [r7, #10]
 80031e6:	813a      	strh	r2, [r7, #8]
 80031e8:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 80031ea:	2300      	movs	r3, #0
 80031ec:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	891b      	ldrh	r3, [r3, #8]
 80031f2:	82fb      	strh	r3, [r7, #22]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 80031f4:	8afb      	ldrh	r3, [r7, #22]
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	82fb      	strh	r3, [r7, #22]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 80031fa:	88fb      	ldrh	r3, [r7, #6]
 80031fc:	021b      	lsls	r3, r3, #8
 80031fe:	b29a      	uxth	r2, r3
 8003200:	893b      	ldrh	r3, [r7, #8]
 8003202:	4313      	orrs	r3, r2
 8003204:	b29a      	uxth	r2, r3
 8003206:	897b      	ldrh	r3, [r7, #10]
 8003208:	4313      	orrs	r3, r2
 800320a:	b29a      	uxth	r2, r3
 800320c:	8afb      	ldrh	r3, [r7, #22]
 800320e:	4313      	orrs	r3, r2
 8003210:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8afa      	ldrh	r2, [r7, #22]
 8003216:	811a      	strh	r2, [r3, #8]
}
 8003218:	371c      	adds	r7, #28
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop

08003224 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 8003224:	b480      	push	{r7}
 8003226:	b087      	sub	sp, #28
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	8179      	strh	r1, [r7, #10]
 800322e:	813a      	strh	r2, [r7, #8]
 8003230:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 8003232:	2300      	movs	r3, #0
 8003234:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
 8003236:	2300      	movs	r3, #0
 8003238:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
 800323a:	2300      	movs	r3, #0
 800323c:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	891b      	ldrh	r3, [r3, #8]
 8003242:	82fb      	strh	r3, [r7, #22]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8b1b      	ldrh	r3, [r3, #24]
 8003248:	82bb      	strh	r3, [r7, #20]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	8c1b      	ldrh	r3, [r3, #32]
 800324e:	827b      	strh	r3, [r7, #18]

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8003250:	8afb      	ldrh	r3, [r7, #22]
 8003252:	f023 0307 	bic.w	r3, r3, #7
 8003256:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
 8003258:	8afa      	ldrh	r2, [r7, #22]
 800325a:	897b      	ldrh	r3, [r7, #10]
 800325c:	4313      	orrs	r3, r2
 800325e:	82fb      	strh	r3, [r7, #22]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8003260:	8abb      	ldrh	r3, [r7, #20]
 8003262:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003266:	f023 0303 	bic.w	r3, r3, #3
 800326a:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 800326c:	8abb      	ldrh	r3, [r7, #20]
 800326e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003272:	f043 0301 	orr.w	r3, r3, #1
 8003276:	82bb      	strh	r3, [r7, #20]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 8003278:	8a7b      	ldrh	r3, [r7, #18]
 800327a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800327e:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8003280:	88fb      	ldrh	r3, [r7, #6]
 8003282:	011b      	lsls	r3, r3, #4
 8003284:	b29a      	uxth	r2, r3
 8003286:	893b      	ldrh	r3, [r7, #8]
 8003288:	4313      	orrs	r3, r2
 800328a:	b29a      	uxth	r2, r3
 800328c:	8a7b      	ldrh	r3, [r7, #18]
 800328e:	4313      	orrs	r3, r2
 8003290:	827b      	strh	r3, [r7, #18]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8afa      	ldrh	r2, [r7, #22]
 8003296:	811a      	strh	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8aba      	ldrh	r2, [r7, #20]
 800329c:	831a      	strh	r2, [r3, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8a7a      	ldrh	r2, [r7, #18]
 80032a2:	841a      	strh	r2, [r3, #32]
}
 80032a4:	371c      	adds	r7, #28
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop

080032b0 <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	460b      	mov	r3, r1
 80032ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80032bc:	78fb      	ldrb	r3, [r7, #3]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d008      	beq.n	80032d4 <TIM_SelectHallSensor+0x24>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	889b      	ldrh	r3, [r3, #4]
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	809a      	strh	r2, [r3, #4]
 80032d2:	e007      	b.n	80032e4 <TIM_SelectHallSensor+0x34>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	889b      	ldrh	r3, [r3, #4]
 80032d8:	b29b      	uxth	r3, r3
 80032da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032de:	b29a      	uxth	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	809a      	strh	r2, [r3, #4]
  }
}
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop

080032f0 <TIM_RemapConfig>:
  *            @arg TIM11_HSE:      TIM11 CH4 input is connected to HSE_RTC clock
  *                                 (HSE divided by a programmable prescaler)  
  * @retval None
  */
void TIM_RemapConfig(TIM_TypeDef* TIMx, uint16_t TIM_Remap)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	460b      	mov	r3, r1
 80032fa:	807b      	strh	r3, [r7, #2]
 /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	887a      	ldrh	r2, [r7, #2]
 8003300:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop

08003310 <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8003310:	b480      	push	{r7}
 8003312:	b087      	sub	sp, #28
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	8179      	strh	r1, [r7, #10]
 800331a:	813a      	strh	r2, [r7, #8]
 800331c:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 800331e:	2300      	movs	r3, #0
 8003320:	82fb      	strh	r3, [r7, #22]
 8003322:	2300      	movs	r3, #0
 8003324:	82bb      	strh	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8c1b      	ldrh	r3, [r3, #32]
 800332a:	b29b      	uxth	r3, r3
 800332c:	f023 0301 	bic.w	r3, r3, #1
 8003330:	b29a      	uxth	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8b1b      	ldrh	r3, [r3, #24]
 800333a:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8c1b      	ldrh	r3, [r3, #32]
 8003340:	82bb      	strh	r3, [r7, #20]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8003342:	8afb      	ldrh	r3, [r7, #22]
 8003344:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8003348:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800334a:	88fb      	ldrh	r3, [r7, #6]
 800334c:	011b      	lsls	r3, r3, #4
 800334e:	b29a      	uxth	r2, r3
 8003350:	893b      	ldrh	r3, [r7, #8]
 8003352:	4313      	orrs	r3, r2
 8003354:	b29a      	uxth	r2, r3
 8003356:	8afb      	ldrh	r3, [r7, #22]
 8003358:	4313      	orrs	r3, r2
 800335a:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800335c:	8abb      	ldrh	r3, [r7, #20]
 800335e:	f023 030a 	bic.w	r3, r3, #10
 8003362:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8003364:	897a      	ldrh	r2, [r7, #10]
 8003366:	8abb      	ldrh	r3, [r7, #20]
 8003368:	4313      	orrs	r3, r2
 800336a:	b29b      	uxth	r3, r3
 800336c:	f043 0301 	orr.w	r3, r3, #1
 8003370:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8afa      	ldrh	r2, [r7, #22]
 8003376:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8aba      	ldrh	r2, [r7, #20]
 800337c:	841a      	strh	r2, [r3, #32]
}
 800337e:	371c      	adds	r7, #28
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8003388:	b480      	push	{r7}
 800338a:	b087      	sub	sp, #28
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	8179      	strh	r1, [r7, #10]
 8003392:	813a      	strh	r2, [r7, #8]
 8003394:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 8003396:	2300      	movs	r3, #0
 8003398:	82fb      	strh	r3, [r7, #22]
 800339a:	2300      	movs	r3, #0
 800339c:	82bb      	strh	r3, [r7, #20]
 800339e:	2300      	movs	r3, #0
 80033a0:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8c1b      	ldrh	r3, [r3, #32]
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	f023 0310 	bic.w	r3, r3, #16
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8b1b      	ldrh	r3, [r3, #24]
 80033b6:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8c1b      	ldrh	r3, [r3, #32]
 80033bc:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 80033be:	897b      	ldrh	r3, [r7, #10]
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 80033c4:	8afb      	ldrh	r3, [r7, #22]
 80033c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033ca:	051b      	lsls	r3, r3, #20
 80033cc:	0d1b      	lsrs	r3, r3, #20
 80033ce:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 80033d0:	88fb      	ldrh	r3, [r7, #6]
 80033d2:	031b      	lsls	r3, r3, #12
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	8afb      	ldrh	r3, [r7, #22]
 80033d8:	4313      	orrs	r3, r2
 80033da:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 80033dc:	893b      	ldrh	r3, [r7, #8]
 80033de:	021b      	lsls	r3, r3, #8
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	8afb      	ldrh	r3, [r7, #22]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033e8:	8abb      	ldrh	r3, [r7, #20]
 80033ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033ee:	82bb      	strh	r3, [r7, #20]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 80033f0:	8a7a      	ldrh	r2, [r7, #18]
 80033f2:	8abb      	ldrh	r3, [r7, #20]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	f043 0310 	orr.w	r3, r3, #16
 80033fc:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	8afa      	ldrh	r2, [r7, #22]
 8003402:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8aba      	ldrh	r2, [r7, #20]
 8003408:	841a      	strh	r2, [r3, #32]
}
 800340a:	371c      	adds	r7, #28
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <TI3_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8003414:	b480      	push	{r7}
 8003416:	b087      	sub	sp, #28
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	8179      	strh	r1, [r7, #10]
 800341e:	813a      	strh	r2, [r7, #8]
 8003420:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8003422:	2300      	movs	r3, #0
 8003424:	82fb      	strh	r3, [r7, #22]
 8003426:	2300      	movs	r3, #0
 8003428:	82bb      	strh	r3, [r7, #20]
 800342a:	2300      	movs	r3, #0
 800342c:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	8c1b      	ldrh	r3, [r3, #32]
 8003432:	b29b      	uxth	r3, r3
 8003434:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003438:	b29a      	uxth	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	8b9b      	ldrh	r3, [r3, #28]
 8003442:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8c1b      	ldrh	r3, [r3, #32]
 8003448:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 800344a:	897b      	ldrh	r3, [r7, #10]
 800344c:	021b      	lsls	r3, r3, #8
 800344e:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 8003450:	8afb      	ldrh	r3, [r7, #22]
 8003452:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8003456:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8003458:	88fb      	ldrh	r3, [r7, #6]
 800345a:	011b      	lsls	r3, r3, #4
 800345c:	b29a      	uxth	r2, r3
 800345e:	893b      	ldrh	r3, [r7, #8]
 8003460:	4313      	orrs	r3, r2
 8003462:	b29a      	uxth	r2, r3
 8003464:	8afb      	ldrh	r3, [r7, #22]
 8003466:	4313      	orrs	r3, r2
 8003468:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800346a:	8abb      	ldrh	r3, [r7, #20]
 800346c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003470:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8003472:	8a7a      	ldrh	r2, [r7, #18]
 8003474:	8abb      	ldrh	r3, [r7, #20]
 8003476:	4313      	orrs	r3, r2
 8003478:	b29b      	uxth	r3, r3
 800347a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800347e:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8afa      	ldrh	r2, [r7, #22]
 8003484:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8aba      	ldrh	r2, [r7, #20]
 800348a:	841a      	strh	r2, [r3, #32]
}
 800348c:	371c      	adds	r7, #28
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop

08003498 <TI4_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8003498:	b480      	push	{r7}
 800349a:	b087      	sub	sp, #28
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	8179      	strh	r1, [r7, #10]
 80034a2:	813a      	strh	r2, [r7, #8]
 80034a4:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 80034a6:	2300      	movs	r3, #0
 80034a8:	82fb      	strh	r3, [r7, #22]
 80034aa:	2300      	movs	r3, #0
 80034ac:	82bb      	strh	r3, [r7, #20]
 80034ae:	2300      	movs	r3, #0
 80034b0:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	8c1b      	ldrh	r3, [r3, #32]
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034bc:	b29a      	uxth	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8b9b      	ldrh	r3, [r3, #28]
 80034c6:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8c1b      	ldrh	r3, [r3, #32]
 80034cc:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 80034ce:	897b      	ldrh	r3, [r7, #10]
 80034d0:	031b      	lsls	r3, r3, #12
 80034d2:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 80034d4:	8afb      	ldrh	r3, [r7, #22]
 80034d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034da:	051b      	lsls	r3, r3, #20
 80034dc:	0d1b      	lsrs	r3, r3, #20
 80034de:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 80034e0:	893b      	ldrh	r3, [r7, #8]
 80034e2:	021b      	lsls	r3, r3, #8
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	8afb      	ldrh	r3, [r7, #22]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 80034ec:	88fb      	ldrh	r3, [r7, #6]
 80034ee:	031b      	lsls	r3, r3, #12
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	8afb      	ldrh	r3, [r7, #22]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80034f8:	8abb      	ldrh	r3, [r7, #20]
 80034fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034fe:	045b      	lsls	r3, r3, #17
 8003500:	0c5b      	lsrs	r3, r3, #17
 8003502:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8003504:	8a7a      	ldrh	r2, [r7, #18]
 8003506:	8abb      	ldrh	r3, [r7, #20]
 8003508:	4313      	orrs	r3, r2
 800350a:	b29b      	uxth	r3, r3
 800350c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003510:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	8afa      	ldrh	r2, [r7, #22]
 8003516:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	8aba      	ldrh	r2, [r7, #20]
 800351c:	841a      	strh	r2, [r3, #32]
}
 800351e:	371c      	adds	r7, #28
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <SYSCFG_DeInit>:
  *   registers to their default reset values.
  * @param  None
  * @retval None
  */
void SYSCFG_DeInit(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 800352c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003530:	2101      	movs	r1, #1
 8003532:	f000 fc93 	bl	8003e5c <RCC_APB2PeriphResetCmd>
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 8003536:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800353a:	2100      	movs	r1, #0
 800353c:	f000 fc8e 	bl	8003e5c <RCC_APB2PeriphResetCmd>
}
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop

08003544 <SYSCFG_MemoryRemapConfig>:
  *            @arg SYSCFG_MemoryRemap_FSMC:        FSMC (Bank1 (NOR/PSRAM 1 and 2) mapped at 0x00000000   
  *            @arg SYSCFG_MemoryRemap_SRAM:        Embedded SRAM (112kB) mapped at 0x00000000          
  * @retval None
  */
void SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	4603      	mov	r3, r0
 800354c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap));

  SYSCFG->MEMRMP = SYSCFG_MemoryRemap;
 800354e:	4b04      	ldr	r3, [pc, #16]	; (8003560 <SYSCFG_MemoryRemapConfig+0x1c>)
 8003550:	79fa      	ldrb	r2, [r7, #7]
 8003552:	601a      	str	r2, [r3, #0]
}
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	40013800 	.word	0x40013800

08003564 <SYSCFG_EXTILineConfig>:
  *           and STM32F427x/STM32F437x devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8003564:	b490      	push	{r4, r7}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	4602      	mov	r2, r0
 800356c:	460b      	mov	r3, r1
 800356e:	71fa      	strb	r2, [r7, #7]
 8003570:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8003572:	2300      	movs	r3, #0
 8003574:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8003576:	79bb      	ldrb	r3, [r7, #6]
 8003578:	f003 0303 	and.w	r3, r3, #3
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	220f      	movs	r2, #15
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8003586:	4b15      	ldr	r3, [pc, #84]	; (80035dc <SYSCFG_EXTILineConfig+0x78>)
 8003588:	79ba      	ldrb	r2, [r7, #6]
 800358a:	0892      	lsrs	r2, r2, #2
 800358c:	b2d2      	uxtb	r2, r2
 800358e:	4913      	ldr	r1, [pc, #76]	; (80035dc <SYSCFG_EXTILineConfig+0x78>)
 8003590:	79b8      	ldrb	r0, [r7, #6]
 8003592:	0880      	lsrs	r0, r0, #2
 8003594:	b2c0      	uxtb	r0, r0
 8003596:	3002      	adds	r0, #2
 8003598:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800359c:	68f9      	ldr	r1, [r7, #12]
 800359e:	43c9      	mvns	r1, r1
 80035a0:	4001      	ands	r1, r0
 80035a2:	3202      	adds	r2, #2
 80035a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 80035a8:	4b0c      	ldr	r3, [pc, #48]	; (80035dc <SYSCFG_EXTILineConfig+0x78>)
 80035aa:	79ba      	ldrb	r2, [r7, #6]
 80035ac:	0892      	lsrs	r2, r2, #2
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	490a      	ldr	r1, [pc, #40]	; (80035dc <SYSCFG_EXTILineConfig+0x78>)
 80035b2:	79b8      	ldrb	r0, [r7, #6]
 80035b4:	0880      	lsrs	r0, r0, #2
 80035b6:	b2c0      	uxtb	r0, r0
 80035b8:	3002      	adds	r0, #2
 80035ba:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 80035be:	79fc      	ldrb	r4, [r7, #7]
 80035c0:	79b9      	ldrb	r1, [r7, #6]
 80035c2:	f001 0103 	and.w	r1, r1, #3
 80035c6:	0089      	lsls	r1, r1, #2
 80035c8:	fa04 f101 	lsl.w	r1, r4, r1
 80035cc:	4301      	orrs	r1, r0
 80035ce:	3202      	adds	r2, #2
 80035d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bc90      	pop	{r4, r7}
 80035da:	4770      	bx	lr
 80035dc:	40013800 	.word	0x40013800

080035e0 <SYSCFG_ETH_MediaInterfaceConfig>:
  *            @arg SYSCFG_ETH_MediaInterface_MII: MII mode selected
  *            @arg SYSCFG_ETH_MediaInterface_RMII: RMII mode selected 
  * @retval None 
  */
void SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface) 
{ 
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_ETH_MEDIA_INTERFACE(SYSCFG_ETH_MediaInterface)); 
  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) PMC_MII_RMII_SEL_BB = SYSCFG_ETH_MediaInterface; 
 80035e8:	4b03      	ldr	r3, [pc, #12]	; (80035f8 <SYSCFG_ETH_MediaInterfaceConfig+0x18>)
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	601a      	str	r2, [r3, #0]
}
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr
 80035f8:	422700dc 	.word	0x422700dc

080035fc <SYSCFG_CompensationCellCmd>:
  *            @arg ENABLE: I/O compensation cell enabled  
  *            @arg DISABLE: I/O compensation cell power-down mode  
  * @retval None
  */
void SYSCFG_CompensationCellCmd(FunctionalState NewState)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	4603      	mov	r3, r0
 8003604:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CMPCR_CMP_PD_BB = (uint32_t)NewState;
 8003606:	4b04      	ldr	r3, [pc, #16]	; (8003618 <SYSCFG_CompensationCellCmd+0x1c>)
 8003608:	79fa      	ldrb	r2, [r7, #7]
 800360a:	601a      	str	r2, [r3, #0]
}
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	42270400 	.word	0x42270400

0800361c <SYSCFG_GetCompensationCellStatus>:
  * @brief  Checks whether the I/O Compensation Cell ready flag is set or not.
  * @param  None
  * @retval The new state of the I/O Compensation Cell ready flag (SET or RESET)
  */
FlagStatus SYSCFG_GetCompensationCellStatus(void)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
  FlagStatus bitstatus = RESET;
 8003622:	2300      	movs	r3, #0
 8003624:	71fb      	strb	r3, [r7, #7]
    
  if ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY ) != (uint32_t)RESET)
 8003626:	4b09      	ldr	r3, [pc, #36]	; (800364c <SYSCFG_GetCompensationCellStatus+0x30>)
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362e:	2b00      	cmp	r3, #0
 8003630:	d002      	beq.n	8003638 <SYSCFG_GetCompensationCellStatus+0x1c>
  {
    bitstatus = SET;
 8003632:	2301      	movs	r3, #1
 8003634:	71fb      	strb	r3, [r7, #7]
 8003636:	e001      	b.n	800363c <SYSCFG_GetCompensationCellStatus+0x20>
  }
  else
  {
    bitstatus = RESET;
 8003638:	2300      	movs	r3, #0
 800363a:	71fb      	strb	r3, [r7, #7]
  }
  return bitstatus;
 800363c:	79fb      	ldrb	r3, [r7, #7]
}
 800363e:	4618      	mov	r0, r3
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	40013800 	.word	0x40013800

08003650 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003654:	4b12      	ldr	r3, [pc, #72]	; (80036a0 <RCC_DeInit+0x50>)
 8003656:	4a12      	ldr	r2, [pc, #72]	; (80036a0 <RCC_DeInit+0x50>)
 8003658:	6812      	ldr	r2, [r2, #0]
 800365a:	f042 0201 	orr.w	r2, r2, #1
 800365e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003660:	4b0f      	ldr	r3, [pc, #60]	; (80036a0 <RCC_DeInit+0x50>)
 8003662:	2200      	movs	r2, #0
 8003664:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON and PLLI2S bits */
  RCC->CR &= (uint32_t)0xFAF6FFFF;
 8003666:	4a0e      	ldr	r2, [pc, #56]	; (80036a0 <RCC_DeInit+0x50>)
 8003668:	4b0d      	ldr	r3, [pc, #52]	; (80036a0 <RCC_DeInit+0x50>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f023 63a1 	bic.w	r3, r3, #84410368	; 0x5080000
 8003670:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003674:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003676:	4b0a      	ldr	r3, [pc, #40]	; (80036a0 <RCC_DeInit+0x50>)
 8003678:	4a0a      	ldr	r2, [pc, #40]	; (80036a4 <RCC_DeInit+0x54>)
 800367a:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 800367c:	4b08      	ldr	r3, [pc, #32]	; (80036a0 <RCC_DeInit+0x50>)
 800367e:	4a0a      	ldr	r2, [pc, #40]	; (80036a8 <RCC_DeInit+0x58>)
 8003680:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003684:	4b06      	ldr	r3, [pc, #24]	; (80036a0 <RCC_DeInit+0x50>)
 8003686:	4a06      	ldr	r2, [pc, #24]	; (80036a0 <RCC_DeInit+0x50>)
 8003688:	6812      	ldr	r2, [r2, #0]
 800368a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800368e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003690:	4b03      	ldr	r3, [pc, #12]	; (80036a0 <RCC_DeInit+0x50>)
 8003692:	2200      	movs	r2, #0
 8003694:	60da      	str	r2, [r3, #12]
#ifdef STM32F427X 
  /* Disable Timers clock prescalers selection */
  RCC->DCKCFGR = 0x00000000;
#endif /* STM32F427X */ 

}
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	40023800 	.word	0x40023800
 80036a4:	24003010 	.word	0x24003010
 80036a8:	20003000 	.word	0x20003000

080036ac <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	4603      	mov	r3, r0
 80036b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 80036b6:	4b05      	ldr	r3, [pc, #20]	; (80036cc <RCC_HSEConfig+0x20>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 80036bc:	4b03      	ldr	r3, [pc, #12]	; (80036cc <RCC_HSEConfig+0x20>)
 80036be:	79fa      	ldrb	r2, [r7, #7]
 80036c0:	701a      	strb	r2, [r3, #0]
}
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr
 80036cc:	40023802 	.word	0x40023802

080036d0 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
 80036d6:	2300      	movs	r3, #0
 80036d8:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 80036da:	2300      	movs	r3, #0
 80036dc:	71fb      	strb	r3, [r7, #7]
  FlagStatus hsestatus = RESET;
 80036de:	2300      	movs	r3, #0
 80036e0:	71bb      	strb	r3, [r7, #6]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 80036e2:	2031      	movs	r0, #49	; 0x31
 80036e4:	f000 fc92 	bl	800400c <RCC_GetFlagStatus>
 80036e8:	4603      	mov	r3, r0
 80036ea:	71bb      	strb	r3, [r7, #6]
    startupcounter++;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	3301      	adds	r3, #1
 80036f0:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80036f8:	d002      	beq.n	8003700 <RCC_WaitForHSEStartUp+0x30>
 80036fa:	79bb      	ldrb	r3, [r7, #6]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d0f0      	beq.n	80036e2 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8003700:	2031      	movs	r0, #49	; 0x31
 8003702:	f000 fc83 	bl	800400c <RCC_GetFlagStatus>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d002      	beq.n	8003712 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 800370c:	2301      	movs	r3, #1
 800370e:	71fb      	strb	r3, [r7, #7]
 8003710:	e001      	b.n	8003716 <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 8003712:	2300      	movs	r3, #0
 8003714:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 8003716:	79fb      	ldrb	r3, [r7, #7]
}
 8003718:	4618      	mov	r0, r3
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	4603      	mov	r3, r0
 8003728:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
 800372a:	2300      	movs	r3, #0
 800372c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 800372e:	4b0a      	ldr	r3, [pc, #40]	; (8003758 <RCC_AdjustHSICalibrationValue+0x38>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800373a:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 800373c:	79fb      	ldrb	r3, [r7, #7]
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	4313      	orrs	r3, r2
 8003744:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
 8003746:	4b04      	ldr	r3, [pc, #16]	; (8003758 <RCC_AdjustHSICalibrationValue+0x38>)
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	601a      	str	r2, [r3, #0]
}
 800374c:	3714      	adds	r7, #20
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	40023800 	.word	0x40023800

0800375c <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	4603      	mov	r3, r0
 8003764:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8003766:	4b04      	ldr	r3, [pc, #16]	; (8003778 <RCC_HSICmd+0x1c>)
 8003768:	79fa      	ldrb	r2, [r7, #7]
 800376a:	601a      	str	r2, [r3, #0]
}
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	42470000 	.word	0x42470000

0800377c <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	4603      	mov	r3, r0
 8003784:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8003786:	4b0c      	ldr	r3, [pc, #48]	; (80037b8 <RCC_LSEConfig+0x3c>)
 8003788:	2200      	movs	r2, #0
 800378a:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800378c:	4b0a      	ldr	r3, [pc, #40]	; (80037b8 <RCC_LSEConfig+0x3c>)
 800378e:	2200      	movs	r2, #0
 8003790:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8003792:	79fb      	ldrb	r3, [r7, #7]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d002      	beq.n	800379e <RCC_LSEConfig+0x22>
 8003798:	2b04      	cmp	r3, #4
 800379a:	d004      	beq.n	80037a6 <RCC_LSEConfig+0x2a>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;
    default:
      break;
 800379c:	e007      	b.n	80037ae <RCC_LSEConfig+0x32>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 800379e:	4b06      	ldr	r3, [pc, #24]	; (80037b8 <RCC_LSEConfig+0x3c>)
 80037a0:	2201      	movs	r2, #1
 80037a2:	701a      	strb	r2, [r3, #0]
      break;
 80037a4:	e003      	b.n	80037ae <RCC_LSEConfig+0x32>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 80037a6:	4b04      	ldr	r3, [pc, #16]	; (80037b8 <RCC_LSEConfig+0x3c>)
 80037a8:	2205      	movs	r2, #5
 80037aa:	701a      	strb	r2, [r3, #0]
      break;
 80037ac:	bf00      	nop
    default:
      break;
  }
}
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	40023870 	.word	0x40023870

080037bc <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	4603      	mov	r3, r0
 80037c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 80037c6:	4b04      	ldr	r3, [pc, #16]	; (80037d8 <RCC_LSICmd+0x1c>)
 80037c8:	79fa      	ldrb	r2, [r7, #7]
 80037ca:	601a      	str	r2, [r3, #0]
}
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	42470e80 	.word	0x42470e80

080037dc <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
 80037e8:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 80037ea:	4b0a      	ldr	r3, [pc, #40]	; (8003814 <RCC_PLLConfig+0x38>)
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	0191      	lsls	r1, r2, #6
 80037f0:	68ba      	ldr	r2, [r7, #8]
 80037f2:	4311      	orrs	r1, r2
 80037f4:	683a      	ldr	r2, [r7, #0]
 80037f6:	0852      	lsrs	r2, r2, #1
 80037f8:	3a01      	subs	r2, #1
 80037fa:	0412      	lsls	r2, r2, #16
 80037fc:	4311      	orrs	r1, r2
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	4311      	orrs	r1, r2
                 (PLLQ << 24);
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	0612      	lsls	r2, r2, #24
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8003806:	430a      	orrs	r2, r1
 8003808:	605a      	str	r2, [r3, #4]
                 (PLLQ << 24);
}
 800380a:	3714      	adds	r7, #20
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr
 8003814:	40023800 	.word	0x40023800

08003818 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	4603      	mov	r3, r0
 8003820:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8003822:	4b04      	ldr	r3, [pc, #16]	; (8003834 <RCC_PLLCmd+0x1c>)
 8003824:	79fa      	ldrb	r2, [r7, #7]
 8003826:	601a      	str	r2, [r3, #0]
}
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	42470060 	.word	0x42470060

08003838 <RCC_PLLI2SConfig>:
  *         on the I2S clock frequency.
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 8003842:	4b06      	ldr	r3, [pc, #24]	; (800385c <RCC_PLLI2SConfig+0x24>)
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	0191      	lsls	r1, r2, #6
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	0712      	lsls	r2, r2, #28
 800384c:	430a      	orrs	r2, r1
 800384e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	40023800 	.word	0x40023800

08003860 <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	4603      	mov	r3, r0
 8003868:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 800386a:	4b04      	ldr	r3, [pc, #16]	; (800387c <RCC_PLLI2SCmd+0x1c>)
 800386c:	79fa      	ldrb	r2, [r7, #7]
 800386e:	601a      	str	r2, [r3, #0]
}
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	42470068 	.word	0x42470068

08003880 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	4603      	mov	r3, r0
 8003888:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 800388a:	4b04      	ldr	r3, [pc, #16]	; (800389c <RCC_ClockSecuritySystemCmd+0x1c>)
 800388c:	79fa      	ldrb	r2, [r7, #7]
 800388e:	601a      	str	r2, [r3, #0]
}
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	4247004c 	.word	0x4247004c

080038a0 <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80038aa:	2300      	movs	r3, #0
 80038ac:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 80038ae:	4b0a      	ldr	r3, [pc, #40]	; (80038d8 <RCC_MCO1Config+0x38>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 80038ba:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 80038c8:	4b03      	ldr	r3, [pc, #12]	; (80038d8 <RCC_MCO1Config+0x38>)
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	609a      	str	r2, [r3, #8]
}
 80038ce:	3714      	adds	r7, #20
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr
 80038d8:	40023800 	.word	0x40023800

080038dc <RCC_MCO2Config>:
  *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
  *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80038e6:	2300      	movs	r3, #0
 80038e8:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 80038ea:	4b0a      	ldr	r3, [pc, #40]	; (8003914 <RCC_MCO2Config+0x38>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	4313      	orrs	r3, r2
 8003902:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8003904:	4b03      	ldr	r3, [pc, #12]	; (8003914 <RCC_MCO2Config+0x38>)
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	609a      	str	r2, [r3, #8]
}
 800390a:	3714      	adds	r7, #20
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr
 8003914:	40023800 	.word	0x40023800

08003918 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8003920:	2300      	movs	r3, #0
 8003922:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8003924:	4b09      	ldr	r3, [pc, #36]	; (800394c <RCC_SYSCLKConfig+0x34>)
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f023 0303 	bic.w	r3, r3, #3
 8003930:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4313      	orrs	r3, r2
 8003938:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800393a:	4b04      	ldr	r3, [pc, #16]	; (800394c <RCC_SYSCLKConfig+0x34>)
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	609a      	str	r2, [r3, #8]
}
 8003940:	3714      	adds	r7, #20
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	40023800 	.word	0x40023800

08003950 <RCC_GetSYSCLKSource>:
  *              - 0x00: HSI used as system clock
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8003954:	4b05      	ldr	r3, [pc, #20]	; (800396c <RCC_GetSYSCLKSource+0x1c>)
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	b2db      	uxtb	r3, r3
 800395a:	f003 030c 	and.w	r3, r3, #12
 800395e:	b2db      	uxtb	r3, r3
}
 8003960:	4618      	mov	r0, r3
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	40023800 	.word	0x40023800

08003970 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8003978:	2300      	movs	r3, #0
 800397a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 800397c:	4b09      	ldr	r3, [pc, #36]	; (80039a4 <RCC_HCLKConfig+0x34>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003988:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4313      	orrs	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8003992:	4b04      	ldr	r3, [pc, #16]	; (80039a4 <RCC_HCLKConfig+0x34>)
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	609a      	str	r2, [r3, #8]
}
 8003998:	3714      	adds	r7, #20
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	40023800 	.word	0x40023800

080039a8 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80039b0:	2300      	movs	r3, #0
 80039b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 80039b4:	4b09      	ldr	r3, [pc, #36]	; (80039dc <RCC_PCLK1Config+0x34>)
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80039c0:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80039ca:	4b04      	ldr	r3, [pc, #16]	; (80039dc <RCC_PCLK1Config+0x34>)
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	609a      	str	r2, [r3, #8]
}
 80039d0:	3714      	adds	r7, #20
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	40023800 	.word	0x40023800

080039e0 <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80039e8:	2300      	movs	r3, #0
 80039ea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 80039ec:	4b09      	ldr	r3, [pc, #36]	; (8003a14 <RCC_PCLK2Config+0x34>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80039f8:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	00db      	lsls	r3, r3, #3
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8003a04:	4b03      	ldr	r3, [pc, #12]	; (8003a14 <RCC_PCLK2Config+0x34>)
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	609a      	str	r2, [r3, #8]
}
 8003a0a:	3714      	adds	r7, #20
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr
 8003a14:	40023800 	.word	0x40023800

08003a18 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b089      	sub	sp, #36	; 0x24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8003a20:	2300      	movs	r3, #0
 8003a22:	61bb      	str	r3, [r7, #24]
 8003a24:	2300      	movs	r3, #0
 8003a26:	617b      	str	r3, [r7, #20]
 8003a28:	2300      	movs	r3, #0
 8003a2a:	61fb      	str	r3, [r7, #28]
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	613b      	str	r3, [r7, #16]
 8003a30:	2300      	movs	r3, #0
 8003a32:	60fb      	str	r3, [r7, #12]
 8003a34:	2302      	movs	r3, #2
 8003a36:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8003a38:	4b48      	ldr	r3, [pc, #288]	; (8003b5c <RCC_GetClocksFreq+0x144>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f003 030c 	and.w	r3, r3, #12
 8003a40:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	2b04      	cmp	r3, #4
 8003a46:	d007      	beq.n	8003a58 <RCC_GetClocksFreq+0x40>
 8003a48:	2b08      	cmp	r3, #8
 8003a4a:	d009      	beq.n	8003a60 <RCC_GetClocksFreq+0x48>
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d13f      	bne.n	8003ad0 <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a43      	ldr	r2, [pc, #268]	; (8003b60 <RCC_GetClocksFreq+0x148>)
 8003a54:	601a      	str	r2, [r3, #0]
      break;
 8003a56:	e03f      	b.n	8003ad8 <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a42      	ldr	r2, [pc, #264]	; (8003b64 <RCC_GetClocksFreq+0x14c>)
 8003a5c:	601a      	str	r2, [r3, #0]
      break;
 8003a5e:	e03b      	b.n	8003ad8 <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8003a60:	4b3e      	ldr	r3, [pc, #248]	; (8003b5c <RCC_GetClocksFreq+0x144>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a68:	0d9b      	lsrs	r3, r3, #22
 8003a6a:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a6c:	4b3b      	ldr	r3, [pc, #236]	; (8003b5c <RCC_GetClocksFreq+0x144>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a74:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00d      	beq.n	8003a98 <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003a7c:	4a39      	ldr	r2, [pc, #228]	; (8003b64 <RCC_GetClocksFreq+0x14c>)
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a84:	4b35      	ldr	r3, [pc, #212]	; (8003b5c <RCC_GetClocksFreq+0x144>)
 8003a86:	6859      	ldr	r1, [r3, #4]
 8003a88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a8c:	400b      	ands	r3, r1
 8003a8e:	099b      	lsrs	r3, r3, #6
 8003a90:	fb03 f302 	mul.w	r3, r3, r2
 8003a94:	61fb      	str	r3, [r7, #28]
 8003a96:	e00c      	b.n	8003ab2 <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8003a98:	4a31      	ldr	r2, [pc, #196]	; (8003b60 <RCC_GetClocksFreq+0x148>)
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003aa0:	4b2e      	ldr	r3, [pc, #184]	; (8003b5c <RCC_GetClocksFreq+0x144>)
 8003aa2:	6859      	ldr	r1, [r3, #4]
 8003aa4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003aa8:	400b      	ands	r3, r1
 8003aaa:	099b      	lsrs	r3, r3, #6
 8003aac:	fb03 f302 	mul.w	r3, r3, r2
 8003ab0:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8003ab2:	4b2a      	ldr	r3, [pc, #168]	; (8003b5c <RCC_GetClocksFreq+0x144>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003aba:	0c1b      	lsrs	r3, r3, #16
 8003abc:	3301      	adds	r3, #1
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8003ac2:	69fa      	ldr	r2, [r7, #28]
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	601a      	str	r2, [r3, #0]
      break;
 8003ace:	e003      	b.n	8003ad8 <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a23      	ldr	r2, [pc, #140]	; (8003b60 <RCC_GetClocksFreq+0x148>)
 8003ad4:	601a      	str	r2, [r3, #0]
      break;
 8003ad6:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8003ad8:	4b20      	ldr	r3, [pc, #128]	; (8003b5c <RCC_GetClocksFreq+0x144>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ae0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	091b      	lsrs	r3, r3, #4
 8003ae6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8003ae8:	4a1f      	ldr	r2, [pc, #124]	; (8003b68 <RCC_GetClocksFreq+0x150>)
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	4413      	add	r3, r2
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	40da      	lsrs	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8003b00:	4b16      	ldr	r3, [pc, #88]	; (8003b5c <RCC_GetClocksFreq+0x144>)
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003b08:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	0a9b      	lsrs	r3, r3, #10
 8003b0e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8003b10:	4a15      	ldr	r2, [pc, #84]	; (8003b68 <RCC_GetClocksFreq+0x150>)
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	4413      	add	r3, r2
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	40da      	lsrs	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8003b28:	4b0c      	ldr	r3, [pc, #48]	; (8003b5c <RCC_GetClocksFreq+0x144>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003b30:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	0b5b      	lsrs	r3, r3, #13
 8003b36:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8003b38:	4a0b      	ldr	r2, [pc, #44]	; (8003b68 <RCC_GetClocksFreq+0x150>)
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685a      	ldr	r2, [r3, #4]
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	40da      	lsrs	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	60da      	str	r2, [r3, #12]
}
 8003b50:	3724      	adds	r7, #36	; 0x24
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	40023800 	.word	0x40023800
 8003b60:	00f42400 	.word	0x00f42400
 8003b64:	007a1200 	.word	0x007a1200
 8003b68:	20000024 	.word	0x20000024

08003b6c <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8003b74:	2300      	movs	r3, #0
 8003b76:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b82:	d111      	bne.n	8003ba8 <RCC_RTCCLKConfig+0x3c>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8003b84:	4b0f      	ldr	r3, [pc, #60]	; (8003bc4 <RCC_RTCCLKConfig+0x58>)
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003b90:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003b98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8003ba2:	4b08      	ldr	r3, [pc, #32]	; (8003bc4 <RCC_RTCCLKConfig+0x58>)
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8003ba8:	4b06      	ldr	r3, [pc, #24]	; (8003bc4 <RCC_RTCCLKConfig+0x58>)
 8003baa:	4a06      	ldr	r2, [pc, #24]	; (8003bc4 <RCC_RTCCLKConfig+0x58>)
 8003bac:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	671a      	str	r2, [r3, #112]	; 0x70
}
 8003bb8:	3714      	adds	r7, #20
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	40023800 	.word	0x40023800

08003bc8 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	4603      	mov	r3, r0
 8003bd0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8003bd2:	4b04      	ldr	r3, [pc, #16]	; (8003be4 <RCC_RTCCLKCmd+0x1c>)
 8003bd4:	79fa      	ldrb	r2, [r7, #7]
 8003bd6:	601a      	str	r2, [r3, #0]
}
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	42470e3c 	.word	0x42470e3c

08003be8 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	4603      	mov	r3, r0
 8003bf0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8003bf2:	4b04      	ldr	r3, [pc, #16]	; (8003c04 <RCC_BackupResetCmd+0x1c>)
 8003bf4:	79fa      	ldrb	r2, [r7, #7]
 8003bf6:	601a      	str	r2, [r3, #0]
}
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	42470e40 	.word	0x42470e40

08003c08 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 8003c10:	4b03      	ldr	r3, [pc, #12]	; (8003c20 <RCC_I2SCLKConfig+0x18>)
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	601a      	str	r2, [r3, #0]
}
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	4247015c 	.word	0x4247015c

08003c24 <RCC_TIMCLKPresConfig>:
  *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
  *                 to division by 8 or more.
  * @retval None
  */
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
 8003c2c:	4b03      	ldr	r3, [pc, #12]	; (8003c3c <RCC_TIMCLKPresConfig+0x18>)
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	601a      	str	r2, [r3, #0]
  
}
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	424711e0 	.word	0x424711e0

08003c40 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	460b      	mov	r3, r1
 8003c4a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003c4c:	78fb      	ldrb	r3, [r7, #3]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d006      	beq.n	8003c60 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8003c52:	4b09      	ldr	r3, [pc, #36]	; (8003c78 <RCC_AHB1PeriphClockCmd+0x38>)
 8003c54:	4a08      	ldr	r2, [pc, #32]	; (8003c78 <RCC_AHB1PeriphClockCmd+0x38>)
 8003c56:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	631a      	str	r2, [r3, #48]	; 0x30
 8003c5e:	e006      	b.n	8003c6e <RCC_AHB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8003c60:	4b05      	ldr	r3, [pc, #20]	; (8003c78 <RCC_AHB1PeriphClockCmd+0x38>)
 8003c62:	4a05      	ldr	r2, [pc, #20]	; (8003c78 <RCC_AHB1PeriphClockCmd+0x38>)
 8003c64:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	43d2      	mvns	r2, r2
 8003c6a:	400a      	ands	r2, r1
 8003c6c:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	40023800 	.word	0x40023800

08003c7c <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	460b      	mov	r3, r1
 8003c86:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003c88:	78fb      	ldrb	r3, [r7, #3]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d006      	beq.n	8003c9c <RCC_AHB2PeriphClockCmd+0x20>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8003c8e:	4b09      	ldr	r3, [pc, #36]	; (8003cb4 <RCC_AHB2PeriphClockCmd+0x38>)
 8003c90:	4a08      	ldr	r2, [pc, #32]	; (8003cb4 <RCC_AHB2PeriphClockCmd+0x38>)
 8003c92:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	635a      	str	r2, [r3, #52]	; 0x34
 8003c9a:	e006      	b.n	8003caa <RCC_AHB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8003c9c:	4b05      	ldr	r3, [pc, #20]	; (8003cb4 <RCC_AHB2PeriphClockCmd+0x38>)
 8003c9e:	4a05      	ldr	r2, [pc, #20]	; (8003cb4 <RCC_AHB2PeriphClockCmd+0x38>)
 8003ca0:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	43d2      	mvns	r2, r2
 8003ca6:	400a      	ands	r2, r1
 8003ca8:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr
 8003cb4:	40023800 	.word	0x40023800

08003cb8 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003cc4:	78fb      	ldrb	r3, [r7, #3]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d006      	beq.n	8003cd8 <RCC_AHB3PeriphClockCmd+0x20>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8003cca:	4b09      	ldr	r3, [pc, #36]	; (8003cf0 <RCC_AHB3PeriphClockCmd+0x38>)
 8003ccc:	4a08      	ldr	r2, [pc, #32]	; (8003cf0 <RCC_AHB3PeriphClockCmd+0x38>)
 8003cce:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	639a      	str	r2, [r3, #56]	; 0x38
 8003cd6:	e006      	b.n	8003ce6 <RCC_AHB3PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 8003cd8:	4b05      	ldr	r3, [pc, #20]	; (8003cf0 <RCC_AHB3PeriphClockCmd+0x38>)
 8003cda:	4a05      	ldr	r2, [pc, #20]	; (8003cf0 <RCC_AHB3PeriphClockCmd+0x38>)
 8003cdc:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	43d2      	mvns	r2, r2
 8003ce2:	400a      	ands	r2, r1
 8003ce4:	639a      	str	r2, [r3, #56]	; 0x38
  }
}
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr
 8003cf0:	40023800 	.word	0x40023800

08003cf4 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003d00:	78fb      	ldrb	r3, [r7, #3]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d006      	beq.n	8003d14 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8003d06:	4b09      	ldr	r3, [pc, #36]	; (8003d2c <RCC_APB1PeriphClockCmd+0x38>)
 8003d08:	4a08      	ldr	r2, [pc, #32]	; (8003d2c <RCC_APB1PeriphClockCmd+0x38>)
 8003d0a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	641a      	str	r2, [r3, #64]	; 0x40
 8003d12:	e006      	b.n	8003d22 <RCC_APB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8003d14:	4b05      	ldr	r3, [pc, #20]	; (8003d2c <RCC_APB1PeriphClockCmd+0x38>)
 8003d16:	4a05      	ldr	r2, [pc, #20]	; (8003d2c <RCC_APB1PeriphClockCmd+0x38>)
 8003d18:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	43d2      	mvns	r2, r2
 8003d1e:	400a      	ands	r2, r1
 8003d20:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	40023800 	.word	0x40023800

08003d30 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	460b      	mov	r3, r1
 8003d3a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003d3c:	78fb      	ldrb	r3, [r7, #3]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d006      	beq.n	8003d50 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8003d42:	4b09      	ldr	r3, [pc, #36]	; (8003d68 <RCC_APB2PeriphClockCmd+0x38>)
 8003d44:	4a08      	ldr	r2, [pc, #32]	; (8003d68 <RCC_APB2PeriphClockCmd+0x38>)
 8003d46:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	645a      	str	r2, [r3, #68]	; 0x44
 8003d4e:	e006      	b.n	8003d5e <RCC_APB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8003d50:	4b05      	ldr	r3, [pc, #20]	; (8003d68 <RCC_APB2PeriphClockCmd+0x38>)
 8003d52:	4a05      	ldr	r2, [pc, #20]	; (8003d68 <RCC_APB2PeriphClockCmd+0x38>)
 8003d54:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	43d2      	mvns	r2, r2
 8003d5a:	400a      	ands	r2, r1
 8003d5c:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr
 8003d68:	40023800 	.word	0x40023800

08003d6c <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	460b      	mov	r3, r1
 8003d76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003d78:	78fb      	ldrb	r3, [r7, #3]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d006      	beq.n	8003d8c <RCC_AHB1PeriphResetCmd+0x20>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8003d7e:	4b09      	ldr	r3, [pc, #36]	; (8003da4 <RCC_AHB1PeriphResetCmd+0x38>)
 8003d80:	4a08      	ldr	r2, [pc, #32]	; (8003da4 <RCC_AHB1PeriphResetCmd+0x38>)
 8003d82:	6911      	ldr	r1, [r2, #16]
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	611a      	str	r2, [r3, #16]
 8003d8a:	e006      	b.n	8003d9a <RCC_AHB1PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8003d8c:	4b05      	ldr	r3, [pc, #20]	; (8003da4 <RCC_AHB1PeriphResetCmd+0x38>)
 8003d8e:	4a05      	ldr	r2, [pc, #20]	; (8003da4 <RCC_AHB1PeriphResetCmd+0x38>)
 8003d90:	6911      	ldr	r1, [r2, #16]
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	43d2      	mvns	r2, r2
 8003d96:	400a      	ands	r2, r1
 8003d98:	611a      	str	r2, [r3, #16]
  }
}
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr
 8003da4:	40023800 	.word	0x40023800

08003da8 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	460b      	mov	r3, r1
 8003db2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003db4:	78fb      	ldrb	r3, [r7, #3]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d006      	beq.n	8003dc8 <RCC_AHB2PeriphResetCmd+0x20>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8003dba:	4b09      	ldr	r3, [pc, #36]	; (8003de0 <RCC_AHB2PeriphResetCmd+0x38>)
 8003dbc:	4a08      	ldr	r2, [pc, #32]	; (8003de0 <RCC_AHB2PeriphResetCmd+0x38>)
 8003dbe:	6951      	ldr	r1, [r2, #20]
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	615a      	str	r2, [r3, #20]
 8003dc6:	e006      	b.n	8003dd6 <RCC_AHB2PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 8003dc8:	4b05      	ldr	r3, [pc, #20]	; (8003de0 <RCC_AHB2PeriphResetCmd+0x38>)
 8003dca:	4a05      	ldr	r2, [pc, #20]	; (8003de0 <RCC_AHB2PeriphResetCmd+0x38>)
 8003dcc:	6951      	ldr	r1, [r2, #20]
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	43d2      	mvns	r2, r2
 8003dd2:	400a      	ands	r2, r1
 8003dd4:	615a      	str	r2, [r3, #20]
  }
}
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	40023800 	.word	0x40023800

08003de4 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	460b      	mov	r3, r1
 8003dee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003df0:	78fb      	ldrb	r3, [r7, #3]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d006      	beq.n	8003e04 <RCC_AHB3PeriphResetCmd+0x20>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8003df6:	4b09      	ldr	r3, [pc, #36]	; (8003e1c <RCC_AHB3PeriphResetCmd+0x38>)
 8003df8:	4a08      	ldr	r2, [pc, #32]	; (8003e1c <RCC_AHB3PeriphResetCmd+0x38>)
 8003dfa:	6991      	ldr	r1, [r2, #24]
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	619a      	str	r2, [r3, #24]
 8003e02:	e006      	b.n	8003e12 <RCC_AHB3PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 8003e04:	4b05      	ldr	r3, [pc, #20]	; (8003e1c <RCC_AHB3PeriphResetCmd+0x38>)
 8003e06:	4a05      	ldr	r2, [pc, #20]	; (8003e1c <RCC_AHB3PeriphResetCmd+0x38>)
 8003e08:	6991      	ldr	r1, [r2, #24]
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	43d2      	mvns	r2, r2
 8003e0e:	400a      	ands	r2, r1
 8003e10:	619a      	str	r2, [r3, #24]
  }
}
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr
 8003e1c:	40023800 	.word	0x40023800

08003e20 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	460b      	mov	r3, r1
 8003e2a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003e2c:	78fb      	ldrb	r3, [r7, #3]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d006      	beq.n	8003e40 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8003e32:	4b09      	ldr	r3, [pc, #36]	; (8003e58 <RCC_APB1PeriphResetCmd+0x38>)
 8003e34:	4a08      	ldr	r2, [pc, #32]	; (8003e58 <RCC_APB1PeriphResetCmd+0x38>)
 8003e36:	6a11      	ldr	r1, [r2, #32]
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	621a      	str	r2, [r3, #32]
 8003e3e:	e006      	b.n	8003e4e <RCC_APB1PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8003e40:	4b05      	ldr	r3, [pc, #20]	; (8003e58 <RCC_APB1PeriphResetCmd+0x38>)
 8003e42:	4a05      	ldr	r2, [pc, #20]	; (8003e58 <RCC_APB1PeriphResetCmd+0x38>)
 8003e44:	6a11      	ldr	r1, [r2, #32]
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	43d2      	mvns	r2, r2
 8003e4a:	400a      	ands	r2, r1
 8003e4c:	621a      	str	r2, [r3, #32]
  }
}
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr
 8003e58:	40023800 	.word	0x40023800

08003e5c <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	460b      	mov	r3, r1
 8003e66:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003e68:	78fb      	ldrb	r3, [r7, #3]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d006      	beq.n	8003e7c <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8003e6e:	4b09      	ldr	r3, [pc, #36]	; (8003e94 <RCC_APB2PeriphResetCmd+0x38>)
 8003e70:	4a08      	ldr	r2, [pc, #32]	; (8003e94 <RCC_APB2PeriphResetCmd+0x38>)
 8003e72:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	625a      	str	r2, [r3, #36]	; 0x24
 8003e7a:	e006      	b.n	8003e8a <RCC_APB2PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8003e7c:	4b05      	ldr	r3, [pc, #20]	; (8003e94 <RCC_APB2PeriphResetCmd+0x38>)
 8003e7e:	4a05      	ldr	r2, [pc, #20]	; (8003e94 <RCC_APB2PeriphResetCmd+0x38>)
 8003e80:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	43d2      	mvns	r2, r2
 8003e86:	400a      	ands	r2, r1
 8003e88:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr
 8003e94:	40023800 	.word	0x40023800

08003e98 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003ea4:	78fb      	ldrb	r3, [r7, #3]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d006      	beq.n	8003eb8 <RCC_AHB1PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8003eaa:	4b09      	ldr	r3, [pc, #36]	; (8003ed0 <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 8003eac:	4a08      	ldr	r2, [pc, #32]	; (8003ed0 <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 8003eae:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	651a      	str	r2, [r3, #80]	; 0x50
 8003eb6:	e006      	b.n	8003ec6 <RCC_AHB1PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 8003eb8:	4b05      	ldr	r3, [pc, #20]	; (8003ed0 <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 8003eba:	4a05      	ldr	r2, [pc, #20]	; (8003ed0 <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 8003ebc:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	43d2      	mvns	r2, r2
 8003ec2:	400a      	ands	r2, r1
 8003ec4:	651a      	str	r2, [r3, #80]	; 0x50
  }
}
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr
 8003ed0:	40023800 	.word	0x40023800

08003ed4 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	460b      	mov	r3, r1
 8003ede:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003ee0:	78fb      	ldrb	r3, [r7, #3]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d006      	beq.n	8003ef4 <RCC_AHB2PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8003ee6:	4b09      	ldr	r3, [pc, #36]	; (8003f0c <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 8003ee8:	4a08      	ldr	r2, [pc, #32]	; (8003f0c <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 8003eea:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	655a      	str	r2, [r3, #84]	; 0x54
 8003ef2:	e006      	b.n	8003f02 <RCC_AHB2PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 8003ef4:	4b05      	ldr	r3, [pc, #20]	; (8003f0c <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 8003ef6:	4a05      	ldr	r2, [pc, #20]	; (8003f0c <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 8003ef8:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	43d2      	mvns	r2, r2
 8003efe:	400a      	ands	r2, r1
 8003f00:	655a      	str	r2, [r3, #84]	; 0x54
  }
}
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr
 8003f0c:	40023800 	.word	0x40023800

08003f10 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	460b      	mov	r3, r1
 8003f1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003f1c:	78fb      	ldrb	r3, [r7, #3]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d006      	beq.n	8003f30 <RCC_AHB3PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8003f22:	4b09      	ldr	r3, [pc, #36]	; (8003f48 <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 8003f24:	4a08      	ldr	r2, [pc, #32]	; (8003f48 <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 8003f26:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	659a      	str	r2, [r3, #88]	; 0x58
 8003f2e:	e006      	b.n	8003f3e <RCC_AHB3PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 8003f30:	4b05      	ldr	r3, [pc, #20]	; (8003f48 <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 8003f32:	4a05      	ldr	r2, [pc, #20]	; (8003f48 <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 8003f34:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	43d2      	mvns	r2, r2
 8003f3a:	400a      	ands	r2, r1
 8003f3c:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr
 8003f48:	40023800 	.word	0x40023800

08003f4c <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	460b      	mov	r3, r1
 8003f56:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003f58:	78fb      	ldrb	r3, [r7, #3]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d006      	beq.n	8003f6c <RCC_APB1PeriphClockLPModeCmd+0x20>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8003f5e:	4b09      	ldr	r3, [pc, #36]	; (8003f84 <RCC_APB1PeriphClockLPModeCmd+0x38>)
 8003f60:	4a08      	ldr	r2, [pc, #32]	; (8003f84 <RCC_APB1PeriphClockLPModeCmd+0x38>)
 8003f62:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	661a      	str	r2, [r3, #96]	; 0x60
 8003f6a:	e006      	b.n	8003f7a <RCC_APB1PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 8003f6c:	4b05      	ldr	r3, [pc, #20]	; (8003f84 <RCC_APB1PeriphClockLPModeCmd+0x38>)
 8003f6e:	4a05      	ldr	r2, [pc, #20]	; (8003f84 <RCC_APB1PeriphClockLPModeCmd+0x38>)
 8003f70:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	43d2      	mvns	r2, r2
 8003f76:	400a      	ands	r2, r1
 8003f78:	661a      	str	r2, [r3, #96]	; 0x60
  }
}
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr
 8003f84:	40023800 	.word	0x40023800

08003f88 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	460b      	mov	r3, r1
 8003f92:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003f94:	78fb      	ldrb	r3, [r7, #3]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d006      	beq.n	8003fa8 <RCC_APB2PeriphClockLPModeCmd+0x20>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8003f9a:	4b09      	ldr	r3, [pc, #36]	; (8003fc0 <RCC_APB2PeriphClockLPModeCmd+0x38>)
 8003f9c:	4a08      	ldr	r2, [pc, #32]	; (8003fc0 <RCC_APB2PeriphClockLPModeCmd+0x38>)
 8003f9e:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	665a      	str	r2, [r3, #100]	; 0x64
 8003fa6:	e006      	b.n	8003fb6 <RCC_APB2PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 8003fa8:	4b05      	ldr	r3, [pc, #20]	; (8003fc0 <RCC_APB2PeriphClockLPModeCmd+0x38>)
 8003faa:	4a05      	ldr	r2, [pc, #20]	; (8003fc0 <RCC_APB2PeriphClockLPModeCmd+0x38>)
 8003fac:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	43d2      	mvns	r2, r2
 8003fb2:	400a      	ands	r2, r1
 8003fb4:	665a      	str	r2, [r3, #100]	; 0x64
  }
}
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr
 8003fc0:	40023800 	.word	0x40023800

08003fc4 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	4602      	mov	r2, r0
 8003fcc:	460b      	mov	r3, r1
 8003fce:	71fa      	strb	r2, [r7, #7]
 8003fd0:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003fd2:	79bb      	ldrb	r3, [r7, #6]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d008      	beq.n	8003fea <RCC_ITConfig+0x26>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8003fd8:	4b0b      	ldr	r3, [pc, #44]	; (8004008 <RCC_ITConfig+0x44>)
 8003fda:	4a0b      	ldr	r2, [pc, #44]	; (8004008 <RCC_ITConfig+0x44>)
 8003fdc:	7812      	ldrb	r2, [r2, #0]
 8003fde:	b2d1      	uxtb	r1, r2
 8003fe0:	79fa      	ldrb	r2, [r7, #7]
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	b2d2      	uxtb	r2, r2
 8003fe6:	701a      	strb	r2, [r3, #0]
 8003fe8:	e009      	b.n	8003ffe <RCC_ITConfig+0x3a>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8003fea:	4b07      	ldr	r3, [pc, #28]	; (8004008 <RCC_ITConfig+0x44>)
 8003fec:	4a06      	ldr	r2, [pc, #24]	; (8004008 <RCC_ITConfig+0x44>)
 8003fee:	7812      	ldrb	r2, [r2, #0]
 8003ff0:	b2d1      	uxtb	r1, r2
 8003ff2:	79fa      	ldrb	r2, [r7, #7]
 8003ff4:	43d2      	mvns	r2, r2
 8003ff6:	b2d2      	uxtb	r2, r2
 8003ff8:	400a      	ands	r2, r1
 8003ffa:	b2d2      	uxtb	r2, r2
 8003ffc:	701a      	strb	r2, [r3, #0]
  }
}
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr
 8004008:	4002380d 	.word	0x4002380d

0800400c <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 800400c:	b480      	push	{r7}
 800400e:	b087      	sub	sp, #28
 8004010:	af00      	add	r7, sp, #0
 8004012:	4603      	mov	r3, r0
 8004014:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8004016:	2300      	movs	r3, #0
 8004018:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 800401a:	2300      	movs	r3, #0
 800401c:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 800401e:	2300      	movs	r3, #0
 8004020:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8004022:	79fb      	ldrb	r3, [r7, #7]
 8004024:	095b      	lsrs	r3, r3, #5
 8004026:	b2db      	uxtb	r3, r3
 8004028:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d103      	bne.n	8004038 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8004030:	4b12      	ldr	r3, [pc, #72]	; (800407c <RCC_GetFlagStatus+0x70>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	617b      	str	r3, [r7, #20]
 8004036:	e009      	b.n	800404c <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2b02      	cmp	r3, #2
 800403c:	d103      	bne.n	8004046 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 800403e:	4b0f      	ldr	r3, [pc, #60]	; (800407c <RCC_GetFlagStatus+0x70>)
 8004040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004042:	617b      	str	r3, [r7, #20]
 8004044:	e002      	b.n	800404c <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8004046:	4b0d      	ldr	r3, [pc, #52]	; (800407c <RCC_GetFlagStatus+0x70>)
 8004048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800404a:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 800404c:	79fb      	ldrb	r3, [r7, #7]
 800404e:	f003 031f 	and.w	r3, r3, #31
 8004052:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	fa22 f303 	lsr.w	r3, r2, r3
 800405c:	f003 0301 	and.w	r3, r3, #1
 8004060:	2b00      	cmp	r3, #0
 8004062:	d002      	beq.n	800406a <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 8004064:	2301      	movs	r3, #1
 8004066:	74fb      	strb	r3, [r7, #19]
 8004068:	e001      	b.n	800406e <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 800406a:	2300      	movs	r3, #0
 800406c:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 800406e:	7cfb      	ldrb	r3, [r7, #19]
}
 8004070:	4618      	mov	r0, r3
 8004072:	371c      	adds	r7, #28
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr
 800407c:	40023800 	.word	0x40023800

08004080 <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
 8004080:	b480      	push	{r7}
 8004082:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8004084:	4b04      	ldr	r3, [pc, #16]	; (8004098 <RCC_ClearFlag+0x18>)
 8004086:	4a04      	ldr	r2, [pc, #16]	; (8004098 <RCC_ClearFlag+0x18>)
 8004088:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800408a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800408e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr
 8004098:	40023800 	.word	0x40023800

0800409c <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt             
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	4603      	mov	r3, r0
 80040a4:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 80040a6:	2300      	movs	r3, #0
 80040a8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 80040aa:	4b09      	ldr	r3, [pc, #36]	; (80040d0 <RCC_GetITStatus+0x34>)
 80040ac:	68da      	ldr	r2, [r3, #12]
 80040ae:	79fb      	ldrb	r3, [r7, #7]
 80040b0:	4013      	ands	r3, r2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d002      	beq.n	80040bc <RCC_GetITStatus+0x20>
  {
    bitstatus = SET;
 80040b6:	2301      	movs	r3, #1
 80040b8:	73fb      	strb	r3, [r7, #15]
 80040ba:	e001      	b.n	80040c0 <RCC_GetITStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 80040bc:	2300      	movs	r3, #0
 80040be:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 80040c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3714      	adds	r7, #20
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	40023800 	.word	0x40023800

080040d4 <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	4603      	mov	r3, r0
 80040dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 80040de:	4b04      	ldr	r3, [pc, #16]	; (80040f0 <RCC_ClearITPendingBit+0x1c>)
 80040e0:	79fa      	ldrb	r2, [r7, #7]
 80040e2:	701a      	strb	r2, [r3, #0]
}
 80040e4:	370c      	adds	r7, #12
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	4002380e 	.word	0x4002380e

080040f4 <GPIO_DeInit>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for 
  *                STM32F40xx/41xx and STM32F427x/437x devices. 
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	4b3c      	ldr	r3, [pc, #240]	; (80041f0 <GPIO_DeInit+0xfc>)
 8004100:	429a      	cmp	r2, r3
 8004102:	d108      	bne.n	8004116 <GPIO_DeInit+0x22>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8004104:	2001      	movs	r0, #1
 8004106:	2101      	movs	r1, #1
 8004108:	f7ff fe30 	bl	8003d6c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 800410c:	2001      	movs	r0, #1
 800410e:	2100      	movs	r1, #0
 8004110:	f7ff fe2c 	bl	8003d6c <RCC_AHB1PeriphResetCmd>
 8004114:	e068      	b.n	80041e8 <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOB)
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	4b36      	ldr	r3, [pc, #216]	; (80041f4 <GPIO_DeInit+0x100>)
 800411a:	429a      	cmp	r2, r3
 800411c:	d108      	bne.n	8004130 <GPIO_DeInit+0x3c>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800411e:	2002      	movs	r0, #2
 8004120:	2101      	movs	r1, #1
 8004122:	f7ff fe23 	bl	8003d6c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 8004126:	2002      	movs	r0, #2
 8004128:	2100      	movs	r1, #0
 800412a:	f7ff fe1f 	bl	8003d6c <RCC_AHB1PeriphResetCmd>
 800412e:	e05b      	b.n	80041e8 <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOC)
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	4b31      	ldr	r3, [pc, #196]	; (80041f8 <GPIO_DeInit+0x104>)
 8004134:	429a      	cmp	r2, r3
 8004136:	d108      	bne.n	800414a <GPIO_DeInit+0x56>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8004138:	2004      	movs	r0, #4
 800413a:	2101      	movs	r1, #1
 800413c:	f7ff fe16 	bl	8003d6c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 8004140:	2004      	movs	r0, #4
 8004142:	2100      	movs	r1, #0
 8004144:	f7ff fe12 	bl	8003d6c <RCC_AHB1PeriphResetCmd>
 8004148:	e04e      	b.n	80041e8 <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOD)
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	4b2b      	ldr	r3, [pc, #172]	; (80041fc <GPIO_DeInit+0x108>)
 800414e:	429a      	cmp	r2, r3
 8004150:	d108      	bne.n	8004164 <GPIO_DeInit+0x70>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8004152:	2008      	movs	r0, #8
 8004154:	2101      	movs	r1, #1
 8004156:	f7ff fe09 	bl	8003d6c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 800415a:	2008      	movs	r0, #8
 800415c:	2100      	movs	r1, #0
 800415e:	f7ff fe05 	bl	8003d6c <RCC_AHB1PeriphResetCmd>
 8004162:	e041      	b.n	80041e8 <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOE)
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	4b26      	ldr	r3, [pc, #152]	; (8004200 <GPIO_DeInit+0x10c>)
 8004168:	429a      	cmp	r2, r3
 800416a:	d108      	bne.n	800417e <GPIO_DeInit+0x8a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 800416c:	2010      	movs	r0, #16
 800416e:	2101      	movs	r1, #1
 8004170:	f7ff fdfc 	bl	8003d6c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 8004174:	2010      	movs	r0, #16
 8004176:	2100      	movs	r1, #0
 8004178:	f7ff fdf8 	bl	8003d6c <RCC_AHB1PeriphResetCmd>
 800417c:	e034      	b.n	80041e8 <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOF)
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	4b20      	ldr	r3, [pc, #128]	; (8004204 <GPIO_DeInit+0x110>)
 8004182:	429a      	cmp	r2, r3
 8004184:	d108      	bne.n	8004198 <GPIO_DeInit+0xa4>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8004186:	2020      	movs	r0, #32
 8004188:	2101      	movs	r1, #1
 800418a:	f7ff fdef 	bl	8003d6c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 800418e:	2020      	movs	r0, #32
 8004190:	2100      	movs	r1, #0
 8004192:	f7ff fdeb 	bl	8003d6c <RCC_AHB1PeriphResetCmd>
 8004196:	e027      	b.n	80041e8 <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOG)
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	4b1b      	ldr	r3, [pc, #108]	; (8004208 <GPIO_DeInit+0x114>)
 800419c:	429a      	cmp	r2, r3
 800419e:	d108      	bne.n	80041b2 <GPIO_DeInit+0xbe>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 80041a0:	2040      	movs	r0, #64	; 0x40
 80041a2:	2101      	movs	r1, #1
 80041a4:	f7ff fde2 	bl	8003d6c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 80041a8:	2040      	movs	r0, #64	; 0x40
 80041aa:	2100      	movs	r1, #0
 80041ac:	f7ff fdde 	bl	8003d6c <RCC_AHB1PeriphResetCmd>
 80041b0:	e01a      	b.n	80041e8 <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOH)
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	4b15      	ldr	r3, [pc, #84]	; (800420c <GPIO_DeInit+0x118>)
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d108      	bne.n	80041cc <GPIO_DeInit+0xd8>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 80041ba:	2080      	movs	r0, #128	; 0x80
 80041bc:	2101      	movs	r1, #1
 80041be:	f7ff fdd5 	bl	8003d6c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 80041c2:	2080      	movs	r0, #128	; 0x80
 80041c4:	2100      	movs	r1, #0
 80041c6:	f7ff fdd1 	bl	8003d6c <RCC_AHB1PeriphResetCmd>
 80041ca:	e00d      	b.n	80041e8 <GPIO_DeInit+0xf4>
  }
  else
  {
    if (GPIOx == GPIOI)
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	4b10      	ldr	r3, [pc, #64]	; (8004210 <GPIO_DeInit+0x11c>)
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d109      	bne.n	80041e8 <GPIO_DeInit+0xf4>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 80041d4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80041d8:	2101      	movs	r1, #1
 80041da:	f7ff fdc7 	bl	8003d6c <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 80041de:	f44f 7080 	mov.w	r0, #256	; 0x100
 80041e2:	2100      	movs	r1, #0
 80041e4:	f7ff fdc2 	bl	8003d6c <RCC_AHB1PeriphResetCmd>
    }
  }
}
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	40020000 	.word	0x40020000
 80041f4:	40020400 	.word	0x40020400
 80041f8:	40020800 	.word	0x40020800
 80041fc:	40020c00 	.word	0x40020c00
 8004200:	40021000 	.word	0x40021000
 8004204:	40021400 	.word	0x40021400
 8004208:	40021800 	.word	0x40021800
 800420c:	40021c00 	.word	0x40021c00
 8004210:	40022000 	.word	0x40022000

08004214 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8004214:	b480      	push	{r7}
 8004216:	b087      	sub	sp, #28
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800421e:	2300      	movs	r3, #0
 8004220:	617b      	str	r3, [r7, #20]
 8004222:	2300      	movs	r3, #0
 8004224:	613b      	str	r3, [r7, #16]
 8004226:	2300      	movs	r3, #0
 8004228:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800422a:	2300      	movs	r3, #0
 800422c:	617b      	str	r3, [r7, #20]
 800422e:	e076      	b.n	800431e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	2201      	movs	r2, #1
 8004234:	fa02 f303 	lsl.w	r3, r2, r3
 8004238:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	4013      	ands	r3, r2
 8004242:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	429a      	cmp	r2, r3
 800424a:	d165      	bne.n	8004318 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	005b      	lsls	r3, r3, #1
 8004254:	2103      	movs	r1, #3
 8004256:	fa01 f303 	lsl.w	r3, r1, r3
 800425a:	43db      	mvns	r3, r3
 800425c:	401a      	ands	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	791b      	ldrb	r3, [r3, #4]
 800426a:	4619      	mov	r1, r3
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	005b      	lsls	r3, r3, #1
 8004270:	fa01 f303 	lsl.w	r3, r1, r3
 8004274:	431a      	orrs	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	791b      	ldrb	r3, [r3, #4]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d003      	beq.n	800428a <GPIO_Init+0x76>
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	791b      	ldrb	r3, [r3, #4]
 8004286:	2b02      	cmp	r3, #2
 8004288:	d12e      	bne.n	80042e8 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	689a      	ldr	r2, [r3, #8]
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	005b      	lsls	r3, r3, #1
 8004292:	2103      	movs	r1, #3
 8004294:	fa01 f303 	lsl.w	r3, r1, r3
 8004298:	43db      	mvns	r3, r3
 800429a:	401a      	ands	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	689a      	ldr	r2, [r3, #8]
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	795b      	ldrb	r3, [r3, #5]
 80042a8:	4619      	mov	r1, r3
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	fa01 f303 	lsl.w	r3, r1, r3
 80042b2:	431a      	orrs	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685a      	ldr	r2, [r3, #4]
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	b29b      	uxth	r3, r3
 80042c0:	2101      	movs	r1, #1
 80042c2:	fa01 f303 	lsl.w	r3, r1, r3
 80042c6:	43db      	mvns	r3, r3
 80042c8:	401a      	ands	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685a      	ldr	r2, [r3, #4]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	799b      	ldrb	r3, [r3, #6]
 80042d6:	4619      	mov	r1, r3
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	b29b      	uxth	r3, r3
 80042dc:	fa01 f303 	lsl.w	r3, r1, r3
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	431a      	orrs	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	68da      	ldr	r2, [r3, #12]
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	005b      	lsls	r3, r3, #1
 80042f2:	2103      	movs	r1, #3
 80042f4:	fa01 f303 	lsl.w	r3, r1, r3
 80042f8:	43db      	mvns	r3, r3
 80042fa:	401a      	ands	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	68da      	ldr	r2, [r3, #12]
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	79db      	ldrb	r3, [r3, #7]
 8004308:	4619      	mov	r1, r3
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	fa01 f303 	lsl.w	r3, r1, r3
 8004312:	431a      	orrs	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	3301      	adds	r3, #1
 800431c:	617b      	str	r3, [r7, #20]
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	2b0f      	cmp	r3, #15
 8004322:	d985      	bls.n	8004230 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8004324:	371c      	adds	r7, #28
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop

08004330 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800433e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	71da      	strb	r2, [r3, #7]
}
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop

08004364 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	460b      	mov	r3, r1
 800436e:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0x00010000;
 8004370:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004374:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8004376:	887a      	ldrh	r2, [r7, #2]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	4313      	orrs	r3, r2
 800437c:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8004384:	887a      	ldrh	r2, [r7, #2]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	69db      	ldr	r3, [r3, #28]
 8004394:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	69db      	ldr	r3, [r3, #28]
 800439a:	60fb      	str	r3, [r7, #12]
}
 800439c:	3714      	adds	r7, #20
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop

080043a8 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	460b      	mov	r3, r1
 80043b2:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80043b4:	2300      	movs	r3, #0
 80043b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	691a      	ldr	r2, [r3, #16]
 80043bc:	887b      	ldrh	r3, [r7, #2]
 80043be:	4013      	ands	r3, r2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d002      	beq.n	80043ca <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80043c4:	2301      	movs	r3, #1
 80043c6:	73fb      	strb	r3, [r7, #15]
 80043c8:	e001      	b.n	80043ce <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80043ca:	2300      	movs	r3, #0
 80043cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80043ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3714      	adds	r7, #20
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <GPIO_ReadInputData>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for 
  *                STM32F40xx/41xx and STM32F427x/437x devices. 
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	b29b      	uxth	r3, r3
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop

080043f8 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	460b      	mov	r3, r1
 8004402:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8004404:	2300      	movs	r3, #0
 8004406:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	695a      	ldr	r2, [r3, #20]
 800440c:	887b      	ldrh	r3, [r7, #2]
 800440e:	4013      	ands	r3, r2
 8004410:	2b00      	cmp	r3, #0
 8004412:	d002      	beq.n	800441a <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8004414:	2301      	movs	r3, #1
 8004416:	73fb      	strb	r3, [r7, #15]
 8004418:	e001      	b.n	800441e <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800441a:	2300      	movs	r3, #0
 800441c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800441e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004420:	4618      	mov	r0, r3
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <GPIO_ReadOutputData>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for 
  *                STM32F40xx/41xx and STM32F427x/437x devices.  
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	695b      	ldr	r3, [r3, #20]
 8004438:	b29b      	uxth	r3, r3
}
 800443a:	4618      	mov	r0, r3
 800443c:	370c      	adds	r7, #12
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop

08004448 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	460b      	mov	r3, r1
 8004452:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	887a      	ldrh	r2, [r7, #2]
 8004458:	831a      	strh	r2, [r3, #24]
}
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	460b      	mov	r3, r1
 800446e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	887a      	ldrh	r2, [r7, #2]
 8004474:	835a      	strh	r2, [r3, #26]
}
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	4613      	mov	r3, r2
 800448a:	460a      	mov	r2, r1
 800448c:	807a      	strh	r2, [r7, #2]
 800448e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8004490:	787b      	ldrb	r3, [r7, #1]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	887a      	ldrh	r2, [r7, #2]
 800449a:	831a      	strh	r2, [r3, #24]
 800449c:	e002      	b.n	80044a4 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	887a      	ldrh	r2, [r7, #2]
 80044a2:	835a      	strh	r2, [r3, #26]
  }
}
 80044a4:	370c      	adds	r7, #12
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop

080044b0 <GPIO_Write>:
  *                STM32F40xx/41xx and STM32F427x/437x devices.  
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	460b      	mov	r3, r1
 80044ba:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 80044bc:	887a      	ldrh	r2, [r7, #2]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	615a      	str	r2, [r3, #20]
}
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <GPIO_ToggleBits>:
  *                STM32F40xx/41xx and STM32F427x/437x devices.  
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	460b      	mov	r3, r1
 80044d6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	695a      	ldr	r2, [r3, #20]
 80044dc:	887b      	ldrh	r3, [r7, #2]
 80044de:	405a      	eors	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	615a      	str	r2, [r3, #20]
}
 80044e4:	370c      	adds	r7, #12
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop

080044f0 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b085      	sub	sp, #20
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	4613      	mov	r3, r2
 80044fa:	460a      	mov	r2, r1
 80044fc:	807a      	strh	r2, [r7, #2]
 80044fe:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8004500:	2300      	movs	r3, #0
 8004502:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8004504:	2300      	movs	r3, #0
 8004506:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8004508:	787a      	ldrb	r2, [r7, #1]
 800450a:	887b      	ldrh	r3, [r7, #2]
 800450c:	f003 0307 	and.w	r3, r3, #7
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	fa02 f303 	lsl.w	r3, r2, r3
 8004516:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8004518:	887b      	ldrh	r3, [r7, #2]
 800451a:	08db      	lsrs	r3, r3, #3
 800451c:	b29b      	uxth	r3, r3
 800451e:	461a      	mov	r2, r3
 8004520:	887b      	ldrh	r3, [r7, #2]
 8004522:	08db      	lsrs	r3, r3, #3
 8004524:	b29b      	uxth	r3, r3
 8004526:	4619      	mov	r1, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	3108      	adds	r1, #8
 800452c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8004530:	887b      	ldrh	r3, [r7, #2]
 8004532:	f003 0307 	and.w	r3, r3, #7
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	200f      	movs	r0, #15
 800453a:	fa00 f303 	lsl.w	r3, r0, r3
 800453e:	43db      	mvns	r3, r3
 8004540:	4019      	ands	r1, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	3208      	adds	r2, #8
 8004546:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800454a:	887b      	ldrh	r3, [r7, #2]
 800454c:	08db      	lsrs	r3, r3, #3
 800454e:	b29b      	uxth	r3, r3
 8004550:	461a      	mov	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	3208      	adds	r2, #8
 8004556:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	4313      	orrs	r3, r2
 800455e:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8004560:	887b      	ldrh	r3, [r7, #2]
 8004562:	08db      	lsrs	r3, r3, #3
 8004564:	b29b      	uxth	r3, r3
 8004566:	461a      	mov	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	3208      	adds	r2, #8
 800456c:	68b9      	ldr	r1, [r7, #8]
 800456e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8004572:	3714      	adds	r7, #20
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
 800457c:	b480      	push	{r7}
 800457e:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
 8004580:	4b09      	ldr	r3, [pc, #36]	; (80045a8 <EXTI_DeInit+0x2c>)
 8004582:	2200      	movs	r2, #0
 8004584:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
 8004586:	4b08      	ldr	r3, [pc, #32]	; (80045a8 <EXTI_DeInit+0x2c>)
 8004588:	2200      	movs	r2, #0
 800458a:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
 800458c:	4b06      	ldr	r3, [pc, #24]	; (80045a8 <EXTI_DeInit+0x2c>)
 800458e:	2200      	movs	r2, #0
 8004590:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
 8004592:	4b05      	ldr	r3, [pc, #20]	; (80045a8 <EXTI_DeInit+0x2c>)
 8004594:	2200      	movs	r2, #0
 8004596:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x007FFFFF;
 8004598:	4b03      	ldr	r3, [pc, #12]	; (80045a8 <EXTI_DeInit+0x2c>)
 800459a:	4a04      	ldr	r2, [pc, #16]	; (80045ac <EXTI_DeInit+0x30>)
 800459c:	615a      	str	r2, [r3, #20]
}
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	40013c00 	.word	0x40013c00
 80045ac:	007fffff 	.word	0x007fffff

080045b0 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80045b8:	2300      	movs	r3, #0
 80045ba:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 80045bc:	4b32      	ldr	r3, [pc, #200]	; (8004688 <EXTI_Init+0xd8>)
 80045be:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	799b      	ldrb	r3, [r3, #6]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d04d      	beq.n	8004664 <EXTI_Init+0xb4>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80045c8:	4b2f      	ldr	r3, [pc, #188]	; (8004688 <EXTI_Init+0xd8>)
 80045ca:	4a2f      	ldr	r2, [pc, #188]	; (8004688 <EXTI_Init+0xd8>)
 80045cc:	6811      	ldr	r1, [r2, #0]
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	6812      	ldr	r2, [r2, #0]
 80045d2:	43d2      	mvns	r2, r2
 80045d4:	400a      	ands	r2, r1
 80045d6:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80045d8:	4b2b      	ldr	r3, [pc, #172]	; (8004688 <EXTI_Init+0xd8>)
 80045da:	4a2b      	ldr	r2, [pc, #172]	; (8004688 <EXTI_Init+0xd8>)
 80045dc:	6851      	ldr	r1, [r2, #4]
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	6812      	ldr	r2, [r2, #0]
 80045e2:	43d2      	mvns	r2, r2
 80045e4:	400a      	ands	r2, r1
 80045e6:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	791b      	ldrb	r3, [r3, #4]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	4413      	add	r3, r2
 80045f0:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	6811      	ldr	r1, [r2, #0]
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	6812      	ldr	r2, [r2, #0]
 80045fc:	430a      	orrs	r2, r1
 80045fe:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8004600:	4b21      	ldr	r3, [pc, #132]	; (8004688 <EXTI_Init+0xd8>)
 8004602:	4a21      	ldr	r2, [pc, #132]	; (8004688 <EXTI_Init+0xd8>)
 8004604:	6891      	ldr	r1, [r2, #8]
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	6812      	ldr	r2, [r2, #0]
 800460a:	43d2      	mvns	r2, r2
 800460c:	400a      	ands	r2, r1
 800460e:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8004610:	4b1d      	ldr	r3, [pc, #116]	; (8004688 <EXTI_Init+0xd8>)
 8004612:	4a1d      	ldr	r2, [pc, #116]	; (8004688 <EXTI_Init+0xd8>)
 8004614:	68d1      	ldr	r1, [r2, #12]
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	6812      	ldr	r2, [r2, #0]
 800461a:	43d2      	mvns	r2, r2
 800461c:	400a      	ands	r2, r1
 800461e:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	795b      	ldrb	r3, [r3, #5]
 8004624:	2b10      	cmp	r3, #16
 8004626:	d10e      	bne.n	8004646 <EXTI_Init+0x96>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8004628:	4b17      	ldr	r3, [pc, #92]	; (8004688 <EXTI_Init+0xd8>)
 800462a:	4a17      	ldr	r2, [pc, #92]	; (8004688 <EXTI_Init+0xd8>)
 800462c:	6891      	ldr	r1, [r2, #8]
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	6812      	ldr	r2, [r2, #0]
 8004632:	430a      	orrs	r2, r1
 8004634:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8004636:	4b14      	ldr	r3, [pc, #80]	; (8004688 <EXTI_Init+0xd8>)
 8004638:	4a13      	ldr	r2, [pc, #76]	; (8004688 <EXTI_Init+0xd8>)
 800463a:	68d1      	ldr	r1, [r2, #12]
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	6812      	ldr	r2, [r2, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	60da      	str	r2, [r3, #12]
 8004644:	e01b      	b.n	800467e <EXTI_Init+0xce>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 8004646:	4b10      	ldr	r3, [pc, #64]	; (8004688 <EXTI_Init+0xd8>)
 8004648:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	795b      	ldrb	r3, [r3, #5]
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	4413      	add	r3, r2
 8004652:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	6811      	ldr	r1, [r2, #0]
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	6812      	ldr	r2, [r2, #0]
 800465e:	430a      	orrs	r2, r1
 8004660:	601a      	str	r2, [r3, #0]
 8004662:	e00c      	b.n	800467e <EXTI_Init+0xce>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	791b      	ldrb	r3, [r3, #4]
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	4413      	add	r3, r2
 800466c:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	6811      	ldr	r1, [r2, #0]
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	6812      	ldr	r2, [r2, #0]
 8004678:	43d2      	mvns	r2, r2
 800467a:	400a      	ands	r2, r1
 800467c:	601a      	str	r2, [r3, #0]
  }
}
 800467e:	3714      	adds	r7, #20
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr
 8004688:	40013c00 	.word	0x40013c00

0800468c <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	220c      	movs	r2, #12
 80046a4:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	719a      	strb	r2, [r3, #6]
}
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop

080046b8 <EXTI_GenerateSWInterrupt>:
  *         will be generated.
  *         This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
 80046c0:	4b05      	ldr	r3, [pc, #20]	; (80046d8 <EXTI_GenerateSWInterrupt+0x20>)
 80046c2:	4a05      	ldr	r2, [pc, #20]	; (80046d8 <EXTI_GenerateSWInterrupt+0x20>)
 80046c4:	6911      	ldr	r1, [r2, #16]
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	430a      	orrs	r2, r1
 80046ca:	611a      	str	r2, [r3, #16]
}
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	40013c00 	.word	0x40013c00

080046dc <EXTI_GetFlagStatus>:
  * @param  EXTI_Line: specifies the EXTI line flag to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80046e4:	2300      	movs	r3, #0
 80046e6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 80046e8:	4b08      	ldr	r3, [pc, #32]	; (800470c <EXTI_GetFlagStatus+0x30>)
 80046ea:	695a      	ldr	r2, [r3, #20]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4013      	ands	r3, r2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d002      	beq.n	80046fa <EXTI_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 80046f4:	2301      	movs	r3, #1
 80046f6:	73fb      	strb	r3, [r7, #15]
 80046f8:	e001      	b.n	80046fe <EXTI_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 80046fa:	2300      	movs	r3, #0
 80046fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80046fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004700:	4618      	mov	r0, r3
 8004702:	3714      	adds	r7, #20
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr
 800470c:	40013c00 	.word	0x40013c00

08004710 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8004718:	4b03      	ldr	r3, [pc, #12]	; (8004728 <EXTI_ClearFlag+0x18>)
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	615a      	str	r2, [r3, #20]
}
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr
 8004728:	40013c00 	.word	0x40013c00

0800472c <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8004734:	2300      	movs	r3, #0
 8004736:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8004738:	2300      	movs	r3, #0
 800473a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 800473c:	4b0c      	ldr	r3, [pc, #48]	; (8004770 <EXTI_GetITStatus+0x44>)
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4013      	ands	r3, r2
 8004744:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8004746:	4b0a      	ldr	r3, [pc, #40]	; (8004770 <EXTI_GetITStatus+0x44>)
 8004748:	695a      	ldr	r2, [r3, #20]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4013      	ands	r3, r2
 800474e:	2b00      	cmp	r3, #0
 8004750:	d005      	beq.n	800475e <EXTI_GetITStatus+0x32>
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d002      	beq.n	800475e <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 8004758:	2301      	movs	r3, #1
 800475a:	73fb      	strb	r3, [r7, #15]
 800475c:	e001      	b.n	8004762 <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 800475e:	2300      	movs	r3, #0
 8004760:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004762:	7bfb      	ldrb	r3, [r7, #15]
}
 8004764:	4618      	mov	r0, r3
 8004766:	3714      	adds	r7, #20
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr
 8004770:	40013c00 	.word	0x40013c00

08004774 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 800477c:	4b03      	ldr	r3, [pc, #12]	; (800478c <EXTI_ClearITPendingBit+0x18>)
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	615a      	str	r2, [r3, #20]
}
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr
 800478c:	40013c00 	.word	0x40013c00

08004790 <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	af00      	add	r7, sp, #0
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 8004794:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004798:	2101      	movs	r1, #1
 800479a:	f7ff fb5f 	bl	8003e5c <RCC_APB2PeriphResetCmd>
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 800479e:	f44f 7080 	mov.w	r0, #256	; 0x100
 80047a2:	2100      	movs	r1, #0
 80047a4:	f7ff fb5a 	bl	8003e5c <RCC_APB2PeriphResetCmd>
}
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop

080047ac <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 80047b6:	2300      	movs	r3, #0
 80047b8:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 80047ba:	2300      	movs	r3, #0
 80047bc:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80047ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047ce:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	791b      	ldrb	r3, [r3, #4]
 80047d4:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80047da:	4313      	orrs	r3, r2
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	4313      	orrs	r3, r2
 80047e0:	60fb      	str	r3, [r7, #12]
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	4b17      	ldr	r3, [pc, #92]	; (8004850 <ADC_Init+0xa4>)
 80047f2:	4013      	ands	r3, r2
 80047f4:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	68db      	ldr	r3, [r3, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80047fe:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	689b      	ldr	r3, [r3, #8]
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8004804:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	795b      	ldrb	r3, [r3, #5]
 800480a:	005b      	lsls	r3, r3, #1
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800480c:	4313      	orrs	r3, r2
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	4313      	orrs	r3, r2
 8004812:	60fb      	str	r3, [r7, #12]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481e:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004826:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	7d1b      	ldrb	r3, [r3, #20]
 800482c:	3b01      	subs	r3, #1
 800482e:	b2da      	uxtb	r2, r3
 8004830:	7afb      	ldrb	r3, [r7, #11]
 8004832:	4313      	orrs	r3, r2
 8004834:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8004836:	7afb      	ldrb	r3, [r7, #11]
 8004838:	051b      	lsls	r3, r3, #20
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	4313      	orrs	r3, r2
 800483e:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004846:	3714      	adds	r7, #20
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	c0fff7fd 	.word	0xc0fff7fd

08004854 <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	751a      	strb	r2, [r3, #20]
}
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 8004898:	2300      	movs	r3, #0
 800489a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 800489c:	4b0e      	ldr	r3, [pc, #56]	; (80048d8 <ADC_CommonInit+0x48>)
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	4b0d      	ldr	r3, [pc, #52]	; (80048dc <ADC_CommonInit+0x4c>)
 80048a6:	4013      	ands	r3, r2
 80048a8:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 80048b2:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689b      	ldr	r3, [r3, #8]
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
 80048b8:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68db      	ldr	r3, [r3, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 80048be:	4313      	orrs	r3, r2
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	60fb      	str	r3, [r7, #12]
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 80048c6:	4b04      	ldr	r3, [pc, #16]	; (80048d8 <ADC_CommonInit+0x48>)
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	605a      	str	r2, [r3, #4]
}
 80048cc:	3714      	adds	r7, #20
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	40012300 	.word	0x40012300
 80048dc:	fffc30e0 	.word	0xfffc30e0

080048e0 <ADC_CommonStructInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_Prescaler member */
  ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	605a      	str	r2, [r3, #4]

  /* Initialize the ADC_DMAAccessMode member */
  ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_TwoSamplingDelay member */
  ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	60da      	str	r2, [r3, #12]
}
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop

0800490c <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	460b      	mov	r3, r1
 8004916:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004918:	78fb      	ldrb	r3, [r7, #3]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d006      	beq.n	800492c <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f043 0201 	orr.w	r2, r3, #1
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	609a      	str	r2, [r3, #8]
 800492a:	e005      	b.n	8004938 <ADC_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f023 0201 	bic.w	r2, r3, #1
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	609a      	str	r2, [r3, #8]
  }
}
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop

08004944 <ADC_AnalogWatchdogCmd>:
  *            @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and injected channels
  *            @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
  * @retval None	  
  */
void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
{
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800494e:	2300      	movs	r3, #0
 8004950:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
  
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	60fb      	str	r3, [r7, #12]
  
  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  tmpreg &= CR1_AWDMode_RESET;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800495e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004962:	60fb      	str	r3, [r7, #12]
  
  /* Set the analog watchdog enable mode */
  tmpreg |= ADC_AnalogWatchdog;
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	4313      	orrs	r3, r2
 800496a:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	605a      	str	r2, [r3, #4]
}
 8004972:	3714      	adds	r7, #20
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <ADC_AnalogWatchdogThresholdsConfig>:
  *          This parameter must be a 12-bit value.
  * @retval None
  */
void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
                                        uint16_t LowThreshold)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	4613      	mov	r3, r2
 8004986:	460a      	mov	r2, r1
 8004988:	807a      	strh	r2, [r7, #2]
 800498a:	803b      	strh	r3, [r7, #0]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));
  
  /* Set the ADCx high threshold */
  ADCx->HTR = HighThreshold;
 800498c:	887a      	ldrh	r2, [r7, #2]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the ADCx low threshold */
  ADCx->LTR = LowThreshold;
 8004992:	883a      	ldrh	r2, [r7, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop

080049a4 <ADC_AnalogWatchdogSingleChannelConfig>:
  *            @arg ADC_Channel_17: ADC Channel17 selected
  *            @arg ADC_Channel_18: ADC Channel18 selected
  * @retval None
  */
void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	460b      	mov	r3, r1
 80049ae:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 80049b0:	2300      	movs	r3, #0
 80049b2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	60fb      	str	r3, [r7, #12]
  
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= CR1_AWDCH_RESET;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f023 031f 	bic.w	r3, r3, #31
 80049c0:	60fb      	str	r3, [r7, #12]
  
  /* Set the Analog watchdog channel */
  tmpreg |= ADC_Channel;
 80049c2:	78fb      	ldrb	r3, [r7, #3]
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	605a      	str	r2, [r3, #4]
}
 80049d0:	3714      	adds	r7, #20
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop

080049dc <ADC_TempSensorVrefintCmd>:
  * @param  NewState: new state of the temperature sensor and Vrefint channels.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	4603      	mov	r3, r0
 80049e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80049e6:	79fb      	ldrb	r3, [r7, #7]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d006      	beq.n	80049fa <ADC_TempSensorVrefintCmd+0x1e>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 80049ec:	4b08      	ldr	r3, [pc, #32]	; (8004a10 <ADC_TempSensorVrefintCmd+0x34>)
 80049ee:	4a08      	ldr	r2, [pc, #32]	; (8004a10 <ADC_TempSensorVrefintCmd+0x34>)
 80049f0:	6852      	ldr	r2, [r2, #4]
 80049f2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80049f6:	605a      	str	r2, [r3, #4]
 80049f8:	e005      	b.n	8004a06 <ADC_TempSensorVrefintCmd+0x2a>
  }
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 80049fa:	4b05      	ldr	r3, [pc, #20]	; (8004a10 <ADC_TempSensorVrefintCmd+0x34>)
 80049fc:	4a04      	ldr	r2, [pc, #16]	; (8004a10 <ADC_TempSensorVrefintCmd+0x34>)
 80049fe:	6852      	ldr	r2, [r2, #4]
 8004a00:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8004a04:	605a      	str	r2, [r3, #4]
  }
}
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr
 8004a10:	40012300 	.word	0x40012300

08004a14 <ADC_VBATCmd>:
  * @param  NewState: new state of the VBAT channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_VBATCmd(FunctionalState NewState)                             
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004a1e:	79fb      	ldrb	r3, [r7, #7]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d006      	beq.n	8004a32 <ADC_VBATCmd+0x1e>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_VBATE;
 8004a24:	4b08      	ldr	r3, [pc, #32]	; (8004a48 <ADC_VBATCmd+0x34>)
 8004a26:	4a08      	ldr	r2, [pc, #32]	; (8004a48 <ADC_VBATCmd+0x34>)
 8004a28:	6852      	ldr	r2, [r2, #4]
 8004a2a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004a2e:	605a      	str	r2, [r3, #4]
 8004a30:	e005      	b.n	8004a3e <ADC_VBATCmd+0x2a>
  }
  else
  {
    /* Disable the VBAT channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_VBATE);
 8004a32:	4b05      	ldr	r3, [pc, #20]	; (8004a48 <ADC_VBATCmd+0x34>)
 8004a34:	4a04      	ldr	r2, [pc, #16]	; (8004a48 <ADC_VBATCmd+0x34>)
 8004a36:	6852      	ldr	r2, [r2, #4]
 8004a38:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8004a3c:	605a      	str	r2, [r3, #4]
  }
}
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr
 8004a48:	40012300 	.word	0x40012300

08004a4c <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	70f9      	strb	r1, [r7, #3]
 8004a56:	70ba      	strb	r2, [r7, #2]
 8004a58:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	60fb      	str	r3, [r7, #12]
 8004a5e:	2300      	movs	r3, #0
 8004a60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8004a62:	78fb      	ldrb	r3, [r7, #3]
 8004a64:	2b09      	cmp	r3, #9
 8004a66:	d923      	bls.n	8004ab0 <ADC_RegularChannelConfig+0x64>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8004a6e:	78fb      	ldrb	r3, [r7, #3]
 8004a70:	f1a3 020a 	sub.w	r2, r3, #10
 8004a74:	4613      	mov	r3, r2
 8004a76:	005b      	lsls	r3, r3, #1
 8004a78:	4413      	add	r3, r2
 8004a7a:	2207      	movs	r2, #7
 8004a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a80:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	43db      	mvns	r3, r3
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	4013      	ands	r3, r2
 8004a8a:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8004a8c:	7879      	ldrb	r1, [r7, #1]
 8004a8e:	78fb      	ldrb	r3, [r7, #3]
 8004a90:	f1a3 020a 	sub.w	r2, r3, #10
 8004a94:	4613      	mov	r3, r2
 8004a96:	005b      	lsls	r3, r3, #1
 8004a98:	4413      	add	r3, r2
 8004a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a9e:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	60da      	str	r2, [r3, #12]
 8004aae:	e01e      	b.n	8004aee <ADC_RegularChannelConfig+0xa2>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8004ab6:	78fa      	ldrb	r2, [r7, #3]
 8004ab8:	4613      	mov	r3, r2
 8004aba:	005b      	lsls	r3, r3, #1
 8004abc:	4413      	add	r3, r2
 8004abe:	2207      	movs	r2, #7
 8004ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac4:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	43db      	mvns	r3, r3
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	4013      	ands	r3, r2
 8004ace:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8004ad0:	7879      	ldrb	r1, [r7, #1]
 8004ad2:	78fa      	ldrb	r2, [r7, #3]
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	005b      	lsls	r3, r3, #1
 8004ad8:	4413      	add	r3, r2
 8004ada:	fa01 f303 	lsl.w	r3, r1, r3
 8004ade:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8004aee:	78bb      	ldrb	r3, [r7, #2]
 8004af0:	2b06      	cmp	r3, #6
 8004af2:	d821      	bhi.n	8004b38 <ADC_RegularChannelConfig+0xec>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004af8:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8004afa:	78bb      	ldrb	r3, [r7, #2]
 8004afc:	1e5a      	subs	r2, r3, #1
 8004afe:	4613      	mov	r3, r2
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	4413      	add	r3, r2
 8004b04:	221f      	movs	r2, #31
 8004b06:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0a:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	43db      	mvns	r3, r3
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	4013      	ands	r3, r2
 8004b14:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8004b16:	78f9      	ldrb	r1, [r7, #3]
 8004b18:	78bb      	ldrb	r3, [r7, #2]
 8004b1a:	1e5a      	subs	r2, r3, #1
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4413      	add	r3, r2
 8004b22:	fa01 f303 	lsl.w	r3, r1, r3
 8004b26:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	635a      	str	r2, [r3, #52]	; 0x34
 8004b36:	e047      	b.n	8004bc8 <ADC_RegularChannelConfig+0x17c>
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8004b38:	78bb      	ldrb	r3, [r7, #2]
 8004b3a:	2b0c      	cmp	r3, #12
 8004b3c:	d821      	bhi.n	8004b82 <ADC_RegularChannelConfig+0x136>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b42:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8004b44:	78bb      	ldrb	r3, [r7, #2]
 8004b46:	1fda      	subs	r2, r3, #7
 8004b48:	4613      	mov	r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	4413      	add	r3, r2
 8004b4e:	221f      	movs	r2, #31
 8004b50:	fa02 f303 	lsl.w	r3, r2, r3
 8004b54:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	43db      	mvns	r3, r3
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8004b60:	78f9      	ldrb	r1, [r7, #3]
 8004b62:	78bb      	ldrb	r3, [r7, #2]
 8004b64:	1fda      	subs	r2, r3, #7
 8004b66:	4613      	mov	r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4413      	add	r3, r2
 8004b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b70:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	631a      	str	r2, [r3, #48]	; 0x30
 8004b80:	e022      	b.n	8004bc8 <ADC_RegularChannelConfig+0x17c>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b86:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8004b88:	78bb      	ldrb	r3, [r7, #2]
 8004b8a:	f1a3 020d 	sub.w	r2, r3, #13
 8004b8e:	4613      	mov	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	221f      	movs	r2, #31
 8004b96:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9a:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	43db      	mvns	r3, r3
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8004ba6:	78f9      	ldrb	r1, [r7, #3]
 8004ba8:	78bb      	ldrb	r3, [r7, #2]
 8004baa:	f1a3 020d 	sub.w	r2, r3, #13
 8004bae:	4613      	mov	r3, r2
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	4413      	add	r3, r2
 8004bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8004bb8:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8004bc8:	3714      	adds	r7, #20
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop

08004bd4 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	609a      	str	r2, [r3, #8]
}
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop

08004bf4 <ADC_GetSoftwareStartConvStatus>:
  * @brief  Gets the selected ADC Software start regular conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Check the status of SWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d002      	beq.n	8004c12 <ADC_GetSoftwareStartConvStatus+0x1e>
  {
    /* SWSTART bit is set */
    bitstatus = SET;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	73fb      	strb	r3, [r7, #15]
 8004c10:	e001      	b.n	8004c16 <ADC_GetSoftwareStartConvStatus+0x22>
  }
  else
  {
    /* SWSTART bit is reset */
    bitstatus = RESET;
 8004c12:	2300      	movs	r3, #0
 8004c14:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the SWSTART bit status */
  return  bitstatus;
 8004c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3714      	adds	r7, #20
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <ADC_EOCOnEachRegularChannelCmd>:
  * @param  NewState: new state of the selected ADC EOC flag rising
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_EOCOnEachRegularChannelCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004c30:	78fb      	ldrb	r3, [r7, #3]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d006      	beq.n	8004c44 <ADC_EOCOnEachRegularChannelCmd+0x20>
  {
    /* Enable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	609a      	str	r2, [r3, #8]
 8004c42:	e005      	b.n	8004c50 <ADC_EOCOnEachRegularChannelCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	609a      	str	r2, [r3, #8]
  }
}
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop

08004c5c <ADC_ContinuousModeCmd>:
  * @param  NewState: new state of the selected ADC continuous conversion mode
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ContinuousModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	460b      	mov	r3, r1
 8004c66:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004c68:	78fb      	ldrb	r3, [r7, #3]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d006      	beq.n	8004c7c <ADC_ContinuousModeCmd+0x20>
  {
    /* Enable the selected ADC continuous conversion mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f043 0202 	orr.w	r2, r3, #2
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	609a      	str	r2, [r3, #8]
 8004c7a:	e005      	b.n	8004c88 <ADC_ContinuousModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC continuous conversion mode */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f023 0202 	bic.w	r2, r3, #2
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	609a      	str	r2, [r3, #8]
  }
}
 8004c88:	370c      	adds	r7, #12
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop

08004c94 <ADC_DiscModeChannelCountConfig>:
  * @param  Number: specifies the discontinuous mode regular channel count value.
  *          This number must be between 1 and 8.
  * @retval None
  */
void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
  
  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_RESET;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004cb4:	60fb      	str	r3, [r7, #12]
  
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
 8004cb6:	78fb      	ldrb	r3, [r7, #3]
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 13;
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	035b      	lsls	r3, r3, #13
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg1;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	605a      	str	r2, [r3, #4]
}
 8004ccc:	3714      	adds	r7, #20
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop

08004cd8 <ADC_DiscModeCmd>:
  *         regular group channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004ce4:	78fb      	ldrb	r3, [r7, #3]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d006      	beq.n	8004cf8 <ADC_DiscModeCmd+0x20>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	605a      	str	r2, [r3, #4]
 8004cf6:	e005      	b.n	8004d04 <ADC_DiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	605a      	str	r2, [r3, #4]
  }
}
 8004d04:	370c      	adds	r7, #12
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop

08004d10 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d1c:	b29b      	uxth	r3, r3
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	370c      	adds	r7, #12
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop

08004d2c <ADC_GetMultiModeConversionValue>:
  * @note   In triple mode, the value returned by this function is as following
  *           Data[15:0] : these bits contain alternatively the regular data of ADC1, ADC3 and ADC2.
  *           Data[31:16]: these bits contain alternatively the regular data of ADC2, ADC1 and ADC3.           
  */
uint32_t ADC_GetMultiModeConversionValue(void)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	af00      	add	r7, sp, #0
  /* Return the multi mode conversion value */
  return (*(__IO uint32_t *) CDR_ADDRESS);
 8004d30:	4b03      	ldr	r3, [pc, #12]	; (8004d40 <ADC_GetMultiModeConversionValue+0x14>)
 8004d32:	681b      	ldr	r3, [r3, #0]
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	40012308 	.word	0x40012308

08004d44 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004d50:	78fb      	ldrb	r3, [r7, #3]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d006      	beq.n	8004d64 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	609a      	str	r2, [r3, #8]
 8004d62:	e005      	b.n	8004d70 <ADC_DMACmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	609a      	str	r2, [r3, #8]
  }
}
 8004d70:	370c      	adds	r7, #12
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop

08004d7c <ADC_DMARequestAfterLastTransferCmd>:
  * @param  NewState: new state of the selected ADC DMA request after last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	460b      	mov	r3, r1
 8004d86:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004d88:	78fb      	ldrb	r3, [r7, #3]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d006      	beq.n	8004d9c <ADC_DMARequestAfterLastTransferCmd+0x20>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	609a      	str	r2, [r3, #8]
 8004d9a:	e005      	b.n	8004da8 <ADC_DMARequestAfterLastTransferCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	609a      	str	r2, [r3, #8]
  }
}
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop

08004db4 <ADC_MultiModeDMARequestAfterLastTransferCmd>:
  *         by ADC_CommonInitStruct.ADC_DMAAccessMode structure member) is 
  *          ADC_DMAAccessMode_1, ADC_DMAAccessMode_2 or ADC_DMAAccessMode_3.     
  * @retval None
  */
void ADC_MultiModeDMARequestAfterLastTransferCmd(FunctionalState NewState)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	4603      	mov	r3, r0
 8004dbc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004dbe:	79fb      	ldrb	r3, [r7, #7]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d006      	beq.n	8004dd2 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x1e>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 8004dc4:	4b08      	ldr	r3, [pc, #32]	; (8004de8 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x34>)
 8004dc6:	4a08      	ldr	r2, [pc, #32]	; (8004de8 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x34>)
 8004dc8:	6852      	ldr	r2, [r2, #4]
 8004dca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004dce:	605a      	str	r2, [r3, #4]
 8004dd0:	e005      	b.n	8004dde <ADC_MultiModeDMARequestAfterLastTransferCmd+0x2a>
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
 8004dd2:	4b05      	ldr	r3, [pc, #20]	; (8004de8 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x34>)
 8004dd4:	4a04      	ldr	r2, [pc, #16]	; (8004de8 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x34>)
 8004dd6:	6852      	ldr	r2, [r2, #4]
 8004dd8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ddc:	605a      	str	r2, [r3, #4]
  }
}
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr
 8004de8:	40012300 	.word	0x40012300

08004dec <ADC_InjectedChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b087      	sub	sp, #28
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	70f9      	strb	r1, [r7, #3]
 8004df6:	70ba      	strb	r2, [r7, #2]
 8004df8:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	617b      	str	r3, [r7, #20]
 8004dfe:	2300      	movs	r3, #0
 8004e00:	613b      	str	r3, [r7, #16]
 8004e02:	2300      	movs	r3, #0
 8004e04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8004e06:	78fb      	ldrb	r3, [r7, #3]
 8004e08:	2b09      	cmp	r3, #9
 8004e0a:	d923      	bls.n	8004e54 <ADC_InjectedChannelConfig+0x68>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 8004e12:	78fb      	ldrb	r3, [r7, #3]
 8004e14:	f1a3 020a 	sub.w	r2, r3, #10
 8004e18:	4613      	mov	r3, r2
 8004e1a:	005b      	lsls	r3, r3, #1
 8004e1c:	4413      	add	r3, r2
 8004e1e:	2207      	movs	r2, #7
 8004e20:	fa02 f303 	lsl.w	r3, r2, r3
 8004e24:	613b      	str	r3, [r7, #16]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	43db      	mvns	r3, r3
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 8004e30:	7879      	ldrb	r1, [r7, #1]
 8004e32:	78fb      	ldrb	r3, [r7, #3]
 8004e34:	f1a3 020a 	sub.w	r2, r3, #10
 8004e38:	4613      	mov	r3, r2
 8004e3a:	005b      	lsls	r3, r3, #1
 8004e3c:	4413      	add	r3, r2
 8004e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e42:	613b      	str	r3, [r7, #16]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	60da      	str	r2, [r3, #12]
 8004e52:	e01e      	b.n	8004e92 <ADC_InjectedChannelConfig+0xa6>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8004e5a:	78fa      	ldrb	r2, [r7, #3]
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	005b      	lsls	r3, r3, #1
 8004e60:	4413      	add	r3, r2
 8004e62:	2207      	movs	r2, #7
 8004e64:	fa02 f303 	lsl.w	r3, r2, r3
 8004e68:	613b      	str	r3, [r7, #16]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	43db      	mvns	r3, r3
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	4013      	ands	r3, r2
 8004e72:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8004e74:	7879      	ldrb	r1, [r7, #1]
 8004e76:	78fa      	ldrb	r2, [r7, #3]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	005b      	lsls	r3, r3, #1
 8004e7c:	4413      	add	r3, r2
 8004e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e82:	613b      	str	r3, [r7, #16]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	611a      	str	r2, [r3, #16]
  }
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e96:	617b      	str	r3, [r7, #20]
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004e9e:	0d1b      	lsrs	r3, r3, #20
 8004ea0:	60fb      	str	r3, [r7, #12]
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	78ba      	ldrb	r2, [r7, #2]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	3302      	adds	r3, #2
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	4413      	add	r3, r2
 8004eb8:	221f      	movs	r2, #31
 8004eba:	fa02 f303 	lsl.w	r3, r2, r3
 8004ebe:	613b      	str	r3, [r7, #16]
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	43db      	mvns	r3, r3
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	617b      	str	r3, [r7, #20]
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 8004eca:	78f9      	ldrb	r1, [r7, #3]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	78ba      	ldrb	r2, [r7, #2]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	3302      	adds	r3, #2
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	461a      	mov	r2, r3
 8004edc:	4613      	mov	r3, r2
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	4413      	add	r3, r2
 8004ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ee6:	613b      	str	r3, [r7, #16]
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	617b      	str	r3, [r7, #20]
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004ef6:	371c      	adds	r7, #28
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <ADC_InjectedSequencerLengthConfig>:
  * @param  Length: The sequencer length. 
  *          This parameter must be a number between 1 to 4.
  * @retval None
  */
void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b085      	sub	sp, #20
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	460b      	mov	r3, r1
 8004f0a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 8004f10:	2300      	movs	r3, #0
 8004f12:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f18:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old injected sequence length JL bits */
  tmpreg1 &= JSQR_JL_RESET;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004f20:	60fb      	str	r3, [r7, #12]
  
  /* Set the injected sequence length JL bits */
  tmpreg2 = Length - 1; 
 8004f22:	78fb      	ldrb	r3, [r7, #3]
 8004f24:	3b01      	subs	r3, #1
 8004f26:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 20;
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	051b      	lsls	r3, r3, #20
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004f38:	3714      	adds	r7, #20
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop

08004f44 <ADC_SetInjectedOffset>:
  * @param  Offset: the offset value for the selected ADC injected channel
  *          This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	460a      	mov	r2, r1
 8004f50:	70fa      	strb	r2, [r7, #3]
 8004f52:	803b      	strh	r3, [r7, #0]
    __IO uint32_t tmp = 0;
 8004f54:	2300      	movs	r3, #0
 8004f56:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_OFFSET(Offset));
  
  tmp = (uint32_t)ADCx;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel;
 8004f5c:	78fa      	ldrb	r2, [r7, #3]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	4413      	add	r3, r2
 8004f62:	60fb      	str	r3, [r7, #12]
  
  /* Set the selected injected channel data offset */
 *(__IO uint32_t *) tmp = (uint32_t)Offset;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	883a      	ldrh	r2, [r7, #0]
 8004f68:	601a      	str	r2, [r3, #0]
}
 8004f6a:	3714      	adds	r7, #20
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <ADC_ExternalTrigInjectedConvConfig>:
  *            @arg ADC_ExternalTrigInjecConv_T8_CC4: Timer8 capture compare4 selected 
  *            @arg ADC_ExternalTrigInjecConv_Ext_IT15: External interrupt line 15 event selected                          
  * @retval None
  */
void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
  
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old external event selection for injected group */
  tmpreg &= CR2_JEXTSEL_RESET;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8004f8e:	60fb      	str	r3, [r7, #12]
  
  /* Set the external event selection for injected group */
  tmpreg |= ADC_ExternalTrigInjecConv;
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	609a      	str	r2, [r3, #8]
}
 8004f9e:	3714      	adds	r7, #20
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <ADC_ExternalTrigInjectedConvEdgeConfig>:
  *            @arg ADC_ExternalTrigInjecConvEdge_RisingFalling: detection on both rising 
  *                                                               and falling edge
  * @retval None
  */
void ADC_ExternalTrigInjectedConvEdgeConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConvEdge)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(ADC_ExternalTrigInjecConvEdge));
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	60fb      	str	r3, [r7, #12]
  /* Clear the old external trigger edge for injected group */
  tmpreg &= CR2_JEXTEN_RESET;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004fc2:	60fb      	str	r3, [r7, #12]
  /* Set the new external trigger edge for injected group */
  tmpreg |= ADC_ExternalTrigInjecConvEdge;
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	609a      	str	r2, [r3, #8]
}
 8004fd2:	3714      	adds	r7, #20
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <ADC_SoftwareStartInjectedConv>:
  * @brief  Enables the selected ADC software start conversion of the injected channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartInjectedConv(ADC_TypeDef* ADCx)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC conversion for injected group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_JSWSTART;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	609a      	str	r2, [r3, #8]
}
 8004ff0:	370c      	adds	r7, #12
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop

08004ffc <ADC_GetSoftwareStartInjectedConvCmdStatus>:
  * @brief  Gets the selected ADC Software start injected conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start injected conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8005004:	2300      	movs	r3, #0
 8005006:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Check the status of JSWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d002      	beq.n	800501a <ADC_GetSoftwareStartInjectedConvCmdStatus+0x1e>
  {
    /* JSWSTART bit is set */
    bitstatus = SET;
 8005014:	2301      	movs	r3, #1
 8005016:	73fb      	strb	r3, [r7, #15]
 8005018:	e001      	b.n	800501e <ADC_GetSoftwareStartInjectedConvCmdStatus+0x22>
  }
  else
  {
    /* JSWSTART bit is reset */
    bitstatus = RESET;
 800501a:	2300      	movs	r3, #0
 800501c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the JSWSTART bit status */
  return  bitstatus;
 800501e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005020:	4618      	mov	r0, r3
 8005022:	3714      	adds	r7, #20
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <ADC_AutoInjectedConvCmd>:
  * @param  NewState: new state of the selected ADC auto injected conversion
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	460b      	mov	r3, r1
 8005036:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005038:	78fb      	ldrb	r3, [r7, #3]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d006      	beq.n	800504c <ADC_AutoInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	605a      	str	r2, [r3, #4]
 800504a:	e005      	b.n	8005058 <ADC_AutoInjectedConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JAUTO);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	605a      	str	r2, [r3, #4]
  }
}
 8005058:	370c      	adds	r7, #12
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop

08005064 <ADC_InjectedDiscModeCmd>:
  *         group channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	460b      	mov	r3, r1
 800506e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005070:	78fb      	ldrb	r3, [r7, #3]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d006      	beq.n	8005084 <ADC_InjectedDiscModeCmd+0x20>
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	605a      	str	r2, [r3, #4]
 8005082:	e005      	b.n	8005090 <ADC_InjectedDiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JDISCEN);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	605a      	str	r2, [r3, #4]
  }
}
 8005090:	370c      	adds	r7, #12
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop

0800509c <ADC_GetInjectedConversionValue>:
  *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
  *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	460b      	mov	r3, r1
 80050a6:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
 80050a8:	2300      	movs	r3, #0
 80050aa:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  tmp = (uint32_t)ADCx;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel + JDR_OFFSET;
 80050b0:	78fa      	ldrb	r2, [r7, #3]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	4413      	add	r3, r2
 80050b6:	3328      	adds	r3, #40	; 0x28
 80050b8:	60fb      	str	r3, [r7, #12]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp); 
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	b29b      	uxth	r3, r3
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3714      	adds	r7, #20
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <ADC_ITConfig>:
  * @param  NewState: new state of the specified ADC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)  
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	4613      	mov	r3, r2
 80050d6:	460a      	mov	r2, r1
 80050d8:	807a      	strh	r2, [r7, #2]
 80050da:	707b      	strb	r3, [r7, #1]
  uint32_t itmask = 0;
 80050dc:	2300      	movs	r3, #0
 80050de:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT)); 

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
 80050e0:	887b      	ldrh	r3, [r7, #2]
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	60fb      	str	r3, [r7, #12]
  itmask = (uint32_t)0x01 << itmask;    
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2201      	movs	r2, #1
 80050ea:	fa02 f303 	lsl.w	r3, r2, r3
 80050ee:	60fb      	str	r3, [r7, #12]

  if (NewState != DISABLE)
 80050f0:	787b      	ldrb	r3, [r7, #1]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d006      	beq.n	8005104 <ADC_ITConfig+0x38>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	431a      	orrs	r2, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	605a      	str	r2, [r3, #4]
 8005102:	e006      	b.n	8005112 <ADC_ITConfig+0x46>
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685a      	ldr	r2, [r3, #4]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	43db      	mvns	r3, r3
 800510c:	401a      	ands	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	605a      	str	r2, [r3, #4]
  }
}
 8005112:	3714      	adds	r7, #20
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <ADC_GetFlagStatus>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                                                 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	460b      	mov	r3, r1
 8005126:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
 8005128:	2300      	movs	r3, #0
 800512a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	78fb      	ldrb	r3, [r7, #3]
 8005132:	4013      	ands	r3, r2
 8005134:	2b00      	cmp	r3, #0
 8005136:	d002      	beq.n	800513e <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 8005138:	2301      	movs	r3, #1
 800513a:	73fb      	strb	r3, [r7, #15]
 800513c:	e001      	b.n	8005142 <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 800513e:	2300      	movs	r3, #0
 8005140:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8005142:	7bfb      	ldrb	r3, [r7, #15]
}
 8005144:	4618      	mov	r0, r3
 8005146:	3714      	adds	r7, #20
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <ADC_ClearFlag>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                          
  * @retval None
  */
void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	460b      	mov	r3, r1
 800515a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));

  /* Clear the selected ADC flags */
  ADCx->SR = ~(uint32_t)ADC_FLAG;
 800515c:	78fb      	ldrb	r3, [r7, #3]
 800515e:	43da      	mvns	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	601a      	str	r2, [r3, #0]
}
 8005164:	370c      	adds	r7, #12
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr
 800516e:	bf00      	nop

08005170 <ADC_GetITStatus>:
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                        
  * @retval The new state of ADC_IT (SET or RESET).
  */
ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 8005170:	b480      	push	{r7}
 8005172:	b087      	sub	sp, #28
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	460b      	mov	r3, r1
 800517a:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;
 800517c:	2300      	movs	r3, #0
 800517e:	75fb      	strb	r3, [r7, #23]
  uint32_t itmask = 0, enablestatus = 0;
 8005180:	2300      	movs	r3, #0
 8005182:	613b      	str	r3, [r7, #16]
 8005184:	2300      	movs	r3, #0
 8005186:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT));

  /* Get the ADC IT index */
  itmask = ADC_IT >> 8;
 8005188:	887b      	ldrh	r3, [r7, #2]
 800518a:	0a1b      	lsrs	r3, r3, #8
 800518c:	b29b      	uxth	r3, r3
 800518e:	613b      	str	r3, [r7, #16]

  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)) ;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685a      	ldr	r2, [r3, #4]
 8005194:	887b      	ldrh	r3, [r7, #2]
 8005196:	b2db      	uxtb	r3, r3
 8005198:	2101      	movs	r1, #1
 800519a:	fa01 f303 	lsl.w	r3, r1, r3
 800519e:	4013      	ands	r3, r2
 80051a0:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified ADC interrupt */
  if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	4013      	ands	r3, r2
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d005      	beq.n	80051ba <ADC_GetITStatus+0x4a>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d002      	beq.n	80051ba <ADC_GetITStatus+0x4a>
  {
    /* ADC_IT is set */
    bitstatus = SET;
 80051b4:	2301      	movs	r3, #1
 80051b6:	75fb      	strb	r3, [r7, #23]
 80051b8:	e001      	b.n	80051be <ADC_GetITStatus+0x4e>
  }
  else
  {
    /* ADC_IT is reset */
    bitstatus = RESET;
 80051ba:	2300      	movs	r3, #0
 80051bc:	75fb      	strb	r3, [r7, #23]
  }
  /* Return the ADC_IT status */
  return  bitstatus;
 80051be:	7dfb      	ldrb	r3, [r7, #23]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	371c      	adds	r7, #28
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <ADC_ClearITPendingBit>:
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                         
  * @retval None
  */
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	460b      	mov	r3, r1
 80051d6:	807b      	strh	r3, [r7, #2]
  uint8_t itmask = 0;
 80051d8:	2300      	movs	r3, #0
 80051da:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT)); 
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
 80051dc:	887b      	ldrh	r3, [r7, #2]
 80051de:	0a1b      	lsrs	r3, r3, #8
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	73fb      	strb	r3, [r7, #15]
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
 80051e4:	7bfb      	ldrb	r3, [r7, #15]
 80051e6:	43da      	mvns	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	601a      	str	r2, [r3, #0]
}                    
 80051ec:	3714      	adds	r7, #20
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop

080051f8 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8005200:	4a05      	ldr	r2, [pc, #20]	; (8005218 <NVIC_PriorityGroupConfig+0x20>)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800520c:	60d3      	str	r3, [r2, #12]
}
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr
 8005218:	e000ed00 	.word	0xe000ed00

0800521c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800521c:	b480      	push	{r7}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8005224:	2300      	movs	r3, #0
 8005226:	73fb      	strb	r3, [r7, #15]
 8005228:	2300      	movs	r3, #0
 800522a:	73bb      	strb	r3, [r7, #14]
 800522c:	230f      	movs	r3, #15
 800522e:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	78db      	ldrb	r3, [r3, #3]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d037      	beq.n	80052a8 <NVIC_Init+0x8c>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8005238:	4b25      	ldr	r3, [pc, #148]	; (80052d0 <NVIC_Init+0xb4>)
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	43db      	mvns	r3, r3
 800523e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005242:	0a1b      	lsrs	r3, r3, #8
 8005244:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8005246:	7bfb      	ldrb	r3, [r7, #15]
 8005248:	f1c3 0304 	rsb	r3, r3, #4
 800524c:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 800524e:	7b7a      	ldrb	r2, [r7, #13]
 8005250:	7bfb      	ldrb	r3, [r7, #15]
 8005252:	fa42 f303 	asr.w	r3, r2, r3
 8005256:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	785b      	ldrb	r3, [r3, #1]
 800525c:	461a      	mov	r2, r3
 800525e:	7bbb      	ldrb	r3, [r7, #14]
 8005260:	fa02 f303 	lsl.w	r3, r2, r3
 8005264:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	789a      	ldrb	r2, [r3, #2]
 800526a:	7b7b      	ldrb	r3, [r7, #13]
 800526c:	4013      	ands	r3, r2
 800526e:	b2da      	uxtb	r2, r3
 8005270:	7bfb      	ldrb	r3, [r7, #15]
 8005272:	4313      	orrs	r3, r2
 8005274:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8005276:	7bfb      	ldrb	r3, [r7, #15]
 8005278:	011b      	lsls	r3, r3, #4
 800527a:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800527c:	4a15      	ldr	r2, [pc, #84]	; (80052d4 <NVIC_Init+0xb8>)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	4413      	add	r3, r2
 8005284:	7bfa      	ldrb	r2, [r7, #15]
 8005286:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800528a:	4b12      	ldr	r3, [pc, #72]	; (80052d4 <NVIC_Init+0xb8>)
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	7812      	ldrb	r2, [r2, #0]
 8005290:	0952      	lsrs	r2, r2, #5
 8005292:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8005294:	6879      	ldr	r1, [r7, #4]
 8005296:	7809      	ldrb	r1, [r1, #0]
 8005298:	f001 011f 	and.w	r1, r1, #31
 800529c:	2001      	movs	r0, #1
 800529e:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80052a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80052a6:	e00e      	b.n	80052c6 <NVIC_Init+0xaa>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80052a8:	4b0a      	ldr	r3, [pc, #40]	; (80052d4 <NVIC_Init+0xb8>)
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	7812      	ldrb	r2, [r2, #0]
 80052ae:	0952      	lsrs	r2, r2, #5
 80052b0:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80052b2:	6879      	ldr	r1, [r7, #4]
 80052b4:	7809      	ldrb	r1, [r1, #0]
 80052b6:	f001 011f 	and.w	r1, r1, #31
 80052ba:	2001      	movs	r0, #1
 80052bc:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80052c0:	3220      	adds	r2, #32
 80052c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80052c6:	3714      	adds	r7, #20
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr
 80052d0:	e000ed00 	.word	0xe000ed00
 80052d4:	e000e100 	.word	0xe000e100

080052d8 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 80052e2:	4a07      	ldr	r2, [pc, #28]	; (8005300 <NVIC_SetVectorTable+0x28>)
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80052ea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80052ee:	6879      	ldr	r1, [r7, #4]
 80052f0:	430b      	orrs	r3, r1
 80052f2:	6093      	str	r3, [r2, #8]
}
 80052f4:	370c      	adds	r7, #12
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	e000ed00 	.word	0xe000ed00

08005304 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	4602      	mov	r2, r0
 800530c:	460b      	mov	r3, r1
 800530e:	71fa      	strb	r2, [r7, #7]
 8005310:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8005312:	79bb      	ldrb	r3, [r7, #6]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d006      	beq.n	8005326 <NVIC_SystemLPConfig+0x22>
  {
    SCB->SCR |= LowPowerMode;
 8005318:	4b09      	ldr	r3, [pc, #36]	; (8005340 <NVIC_SystemLPConfig+0x3c>)
 800531a:	4a09      	ldr	r2, [pc, #36]	; (8005340 <NVIC_SystemLPConfig+0x3c>)
 800531c:	6911      	ldr	r1, [r2, #16]
 800531e:	79fa      	ldrb	r2, [r7, #7]
 8005320:	430a      	orrs	r2, r1
 8005322:	611a      	str	r2, [r3, #16]
 8005324:	e006      	b.n	8005334 <NVIC_SystemLPConfig+0x30>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8005326:	4b06      	ldr	r3, [pc, #24]	; (8005340 <NVIC_SystemLPConfig+0x3c>)
 8005328:	4a05      	ldr	r2, [pc, #20]	; (8005340 <NVIC_SystemLPConfig+0x3c>)
 800532a:	6911      	ldr	r1, [r2, #16]
 800532c:	79fa      	ldrb	r2, [r7, #7]
 800532e:	43d2      	mvns	r2, r2
 8005330:	400a      	ands	r2, r1
 8005332:	611a      	str	r2, [r3, #16]
  }
}
 8005334:	370c      	adds	r7, #12
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	e000ed00 	.word	0xe000ed00

08005344 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b04      	cmp	r3, #4
 8005350:	d106      	bne.n	8005360 <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8005352:	4b09      	ldr	r3, [pc, #36]	; (8005378 <SysTick_CLKSourceConfig+0x34>)
 8005354:	4a08      	ldr	r2, [pc, #32]	; (8005378 <SysTick_CLKSourceConfig+0x34>)
 8005356:	6812      	ldr	r2, [r2, #0]
 8005358:	f042 0204 	orr.w	r2, r2, #4
 800535c:	601a      	str	r2, [r3, #0]
 800535e:	e005      	b.n	800536c <SysTick_CLKSourceConfig+0x28>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8005360:	4b05      	ldr	r3, [pc, #20]	; (8005378 <SysTick_CLKSourceConfig+0x34>)
 8005362:	4a05      	ldr	r2, [pc, #20]	; (8005378 <SysTick_CLKSourceConfig+0x34>)
 8005364:	6812      	ldr	r2, [r2, #0]
 8005366:	f022 0204 	bic.w	r2, r2, #4
 800536a:	601a      	str	r2, [r3, #0]
  }
}
 800536c:	370c      	adds	r7, #12
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	e000e010 	.word	0xe000e010

0800537c <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b086      	sub	sp, #24
 8005380:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005382:	2300      	movs	r3, #0
 8005384:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005386:	f000 fac7 	bl	8005918 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800538a:	4b12      	ldr	r3, [pc, #72]	; (80053d4 <xTimerCreateTimerTask+0x58>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00e      	beq.n	80053b0 <xTimerCreateTimerTask+0x34>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 8005392:	2303      	movs	r3, #3
 8005394:	9300      	str	r3, [sp, #0]
 8005396:	2300      	movs	r3, #0
 8005398:	9301      	str	r3, [sp, #4]
 800539a:	2300      	movs	r3, #0
 800539c:	9302      	str	r3, [sp, #8]
 800539e:	2300      	movs	r3, #0
 80053a0:	9303      	str	r3, [sp, #12]
 80053a2:	480d      	ldr	r0, [pc, #52]	; (80053d8 <xTimerCreateTimerTask+0x5c>)
 80053a4:	490d      	ldr	r1, [pc, #52]	; (80053dc <xTimerCreateTimerTask+0x60>)
 80053a6:	2246      	movs	r2, #70	; 0x46
 80053a8:	2300      	movs	r3, #0
 80053aa:	f000 fb15 	bl	80059d8 <xTaskGenericCreate>
 80053ae:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d109      	bne.n	80053ca <xTimerCreateTimerTask+0x4e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80053b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ba:	f383 8811 	msr	BASEPRI, r3
 80053be:	f3bf 8f6f 	isb	sy
 80053c2:	f3bf 8f4f 	dsb	sy
 80053c6:	603b      	str	r3, [r7, #0]
 80053c8:	e7fe      	b.n	80053c8 <xTimerCreateTimerTask+0x4c>
	return xReturn;
 80053ca:	687b      	ldr	r3, [r7, #4]
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3708      	adds	r7, #8
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	20000094 	.word	0x20000094
 80053d8:	08005581 	.word	0x08005581
 80053dc:	08008fd4 	.word	0x08008fd4

080053e0 <xTimerCreate>:
/*-----------------------------------------------------------*/

TimerHandle_t xTimerCreate( const char * const pcTimerName, const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b086      	sub	sp, #24
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]
 80053ec:	603b      	str	r3, [r7, #0]
Timer_t *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d102      	bne.n	80053fa <xTimerCreate+0x1a>
	{
		pxNewTimer = NULL;
 80053f4:	2300      	movs	r3, #0
 80053f6:	617b      	str	r3, [r7, #20]
 80053f8:	e01c      	b.n	8005434 <xTimerCreate+0x54>
	}
	else
	{
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 80053fa:	2028      	movs	r0, #40	; 0x28
 80053fc:	f003 fb52 	bl	8008aa4 <pvPortMalloc>
 8005400:	6178      	str	r0, [r7, #20]
		if( pxNewTimer != NULL )
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d015      	beq.n	8005434 <xTimerCreate+0x54>
		{
			/* Ensure the infrastructure used by the timer service task has been
			created/initialised. */
			prvCheckForValidListAndQueue();
 8005408:	f000 fa86 	bl	8005918 <prvCheckForValidListAndQueue>

			/* Initialise the timer structure members using the function parameters. */
			pxNewTimer->pcTimerName = pcTimerName;
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	601a      	str	r2, [r3, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	68ba      	ldr	r2, [r7, #8]
 8005416:	619a      	str	r2, [r3, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	61da      	str	r2, [r3, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	683a      	ldr	r2, [r7, #0]
 8005422:	621a      	str	r2, [r3, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	6a3a      	ldr	r2, [r7, #32]
 8005428:	625a      	str	r2, [r3, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	3304      	adds	r3, #4
 800542e:	4618      	mov	r0, r3
 8005430:	f003 f8b6 	bl	80085a0 <vListInitialiseItem>
			traceTIMER_CREATE_FAILED();
		}
	}

	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d109      	bne.n	800544e <xTimerCreate+0x6e>
 800543a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800543e:	f383 8811 	msr	BASEPRI, r3
 8005442:	f3bf 8f6f 	isb	sy
 8005446:	f3bf 8f4f 	dsb	sy
 800544a:	613b      	str	r3, [r7, #16]
 800544c:	e7fe      	b.n	800544c <xTimerCreate+0x6c>

	return ( TimerHandle_t ) pxNewTimer;
 800544e:	697b      	ldr	r3, [r7, #20]
}
 8005450:	4618      	mov	r0, r3
 8005452:	3718      	adds	r7, #24
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b088      	sub	sp, #32
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
 8005464:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005466:	2300      	movs	r3, #0
 8005468:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800546a:	4b1d      	ldr	r3, [pc, #116]	; (80054e0 <xTimerGenericCommand+0x88>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d030      	beq.n	80054d4 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	2b05      	cmp	r3, #5
 8005482:	dc1c      	bgt.n	80054be <xTimerGenericCommand+0x66>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005484:	f001 fd9a 	bl	8006fbc <xTaskGetSchedulerState>
 8005488:	4603      	mov	r3, r0
 800548a:	2b02      	cmp	r3, #2
 800548c:	d10b      	bne.n	80054a6 <xTimerGenericCommand+0x4e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800548e:	4b14      	ldr	r3, [pc, #80]	; (80054e0 <xTimerGenericCommand+0x88>)
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	f107 0310 	add.w	r3, r7, #16
 8005496:	4610      	mov	r0, r2
 8005498:	4619      	mov	r1, r3
 800549a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800549c:	2300      	movs	r3, #0
 800549e:	f002 fa9d 	bl	80079dc <xQueueGenericSend>
 80054a2:	61f8      	str	r0, [r7, #28]
 80054a4:	e016      	b.n	80054d4 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80054a6:	4b0e      	ldr	r3, [pc, #56]	; (80054e0 <xTimerGenericCommand+0x88>)
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	f107 0310 	add.w	r3, r7, #16
 80054ae:	4610      	mov	r0, r2
 80054b0:	4619      	mov	r1, r3
 80054b2:	2200      	movs	r2, #0
 80054b4:	2300      	movs	r3, #0
 80054b6:	f002 fa91 	bl	80079dc <xQueueGenericSend>
 80054ba:	61f8      	str	r0, [r7, #28]
 80054bc:	e00a      	b.n	80054d4 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80054be:	4b08      	ldr	r3, [pc, #32]	; (80054e0 <xTimerGenericCommand+0x88>)
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	f107 0310 	add.w	r3, r7, #16
 80054c6:	4610      	mov	r0, r2
 80054c8:	4619      	mov	r1, r3
 80054ca:	683a      	ldr	r2, [r7, #0]
 80054cc:	2300      	movs	r3, #0
 80054ce:	f002 fb7b 	bl	8007bc8 <xQueueGenericSendFromISR>
 80054d2:	61f8      	str	r0, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80054d4:	69fb      	ldr	r3, [r7, #28]
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3720      	adds	r7, #32
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	20000094 	.word	0x20000094

080054e4 <pcTimerGetTimerName>:

#endif
/*-----------------------------------------------------------*/

const char * pcTimerGetTimerName( TimerHandle_t xTimer )
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
Timer_t *pxTimer = ( Timer_t * ) xTimer;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	60fb      	str	r3, [r7, #12]

	return pxTimer->pcTimerName;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3714      	adds	r7, #20
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b088      	sub	sp, #32
 8005504:	af02      	add	r7, sp, #8
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800550a:	4b1c      	ldr	r3, [pc, #112]	; (800557c <prvProcessExpiredTimer+0x7c>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	3304      	adds	r3, #4
 8005518:	4618      	mov	r0, r3
 800551a:	f003 f8a9 	bl	8008670 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	2b01      	cmp	r3, #1
 8005524:	d122      	bne.n	800556c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	699a      	ldr	r2, [r3, #24]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4413      	add	r3, r2
 800552e:	6978      	ldr	r0, [r7, #20]
 8005530:	4619      	mov	r1, r3
 8005532:	683a      	ldr	r2, [r7, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f000 f8b7 	bl	80056a8 <prvInsertTimerInActiveList>
 800553a:	4603      	mov	r3, r0
 800553c:	2b01      	cmp	r3, #1
 800553e:	d115      	bne.n	800556c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005540:	2300      	movs	r3, #0
 8005542:	9300      	str	r3, [sp, #0]
 8005544:	6978      	ldr	r0, [r7, #20]
 8005546:	2100      	movs	r1, #0
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	2300      	movs	r3, #0
 800554c:	f7ff ff84 	bl	8005458 <xTimerGenericCommand>
 8005550:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d109      	bne.n	800556c <prvProcessExpiredTimer+0x6c>
 8005558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800555c:	f383 8811 	msr	BASEPRI, r3
 8005560:	f3bf 8f6f 	isb	sy
 8005564:	f3bf 8f4f 	dsb	sy
 8005568:	60fb      	str	r3, [r7, #12]
 800556a:	e7fe      	b.n	800556a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005570:	6978      	ldr	r0, [r7, #20]
 8005572:	4798      	blx	r3
}
 8005574:	3718      	adds	r7, #24
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	2000008c 	.word	0x2000008c

08005580 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005588:	f107 0308 	add.w	r3, r7, #8
 800558c:	4618      	mov	r0, r3
 800558e:	f000 f847 	bl	8005620 <prvGetNextExpireTime>
 8005592:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	4619      	mov	r1, r3
 800559a:	f000 f803 	bl	80055a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800559e:	f000 f8c5 	bl	800572c <prvProcessReceivedCommands>
	}
 80055a2:	e7f1      	b.n	8005588 <prvTimerTask+0x8>

080055a4 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80055ae:	f000 ff1d 	bl	80063ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80055b2:	f107 0308 	add.w	r3, r7, #8
 80055b6:	4618      	mov	r0, r3
 80055b8:	f000 f856 	bl	8005668 <prvSampleTimeNow>
 80055bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d124      	bne.n	800560e <prvProcessTimerOrBlockTask+0x6a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10a      	bne.n	80055e0 <prvProcessTimerOrBlockTask+0x3c>
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d806      	bhi.n	80055e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80055d2:	f000 ff19 	bl	8006408 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	68f9      	ldr	r1, [r7, #12]
 80055da:	f7ff ff91 	bl	8005500 <prvProcessExpiredTimer>
 80055de:	e018      	b.n	8005612 <prvProcessTimerOrBlockTask+0x6e>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 80055e0:	4b0d      	ldr	r3, [pc, #52]	; (8005618 <prvProcessTimerOrBlockTask+0x74>)
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	6879      	ldr	r1, [r7, #4]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	1acb      	subs	r3, r1, r3
 80055ea:	4610      	mov	r0, r2
 80055ec:	4619      	mov	r1, r3
 80055ee:	f002 ff8b 	bl	8008508 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 80055f2:	f000 ff09 	bl	8006408 <xTaskResumeAll>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d10a      	bne.n	8005612 <prvProcessTimerOrBlockTask+0x6e>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
 80055fc:	4b07      	ldr	r3, [pc, #28]	; (800561c <prvProcessTimerOrBlockTask+0x78>)
 80055fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005602:	601a      	str	r2, [r3, #0]
 8005604:	f3bf 8f4f 	dsb	sy
 8005608:	f3bf 8f6f 	isb	sy
 800560c:	e001      	b.n	8005612 <prvProcessTimerOrBlockTask+0x6e>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 800560e:	f000 fefb 	bl	8006408 <xTaskResumeAll>
		}
	}
}
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	20000094 	.word	0x20000094
 800561c:	e000ed04 	.word	0xe000ed04

08005620 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005628:	4b0e      	ldr	r3, [pc, #56]	; (8005664 <prvGetNextExpireTime+0x44>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	bf14      	ite	ne
 8005632:	2300      	movne	r3, #0
 8005634:	2301      	moveq	r3, #1
 8005636:	b2db      	uxtb	r3, r3
 8005638:	461a      	mov	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d105      	bne.n	8005652 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005646:	4b07      	ldr	r3, [pc, #28]	; (8005664 <prvGetNextExpireTime+0x44>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	60fb      	str	r3, [r7, #12]
 8005650:	e001      	b.n	8005656 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005652:	2300      	movs	r3, #0
 8005654:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005656:	68fb      	ldr	r3, [r7, #12]
}
 8005658:	4618      	mov	r0, r3
 800565a:	3714      	adds	r7, #20
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr
 8005664:	2000008c 	.word	0x2000008c

08005668 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005670:	f000 ff5e 	bl	8006530 <xTaskGetTickCount>
 8005674:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005676:	4b0b      	ldr	r3, [pc, #44]	; (80056a4 <prvSampleTimeNow+0x3c>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	429a      	cmp	r2, r3
 800567e:	d205      	bcs.n	800568c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005680:	f000 f8ea 	bl	8005858 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	601a      	str	r2, [r3, #0]
 800568a:	e002      	b.n	8005692 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005692:	4b04      	ldr	r3, [pc, #16]	; (80056a4 <prvSampleTimeNow+0x3c>)
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8005698:	68fb      	ldr	r3, [r7, #12]
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	20000098 	.word	0x20000098

080056a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b086      	sub	sp, #24
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]
 80056b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80056b6:	2300      	movs	r3, #0
 80056b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	68ba      	ldr	r2, [r7, #8]
 80056be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80056c6:	68ba      	ldr	r2, [r7, #8]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d812      	bhi.n	80056f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	1ad2      	subs	r2, r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d302      	bcc.n	80056e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80056dc:	2301      	movs	r3, #1
 80056de:	617b      	str	r3, [r7, #20]
 80056e0:	e01b      	b.n	800571a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80056e2:	4b10      	ldr	r3, [pc, #64]	; (8005724 <prvInsertTimerInActiveList+0x7c>)
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	3304      	adds	r3, #4
 80056ea:	4610      	mov	r0, r2
 80056ec:	4619      	mov	r1, r3
 80056ee:	f002 ff87 	bl	8008600 <vListInsert>
 80056f2:	e012      	b.n	800571a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d206      	bcs.n	800570a <prvInsertTimerInActiveList+0x62>
 80056fc:	68ba      	ldr	r2, [r7, #8]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	429a      	cmp	r2, r3
 8005702:	d302      	bcc.n	800570a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005704:	2301      	movs	r3, #1
 8005706:	617b      	str	r3, [r7, #20]
 8005708:	e007      	b.n	800571a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800570a:	4b07      	ldr	r3, [pc, #28]	; (8005728 <prvInsertTimerInActiveList+0x80>)
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	3304      	adds	r3, #4
 8005712:	4610      	mov	r0, r2
 8005714:	4619      	mov	r1, r3
 8005716:	f002 ff73 	bl	8008600 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800571a:	697b      	ldr	r3, [r7, #20]
}
 800571c:	4618      	mov	r0, r3
 800571e:	3718      	adds	r7, #24
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	20000090 	.word	0x20000090
 8005728:	2000008c 	.word	0x2000008c

0800572c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b08c      	sub	sp, #48	; 0x30
 8005730:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005732:	e07e      	b.n	8005832 <prvProcessReceivedCommands+0x106>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	2b00      	cmp	r3, #0
 8005738:	db7b      	blt.n	8005832 <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800573e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d004      	beq.n	8005750 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005748:	3304      	adds	r3, #4
 800574a:	4618      	mov	r0, r3
 800574c:	f002 ff90 	bl	8008670 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005750:	1d3b      	adds	r3, r7, #4
 8005752:	4618      	mov	r0, r3
 8005754:	f7ff ff88 	bl	8005668 <prvSampleTimeNow>
 8005758:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	2b09      	cmp	r3, #9
 800575e:	d867      	bhi.n	8005830 <prvProcessReceivedCommands+0x104>
 8005760:	a201      	add	r2, pc, #4	; (adr r2, 8005768 <prvProcessReceivedCommands+0x3c>)
 8005762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005766:	bf00      	nop
 8005768:	08005791 	.word	0x08005791
 800576c:	08005791 	.word	0x08005791
 8005770:	08005791 	.word	0x08005791
 8005774:	08005831 	.word	0x08005831
 8005778:	080057f1 	.word	0x080057f1
 800577c:	08005829 	.word	0x08005829
 8005780:	08005791 	.word	0x08005791
 8005784:	08005791 	.word	0x08005791
 8005788:	08005831 	.word	0x08005831
 800578c:	080057f1 	.word	0x080057f1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	441a      	add	r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800579c:	4611      	mov	r1, r2
 800579e:	6a3a      	ldr	r2, [r7, #32]
 80057a0:	f7ff ff82 	bl	80056a8 <prvInsertTimerInActiveList>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d121      	bne.n	80057ee <prvProcessReceivedCommands+0xc2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80057aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057b0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80057b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b4:	69db      	ldr	r3, [r3, #28]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d119      	bne.n	80057ee <prvProcessReceivedCommands+0xc2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057be:	699b      	ldr	r3, [r3, #24]
 80057c0:	4413      	add	r3, r2
 80057c2:	2200      	movs	r2, #0
 80057c4:	9200      	str	r2, [sp, #0]
 80057c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057c8:	2100      	movs	r1, #0
 80057ca:	461a      	mov	r2, r3
 80057cc:	2300      	movs	r3, #0
 80057ce:	f7ff fe43 	bl	8005458 <xTimerGenericCommand>
 80057d2:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d109      	bne.n	80057ee <prvProcessReceivedCommands+0xc2>
 80057da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057de:	f383 8811 	msr	BASEPRI, r3
 80057e2:	f3bf 8f6f 	isb	sy
 80057e6:	f3bf 8f4f 	dsb	sy
 80057ea:	61bb      	str	r3, [r7, #24]
 80057ec:	e7fe      	b.n	80057ec <prvProcessReceivedCommands+0xc0>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 80057ee:	e020      	b.n	8005832 <prvProcessReceivedCommands+0x106>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80057f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d109      	bne.n	8005812 <prvProcessReceivedCommands+0xe6>
 80057fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005802:	f383 8811 	msr	BASEPRI, r3
 8005806:	f3bf 8f6f 	isb	sy
 800580a:	f3bf 8f4f 	dsb	sy
 800580e:	617b      	str	r3, [r7, #20]
 8005810:	e7fe      	b.n	8005810 <prvProcessReceivedCommands+0xe4>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005814:	699a      	ldr	r2, [r3, #24]
 8005816:	6a3b      	ldr	r3, [r7, #32]
 8005818:	4413      	add	r3, r2
 800581a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800581c:	4619      	mov	r1, r3
 800581e:	6a3a      	ldr	r2, [r7, #32]
 8005820:	6a3b      	ldr	r3, [r7, #32]
 8005822:	f7ff ff41 	bl	80056a8 <prvInsertTimerInActiveList>
					break;
 8005826:	e004      	b.n	8005832 <prvProcessReceivedCommands+0x106>

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
 8005828:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800582a:	f003 fa01 	bl	8008c30 <vPortFree>
					break;
 800582e:	e000      	b.n	8005832 <prvProcessReceivedCommands+0x106>

				default	:
					/* Don't expect to get here. */
					break;
 8005830:	bf00      	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005832:	4b08      	ldr	r3, [pc, #32]	; (8005854 <prvProcessReceivedCommands+0x128>)
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	f107 0308 	add.w	r3, r7, #8
 800583a:	4610      	mov	r0, r2
 800583c:	4619      	mov	r1, r3
 800583e:	2200      	movs	r2, #0
 8005840:	2300      	movs	r3, #0
 8005842:	f002 fab7 	bl	8007db4 <xQueueGenericReceive>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	f47f af73 	bne.w	8005734 <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
 800584e:	3728      	adds	r7, #40	; 0x28
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	20000094 	.word	0x20000094

08005858 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b088      	sub	sp, #32
 800585c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800585e:	e044      	b.n	80058ea <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005860:	4b2b      	ldr	r3, [pc, #172]	; (8005910 <prvSwitchTimerLists+0xb8>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800586a:	4b29      	ldr	r3, [pc, #164]	; (8005910 <prvSwitchTimerLists+0xb8>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	3304      	adds	r3, #4
 8005878:	4618      	mov	r0, r3
 800587a:	f002 fef9 	bl	8008670 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005882:	6938      	ldr	r0, [r7, #16]
 8005884:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	69db      	ldr	r3, [r3, #28]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d12d      	bne.n	80058ea <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	699a      	ldr	r2, [r3, #24]
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	4413      	add	r3, r2
 8005896:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	429a      	cmp	r2, r3
 800589e:	d90e      	bls.n	80058be <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	693a      	ldr	r2, [r7, #16]
 80058aa:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80058ac:	4b18      	ldr	r3, [pc, #96]	; (8005910 <prvSwitchTimerLists+0xb8>)
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	3304      	adds	r3, #4
 80058b4:	4610      	mov	r0, r2
 80058b6:	4619      	mov	r1, r3
 80058b8:	f002 fea2 	bl	8008600 <vListInsert>
 80058bc:	e015      	b.n	80058ea <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80058be:	2300      	movs	r3, #0
 80058c0:	9300      	str	r3, [sp, #0]
 80058c2:	6938      	ldr	r0, [r7, #16]
 80058c4:	2100      	movs	r1, #0
 80058c6:	697a      	ldr	r2, [r7, #20]
 80058c8:	2300      	movs	r3, #0
 80058ca:	f7ff fdc5 	bl	8005458 <xTimerGenericCommand>
 80058ce:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d109      	bne.n	80058ea <prvSwitchTimerLists+0x92>
 80058d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058da:	f383 8811 	msr	BASEPRI, r3
 80058de:	f3bf 8f6f 	isb	sy
 80058e2:	f3bf 8f4f 	dsb	sy
 80058e6:	603b      	str	r3, [r7, #0]
 80058e8:	e7fe      	b.n	80058e8 <prvSwitchTimerLists+0x90>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80058ea:	4b09      	ldr	r3, [pc, #36]	; (8005910 <prvSwitchTimerLists+0xb8>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d1b5      	bne.n	8005860 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80058f4:	4b06      	ldr	r3, [pc, #24]	; (8005910 <prvSwitchTimerLists+0xb8>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 80058fa:	4b06      	ldr	r3, [pc, #24]	; (8005914 <prvSwitchTimerLists+0xbc>)
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	4b04      	ldr	r3, [pc, #16]	; (8005910 <prvSwitchTimerLists+0xb8>)
 8005900:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8005902:	4b04      	ldr	r3, [pc, #16]	; (8005914 <prvSwitchTimerLists+0xbc>)
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	601a      	str	r2, [r3, #0]
}
 8005908:	3718      	adds	r7, #24
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	2000008c 	.word	0x2000008c
 8005914:	20000090 	.word	0x20000090

08005918 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800591e:	f002 ffc1 	bl	80088a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005922:	4b15      	ldr	r3, [pc, #84]	; (8005978 <prvCheckForValidListAndQueue+0x60>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d121      	bne.n	800596e <prvCheckForValidListAndQueue+0x56>
		{
			vListInitialise( &xActiveTimerList1 );
 800592a:	4814      	ldr	r0, [pc, #80]	; (800597c <prvCheckForValidListAndQueue+0x64>)
 800592c:	f002 fe18 	bl	8008560 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005930:	4813      	ldr	r0, [pc, #76]	; (8005980 <prvCheckForValidListAndQueue+0x68>)
 8005932:	f002 fe15 	bl	8008560 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005936:	4b13      	ldr	r3, [pc, #76]	; (8005984 <prvCheckForValidListAndQueue+0x6c>)
 8005938:	4a10      	ldr	r2, [pc, #64]	; (800597c <prvCheckForValidListAndQueue+0x64>)
 800593a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800593c:	4b12      	ldr	r3, [pc, #72]	; (8005988 <prvCheckForValidListAndQueue+0x70>)
 800593e:	4a10      	ldr	r2, [pc, #64]	; (8005980 <prvCheckForValidListAndQueue+0x68>)
 8005940:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005942:	2005      	movs	r0, #5
 8005944:	210c      	movs	r1, #12
 8005946:	2200      	movs	r2, #0
 8005948:	f001 ffa4 	bl	8007894 <xQueueGenericCreate>
 800594c:	4602      	mov	r2, r0
 800594e:	4b0a      	ldr	r3, [pc, #40]	; (8005978 <prvCheckForValidListAndQueue+0x60>)
 8005950:	601a      	str	r2, [r3, #0]
			configASSERT( xTimerQueue );
 8005952:	4b09      	ldr	r3, [pc, #36]	; (8005978 <prvCheckForValidListAndQueue+0x60>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d109      	bne.n	800596e <prvCheckForValidListAndQueue+0x56>
 800595a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595e:	f383 8811 	msr	BASEPRI, r3
 8005962:	f3bf 8f6f 	isb	sy
 8005966:	f3bf 8f4f 	dsb	sy
 800596a:	607b      	str	r3, [r7, #4]
 800596c:	e7fe      	b.n	800596c <prvCheckForValidListAndQueue+0x54>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800596e:	f002 ffc7 	bl	8008900 <vPortExitCritical>
}
 8005972:	3708      	adds	r7, #8
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}
 8005978:	20000094 	.word	0x20000094
 800597c:	20000064 	.word	0x20000064
 8005980:	20000078 	.word	0x20000078
 8005984:	2000008c 	.word	0x2000008c
 8005988:	20000090 	.word	0x20000090

0800598c <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	60fb      	str	r3, [r7, #12]

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 8005998:	f002 ff84 	bl	80088a4 <vPortEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	695b      	ldr	r3, [r3, #20]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	bf0c      	ite	eq
 80059a4:	2300      	moveq	r3, #0
 80059a6:	2301      	movne	r3, #1
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
 80059ac:	f002 ffa8 	bl	8008900 <vPortExitCritical>

	return xTimerIsInActiveList;
 80059b0:	68bb      	ldr	r3, [r7, #8]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 80059b2:	4618      	mov	r0, r3
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop

080059bc <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80059bc:	b480      	push	{r7}
 80059be:	b085      	sub	sp, #20
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	60fb      	str	r3, [r7, #12]

	return pxTimer->pvTimerID;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6a1b      	ldr	r3, [r3, #32]
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3714      	adds	r7, #20
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b08c      	sub	sp, #48	; 0x30
 80059dc:	af02      	add	r7, sp, #8
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	603b      	str	r3, [r7, #0]
 80059e4:	4613      	mov	r3, r2
 80059e6:	80fb      	strh	r3, [r7, #6]
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d109      	bne.n	8005a02 <xTaskGenericCreate+0x2a>
 80059ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f2:	f383 8811 	msr	BASEPRI, r3
 80059f6:	f3bf 8f6f 	isb	sy
 80059fa:	f3bf 8f4f 	dsb	sy
 80059fe:	61bb      	str	r3, [r7, #24]
 8005a00:	e7fe      	b.n	8005a00 <xTaskGenericCreate+0x28>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
 8005a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a04:	2b04      	cmp	r3, #4
 8005a06:	d909      	bls.n	8005a1c <xTaskGenericCreate+0x44>
 8005a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a0c:	f383 8811 	msr	BASEPRI, r3
 8005a10:	f3bf 8f6f 	isb	sy
 8005a14:	f3bf 8f4f 	dsb	sy
 8005a18:	617b      	str	r3, [r7, #20]
 8005a1a:	e7fe      	b.n	8005a1a <xTaskGenericCreate+0x42>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 8005a1c:	88fb      	ldrh	r3, [r7, #6]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005a22:	f001 fa4f 	bl	8006ec4 <prvAllocateTCBAndStack>
 8005a26:	6238      	str	r0, [r7, #32]

	if( pxNewTCB != NULL )
 8005a28:	6a3b      	ldr	r3, [r7, #32]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d074      	beq.n	8005b18 <xTaskGenericCreate+0x140>
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 8005a2e:	6a3b      	ldr	r3, [r7, #32]
 8005a30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a32:	88fb      	ldrh	r3, [r7, #6]
 8005a34:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005a38:	3b01      	subs	r3, #1
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	4413      	add	r3, r2
 8005a3e:	61fb      	str	r3, [r7, #28]
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	f023 0307 	bic.w	r3, r3, #7
 8005a46:	61fb      	str	r3, [r7, #28]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	f003 0307 	and.w	r3, r3, #7
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d009      	beq.n	8005a66 <xTaskGenericCreate+0x8e>
 8005a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a56:	f383 8811 	msr	BASEPRI, r3
 8005a5a:	f3bf 8f6f 	isb	sy
 8005a5e:	f3bf 8f4f 	dsb	sy
 8005a62:	613b      	str	r3, [r7, #16]
 8005a64:	e7fe      	b.n	8005a64 <xTaskGenericCreate+0x8c>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 8005a66:	88fb      	ldrh	r3, [r7, #6]
 8005a68:	9300      	str	r3, [sp, #0]
 8005a6a:	6a38      	ldr	r0, [r7, #32]
 8005a6c:	68b9      	ldr	r1, [r7, #8]
 8005a6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a72:	f001 f927 	bl	8006cc4 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005a76:	69f8      	ldr	r0, [r7, #28]
 8005a78:	68f9      	ldr	r1, [r7, #12]
 8005a7a:	683a      	ldr	r2, [r7, #0]
 8005a7c:	f002 fe22 	bl	80086c4 <pxPortInitialiseStack>
 8005a80:	4602      	mov	r2, r0
 8005a82:	6a3b      	ldr	r3, [r7, #32]
 8005a84:	601a      	str	r2, [r3, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 8005a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d002      	beq.n	8005a92 <xTaskGenericCreate+0xba>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a8e:	6a3a      	ldr	r2, [r7, #32]
 8005a90:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
 8005a92:	f002 ff07 	bl	80088a4 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 8005a96:	4b2f      	ldr	r3, [pc, #188]	; (8005b54 <xTaskGenericCreate+0x17c>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	1c5a      	adds	r2, r3, #1
 8005a9c:	4b2d      	ldr	r3, [pc, #180]	; (8005b54 <xTaskGenericCreate+0x17c>)
 8005a9e:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
 8005aa0:	4b2d      	ldr	r3, [pc, #180]	; (8005b58 <xTaskGenericCreate+0x180>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d109      	bne.n	8005abc <xTaskGenericCreate+0xe4>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 8005aa8:	4b2b      	ldr	r3, [pc, #172]	; (8005b58 <xTaskGenericCreate+0x180>)
 8005aaa:	6a3a      	ldr	r2, [r7, #32]
 8005aac:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005aae:	4b29      	ldr	r3, [pc, #164]	; (8005b54 <xTaskGenericCreate+0x17c>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d10f      	bne.n	8005ad6 <xTaskGenericCreate+0xfe>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 8005ab6:	f001 f957 	bl	8006d68 <prvInitialiseTaskLists>
 8005aba:	e00c      	b.n	8005ad6 <xTaskGenericCreate+0xfe>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 8005abc:	4b27      	ldr	r3, [pc, #156]	; (8005b5c <xTaskGenericCreate+0x184>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d108      	bne.n	8005ad6 <xTaskGenericCreate+0xfe>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 8005ac4:	4b24      	ldr	r3, [pc, #144]	; (8005b58 <xTaskGenericCreate+0x180>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d802      	bhi.n	8005ad6 <xTaskGenericCreate+0xfe>
					{
						pxCurrentTCB = pxNewTCB;
 8005ad0:	4b21      	ldr	r3, [pc, #132]	; (8005b58 <xTaskGenericCreate+0x180>)
 8005ad2:	6a3a      	ldr	r2, [r7, #32]
 8005ad4:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 8005ad6:	4b22      	ldr	r3, [pc, #136]	; (8005b60 <xTaskGenericCreate+0x188>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	1c5a      	adds	r2, r3, #1
 8005adc:	4b20      	ldr	r3, [pc, #128]	; (8005b60 <xTaskGenericCreate+0x188>)
 8005ade:	601a      	str	r2, [r3, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8005ae0:	6a3b      	ldr	r3, [r7, #32]
 8005ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	409a      	lsls	r2, r3
 8005ae8:	4b1e      	ldr	r3, [pc, #120]	; (8005b64 <xTaskGenericCreate+0x18c>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	431a      	orrs	r2, r3
 8005aee:	4b1d      	ldr	r3, [pc, #116]	; (8005b64 <xTaskGenericCreate+0x18c>)
 8005af0:	601a      	str	r2, [r3, #0]
 8005af2:	6a3b      	ldr	r3, [r7, #32]
 8005af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005af6:	4613      	mov	r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	4413      	add	r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	4a1a      	ldr	r2, [pc, #104]	; (8005b68 <xTaskGenericCreate+0x190>)
 8005b00:	441a      	add	r2, r3
 8005b02:	6a3b      	ldr	r3, [r7, #32]
 8005b04:	3304      	adds	r3, #4
 8005b06:	4610      	mov	r0, r2
 8005b08:	4619      	mov	r1, r3
 8005b0a:	f002 fd55 	bl	80085b8 <vListInsertEnd>

			xReturn = pdPASS;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	627b      	str	r3, [r7, #36]	; 0x24
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 8005b12:	f002 fef5 	bl	8008900 <vPortExitCritical>
 8005b16:	e002      	b.n	8005b1e <xTaskGenericCreate+0x146>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005b18:	f04f 33ff 	mov.w	r3, #4294967295
 8005b1c:	627b      	str	r3, [r7, #36]	; 0x24
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d111      	bne.n	8005b48 <xTaskGenericCreate+0x170>
	{
		if( xSchedulerRunning != pdFALSE )
 8005b24:	4b0d      	ldr	r3, [pc, #52]	; (8005b5c <xTaskGenericCreate+0x184>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00d      	beq.n	8005b48 <xTaskGenericCreate+0x170>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8005b2c:	4b0a      	ldr	r3, [pc, #40]	; (8005b58 <xTaskGenericCreate+0x180>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d207      	bcs.n	8005b48 <xTaskGenericCreate+0x170>
			{
				taskYIELD_IF_USING_PREEMPTION();
 8005b38:	4b0c      	ldr	r3, [pc, #48]	; (8005b6c <xTaskGenericCreate+0x194>)
 8005b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b3e:	601a      	str	r2, [r3, #0]
 8005b40:	f3bf 8f4f 	dsb	sy
 8005b44:	f3bf 8f6f 	isb	sy
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
 8005b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3728      	adds	r7, #40	; 0x28
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	20000174 	.word	0x20000174
 8005b58:	2000009c 	.word	0x2000009c
 8005b5c:	20000180 	.word	0x20000180
 8005b60:	20000190 	.word	0x20000190
 8005b64:	2000017c 	.word	0x2000017c
 8005b68:	200000a0 	.word	0x200000a0
 8005b6c:	e000ed04 	.word	0xe000ed04

08005b70 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005b78:	f002 fe94 	bl	80088a4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d102      	bne.n	8005b88 <vTaskDelete+0x18>
 8005b82:	4b33      	ldr	r3, [pc, #204]	; (8005c50 <vTaskDelete+0xe0>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	e000      	b.n	8005b8a <vTaskDelete+0x1a>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	3304      	adds	r3, #4
 8005b90:	4618      	mov	r0, r3
 8005b92:	f002 fd6d 	bl	8008670 <uxListRemove>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d115      	bne.n	8005bc8 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ba0:	492c      	ldr	r1, [pc, #176]	; (8005c54 <vTaskDelete+0xe4>)
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	4413      	add	r3, r2
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	440b      	add	r3, r1
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d10a      	bne.n	8005bc8 <vTaskDelete+0x58>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bbc:	43da      	mvns	r2, r3
 8005bbe:	4b26      	ldr	r3, [pc, #152]	; (8005c58 <vTaskDelete+0xe8>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	401a      	ands	r2, r3
 8005bc4:	4b24      	ldr	r3, [pc, #144]	; (8005c58 <vTaskDelete+0xe8>)
 8005bc6:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d004      	beq.n	8005bda <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	3318      	adds	r3, #24
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f002 fd4b 	bl	8008670 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	3304      	adds	r3, #4
 8005bde:	481f      	ldr	r0, [pc, #124]	; (8005c5c <vTaskDelete+0xec>)
 8005be0:	4619      	mov	r1, r3
 8005be2:	f002 fce9 	bl	80085b8 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
 8005be6:	4b1e      	ldr	r3, [pc, #120]	; (8005c60 <vTaskDelete+0xf0>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	1c5a      	adds	r2, r3, #1
 8005bec:	4b1c      	ldr	r3, [pc, #112]	; (8005c60 <vTaskDelete+0xf0>)
 8005bee:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
 8005bf0:	4b1c      	ldr	r3, [pc, #112]	; (8005c64 <vTaskDelete+0xf4>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	1c5a      	adds	r2, r3, #1
 8005bf6:	4b1b      	ldr	r3, [pc, #108]	; (8005c64 <vTaskDelete+0xf4>)
 8005bf8:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8005bfa:	f002 fe81 	bl	8008900 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8005bfe:	4b1a      	ldr	r3, [pc, #104]	; (8005c68 <vTaskDelete+0xf8>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d021      	beq.n	8005c4a <vTaskDelete+0xda>
		{
			if( pxTCB == pxCurrentTCB )
 8005c06:	4b12      	ldr	r3, [pc, #72]	; (8005c50 <vTaskDelete+0xe0>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d116      	bne.n	8005c3e <vTaskDelete+0xce>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8005c10:	4b16      	ldr	r3, [pc, #88]	; (8005c6c <vTaskDelete+0xfc>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d009      	beq.n	8005c2c <vTaskDelete+0xbc>
 8005c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1c:	f383 8811 	msr	BASEPRI, r3
 8005c20:	f3bf 8f6f 	isb	sy
 8005c24:	f3bf 8f4f 	dsb	sy
 8005c28:	60bb      	str	r3, [r7, #8]
 8005c2a:	e7fe      	b.n	8005c2a <vTaskDelete+0xba>
				in which Windows specific clean up operations are performed,
				after which it is not possible to yield away from this task -
				hence xYieldPending is used to latch that a context switch is
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
				portYIELD_WITHIN_API();
 8005c2c:	4b10      	ldr	r3, [pc, #64]	; (8005c70 <vTaskDelete+0x100>)
 8005c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c32:	601a      	str	r2, [r3, #0]
 8005c34:	f3bf 8f4f 	dsb	sy
 8005c38:	f3bf 8f6f 	isb	sy
 8005c3c:	e005      	b.n	8005c4a <vTaskDelete+0xda>
			}
			else
			{
				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				taskENTER_CRITICAL();
 8005c3e:	f002 fe31 	bl	80088a4 <vPortEnterCritical>
				{
					prvResetNextTaskUnblockTime();
 8005c42:	f001 f987 	bl	8006f54 <prvResetNextTaskUnblockTime>
				}
				taskEXIT_CRITICAL();
 8005c46:	f002 fe5b 	bl	8008900 <vPortExitCritical>
			}
		}
	}
 8005c4a:	3710      	adds	r7, #16
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	2000009c 	.word	0x2000009c
 8005c54:	200000a0 	.word	0x200000a0
 8005c58:	2000017c 	.word	0x2000017c
 8005c5c:	20000148 	.word	0x20000148
 8005c60:	2000015c 	.word	0x2000015c
 8005c64:	20000190 	.word	0x20000190
 8005c68:	20000180 	.word	0x20000180
 8005c6c:	20000194 	.word	0x20000194
 8005c70:	e000ed04 	.word	0xe000ed04

08005c74 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b08a      	sub	sp, #40	; 0x28
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d109      	bne.n	8005c9c <vTaskDelayUntil+0x28>
 8005c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8c:	f383 8811 	msr	BASEPRI, r3
 8005c90:	f3bf 8f6f 	isb	sy
 8005c94:	f3bf 8f4f 	dsb	sy
 8005c98:	617b      	str	r3, [r7, #20]
 8005c9a:	e7fe      	b.n	8005c9a <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d109      	bne.n	8005cb6 <vTaskDelayUntil+0x42>
 8005ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca6:	f383 8811 	msr	BASEPRI, r3
 8005caa:	f3bf 8f6f 	isb	sy
 8005cae:	f3bf 8f4f 	dsb	sy
 8005cb2:	613b      	str	r3, [r7, #16]
 8005cb4:	e7fe      	b.n	8005cb4 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 8005cb6:	4b31      	ldr	r3, [pc, #196]	; (8005d7c <vTaskDelayUntil+0x108>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d009      	beq.n	8005cd2 <vTaskDelayUntil+0x5e>
 8005cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc2:	f383 8811 	msr	BASEPRI, r3
 8005cc6:	f3bf 8f6f 	isb	sy
 8005cca:	f3bf 8f4f 	dsb	sy
 8005cce:	60fb      	str	r3, [r7, #12]
 8005cd0:	e7fe      	b.n	8005cd0 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 8005cd2:	f000 fb8b 	bl	80063ec <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8005cd6:	4b2a      	ldr	r3, [pc, #168]	; (8005d80 <vTaskDelayUntil+0x10c>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	6a3b      	ldr	r3, [r7, #32]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d90b      	bls.n	8005d08 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d911      	bls.n	8005d1e <vTaskDelayUntil+0xaa>
 8005cfa:	69fa      	ldr	r2, [r7, #28]
 8005cfc:	6a3b      	ldr	r3, [r7, #32]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d90d      	bls.n	8005d1e <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8005d02:	2301      	movs	r3, #1
 8005d04:	627b      	str	r3, [r7, #36]	; 0x24
 8005d06:	e00a      	b.n	8005d1e <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d803      	bhi.n	8005d1a <vTaskDelayUntil+0xa6>
 8005d12:	69fa      	ldr	r2, [r7, #28]
 8005d14:	6a3b      	ldr	r3, [r7, #32]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d901      	bls.n	8005d1e <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	69fa      	ldr	r2, [r7, #28]
 8005d22:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8005d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d017      	beq.n	8005d5a <vTaskDelayUntil+0xe6>
			{
				traceTASK_DELAY_UNTIL();

				/* Remove the task from the ready list before adding it to the
				blocked list as the same list item is used for both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8005d2a:	4b16      	ldr	r3, [pc, #88]	; (8005d84 <vTaskDelayUntil+0x110>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	3304      	adds	r3, #4
 8005d30:	4618      	mov	r0, r3
 8005d32:	f002 fc9d 	bl	8008670 <uxListRemove>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d10b      	bne.n	8005d54 <vTaskDelayUntil+0xe0>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005d3c:	4b11      	ldr	r3, [pc, #68]	; (8005d84 <vTaskDelayUntil+0x110>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d42:	2201      	movs	r2, #1
 8005d44:	fa02 f303 	lsl.w	r3, r2, r3
 8005d48:	43da      	mvns	r2, r3
 8005d4a:	4b0f      	ldr	r3, [pc, #60]	; (8005d88 <vTaskDelayUntil+0x114>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	401a      	ands	r2, r3
 8005d50:	4b0d      	ldr	r3, [pc, #52]	; (8005d88 <vTaskDelayUntil+0x114>)
 8005d52:	601a      	str	r2, [r3, #0]
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8005d54:	69f8      	ldr	r0, [r7, #28]
 8005d56:	f001 f87f 	bl	8006e58 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8005d5a:	f000 fb55 	bl	8006408 <xTaskResumeAll>
 8005d5e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d107      	bne.n	8005d76 <vTaskDelayUntil+0x102>
		{
			portYIELD_WITHIN_API();
 8005d66:	4b09      	ldr	r3, [pc, #36]	; (8005d8c <vTaskDelayUntil+0x118>)
 8005d68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d6c:	601a      	str	r2, [r3, #0]
 8005d6e:	f3bf 8f4f 	dsb	sy
 8005d72:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d76:	3728      	adds	r7, #40	; 0x28
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	20000194 	.word	0x20000194
 8005d80:	20000178 	.word	0x20000178
 8005d84:	2000009c 	.word	0x2000009c
 8005d88:	2000017c 	.word	0x2000017c
 8005d8c:	e000ed04 	.word	0xe000ed04

08005d90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b086      	sub	sp, #24
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	617b      	str	r3, [r7, #20]


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d02f      	beq.n	8005e02 <vTaskDelay+0x72>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005da2:	4b1f      	ldr	r3, [pc, #124]	; (8005e20 <vTaskDelay+0x90>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d009      	beq.n	8005dbe <vTaskDelay+0x2e>
 8005daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dae:	f383 8811 	msr	BASEPRI, r3
 8005db2:	f3bf 8f6f 	isb	sy
 8005db6:	f3bf 8f4f 	dsb	sy
 8005dba:	60fb      	str	r3, [r7, #12]
 8005dbc:	e7fe      	b.n	8005dbc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005dbe:	f000 fb15 	bl	80063ec <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 8005dc2:	4b18      	ldr	r3, [pc, #96]	; (8005e24 <vTaskDelay+0x94>)
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4413      	add	r3, r2
 8005dca:	613b      	str	r3, [r7, #16]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8005dcc:	4b16      	ldr	r3, [pc, #88]	; (8005e28 <vTaskDelay+0x98>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	3304      	adds	r3, #4
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f002 fc4c 	bl	8008670 <uxListRemove>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d10b      	bne.n	8005df6 <vTaskDelay+0x66>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005dde:	4b12      	ldr	r3, [pc, #72]	; (8005e28 <vTaskDelay+0x98>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de4:	2201      	movs	r2, #1
 8005de6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dea:	43da      	mvns	r2, r3
 8005dec:	4b0f      	ldr	r3, [pc, #60]	; (8005e2c <vTaskDelay+0x9c>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	401a      	ands	r2, r3
 8005df2:	4b0e      	ldr	r3, [pc, #56]	; (8005e2c <vTaskDelay+0x9c>)
 8005df4:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8005df6:	6938      	ldr	r0, [r7, #16]
 8005df8:	f001 f82e 	bl	8006e58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005dfc:	f000 fb04 	bl	8006408 <xTaskResumeAll>
 8005e00:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d107      	bne.n	8005e18 <vTaskDelay+0x88>
		{
			portYIELD_WITHIN_API();
 8005e08:	4b09      	ldr	r3, [pc, #36]	; (8005e30 <vTaskDelay+0xa0>)
 8005e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e0e:	601a      	str	r2, [r3, #0]
 8005e10:	f3bf 8f4f 	dsb	sy
 8005e14:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e18:	3718      	adds	r7, #24
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	20000194 	.word	0x20000194
 8005e24:	20000178 	.word	0x20000178
 8005e28:	2000009c 	.word	0x2000009c
 8005e2c:	2000017c 	.word	0x2000017c
 8005e30:	e000ed04 	.word	0xe000ed04

08005e34 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 8005e3c:	f002 fd32 	bl	80088a4 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d102      	bne.n	8005e4c <uxTaskPriorityGet+0x18>
 8005e46:	4b07      	ldr	r3, [pc, #28]	; (8005e64 <uxTaskPriorityGet+0x30>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	e000      	b.n	8005e4e <uxTaskPriorityGet+0x1a>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e54:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
 8005e56:	f002 fd53 	bl	8008900 <vPortExitCritical>

		return uxReturn;
 8005e5a:	68bb      	ldr	r3, [r7, #8]
	}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	2000009c 	.word	0x2000009c

08005e68 <uxTaskPriorityGetFromISR>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
	{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b088      	sub	sp, #32
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e70:	f002 fdd8 	bl	8008a24 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005e74:	f3ef 8211 	mrs	r2, BASEPRI
 8005e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7c:	f383 8811 	msr	BASEPRI, r3
 8005e80:	f3bf 8f6f 	isb	sy
 8005e84:	f3bf 8f4f 	dsb	sy
 8005e88:	613a      	str	r2, [r7, #16]
 8005e8a:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005e8c:	693b      	ldr	r3, [r7, #16]

		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 8005e8e:	61fb      	str	r3, [r7, #28]
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d102      	bne.n	8005e9c <uxTaskPriorityGetFromISR+0x34>
 8005e96:	4b09      	ldr	r3, [pc, #36]	; (8005ebc <uxTaskPriorityGetFromISR+0x54>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	e000      	b.n	8005e9e <uxTaskPriorityGetFromISR+0x36>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	61bb      	str	r3, [r7, #24]
			uxReturn = pxTCB->uxPriority;
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea4:	617b      	str	r3, [r7, #20]
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	f383 8811 	msr	BASEPRI, r3
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );

		return uxReturn;
 8005eb0:	697b      	ldr	r3, [r7, #20]
	}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3720      	adds	r7, #32
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	2000009c 	.word	0x2000009c

08005ec0 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b088      	sub	sp, #32
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	2b04      	cmp	r3, #4
 8005ed2:	d909      	bls.n	8005ee8 <vTaskPrioritySet+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed8:	f383 8811 	msr	BASEPRI, r3
 8005edc:	f3bf 8f6f 	isb	sy
 8005ee0:	f3bf 8f4f 	dsb	sy
 8005ee4:	60fb      	str	r3, [r7, #12]
 8005ee6:	e7fe      	b.n	8005ee6 <vTaskPrioritySet+0x26>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	2b04      	cmp	r3, #4
 8005eec:	d901      	bls.n	8005ef2 <vTaskPrioritySet+0x32>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005eee:	2304      	movs	r3, #4
 8005ef0:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8005ef2:	f002 fcd7 	bl	80088a4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d102      	bne.n	8005f02 <vTaskPrioritySet+0x42>
 8005efc:	4b42      	ldr	r3, [pc, #264]	; (8006008 <vTaskPrioritySet+0x148>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	e000      	b.n	8005f04 <vTaskPrioritySet+0x44>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0a:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8005f0c:	697a      	ldr	r2, [r7, #20]
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d074      	beq.n	8005ffe <vTaskPrioritySet+0x13e>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8005f14:	683a      	ldr	r2, [r7, #0]
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d90d      	bls.n	8005f38 <vTaskPrioritySet+0x78>
				{
					if( pxTCB != pxCurrentTCB )
 8005f1c:	4b3a      	ldr	r3, [pc, #232]	; (8006008 <vTaskPrioritySet+0x148>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	69ba      	ldr	r2, [r7, #24]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d00f      	beq.n	8005f46 <vTaskPrioritySet+0x86>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8005f26:	4b38      	ldr	r3, [pc, #224]	; (8006008 <vTaskPrioritySet+0x148>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d809      	bhi.n	8005f46 <vTaskPrioritySet+0x86>
						{
							xYieldRequired = pdTRUE;
 8005f32:	2301      	movs	r3, #1
 8005f34:	61fb      	str	r3, [r7, #28]
 8005f36:	e006      	b.n	8005f46 <vTaskPrioritySet+0x86>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8005f38:	4b33      	ldr	r3, [pc, #204]	; (8006008 <vTaskPrioritySet+0x148>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	69ba      	ldr	r2, [r7, #24]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d101      	bne.n	8005f46 <vTaskPrioritySet+0x86>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8005f42:	2301      	movs	r3, #1
 8005f44:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4a:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d102      	bne.n	8005f5e <vTaskPrioritySet+0x9e>
					{
						pxTCB->uxPriority = uxNewPriority;
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	683a      	ldr	r2, [r7, #0]
 8005f5c:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	683a      	ldr	r2, [r7, #0]
 8005f62:	641a      	str	r2, [r3, #64]	; 0x40
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	699b      	ldr	r3, [r3, #24]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	db04      	blt.n	8005f76 <vTaskPrioritySet+0xb6>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	f1c3 0205 	rsb	r2, r3, #5
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	6959      	ldr	r1, [r3, #20]
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	4413      	add	r3, r2
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	4a21      	ldr	r2, [pc, #132]	; (800600c <vTaskPrioritySet+0x14c>)
 8005f86:	4413      	add	r3, r2
 8005f88:	4299      	cmp	r1, r3
 8005f8a:	d101      	bne.n	8005f90 <vTaskPrioritySet+0xd0>
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e000      	b.n	8005f92 <vTaskPrioritySet+0xd2>
 8005f90:	2300      	movs	r3, #0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d028      	beq.n	8005fe8 <vTaskPrioritySet+0x128>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	3304      	adds	r3, #4
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f002 fb68 	bl	8008670 <uxListRemove>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d109      	bne.n	8005fba <vTaskPrioritySet+0xfa>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	fa02 f303 	lsl.w	r3, r2, r3
 8005fae:	43da      	mvns	r2, r3
 8005fb0:	4b17      	ldr	r3, [pc, #92]	; (8006010 <vTaskPrioritySet+0x150>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	401a      	ands	r2, r3
 8005fb6:	4b16      	ldr	r3, [pc, #88]	; (8006010 <vTaskPrioritySet+0x150>)
 8005fb8:	601a      	str	r2, [r3, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	409a      	lsls	r2, r3
 8005fc2:	4b13      	ldr	r3, [pc, #76]	; (8006010 <vTaskPrioritySet+0x150>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	431a      	orrs	r2, r3
 8005fc8:	4b11      	ldr	r3, [pc, #68]	; (8006010 <vTaskPrioritySet+0x150>)
 8005fca:	601a      	str	r2, [r3, #0]
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fd0:	4613      	mov	r3, r2
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	4413      	add	r3, r2
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	4a0c      	ldr	r2, [pc, #48]	; (800600c <vTaskPrioritySet+0x14c>)
 8005fda:	441a      	add	r2, r3
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	3304      	adds	r3, #4
 8005fe0:	4610      	mov	r0, r2
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	f002 fae8 	bl	80085b8 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired == pdTRUE )
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d107      	bne.n	8005ffe <vTaskPrioritySet+0x13e>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8005fee:	4b09      	ldr	r3, [pc, #36]	; (8006014 <vTaskPrioritySet+0x154>)
 8005ff0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ff4:	601a      	str	r2, [r3, #0]
 8005ff6:	f3bf 8f4f 	dsb	sy
 8005ffa:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8005ffe:	f002 fc7f 	bl	8008900 <vPortExitCritical>
	}
 8006002:	3720      	adds	r7, #32
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}
 8006008:	2000009c 	.word	0x2000009c
 800600c:	200000a0 	.word	0x200000a0
 8006010:	2000017c 	.word	0x2000017c
 8006014:	e000ed04 	.word	0xe000ed04

08006018 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006020:	f002 fc40 	bl	80088a4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d102      	bne.n	8006030 <vTaskSuspend+0x18>
 800602a:	4b37      	ldr	r3, [pc, #220]	; (8006108 <vTaskSuspend+0xf0>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	e000      	b.n	8006032 <vTaskSuspend+0x1a>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	3304      	adds	r3, #4
 8006038:	4618      	mov	r0, r3
 800603a:	f002 fb19 	bl	8008670 <uxListRemove>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d115      	bne.n	8006070 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006048:	4930      	ldr	r1, [pc, #192]	; (800610c <vTaskSuspend+0xf4>)
 800604a:	4613      	mov	r3, r2
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	4413      	add	r3, r2
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	440b      	add	r3, r1
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d10a      	bne.n	8006070 <vTaskSuspend+0x58>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605e:	2201      	movs	r2, #1
 8006060:	fa02 f303 	lsl.w	r3, r2, r3
 8006064:	43da      	mvns	r2, r3
 8006066:	4b2a      	ldr	r3, [pc, #168]	; (8006110 <vTaskSuspend+0xf8>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	401a      	ands	r2, r3
 800606c:	4b28      	ldr	r3, [pc, #160]	; (8006110 <vTaskSuspend+0xf8>)
 800606e:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006074:	2b00      	cmp	r3, #0
 8006076:	d004      	beq.n	8006082 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	3318      	adds	r3, #24
 800607c:	4618      	mov	r0, r3
 800607e:	f002 faf7 	bl	8008670 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	3304      	adds	r3, #4
 8006086:	4823      	ldr	r0, [pc, #140]	; (8006114 <vTaskSuspend+0xfc>)
 8006088:	4619      	mov	r1, r3
 800608a:	f002 fa95 	bl	80085b8 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
 800608e:	f002 fc37 	bl	8008900 <vPortExitCritical>

		if( pxTCB == pxCurrentTCB )
 8006092:	4b1d      	ldr	r3, [pc, #116]	; (8006108 <vTaskSuspend+0xf0>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	429a      	cmp	r2, r3
 800609a:	d127      	bne.n	80060ec <vTaskSuspend+0xd4>
		{
			if( xSchedulerRunning != pdFALSE )
 800609c:	4b1e      	ldr	r3, [pc, #120]	; (8006118 <vTaskSuspend+0x100>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d016      	beq.n	80060d2 <vTaskSuspend+0xba>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80060a4:	4b1d      	ldr	r3, [pc, #116]	; (800611c <vTaskSuspend+0x104>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d009      	beq.n	80060c0 <vTaskSuspend+0xa8>
 80060ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b0:	f383 8811 	msr	BASEPRI, r3
 80060b4:	f3bf 8f6f 	isb	sy
 80060b8:	f3bf 8f4f 	dsb	sy
 80060bc:	60bb      	str	r3, [r7, #8]
 80060be:	e7fe      	b.n	80060be <vTaskSuspend+0xa6>
				portYIELD_WITHIN_API();
 80060c0:	4b17      	ldr	r3, [pc, #92]	; (8006120 <vTaskSuspend+0x108>)
 80060c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060c6:	601a      	str	r2, [r3, #0]
 80060c8:	f3bf 8f4f 	dsb	sy
 80060cc:	f3bf 8f6f 	isb	sy
 80060d0:	e016      	b.n	8006100 <vTaskSuspend+0xe8>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 80060d2:	4b10      	ldr	r3, [pc, #64]	; (8006114 <vTaskSuspend+0xfc>)
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	4b13      	ldr	r3, [pc, #76]	; (8006124 <vTaskSuspend+0x10c>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d103      	bne.n	80060e6 <vTaskSuspend+0xce>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
 80060de:	4b0a      	ldr	r3, [pc, #40]	; (8006108 <vTaskSuspend+0xf0>)
 80060e0:	2200      	movs	r2, #0
 80060e2:	601a      	str	r2, [r3, #0]
 80060e4:	e00c      	b.n	8006100 <vTaskSuspend+0xe8>
				}
				else
				{
					vTaskSwitchContext();
 80060e6:	f000 fb0f 	bl	8006708 <vTaskSwitchContext>
 80060ea:	e009      	b.n	8006100 <vTaskSuspend+0xe8>
				}
			}
		}
		else
		{
			if( xSchedulerRunning != pdFALSE )
 80060ec:	4b0a      	ldr	r3, [pc, #40]	; (8006118 <vTaskSuspend+0x100>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d005      	beq.n	8006100 <vTaskSuspend+0xe8>
			{
				/* A task other than the currently running task was suspended,
				reset the next expected unblock time in case it referred to the
				task that is now in the Suspended state. */
				taskENTER_CRITICAL();
 80060f4:	f002 fbd6 	bl	80088a4 <vPortEnterCritical>
				{
					prvResetNextTaskUnblockTime();
 80060f8:	f000 ff2c 	bl	8006f54 <prvResetNextTaskUnblockTime>
				}
				taskEXIT_CRITICAL();
 80060fc:	f002 fc00 	bl	8008900 <vPortExitCritical>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006100:	3710      	adds	r7, #16
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	2000009c 	.word	0x2000009c
 800610c:	200000a0 	.word	0x200000a0
 8006110:	2000017c 	.word	0x2000017c
 8006114:	20000160 	.word	0x20000160
 8006118:	20000180 	.word	0x20000180
 800611c:	20000194 	.word	0x20000194
 8006120:	e000ed04 	.word	0xe000ed04
 8006124:	20000174 	.word	0x20000174

08006128 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8006128:	b480      	push	{r7}
 800612a:	b087      	sub	sp, #28
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8006130:	2300      	movs	r3, #0
 8006132:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d109      	bne.n	8006152 <prvTaskIsTaskSuspended+0x2a>
 800613e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006142:	f383 8811 	msr	BASEPRI, r3
 8006146:	f3bf 8f6f 	isb	sy
 800614a:	f3bf 8f4f 	dsb	sy
 800614e:	60fb      	str	r3, [r7, #12]
 8006150:	e7fe      	b.n	8006150 <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	695a      	ldr	r2, [r3, #20]
 8006156:	4b0f      	ldr	r3, [pc, #60]	; (8006194 <prvTaskIsTaskSuspended+0x6c>)
 8006158:	429a      	cmp	r2, r3
 800615a:	d101      	bne.n	8006160 <prvTaskIsTaskSuspended+0x38>
 800615c:	2301      	movs	r3, #1
 800615e:	e000      	b.n	8006162 <prvTaskIsTaskSuspended+0x3a>
 8006160:	2300      	movs	r3, #0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00f      	beq.n	8006186 <prvTaskIsTaskSuspended+0x5e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800616a:	4b0b      	ldr	r3, [pc, #44]	; (8006198 <prvTaskIsTaskSuspended+0x70>)
 800616c:	429a      	cmp	r2, r3
 800616e:	d00a      	beq.n	8006186 <prvTaskIsTaskSuspended+0x5e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006174:	2b00      	cmp	r3, #0
 8006176:	d101      	bne.n	800617c <prvTaskIsTaskSuspended+0x54>
 8006178:	2301      	movs	r3, #1
 800617a:	e000      	b.n	800617e <prvTaskIsTaskSuspended+0x56>
 800617c:	2300      	movs	r3, #0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d001      	beq.n	8006186 <prvTaskIsTaskSuspended+0x5e>
				{
					xReturn = pdTRUE;
 8006182:	2301      	movs	r3, #1
 8006184:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006186:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8006188:	4618      	mov	r0, r3
 800618a:	371c      	adds	r7, #28
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr
 8006194:	20000160 	.word	0x20000160
 8006198:	20000134 	.word	0x20000134

0800619c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d109      	bne.n	80061c2 <vTaskResume+0x26>
 80061ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b2:	f383 8811 	msr	BASEPRI, r3
 80061b6:	f3bf 8f6f 	isb	sy
 80061ba:	f3bf 8f4f 	dsb	sy
 80061be:	60bb      	str	r3, [r7, #8]
 80061c0:	e7fe      	b.n	80061c0 <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d039      	beq.n	800623c <vTaskResume+0xa0>
 80061c8:	4b1e      	ldr	r3, [pc, #120]	; (8006244 <vTaskResume+0xa8>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d034      	beq.n	800623c <vTaskResume+0xa0>
		{
			taskENTER_CRITICAL();
 80061d2:	f002 fb67 	bl	80088a4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 80061d6:	68f8      	ldr	r0, [r7, #12]
 80061d8:	f7ff ffa6 	bl	8006128 <prvTaskIsTaskSuspended>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d12a      	bne.n	8006238 <vTaskResume+0x9c>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	3304      	adds	r3, #4
 80061e6:	4618      	mov	r0, r3
 80061e8:	f002 fa42 	bl	8008670 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f0:	2201      	movs	r2, #1
 80061f2:	409a      	lsls	r2, r3
 80061f4:	4b14      	ldr	r3, [pc, #80]	; (8006248 <vTaskResume+0xac>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	431a      	orrs	r2, r3
 80061fa:	4b13      	ldr	r3, [pc, #76]	; (8006248 <vTaskResume+0xac>)
 80061fc:	601a      	str	r2, [r3, #0]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006202:	4613      	mov	r3, r2
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	4413      	add	r3, r2
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	4a10      	ldr	r2, [pc, #64]	; (800624c <vTaskResume+0xb0>)
 800620c:	441a      	add	r2, r3
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	3304      	adds	r3, #4
 8006212:	4610      	mov	r0, r2
 8006214:	4619      	mov	r1, r3
 8006216:	f002 f9cf 	bl	80085b8 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800621e:	4b09      	ldr	r3, [pc, #36]	; (8006244 <vTaskResume+0xa8>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006224:	429a      	cmp	r2, r3
 8006226:	d307      	bcc.n	8006238 <vTaskResume+0x9c>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8006228:	4b09      	ldr	r3, [pc, #36]	; (8006250 <vTaskResume+0xb4>)
 800622a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800622e:	601a      	str	r2, [r3, #0]
 8006230:	f3bf 8f4f 	dsb	sy
 8006234:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8006238:	f002 fb62 	bl	8008900 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800623c:	3710      	adds	r7, #16
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	2000009c 	.word	0x2000009c
 8006248:	2000017c 	.word	0x2000017c
 800624c:	200000a0 	.word	0x200000a0
 8006250:	e000ed04 	.word	0xe000ed04

08006254 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8006254:	b580      	push	{r7, lr}
 8006256:	b08a      	sub	sp, #40	; 0x28
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 800625c:	2300      	movs	r3, #0
 800625e:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d109      	bne.n	800627e <xTaskResumeFromISR+0x2a>
 800626a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626e:	f383 8811 	msr	BASEPRI, r3
 8006272:	f3bf 8f6f 	isb	sy
 8006276:	f3bf 8f4f 	dsb	sy
 800627a:	61bb      	str	r3, [r7, #24]
 800627c:	e7fe      	b.n	800627c <xTaskResumeFromISR+0x28>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800627e:	f002 fbd1 	bl	8008a24 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006282:	f3ef 8211 	mrs	r2, BASEPRI
 8006286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628a:	f383 8811 	msr	BASEPRI, r3
 800628e:	f3bf 8f6f 	isb	sy
 8006292:	f3bf 8f4f 	dsb	sy
 8006296:	617a      	str	r2, [r7, #20]
 8006298:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800629a:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800629c:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 800629e:	6a38      	ldr	r0, [r7, #32]
 80062a0:	f7ff ff42 	bl	8006128 <prvTaskIsTaskSuspended>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d12f      	bne.n	800630a <xTaskResumeFromISR+0xb6>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062aa:	4b1d      	ldr	r3, [pc, #116]	; (8006320 <xTaskResumeFromISR+0xcc>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d125      	bne.n	80062fe <xTaskResumeFromISR+0xaa>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062b2:	6a3b      	ldr	r3, [r7, #32]
 80062b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062b6:	4b1b      	ldr	r3, [pc, #108]	; (8006324 <xTaskResumeFromISR+0xd0>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062bc:	429a      	cmp	r2, r3
 80062be:	d301      	bcc.n	80062c4 <xTaskResumeFromISR+0x70>
					{
						xYieldRequired = pdTRUE;
 80062c0:	2301      	movs	r3, #1
 80062c2:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
 80062c4:	6a3b      	ldr	r3, [r7, #32]
 80062c6:	3304      	adds	r3, #4
 80062c8:	4618      	mov	r0, r3
 80062ca:	f002 f9d1 	bl	8008670 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80062ce:	6a3b      	ldr	r3, [r7, #32]
 80062d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d2:	2201      	movs	r2, #1
 80062d4:	409a      	lsls	r2, r3
 80062d6:	4b14      	ldr	r3, [pc, #80]	; (8006328 <xTaskResumeFromISR+0xd4>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	431a      	orrs	r2, r3
 80062dc:	4b12      	ldr	r3, [pc, #72]	; (8006328 <xTaskResumeFromISR+0xd4>)
 80062de:	601a      	str	r2, [r3, #0]
 80062e0:	6a3b      	ldr	r3, [r7, #32]
 80062e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062e4:	4613      	mov	r3, r2
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	4413      	add	r3, r2
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	4a0f      	ldr	r2, [pc, #60]	; (800632c <xTaskResumeFromISR+0xd8>)
 80062ee:	441a      	add	r2, r3
 80062f0:	6a3b      	ldr	r3, [r7, #32]
 80062f2:	3304      	adds	r3, #4
 80062f4:	4610      	mov	r0, r2
 80062f6:	4619      	mov	r1, r3
 80062f8:	f002 f95e 	bl	80085b8 <vListInsertEnd>
 80062fc:	e005      	b.n	800630a <xTaskResumeFromISR+0xb6>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80062fe:	6a3b      	ldr	r3, [r7, #32]
 8006300:	3318      	adds	r3, #24
 8006302:	480b      	ldr	r0, [pc, #44]	; (8006330 <xTaskResumeFromISR+0xdc>)
 8006304:	4619      	mov	r1, r3
 8006306:	f002 f957 	bl	80085b8 <vListInsertEnd>
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f383 8811 	msr	BASEPRI, r3
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8006314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8006316:	4618      	mov	r0, r3
 8006318:	3728      	adds	r7, #40	; 0x28
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	20000194 	.word	0x20000194
 8006324:	2000009c 	.word	0x2000009c
 8006328:	2000017c 	.word	0x2000017c
 800632c:	200000a0 	.word	0x200000a0
 8006330:	20000134 	.word	0x20000134

08006334 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b088      	sub	sp, #32
 8006338:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800633a:	2300      	movs	r3, #0
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	2300      	movs	r3, #0
 8006340:	9301      	str	r3, [sp, #4]
 8006342:	2300      	movs	r3, #0
 8006344:	9302      	str	r3, [sp, #8]
 8006346:	2300      	movs	r3, #0
 8006348:	9303      	str	r3, [sp, #12]
 800634a:	4819      	ldr	r0, [pc, #100]	; (80063b0 <vTaskStartScheduler+0x7c>)
 800634c:	4919      	ldr	r1, [pc, #100]	; (80063b4 <vTaskStartScheduler+0x80>)
 800634e:	2246      	movs	r2, #70	; 0x46
 8006350:	2300      	movs	r3, #0
 8006352:	f7ff fb41 	bl	80059d8 <xTaskGenericCreate>
 8006356:	60f8      	str	r0, [r7, #12]
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2b01      	cmp	r3, #1
 800635c:	d102      	bne.n	8006364 <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
 800635e:	f7ff f80d 	bl	800537c <xTimerCreateTimerTask>
 8006362:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2b01      	cmp	r3, #1
 8006368:	d111      	bne.n	800638e <vTaskStartScheduler+0x5a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800636a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800636e:	f383 8811 	msr	BASEPRI, r3
 8006372:	f3bf 8f6f 	isb	sy
 8006376:	f3bf 8f4f 	dsb	sy
 800637a:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
 800637c:	4b0e      	ldr	r3, [pc, #56]	; (80063b8 <vTaskStartScheduler+0x84>)
 800637e:	2201      	movs	r2, #1
 8006380:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006382:	4b0e      	ldr	r3, [pc, #56]	; (80063bc <vTaskStartScheduler+0x88>)
 8006384:	2200      	movs	r2, #0
 8006386:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006388:	f002 fa0a 	bl	80087a0 <xPortStartScheduler>
 800638c:	e00c      	b.n	80063a8 <vTaskStartScheduler+0x74>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d109      	bne.n	80063a8 <vTaskStartScheduler+0x74>
 8006394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006398:	f383 8811 	msr	BASEPRI, r3
 800639c:	f3bf 8f6f 	isb	sy
 80063a0:	f3bf 8f4f 	dsb	sy
 80063a4:	607b      	str	r3, [r7, #4]
 80063a6:	e7fe      	b.n	80063a6 <vTaskStartScheduler+0x72>
	}
}
 80063a8:	3710      	adds	r7, #16
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	08006c91 	.word	0x08006c91
 80063b4:	08008fdc 	.word	0x08008fdc
 80063b8:	20000180 	.word	0x20000180
 80063bc:	20000178 	.word	0x20000178

080063c0 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ca:	f383 8811 	msr	BASEPRI, r3
 80063ce:	f3bf 8f6f 	isb	sy
 80063d2:	f3bf 8f4f 	dsb	sy
 80063d6:	607b      	str	r3, [r7, #4]
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
	xSchedulerRunning = pdFALSE;
 80063d8:	4b03      	ldr	r3, [pc, #12]	; (80063e8 <vTaskEndScheduler+0x28>)
 80063da:	2200      	movs	r2, #0
 80063dc:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
 80063de:	f002 fa47 	bl	8008870 <vPortEndScheduler>
}
 80063e2:	3708      	adds	r7, #8
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	20000180 	.word	0x20000180

080063ec <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80063ec:	b480      	push	{r7}
 80063ee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80063f0:	4b04      	ldr	r3, [pc, #16]	; (8006404 <vTaskSuspendAll+0x18>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	1c5a      	adds	r2, r3, #1
 80063f6:	4b03      	ldr	r3, [pc, #12]	; (8006404 <vTaskSuspendAll+0x18>)
 80063f8:	601a      	str	r2, [r3, #0]
}
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr
 8006402:	bf00      	nop
 8006404:	20000194 	.word	0x20000194

08006408 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
 800640e:	2300      	movs	r3, #0
 8006410:	60fb      	str	r3, [r7, #12]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006412:	4b3e      	ldr	r3, [pc, #248]	; (800650c <xTaskResumeAll+0x104>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d109      	bne.n	800642e <xTaskResumeAll+0x26>
 800641a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641e:	f383 8811 	msr	BASEPRI, r3
 8006422:	f3bf 8f6f 	isb	sy
 8006426:	f3bf 8f4f 	dsb	sy
 800642a:	607b      	str	r3, [r7, #4]
 800642c:	e7fe      	b.n	800642c <xTaskResumeAll+0x24>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800642e:	f002 fa39 	bl	80088a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006432:	4b36      	ldr	r3, [pc, #216]	; (800650c <xTaskResumeAll+0x104>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	1e5a      	subs	r2, r3, #1
 8006438:	4b34      	ldr	r3, [pc, #208]	; (800650c <xTaskResumeAll+0x104>)
 800643a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800643c:	4b33      	ldr	r3, [pc, #204]	; (800650c <xTaskResumeAll+0x104>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d15b      	bne.n	80064fc <xTaskResumeAll+0xf4>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006444:	4b32      	ldr	r3, [pc, #200]	; (8006510 <xTaskResumeAll+0x108>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d057      	beq.n	80064fc <xTaskResumeAll+0xf4>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800644c:	e02e      	b.n	80064ac <xTaskResumeAll+0xa4>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800644e:	4b31      	ldr	r3, [pc, #196]	; (8006514 <xTaskResumeAll+0x10c>)
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	60bb      	str	r3, [r7, #8]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	3318      	adds	r3, #24
 800645a:	4618      	mov	r0, r3
 800645c:	f002 f908 	bl	8008670 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	3304      	adds	r3, #4
 8006464:	4618      	mov	r0, r3
 8006466:	f002 f903 	bl	8008670 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646e:	2201      	movs	r2, #1
 8006470:	409a      	lsls	r2, r3
 8006472:	4b29      	ldr	r3, [pc, #164]	; (8006518 <xTaskResumeAll+0x110>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	431a      	orrs	r2, r3
 8006478:	4b27      	ldr	r3, [pc, #156]	; (8006518 <xTaskResumeAll+0x110>)
 800647a:	601a      	str	r2, [r3, #0]
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006480:	4613      	mov	r3, r2
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	4413      	add	r3, r2
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	4a24      	ldr	r2, [pc, #144]	; (800651c <xTaskResumeAll+0x114>)
 800648a:	441a      	add	r2, r3
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	3304      	adds	r3, #4
 8006490:	4610      	mov	r0, r2
 8006492:	4619      	mov	r1, r3
 8006494:	f002 f890 	bl	80085b8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800649c:	4b20      	ldr	r3, [pc, #128]	; (8006520 <xTaskResumeAll+0x118>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d302      	bcc.n	80064ac <xTaskResumeAll+0xa4>
					{
						xYieldPending = pdTRUE;
 80064a6:	4b1f      	ldr	r3, [pc, #124]	; (8006524 <xTaskResumeAll+0x11c>)
 80064a8:	2201      	movs	r2, #1
 80064aa:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064ac:	4b19      	ldr	r3, [pc, #100]	; (8006514 <xTaskResumeAll+0x10c>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1cc      	bne.n	800644e <xTaskResumeAll+0x46>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 80064b4:	4b1c      	ldr	r3, [pc, #112]	; (8006528 <xTaskResumeAll+0x120>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d011      	beq.n	80064e0 <xTaskResumeAll+0xd8>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 80064bc:	e00c      	b.n	80064d8 <xTaskResumeAll+0xd0>
					{
						if( xTaskIncrementTick() != pdFALSE )
 80064be:	f000 f865 	bl	800658c <xTaskIncrementTick>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d002      	beq.n	80064ce <xTaskResumeAll+0xc6>
						{
							xYieldPending = pdTRUE;
 80064c8:	4b16      	ldr	r3, [pc, #88]	; (8006524 <xTaskResumeAll+0x11c>)
 80064ca:	2201      	movs	r2, #1
 80064cc:	601a      	str	r2, [r3, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
 80064ce:	4b16      	ldr	r3, [pc, #88]	; (8006528 <xTaskResumeAll+0x120>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	1e5a      	subs	r2, r3, #1
 80064d4:	4b14      	ldr	r3, [pc, #80]	; (8006528 <xTaskResumeAll+0x120>)
 80064d6:	601a      	str	r2, [r3, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 80064d8:	4b13      	ldr	r3, [pc, #76]	; (8006528 <xTaskResumeAll+0x120>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1ee      	bne.n	80064be <xTaskResumeAll+0xb6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
 80064e0:	4b10      	ldr	r3, [pc, #64]	; (8006524 <xTaskResumeAll+0x11c>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d109      	bne.n	80064fc <xTaskResumeAll+0xf4>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80064e8:	2301      	movs	r3, #1
 80064ea:	60fb      	str	r3, [r7, #12]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80064ec:	4b0f      	ldr	r3, [pc, #60]	; (800652c <xTaskResumeAll+0x124>)
 80064ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064f2:	601a      	str	r2, [r3, #0]
 80064f4:	f3bf 8f4f 	dsb	sy
 80064f8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80064fc:	f002 fa00 	bl	8008900 <vPortExitCritical>

	return xAlreadyYielded;
 8006500:	68fb      	ldr	r3, [r7, #12]
}
 8006502:	4618      	mov	r0, r3
 8006504:	3710      	adds	r7, #16
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	20000194 	.word	0x20000194
 8006510:	20000174 	.word	0x20000174
 8006514:	20000134 	.word	0x20000134
 8006518:	2000017c 	.word	0x2000017c
 800651c:	200000a0 	.word	0x200000a0
 8006520:	2000009c 	.word	0x2000009c
 8006524:	20000188 	.word	0x20000188
 8006528:	20000184 	.word	0x20000184
 800652c:	e000ed04 	.word	0xe000ed04

08006530 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006536:	4b05      	ldr	r3, [pc, #20]	; (800654c <xTaskGetTickCount+0x1c>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800653c:	687b      	ldr	r3, [r7, #4]
}
 800653e:	4618      	mov	r0, r3
 8006540:	370c      	adds	r7, #12
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	20000178 	.word	0x20000178

08006550 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006556:	f002 fa65 	bl	8008a24 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800655a:	2300      	movs	r3, #0
 800655c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800655e:	4b04      	ldr	r3, [pc, #16]	; (8006570 <xTaskGetTickCountFromISR+0x20>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006564:	683b      	ldr	r3, [r7, #0]
}
 8006566:	4618      	mov	r0, r3
 8006568:	3708      	adds	r7, #8
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	20000178 	.word	0x20000178

08006574 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8006574:	b480      	push	{r7}
 8006576:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
 8006578:	4b03      	ldr	r3, [pc, #12]	; (8006588 <uxTaskGetNumberOfTasks+0x14>)
 800657a:	681b      	ldr	r3, [r3, #0]
}
 800657c:	4618      	mov	r0, r3
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	20000174 	.word	0x20000174

0800658c <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b086      	sub	sp, #24
 8006590:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006592:	2300      	movs	r3, #0
 8006594:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006596:	4b51      	ldr	r3, [pc, #324]	; (80066dc <xTaskIncrementTick+0x150>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	f040 808d 	bne.w	80066ba <xTaskIncrementTick+0x12e>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 80065a0:	4b4f      	ldr	r3, [pc, #316]	; (80066e0 <xTaskIncrementTick+0x154>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	1c5a      	adds	r2, r3, #1
 80065a6:	4b4e      	ldr	r3, [pc, #312]	; (80066e0 <xTaskIncrementTick+0x154>)
 80065a8:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80065aa:	4b4d      	ldr	r3, [pc, #308]	; (80066e0 <xTaskIncrementTick+0x154>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	613b      	str	r3, [r7, #16]

			if( xConstTickCount == ( TickType_t ) 0U )
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d11f      	bne.n	80065f6 <xTaskIncrementTick+0x6a>
			{
				taskSWITCH_DELAYED_LISTS();
 80065b6:	4b4b      	ldr	r3, [pc, #300]	; (80066e4 <xTaskIncrementTick+0x158>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d009      	beq.n	80065d4 <xTaskIncrementTick+0x48>
 80065c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c4:	f383 8811 	msr	BASEPRI, r3
 80065c8:	f3bf 8f6f 	isb	sy
 80065cc:	f3bf 8f4f 	dsb	sy
 80065d0:	603b      	str	r3, [r7, #0]
 80065d2:	e7fe      	b.n	80065d2 <xTaskIncrementTick+0x46>
 80065d4:	4b43      	ldr	r3, [pc, #268]	; (80066e4 <xTaskIncrementTick+0x158>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	60fb      	str	r3, [r7, #12]
 80065da:	4b43      	ldr	r3, [pc, #268]	; (80066e8 <xTaskIncrementTick+0x15c>)
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	4b41      	ldr	r3, [pc, #260]	; (80066e4 <xTaskIncrementTick+0x158>)
 80065e0:	601a      	str	r2, [r3, #0]
 80065e2:	4b41      	ldr	r3, [pc, #260]	; (80066e8 <xTaskIncrementTick+0x15c>)
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	601a      	str	r2, [r3, #0]
 80065e8:	4b40      	ldr	r3, [pc, #256]	; (80066ec <xTaskIncrementTick+0x160>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	1c5a      	adds	r2, r3, #1
 80065ee:	4b3f      	ldr	r3, [pc, #252]	; (80066ec <xTaskIncrementTick+0x160>)
 80065f0:	601a      	str	r2, [r3, #0]
 80065f2:	f000 fcaf 	bl	8006f54 <prvResetNextTaskUnblockTime>

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 80065f6:	4b3e      	ldr	r3, [pc, #248]	; (80066f0 <xTaskIncrementTick+0x164>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	693a      	ldr	r2, [r7, #16]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d34d      	bcc.n	800669c <xTaskIncrementTick+0x110>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006600:	4b38      	ldr	r3, [pc, #224]	; (80066e4 <xTaskIncrementTick+0x158>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d101      	bne.n	800660e <xTaskIncrementTick+0x82>
 800660a:	2301      	movs	r3, #1
 800660c:	e000      	b.n	8006610 <xTaskIncrementTick+0x84>
 800660e:	2300      	movs	r3, #0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d004      	beq.n	800661e <xTaskIncrementTick+0x92>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 8006614:	4b36      	ldr	r3, [pc, #216]	; (80066f0 <xTaskIncrementTick+0x164>)
 8006616:	f04f 32ff 	mov.w	r2, #4294967295
 800661a:	601a      	str	r2, [r3, #0]
						break;
 800661c:	e03e      	b.n	800669c <xTaskIncrementTick+0x110>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800661e:	4b31      	ldr	r3, [pc, #196]	; (80066e4 <xTaskIncrementTick+0x158>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	60bb      	str	r3, [r7, #8]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	607b      	str	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
 800662e:	693a      	ldr	r2, [r7, #16]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	429a      	cmp	r2, r3
 8006634:	d203      	bcs.n	800663e <xTaskIncrementTick+0xb2>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
 8006636:	4b2e      	ldr	r3, [pc, #184]	; (80066f0 <xTaskIncrementTick+0x164>)
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	601a      	str	r2, [r3, #0]
							break;
 800663c:	e02e      	b.n	800669c <xTaskIncrementTick+0x110>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	3304      	adds	r3, #4
 8006642:	4618      	mov	r0, r3
 8006644:	f002 f814 	bl	8008670 <uxListRemove>

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800664c:	2b00      	cmp	r3, #0
 800664e:	d004      	beq.n	800665a <xTaskIncrementTick+0xce>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	3318      	adds	r3, #24
 8006654:	4618      	mov	r0, r3
 8006656:	f002 f80b 	bl	8008670 <uxListRemove>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665e:	2201      	movs	r2, #1
 8006660:	409a      	lsls	r2, r3
 8006662:	4b24      	ldr	r3, [pc, #144]	; (80066f4 <xTaskIncrementTick+0x168>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	431a      	orrs	r2, r3
 8006668:	4b22      	ldr	r3, [pc, #136]	; (80066f4 <xTaskIncrementTick+0x168>)
 800666a:	601a      	str	r2, [r3, #0]
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006670:	4613      	mov	r3, r2
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	4413      	add	r3, r2
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	4a1f      	ldr	r2, [pc, #124]	; (80066f8 <xTaskIncrementTick+0x16c>)
 800667a:	441a      	add	r2, r3
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	3304      	adds	r3, #4
 8006680:	4610      	mov	r0, r2
 8006682:	4619      	mov	r1, r3
 8006684:	f001 ff98 	bl	80085b8 <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800668c:	4b1b      	ldr	r3, [pc, #108]	; (80066fc <xTaskIncrementTick+0x170>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006692:	429a      	cmp	r2, r3
 8006694:	d301      	bcc.n	800669a <xTaskIncrementTick+0x10e>
							{
								xSwitchRequired = pdTRUE;
 8006696:	2301      	movs	r3, #1
 8006698:	617b      	str	r3, [r7, #20]
								mtCOVERAGE_TEST_MARKER();
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
 800669a:	e7b1      	b.n	8006600 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800669c:	4b17      	ldr	r3, [pc, #92]	; (80066fc <xTaskIncrementTick+0x170>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066a2:	4915      	ldr	r1, [pc, #84]	; (80066f8 <xTaskIncrementTick+0x16c>)
 80066a4:	4613      	mov	r3, r2
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	4413      	add	r3, r2
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	440b      	add	r3, r1
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d907      	bls.n	80066c4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80066b4:	2301      	movs	r3, #1
 80066b6:	617b      	str	r3, [r7, #20]
 80066b8:	e004      	b.n	80066c4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80066ba:	4b11      	ldr	r3, [pc, #68]	; (8006700 <xTaskIncrementTick+0x174>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	1c5a      	adds	r2, r3, #1
 80066c0:	4b0f      	ldr	r3, [pc, #60]	; (8006700 <xTaskIncrementTick+0x174>)
 80066c2:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80066c4:	4b0f      	ldr	r3, [pc, #60]	; (8006704 <xTaskIncrementTick+0x178>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d001      	beq.n	80066d0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80066cc:	2301      	movs	r3, #1
 80066ce:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80066d0:	697b      	ldr	r3, [r7, #20]
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3718      	adds	r7, #24
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	20000194 	.word	0x20000194
 80066e0:	20000178 	.word	0x20000178
 80066e4:	2000012c 	.word	0x2000012c
 80066e8:	20000130 	.word	0x20000130
 80066ec:	2000018c 	.word	0x2000018c
 80066f0:	20000034 	.word	0x20000034
 80066f4:	2000017c 	.word	0x2000017c
 80066f8:	200000a0 	.word	0x200000a0
 80066fc:	2000009c 	.word	0x2000009c
 8006700:	20000184 	.word	0x20000184
 8006704:	20000188 	.word	0x20000188

08006708 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b086      	sub	sp, #24
 800670c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800670e:	4b37      	ldr	r3, [pc, #220]	; (80067ec <vTaskSwitchContext+0xe4>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d003      	beq.n	800671e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006716:	4b36      	ldr	r3, [pc, #216]	; (80067f0 <vTaskSwitchContext+0xe8>)
 8006718:	2201      	movs	r2, #1
 800671a:	601a      	str	r2, [r3, #0]
 800671c:	e063      	b.n	80067e6 <vTaskSwitchContext+0xde>
	}
	else
	{
		xYieldPending = pdFALSE;
 800671e:	4b34      	ldr	r3, [pc, #208]	; (80067f0 <vTaskSwitchContext+0xe8>)
 8006720:	2200      	movs	r2, #0
 8006722:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 8006724:	4b33      	ldr	r3, [pc, #204]	; (80067f4 <vTaskSwitchContext+0xec>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	4b32      	ldr	r3, [pc, #200]	; (80067f4 <vTaskSwitchContext+0xec>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006730:	429a      	cmp	r2, r3
 8006732:	d808      	bhi.n	8006746 <vTaskSwitchContext+0x3e>
 8006734:	4b2f      	ldr	r3, [pc, #188]	; (80067f4 <vTaskSwitchContext+0xec>)
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	4b2e      	ldr	r3, [pc, #184]	; (80067f4 <vTaskSwitchContext+0xec>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	3334      	adds	r3, #52	; 0x34
 800673e:	4610      	mov	r0, r2
 8006740:	4619      	mov	r1, r3
 8006742:	f7fa fac9 	bl	8000cd8 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 8006746:	4b2b      	ldr	r3, [pc, #172]	; (80067f4 <vTaskSwitchContext+0xec>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800674c:	4618      	mov	r0, r3
 800674e:	492a      	ldr	r1, [pc, #168]	; (80067f8 <vTaskSwitchContext+0xf0>)
 8006750:	2214      	movs	r2, #20
 8006752:	f002 fbf1 	bl	8008f38 <memcmp>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d008      	beq.n	800676e <vTaskSwitchContext+0x66>
 800675c:	4b25      	ldr	r3, [pc, #148]	; (80067f4 <vTaskSwitchContext+0xec>)
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	4b24      	ldr	r3, [pc, #144]	; (80067f4 <vTaskSwitchContext+0xec>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	3334      	adds	r3, #52	; 0x34
 8006766:	4610      	mov	r0, r2
 8006768:	4619      	mov	r1, r3
 800676a:	f7fa fab5 	bl	8000cd8 <vApplicationStackOverflowHook>

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800676e:	4b23      	ldr	r3, [pc, #140]	; (80067fc <vTaskSwitchContext+0xf4>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	60fb      	str	r3, [r7, #12]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	fab3 f383 	clz	r3, r3
 800677a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800677c:	7afb      	ldrb	r3, [r7, #11]
 800677e:	f1c3 031f 	rsb	r3, r3, #31
 8006782:	617b      	str	r3, [r7, #20]
 8006784:	491e      	ldr	r1, [pc, #120]	; (8006800 <vTaskSwitchContext+0xf8>)
 8006786:	697a      	ldr	r2, [r7, #20]
 8006788:	4613      	mov	r3, r2
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	4413      	add	r3, r2
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	440b      	add	r3, r1
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d109      	bne.n	80067ac <vTaskSwitchContext+0xa4>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800679c:	f383 8811 	msr	BASEPRI, r3
 80067a0:	f3bf 8f6f 	isb	sy
 80067a4:	f3bf 8f4f 	dsb	sy
 80067a8:	607b      	str	r3, [r7, #4]
 80067aa:	e7fe      	b.n	80067aa <vTaskSwitchContext+0xa2>
 80067ac:	697a      	ldr	r2, [r7, #20]
 80067ae:	4613      	mov	r3, r2
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	4413      	add	r3, r2
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	4a12      	ldr	r2, [pc, #72]	; (8006800 <vTaskSwitchContext+0xf8>)
 80067b8:	4413      	add	r3, r2
 80067ba:	613b      	str	r3, [r7, #16]
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	685a      	ldr	r2, [r3, #4]
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	605a      	str	r2, [r3, #4]
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	685a      	ldr	r2, [r3, #4]
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	3308      	adds	r3, #8
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d104      	bne.n	80067dc <vTaskSwitchContext+0xd4>
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	685a      	ldr	r2, [r3, #4]
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	605a      	str	r2, [r3, #4]
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	68da      	ldr	r2, [r3, #12]
 80067e2:	4b04      	ldr	r3, [pc, #16]	; (80067f4 <vTaskSwitchContext+0xec>)
 80067e4:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80067e6:	3718      	adds	r7, #24
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	20000194 	.word	0x20000194
 80067f0:	20000188 	.word	0x20000188
 80067f4:	2000009c 	.word	0x2000009c
 80067f8:	08008fe4 	.word	0x08008fe4
 80067fc:	2000017c 	.word	0x2000017c
 8006800:	200000a0 	.word	0x200000a0

08006804 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;

	configASSERT( pxEventList );
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d109      	bne.n	8006828 <vTaskPlaceOnEventList+0x24>
 8006814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006818:	f383 8811 	msr	BASEPRI, r3
 800681c:	f3bf 8f6f 	isb	sy
 8006820:	f3bf 8f4f 	dsb	sy
 8006824:	60bb      	str	r3, [r7, #8]
 8006826:	e7fe      	b.n	8006826 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006828:	4b19      	ldr	r3, [pc, #100]	; (8006890 <vTaskPlaceOnEventList+0x8c>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	3318      	adds	r3, #24
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	4619      	mov	r1, r3
 8006832:	f001 fee5 	bl	8008600 <vListInsert>

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8006836:	4b16      	ldr	r3, [pc, #88]	; (8006890 <vTaskPlaceOnEventList+0x8c>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	3304      	adds	r3, #4
 800683c:	4618      	mov	r0, r3
 800683e:	f001 ff17 	bl	8008670 <uxListRemove>
 8006842:	4603      	mov	r3, r0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d10b      	bne.n	8006860 <vTaskPlaceOnEventList+0x5c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006848:	4b11      	ldr	r3, [pc, #68]	; (8006890 <vTaskPlaceOnEventList+0x8c>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684e:	2201      	movs	r2, #1
 8006850:	fa02 f303 	lsl.w	r3, r2, r3
 8006854:	43da      	mvns	r2, r3
 8006856:	4b0f      	ldr	r3, [pc, #60]	; (8006894 <vTaskPlaceOnEventList+0x90>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	401a      	ands	r2, r3
 800685c:	4b0d      	ldr	r3, [pc, #52]	; (8006894 <vTaskPlaceOnEventList+0x90>)
 800685e:	601a      	str	r2, [r3, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006866:	d107      	bne.n	8006878 <vTaskPlaceOnEventList+0x74>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8006868:	4b09      	ldr	r3, [pc, #36]	; (8006890 <vTaskPlaceOnEventList+0x8c>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	3304      	adds	r3, #4
 800686e:	480a      	ldr	r0, [pc, #40]	; (8006898 <vTaskPlaceOnEventList+0x94>)
 8006870:	4619      	mov	r1, r3
 8006872:	f001 fea1 	bl	80085b8 <vListInsertEnd>
 8006876:	e007      	b.n	8006888 <vTaskPlaceOnEventList+0x84>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
 8006878:	4b08      	ldr	r3, [pc, #32]	; (800689c <vTaskPlaceOnEventList+0x98>)
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	4413      	add	r3, r2
 8006880:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 8006882:	68f8      	ldr	r0, [r7, #12]
 8006884:	f000 fae8 	bl	8006e58 <prvAddCurrentTaskToDelayedList>
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006888:	3710      	adds	r7, #16
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	2000009c 	.word	0x2000009c
 8006894:	2000017c 	.word	0x2000017c
 8006898:	20000160 	.word	0x20000160
 800689c:	20000178 	.word	0x20000178

080068a0 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b088      	sub	sp, #32
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	607a      	str	r2, [r7, #4]
TickType_t xTimeToWake;

	configASSERT( pxEventList );
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d109      	bne.n	80068c6 <vTaskPlaceOnUnorderedEventList+0x26>
 80068b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b6:	f383 8811 	msr	BASEPRI, r3
 80068ba:	f3bf 8f6f 	isb	sy
 80068be:	f3bf 8f4f 	dsb	sy
 80068c2:	61bb      	str	r3, [r7, #24]
 80068c4:	e7fe      	b.n	80068c4 <vTaskPlaceOnUnorderedEventList+0x24>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80068c6:	4b23      	ldr	r3, [pc, #140]	; (8006954 <vTaskPlaceOnUnorderedEventList+0xb4>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d109      	bne.n	80068e2 <vTaskPlaceOnUnorderedEventList+0x42>
 80068ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d2:	f383 8811 	msr	BASEPRI, r3
 80068d6:	f3bf 8f6f 	isb	sy
 80068da:	f3bf 8f4f 	dsb	sy
 80068de:	617b      	str	r3, [r7, #20]
 80068e0:	e7fe      	b.n	80068e0 <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80068e2:	4b1d      	ldr	r3, [pc, #116]	; (8006958 <vTaskPlaceOnUnorderedEventList+0xb8>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	68ba      	ldr	r2, [r7, #8]
 80068e8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80068ec:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80068ee:	4b1a      	ldr	r3, [pc, #104]	; (8006958 <vTaskPlaceOnUnorderedEventList+0xb8>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	3318      	adds	r3, #24
 80068f4:	68f8      	ldr	r0, [r7, #12]
 80068f6:	4619      	mov	r1, r3
 80068f8:	f001 fe5e 	bl	80085b8 <vListInsertEnd>

	/* The task must be removed from the ready list before it is added to the
	blocked list.  Exclusive access can be assured to the ready list as the
	scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80068fc:	4b16      	ldr	r3, [pc, #88]	; (8006958 <vTaskPlaceOnUnorderedEventList+0xb8>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	3304      	adds	r3, #4
 8006902:	4618      	mov	r0, r3
 8006904:	f001 feb4 	bl	8008670 <uxListRemove>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d10b      	bne.n	8006926 <vTaskPlaceOnUnorderedEventList+0x86>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800690e:	4b12      	ldr	r3, [pc, #72]	; (8006958 <vTaskPlaceOnUnorderedEventList+0xb8>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006914:	2201      	movs	r2, #1
 8006916:	fa02 f303 	lsl.w	r3, r2, r3
 800691a:	43da      	mvns	r2, r3
 800691c:	4b0f      	ldr	r3, [pc, #60]	; (800695c <vTaskPlaceOnUnorderedEventList+0xbc>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	401a      	ands	r2, r3
 8006922:	4b0e      	ldr	r3, [pc, #56]	; (800695c <vTaskPlaceOnUnorderedEventList+0xbc>)
 8006924:	601a      	str	r2, [r3, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800692c:	d107      	bne.n	800693e <vTaskPlaceOnUnorderedEventList+0x9e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800692e:	4b0a      	ldr	r3, [pc, #40]	; (8006958 <vTaskPlaceOnUnorderedEventList+0xb8>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	3304      	adds	r3, #4
 8006934:	480a      	ldr	r0, [pc, #40]	; (8006960 <vTaskPlaceOnUnorderedEventList+0xc0>)
 8006936:	4619      	mov	r1, r3
 8006938:	f001 fe3e 	bl	80085b8 <vListInsertEnd>
 800693c:	e007      	b.n	800694e <vTaskPlaceOnUnorderedEventList+0xae>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xTickCount + xTicksToWait;
 800693e:	4b09      	ldr	r3, [pc, #36]	; (8006964 <vTaskPlaceOnUnorderedEventList+0xc4>)
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4413      	add	r3, r2
 8006946:	61fb      	str	r3, [r7, #28]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 8006948:	69f8      	ldr	r0, [r7, #28]
 800694a:	f000 fa85 	bl	8006e58 <prvAddCurrentTaskToDelayedList>
			will manage it correctly. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800694e:	3720      	adds	r7, #32
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}
 8006954:	20000194 	.word	0x20000194
 8006958:	2000009c 	.word	0x2000009c
 800695c:	2000017c 	.word	0x2000017c
 8006960:	20000160 	.word	0x20000160
 8006964:	20000178 	.word	0x20000178

08006968 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d109      	bne.n	800698c <vTaskPlaceOnEventListRestricted+0x24>
 8006978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800697c:	f383 8811 	msr	BASEPRI, r3
 8006980:	f3bf 8f6f 	isb	sy
 8006984:	f3bf 8f4f 	dsb	sy
 8006988:	60bb      	str	r3, [r7, #8]
 800698a:	e7fe      	b.n	800698a <vTaskPlaceOnEventListRestricted+0x22>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800698c:	4b13      	ldr	r3, [pc, #76]	; (80069dc <vTaskPlaceOnEventListRestricted+0x74>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	3318      	adds	r3, #24
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	4619      	mov	r1, r3
 8006996:	f001 fe0f 	bl	80085b8 <vListInsertEnd>

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800699a:	4b10      	ldr	r3, [pc, #64]	; (80069dc <vTaskPlaceOnEventListRestricted+0x74>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	3304      	adds	r3, #4
 80069a0:	4618      	mov	r0, r3
 80069a2:	f001 fe65 	bl	8008670 <uxListRemove>
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d10b      	bne.n	80069c4 <vTaskPlaceOnEventListRestricted+0x5c>
		{
			/* The current task must be in a ready list, so there is no need to
			check, and the port reset macro can be called directly. */
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80069ac:	4b0b      	ldr	r3, [pc, #44]	; (80069dc <vTaskPlaceOnEventListRestricted+0x74>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b2:	2201      	movs	r2, #1
 80069b4:	fa02 f303 	lsl.w	r3, r2, r3
 80069b8:	43da      	mvns	r2, r3
 80069ba:	4b09      	ldr	r3, [pc, #36]	; (80069e0 <vTaskPlaceOnEventListRestricted+0x78>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	401a      	ands	r2, r3
 80069c0:	4b07      	ldr	r3, [pc, #28]	; (80069e0 <vTaskPlaceOnEventListRestricted+0x78>)
 80069c2:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
 80069c4:	4b07      	ldr	r3, [pc, #28]	; (80069e4 <vTaskPlaceOnEventListRestricted+0x7c>)
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	4413      	add	r3, r2
 80069cc:	60fb      	str	r3, [r7, #12]

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 80069ce:	68f8      	ldr	r0, [r7, #12]
 80069d0:	f000 fa42 	bl	8006e58 <prvAddCurrentTaskToDelayedList>
	}
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	2000009c 	.word	0x2000009c
 80069e0:	2000017c 	.word	0x2000017c
 80069e4:	20000178 	.word	0x20000178

080069e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b086      	sub	sp, #24
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d109      	bne.n	8006a12 <xTaskRemoveFromEventList+0x2a>
 80069fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a02:	f383 8811 	msr	BASEPRI, r3
 8006a06:	f3bf 8f6f 	isb	sy
 8006a0a:	f3bf 8f4f 	dsb	sy
 8006a0e:	60fb      	str	r3, [r7, #12]
 8006a10:	e7fe      	b.n	8006a10 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	3318      	adds	r3, #24
 8006a16:	4618      	mov	r0, r3
 8006a18:	f001 fe2a 	bl	8008670 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a1c:	4b1d      	ldr	r3, [pc, #116]	; (8006a94 <xTaskRemoveFromEventList+0xac>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d11c      	bne.n	8006a5e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	3304      	adds	r3, #4
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f001 fe21 	bl	8008670 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a32:	2201      	movs	r2, #1
 8006a34:	409a      	lsls	r2, r3
 8006a36:	4b18      	ldr	r3, [pc, #96]	; (8006a98 <xTaskRemoveFromEventList+0xb0>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	431a      	orrs	r2, r3
 8006a3c:	4b16      	ldr	r3, [pc, #88]	; (8006a98 <xTaskRemoveFromEventList+0xb0>)
 8006a3e:	601a      	str	r2, [r3, #0]
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a44:	4613      	mov	r3, r2
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	4413      	add	r3, r2
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	4a13      	ldr	r2, [pc, #76]	; (8006a9c <xTaskRemoveFromEventList+0xb4>)
 8006a4e:	441a      	add	r2, r3
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	3304      	adds	r3, #4
 8006a54:	4610      	mov	r0, r2
 8006a56:	4619      	mov	r1, r3
 8006a58:	f001 fdae 	bl	80085b8 <vListInsertEnd>
 8006a5c:	e005      	b.n	8006a6a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	3318      	adds	r3, #24
 8006a62:	480f      	ldr	r0, [pc, #60]	; (8006aa0 <xTaskRemoveFromEventList+0xb8>)
 8006a64:	4619      	mov	r1, r3
 8006a66:	f001 fda7 	bl	80085b8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a6e:	4b0d      	ldr	r3, [pc, #52]	; (8006aa4 <xTaskRemoveFromEventList+0xbc>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d905      	bls.n	8006a84 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006a7c:	4b0a      	ldr	r3, [pc, #40]	; (8006aa8 <xTaskRemoveFromEventList+0xc0>)
 8006a7e:	2201      	movs	r2, #1
 8006a80:	601a      	str	r2, [r3, #0]
 8006a82:	e001      	b.n	8006a88 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8006a84:	2300      	movs	r3, #0
 8006a86:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006a88:	697b      	ldr	r3, [r7, #20]
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3718      	adds	r7, #24
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	bf00      	nop
 8006a94:	20000194 	.word	0x20000194
 8006a98:	2000017c 	.word	0x2000017c
 8006a9c:	200000a0 	.word	0x200000a0
 8006aa0:	20000134 	.word	0x20000134
 8006aa4:	2000009c 	.word	0x2000009c
 8006aa8:	20000188 	.word	0x20000188

08006aac <xTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b086      	sub	sp, #24
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;
BaseType_t xReturn;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8006ab6:	4b2b      	ldr	r3, [pc, #172]	; (8006b64 <xTaskRemoveFromUnorderedEventList+0xb8>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d109      	bne.n	8006ad2 <xTaskRemoveFromUnorderedEventList+0x26>
 8006abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac2:	f383 8811 	msr	BASEPRI, r3
 8006ac6:	f3bf 8f6f 	isb	sy
 8006aca:	f3bf 8f4f 	dsb	sy
 8006ace:	60fb      	str	r3, [r7, #12]
 8006ad0:	e7fe      	b.n	8006ad0 <xTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d109      	bne.n	8006afc <xTaskRemoveFromUnorderedEventList+0x50>
 8006ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aec:	f383 8811 	msr	BASEPRI, r3
 8006af0:	f3bf 8f6f 	isb	sy
 8006af4:	f3bf 8f4f 	dsb	sy
 8006af8:	60bb      	str	r3, [r7, #8]
 8006afa:	e7fe      	b.n	8006afa <xTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f001 fdb7 	bl	8008670 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	3304      	adds	r3, #4
 8006b06:	4618      	mov	r0, r3
 8006b08:	f001 fdb2 	bl	8008670 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b10:	2201      	movs	r2, #1
 8006b12:	409a      	lsls	r2, r3
 8006b14:	4b14      	ldr	r3, [pc, #80]	; (8006b68 <xTaskRemoveFromUnorderedEventList+0xbc>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	431a      	orrs	r2, r3
 8006b1a:	4b13      	ldr	r3, [pc, #76]	; (8006b68 <xTaskRemoveFromUnorderedEventList+0xbc>)
 8006b1c:	601a      	str	r2, [r3, #0]
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b22:	4613      	mov	r3, r2
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	4413      	add	r3, r2
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	4a10      	ldr	r2, [pc, #64]	; (8006b6c <xTaskRemoveFromUnorderedEventList+0xc0>)
 8006b2c:	441a      	add	r2, r3
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	3304      	adds	r3, #4
 8006b32:	4610      	mov	r0, r2
 8006b34:	4619      	mov	r1, r3
 8006b36:	f001 fd3f 	bl	80085b8 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b3e:	4b0c      	ldr	r3, [pc, #48]	; (8006b70 <xTaskRemoveFromUnorderedEventList+0xc4>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d905      	bls.n	8006b54 <xTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006b4c:	4b09      	ldr	r3, [pc, #36]	; (8006b74 <xTaskRemoveFromUnorderedEventList+0xc8>)
 8006b4e:	2201      	movs	r2, #1
 8006b50:	601a      	str	r2, [r3, #0]
 8006b52:	e001      	b.n	8006b58 <xTaskRemoveFromUnorderedEventList+0xac>
	}
	else
	{
		xReturn = pdFALSE;
 8006b54:	2300      	movs	r3, #0
 8006b56:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006b58:	697b      	ldr	r3, [r7, #20]
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3718      	adds	r7, #24
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	20000194 	.word	0x20000194
 8006b68:	2000017c 	.word	0x2000017c
 8006b6c:	200000a0 	.word	0x200000a0
 8006b70:	2000009c 	.word	0x2000009c
 8006b74:	20000188 	.word	0x20000188

08006b78 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b085      	sub	sp, #20
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d109      	bne.n	8006b9a <vTaskSetTimeOutState+0x22>
 8006b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8a:	f383 8811 	msr	BASEPRI, r3
 8006b8e:	f3bf 8f6f 	isb	sy
 8006b92:	f3bf 8f4f 	dsb	sy
 8006b96:	60fb      	str	r3, [r7, #12]
 8006b98:	e7fe      	b.n	8006b98 <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006b9a:	4b06      	ldr	r3, [pc, #24]	; (8006bb4 <vTaskSetTimeOutState+0x3c>)
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006ba2:	4b05      	ldr	r3, [pc, #20]	; (8006bb8 <vTaskSetTimeOutState+0x40>)
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	605a      	str	r2, [r3, #4]
}
 8006baa:	3714      	adds	r7, #20
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr
 8006bb4:	2000018c 	.word	0x2000018c
 8006bb8:	20000178 	.word	0x20000178

08006bbc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b086      	sub	sp, #24
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d109      	bne.n	8006be0 <xTaskCheckForTimeOut+0x24>
 8006bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd0:	f383 8811 	msr	BASEPRI, r3
 8006bd4:	f3bf 8f6f 	isb	sy
 8006bd8:	f3bf 8f4f 	dsb	sy
 8006bdc:	60fb      	str	r3, [r7, #12]
 8006bde:	e7fe      	b.n	8006bde <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d109      	bne.n	8006bfa <xTaskCheckForTimeOut+0x3e>
 8006be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bea:	f383 8811 	msr	BASEPRI, r3
 8006bee:	f3bf 8f6f 	isb	sy
 8006bf2:	f3bf 8f4f 	dsb	sy
 8006bf6:	60bb      	str	r3, [r7, #8]
 8006bf8:	e7fe      	b.n	8006bf8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8006bfa:	f001 fe53 	bl	80088a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006bfe:	4b1c      	ldr	r3, [pc, #112]	; (8006c70 <xTaskCheckForTimeOut+0xb4>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	613b      	str	r3, [r7, #16]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c0c:	d102      	bne.n	8006c14 <xTaskCheckForTimeOut+0x58>
			{
				xReturn = pdFALSE;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	617b      	str	r3, [r7, #20]
 8006c12:	e026      	b.n	8006c62 <xTaskCheckForTimeOut+0xa6>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	4b16      	ldr	r3, [pc, #88]	; (8006c74 <xTaskCheckForTimeOut+0xb8>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d007      	beq.n	8006c30 <xTaskCheckForTimeOut+0x74>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	685a      	ldr	r2, [r3, #4]
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d802      	bhi.n	8006c30 <xTaskCheckForTimeOut+0x74>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	617b      	str	r3, [r7, #20]
 8006c2e:	e018      	b.n	8006c62 <xTaskCheckForTimeOut+0xa6>
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	693a      	ldr	r2, [r7, #16]
 8006c36:	1ad2      	subs	r2, r2, r3
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d20e      	bcs.n	8006c5e <xTaskCheckForTimeOut+0xa2>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6859      	ldr	r1, [r3, #4]
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	1acb      	subs	r3, r1, r3
 8006c4c:	441a      	add	r2, r3
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f7ff ff90 	bl	8006b78 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	617b      	str	r3, [r7, #20]
 8006c5c:	e001      	b.n	8006c62 <xTaskCheckForTimeOut+0xa6>
		}
		else
		{
			xReturn = pdTRUE;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8006c62:	f001 fe4d 	bl	8008900 <vPortExitCritical>

	return xReturn;
 8006c66:	697b      	ldr	r3, [r7, #20]
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3718      	adds	r7, #24
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	20000178 	.word	0x20000178
 8006c74:	2000018c 	.word	0x2000018c

08006c78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006c78:	b480      	push	{r7}
 8006c7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006c7c:	4b03      	ldr	r3, [pc, #12]	; (8006c8c <vTaskMissedYield+0x14>)
 8006c7e:	2201      	movs	r2, #1
 8006c80:	601a      	str	r2, [r3, #0]
}
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop
 8006c8c:	20000188 	.word	0x20000188

08006c90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
 8006c98:	f000 f8a4 	bl	8006de4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006c9c:	4b07      	ldr	r3, [pc, #28]	; (8006cbc <prvIdleTask+0x2c>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d907      	bls.n	8006cb4 <prvIdleTask+0x24>
			{
				taskYIELD();
 8006ca4:	4b06      	ldr	r3, [pc, #24]	; (8006cc0 <prvIdleTask+0x30>)
 8006ca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006caa:	601a      	str	r2, [r3, #0]
 8006cac:	f3bf 8f4f 	dsb	sy
 8006cb0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8006cb4:	f7fa f816 	bl	8000ce4 <vApplicationIdleHook>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 8006cb8:	e7ee      	b.n	8006c98 <prvIdleTask+0x8>
 8006cba:	bf00      	nop
 8006cbc:	200000a0 	.word	0x200000a0
 8006cc0:	e000ed04 	.word	0xe000ed04

08006cc4 <prvInitialiseTCBVariables>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b086      	sub	sp, #24
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	607a      	str	r2, [r7, #4]
 8006cd0:	603b      	str	r3, [r7, #0]
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	617b      	str	r3, [r7, #20]
 8006cd6:	e012      	b.n	8006cfe <prvInitialiseTCBVariables+0x3a>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8006cd8:	68ba      	ldr	r2, [r7, #8]
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	4413      	add	r3, r2
 8006cde:	781a      	ldrb	r2, [r3, #0]
 8006ce0:	68f9      	ldr	r1, [r7, #12]
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	440b      	add	r3, r1
 8006ce6:	3330      	adds	r3, #48	; 0x30
 8006ce8:	711a      	strb	r2, [r3, #4]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006cea:	68ba      	ldr	r2, [r7, #8]
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	4413      	add	r3, r2
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d100      	bne.n	8006cf8 <prvInitialiseTCBVariables+0x34>
		{
			break;
 8006cf6:	e005      	b.n	8006d04 <prvInitialiseTCBVariables+0x40>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	617b      	str	r3, [r7, #20]
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	2b09      	cmp	r3, #9
 8006d02:	d9e9      	bls.n	8006cd8 <prvInitialiseTCBVariables+0x14>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2b04      	cmp	r3, #4
 8006d10:	d901      	bls.n	8006d16 <prvInitialiseTCBVariables+0x52>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006d12:	2304      	movs	r3, #4
 8006d14:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	641a      	str	r2, [r3, #64]	; 0x40
		pxTCB->uxMutexesHeld = 0;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2200      	movs	r2, #0
 8006d26:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	3304      	adds	r3, #4
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f001 fc37 	bl	80085a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	3318      	adds	r3, #24
 8006d36:	4618      	mov	r0, r3
 8006d38:	f001 fc32 	bl	80085a0 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	68fa      	ldr	r2, [r7, #12]
 8006d40:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f1c3 0205 	rsb	r2, r3, #5
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portUSING_MPU_WRAPPERS */

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	649a      	str	r2, [r3, #72]	; 0x48
		pxTCB->eNotifyState = eNotWaitingNotification;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
 8006d60:	3718      	adds	r7, #24
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop

08006d68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d6e:	2300      	movs	r3, #0
 8006d70:	607b      	str	r3, [r7, #4]
 8006d72:	e00c      	b.n	8006d8e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	4613      	mov	r3, r2
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	4413      	add	r3, r2
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	4a11      	ldr	r2, [pc, #68]	; (8006dc4 <prvInitialiseTaskLists+0x5c>)
 8006d80:	4413      	add	r3, r2
 8006d82:	4618      	mov	r0, r3
 8006d84:	f001 fbec 	bl	8008560 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	607b      	str	r3, [r7, #4]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2b04      	cmp	r3, #4
 8006d92:	d9ef      	bls.n	8006d74 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8006d94:	480c      	ldr	r0, [pc, #48]	; (8006dc8 <prvInitialiseTaskLists+0x60>)
 8006d96:	f001 fbe3 	bl	8008560 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006d9a:	480c      	ldr	r0, [pc, #48]	; (8006dcc <prvInitialiseTaskLists+0x64>)
 8006d9c:	f001 fbe0 	bl	8008560 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006da0:	480b      	ldr	r0, [pc, #44]	; (8006dd0 <prvInitialiseTaskLists+0x68>)
 8006da2:	f001 fbdd 	bl	8008560 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006da6:	480b      	ldr	r0, [pc, #44]	; (8006dd4 <prvInitialiseTaskLists+0x6c>)
 8006da8:	f001 fbda 	bl	8008560 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006dac:	480a      	ldr	r0, [pc, #40]	; (8006dd8 <prvInitialiseTaskLists+0x70>)
 8006dae:	f001 fbd7 	bl	8008560 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006db2:	4b0a      	ldr	r3, [pc, #40]	; (8006ddc <prvInitialiseTaskLists+0x74>)
 8006db4:	4a04      	ldr	r2, [pc, #16]	; (8006dc8 <prvInitialiseTaskLists+0x60>)
 8006db6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006db8:	4b09      	ldr	r3, [pc, #36]	; (8006de0 <prvInitialiseTaskLists+0x78>)
 8006dba:	4a04      	ldr	r2, [pc, #16]	; (8006dcc <prvInitialiseTaskLists+0x64>)
 8006dbc:	601a      	str	r2, [r3, #0]
}
 8006dbe:	3708      	adds	r7, #8
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	200000a0 	.word	0x200000a0
 8006dc8:	20000104 	.word	0x20000104
 8006dcc:	20000118 	.word	0x20000118
 8006dd0:	20000134 	.word	0x20000134
 8006dd4:	20000148 	.word	0x20000148
 8006dd8:	20000160 	.word	0x20000160
 8006ddc:	2000012c 	.word	0x2000012c
 8006de0:	20000130 	.word	0x20000130

08006de4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b082      	sub	sp, #8
 8006de8:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 8006dea:	e028      	b.n	8006e3e <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8006dec:	f7ff fafe 	bl	80063ec <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8006df0:	4b16      	ldr	r3, [pc, #88]	; (8006e4c <prvCheckTasksWaitingTermination+0x68>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	bf14      	ite	ne
 8006df8:	2300      	movne	r3, #0
 8006dfa:	2301      	moveq	r3, #1
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8006e00:	f7ff fb02 	bl	8006408 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d119      	bne.n	8006e3e <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8006e0a:	f001 fd4b 	bl	80088a4 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006e0e:	4b0f      	ldr	r3, [pc, #60]	; (8006e4c <prvCheckTasksWaitingTermination+0x68>)
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	3304      	adds	r3, #4
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f001 fc28 	bl	8008670 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8006e20:	4b0b      	ldr	r3, [pc, #44]	; (8006e50 <prvCheckTasksWaitingTermination+0x6c>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	1e5a      	subs	r2, r3, #1
 8006e26:	4b0a      	ldr	r3, [pc, #40]	; (8006e50 <prvCheckTasksWaitingTermination+0x6c>)
 8006e28:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
 8006e2a:	4b0a      	ldr	r3, [pc, #40]	; (8006e54 <prvCheckTasksWaitingTermination+0x70>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	1e5a      	subs	r2, r3, #1
 8006e30:	4b08      	ldr	r3, [pc, #32]	; (8006e54 <prvCheckTasksWaitingTermination+0x70>)
 8006e32:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
 8006e34:	f001 fd64 	bl	8008900 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8006e38:	6838      	ldr	r0, [r7, #0]
 8006e3a:	f000 f87b 	bl	8006f34 <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 8006e3e:	4b05      	ldr	r3, [pc, #20]	; (8006e54 <prvCheckTasksWaitingTermination+0x70>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d1d2      	bne.n	8006dec <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
 8006e46:	3708      	adds	r7, #8
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}
 8006e4c:	20000148 	.word	0x20000148
 8006e50:	20000174 	.word	0x20000174
 8006e54:	2000015c 	.word	0x2000015c

08006e58 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8006e60:	4b13      	ldr	r3, [pc, #76]	; (8006eb0 <prvAddCurrentTaskToDelayedList+0x58>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
 8006e68:	4b12      	ldr	r3, [pc, #72]	; (8006eb4 <prvAddCurrentTaskToDelayedList+0x5c>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d209      	bcs.n	8006e86 <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8006e72:	4b11      	ldr	r3, [pc, #68]	; (8006eb8 <prvAddCurrentTaskToDelayedList+0x60>)
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	4b0e      	ldr	r3, [pc, #56]	; (8006eb0 <prvAddCurrentTaskToDelayedList+0x58>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	3304      	adds	r3, #4
 8006e7c:	4610      	mov	r0, r2
 8006e7e:	4619      	mov	r1, r3
 8006e80:	f001 fbbe 	bl	8008600 <vListInsert>
 8006e84:	e010      	b.n	8006ea8 <prvAddCurrentTaskToDelayedList+0x50>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8006e86:	4b0d      	ldr	r3, [pc, #52]	; (8006ebc <prvAddCurrentTaskToDelayedList+0x64>)
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	4b09      	ldr	r3, [pc, #36]	; (8006eb0 <prvAddCurrentTaskToDelayedList+0x58>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	3304      	adds	r3, #4
 8006e90:	4610      	mov	r0, r2
 8006e92:	4619      	mov	r1, r3
 8006e94:	f001 fbb4 	bl	8008600 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 8006e98:	4b09      	ldr	r3, [pc, #36]	; (8006ec0 <prvAddCurrentTaskToDelayedList+0x68>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d202      	bcs.n	8006ea8 <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
 8006ea2:	4b07      	ldr	r3, [pc, #28]	; (8006ec0 <prvAddCurrentTaskToDelayedList+0x68>)
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006ea8:	3708      	adds	r7, #8
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	2000009c 	.word	0x2000009c
 8006eb4:	20000178 	.word	0x20000178
 8006eb8:	20000130 	.word	0x20000130
 8006ebc:	2000012c 	.word	0x2000012c
 8006ec0:	20000034 	.word	0x20000034

08006ec4 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	4603      	mov	r3, r0
 8006ecc:	6039      	str	r1, [r7, #0]
 8006ece:	80fb      	strh	r3, [r7, #6]
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d106      	bne.n	8006ee4 <prvAllocateTCBAndStack+0x20>
 8006ed6:	88fb      	ldrh	r3, [r7, #6]
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	4618      	mov	r0, r3
 8006edc:	f001 fde2 	bl	8008aa4 <pvPortMalloc>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	e000      	b.n	8006ee6 <prvAllocateTCBAndStack+0x22>
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	60bb      	str	r3, [r7, #8]

		if( pxStack != NULL )
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d00e      	beq.n	8006f0c <prvAllocateTCBAndStack+0x48>
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8006eee:	2050      	movs	r0, #80	; 0x50
 8006ef0:	f001 fdd8 	bl	8008aa4 <pvPortMalloc>
 8006ef4:	60f8      	str	r0, [r7, #12]

			if( pxNewTCB != NULL )
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d003      	beq.n	8006f04 <prvAllocateTCBAndStack+0x40>
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	68ba      	ldr	r2, [r7, #8]
 8006f00:	631a      	str	r2, [r3, #48]	; 0x30
 8006f02:	e005      	b.n	8006f10 <prvAllocateTCBAndStack+0x4c>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
 8006f04:	68b8      	ldr	r0, [r7, #8]
 8006f06:	f001 fe93 	bl	8008c30 <vPortFree>
 8006f0a:	e001      	b.n	8006f10 <prvAllocateTCBAndStack+0x4c>
			}
		}
		else
		{
			pxNewTCB = NULL;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	60fb      	str	r3, [r7, #12]
		}
	}
	#endif /* portSTACK_GROWTH */

	if( pxNewTCB != NULL )
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d008      	beq.n	8006f28 <prvAllocateTCBAndStack+0x64>
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f1a:	88fb      	ldrh	r3, [r7, #6]
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	4610      	mov	r0, r2
 8006f20:	21a5      	movs	r1, #165	; 0xa5
 8006f22:	461a      	mov	r2, r3
 8006f24:	f002 f820 	bl	8008f68 <memset>
		}
		#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
	}

	return pxNewTCB;
 8006f28:	68fb      	ldr	r3, [r7, #12]
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3710      	adds	r7, #16
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop

08006f34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b082      	sub	sp, #8
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f40:	4618      	mov	r0, r3
 8006f42:	f001 fe75 	bl	8008c30 <vPortFree>
		}
		#endif

		vPortFree( pxTCB );
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f001 fe72 	bl	8008c30 <vPortFree>
	}
 8006f4c:	3708      	adds	r7, #8
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop

08006f54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006f54:	b480      	push	{r7}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f5a:	4b0e      	ldr	r3, [pc, #56]	; (8006f94 <prvResetNextTaskUnblockTime+0x40>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d101      	bne.n	8006f68 <prvResetNextTaskUnblockTime+0x14>
 8006f64:	2301      	movs	r3, #1
 8006f66:	e000      	b.n	8006f6a <prvResetNextTaskUnblockTime+0x16>
 8006f68:	2300      	movs	r3, #0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d004      	beq.n	8006f78 <prvResetNextTaskUnblockTime+0x24>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006f6e:	4b0a      	ldr	r3, [pc, #40]	; (8006f98 <prvResetNextTaskUnblockTime+0x44>)
 8006f70:	f04f 32ff 	mov.w	r2, #4294967295
 8006f74:	601a      	str	r2, [r3, #0]
 8006f76:	e008      	b.n	8006f8a <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006f78:	4b06      	ldr	r3, [pc, #24]	; (8006f94 <prvResetNextTaskUnblockTime+0x40>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	685a      	ldr	r2, [r3, #4]
 8006f86:	4b04      	ldr	r3, [pc, #16]	; (8006f98 <prvResetNextTaskUnblockTime+0x44>)
 8006f88:	601a      	str	r2, [r3, #0]
	}
}
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr
 8006f94:	2000012c 	.word	0x2000012c
 8006f98:	20000034 	.word	0x20000034

08006f9c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006fa2:	4b05      	ldr	r3, [pc, #20]	; (8006fb8 <xTaskGetCurrentTaskHandle+0x1c>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006fa8:	687b      	ldr	r3, [r7, #4]
	}
 8006faa:	4618      	mov	r0, r3
 8006fac:	370c      	adds	r7, #12
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop
 8006fb8:	2000009c 	.word	0x2000009c

08006fbc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006fc2:	4b0b      	ldr	r3, [pc, #44]	; (8006ff0 <xTaskGetSchedulerState+0x34>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d102      	bne.n	8006fd0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	607b      	str	r3, [r7, #4]
 8006fce:	e008      	b.n	8006fe2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fd0:	4b08      	ldr	r3, [pc, #32]	; (8006ff4 <xTaskGetSchedulerState+0x38>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d102      	bne.n	8006fde <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006fd8:	2302      	movs	r3, #2
 8006fda:	607b      	str	r3, [r7, #4]
 8006fdc:	e001      	b.n	8006fe2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006fe2:	687b      	ldr	r3, [r7, #4]
	}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	370c      	adds	r7, #12
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr
 8006ff0:	20000180 	.word	0x20000180
 8006ff4:	20000194 	.word	0x20000194

08006ff8 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d062      	beq.n	80070d0 <vTaskPriorityInherit+0xd8>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800700e:	4b32      	ldr	r3, [pc, #200]	; (80070d8 <vTaskPriorityInherit+0xe0>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007014:	429a      	cmp	r2, r3
 8007016:	d25b      	bcs.n	80070d0 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	699b      	ldr	r3, [r3, #24]
 800701c:	2b00      	cmp	r3, #0
 800701e:	db06      	blt.n	800702e <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007020:	4b2d      	ldr	r3, [pc, #180]	; (80070d8 <vTaskPriorityInherit+0xe0>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007026:	f1c3 0205 	rsb	r2, r3, #5
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6959      	ldr	r1, [r3, #20]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007036:	4613      	mov	r3, r2
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	4413      	add	r3, r2
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	4a27      	ldr	r2, [pc, #156]	; (80070dc <vTaskPriorityInherit+0xe4>)
 8007040:	4413      	add	r3, r2
 8007042:	4299      	cmp	r1, r3
 8007044:	d101      	bne.n	800704a <vTaskPriorityInherit+0x52>
 8007046:	2301      	movs	r3, #1
 8007048:	e000      	b.n	800704c <vTaskPriorityInherit+0x54>
 800704a:	2300      	movs	r3, #0
 800704c:	2b00      	cmp	r3, #0
 800704e:	d03a      	beq.n	80070c6 <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	3304      	adds	r3, #4
 8007054:	4618      	mov	r0, r3
 8007056:	f001 fb0b 	bl	8008670 <uxListRemove>
 800705a:	4603      	mov	r3, r0
 800705c:	2b00      	cmp	r3, #0
 800705e:	d115      	bne.n	800708c <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007064:	491d      	ldr	r1, [pc, #116]	; (80070dc <vTaskPriorityInherit+0xe4>)
 8007066:	4613      	mov	r3, r2
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	4413      	add	r3, r2
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	440b      	add	r3, r1
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d10a      	bne.n	800708c <vTaskPriorityInherit+0x94>
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800707a:	2201      	movs	r2, #1
 800707c:	fa02 f303 	lsl.w	r3, r2, r3
 8007080:	43da      	mvns	r2, r3
 8007082:	4b17      	ldr	r3, [pc, #92]	; (80070e0 <vTaskPriorityInherit+0xe8>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	401a      	ands	r2, r3
 8007088:	4b15      	ldr	r3, [pc, #84]	; (80070e0 <vTaskPriorityInherit+0xe8>)
 800708a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800708c:	4b12      	ldr	r3, [pc, #72]	; (80070d8 <vTaskPriorityInherit+0xe0>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800709a:	2201      	movs	r2, #1
 800709c:	409a      	lsls	r2, r3
 800709e:	4b10      	ldr	r3, [pc, #64]	; (80070e0 <vTaskPriorityInherit+0xe8>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	431a      	orrs	r2, r3
 80070a4:	4b0e      	ldr	r3, [pc, #56]	; (80070e0 <vTaskPriorityInherit+0xe8>)
 80070a6:	601a      	str	r2, [r3, #0]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ac:	4613      	mov	r3, r2
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	4413      	add	r3, r2
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	4a09      	ldr	r2, [pc, #36]	; (80070dc <vTaskPriorityInherit+0xe4>)
 80070b6:	441a      	add	r2, r3
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	3304      	adds	r3, #4
 80070bc:	4610      	mov	r0, r2
 80070be:	4619      	mov	r1, r3
 80070c0:	f001 fa7a 	bl	80085b8 <vListInsertEnd>
 80070c4:	e004      	b.n	80070d0 <vTaskPriorityInherit+0xd8>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80070c6:	4b04      	ldr	r3, [pc, #16]	; (80070d8 <vTaskPriorityInherit+0xe0>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80070d0:	3710      	adds	r7, #16
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	bf00      	nop
 80070d8:	2000009c 	.word	0x2000009c
 80070dc:	200000a0 	.word	0x200000a0
 80070e0:	2000017c 	.word	0x2000017c

080070e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b086      	sub	sp, #24
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80070f0:	2300      	movs	r3, #0
 80070f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d05d      	beq.n	80071b6 <xTaskPriorityDisinherit+0xd2>
		{
			configASSERT( pxTCB->uxMutexesHeld );
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d109      	bne.n	8007116 <xTaskPriorityDisinherit+0x32>
 8007102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007106:	f383 8811 	msr	BASEPRI, r3
 800710a:	f3bf 8f6f 	isb	sy
 800710e:	f3bf 8f4f 	dsb	sy
 8007112:	60fb      	str	r3, [r7, #12]
 8007114:	e7fe      	b.n	8007114 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800711a:	1e5a      	subs	r2, r3, #1
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	645a      	str	r2, [r3, #68]	; 0x44

			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007128:	429a      	cmp	r2, r3
 800712a:	d044      	beq.n	80071b6 <xTaskPriorityDisinherit+0xd2>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007130:	2b00      	cmp	r3, #0
 8007132:	d140      	bne.n	80071b6 <xTaskPriorityDisinherit+0xd2>
					/* A task can only have an inhertied priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	3304      	adds	r3, #4
 8007138:	4618      	mov	r0, r3
 800713a:	f001 fa99 	bl	8008670 <uxListRemove>
 800713e:	4603      	mov	r3, r0
 8007140:	2b00      	cmp	r3, #0
 8007142:	d115      	bne.n	8007170 <xTaskPriorityDisinherit+0x8c>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007148:	491d      	ldr	r1, [pc, #116]	; (80071c0 <xTaskPriorityDisinherit+0xdc>)
 800714a:	4613      	mov	r3, r2
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	4413      	add	r3, r2
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	440b      	add	r3, r1
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d10a      	bne.n	8007170 <xTaskPriorityDisinherit+0x8c>
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715e:	2201      	movs	r2, #1
 8007160:	fa02 f303 	lsl.w	r3, r2, r3
 8007164:	43da      	mvns	r2, r3
 8007166:	4b17      	ldr	r3, [pc, #92]	; (80071c4 <xTaskPriorityDisinherit+0xe0>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	401a      	ands	r2, r3
 800716c:	4b15      	ldr	r3, [pc, #84]	; (80071c4 <xTaskPriorityDisinherit+0xe0>)
 800716e:	601a      	str	r2, [r3, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800717c:	f1c3 0205 	rsb	r2, r3, #5
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007188:	2201      	movs	r2, #1
 800718a:	409a      	lsls	r2, r3
 800718c:	4b0d      	ldr	r3, [pc, #52]	; (80071c4 <xTaskPriorityDisinherit+0xe0>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	431a      	orrs	r2, r3
 8007192:	4b0c      	ldr	r3, [pc, #48]	; (80071c4 <xTaskPriorityDisinherit+0xe0>)
 8007194:	601a      	str	r2, [r3, #0]
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800719a:	4613      	mov	r3, r2
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	4413      	add	r3, r2
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	4a07      	ldr	r2, [pc, #28]	; (80071c0 <xTaskPriorityDisinherit+0xdc>)
 80071a4:	441a      	add	r2, r3
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	3304      	adds	r3, #4
 80071aa:	4610      	mov	r0, r2
 80071ac:	4619      	mov	r1, r3
 80071ae:	f001 fa03 	bl	80085b8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80071b2:	2301      	movs	r3, #1
 80071b4:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80071b6:	697b      	ldr	r3, [r7, #20]
	}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3718      	adds	r7, #24
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}
 80071c0:	200000a0 	.word	0x200000a0
 80071c4:	2000017c 	.word	0x2000017c

080071c8 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80071ce:	4b09      	ldr	r3, [pc, #36]	; (80071f4 <uxTaskResetEventItemValue+0x2c>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	699b      	ldr	r3, [r3, #24]
 80071d4:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071d6:	4b07      	ldr	r3, [pc, #28]	; (80071f4 <uxTaskResetEventItemValue+0x2c>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a06      	ldr	r2, [pc, #24]	; (80071f4 <uxTaskResetEventItemValue+0x2c>)
 80071dc:	6812      	ldr	r2, [r2, #0]
 80071de:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80071e0:	f1c2 0205 	rsb	r2, r2, #5
 80071e4:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80071e6:	687b      	ldr	r3, [r7, #4]
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	370c      	adds	r7, #12
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr
 80071f4:	2000009c 	.word	0x2000009c

080071f8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80071f8:	b480      	push	{r7}
 80071fa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80071fc:	4b07      	ldr	r3, [pc, #28]	; (800721c <pvTaskIncrementMutexHeldCount+0x24>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d004      	beq.n	800720e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007204:	4b05      	ldr	r3, [pc, #20]	; (800721c <pvTaskIncrementMutexHeldCount+0x24>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800720a:	3201      	adds	r2, #1
 800720c:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
 800720e:	4b03      	ldr	r3, [pc, #12]	; (800721c <pvTaskIncrementMutexHeldCount+0x24>)
 8007210:	681b      	ldr	r3, [r3, #0]
	}
 8007212:	4618      	mov	r0, r3
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr
 800721c:	2000009c 	.word	0x2000009c

08007220 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8007220:	b580      	push	{r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800722a:	f001 fb3b 	bl	80088a4 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800722e:	4b31      	ldr	r3, [pc, #196]	; (80072f4 <ulTaskNotifyTake+0xd4>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007234:	2b00      	cmp	r3, #0
 8007236:	d138      	bne.n	80072aa <ulTaskNotifyTake+0x8a>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 8007238:	4b2e      	ldr	r3, [pc, #184]	; (80072f4 <ulTaskNotifyTake+0xd4>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	2201      	movs	r2, #1
 800723e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

				if( xTicksToWait > ( TickType_t ) 0 )
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d030      	beq.n	80072aa <ulTaskNotifyTake+0x8a>
				{
					/* The task is going to block.  First it must be removed
					from the ready list. */
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8007248:	4b2a      	ldr	r3, [pc, #168]	; (80072f4 <ulTaskNotifyTake+0xd4>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	3304      	adds	r3, #4
 800724e:	4618      	mov	r0, r3
 8007250:	f001 fa0e 	bl	8008670 <uxListRemove>
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d10b      	bne.n	8007272 <ulTaskNotifyTake+0x52>
					{
						/* The current task must be in a ready list, so there is
						no need to check, and the port reset macro can be called
						directly. */
						portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800725a:	4b26      	ldr	r3, [pc, #152]	; (80072f4 <ulTaskNotifyTake+0xd4>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007260:	2201      	movs	r2, #1
 8007262:	fa02 f303 	lsl.w	r3, r2, r3
 8007266:	43da      	mvns	r2, r3
 8007268:	4b23      	ldr	r3, [pc, #140]	; (80072f8 <ulTaskNotifyTake+0xd8>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	401a      	ands	r2, r3
 800726e:	4b22      	ldr	r3, [pc, #136]	; (80072f8 <ulTaskNotifyTake+0xd8>)
 8007270:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					#if ( INCLUDE_vTaskSuspend == 1 )
					{
						if( xTicksToWait == portMAX_DELAY )
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007278:	d107      	bne.n	800728a <ulTaskNotifyTake+0x6a>
						{
							/* Add the task to the suspended task list instead
							of a delayed task list to ensure the task is not
							woken by a timing event.  It will block
							indefinitely. */
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800727a:	4b1e      	ldr	r3, [pc, #120]	; (80072f4 <ulTaskNotifyTake+0xd4>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	3304      	adds	r3, #4
 8007280:	481e      	ldr	r0, [pc, #120]	; (80072fc <ulTaskNotifyTake+0xdc>)
 8007282:	4619      	mov	r1, r3
 8007284:	f001 f998 	bl	80085b8 <vListInsertEnd>
 8007288:	e007      	b.n	800729a <ulTaskNotifyTake+0x7a>
						{
							/* Calculate the time at which the task should be
							woken if no notification events occur.  This may
							overflow but this doesn't matter, the scheduler will
							handle it. */
							xTimeToWake = xTickCount + xTicksToWait;
 800728a:	4b1d      	ldr	r3, [pc, #116]	; (8007300 <ulTaskNotifyTake+0xe0>)
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	4413      	add	r3, r2
 8007292:	60fb      	str	r3, [r7, #12]
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 8007294:	68f8      	ldr	r0, [r7, #12]
 8007296:	f7ff fddf 	bl	8006e58 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800729a:	4b1a      	ldr	r3, [pc, #104]	; (8007304 <ulTaskNotifyTake+0xe4>)
 800729c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072a0:	601a      	str	r2, [r3, #0]
 80072a2:	f3bf 8f4f 	dsb	sy
 80072a6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80072aa:	f001 fb29 	bl	8008900 <vPortExitCritical>

		taskENTER_CRITICAL();
 80072ae:	f001 faf9 	bl	80088a4 <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80072b2:	4b10      	ldr	r3, [pc, #64]	; (80072f4 <ulTaskNotifyTake+0xd4>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072b8:	60bb      	str	r3, [r7, #8]

			if( ulReturn != 0UL )
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00c      	beq.n	80072da <ulTaskNotifyTake+0xba>
			{
				if( xClearCountOnExit != pdFALSE )
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d004      	beq.n	80072d0 <ulTaskNotifyTake+0xb0>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80072c6:	4b0b      	ldr	r3, [pc, #44]	; (80072f4 <ulTaskNotifyTake+0xd4>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2200      	movs	r2, #0
 80072cc:	649a      	str	r2, [r3, #72]	; 0x48
 80072ce:	e004      	b.n	80072da <ulTaskNotifyTake+0xba>
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
 80072d0:	4b08      	ldr	r3, [pc, #32]	; (80072f4 <ulTaskNotifyTake+0xd4>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80072d6:	3a01      	subs	r2, #1
 80072d8:	649a      	str	r2, [r3, #72]	; 0x48
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 80072da:	4b06      	ldr	r3, [pc, #24]	; (80072f4 <ulTaskNotifyTake+0xd4>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	2200      	movs	r2, #0
 80072e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		}
		taskEXIT_CRITICAL();
 80072e4:	f001 fb0c 	bl	8008900 <vPortExitCritical>

		return ulReturn;
 80072e8:	68bb      	ldr	r3, [r7, #8]
	}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3710      	adds	r7, #16
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	2000009c 	.word	0x2000009c
 80072f8:	2000017c 	.word	0x2000017c
 80072fc:	20000160 	.word	0x20000160
 8007300:	20000178 	.word	0x20000178
 8007304:	e000ed04 	.word	0xe000ed04

08007308 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8007308:	b580      	push	{r7, lr}
 800730a:	b086      	sub	sp, #24
 800730c:	af00      	add	r7, sp, #0
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	607a      	str	r2, [r7, #4]
 8007314:	603b      	str	r3, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8007316:	f001 fac5 	bl	80088a4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->eNotifyState != eNotified )
 800731a:	4b39      	ldr	r3, [pc, #228]	; (8007400 <xTaskNotifyWait+0xf8>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007322:	b2db      	uxtb	r3, r3
 8007324:	2b02      	cmp	r3, #2
 8007326:	d03f      	beq.n	80073a8 <xTaskNotifyWait+0xa0>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8007328:	4b35      	ldr	r3, [pc, #212]	; (8007400 <xTaskNotifyWait+0xf8>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800732e:	68fa      	ldr	r2, [r7, #12]
 8007330:	43d2      	mvns	r2, r2
 8007332:	400a      	ands	r2, r1
 8007334:	649a      	str	r2, [r3, #72]	; 0x48

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 8007336:	4b32      	ldr	r3, [pc, #200]	; (8007400 <xTaskNotifyWait+0xf8>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	2201      	movs	r2, #1
 800733c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

				if( xTicksToWait > ( TickType_t ) 0 )
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d030      	beq.n	80073a8 <xTaskNotifyWait+0xa0>
				{
					/* The task is going to block.  First it must be removed
					from the	ready list. */
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8007346:	4b2e      	ldr	r3, [pc, #184]	; (8007400 <xTaskNotifyWait+0xf8>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	3304      	adds	r3, #4
 800734c:	4618      	mov	r0, r3
 800734e:	f001 f98f 	bl	8008670 <uxListRemove>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d10b      	bne.n	8007370 <xTaskNotifyWait+0x68>
					{
						/* The current task must be in a ready list, so there is
						no need to check, and the port reset macro can be called
						directly. */
						portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007358:	4b29      	ldr	r3, [pc, #164]	; (8007400 <xTaskNotifyWait+0xf8>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800735e:	2201      	movs	r2, #1
 8007360:	fa02 f303 	lsl.w	r3, r2, r3
 8007364:	43da      	mvns	r2, r3
 8007366:	4b27      	ldr	r3, [pc, #156]	; (8007404 <xTaskNotifyWait+0xfc>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	401a      	ands	r2, r3
 800736c:	4b25      	ldr	r3, [pc, #148]	; (8007404 <xTaskNotifyWait+0xfc>)
 800736e:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					#if ( INCLUDE_vTaskSuspend == 1 )
					{
						if( xTicksToWait == portMAX_DELAY )
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007376:	d107      	bne.n	8007388 <xTaskNotifyWait+0x80>
						{
							/* Add the task to the suspended task list instead
							of a delayed task list to ensure the task is not
							woken by a timing event.  It will block
							indefinitely. */
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8007378:	4b21      	ldr	r3, [pc, #132]	; (8007400 <xTaskNotifyWait+0xf8>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	3304      	adds	r3, #4
 800737e:	4822      	ldr	r0, [pc, #136]	; (8007408 <xTaskNotifyWait+0x100>)
 8007380:	4619      	mov	r1, r3
 8007382:	f001 f919 	bl	80085b8 <vListInsertEnd>
 8007386:	e007      	b.n	8007398 <xTaskNotifyWait+0x90>
						{
							/* Calculate the time at which the task should be
							woken if no notification events occur.  This may
							overflow but this doesn't matter, the scheduler will
							handle it. */
							xTimeToWake = xTickCount + xTicksToWait;
 8007388:	4b20      	ldr	r3, [pc, #128]	; (800740c <xTaskNotifyWait+0x104>)
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	4413      	add	r3, r2
 8007390:	613b      	str	r3, [r7, #16]
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 8007392:	6938      	ldr	r0, [r7, #16]
 8007394:	f7ff fd60 	bl	8006e58 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8007398:	4b1d      	ldr	r3, [pc, #116]	; (8007410 <xTaskNotifyWait+0x108>)
 800739a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800739e:	601a      	str	r2, [r3, #0]
 80073a0:	f3bf 8f4f 	dsb	sy
 80073a4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80073a8:	f001 faaa 	bl	8008900 <vPortExitCritical>

		taskENTER_CRITICAL();
 80073ac:	f001 fa7a 	bl	80088a4 <vPortEnterCritical>
		{
			if( pulNotificationValue != NULL )
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d004      	beq.n	80073c0 <xTaskNotifyWait+0xb8>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80073b6:	4b12      	ldr	r3, [pc, #72]	; (8007400 <xTaskNotifyWait+0xf8>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	601a      	str	r2, [r3, #0]

			/* If eNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->eNotifyState == eWaitingNotification )
 80073c0:	4b0f      	ldr	r3, [pc, #60]	; (8007400 <xTaskNotifyWait+0xf8>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d102      	bne.n	80073d4 <xTaskNotifyWait+0xcc>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80073ce:	2300      	movs	r3, #0
 80073d0:	617b      	str	r3, [r7, #20]
 80073d2:	e008      	b.n	80073e6 <xTaskNotifyWait+0xde>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80073d4:	4b0a      	ldr	r3, [pc, #40]	; (8007400 <xTaskNotifyWait+0xf8>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80073da:	68ba      	ldr	r2, [r7, #8]
 80073dc:	43d2      	mvns	r2, r2
 80073de:	400a      	ands	r2, r1
 80073e0:	649a      	str	r2, [r3, #72]	; 0x48
				xReturn = pdTRUE;
 80073e2:	2301      	movs	r3, #1
 80073e4:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 80073e6:	4b06      	ldr	r3, [pc, #24]	; (8007400 <xTaskNotifyWait+0xf8>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		}
		taskEXIT_CRITICAL();
 80073f0:	f001 fa86 	bl	8008900 <vPortExitCritical>

		return xReturn;
 80073f4:	697b      	ldr	r3, [r7, #20]
	}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3718      	adds	r7, #24
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	2000009c 	.word	0x2000009c
 8007404:	2000017c 	.word	0x2000017c
 8007408:	20000160 	.word	0x20000160
 800740c:	20000178 	.word	0x20000178
 8007410:	e000ed04 	.word	0xe000ed04

08007414 <xTaskNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction )
	{
 8007414:	b580      	push	{r7, lr}
 8007416:	b08a      	sub	sp, #40	; 0x28
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	4613      	mov	r3, r2
 8007420:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8007422:	2301      	movs	r3, #1
 8007424:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( xTaskToNotify );
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d109      	bne.n	8007440 <xTaskNotify+0x2c>
 800742c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007430:	f383 8811 	msr	BASEPRI, r3
 8007434:	f3bf 8f6f 	isb	sy
 8007438:	f3bf 8f4f 	dsb	sy
 800743c:	61bb      	str	r3, [r7, #24]
 800743e:	e7fe      	b.n	800743e <xTaskNotify+0x2a>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8007444:	f001 fa2e 	bl	80088a4 <vPortEnterCritical>
		{
			eOriginalNotifyState = pxTCB->eNotifyState;
 8007448:	6a3b      	ldr	r3, [r7, #32]
 800744a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800744e:	77fb      	strb	r3, [r7, #31]

			pxTCB->eNotifyState = eNotified;
 8007450:	6a3b      	ldr	r3, [r7, #32]
 8007452:	2202      	movs	r2, #2
 8007454:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

			switch( eAction )
 8007458:	79fb      	ldrb	r3, [r7, #7]
 800745a:	2b04      	cmp	r3, #4
 800745c:	d827      	bhi.n	80074ae <xTaskNotify+0x9a>
 800745e:	a201      	add	r2, pc, #4	; (adr r2, 8007464 <xTaskNotify+0x50>)
 8007460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007464:	080074af 	.word	0x080074af
 8007468:	08007479 	.word	0x08007479
 800746c:	08007487 	.word	0x08007487
 8007470:	08007493 	.word	0x08007493
 8007474:	0800749b 	.word	0x0800749b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007478:	6a3b      	ldr	r3, [r7, #32]
 800747a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	431a      	orrs	r2, r3
 8007480:	6a3b      	ldr	r3, [r7, #32]
 8007482:	649a      	str	r2, [r3, #72]	; 0x48
					break;
 8007484:	e013      	b.n	80074ae <xTaskNotify+0x9a>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007486:	6a3b      	ldr	r3, [r7, #32]
 8007488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800748a:	1c5a      	adds	r2, r3, #1
 800748c:	6a3b      	ldr	r3, [r7, #32]
 800748e:	649a      	str	r2, [r3, #72]	; 0x48
					break;
 8007490:	e00d      	b.n	80074ae <xTaskNotify+0x9a>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007492:	6a3b      	ldr	r3, [r7, #32]
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	649a      	str	r2, [r3, #72]	; 0x48
					break;
 8007498:	e009      	b.n	80074ae <xTaskNotify+0x9a>

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 800749a:	7ffb      	ldrb	r3, [r7, #31]
 800749c:	2b02      	cmp	r3, #2
 800749e:	d003      	beq.n	80074a8 <xTaskNotify+0x94>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80074a0:	6a3b      	ldr	r3, [r7, #32]
 80074a2:	68ba      	ldr	r2, [r7, #8]
 80074a4:	649a      	str	r2, [r3, #72]	; 0x48
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80074a6:	e001      	b.n	80074ac <xTaskNotify+0x98>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
 80074a8:	2300      	movs	r3, #0
 80074aa:	627b      	str	r3, [r7, #36]	; 0x24
					}
					break;
 80074ac:	bf00      	nop
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 80074ae:	7ffb      	ldrb	r3, [r7, #31]
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d138      	bne.n	8007526 <xTaskNotify+0x112>
			{
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 80074b4:	6a3b      	ldr	r3, [r7, #32]
 80074b6:	3304      	adds	r3, #4
 80074b8:	4618      	mov	r0, r3
 80074ba:	f001 f8d9 	bl	8008670 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80074be:	6a3b      	ldr	r3, [r7, #32]
 80074c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c2:	2201      	movs	r2, #1
 80074c4:	409a      	lsls	r2, r3
 80074c6:	4b1b      	ldr	r3, [pc, #108]	; (8007534 <xTaskNotify+0x120>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	431a      	orrs	r2, r3
 80074cc:	4b19      	ldr	r3, [pc, #100]	; (8007534 <xTaskNotify+0x120>)
 80074ce:	601a      	str	r2, [r3, #0]
 80074d0:	6a3b      	ldr	r3, [r7, #32]
 80074d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074d4:	4613      	mov	r3, r2
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	4413      	add	r3, r2
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	4a16      	ldr	r2, [pc, #88]	; (8007538 <xTaskNotify+0x124>)
 80074de:	441a      	add	r2, r3
 80074e0:	6a3b      	ldr	r3, [r7, #32]
 80074e2:	3304      	adds	r3, #4
 80074e4:	4610      	mov	r0, r2
 80074e6:	4619      	mov	r1, r3
 80074e8:	f001 f866 	bl	80085b8 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80074ec:	6a3b      	ldr	r3, [r7, #32]
 80074ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d009      	beq.n	8007508 <xTaskNotify+0xf4>
 80074f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f8:	f383 8811 	msr	BASEPRI, r3
 80074fc:	f3bf 8f6f 	isb	sy
 8007500:	f3bf 8f4f 	dsb	sy
 8007504:	617b      	str	r3, [r7, #20]
 8007506:	e7fe      	b.n	8007506 <xTaskNotify+0xf2>

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007508:	6a3b      	ldr	r3, [r7, #32]
 800750a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800750c:	4b0b      	ldr	r3, [pc, #44]	; (800753c <xTaskNotify+0x128>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007512:	429a      	cmp	r2, r3
 8007514:	d907      	bls.n	8007526 <xTaskNotify+0x112>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					portYIELD_WITHIN_API();
 8007516:	4b0a      	ldr	r3, [pc, #40]	; (8007540 <xTaskNotify+0x12c>)
 8007518:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800751c:	601a      	str	r2, [r3, #0]
 800751e:	f3bf 8f4f 	dsb	sy
 8007522:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007526:	f001 f9eb 	bl	8008900 <vPortExitCritical>

		return xReturn;
 800752a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800752c:	4618      	mov	r0, r3
 800752e:	3728      	adds	r7, #40	; 0x28
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}
 8007534:	2000017c 	.word	0x2000017c
 8007538:	200000a0 	.word	0x200000a0
 800753c:	2000009c 	.word	0x2000009c
 8007540:	e000ed04 	.word	0xe000ed04

08007544 <xTaskNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007544:	b580      	push	{r7, lr}
 8007546:	b08e      	sub	sp, #56	; 0x38
 8007548:	af00      	add	r7, sp, #0
 800754a:	60f8      	str	r0, [r7, #12]
 800754c:	60b9      	str	r1, [r7, #8]
 800754e:	603b      	str	r3, [r7, #0]
 8007550:	4613      	mov	r3, r2
 8007552:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8007554:	2301      	movs	r3, #1
 8007556:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d109      	bne.n	8007572 <xTaskNotifyFromISR+0x2e>
 800755e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007562:	f383 8811 	msr	BASEPRI, r3
 8007566:	f3bf 8f6f 	isb	sy
 800756a:	f3bf 8f4f 	dsb	sy
 800756e:	627b      	str	r3, [r7, #36]	; 0x24
 8007570:	e7fe      	b.n	8007570 <xTaskNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007572:	f001 fa57 	bl	8008a24 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	633b      	str	r3, [r7, #48]	; 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800757a:	f3ef 8211 	mrs	r2, BASEPRI
 800757e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007582:	f383 8811 	msr	BASEPRI, r3
 8007586:	f3bf 8f6f 	isb	sy
 800758a:	f3bf 8f4f 	dsb	sy
 800758e:	623a      	str	r2, [r7, #32]
 8007590:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007592:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007594:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			eOriginalNotifyState = pxTCB->eNotifyState;
 8007596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007598:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800759c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			pxTCB->eNotifyState = eNotified;
 80075a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a2:	2202      	movs	r2, #2
 80075a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

			switch( eAction )
 80075a8:	79fb      	ldrb	r3, [r7, #7]
 80075aa:	2b04      	cmp	r3, #4
 80075ac:	d828      	bhi.n	8007600 <xTaskNotifyFromISR+0xbc>
 80075ae:	a201      	add	r2, pc, #4	; (adr r2, 80075b4 <xTaskNotifyFromISR+0x70>)
 80075b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b4:	08007601 	.word	0x08007601
 80075b8:	080075c9 	.word	0x080075c9
 80075bc:	080075d7 	.word	0x080075d7
 80075c0:	080075e3 	.word	0x080075e3
 80075c4:	080075eb 	.word	0x080075eb
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80075c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	431a      	orrs	r2, r3
 80075d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d2:	649a      	str	r2, [r3, #72]	; 0x48
					break;
 80075d4:	e014      	b.n	8007600 <xTaskNotifyFromISR+0xbc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80075d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075da:	1c5a      	adds	r2, r3, #1
 80075dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075de:	649a      	str	r2, [r3, #72]	; 0x48
					break;
 80075e0:	e00e      	b.n	8007600 <xTaskNotifyFromISR+0xbc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80075e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e4:	68ba      	ldr	r2, [r7, #8]
 80075e6:	649a      	str	r2, [r3, #72]	; 0x48
					break;
 80075e8:	e00a      	b.n	8007600 <xTaskNotifyFromISR+0xbc>

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 80075ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80075ee:	2b02      	cmp	r3, #2
 80075f0:	d003      	beq.n	80075fa <xTaskNotifyFromISR+0xb6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80075f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f4:	68ba      	ldr	r2, [r7, #8]
 80075f6:	649a      	str	r2, [r3, #72]	; 0x48
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80075f8:	e001      	b.n	80075fe <xTaskNotifyFromISR+0xba>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
 80075fa:	2300      	movs	r3, #0
 80075fc:	637b      	str	r3, [r7, #52]	; 0x34
					}
					break;
 80075fe:	bf00      	nop
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 8007600:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007604:	2b01      	cmp	r3, #1
 8007606:	d141      	bne.n	800768c <xTaskNotifyFromISR+0x148>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800760c:	2b00      	cmp	r3, #0
 800760e:	d009      	beq.n	8007624 <xTaskNotifyFromISR+0xe0>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007614:	f383 8811 	msr	BASEPRI, r3
 8007618:	f3bf 8f6f 	isb	sy
 800761c:	f3bf 8f4f 	dsb	sy
 8007620:	61bb      	str	r3, [r7, #24]
 8007622:	e7fe      	b.n	8007622 <xTaskNotifyFromISR+0xde>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007624:	4b1e      	ldr	r3, [pc, #120]	; (80076a0 <xTaskNotifyFromISR+0x15c>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d11c      	bne.n	8007666 <xTaskNotifyFromISR+0x122>
				{
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800762c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762e:	3304      	adds	r3, #4
 8007630:	4618      	mov	r0, r3
 8007632:	f001 f81d 	bl	8008670 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763a:	2201      	movs	r2, #1
 800763c:	409a      	lsls	r2, r3
 800763e:	4b19      	ldr	r3, [pc, #100]	; (80076a4 <xTaskNotifyFromISR+0x160>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	431a      	orrs	r2, r3
 8007644:	4b17      	ldr	r3, [pc, #92]	; (80076a4 <xTaskNotifyFromISR+0x160>)
 8007646:	601a      	str	r2, [r3, #0]
 8007648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800764c:	4613      	mov	r3, r2
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	4413      	add	r3, r2
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	4a14      	ldr	r2, [pc, #80]	; (80076a8 <xTaskNotifyFromISR+0x164>)
 8007656:	441a      	add	r2, r3
 8007658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765a:	3304      	adds	r3, #4
 800765c:	4610      	mov	r0, r2
 800765e:	4619      	mov	r1, r3
 8007660:	f000 ffaa 	bl	80085b8 <vListInsertEnd>
 8007664:	e005      	b.n	8007672 <xTaskNotifyFromISR+0x12e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007668:	3318      	adds	r3, #24
 800766a:	4810      	ldr	r0, [pc, #64]	; (80076ac <xTaskNotifyFromISR+0x168>)
 800766c:	4619      	mov	r1, r3
 800766e:	f000 ffa3 	bl	80085b8 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007676:	4b0e      	ldr	r3, [pc, #56]	; (80076b0 <xTaskNotifyFromISR+0x16c>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800767c:	429a      	cmp	r2, r3
 800767e:	d905      	bls.n	800768c <xTaskNotifyFromISR+0x148>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d002      	beq.n	800768c <xTaskNotifyFromISR+0x148>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	2201      	movs	r2, #1
 800768a:	601a      	str	r2, [r3, #0]
 800768c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800768e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8007696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8007698:	4618      	mov	r0, r3
 800769a:	3738      	adds	r7, #56	; 0x38
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}
 80076a0:	20000194 	.word	0x20000194
 80076a4:	2000017c 	.word	0x2000017c
 80076a8:	200000a0 	.word	0x200000a0
 80076ac:	20000134 	.word	0x20000134
 80076b0:	2000009c 	.word	0x2000009c

080076b4 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b08a      	sub	sp, #40	; 0x28
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d109      	bne.n	80076d8 <vTaskNotifyGiveFromISR+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80076c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c8:	f383 8811 	msr	BASEPRI, r3
 80076cc:	f3bf 8f6f 	isb	sy
 80076d0:	f3bf 8f4f 	dsb	sy
 80076d4:	61bb      	str	r3, [r7, #24]
 80076d6:	e7fe      	b.n	80076d6 <vTaskNotifyGiveFromISR+0x22>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80076d8:	f001 f9a4 	bl	8008a24 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	627b      	str	r3, [r7, #36]	; 0x24

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80076e0:	f3ef 8211 	mrs	r2, BASEPRI
 80076e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e8:	f383 8811 	msr	BASEPRI, r3
 80076ec:	f3bf 8f6f 	isb	sy
 80076f0:	f3bf 8f4f 	dsb	sy
 80076f4:	617a      	str	r2, [r7, #20]
 80076f6:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80076f8:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80076fa:	623b      	str	r3, [r7, #32]
		{
			eOriginalNotifyState = pxTCB->eNotifyState;
 80076fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fe:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007702:	77fb      	strb	r3, [r7, #31]
			pxTCB->eNotifyState = eNotified;
 8007704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007706:	2202      	movs	r2, #2
 8007708:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800770c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007710:	1c5a      	adds	r2, r3, #1
 8007712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007714:	649a      	str	r2, [r3, #72]	; 0x48

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 8007716:	7ffb      	ldrb	r3, [r7, #31]
 8007718:	2b01      	cmp	r3, #1
 800771a:	d141      	bne.n	80077a0 <vTaskNotifyGiveFromISR+0xec>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800771c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007720:	2b00      	cmp	r3, #0
 8007722:	d009      	beq.n	8007738 <vTaskNotifyGiveFromISR+0x84>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007728:	f383 8811 	msr	BASEPRI, r3
 800772c:	f3bf 8f6f 	isb	sy
 8007730:	f3bf 8f4f 	dsb	sy
 8007734:	60fb      	str	r3, [r7, #12]
 8007736:	e7fe      	b.n	8007736 <vTaskNotifyGiveFromISR+0x82>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007738:	4b1d      	ldr	r3, [pc, #116]	; (80077b0 <vTaskNotifyGiveFromISR+0xfc>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d11c      	bne.n	800777a <vTaskNotifyGiveFromISR+0xc6>
				{
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8007740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007742:	3304      	adds	r3, #4
 8007744:	4618      	mov	r0, r3
 8007746:	f000 ff93 	bl	8008670 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800774a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800774e:	2201      	movs	r2, #1
 8007750:	409a      	lsls	r2, r3
 8007752:	4b18      	ldr	r3, [pc, #96]	; (80077b4 <vTaskNotifyGiveFromISR+0x100>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	431a      	orrs	r2, r3
 8007758:	4b16      	ldr	r3, [pc, #88]	; (80077b4 <vTaskNotifyGiveFromISR+0x100>)
 800775a:	601a      	str	r2, [r3, #0]
 800775c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007760:	4613      	mov	r3, r2
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	4413      	add	r3, r2
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	4a13      	ldr	r2, [pc, #76]	; (80077b8 <vTaskNotifyGiveFromISR+0x104>)
 800776a:	441a      	add	r2, r3
 800776c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776e:	3304      	adds	r3, #4
 8007770:	4610      	mov	r0, r2
 8007772:	4619      	mov	r1, r3
 8007774:	f000 ff20 	bl	80085b8 <vListInsertEnd>
 8007778:	e005      	b.n	8007786 <vTaskNotifyGiveFromISR+0xd2>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800777a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777c:	3318      	adds	r3, #24
 800777e:	480f      	ldr	r0, [pc, #60]	; (80077bc <vTaskNotifyGiveFromISR+0x108>)
 8007780:	4619      	mov	r1, r3
 8007782:	f000 ff19 	bl	80085b8 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800778a:	4b0d      	ldr	r3, [pc, #52]	; (80077c0 <vTaskNotifyGiveFromISR+0x10c>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007790:	429a      	cmp	r2, r3
 8007792:	d905      	bls.n	80077a0 <vTaskNotifyGiveFromISR+0xec>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d002      	beq.n	80077a0 <vTaskNotifyGiveFromISR+0xec>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	2201      	movs	r2, #1
 800779e:	601a      	str	r2, [r3, #0]
 80077a0:	6a3b      	ldr	r3, [r7, #32]
 80077a2:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	f383 8811 	msr	BASEPRI, r3
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 80077aa:	3728      	adds	r7, #40	; 0x28
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	20000194 	.word	0x20000194
 80077b4:	2000017c 	.word	0x2000017c
 80077b8:	200000a0 	.word	0x200000a0
 80077bc:	20000134 	.word	0x20000134
 80077c0:	2000009c 	.word	0x2000009c

080077c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d109      	bne.n	80077ec <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80077d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077dc:	f383 8811 	msr	BASEPRI, r3
 80077e0:	f3bf 8f6f 	isb	sy
 80077e4:	f3bf 8f4f 	dsb	sy
 80077e8:	60bb      	str	r3, [r7, #8]
 80077ea:	e7fe      	b.n	80077ea <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80077ec:	f001 f85a 	bl	80088a4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077f8:	68f9      	ldr	r1, [r7, #12]
 80077fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80077fc:	fb01 f303 	mul.w	r3, r1, r3
 8007800:	441a      	add	r2, r3
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2200      	movs	r2, #0
 800780a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800781c:	3b01      	subs	r3, #1
 800781e:	68f9      	ldr	r1, [r7, #12]
 8007820:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007822:	fb01 f303 	mul.w	r3, r1, r3
 8007826:	441a      	add	r2, r3
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f04f 32ff 	mov.w	r2, #4294967295
 8007832:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f04f 32ff 	mov.w	r2, #4294967295
 800783a:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d114      	bne.n	800786c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d01a      	beq.n	8007880 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	3310      	adds	r3, #16
 800784e:	4618      	mov	r0, r3
 8007850:	f7ff f8ca 	bl	80069e8 <xTaskRemoveFromEventList>
 8007854:	4603      	mov	r3, r0
 8007856:	2b01      	cmp	r3, #1
 8007858:	d112      	bne.n	8007880 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800785a:	4b0d      	ldr	r3, [pc, #52]	; (8007890 <xQueueGenericReset+0xcc>)
 800785c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007860:	601a      	str	r2, [r3, #0]
 8007862:	f3bf 8f4f 	dsb	sy
 8007866:	f3bf 8f6f 	isb	sy
 800786a:	e009      	b.n	8007880 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	3310      	adds	r3, #16
 8007870:	4618      	mov	r0, r3
 8007872:	f000 fe75 	bl	8008560 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	3324      	adds	r3, #36	; 0x24
 800787a:	4618      	mov	r0, r3
 800787c:	f000 fe70 	bl	8008560 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007880:	f001 f83e 	bl	8008900 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007884:	2301      	movs	r3, #1
}
 8007886:	4618      	mov	r0, r3
 8007888:	3710      	adds	r7, #16
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	e000ed04 	.word	0xe000ed04

08007894 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b08a      	sub	sp, #40	; 0x28
 8007898:	af00      	add	r7, sp, #0
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	60b9      	str	r1, [r7, #8]
 800789e:	4613      	mov	r3, r2
 80078a0:	71fb      	strb	r3, [r7, #7]
Queue_t *pxNewQueue;
size_t xQueueSizeInBytes;
QueueHandle_t xReturn = NULL;
 80078a2:	2300      	movs	r3, #0
 80078a4:	623b      	str	r3, [r7, #32]

	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d109      	bne.n	80078c0 <xQueueGenericCreate+0x2c>
 80078ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b0:	f383 8811 	msr	BASEPRI, r3
 80078b4:	f3bf 8f6f 	isb	sy
 80078b8:	f3bf 8f4f 	dsb	sy
 80078bc:	617b      	str	r3, [r7, #20]
 80078be:	e7fe      	b.n	80078be <xQueueGenericCreate+0x2a>

	if( uxItemSize == ( UBaseType_t ) 0 )
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d102      	bne.n	80078cc <xQueueGenericCreate+0x38>
	{
		/* There is not going to be a queue storage area. */
		xQueueSizeInBytes = ( size_t ) 0;
 80078c6:	2300      	movs	r3, #0
 80078c8:	627b      	str	r3, [r7, #36]	; 0x24
 80078ca:	e005      	b.n	80078d8 <xQueueGenericCreate+0x44>
	}
	else
	{
		/* The queue is one byte longer than asked for to make wrap checking
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	68ba      	ldr	r2, [r7, #8]
 80078d0:	fb02 f303 	mul.w	r3, r2, r3
 80078d4:	3301      	adds	r3, #1
 80078d6:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Allocate the new queue structure and storage area. */
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80078d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078da:	334c      	adds	r3, #76	; 0x4c
 80078dc:	4618      	mov	r0, r3
 80078de:	f001 f8e1 	bl	8008aa4 <pvPortMalloc>
 80078e2:	61f8      	str	r0, [r7, #28]

	if( pcAllocatedBuffer != NULL )
 80078e4:	69fb      	ldr	r3, [r7, #28]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d019      	beq.n	800791e <xQueueGenericCreate+0x8a>
	{
		pxNewQueue = ( Queue_t * ) pcAllocatedBuffer; /*lint !e826 MISRA The buffer cannot be to small because it was dimensioned by sizeof( Queue_t ) + xQueueSizeInBytes. */
 80078ea:	69fb      	ldr	r3, [r7, #28]
 80078ec:	61bb      	str	r3, [r7, #24]

		if( uxItemSize == ( UBaseType_t ) 0 )
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d103      	bne.n	80078fc <xQueueGenericCreate+0x68>
		{
			/* No RAM was allocated for the queue storage area, but PC head
			cannot be set to NULL because NULL is used as a key to say the queue
			is used as a mutex.  Therefore just set pcHead to point to the queue
			as a benign value that is known to be within the memory map. */
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80078f4:	69bb      	ldr	r3, [r7, #24]
 80078f6:	69ba      	ldr	r2, [r7, #24]
 80078f8:	601a      	str	r2, [r3, #0]
 80078fa:	e004      	b.n	8007906 <xQueueGenericCreate+0x72>
		}
		else
		{
			/* Jump past the queue structure to find the location of the queue
			storage area - adding the padding bytes to get a better alignment. */
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8007902:	69bb      	ldr	r3, [r7, #24]
 8007904:	601a      	str	r2, [r3, #0]
		}

		/* Initialise the queue members as described above where the queue type
		is defined. */
		pxNewQueue->uxLength = uxQueueLength;
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	63da      	str	r2, [r3, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800790c:	69bb      	ldr	r3, [r7, #24]
 800790e:	68ba      	ldr	r2, [r7, #8]
 8007910:	641a      	str	r2, [r3, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007912:	69b8      	ldr	r0, [r7, #24]
 8007914:	2101      	movs	r1, #1
 8007916:	f7ff ff55 	bl	80077c4 <xQueueGenericReset>
			pxNewQueue->pxQueueSetContainer = NULL;
		}
		#endif /* configUSE_QUEUE_SETS */

		traceQUEUE_CREATE( pxNewQueue );
		xReturn = pxNewQueue;
 800791a:	69bb      	ldr	r3, [r7, #24]
 800791c:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800791e:	6a3b      	ldr	r3, [r7, #32]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d109      	bne.n	8007938 <xQueueGenericCreate+0xa4>
 8007924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007928:	f383 8811 	msr	BASEPRI, r3
 800792c:	f3bf 8f6f 	isb	sy
 8007930:	f3bf 8f4f 	dsb	sy
 8007934:	613b      	str	r3, [r7, #16]
 8007936:	e7fe      	b.n	8007936 <xQueueGenericCreate+0xa2>

	return xReturn;
 8007938:	6a3b      	ldr	r3, [r7, #32]
}
 800793a:	4618      	mov	r0, r3
 800793c:	3728      	adds	r7, #40	; 0x28
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop

08007944 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	4603      	mov	r3, r0
 800794c:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
 800794e:	204c      	movs	r0, #76	; 0x4c
 8007950:	f001 f8a8 	bl	8008aa4 <pvPortMalloc>
 8007954:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d02c      	beq.n	80079b6 <xQueueCreateMutex+0x72>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2200      	movs	r2, #0
 8007960:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2200      	movs	r2, #0
 8007966:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2200      	movs	r2, #0
 800796c:	609a      	str	r2, [r3, #8]
			pxNewQueue->u.pcReadFrom = NULL;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2200      	movs	r2, #0
 8007972:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2200      	movs	r2, #0
 8007978:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2201      	movs	r2, #1
 800797e:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2200      	movs	r2, #0
 8007984:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f04f 32ff 	mov.w	r2, #4294967295
 800798c:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f04f 32ff 	mov.w	r2, #4294967295
 8007994:	649a      	str	r2, [r3, #72]	; 0x48
				pxNewQueue->pxQueueSetContainer = NULL;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	3310      	adds	r3, #16
 800799a:	4618      	mov	r0, r3
 800799c:	f000 fde0 	bl	8008560 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	3324      	adds	r3, #36	; 0x24
 80079a4:	4618      	mov	r0, r3
 80079a6:	f000 fddb 	bl	8008560 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80079aa:	68f8      	ldr	r0, [r7, #12]
 80079ac:	2100      	movs	r1, #0
 80079ae:	2200      	movs	r2, #0
 80079b0:	2300      	movs	r3, #0
 80079b2:	f000 f813 	bl	80079dc <xQueueGenericSend>
		else
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d109      	bne.n	80079d0 <xQueueCreateMutex+0x8c>
 80079bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c0:	f383 8811 	msr	BASEPRI, r3
 80079c4:	f3bf 8f6f 	isb	sy
 80079c8:	f3bf 8f4f 	dsb	sy
 80079cc:	60bb      	str	r3, [r7, #8]
 80079ce:	e7fe      	b.n	80079ce <xQueueCreateMutex+0x8a>
		return pxNewQueue;
 80079d0:	68fb      	ldr	r3, [r7, #12]
	}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3710      	adds	r7, #16
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop

080079dc <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b08e      	sub	sp, #56	; 0x38
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	60f8      	str	r0, [r7, #12]
 80079e4:	60b9      	str	r1, [r7, #8]
 80079e6:	607a      	str	r2, [r7, #4]
 80079e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80079ea:	2300      	movs	r3, #0
 80079ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80079f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d109      	bne.n	8007a0c <xQueueGenericSend+0x30>
 80079f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fc:	f383 8811 	msr	BASEPRI, r3
 8007a00:	f3bf 8f6f 	isb	sy
 8007a04:	f3bf 8f4f 	dsb	sy
 8007a08:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a0a:	e7fe      	b.n	8007a0a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d103      	bne.n	8007a1a <xQueueGenericSend+0x3e>
 8007a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d101      	bne.n	8007a1e <xQueueGenericSend+0x42>
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e000      	b.n	8007a20 <xQueueGenericSend+0x44>
 8007a1e:	2300      	movs	r3, #0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d109      	bne.n	8007a38 <xQueueGenericSend+0x5c>
 8007a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a28:	f383 8811 	msr	BASEPRI, r3
 8007a2c:	f3bf 8f6f 	isb	sy
 8007a30:	f3bf 8f4f 	dsb	sy
 8007a34:	627b      	str	r3, [r7, #36]	; 0x24
 8007a36:	e7fe      	b.n	8007a36 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	2b02      	cmp	r3, #2
 8007a3c:	d103      	bne.n	8007a46 <xQueueGenericSend+0x6a>
 8007a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d101      	bne.n	8007a4a <xQueueGenericSend+0x6e>
 8007a46:	2301      	movs	r3, #1
 8007a48:	e000      	b.n	8007a4c <xQueueGenericSend+0x70>
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d109      	bne.n	8007a64 <xQueueGenericSend+0x88>
 8007a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a54:	f383 8811 	msr	BASEPRI, r3
 8007a58:	f3bf 8f6f 	isb	sy
 8007a5c:	f3bf 8f4f 	dsb	sy
 8007a60:	623b      	str	r3, [r7, #32]
 8007a62:	e7fe      	b.n	8007a62 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a64:	f7ff faaa 	bl	8006fbc <xTaskGetSchedulerState>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d102      	bne.n	8007a74 <xQueueGenericSend+0x98>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d101      	bne.n	8007a78 <xQueueGenericSend+0x9c>
 8007a74:	2301      	movs	r3, #1
 8007a76:	e000      	b.n	8007a7a <xQueueGenericSend+0x9e>
 8007a78:	2300      	movs	r3, #0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d109      	bne.n	8007a92 <xQueueGenericSend+0xb6>
 8007a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a82:	f383 8811 	msr	BASEPRI, r3
 8007a86:	f3bf 8f6f 	isb	sy
 8007a8a:	f3bf 8f4f 	dsb	sy
 8007a8e:	61fb      	str	r3, [r7, #28]
 8007a90:	e7fe      	b.n	8007a90 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007a92:	f000 ff07 	bl	80088a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d302      	bcc.n	8007aa8 <xQueueGenericSend+0xcc>
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	2b02      	cmp	r3, #2
 8007aa6:	d129      	bne.n	8007afc <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007aa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007aaa:	68b9      	ldr	r1, [r7, #8]
 8007aac:	683a      	ldr	r2, [r7, #0]
 8007aae:	f000 fbd7 	bl	8008260 <prvCopyDataToQueue>
 8007ab2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d010      	beq.n	8007ade <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 8007abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007abe:	3324      	adds	r3, #36	; 0x24
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f7fe ff91 	bl	80069e8 <xTaskRemoveFromEventList>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d113      	bne.n	8007af4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007acc:	4b3d      	ldr	r3, [pc, #244]	; (8007bc4 <xQueueGenericSend+0x1e8>)
 8007ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ad2:	601a      	str	r2, [r3, #0]
 8007ad4:	f3bf 8f4f 	dsb	sy
 8007ad8:	f3bf 8f6f 	isb	sy
 8007adc:	e00a      	b.n	8007af4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d007      	beq.n	8007af4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007ae4:	4b37      	ldr	r3, [pc, #220]	; (8007bc4 <xQueueGenericSend+0x1e8>)
 8007ae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aea:	601a      	str	r2, [r3, #0]
 8007aec:	f3bf 8f4f 	dsb	sy
 8007af0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007af4:	f000 ff04 	bl	8008900 <vPortExitCritical>
				return pdPASS;
 8007af8:	2301      	movs	r3, #1
 8007afa:	e05f      	b.n	8007bbc <xQueueGenericSend+0x1e0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d103      	bne.n	8007b0a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007b02:	f000 fefd 	bl	8008900 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007b06:	2300      	movs	r3, #0
 8007b08:	e058      	b.n	8007bbc <xQueueGenericSend+0x1e0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d106      	bne.n	8007b1e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8007b10:	f107 0314 	add.w	r3, r7, #20
 8007b14:	4618      	mov	r0, r3
 8007b16:	f7ff f82f 	bl	8006b78 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b1e:	f000 feef 	bl	8008900 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b22:	f7fe fc63 	bl	80063ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b26:	f000 febd 	bl	80088a4 <vPortEnterCritical>
 8007b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b32:	d102      	bne.n	8007b3a <xQueueGenericSend+0x15e>
 8007b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b36:	2200      	movs	r2, #0
 8007b38:	645a      	str	r2, [r3, #68]	; 0x44
 8007b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b42:	d102      	bne.n	8007b4a <xQueueGenericSend+0x16e>
 8007b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b46:	2200      	movs	r2, #0
 8007b48:	649a      	str	r2, [r3, #72]	; 0x48
 8007b4a:	f000 fed9 	bl	8008900 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b4e:	f107 0214 	add.w	r2, r7, #20
 8007b52:	1d3b      	adds	r3, r7, #4
 8007b54:	4610      	mov	r0, r2
 8007b56:	4619      	mov	r1, r3
 8007b58:	f7ff f830 	bl	8006bbc <xTaskCheckForTimeOut>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d124      	bne.n	8007bac <xQueueGenericSend+0x1d0>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007b62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b64:	f000 fc94 	bl	8008490 <prvIsQueueFull>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d018      	beq.n	8007ba0 <xQueueGenericSend+0x1c4>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b70:	f103 0210 	add.w	r2, r3, #16
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4610      	mov	r0, r2
 8007b78:	4619      	mov	r1, r3
 8007b7a:	f7fe fe43 	bl	8006804 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007b7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b80:	f000 fc02 	bl	8008388 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007b84:	f7fe fc40 	bl	8006408 <xTaskResumeAll>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d115      	bne.n	8007bba <xQueueGenericSend+0x1de>
				{
					portYIELD_WITHIN_API();
 8007b8e:	4b0d      	ldr	r3, [pc, #52]	; (8007bc4 <xQueueGenericSend+0x1e8>)
 8007b90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b94:	601a      	str	r2, [r3, #0]
 8007b96:	f3bf 8f4f 	dsb	sy
 8007b9a:	f3bf 8f6f 	isb	sy
 8007b9e:	e00c      	b.n	8007bba <xQueueGenericSend+0x1de>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007ba0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ba2:	f000 fbf1 	bl	8008388 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ba6:	f7fe fc2f 	bl	8006408 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 8007baa:	e772      	b.n	8007a92 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007bac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007bae:	f000 fbeb 	bl	8008388 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007bb2:	f7fe fc29 	bl	8006408 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	e000      	b.n	8007bbc <xQueueGenericSend+0x1e0>
		}
	}
 8007bba:	e76a      	b.n	8007a92 <xQueueGenericSend+0xb6>
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3738      	adds	r7, #56	; 0x38
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}
 8007bc4:	e000ed04 	.word	0xe000ed04

08007bc8 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b08e      	sub	sp, #56	; 0x38
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	607a      	str	r2, [r7, #4]
 8007bd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d109      	bne.n	8007bf4 <xQueueGenericSendFromISR+0x2c>
 8007be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be4:	f383 8811 	msr	BASEPRI, r3
 8007be8:	f3bf 8f6f 	isb	sy
 8007bec:	f3bf 8f4f 	dsb	sy
 8007bf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007bf2:	e7fe      	b.n	8007bf2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d103      	bne.n	8007c02 <xQueueGenericSendFromISR+0x3a>
 8007bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d101      	bne.n	8007c06 <xQueueGenericSendFromISR+0x3e>
 8007c02:	2301      	movs	r3, #1
 8007c04:	e000      	b.n	8007c08 <xQueueGenericSendFromISR+0x40>
 8007c06:	2300      	movs	r3, #0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d109      	bne.n	8007c20 <xQueueGenericSendFromISR+0x58>
 8007c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c10:	f383 8811 	msr	BASEPRI, r3
 8007c14:	f3bf 8f6f 	isb	sy
 8007c18:	f3bf 8f4f 	dsb	sy
 8007c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8007c1e:	e7fe      	b.n	8007c1e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	2b02      	cmp	r3, #2
 8007c24:	d103      	bne.n	8007c2e <xQueueGenericSendFromISR+0x66>
 8007c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d101      	bne.n	8007c32 <xQueueGenericSendFromISR+0x6a>
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e000      	b.n	8007c34 <xQueueGenericSendFromISR+0x6c>
 8007c32:	2300      	movs	r3, #0
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d109      	bne.n	8007c4c <xQueueGenericSendFromISR+0x84>
 8007c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c3c:	f383 8811 	msr	BASEPRI, r3
 8007c40:	f3bf 8f6f 	isb	sy
 8007c44:	f3bf 8f4f 	dsb	sy
 8007c48:	623b      	str	r3, [r7, #32]
 8007c4a:	e7fe      	b.n	8007c4a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007c4c:	f000 feea 	bl	8008a24 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007c50:	f3ef 8211 	mrs	r2, BASEPRI
 8007c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c58:	f383 8811 	msr	BASEPRI, r3
 8007c5c:	f3bf 8f6f 	isb	sy
 8007c60:	f3bf 8f4f 	dsb	sy
 8007c64:	61fa      	str	r2, [r7, #28]
 8007c66:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007c68:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d302      	bcc.n	8007c7e <xQueueGenericSendFromISR+0xb6>
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	d124      	bne.n	8007cc8 <xQueueGenericSendFromISR+0x100>
			/* A task can only have an inherited priority if it is a mutex
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  Therefore, unlike the xQueueGenericGive()
			function, there is no need to determine the need for priority
			disinheritance here or to clear the mutex holder TCB member. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007c7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c80:	68b9      	ldr	r1, [r7, #8]
 8007c82:	683a      	ldr	r2, [r7, #0]
 8007c84:	f000 faec 	bl	8008260 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 8007c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c90:	d112      	bne.n	8007cb8 <xQueueGenericSendFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d013      	beq.n	8007cc2 <xQueueGenericSendFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9c:	3324      	adds	r3, #36	; 0x24
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f7fe fea2 	bl	80069e8 <xTaskRemoveFromEventList>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d00b      	beq.n	8007cc2 <xQueueGenericSendFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d008      	beq.n	8007cc2 <xQueueGenericSendFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	601a      	str	r2, [r3, #0]
 8007cb6:	e004      	b.n	8007cc2 <xQueueGenericSendFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 8007cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cbc:	1c5a      	adds	r2, r3, #1
 8007cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc0:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	637b      	str	r3, [r7, #52]	; 0x34
 8007cc6:	e001      	b.n	8007ccc <xQueueGenericSendFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	637b      	str	r3, [r7, #52]	; 0x34
 8007ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cce:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3738      	adds	r7, #56	; 0x38
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b08a      	sub	sp, #40	; 0x28
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8007cee:	6a3b      	ldr	r3, [r7, #32]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d109      	bne.n	8007d08 <xQueueGiveFromISR+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf8:	f383 8811 	msr	BASEPRI, r3
 8007cfc:	f3bf 8f6f 	isb	sy
 8007d00:	f3bf 8f4f 	dsb	sy
 8007d04:	61bb      	str	r3, [r7, #24]
 8007d06:	e7fe      	b.n	8007d06 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used in the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007d08:	6a3b      	ldr	r3, [r7, #32]
 8007d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d009      	beq.n	8007d24 <xQueueGiveFromISR+0x44>
 8007d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d14:	f383 8811 	msr	BASEPRI, r3
 8007d18:	f3bf 8f6f 	isb	sy
 8007d1c:	f3bf 8f4f 	dsb	sy
 8007d20:	617b      	str	r3, [r7, #20]
 8007d22:	e7fe      	b.n	8007d22 <xQueueGiveFromISR+0x42>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d24:	f000 fe7e 	bl	8008a24 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007d28:	f3ef 8211 	mrs	r2, BASEPRI
 8007d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d30:	f383 8811 	msr	BASEPRI, r3
 8007d34:	f3bf 8f6f 	isb	sy
 8007d38:	f3bf 8f4f 	dsb	sy
 8007d3c:	613a      	str	r2, [r7, #16]
 8007d3e:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007d40:	693b      	ldr	r3, [r7, #16]
	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007d42:	61fb      	str	r3, [r7, #28]
	{
		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 8007d44:	6a3b      	ldr	r3, [r7, #32]
 8007d46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d48:	6a3b      	ldr	r3, [r7, #32]
 8007d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d224      	bcs.n	8007d9a <xQueueGiveFromISR+0xba>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  Therefore, unlike the xQueueGenericGive()
			function, there is no need to determine the need for priority
			disinheritance here or to clear the mutex holder TCB member. */

			++( pxQueue->uxMessagesWaiting );
 8007d50:	6a3b      	ldr	r3, [r7, #32]
 8007d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d54:	1c5a      	adds	r2, r3, #1
 8007d56:	6a3b      	ldr	r3, [r7, #32]
 8007d58:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 8007d5a:	6a3b      	ldr	r3, [r7, #32]
 8007d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d62:	d112      	bne.n	8007d8a <xQueueGiveFromISR+0xaa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d64:	6a3b      	ldr	r3, [r7, #32]
 8007d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d013      	beq.n	8007d94 <xQueueGiveFromISR+0xb4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d6c:	6a3b      	ldr	r3, [r7, #32]
 8007d6e:	3324      	adds	r3, #36	; 0x24
 8007d70:	4618      	mov	r0, r3
 8007d72:	f7fe fe39 	bl	80069e8 <xTaskRemoveFromEventList>
 8007d76:	4603      	mov	r3, r0
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d00b      	beq.n	8007d94 <xQueueGiveFromISR+0xb4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d008      	beq.n	8007d94 <xQueueGiveFromISR+0xb4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	2201      	movs	r2, #1
 8007d86:	601a      	str	r2, [r3, #0]
 8007d88:	e004      	b.n	8007d94 <xQueueGiveFromISR+0xb4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 8007d8a:	6a3b      	ldr	r3, [r7, #32]
 8007d8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d8e:	1c5a      	adds	r2, r3, #1
 8007d90:	6a3b      	ldr	r3, [r7, #32]
 8007d92:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
 8007d94:	2301      	movs	r3, #1
 8007d96:	627b      	str	r3, [r7, #36]	; 0x24
 8007d98:	e001      	b.n	8007d9e <xQueueGiveFromISR+0xbe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8007d9e:	69fb      	ldr	r3, [r7, #28]
 8007da0:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3728      	adds	r7, #40	; 0x28
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop

08007db4 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b08c      	sub	sp, #48	; 0x30
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	607a      	str	r2, [r7, #4]
 8007dc0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	62bb      	str	r3, [r7, #40]	; 0x28

	configASSERT( pxQueue );
 8007dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d109      	bne.n	8007de4 <xQueueGenericReceive+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd4:	f383 8811 	msr	BASEPRI, r3
 8007dd8:	f3bf 8f6f 	isb	sy
 8007ddc:	f3bf 8f4f 	dsb	sy
 8007de0:	623b      	str	r3, [r7, #32]
 8007de2:	e7fe      	b.n	8007de2 <xQueueGenericReceive+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d103      	bne.n	8007df2 <xQueueGenericReceive+0x3e>
 8007dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d101      	bne.n	8007df6 <xQueueGenericReceive+0x42>
 8007df2:	2301      	movs	r3, #1
 8007df4:	e000      	b.n	8007df8 <xQueueGenericReceive+0x44>
 8007df6:	2300      	movs	r3, #0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d109      	bne.n	8007e10 <xQueueGenericReceive+0x5c>
 8007dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e00:	f383 8811 	msr	BASEPRI, r3
 8007e04:	f3bf 8f6f 	isb	sy
 8007e08:	f3bf 8f4f 	dsb	sy
 8007e0c:	61fb      	str	r3, [r7, #28]
 8007e0e:	e7fe      	b.n	8007e0e <xQueueGenericReceive+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e10:	f7ff f8d4 	bl	8006fbc <xTaskGetSchedulerState>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d102      	bne.n	8007e20 <xQueueGenericReceive+0x6c>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d101      	bne.n	8007e24 <xQueueGenericReceive+0x70>
 8007e20:	2301      	movs	r3, #1
 8007e22:	e000      	b.n	8007e26 <xQueueGenericReceive+0x72>
 8007e24:	2300      	movs	r3, #0
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d109      	bne.n	8007e3e <xQueueGenericReceive+0x8a>
 8007e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e2e:	f383 8811 	msr	BASEPRI, r3
 8007e32:	f3bf 8f6f 	isb	sy
 8007e36:	f3bf 8f4f 	dsb	sy
 8007e3a:	61bb      	str	r3, [r7, #24]
 8007e3c:	e7fe      	b.n	8007e3c <xQueueGenericReceive+0x88>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e3e:	f000 fd31 	bl	80088a4 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d047      	beq.n	8007eda <xQueueGenericReceive+0x126>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8007e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	627b      	str	r3, [r7, #36]	; 0x24

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007e50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e52:	68b9      	ldr	r1, [r7, #8]
 8007e54:	f000 fa72 	bl	800833c <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d122      	bne.n	8007ea4 <xQueueGenericReceive+0xf0>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
 8007e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e62:	1e5a      	subs	r2, r3, #1
 8007e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e66:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d104      	bne.n	8007e7a <xQueueGenericReceive+0xc6>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8007e70:	f7ff f9c2 	bl	80071f8 <pvTaskIncrementMutexHeldCount>
 8007e74:	4602      	mov	r2, r0
 8007e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e78:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e7c:	691b      	ldr	r3, [r3, #16]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d027      	beq.n	8007ed2 <xQueueGenericReceive+0x11e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8007e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e84:	3310      	adds	r3, #16
 8007e86:	4618      	mov	r0, r3
 8007e88:	f7fe fdae 	bl	80069e8 <xTaskRemoveFromEventList>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d11f      	bne.n	8007ed2 <xQueueGenericReceive+0x11e>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8007e92:	4b4a      	ldr	r3, [pc, #296]	; (8007fbc <xQueueGenericReceive+0x208>)
 8007e94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e98:	601a      	str	r2, [r3, #0]
 8007e9a:	f3bf 8f4f 	dsb	sy
 8007e9e:	f3bf 8f6f 	isb	sy
 8007ea2:	e016      	b.n	8007ed2 <xQueueGenericReceive+0x11e>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8007ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ea8:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d00f      	beq.n	8007ed2 <xQueueGenericReceive+0x11e>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb4:	3324      	adds	r3, #36	; 0x24
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7fe fd96 	bl	80069e8 <xTaskRemoveFromEventList>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d007      	beq.n	8007ed2 <xQueueGenericReceive+0x11e>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8007ec2:	4b3e      	ldr	r3, [pc, #248]	; (8007fbc <xQueueGenericReceive+0x208>)
 8007ec4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ec8:	601a      	str	r2, [r3, #0]
 8007eca:	f3bf 8f4f 	dsb	sy
 8007ece:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8007ed2:	f000 fd15 	bl	8008900 <vPortExitCritical>
				return pdPASS;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e06c      	b.n	8007fb4 <xQueueGenericReceive+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d103      	bne.n	8007ee8 <xQueueGenericReceive+0x134>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007ee0:	f000 fd0e 	bl	8008900 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	e065      	b.n	8007fb4 <xQueueGenericReceive+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d106      	bne.n	8007efc <xQueueGenericReceive+0x148>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8007eee:	f107 0310 	add.w	r3, r7, #16
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f7fe fe40 	bl	8006b78 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007efc:	f000 fd00 	bl	8008900 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f00:	f7fe fa74 	bl	80063ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f04:	f000 fcce 	bl	80088a4 <vPortEnterCritical>
 8007f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f10:	d102      	bne.n	8007f18 <xQueueGenericReceive+0x164>
 8007f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f14:	2200      	movs	r2, #0
 8007f16:	645a      	str	r2, [r3, #68]	; 0x44
 8007f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f20:	d102      	bne.n	8007f28 <xQueueGenericReceive+0x174>
 8007f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f24:	2200      	movs	r2, #0
 8007f26:	649a      	str	r2, [r3, #72]	; 0x48
 8007f28:	f000 fcea 	bl	8008900 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f2c:	f107 0210 	add.w	r2, r7, #16
 8007f30:	1d3b      	adds	r3, r7, #4
 8007f32:	4610      	mov	r0, r2
 8007f34:	4619      	mov	r1, r3
 8007f36:	f7fe fe41 	bl	8006bbc <xTaskCheckForTimeOut>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d131      	bne.n	8007fa4 <xQueueGenericReceive+0x1f0>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f42:	f000 fa6d 	bl	8008420 <prvIsQueueEmpty>
 8007f46:	4603      	mov	r3, r0
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d025      	beq.n	8007f98 <xQueueGenericReceive+0x1e4>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d108      	bne.n	8007f66 <xQueueGenericReceive+0x1b2>
					{
						taskENTER_CRITICAL();
 8007f54:	f000 fca6 	bl	80088a4 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8007f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f7ff f84b 	bl	8006ff8 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8007f62:	f000 fccd 	bl	8008900 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f68:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4610      	mov	r0, r2
 8007f70:	4619      	mov	r1, r3
 8007f72:	f7fe fc47 	bl	8006804 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007f76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f78:	f000 fa06 	bl	8008388 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007f7c:	f7fe fa44 	bl	8006408 <xTaskResumeAll>
 8007f80:	4603      	mov	r3, r0
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d115      	bne.n	8007fb2 <xQueueGenericReceive+0x1fe>
				{
					portYIELD_WITHIN_API();
 8007f86:	4b0d      	ldr	r3, [pc, #52]	; (8007fbc <xQueueGenericReceive+0x208>)
 8007f88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f8c:	601a      	str	r2, [r3, #0]
 8007f8e:	f3bf 8f4f 	dsb	sy
 8007f92:	f3bf 8f6f 	isb	sy
 8007f96:	e00c      	b.n	8007fb2 <xQueueGenericReceive+0x1fe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007f98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f9a:	f000 f9f5 	bl	8008388 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f9e:	f7fe fa33 	bl	8006408 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 8007fa2:	e74c      	b.n	8007e3e <xQueueGenericReceive+0x8a>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8007fa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fa6:	f000 f9ef 	bl	8008388 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007faa:	f7fe fa2d 	bl	8006408 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	e000      	b.n	8007fb4 <xQueueGenericReceive+0x200>
		}
	}
 8007fb2:	e744      	b.n	8007e3e <xQueueGenericReceive+0x8a>
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3730      	adds	r7, #48	; 0x30
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}
 8007fbc:	e000ed04 	.word	0xe000ed04

08007fc0 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b08c      	sub	sp, #48	; 0x30
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	60f8      	str	r0, [r7, #12]
 8007fc8:	60b9      	str	r1, [r7, #8]
 8007fca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	62bb      	str	r3, [r7, #40]	; 0x28

	configASSERT( pxQueue );
 8007fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d109      	bne.n	8007fea <xQueueReceiveFromISR+0x2a>
 8007fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fda:	f383 8811 	msr	BASEPRI, r3
 8007fde:	f3bf 8f6f 	isb	sy
 8007fe2:	f3bf 8f4f 	dsb	sy
 8007fe6:	623b      	str	r3, [r7, #32]
 8007fe8:	e7fe      	b.n	8007fe8 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d103      	bne.n	8007ff8 <xQueueReceiveFromISR+0x38>
 8007ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d101      	bne.n	8007ffc <xQueueReceiveFromISR+0x3c>
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	e000      	b.n	8007ffe <xQueueReceiveFromISR+0x3e>
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d109      	bne.n	8008016 <xQueueReceiveFromISR+0x56>
 8008002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008006:	f383 8811 	msr	BASEPRI, r3
 800800a:	f3bf 8f6f 	isb	sy
 800800e:	f3bf 8f4f 	dsb	sy
 8008012:	61fb      	str	r3, [r7, #28]
 8008014:	e7fe      	b.n	8008014 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008016:	f000 fd05 	bl	8008a24 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800801a:	f3ef 8211 	mrs	r2, BASEPRI
 800801e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008022:	f383 8811 	msr	BASEPRI, r3
 8008026:	f3bf 8f6f 	isb	sy
 800802a:	f3bf 8f4f 	dsb	sy
 800802e:	61ba      	str	r2, [r7, #24]
 8008030:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008032:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008034:	627b      	str	r3, [r7, #36]	; 0x24
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800803a:	2b00      	cmp	r3, #0
 800803c:	d028      	beq.n	8008090 <xQueueReceiveFromISR+0xd0>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800803e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008040:	68b9      	ldr	r1, [r7, #8]
 8008042:	f000 f97b 	bl	800833c <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 8008046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800804a:	1e5a      	subs	r2, r3, #1
 800804c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800804e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
 8008050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008058:	d112      	bne.n	8008080 <xQueueReceiveFromISR+0xc0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800805a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800805c:	691b      	ldr	r3, [r3, #16]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d013      	beq.n	800808a <xQueueReceiveFromISR+0xca>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008064:	3310      	adds	r3, #16
 8008066:	4618      	mov	r0, r3
 8008068:	f7fe fcbe 	bl	80069e8 <xTaskRemoveFromEventList>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	d00b      	beq.n	800808a <xQueueReceiveFromISR+0xca>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d008      	beq.n	800808a <xQueueReceiveFromISR+0xca>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2201      	movs	r2, #1
 800807c:	601a      	str	r2, [r3, #0]
 800807e:	e004      	b.n	800808a <xQueueReceiveFromISR+0xca>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
 8008080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008084:	1c5a      	adds	r2, r3, #1
 8008086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008088:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800808a:	2301      	movs	r3, #1
 800808c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800808e:	e001      	b.n	8008094 <xQueueReceiveFromISR+0xd4>
		}
		else
		{
			xReturn = pdFAIL;
 8008090:	2300      	movs	r3, #0
 8008092:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008096:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800809e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3730      	adds	r7, #48	; 0x30
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b08c      	sub	sp, #48	; 0x30
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	62bb      	str	r3, [r7, #40]	; 0x28

	configASSERT( pxQueue );
 80080b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d109      	bne.n	80080d0 <xQueuePeekFromISR+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80080bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c0:	f383 8811 	msr	BASEPRI, r3
 80080c4:	f3bf 8f6f 	isb	sy
 80080c8:	f3bf 8f4f 	dsb	sy
 80080cc:	61fb      	str	r3, [r7, #28]
 80080ce:	e7fe      	b.n	80080ce <xQueuePeekFromISR+0x26>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d103      	bne.n	80080de <xQueuePeekFromISR+0x36>
 80080d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d101      	bne.n	80080e2 <xQueuePeekFromISR+0x3a>
 80080de:	2301      	movs	r3, #1
 80080e0:	e000      	b.n	80080e4 <xQueuePeekFromISR+0x3c>
 80080e2:	2300      	movs	r3, #0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d109      	bne.n	80080fc <xQueuePeekFromISR+0x54>
 80080e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ec:	f383 8811 	msr	BASEPRI, r3
 80080f0:	f3bf 8f6f 	isb	sy
 80080f4:	f3bf 8f4f 	dsb	sy
 80080f8:	61bb      	str	r3, [r7, #24]
 80080fa:	e7fe      	b.n	80080fa <xQueuePeekFromISR+0x52>
	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 80080fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008100:	2b00      	cmp	r3, #0
 8008102:	d109      	bne.n	8008118 <xQueuePeekFromISR+0x70>
 8008104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008108:	f383 8811 	msr	BASEPRI, r3
 800810c:	f3bf 8f6f 	isb	sy
 8008110:	f3bf 8f4f 	dsb	sy
 8008114:	617b      	str	r3, [r7, #20]
 8008116:	e7fe      	b.n	8008116 <xQueuePeekFromISR+0x6e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008118:	f000 fc84 	bl	8008a24 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800811c:	f3ef 8211 	mrs	r2, BASEPRI
 8008120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008124:	f383 8811 	msr	BASEPRI, r3
 8008128:	f3bf 8f6f 	isb	sy
 800812c:	f3bf 8f4f 	dsb	sy
 8008130:	613a      	str	r2, [r7, #16]
 8008132:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008134:	693b      	ldr	r3, [r7, #16]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008136:	627b      	str	r3, [r7, #36]	; 0x24
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800813a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800813c:	2b00      	cmp	r3, #0
 800813e:	d00c      	beq.n	800815a <xQueuePeekFromISR+0xb2>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8008140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	623b      	str	r3, [r7, #32]
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008146:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008148:	6839      	ldr	r1, [r7, #0]
 800814a:	f000 f8f7 	bl	800833c <prvCopyDataFromQueue>
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800814e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008150:	6a3a      	ldr	r2, [r7, #32]
 8008152:	60da      	str	r2, [r3, #12]

			xReturn = pdPASS;
 8008154:	2301      	movs	r3, #1
 8008156:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008158:	e001      	b.n	800815e <xQueuePeekFromISR+0xb6>
		}
		else
		{
			xReturn = pdFAIL;
 800815a:	2300      	movs	r3, #0
 800815c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800815e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008160:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800816a:	4618      	mov	r0, r3
 800816c:	3730      	adds	r7, #48	; 0x30
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
 8008172:	bf00      	nop

08008174 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d109      	bne.n	8008196 <uxQueueMessagesWaiting+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008186:	f383 8811 	msr	BASEPRI, r3
 800818a:	f3bf 8f6f 	isb	sy
 800818e:	f3bf 8f4f 	dsb	sy
 8008192:	60bb      	str	r3, [r7, #8]
 8008194:	e7fe      	b.n	8008194 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8008196:	f000 fb85 	bl	80088a4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800819e:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80081a0:	f000 fbae 	bl	8008900 <vPortExitCritical>

	return uxReturn;
 80081a4:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80081a6:	4618      	mov	r0, r3
 80081a8:	3710      	adds	r7, #16
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop

080081b0 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b086      	sub	sp, #24
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	617b      	str	r3, [r7, #20]
	configASSERT( pxQueue );
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d109      	bne.n	80081d6 <uxQueueSpacesAvailable+0x26>
 80081c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c6:	f383 8811 	msr	BASEPRI, r3
 80081ca:	f3bf 8f6f 	isb	sy
 80081ce:	f3bf 8f4f 	dsb	sy
 80081d2:	60fb      	str	r3, [r7, #12]
 80081d4:	e7fe      	b.n	80081d4 <uxQueueSpacesAvailable+0x24>

	taskENTER_CRITICAL();
 80081d6:	f000 fb65 	bl	80088a4 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081e2:	1ad3      	subs	r3, r2, r3
 80081e4:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80081e6:	f000 fb8b 	bl	8008900 <vPortExitCritical>

	return uxReturn;
 80081ea:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80081ec:	4618      	mov	r0, r3
 80081ee:	3718      	adds	r7, #24
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80081f4:	b480      	push	{r7}
 80081f6:	b085      	sub	sp, #20
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d109      	bne.n	8008216 <uxQueueMessagesWaitingFromISR+0x22>
 8008202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008206:	f383 8811 	msr	BASEPRI, r3
 800820a:	f3bf 8f6f 	isb	sy
 800820e:	f3bf 8f4f 	dsb	sy
 8008212:	60bb      	str	r3, [r7, #8]
 8008214:	e7fe      	b.n	8008214 <uxQueueMessagesWaitingFromISR+0x20>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800821a:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 800821c:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800821e:	4618      	mov	r0, r3
 8008220:	3714      	adds	r7, #20
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop

0800822c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b084      	sub	sp, #16
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d109      	bne.n	8008252 <vQueueDelete+0x26>
 800823e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008242:	f383 8811 	msr	BASEPRI, r3
 8008246:	f3bf 8f6f 	isb	sy
 800824a:	f3bf 8f4f 	dsb	sy
 800824e:	60bb      	str	r3, [r7, #8]
 8008250:	e7fe      	b.n	8008250 <vQueueDelete+0x24>
	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
	}
	#endif
	vPortFree( pxQueue );
 8008252:	68f8      	ldr	r0, [r7, #12]
 8008254:	f000 fcec 	bl	8008c30 <vPortFree>
}
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop

08008260 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b086      	sub	sp, #24
 8008264:	af00      	add	r7, sp, #0
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	60b9      	str	r1, [r7, #8]
 800826a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800826c:	2300      	movs	r3, #0
 800826e:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008274:	2b00      	cmp	r3, #0
 8008276:	d10d      	bne.n	8008294 <prvCopyDataToQueue+0x34>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d152      	bne.n	8008326 <prvCopyDataToQueue+0xc6>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	4618      	mov	r0, r3
 8008286:	f7fe ff2d 	bl	80070e4 <xTaskPriorityDisinherit>
 800828a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2200      	movs	r2, #0
 8008290:	605a      	str	r2, [r3, #4]
 8008292:	e048      	b.n	8008326 <prvCopyDataToQueue+0xc6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d11a      	bne.n	80082d0 <prvCopyDataToQueue+0x70>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	689a      	ldr	r2, [r3, #8]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a2:	4610      	mov	r0, r2
 80082a4:	68b9      	ldr	r1, [r7, #8]
 80082a6:	461a      	mov	r2, r3
 80082a8:	f000 fe55 	bl	8008f56 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	689a      	ldr	r2, [r3, #8]
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082b4:	441a      	add	r2, r3
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	689a      	ldr	r2, [r3, #8]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d32f      	bcc.n	8008326 <prvCopyDataToQueue+0xc6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	609a      	str	r2, [r3, #8]
 80082ce:	e02a      	b.n	8008326 <prvCopyDataToQueue+0xc6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	68da      	ldr	r2, [r3, #12]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d8:	4610      	mov	r0, r2
 80082da:	68b9      	ldr	r1, [r7, #8]
 80082dc:	461a      	mov	r2, r3
 80082de:	f000 fe3a 	bl	8008f56 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	68da      	ldr	r2, [r3, #12]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ea:	425b      	negs	r3, r3
 80082ec:	441a      	add	r2, r3
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	68da      	ldr	r2, [r3, #12]
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d207      	bcs.n	800830e <prvCopyDataToQueue+0xae>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	685a      	ldr	r2, [r3, #4]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008306:	425b      	negs	r3, r3
 8008308:	441a      	add	r2, r3
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2b02      	cmp	r3, #2
 8008312:	d108      	bne.n	8008326 <prvCopyDataToQueue+0xc6>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008318:	2b00      	cmp	r3, #0
 800831a:	d004      	beq.n	8008326 <prvCopyDataToQueue+0xc6>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008320:	1e5a      	subs	r2, r3, #1
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	639a      	str	r2, [r3, #56]	; 0x38
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800832a:	1c5a      	adds	r2, r3, #1
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008330:	697b      	ldr	r3, [r7, #20]
}
 8008332:	4618      	mov	r0, r3
 8008334:	3718      	adds	r7, #24
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
 800833a:	bf00      	nop

0800833c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b082      	sub	sp, #8
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800834a:	2b00      	cmp	r3, #0
 800834c:	d019      	beq.n	8008382 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	68da      	ldr	r2, [r3, #12]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008356:	441a      	add	r2, r3
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	68da      	ldr	r2, [r3, #12]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	429a      	cmp	r2, r3
 8008366:	d303      	bcc.n	8008370 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	68da      	ldr	r2, [r3, #12]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008378:	6838      	ldr	r0, [r7, #0]
 800837a:	4611      	mov	r1, r2
 800837c:	461a      	mov	r2, r3
 800837e:	f000 fdea 	bl	8008f56 <memcpy>
	}
}
 8008382:	3708      	adds	r7, #8
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008390:	f000 fa88 	bl	80088a4 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8008394:	e014      	b.n	80083c0 <prvUnlockQueue+0x38>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839a:	2b00      	cmp	r3, #0
 800839c:	d00a      	beq.n	80083b4 <prvUnlockQueue+0x2c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	3324      	adds	r3, #36	; 0x24
 80083a2:	4618      	mov	r0, r3
 80083a4:	f7fe fb20 	bl	80069e8 <xTaskRemoveFromEventList>
 80083a8:	4603      	mov	r3, r0
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d003      	beq.n	80083b6 <prvUnlockQueue+0x2e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 80083ae:	f7fe fc63 	bl	8006c78 <vTaskMissedYield>
 80083b2:	e000      	b.n	80083b6 <prvUnlockQueue+0x2e>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
 80083b4:	e008      	b.n	80083c8 <prvUnlockQueue+0x40>
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083ba:	1e5a      	subs	r2, r3, #1
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	dce6      	bgt.n	8008396 <prvUnlockQueue+0xe>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f04f 32ff 	mov.w	r2, #4294967295
 80083ce:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 80083d0:	f000 fa96 	bl	8008900 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80083d4:	f000 fa66 	bl	80088a4 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 80083d8:	e014      	b.n	8008404 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	691b      	ldr	r3, [r3, #16]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d00f      	beq.n	8008402 <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	3310      	adds	r3, #16
 80083e6:	4618      	mov	r0, r3
 80083e8:	f7fe fafe 	bl	80069e8 <xTaskRemoveFromEventList>
 80083ec:	4603      	mov	r3, r0
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d001      	beq.n	80083f6 <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
 80083f2:	f7fe fc41 	bl	8006c78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083fa:	1e5a      	subs	r2, r3, #1
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	645a      	str	r2, [r3, #68]	; 0x44
 8008400:	e000      	b.n	8008404 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
 8008402:	e003      	b.n	800840c <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008408:	2b00      	cmp	r3, #0
 800840a:	dce6      	bgt.n	80083da <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f04f 32ff 	mov.w	r2, #4294967295
 8008412:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008414:	f000 fa74 	bl	8008900 <vPortExitCritical>
}
 8008418:	3708      	adds	r7, #8
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop

08008420 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008428:	f000 fa3c 	bl	80088a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008430:	2b00      	cmp	r3, #0
 8008432:	d102      	bne.n	800843a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008434:	2301      	movs	r3, #1
 8008436:	60fb      	str	r3, [r7, #12]
 8008438:	e001      	b.n	800843e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800843a:	2300      	movs	r3, #0
 800843c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800843e:	f000 fa5f 	bl	8008900 <vPortExitCritical>

	return xReturn;
 8008442:	68fb      	ldr	r3, [r7, #12]
}
 8008444:	4618      	mov	r0, r3
 8008446:	3710      	adds	r7, #16
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
 800844c:	b480      	push	{r7}
 800844e:	b085      	sub	sp, #20
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	configASSERT( xQueue );
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d109      	bne.n	800846e <xQueueIsQueueEmptyFromISR+0x22>
 800845a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800845e:	f383 8811 	msr	BASEPRI, r3
 8008462:	f3bf 8f6f 	isb	sy
 8008466:	f3bf 8f4f 	dsb	sy
 800846a:	60bb      	str	r3, [r7, #8]
 800846c:	e7fe      	b.n	800846c <xQueueIsQueueEmptyFromISR+0x20>
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008472:	2b00      	cmp	r3, #0
 8008474:	d102      	bne.n	800847c <xQueueIsQueueEmptyFromISR+0x30>
	{
		xReturn = pdTRUE;
 8008476:	2301      	movs	r3, #1
 8008478:	60fb      	str	r3, [r7, #12]
 800847a:	e001      	b.n	8008480 <xQueueIsQueueEmptyFromISR+0x34>
	}
	else
	{
		xReturn = pdFALSE;
 800847c:	2300      	movs	r3, #0
 800847e:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8008480:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008482:	4618      	mov	r0, r3
 8008484:	3714      	adds	r7, #20
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr
 800848e:	bf00      	nop

08008490 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b084      	sub	sp, #16
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008498:	f000 fa04 	bl	80088a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d102      	bne.n	80084ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80084a8:	2301      	movs	r3, #1
 80084aa:	60fb      	str	r3, [r7, #12]
 80084ac:	e001      	b.n	80084b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80084ae:	2300      	movs	r3, #0
 80084b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80084b2:	f000 fa25 	bl	8008900 <vPortExitCritical>

	return xReturn;
 80084b6:	68fb      	ldr	r3, [r7, #12]
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3710      	adds	r7, #16
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 80084c0:	b480      	push	{r7}
 80084c2:	b085      	sub	sp, #20
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	configASSERT( xQueue );
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d109      	bne.n	80084e2 <xQueueIsQueueFullFromISR+0x22>
 80084ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d2:	f383 8811 	msr	BASEPRI, r3
 80084d6:	f3bf 8f6f 	isb	sy
 80084da:	f3bf 8f4f 	dsb	sy
 80084de:	60bb      	str	r3, [r7, #8]
 80084e0:	e7fe      	b.n	80084e0 <xQueueIsQueueFullFromISR+0x20>
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d102      	bne.n	80084f4 <xQueueIsQueueFullFromISR+0x34>
	{
		xReturn = pdTRUE;
 80084ee:	2301      	movs	r3, #1
 80084f0:	60fb      	str	r3, [r7, #12]
 80084f2:	e001      	b.n	80084f8 <xQueueIsQueueFullFromISR+0x38>
	}
	else
	{
		xReturn = pdFALSE;
 80084f4:	2300      	movs	r3, #0
 80084f6:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 80084f8:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80084fa:	4618      	mov	r0, r3
 80084fc:	3714      	adds	r7, #20
 80084fe:	46bd      	mov	sp, r7
 8008500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008504:	4770      	bx	lr
 8008506:	bf00      	nop

08008508 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 8008508:	b580      	push	{r7, lr}
 800850a:	b084      	sub	sp, #16
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	6039      	str	r1, [r7, #0]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	60fb      	str	r3, [r7, #12]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008516:	f000 f9c5 	bl	80088a4 <vPortEnterCritical>
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800851e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008522:	d102      	bne.n	800852a <vQueueWaitForMessageRestricted+0x22>
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2200      	movs	r2, #0
 8008528:	645a      	str	r2, [r3, #68]	; 0x44
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800852e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008532:	d102      	bne.n	800853a <vQueueWaitForMessageRestricted+0x32>
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2200      	movs	r2, #0
 8008538:	649a      	str	r2, [r3, #72]	; 0x48
 800853a:	f000 f9e1 	bl	8008900 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008542:	2b00      	cmp	r3, #0
 8008544:	d105      	bne.n	8008552 <vQueueWaitForMessageRestricted+0x4a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	3324      	adds	r3, #36	; 0x24
 800854a:	4618      	mov	r0, r3
 800854c:	6839      	ldr	r1, [r7, #0]
 800854e:	f7fe fa0b 	bl	8006968 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008552:	68f8      	ldr	r0, [r7, #12]
 8008554:	f7ff ff18 	bl	8008388 <prvUnlockQueue>
	}
 8008558:	3710      	adds	r7, #16
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop

08008560 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008560:	b480      	push	{r7}
 8008562:	b083      	sub	sp, #12
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f103 0208 	add.w	r2, r3, #8
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f04f 32ff 	mov.w	r2, #4294967295
 8008578:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f103 0208 	add.w	r2, r3, #8
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f103 0208 	add.w	r2, r3, #8
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2200      	movs	r2, #0
 8008592:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008594:	370c      	adds	r7, #12
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr
 800859e:	bf00      	nop

080085a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80085a0:	b480      	push	{r7}
 80085a2:	b083      	sub	sp, #12
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80085ae:	370c      	adds	r7, #12
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr

080085b8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80085b8:	b480      	push	{r7}
 80085ba:	b085      	sub	sp, #20
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	68fa      	ldr	r2, [r7, #12]
 80085cc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	689a      	ldr	r2, [r3, #8]
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	609a      	str	r2, [r3, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	683a      	ldr	r2, [r7, #0]
 80085dc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	683a      	ldr	r2, [r7, #0]
 80085e2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	1c5a      	adds	r2, r3, #1
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	601a      	str	r2, [r3, #0]
}
 80085f4:	3714      	adds	r7, #20
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr
 80085fe:	bf00      	nop

08008600 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008600:	b480      	push	{r7}
 8008602:	b085      	sub	sp, #20
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008616:	d103      	bne.n	8008620 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	691b      	ldr	r3, [r3, #16]
 800861c:	60fb      	str	r3, [r7, #12]
 800861e:	e00c      	b.n	800863a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	3308      	adds	r3, #8
 8008624:	60fb      	str	r3, [r7, #12]
 8008626:	e002      	b.n	800862e <vListInsert+0x2e>
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	60fb      	str	r3, [r7, #12]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	429a      	cmp	r2, r3
 8008638:	d9f6      	bls.n	8008628 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	685a      	ldr	r2, [r3, #4]
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	683a      	ldr	r2, [r7, #0]
 8008648:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	68fa      	ldr	r2, [r7, #12]
 800864e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	683a      	ldr	r2, [r7, #0]
 8008654:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	1c5a      	adds	r2, r3, #1
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	601a      	str	r2, [r3, #0]
}
 8008666:	3714      	adds	r7, #20
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008670:	b480      	push	{r7}
 8008672:	b085      	sub	sp, #20
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	691b      	ldr	r3, [r3, #16]
 800867c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	6892      	ldr	r2, [r2, #8]
 8008686:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	689b      	ldr	r3, [r3, #8]
 800868c:	687a      	ldr	r2, [r7, #4]
 800868e:	6852      	ldr	r2, [r2, #4]
 8008690:	605a      	str	r2, [r3, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	685a      	ldr	r2, [r3, #4]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	429a      	cmp	r2, r3
 800869a:	d103      	bne.n	80086a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	689a      	ldr	r2, [r3, #8]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	1e5a      	subs	r2, r3, #1
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3714      	adds	r7, #20
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80086c4:	b480      	push	{r7}
 80086c6:	b085      	sub	sp, #20
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	60b9      	str	r1, [r7, #8]
 80086ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	3b04      	subs	r3, #4
 80086d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80086dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	3b04      	subs	r3, #4
 80086e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80086e4:	68ba      	ldr	r2, [r7, #8]
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	3b04      	subs	r3, #4
 80086ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80086f0:	4a0c      	ldr	r2, [pc, #48]	; (8008724 <pxPortInitialiseStack+0x60>)
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	3b14      	subs	r3, #20
 80086fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	3b04      	subs	r3, #4
 8008706:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f06f 0202 	mvn.w	r2, #2
 800870e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	3b20      	subs	r3, #32
 8008714:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008716:	68fb      	ldr	r3, [r7, #12]
}
 8008718:	4618      	mov	r0, r3
 800871a:	3714      	adds	r7, #20
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr
 8008724:	08008729 	.word	0x08008729

08008728 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008728:	b480      	push	{r7}
 800872a:	b083      	sub	sp, #12
 800872c:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800872e:	4b0c      	ldr	r3, [pc, #48]	; (8008760 <prvTaskExitError+0x38>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008736:	d009      	beq.n	800874c <prvTaskExitError+0x24>
 8008738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800873c:	f383 8811 	msr	BASEPRI, r3
 8008740:	f3bf 8f6f 	isb	sy
 8008744:	f3bf 8f4f 	dsb	sy
 8008748:	607b      	str	r3, [r7, #4]
 800874a:	e7fe      	b.n	800874a <prvTaskExitError+0x22>
 800874c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008750:	f383 8811 	msr	BASEPRI, r3
 8008754:	f3bf 8f6f 	isb	sy
 8008758:	f3bf 8f4f 	dsb	sy
 800875c:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 800875e:	e7fe      	b.n	800875e <prvTaskExitError+0x36>
 8008760:	20000038 	.word	0x20000038

08008764 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008764:	4b06      	ldr	r3, [pc, #24]	; (8008780 <pxCurrentTCBConst2>)
 8008766:	6819      	ldr	r1, [r3, #0]
 8008768:	6808      	ldr	r0, [r1, #0]
 800876a:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800876e:	f380 8809 	msr	PSP, r0
 8008772:	f3bf 8f6f 	isb	sy
 8008776:	f04f 0000 	mov.w	r0, #0
 800877a:	f380 8811 	msr	BASEPRI, r0
 800877e:	4770      	bx	lr

08008780 <pxCurrentTCBConst2>:
 8008780:	2000009c 	.word	0x2000009c

08008784 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008784:	48c5      	ldr	r0, [pc, #788]	; (8008a9c <vPortValidateInterruptPriority+0x78>)
 8008786:	6800      	ldr	r0, [r0, #0]
 8008788:	6800      	ldr	r0, [r0, #0]
 800878a:	f380 8808 	msr	MSP, r0
 800878e:	b662      	cpsie	i
 8008790:	b661      	cpsie	f
 8008792:	f3bf 8f4f 	dsb	sy
 8008796:	f3bf 8f6f 	isb	sy
 800879a:	df00      	svc	0
 800879c:	bf00      	nop
 800879e:	bf00      	nop

080087a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80087a6:	4b2c      	ldr	r3, [pc, #176]	; (8008858 <xPortStartScheduler+0xb8>)
 80087a8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	22ff      	movs	r2, #255	; 0xff
 80087b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80087c0:	79fb      	ldrb	r3, [r7, #7]
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80087c8:	b2da      	uxtb	r2, r3
 80087ca:	4b24      	ldr	r3, [pc, #144]	; (800885c <xPortStartScheduler+0xbc>)
 80087cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80087ce:	4b24      	ldr	r3, [pc, #144]	; (8008860 <xPortStartScheduler+0xc0>)
 80087d0:	2207      	movs	r2, #7
 80087d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80087d4:	e009      	b.n	80087ea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80087d6:	4b22      	ldr	r3, [pc, #136]	; (8008860 <xPortStartScheduler+0xc0>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	1e5a      	subs	r2, r3, #1
 80087dc:	4b20      	ldr	r3, [pc, #128]	; (8008860 <xPortStartScheduler+0xc0>)
 80087de:	601a      	str	r2, [r3, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80087e0:	79fb      	ldrb	r3, [r7, #7]
 80087e2:	b2db      	uxtb	r3, r3
 80087e4:	005b      	lsls	r3, r3, #1
 80087e6:	b2db      	uxtb	r3, r3
 80087e8:	71fb      	strb	r3, [r7, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80087ea:	79fb      	ldrb	r3, [r7, #7]
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	b25b      	sxtb	r3, r3
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	dbef      	blt.n	80087d6 <xPortStartScheduler+0x36>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80087f6:	4b1a      	ldr	r3, [pc, #104]	; (8008860 <xPortStartScheduler+0xc0>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	021a      	lsls	r2, r3, #8
 80087fc:	4b18      	ldr	r3, [pc, #96]	; (8008860 <xPortStartScheduler+0xc0>)
 80087fe:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008800:	4b17      	ldr	r3, [pc, #92]	; (8008860 <xPortStartScheduler+0xc0>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008808:	4b15      	ldr	r3, [pc, #84]	; (8008860 <xPortStartScheduler+0xc0>)
 800880a:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	b2da      	uxtb	r2, r3
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008814:	4b13      	ldr	r3, [pc, #76]	; (8008864 <xPortStartScheduler+0xc4>)
 8008816:	4a13      	ldr	r2, [pc, #76]	; (8008864 <xPortStartScheduler+0xc4>)
 8008818:	6812      	ldr	r2, [r2, #0]
 800881a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800881e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008820:	4b10      	ldr	r3, [pc, #64]	; (8008864 <xPortStartScheduler+0xc4>)
 8008822:	4a10      	ldr	r2, [pc, #64]	; (8008864 <xPortStartScheduler+0xc4>)
 8008824:	6812      	ldr	r2, [r2, #0]
 8008826:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800882a:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800882c:	f000 f8e0 	bl	80089f0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008830:	4b0d      	ldr	r3, [pc, #52]	; (8008868 <xPortStartScheduler+0xc8>)
 8008832:	2200      	movs	r2, #0
 8008834:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008836:	f000 f8ed 	bl	8008a14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800883a:	4b0c      	ldr	r3, [pc, #48]	; (800886c <xPortStartScheduler+0xcc>)
 800883c:	4a0b      	ldr	r2, [pc, #44]	; (800886c <xPortStartScheduler+0xcc>)
 800883e:	6812      	ldr	r2, [r2, #0]
 8008840:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8008844:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008846:	f7ff ff9d 	bl	8008784 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 800884a:	f7ff ff6d 	bl	8008728 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800884e:	2300      	movs	r3, #0
}
 8008850:	4618      	mov	r0, r3
 8008852:	3710      	adds	r7, #16
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}
 8008858:	e000e400 	.word	0xe000e400
 800885c:	20000198 	.word	0x20000198
 8008860:	2000019c 	.word	0x2000019c
 8008864:	e000ed20 	.word	0xe000ed20
 8008868:	20000038 	.word	0x20000038
 800886c:	e000ef34 	.word	0xe000ef34

08008870 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 8008870:	b480      	push	{r7}
 8008872:	b083      	sub	sp, #12
 8008874:	af00      	add	r7, sp, #0
	/* Not implemented in ports where there is nothing to return to.
	Artificially force an assert. */
	configASSERT( uxCriticalNesting == 1000UL );
 8008876:	4b0a      	ldr	r3, [pc, #40]	; (80088a0 <vPortEndScheduler+0x30>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800887e:	d009      	beq.n	8008894 <vPortEndScheduler+0x24>
 8008880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008884:	f383 8811 	msr	BASEPRI, r3
 8008888:	f3bf 8f6f 	isb	sy
 800888c:	f3bf 8f4f 	dsb	sy
 8008890:	607b      	str	r3, [r7, #4]
 8008892:	e7fe      	b.n	8008892 <vPortEndScheduler+0x22>
}
 8008894:	370c      	adds	r7, #12
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr
 800889e:	bf00      	nop
 80088a0:	20000038 	.word	0x20000038

080088a4 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ae:	f383 8811 	msr	BASEPRI, r3
 80088b2:	f3bf 8f6f 	isb	sy
 80088b6:	f3bf 8f4f 	dsb	sy
 80088ba:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80088bc:	4b0e      	ldr	r3, [pc, #56]	; (80088f8 <vPortEnterCritical+0x54>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	1c5a      	adds	r2, r3, #1
 80088c2:	4b0d      	ldr	r3, [pc, #52]	; (80088f8 <vPortEnterCritical+0x54>)
 80088c4:	601a      	str	r2, [r3, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80088c6:	4b0c      	ldr	r3, [pc, #48]	; (80088f8 <vPortEnterCritical+0x54>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	d10e      	bne.n	80088ec <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80088ce:	4b0b      	ldr	r3, [pc, #44]	; (80088fc <vPortEnterCritical+0x58>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d009      	beq.n	80088ec <vPortEnterCritical+0x48>
 80088d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088dc:	f383 8811 	msr	BASEPRI, r3
 80088e0:	f3bf 8f6f 	isb	sy
 80088e4:	f3bf 8f4f 	dsb	sy
 80088e8:	603b      	str	r3, [r7, #0]
 80088ea:	e7fe      	b.n	80088ea <vPortEnterCritical+0x46>
	}
}
 80088ec:	370c      	adds	r7, #12
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr
 80088f6:	bf00      	nop
 80088f8:	20000038 	.word	0x20000038
 80088fc:	e000ed04 	.word	0xe000ed04

08008900 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008900:	b480      	push	{r7}
 8008902:	b083      	sub	sp, #12
 8008904:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008906:	4b10      	ldr	r3, [pc, #64]	; (8008948 <vPortExitCritical+0x48>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d109      	bne.n	8008922 <vPortExitCritical+0x22>
 800890e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008912:	f383 8811 	msr	BASEPRI, r3
 8008916:	f3bf 8f6f 	isb	sy
 800891a:	f3bf 8f4f 	dsb	sy
 800891e:	607b      	str	r3, [r7, #4]
 8008920:	e7fe      	b.n	8008920 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8008922:	4b09      	ldr	r3, [pc, #36]	; (8008948 <vPortExitCritical+0x48>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	1e5a      	subs	r2, r3, #1
 8008928:	4b07      	ldr	r3, [pc, #28]	; (8008948 <vPortExitCritical+0x48>)
 800892a:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 800892c:	4b06      	ldr	r3, [pc, #24]	; (8008948 <vPortExitCritical+0x48>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d104      	bne.n	800893e <vPortExitCritical+0x3e>
 8008934:	2300      	movs	r3, #0
 8008936:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800893e:	370c      	adds	r7, #12
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr
 8008948:	20000038 	.word	0x20000038

0800894c <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800894c:	f3ef 8009 	mrs	r0, PSP
 8008950:	f3bf 8f6f 	isb	sy
 8008954:	4b14      	ldr	r3, [pc, #80]	; (80089a8 <pxCurrentTCBConst>)
 8008956:	681a      	ldr	r2, [r3, #0]
 8008958:	f01e 0f10 	tst.w	lr, #16
 800895c:	bf08      	it	eq
 800895e:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008962:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008966:	6010      	str	r0, [r2, #0]
 8008968:	f84d 3d04 	str.w	r3, [sp, #-4]!
 800896c:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008970:	f380 8811 	msr	BASEPRI, r0
 8008974:	f3bf 8f4f 	dsb	sy
 8008978:	f3bf 8f6f 	isb	sy
 800897c:	f7fd fec4 	bl	8006708 <vTaskSwitchContext>
 8008980:	f04f 0000 	mov.w	r0, #0
 8008984:	f380 8811 	msr	BASEPRI, r0
 8008988:	bc08      	pop	{r3}
 800898a:	6819      	ldr	r1, [r3, #0]
 800898c:	6808      	ldr	r0, [r1, #0]
 800898e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008992:	f01e 0f10 	tst.w	lr, #16
 8008996:	bf08      	it	eq
 8008998:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800899c:	f380 8809 	msr	PSP, r0
 80089a0:	f3bf 8f6f 	isb	sy
 80089a4:	4770      	bx	lr
 80089a6:	bf00      	nop

080089a8 <pxCurrentTCBConst>:
 80089a8:	2000009c 	.word	0x2000009c

080089ac <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80089b2:	f3ef 8211 	mrs	r2, BASEPRI
 80089b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ba:	f383 8811 	msr	BASEPRI, r3
 80089be:	f3bf 8f6f 	isb	sy
 80089c2:	f3bf 8f4f 	dsb	sy
 80089c6:	60fa      	str	r2, [r7, #12]
 80089c8:	60bb      	str	r3, [r7, #8]
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80089ca:	f7fd fddf 	bl	800658c <xTaskIncrementTick>
 80089ce:	4603      	mov	r3, r0
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d003      	beq.n	80089dc <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80089d4:	4b05      	ldr	r3, [pc, #20]	; (80089ec <SysTick_Handler+0x40>)
 80089d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089da:	601a      	str	r2, [r3, #0]
 80089dc:	2300      	movs	r3, #0
 80089de:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
}
 80089e6:	3710      	adds	r7, #16
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}
 80089ec:	e000ed04 	.word	0xe000ed04

080089f0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80089f0:	b480      	push	{r7}
 80089f2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80089f4:	4b05      	ldr	r3, [pc, #20]	; (8008a0c <vPortSetupTimerInterrupt+0x1c>)
 80089f6:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 80089fa:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80089fc:	4b04      	ldr	r3, [pc, #16]	; (8008a10 <vPortSetupTimerInterrupt+0x20>)
 80089fe:	2207      	movs	r2, #7
 8008a00:	601a      	str	r2, [r3, #0]
}
 8008a02:	46bd      	mov	sp, r7
 8008a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a08:	4770      	bx	lr
 8008a0a:	bf00      	nop
 8008a0c:	e000e014 	.word	0xe000e014
 8008a10:	e000e010 	.word	0xe000e010

08008a14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008a14:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8008aa0 <vPortValidateInterruptPriority+0x7c>
 8008a18:	6801      	ldr	r1, [r0, #0]
 8008a1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008a1e:	6001      	str	r1, [r0, #0]
 8008a20:	4770      	bx	lr
 8008a22:	bf00      	nop

08008a24 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008a24:	b480      	push	{r7}
 8008a26:	b085      	sub	sp, #20
 8008a28:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8008a2a:	f3ef 8305 	mrs	r3, IPSR
 8008a2e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2b0f      	cmp	r3, #15
 8008a34:	d913      	bls.n	8008a5e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008a36:	4a15      	ldr	r2, [pc, #84]	; (8008a8c <vPortValidateInterruptPriority+0x68>)
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	4413      	add	r3, r2
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008a40:	4b13      	ldr	r3, [pc, #76]	; (8008a90 <vPortValidateInterruptPriority+0x6c>)
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	7afa      	ldrb	r2, [r7, #11]
 8008a46:	429a      	cmp	r2, r3
 8008a48:	d209      	bcs.n	8008a5e <vPortValidateInterruptPriority+0x3a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a4e:	f383 8811 	msr	BASEPRI, r3
 8008a52:	f3bf 8f6f 	isb	sy
 8008a56:	f3bf 8f4f 	dsb	sy
 8008a5a:	607b      	str	r3, [r7, #4]
 8008a5c:	e7fe      	b.n	8008a5c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008a5e:	4b0d      	ldr	r3, [pc, #52]	; (8008a94 <vPortValidateInterruptPriority+0x70>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008a66:	4b0c      	ldr	r3, [pc, #48]	; (8008a98 <vPortValidateInterruptPriority+0x74>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d909      	bls.n	8008a82 <vPortValidateInterruptPriority+0x5e>
 8008a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a72:	f383 8811 	msr	BASEPRI, r3
 8008a76:	f3bf 8f6f 	isb	sy
 8008a7a:	f3bf 8f4f 	dsb	sy
 8008a7e:	603b      	str	r3, [r7, #0]
 8008a80:	e7fe      	b.n	8008a80 <vPortValidateInterruptPriority+0x5c>
	}
 8008a82:	3714      	adds	r7, #20
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr
 8008a8c:	e000e3f0 	.word	0xe000e3f0
 8008a90:	20000198 	.word	0x20000198
 8008a94:	e000ed0c 	.word	0xe000ed0c
 8008a98:	2000019c 	.word	0x2000019c
 8008a9c:	e000ed08 	.word	0xe000ed08
 8008aa0:	e000ed88 	.word	0xe000ed88

08008aa4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b08a      	sub	sp, #40	; 0x28
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008aac:	2300      	movs	r3, #0
 8008aae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008ab0:	f7fd fc9c 	bl	80063ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008ab4:	4b59      	ldr	r3, [pc, #356]	; (8008c1c <pvPortMalloc+0x178>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d101      	bne.n	8008ac0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008abc:	f000 f92e 	bl	8008d1c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008ac0:	4b57      	ldr	r3, [pc, #348]	; (8008c20 <pvPortMalloc+0x17c>)
 8008ac2:	681a      	ldr	r2, [r3, #0]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	4013      	ands	r3, r2
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	f040 808c 	bne.w	8008be6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d01c      	beq.n	8008b0e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008ad4:	2308      	movs	r3, #8
 8008ad6:	687a      	ldr	r2, [r7, #4]
 8008ad8:	4413      	add	r3, r2
 8008ada:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f003 0307 	and.w	r3, r3, #7
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d013      	beq.n	8008b0e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f023 0307 	bic.w	r3, r3, #7
 8008aec:	3308      	adds	r3, #8
 8008aee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f003 0307 	and.w	r3, r3, #7
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d009      	beq.n	8008b0e <pvPortMalloc+0x6a>
 8008afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008afe:	f383 8811 	msr	BASEPRI, r3
 8008b02:	f3bf 8f6f 	isb	sy
 8008b06:	f3bf 8f4f 	dsb	sy
 8008b0a:	617b      	str	r3, [r7, #20]
 8008b0c:	e7fe      	b.n	8008b0c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d068      	beq.n	8008be6 <pvPortMalloc+0x142>
 8008b14:	4b43      	ldr	r3, [pc, #268]	; (8008c24 <pvPortMalloc+0x180>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	687a      	ldr	r2, [r7, #4]
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	d863      	bhi.n	8008be6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008b1e:	4b42      	ldr	r3, [pc, #264]	; (8008c28 <pvPortMalloc+0x184>)
 8008b20:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008b22:	4b41      	ldr	r3, [pc, #260]	; (8008c28 <pvPortMalloc+0x184>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b28:	e004      	b.n	8008b34 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	627b      	str	r3, [r7, #36]	; 0x24
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b36:	685a      	ldr	r2, [r3, #4]
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d203      	bcs.n	8008b46 <pvPortMalloc+0xa2>
 8008b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d1f1      	bne.n	8008b2a <pvPortMalloc+0x86>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008b46:	4b35      	ldr	r3, [pc, #212]	; (8008c1c <pvPortMalloc+0x178>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d04a      	beq.n	8008be6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008b50:	6a3b      	ldr	r3, [r7, #32]
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	2308      	movs	r3, #8
 8008b56:	4413      	add	r3, r2
 8008b58:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5c:	681a      	ldr	r2, [r3, #0]
 8008b5e:	6a3b      	ldr	r3, [r7, #32]
 8008b60:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b64:	685a      	ldr	r2, [r3, #4]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	1ad2      	subs	r2, r2, r3
 8008b6a:	2308      	movs	r3, #8
 8008b6c:	005b      	lsls	r3, r3, #1
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	d91e      	bls.n	8008bb0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	4413      	add	r3, r2
 8008b78:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b7a:	69bb      	ldr	r3, [r7, #24]
 8008b7c:	f003 0307 	and.w	r3, r3, #7
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d009      	beq.n	8008b98 <pvPortMalloc+0xf4>
 8008b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b88:	f383 8811 	msr	BASEPRI, r3
 8008b8c:	f3bf 8f6f 	isb	sy
 8008b90:	f3bf 8f4f 	dsb	sy
 8008b94:	613b      	str	r3, [r7, #16]
 8008b96:	e7fe      	b.n	8008b96 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9a:	685a      	ldr	r2, [r3, #4]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	1ad2      	subs	r2, r2, r3
 8008ba0:	69bb      	ldr	r3, [r7, #24]
 8008ba2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8008baa:	69b8      	ldr	r0, [r7, #24]
 8008bac:	f000 f918 	bl	8008de0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008bb0:	4b1c      	ldr	r3, [pc, #112]	; (8008c24 <pvPortMalloc+0x180>)
 8008bb2:	681a      	ldr	r2, [r3, #0]
 8008bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	1ad2      	subs	r2, r2, r3
 8008bba:	4b1a      	ldr	r3, [pc, #104]	; (8008c24 <pvPortMalloc+0x180>)
 8008bbc:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008bbe:	4b19      	ldr	r3, [pc, #100]	; (8008c24 <pvPortMalloc+0x180>)
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	4b1a      	ldr	r3, [pc, #104]	; (8008c2c <pvPortMalloc+0x188>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d203      	bcs.n	8008bd2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008bca:	4b16      	ldr	r3, [pc, #88]	; (8008c24 <pvPortMalloc+0x180>)
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	4b17      	ldr	r3, [pc, #92]	; (8008c2c <pvPortMalloc+0x188>)
 8008bd0:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd4:	685a      	ldr	r2, [r3, #4]
 8008bd6:	4b12      	ldr	r3, [pc, #72]	; (8008c20 <pvPortMalloc+0x17c>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	431a      	orrs	r2, r3
 8008bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bde:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be2:	2200      	movs	r2, #0
 8008be4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008be6:	f7fd fc0f 	bl	8006408 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8008bea:	69fb      	ldr	r3, [r7, #28]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d101      	bne.n	8008bf4 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8008bf0:	f7f8 f86e 	bl	8000cd0 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008bf4:	69fb      	ldr	r3, [r7, #28]
 8008bf6:	f003 0307 	and.w	r3, r3, #7
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d009      	beq.n	8008c12 <pvPortMalloc+0x16e>
 8008bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c02:	f383 8811 	msr	BASEPRI, r3
 8008c06:	f3bf 8f6f 	isb	sy
 8008c0a:	f3bf 8f4f 	dsb	sy
 8008c0e:	60fb      	str	r3, [r7, #12]
 8008c10:	e7fe      	b.n	8008c10 <pvPortMalloc+0x16c>
	return pvReturn;
 8008c12:	69fb      	ldr	r3, [r7, #28]
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3728      	adds	r7, #40	; 0x28
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}
 8008c1c:	200071a8 	.word	0x200071a8
 8008c20:	200071b4 	.word	0x200071b4
 8008c24:	200071ac 	.word	0x200071ac
 8008c28:	200071a0 	.word	0x200071a0
 8008c2c:	200071b0 	.word	0x200071b0

08008c30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b086      	sub	sp, #24
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d046      	beq.n	8008cd0 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008c42:	2308      	movs	r3, #8
 8008c44:	425b      	negs	r3, r3
 8008c46:	697a      	ldr	r2, [r7, #20]
 8008c48:	4413      	add	r3, r2
 8008c4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	685a      	ldr	r2, [r3, #4]
 8008c54:	4b20      	ldr	r3, [pc, #128]	; (8008cd8 <vPortFree+0xa8>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4013      	ands	r3, r2
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d109      	bne.n	8008c72 <vPortFree+0x42>
 8008c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c62:	f383 8811 	msr	BASEPRI, r3
 8008c66:	f3bf 8f6f 	isb	sy
 8008c6a:	f3bf 8f4f 	dsb	sy
 8008c6e:	60fb      	str	r3, [r7, #12]
 8008c70:	e7fe      	b.n	8008c70 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d009      	beq.n	8008c8e <vPortFree+0x5e>
 8008c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c7e:	f383 8811 	msr	BASEPRI, r3
 8008c82:	f3bf 8f6f 	isb	sy
 8008c86:	f3bf 8f4f 	dsb	sy
 8008c8a:	60bb      	str	r3, [r7, #8]
 8008c8c:	e7fe      	b.n	8008c8c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	685a      	ldr	r2, [r3, #4]
 8008c92:	4b11      	ldr	r3, [pc, #68]	; (8008cd8 <vPortFree+0xa8>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4013      	ands	r3, r2
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d019      	beq.n	8008cd0 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d115      	bne.n	8008cd0 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	685a      	ldr	r2, [r3, #4]
 8008ca8:	4b0b      	ldr	r3, [pc, #44]	; (8008cd8 <vPortFree+0xa8>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	43db      	mvns	r3, r3
 8008cae:	401a      	ands	r2, r3
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008cb4:	f7fd fb9a 	bl	80063ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	685a      	ldr	r2, [r3, #4]
 8008cbc:	4b07      	ldr	r3, [pc, #28]	; (8008cdc <vPortFree+0xac>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	441a      	add	r2, r3
 8008cc2:	4b06      	ldr	r3, [pc, #24]	; (8008cdc <vPortFree+0xac>)
 8008cc4:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008cc6:	6938      	ldr	r0, [r7, #16]
 8008cc8:	f000 f88a 	bl	8008de0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008ccc:	f7fd fb9c 	bl	8006408 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008cd0:	3718      	adds	r7, #24
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	200071b4 	.word	0x200071b4
 8008cdc:	200071ac 	.word	0x200071ac

08008ce0 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8008ce4:	4b03      	ldr	r3, [pc, #12]	; (8008cf4 <xPortGetFreeHeapSize+0x14>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr
 8008cf2:	bf00      	nop
 8008cf4:	200071ac 	.word	0x200071ac

08008cf8 <xPortGetMinimumEverFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	af00      	add	r7, sp, #0
	return xMinimumEverFreeBytesRemaining;
 8008cfc:	4b03      	ldr	r3, [pc, #12]	; (8008d0c <xPortGetMinimumEverFreeHeapSize+0x14>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	46bd      	mov	sp, r7
 8008d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d08:	4770      	bx	lr
 8008d0a:	bf00      	nop
 8008d0c:	200071b0 	.word	0x200071b0

08008d10 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
 8008d10:	b480      	push	{r7}
 8008d12:	af00      	add	r7, sp, #0
	/* This just exists to keep the linker quiet. */
}
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr

08008d1c <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b085      	sub	sp, #20
 8008d20:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
uint32_t ulAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008d22:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8008d26:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	ulAddress = ( uint32_t ) ucHeap;
 8008d28:	4b27      	ldr	r3, [pc, #156]	; (8008dc8 <prvHeapInit+0xac>)
 8008d2a:	60fb      	str	r3, [r7, #12]

	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f003 0307 	and.w	r3, r3, #7
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d00c      	beq.n	8008d50 <prvHeapInit+0x34>
	{
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	3307      	adds	r3, #7
 8008d3a:	60fb      	str	r3, [r7, #12]
		ulAddress &= ~portBYTE_ALIGNMENT_MASK;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f023 0307 	bic.w	r3, r3, #7
 8008d42:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
 8008d44:	68ba      	ldr	r2, [r7, #8]
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	1ad2      	subs	r2, r2, r3
 8008d4a:	4b1f      	ldr	r3, [pc, #124]	; (8008dc8 <prvHeapInit+0xac>)
 8008d4c:	4413      	add	r3, r2
 8008d4e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) ulAddress;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008d54:	4b1d      	ldr	r3, [pc, #116]	; (8008dcc <prvHeapInit+0xb0>)
 8008d56:	687a      	ldr	r2, [r7, #4]
 8008d58:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008d5a:	4b1c      	ldr	r3, [pc, #112]	; (8008dcc <prvHeapInit+0xb0>)
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	4413      	add	r3, r2
 8008d66:	60fb      	str	r3, [r7, #12]
	ulAddress -= xHeapStructSize;
 8008d68:	2308      	movs	r3, #8
 8008d6a:	68fa      	ldr	r2, [r7, #12]
 8008d6c:	1ad3      	subs	r3, r2, r3
 8008d6e:	60fb      	str	r3, [r7, #12]
	ulAddress &= ~portBYTE_ALIGNMENT_MASK;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f023 0307 	bic.w	r3, r3, #7
 8008d76:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) ulAddress;
 8008d78:	68fa      	ldr	r2, [r7, #12]
 8008d7a:	4b15      	ldr	r3, [pc, #84]	; (8008dd0 <prvHeapInit+0xb4>)
 8008d7c:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8008d7e:	4b14      	ldr	r3, [pc, #80]	; (8008dd0 <prvHeapInit+0xb4>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	2200      	movs	r2, #0
 8008d84:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008d86:	4b12      	ldr	r3, [pc, #72]	; (8008dd0 <prvHeapInit+0xb4>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	68fa      	ldr	r2, [r7, #12]
 8008d96:	1ad2      	subs	r2, r2, r3
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008d9c:	4b0c      	ldr	r3, [pc, #48]	; (8008dd0 <prvHeapInit+0xb4>)
 8008d9e:	681a      	ldr	r2, [r3, #0]
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	685a      	ldr	r2, [r3, #4]
 8008da8:	4b0a      	ldr	r3, [pc, #40]	; (8008dd4 <prvHeapInit+0xb8>)
 8008daa:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	685a      	ldr	r2, [r3, #4]
 8008db0:	4b09      	ldr	r3, [pc, #36]	; (8008dd8 <prvHeapInit+0xbc>)
 8008db2:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008db4:	4b09      	ldr	r3, [pc, #36]	; (8008ddc <prvHeapInit+0xc0>)
 8008db6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008dba:	601a      	str	r2, [r3, #0]
}
 8008dbc:	3714      	adds	r7, #20
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr
 8008dc6:	bf00      	nop
 8008dc8:	200001a0 	.word	0x200001a0
 8008dcc:	200071a0 	.word	0x200071a0
 8008dd0:	200071a8 	.word	0x200071a8
 8008dd4:	200071b0 	.word	0x200071b0
 8008dd8:	200071ac 	.word	0x200071ac
 8008ddc:	200071b4 	.word	0x200071b4

08008de0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008de0:	b480      	push	{r7}
 8008de2:	b085      	sub	sp, #20
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008de8:	4b27      	ldr	r3, [pc, #156]	; (8008e88 <prvInsertBlockIntoFreeList+0xa8>)
 8008dea:	60fb      	str	r3, [r7, #12]
 8008dec:	e002      	b.n	8008df4 <prvInsertBlockIntoFreeList+0x14>
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	60fb      	str	r3, [r7, #12]
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681a      	ldr	r2, [r3, #0]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d3f7      	bcc.n	8008dee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	68ba      	ldr	r2, [r7, #8]
 8008e08:	441a      	add	r2, r3
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d108      	bne.n	8008e22 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	685a      	ldr	r2, [r3, #4]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	441a      	add	r2, r3
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	68ba      	ldr	r2, [r7, #8]
 8008e2c:	441a      	add	r2, r3
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d118      	bne.n	8008e68 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681a      	ldr	r2, [r3, #0]
 8008e3a:	4b14      	ldr	r3, [pc, #80]	; (8008e8c <prvInsertBlockIntoFreeList+0xac>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d00d      	beq.n	8008e5e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	685a      	ldr	r2, [r3, #4]
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	441a      	add	r2, r3
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	601a      	str	r2, [r3, #0]
 8008e5c:	e008      	b.n	8008e70 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008e5e:	4b0b      	ldr	r3, [pc, #44]	; (8008e8c <prvInsertBlockIntoFreeList+0xac>)
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	601a      	str	r2, [r3, #0]
 8008e66:	e003      	b.n	8008e70 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681a      	ldr	r2, [r3, #0]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008e70:	68fa      	ldr	r2, [r7, #12]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d002      	beq.n	8008e7e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	687a      	ldr	r2, [r7, #4]
 8008e7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e7e:	3714      	adds	r7, #20
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr
 8008e88:	200071a0 	.word	0x200071a0
 8008e8c:	200071a8 	.word	0x200071a8

08008e90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8008e90:	f8df d03c 	ldr.w	sp, [pc, #60]	; 8008ed0 <LoopFillZerobss+0x16>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008e94:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008e96:	f000 b804 	b.w	8008ea2 <LoopCopyDataInit>

08008e9a <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008e9a:	4b0e      	ldr	r3, [pc, #56]	; (8008ed4 <LoopFillZerobss+0x1a>)
  ldr  r3, [r3, r1]
 8008e9c:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008e9e:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008ea0:	3104      	adds	r1, #4

08008ea2 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008ea2:	480d      	ldr	r0, [pc, #52]	; (8008ed8 <LoopFillZerobss+0x1e>)
  ldr  r3, =_edata
 8008ea4:	4b0d      	ldr	r3, [pc, #52]	; (8008edc <LoopFillZerobss+0x22>)
  adds  r2, r0, r1
 8008ea6:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008ea8:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008eaa:	f4ff aff6 	bcc.w	8008e9a <CopyDataInit>
  ldr  r2, =_sbss
 8008eae:	4a0c      	ldr	r2, [pc, #48]	; (8008ee0 <LoopFillZerobss+0x26>)
  b  LoopFillZerobss
 8008eb0:	f000 b803 	b.w	8008eba <LoopFillZerobss>

08008eb4 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008eb4:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008eb6:	f842 3b04 	str.w	r3, [r2], #4

08008eba <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008eba:	4b0a      	ldr	r3, [pc, #40]	; (8008ee4 <LoopFillZerobss+0x2a>)
  cmp  r2, r3
 8008ebc:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008ebe:	f4ff aff9 	bcc.w	8008eb4 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008ec2:	f7f7 f981 	bl	80001c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008ec6:	f000 f811 	bl	8008eec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008eca:	f7f7 fd71 	bl	80009b0 <main>
  bx  lr    
 8008ece:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8008ed0:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8008ed4:	08009000 	.word	0x08009000
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008ed8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008edc:	2000003c 	.word	0x2000003c
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8008ee0:	2000003c 	.word	0x2000003c
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008ee4:	200071d4 	.word	0x200071d4

08008ee8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008ee8:	f7ff bffe 	b.w	8008ee8 <ADC_IRQHandler>

08008eec <__libc_init_array>:
 8008eec:	b570      	push	{r4, r5, r6, lr}
 8008eee:	4b0e      	ldr	r3, [pc, #56]	; (8008f28 <__libc_init_array+0x3c>)
 8008ef0:	4d0e      	ldr	r5, [pc, #56]	; (8008f2c <__libc_init_array+0x40>)
 8008ef2:	1aed      	subs	r5, r5, r3
 8008ef4:	10ad      	asrs	r5, r5, #2
 8008ef6:	2400      	movs	r4, #0
 8008ef8:	461e      	mov	r6, r3
 8008efa:	42ac      	cmp	r4, r5
 8008efc:	d004      	beq.n	8008f08 <__libc_init_array+0x1c>
 8008efe:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008f02:	4790      	blx	r2
 8008f04:	3401      	adds	r4, #1
 8008f06:	e7f8      	b.n	8008efa <__libc_init_array+0xe>
 8008f08:	f000 f836 	bl	8008f78 <_init>
 8008f0c:	4d08      	ldr	r5, [pc, #32]	; (8008f30 <__libc_init_array+0x44>)
 8008f0e:	4b09      	ldr	r3, [pc, #36]	; (8008f34 <__libc_init_array+0x48>)
 8008f10:	1aed      	subs	r5, r5, r3
 8008f12:	10ad      	asrs	r5, r5, #2
 8008f14:	2400      	movs	r4, #0
 8008f16:	461e      	mov	r6, r3
 8008f18:	42ac      	cmp	r4, r5
 8008f1a:	d004      	beq.n	8008f26 <__libc_init_array+0x3a>
 8008f1c:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008f20:	4790      	blx	r2
 8008f22:	3401      	adds	r4, #1
 8008f24:	e7f8      	b.n	8008f18 <__libc_init_array+0x2c>
 8008f26:	bd70      	pop	{r4, r5, r6, pc}
 8008f28:	08008ff8 	.word	0x08008ff8
 8008f2c:	08008ff8 	.word	0x08008ff8
 8008f30:	08008ffc 	.word	0x08008ffc
 8008f34:	08008ff8 	.word	0x08008ff8

08008f38 <memcmp>:
 8008f38:	b530      	push	{r4, r5, lr}
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d008      	beq.n	8008f52 <memcmp+0x1a>
 8008f40:	5cc5      	ldrb	r5, [r0, r3]
 8008f42:	3301      	adds	r3, #1
 8008f44:	18cc      	adds	r4, r1, r3
 8008f46:	f814 4c01 	ldrb.w	r4, [r4, #-1]
 8008f4a:	42a5      	cmp	r5, r4
 8008f4c:	d0f6      	beq.n	8008f3c <memcmp+0x4>
 8008f4e:	1b28      	subs	r0, r5, r4
 8008f50:	bd30      	pop	{r4, r5, pc}
 8008f52:	2000      	movs	r0, #0
 8008f54:	bd30      	pop	{r4, r5, pc}

08008f56 <memcpy>:
 8008f56:	b510      	push	{r4, lr}
 8008f58:	2300      	movs	r3, #0
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d003      	beq.n	8008f66 <memcpy+0x10>
 8008f5e:	5ccc      	ldrb	r4, [r1, r3]
 8008f60:	54c4      	strb	r4, [r0, r3]
 8008f62:	3301      	adds	r3, #1
 8008f64:	e7f9      	b.n	8008f5a <memcpy+0x4>
 8008f66:	bd10      	pop	{r4, pc}

08008f68 <memset>:
 8008f68:	4402      	add	r2, r0
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d002      	beq.n	8008f76 <memset+0xe>
 8008f70:	f803 1b01 	strb.w	r1, [r3], #1
 8008f74:	e7fa      	b.n	8008f6c <memset+0x4>
 8008f76:	4770      	bx	lr

08008f78 <_init>:
 8008f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f7a:	bf00      	nop
 8008f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f7e:	bc08      	pop	{r3}
 8008f80:	469e      	mov	lr, r3
 8008f82:	4770      	bx	lr

08008f84 <_fini>:
 8008f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f86:	bf00      	nop
 8008f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f8a:	bc08      	pop	{r3}
 8008f8c:	469e      	mov	lr, r3
 8008f8e:	4770      	bx	lr
