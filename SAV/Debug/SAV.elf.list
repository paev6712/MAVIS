
SAV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f94  08000188  08000188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800911c  0800911c  0001111c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080091a8  080091a8  000111a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080091ac  080091ac  000111ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000004c  20000000  080091b0  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0001c21c  2000004c  2000004c  0001804c  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  2001c268  2001c268  0001804c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0001804c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000d3a1  00000000  00000000  0001807c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002406  00000000  00000000  0002541d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000348  00000000  00000000  00027828  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000048f7  00000000  00000000  00027b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004c05  00000000  00000000  0002c467  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      00000082  00000000  00000000  0003106c  2**0
                  CONTENTS, READONLY
 15 .debug_frame  00003034  00000000  00000000  000310f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000020  00000000  00000000  00034128  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000004c 	.word	0x2000004c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009104 	.word	0x08009104

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009104 	.word	0x08009104
 80001c4:	20000050 	.word	0x20000050

080001c8 <prvUltrasonic1Task>:
 *%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */

/*********************************************************************************************
 * Ultrasonic1 data collection and processing
 *********************************************************************************************/
void prvUltrasonic1Task( void *pvParameters ) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for(;;){
	//you must also change these in the interrupt handler below and in hardware.h
//		for front sensor
		setOutput(GPIO_Pin_5);
 80001d0:	2020      	movs	r0, #32
 80001d2:	f000 f8b9 	bl	8000348 <setOutput>
		GPIOA->ON = GPIO_Pin_5;
 80001d6:	4b13      	ldr	r3, [pc, #76]	; (8000224 <prvUltrasonic1Task+0x5c>)
 80001d8:	2220      	movs	r2, #32
 80001da:	831a      	strh	r2, [r3, #24]
		for(i = 0; i < 150; i++){};//delays 10us
 80001dc:	2300      	movs	r3, #0
 80001de:	73fb      	strb	r3, [r7, #15]
 80001e0:	e002      	b.n	80001e8 <prvUltrasonic1Task+0x20>
 80001e2:	7bfb      	ldrb	r3, [r7, #15]
 80001e4:	3301      	adds	r3, #1
 80001e6:	73fb      	strb	r3, [r7, #15]
 80001e8:	7bfb      	ldrb	r3, [r7, #15]
 80001ea:	2b95      	cmp	r3, #149	; 0x95
 80001ec:	d9f9      	bls.n	80001e2 <prvUltrasonic1Task+0x1a>
		GPIOA->OFF = GPIO_Pin_5;
 80001ee:	4b0d      	ldr	r3, [pc, #52]	; (8000224 <prvUltrasonic1Task+0x5c>)
 80001f0:	2220      	movs	r2, #32
 80001f2:	835a      	strh	r2, [r3, #26]
		setInput(GPIO_Pin_5);
 80001f4:	2020      	movs	r0, #32
 80001f6:	f000 f889 	bl	800030c <setInput>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 80001fa:	b662      	cpsie	i
		__enable_irq();
		while(!done1){};
 80001fc:	bf00      	nop
 80001fe:	4b0a      	ldr	r3, [pc, #40]	; (8000228 <prvUltrasonic1Task+0x60>)
 8000200:	781b      	ldrb	r3, [r3, #0]
 8000202:	b2db      	uxtb	r3, r3
 8000204:	2b00      	cmp	r3, #0
 8000206:	d0fa      	beq.n	80001fe <prvUltrasonic1Task+0x36>
		done1 = 0;
 8000208:	4b07      	ldr	r3, [pc, #28]	; (8000228 <prvUltrasonic1Task+0x60>)
 800020a:	2200      	movs	r2, #0
 800020c:	701a      	strb	r2, [r3, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 800020e:	b672      	cpsid	i
		__disable_irq();
		distCM_front = timerValue1;//convert from timer value to cm
 8000210:	4b06      	ldr	r3, [pc, #24]	; (800022c <prvUltrasonic1Task+0x64>)
 8000212:	881b      	ldrh	r3, [r3, #0]
 8000214:	b29a      	uxth	r2, r3
 8000216:	4b06      	ldr	r3, [pc, #24]	; (8000230 <prvUltrasonic1Task+0x68>)
 8000218:	801a      	strh	r2, [r3, #0]
		{
//			LED_MODE_PORT->OFF = LED_MODE_2_PIN;
		}


		vTaskDelay(ultrasonicFreq);
 800021a:	2000      	movs	r0, #0
 800021c:	f006 fad2 	bl	80067c4 <vTaskDelay>
	}
 8000220:	e7d6      	b.n	80001d0 <prvUltrasonic1Task+0x8>
 8000222:	bf00      	nop
 8000224:	40020000 	.word	0x40020000
 8000228:	2000006c 	.word	0x2000006c
 800022c:	2001c254 	.word	0x2001c254
 8000230:	2001c25c 	.word	0x2001c25c

08000234 <prvUltrasonic2Task>:


/*********************************************************************************************
 * Ultrasonic2 data collection and processing
 *********************************************************************************************/
void prvUltrasonic2Task( void *pvParameters ) {
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for(;;){
	//		for right sensor
			setOutput(GPIO_Pin_6);
 800023c:	2040      	movs	r0, #64	; 0x40
 800023e:	f000 f883 	bl	8000348 <setOutput>
			GPIOA->ON = GPIO_Pin_6;
 8000242:	4b13      	ldr	r3, [pc, #76]	; (8000290 <prvUltrasonic2Task+0x5c>)
 8000244:	2240      	movs	r2, #64	; 0x40
 8000246:	831a      	strh	r2, [r3, #24]
			for(i = 0; i < 150; i++){};//delays 10us
 8000248:	2300      	movs	r3, #0
 800024a:	73fb      	strb	r3, [r7, #15]
 800024c:	e002      	b.n	8000254 <prvUltrasonic2Task+0x20>
 800024e:	7bfb      	ldrb	r3, [r7, #15]
 8000250:	3301      	adds	r3, #1
 8000252:	73fb      	strb	r3, [r7, #15]
 8000254:	7bfb      	ldrb	r3, [r7, #15]
 8000256:	2b95      	cmp	r3, #149	; 0x95
 8000258:	d9f9      	bls.n	800024e <prvUltrasonic2Task+0x1a>
			GPIOA->OFF = GPIO_Pin_6;
 800025a:	4b0d      	ldr	r3, [pc, #52]	; (8000290 <prvUltrasonic2Task+0x5c>)
 800025c:	2240      	movs	r2, #64	; 0x40
 800025e:	835a      	strh	r2, [r3, #26]
			setInput(GPIO_Pin_6);
 8000260:	2040      	movs	r0, #64	; 0x40
 8000262:	f000 f853 	bl	800030c <setInput>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 8000266:	b662      	cpsie	i
			__enable_irq();
			while(!done2){};
 8000268:	bf00      	nop
 800026a:	4b0a      	ldr	r3, [pc, #40]	; (8000294 <prvUltrasonic2Task+0x60>)
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	b2db      	uxtb	r3, r3
 8000270:	2b00      	cmp	r3, #0
 8000272:	d0fa      	beq.n	800026a <prvUltrasonic2Task+0x36>
			done2 = 0;
 8000274:	4b07      	ldr	r3, [pc, #28]	; (8000294 <prvUltrasonic2Task+0x60>)
 8000276:	2200      	movs	r2, #0
 8000278:	701a      	strb	r2, [r3, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 800027a:	b672      	cpsid	i
			__disable_irq();
			distCM_right = timerValue2;//convert from timer value to cm
 800027c:	4b06      	ldr	r3, [pc, #24]	; (8000298 <prvUltrasonic2Task+0x64>)
 800027e:	881b      	ldrh	r3, [r3, #0]
 8000280:	b29a      	uxth	r2, r3
 8000282:	4b06      	ldr	r3, [pc, #24]	; (800029c <prvUltrasonic2Task+0x68>)
 8000284:	801a      	strh	r2, [r3, #0]

			else
			{
//				LED_MODE_PORT->OFF = LED_MODE_1_PIN;
			}
			vTaskDelay(ultrasonicFreq);
 8000286:	2000      	movs	r0, #0
 8000288:	f006 fa9c 	bl	80067c4 <vTaskDelay>
	}
 800028c:	e7d6      	b.n	800023c <prvUltrasonic2Task+0x8>
 800028e:	bf00      	nop
 8000290:	40020000 	.word	0x40020000
 8000294:	2000006d 	.word	0x2000006d
 8000298:	2001c258 	.word	0x2001c258
 800029c:	2001c260 	.word	0x2001c260

080002a0 <prvUltrasonic3Task>:
}

/*********************************************************************************************
 * Ultrasonic3 data collection and processing
 *********************************************************************************************/
void prvUltrasonic3Task( void *pvParameters ) {
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for(;;){
	//		for left sensor
			setOutput(GPIO_Pin_7);
 80002a8:	2080      	movs	r0, #128	; 0x80
 80002aa:	f000 f84d 	bl	8000348 <setOutput>
			GPIOA->ON = GPIO_Pin_7;
 80002ae:	4b13      	ldr	r3, [pc, #76]	; (80002fc <prvUltrasonic3Task+0x5c>)
 80002b0:	2280      	movs	r2, #128	; 0x80
 80002b2:	831a      	strh	r2, [r3, #24]
			for(i = 0; i < 150; i++){};//delays 10us
 80002b4:	2300      	movs	r3, #0
 80002b6:	73fb      	strb	r3, [r7, #15]
 80002b8:	e002      	b.n	80002c0 <prvUltrasonic3Task+0x20>
 80002ba:	7bfb      	ldrb	r3, [r7, #15]
 80002bc:	3301      	adds	r3, #1
 80002be:	73fb      	strb	r3, [r7, #15]
 80002c0:	7bfb      	ldrb	r3, [r7, #15]
 80002c2:	2b95      	cmp	r3, #149	; 0x95
 80002c4:	d9f9      	bls.n	80002ba <prvUltrasonic3Task+0x1a>
			GPIOA->OFF = GPIO_Pin_7;
 80002c6:	4b0d      	ldr	r3, [pc, #52]	; (80002fc <prvUltrasonic3Task+0x5c>)
 80002c8:	2280      	movs	r2, #128	; 0x80
 80002ca:	835a      	strh	r2, [r3, #26]
			setInput(GPIO_Pin_7);
 80002cc:	2080      	movs	r0, #128	; 0x80
 80002ce:	f000 f81d 	bl	800030c <setInput>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 80002d2:	b662      	cpsie	i
			__enable_irq();
			while(!done3){};
 80002d4:	bf00      	nop
 80002d6:	4b0a      	ldr	r3, [pc, #40]	; (8000300 <prvUltrasonic3Task+0x60>)
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	b2db      	uxtb	r3, r3
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d0fa      	beq.n	80002d6 <prvUltrasonic3Task+0x36>
			done3 = 0;
 80002e0:	4b07      	ldr	r3, [pc, #28]	; (8000300 <prvUltrasonic3Task+0x60>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	701a      	strb	r2, [r3, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80002e6:	b672      	cpsid	i
			__disable_irq();
			distCM_left = timerValue3;//convert from timer value to cm
 80002e8:	4b06      	ldr	r3, [pc, #24]	; (8000304 <prvUltrasonic3Task+0x64>)
 80002ea:	881b      	ldrh	r3, [r3, #0]
 80002ec:	b29a      	uxth	r2, r3
 80002ee:	4b06      	ldr	r3, [pc, #24]	; (8000308 <prvUltrasonic3Task+0x68>)
 80002f0:	801a      	strh	r2, [r3, #0]

			else
			{
//				LED_MODE_PORT->OFF = LED_MODE_3_PIN;
			}
			vTaskDelay(ultrasonicFreq);
 80002f2:	2000      	movs	r0, #0
 80002f4:	f006 fa66 	bl	80067c4 <vTaskDelay>
	}
 80002f8:	e7d6      	b.n	80002a8 <prvUltrasonic3Task+0x8>
 80002fa:	bf00      	nop
 80002fc:	40020000 	.word	0x40020000
 8000300:	2000006e 	.word	0x2000006e
 8000304:	2001c264 	.word	0x2001c264
 8000308:	2001c250 	.word	0x2001c250

0800030c <setInput>:
 *%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */

/*********************************************************************************************
 * Sets a pin on port A to input mode
 *********************************************************************************************/
void setInput(uint16_t pin){
 800030c:	b580      	push	{r7, lr}
 800030e:	b084      	sub	sp, #16
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	80fb      	strh	r3, [r7, #6]
	GPIO_InitTypeDef  GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000316:	2001      	movs	r0, #1
 8000318:	2101      	movs	r1, #1
 800031a:	f004 fa6f 	bl	80047fc <RCC_AHB1PeriphClockCmd>
		// Configure GPIO
		GPIO_InitStructure.GPIO_Pin = pin;
 800031e:	88fb      	ldrh	r3, [r7, #6]
 8000320:	60bb      	str	r3, [r7, #8]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000322:	2300      	movs	r3, #0
 8000324:	733b      	strb	r3, [r7, #12]
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8000326:	2303      	movs	r3, #3
 8000328:	737b      	strb	r3, [r7, #13]
		GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800032a:	2300      	movs	r3, #0
 800032c:	73bb      	strb	r3, [r7, #14]
		GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 800032e:	2302      	movs	r3, #2
 8000330:	73fb      	strb	r3, [r7, #15]
		GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000332:	f107 0308 	add.w	r3, r7, #8
 8000336:	4803      	ldr	r0, [pc, #12]	; (8000344 <setInput+0x38>)
 8000338:	4619      	mov	r1, r3
 800033a:	f004 fd49 	bl	8004dd0 <GPIO_Init>
}
 800033e:	3710      	adds	r7, #16
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}
 8000344:	40020000 	.word	0x40020000

08000348 <setOutput>:


/*********************************************************************************************
 * Sets a pin on port A to output mode
 *********************************************************************************************/
void setOutput(uint16_t pin){
 8000348:	b580      	push	{r7, lr}
 800034a:	b084      	sub	sp, #16
 800034c:	af00      	add	r7, sp, #0
 800034e:	4603      	mov	r3, r0
 8000350:	80fb      	strh	r3, [r7, #6]
	GPIO_InitTypeDef  GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000352:	2001      	movs	r0, #1
 8000354:	2101      	movs	r1, #1
 8000356:	f004 fa51 	bl	80047fc <RCC_AHB1PeriphClockCmd>

		// Configure GPIO
		GPIO_InitStructure.GPIO_Pin = pin;
 800035a:	88fb      	ldrh	r3, [r7, #6]
 800035c:	60bb      	str	r3, [r7, #8]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800035e:	2301      	movs	r3, #1
 8000360:	733b      	strb	r3, [r7, #12]
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8000362:	2303      	movs	r3, #3
 8000364:	737b      	strb	r3, [r7, #13]
		GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000366:	2300      	movs	r3, #0
 8000368:	73bb      	strb	r3, [r7, #14]
		GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800036a:	2300      	movs	r3, #0
 800036c:	73fb      	strb	r3, [r7, #15]
		GPIO_Init(GPIOA, &GPIO_InitStructure);
 800036e:	f107 0308 	add.w	r3, r7, #8
 8000372:	4803      	ldr	r0, [pc, #12]	; (8000380 <setOutput+0x38>)
 8000374:	4619      	mov	r1, r3
 8000376:	f004 fd2b 	bl	8004dd0 <GPIO_Init>
}
 800037a:	3710      	adds	r7, #16
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	40020000 	.word	0x40020000

08000384 <EXTI9_5_IRQHandler>:


/*********************************************************************************************
 * Handle interrupt for ultrasonic
 *********************************************************************************************/
void EXTI9_5_IRQHandler(void) {
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
	// Right sensor
    // Make sure that interrupt flag is set
    if (EXTI_GetITStatus(EXTI_Line5) != RESET) {
 8000388:	2020      	movs	r0, #32
 800038a:	f004 ffad 	bl	80052e8 <EXTI_GetITStatus>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d01a      	beq.n	80003ca <EXTI9_5_IRQHandler+0x46>
    	// Read the GPIO pin to see if we're on a rising edge or a falling edge
    	if(GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_5) == (uint8_t)Bit_SET) {
 8000394:	482c      	ldr	r0, [pc, #176]	; (8000448 <EXTI9_5_IRQHandler+0xc4>)
 8000396:	2120      	movs	r1, #32
 8000398:	f004 fde4 	bl	8004f64 <GPIO_ReadInputDataBit>
 800039c:	4603      	mov	r3, r0
 800039e:	2b01      	cmp	r3, #1
 80003a0:	d105      	bne.n	80003ae <EXTI9_5_IRQHandler+0x2a>
    		TIM_SetCounter(TIM2, 0);
 80003a2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80003a6:	2100      	movs	r1, #0
 80003a8:	f002 fa6e 	bl	8002888 <TIM_SetCounter>
 80003ac:	e00a      	b.n	80003c4 <EXTI9_5_IRQHandler+0x40>
    	} else {
    		timerValue1 = TIM_GetCounter(TIM2);
 80003ae:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80003b2:	f002 fa85 	bl	80028c0 <TIM_GetCounter>
 80003b6:	4603      	mov	r3, r0
 80003b8:	b29a      	uxth	r2, r3
 80003ba:	4b24      	ldr	r3, [pc, #144]	; (800044c <EXTI9_5_IRQHandler+0xc8>)
 80003bc:	801a      	strh	r2, [r3, #0]
    		done1 = 1;
 80003be:	4b24      	ldr	r3, [pc, #144]	; (8000450 <EXTI9_5_IRQHandler+0xcc>)
 80003c0:	2201      	movs	r2, #1
 80003c2:	701a      	strb	r2, [r3, #0]
    	}
    	// Clear interrupt flag
    	EXTI_ClearITPendingBit(EXTI_Line5);
 80003c4:	2020      	movs	r0, #32
 80003c6:	f004 ffb3 	bl	8005330 <EXTI_ClearITPendingBit>
    }

    // Front sensor
    if (EXTI_GetITStatus(EXTI_Line6) != RESET) {
 80003ca:	2040      	movs	r0, #64	; 0x40
 80003cc:	f004 ff8c 	bl	80052e8 <EXTI_GetITStatus>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d018      	beq.n	8000408 <EXTI9_5_IRQHandler+0x84>
    	if(GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_6) == (uint8_t)Bit_SET) {
 80003d6:	481c      	ldr	r0, [pc, #112]	; (8000448 <EXTI9_5_IRQHandler+0xc4>)
 80003d8:	2140      	movs	r1, #64	; 0x40
 80003da:	f004 fdc3 	bl	8004f64 <GPIO_ReadInputDataBit>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b01      	cmp	r3, #1
 80003e2:	d104      	bne.n	80003ee <EXTI9_5_IRQHandler+0x6a>
    		TIM_SetCounter(TIM4, 0);
 80003e4:	481b      	ldr	r0, [pc, #108]	; (8000454 <EXTI9_5_IRQHandler+0xd0>)
 80003e6:	2100      	movs	r1, #0
 80003e8:	f002 fa4e 	bl	8002888 <TIM_SetCounter>
 80003ec:	e009      	b.n	8000402 <EXTI9_5_IRQHandler+0x7e>
    	} else {
    		timerValue2 = TIM_GetCounter(TIM4);
 80003ee:	4819      	ldr	r0, [pc, #100]	; (8000454 <EXTI9_5_IRQHandler+0xd0>)
 80003f0:	f002 fa66 	bl	80028c0 <TIM_GetCounter>
 80003f4:	4603      	mov	r3, r0
 80003f6:	b29a      	uxth	r2, r3
 80003f8:	4b17      	ldr	r3, [pc, #92]	; (8000458 <EXTI9_5_IRQHandler+0xd4>)
 80003fa:	801a      	strh	r2, [r3, #0]
    		done2 = 1;
 80003fc:	4b17      	ldr	r3, [pc, #92]	; (800045c <EXTI9_5_IRQHandler+0xd8>)
 80003fe:	2201      	movs	r2, #1
 8000400:	701a      	strb	r2, [r3, #0]
    	}
    	// Clear interrupt flag
    	EXTI_ClearITPendingBit(EXTI_Line6);
 8000402:	2040      	movs	r0, #64	; 0x40
 8000404:	f004 ff94 	bl	8005330 <EXTI_ClearITPendingBit>
    }

    // Left sensor
    if (EXTI_GetITStatus(EXTI_Line7) != RESET) {
 8000408:	2080      	movs	r0, #128	; 0x80
 800040a:	f004 ff6d 	bl	80052e8 <EXTI_GetITStatus>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d018      	beq.n	8000446 <EXTI9_5_IRQHandler+0xc2>
    	if(GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_7) == (uint8_t)Bit_SET) {
 8000414:	480c      	ldr	r0, [pc, #48]	; (8000448 <EXTI9_5_IRQHandler+0xc4>)
 8000416:	2180      	movs	r1, #128	; 0x80
 8000418:	f004 fda4 	bl	8004f64 <GPIO_ReadInputDataBit>
 800041c:	4603      	mov	r3, r0
 800041e:	2b01      	cmp	r3, #1
 8000420:	d104      	bne.n	800042c <EXTI9_5_IRQHandler+0xa8>
    		TIM_SetCounter(TIM5, 0);
 8000422:	480f      	ldr	r0, [pc, #60]	; (8000460 <EXTI9_5_IRQHandler+0xdc>)
 8000424:	2100      	movs	r1, #0
 8000426:	f002 fa2f 	bl	8002888 <TIM_SetCounter>
 800042a:	e009      	b.n	8000440 <EXTI9_5_IRQHandler+0xbc>
    	} else {
    		timerValue3 = TIM_GetCounter(TIM5);
 800042c:	480c      	ldr	r0, [pc, #48]	; (8000460 <EXTI9_5_IRQHandler+0xdc>)
 800042e:	f002 fa47 	bl	80028c0 <TIM_GetCounter>
 8000432:	4603      	mov	r3, r0
 8000434:	b29a      	uxth	r2, r3
 8000436:	4b0b      	ldr	r3, [pc, #44]	; (8000464 <EXTI9_5_IRQHandler+0xe0>)
 8000438:	801a      	strh	r2, [r3, #0]
    		done3 = 1;
 800043a:	4b0b      	ldr	r3, [pc, #44]	; (8000468 <EXTI9_5_IRQHandler+0xe4>)
 800043c:	2201      	movs	r2, #1
 800043e:	701a      	strb	r2, [r3, #0]
    	}
    	// Clear interrupt flag
    	EXTI_ClearITPendingBit(EXTI_Line7);
 8000440:	2080      	movs	r0, #128	; 0x80
 8000442:	f004 ff75 	bl	8005330 <EXTI_ClearITPendingBit>
    }
}
 8000446:	bd80      	pop	{r7, pc}
 8000448:	40020000 	.word	0x40020000
 800044c:	2001c254 	.word	0x2001c254
 8000450:	2000006c 	.word	0x2000006c
 8000454:	40000800 	.word	0x40000800
 8000458:	2001c258 	.word	0x2001c258
 800045c:	2000006d 	.word	0x2000006d
 8000460:	40000c00 	.word	0x40000c00
 8000464:	2001c264 	.word	0x2001c264
 8000468:	2000006e 	.word	0x2000006e

0800046c <prvblinkTrafficLightCallback>:
#include "trafficLight.h"

/*********************************************************************************************
 * Timer callback to blink Traffic Light LED
 *********************************************************************************************/
void prvblinkTrafficLightCallback( TimerHandle_t pxTimer ) {
 800046c:	b480      	push	{r7}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]

	if( traffic_time > 0 ) {
 8000474:	4b1d      	ldr	r3, [pc, #116]	; (80004ec <prvblinkTrafficLightCallback+0x80>)
 8000476:	881b      	ldrh	r3, [r3, #0]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d025      	beq.n	80004c8 <prvblinkTrafficLightCallback+0x5c>
		// If there is at least 0.4 seconds until the change, toggle the LED
		if( (traffic_time % 400 == 0) && (traffic_time < 10000) ) {
 800047c:	4b1b      	ldr	r3, [pc, #108]	; (80004ec <prvblinkTrafficLightCallback+0x80>)
 800047e:	881b      	ldrh	r3, [r3, #0]
 8000480:	4a1b      	ldr	r2, [pc, #108]	; (80004f0 <prvblinkTrafficLightCallback+0x84>)
 8000482:	fba2 1203 	umull	r1, r2, r2, r3
 8000486:	09d2      	lsrs	r2, r2, #7
 8000488:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800048c:	fb01 f202 	mul.w	r2, r1, r2
 8000490:	1a9b      	subs	r3, r3, r2
 8000492:	b29b      	uxth	r3, r3
 8000494:	2b00      	cmp	r3, #0
 8000496:	d110      	bne.n	80004ba <prvblinkTrafficLightCallback+0x4e>
 8000498:	4b14      	ldr	r3, [pc, #80]	; (80004ec <prvblinkTrafficLightCallback+0x80>)
 800049a:	881a      	ldrh	r2, [r3, #0]
 800049c:	f242 730f 	movw	r3, #9999	; 0x270f
 80004a0:	429a      	cmp	r2, r3
 80004a2:	d80a      	bhi.n	80004ba <prvblinkTrafficLightCallback+0x4e>
			LED_LIGHT_PORT->ODR ^= led_light_pin[traffic_future_state];
 80004a4:	4b13      	ldr	r3, [pc, #76]	; (80004f4 <prvblinkTrafficLightCallback+0x88>)
 80004a6:	4a13      	ldr	r2, [pc, #76]	; (80004f4 <prvblinkTrafficLightCallback+0x88>)
 80004a8:	6951      	ldr	r1, [r2, #20]
 80004aa:	4a13      	ldr	r2, [pc, #76]	; (80004f8 <prvblinkTrafficLightCallback+0x8c>)
 80004ac:	7812      	ldrb	r2, [r2, #0]
 80004ae:	4610      	mov	r0, r2
 80004b0:	4a12      	ldr	r2, [pc, #72]	; (80004fc <prvblinkTrafficLightCallback+0x90>)
 80004b2:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 80004b6:	404a      	eors	r2, r1
 80004b8:	615a      	str	r2, [r3, #20]
		}

		// Decrease elapsed time
		traffic_time = traffic_time - 100;
 80004ba:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <prvblinkTrafficLightCallback+0x80>)
 80004bc:	881b      	ldrh	r3, [r3, #0]
 80004be:	3b64      	subs	r3, #100	; 0x64
 80004c0:	b29a      	uxth	r2, r3
 80004c2:	4b0a      	ldr	r3, [pc, #40]	; (80004ec <prvblinkTrafficLightCallback+0x80>)
 80004c4:	801a      	strh	r2, [r3, #0]
 80004c6:	e00b      	b.n	80004e0 <prvblinkTrafficLightCallback+0x74>
	} else {
		// Turn on the new state
		LED_LIGHT_PORT->OFF = LED_LIGHT_PINS;
 80004c8:	4b0a      	ldr	r3, [pc, #40]	; (80004f4 <prvblinkTrafficLightCallback+0x88>)
 80004ca:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80004ce:	835a      	strh	r2, [r3, #26]
		LED_LIGHT_PORT->ON = led_light_pin[traffic_future_state];
 80004d0:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <prvblinkTrafficLightCallback+0x88>)
 80004d2:	4a09      	ldr	r2, [pc, #36]	; (80004f8 <prvblinkTrafficLightCallback+0x8c>)
 80004d4:	7812      	ldrb	r2, [r2, #0]
 80004d6:	4611      	mov	r1, r2
 80004d8:	4a08      	ldr	r2, [pc, #32]	; (80004fc <prvblinkTrafficLightCallback+0x90>)
 80004da:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80004de:	831a      	strh	r2, [r3, #24]
	}
}
 80004e0:	370c      	adds	r7, #12
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	2001c234 	.word	0x2001c234
 80004f0:	51eb851f 	.word	0x51eb851f
 80004f4:	40020800 	.word	0x40020800
 80004f8:	2001c1ec 	.word	0x2001c1ec
 80004fc:	20000024 	.word	0x20000024

08000500 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000504:	4b15      	ldr	r3, [pc, #84]	; (800055c <SystemInit+0x5c>)
 8000506:	4a15      	ldr	r2, [pc, #84]	; (800055c <SystemInit+0x5c>)
 8000508:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800050c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000510:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <SystemInit+0x60>)
 8000516:	4a12      	ldr	r2, [pc, #72]	; (8000560 <SystemInit+0x60>)
 8000518:	6812      	ldr	r2, [r2, #0]
 800051a:	f042 0201 	orr.w	r2, r2, #1
 800051e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000520:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <SystemInit+0x60>)
 8000522:	2200      	movs	r2, #0
 8000524:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000526:	4a0e      	ldr	r2, [pc, #56]	; (8000560 <SystemInit+0x60>)
 8000528:	4b0d      	ldr	r3, [pc, #52]	; (8000560 <SystemInit+0x60>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000530:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000534:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000536:	4b0a      	ldr	r3, [pc, #40]	; (8000560 <SystemInit+0x60>)
 8000538:	4a0a      	ldr	r2, [pc, #40]	; (8000564 <SystemInit+0x64>)
 800053a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800053c:	4b08      	ldr	r3, [pc, #32]	; (8000560 <SystemInit+0x60>)
 800053e:	4a08      	ldr	r2, [pc, #32]	; (8000560 <SystemInit+0x60>)
 8000540:	6812      	ldr	r2, [r2, #0]
 8000542:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000546:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000548:	4b05      	ldr	r3, [pc, #20]	; (8000560 <SystemInit+0x60>)
 800054a:	2200      	movs	r2, #0
 800054c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800054e:	f000 f887 	bl	8000660 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000552:	4b02      	ldr	r3, [pc, #8]	; (800055c <SystemInit+0x5c>)
 8000554:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000558:	609a      	str	r2, [r3, #8]
#endif
}
 800055a:	bd80      	pop	{r7, pc}
 800055c:	e000ed00 	.word	0xe000ed00
 8000560:	40023800 	.word	0x40023800
 8000564:	24003010 	.word	0x24003010

08000568 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000568:	b480      	push	{r7}
 800056a:	b087      	sub	sp, #28
 800056c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800056e:	2300      	movs	r3, #0
 8000570:	613b      	str	r3, [r7, #16]
 8000572:	2300      	movs	r3, #0
 8000574:	617b      	str	r3, [r7, #20]
 8000576:	2302      	movs	r3, #2
 8000578:	60fb      	str	r3, [r7, #12]
 800057a:	2300      	movs	r3, #0
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	2302      	movs	r3, #2
 8000580:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000582:	4b32      	ldr	r3, [pc, #200]	; (800064c <SystemCoreClockUpdate+0xe4>)
 8000584:	689b      	ldr	r3, [r3, #8]
 8000586:	f003 030c 	and.w	r3, r3, #12
 800058a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 800058c:	693b      	ldr	r3, [r7, #16]
 800058e:	2b04      	cmp	r3, #4
 8000590:	d007      	beq.n	80005a2 <SystemCoreClockUpdate+0x3a>
 8000592:	2b08      	cmp	r3, #8
 8000594:	d009      	beq.n	80005aa <SystemCoreClockUpdate+0x42>
 8000596:	2b00      	cmp	r3, #0
 8000598:	d13f      	bne.n	800061a <SystemCoreClockUpdate+0xb2>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800059a:	4b2d      	ldr	r3, [pc, #180]	; (8000650 <SystemCoreClockUpdate+0xe8>)
 800059c:	4a2d      	ldr	r2, [pc, #180]	; (8000654 <SystemCoreClockUpdate+0xec>)
 800059e:	601a      	str	r2, [r3, #0]
      break;
 80005a0:	e03f      	b.n	8000622 <SystemCoreClockUpdate+0xba>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80005a2:	4b2b      	ldr	r3, [pc, #172]	; (8000650 <SystemCoreClockUpdate+0xe8>)
 80005a4:	4a2c      	ldr	r2, [pc, #176]	; (8000658 <SystemCoreClockUpdate+0xf0>)
 80005a6:	601a      	str	r2, [r3, #0]
      break;
 80005a8:	e03b      	b.n	8000622 <SystemCoreClockUpdate+0xba>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80005aa:	4b28      	ldr	r3, [pc, #160]	; (800064c <SystemCoreClockUpdate+0xe4>)
 80005ac:	685b      	ldr	r3, [r3, #4]
 80005ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005b2:	0d9b      	lsrs	r3, r3, #22
 80005b4:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80005b6:	4b25      	ldr	r3, [pc, #148]	; (800064c <SystemCoreClockUpdate+0xe4>)
 80005b8:	685b      	ldr	r3, [r3, #4]
 80005ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80005be:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d00d      	beq.n	80005e2 <SystemCoreClockUpdate+0x7a>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80005c6:	4a24      	ldr	r2, [pc, #144]	; (8000658 <SystemCoreClockUpdate+0xf0>)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80005ce:	4b1f      	ldr	r3, [pc, #124]	; (800064c <SystemCoreClockUpdate+0xe4>)
 80005d0:	6859      	ldr	r1, [r3, #4]
 80005d2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80005d6:	400b      	ands	r3, r1
 80005d8:	099b      	lsrs	r3, r3, #6
 80005da:	fb03 f302 	mul.w	r3, r3, r2
 80005de:	617b      	str	r3, [r7, #20]
 80005e0:	e00c      	b.n	80005fc <SystemCoreClockUpdate+0x94>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80005e2:	4a1c      	ldr	r2, [pc, #112]	; (8000654 <SystemCoreClockUpdate+0xec>)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80005ea:	4b18      	ldr	r3, [pc, #96]	; (800064c <SystemCoreClockUpdate+0xe4>)
 80005ec:	6859      	ldr	r1, [r3, #4]
 80005ee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80005f2:	400b      	ands	r3, r1
 80005f4:	099b      	lsrs	r3, r3, #6
 80005f6:	fb03 f302 	mul.w	r3, r3, r2
 80005fa:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80005fc:	4b13      	ldr	r3, [pc, #76]	; (800064c <SystemCoreClockUpdate+0xe4>)
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000604:	0c1b      	lsrs	r3, r3, #16
 8000606:	3301      	adds	r3, #1
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 800060c:	697a      	ldr	r2, [r7, #20]
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	fbb2 f2f3 	udiv	r2, r2, r3
 8000614:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <SystemCoreClockUpdate+0xe8>)
 8000616:	601a      	str	r2, [r3, #0]
      break;
 8000618:	e003      	b.n	8000622 <SystemCoreClockUpdate+0xba>
    default:
      SystemCoreClock = HSI_VALUE;
 800061a:	4b0d      	ldr	r3, [pc, #52]	; (8000650 <SystemCoreClockUpdate+0xe8>)
 800061c:	4a0d      	ldr	r2, [pc, #52]	; (8000654 <SystemCoreClockUpdate+0xec>)
 800061e:	601a      	str	r2, [r3, #0]
      break;
 8000620:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000622:	4b0a      	ldr	r3, [pc, #40]	; (800064c <SystemCoreClockUpdate+0xe4>)
 8000624:	689b      	ldr	r3, [r3, #8]
 8000626:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800062a:	091b      	lsrs	r3, r3, #4
 800062c:	4a0b      	ldr	r2, [pc, #44]	; (800065c <SystemCoreClockUpdate+0xf4>)
 800062e:	5cd3      	ldrb	r3, [r2, r3]
 8000630:	b2db      	uxtb	r3, r3
 8000632:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <SystemCoreClockUpdate+0xe8>)
 8000636:	681a      	ldr	r2, [r3, #0]
 8000638:	693b      	ldr	r3, [r7, #16]
 800063a:	40da      	lsrs	r2, r3
 800063c:	4b04      	ldr	r3, [pc, #16]	; (8000650 <SystemCoreClockUpdate+0xe8>)
 800063e:	601a      	str	r2, [r3, #0]
}
 8000640:	371c      	adds	r7, #28
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	40023800 	.word	0x40023800
 8000650:	20000004 	.word	0x20000004
 8000654:	00f42400 	.word	0x00f42400
 8000658:	01312d00 	.word	0x01312d00
 800065c:	20000008 	.word	0x20000008

08000660 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000666:	2300      	movs	r3, #0
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	2300      	movs	r3, #0
 800066c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800066e:	4b35      	ldr	r3, [pc, #212]	; (8000744 <SetSysClock+0xe4>)
 8000670:	4a34      	ldr	r2, [pc, #208]	; (8000744 <SetSysClock+0xe4>)
 8000672:	6812      	ldr	r2, [r2, #0]
 8000674:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000678:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800067a:	4b32      	ldr	r3, [pc, #200]	; (8000744 <SetSysClock+0xe4>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000682:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	3301      	adds	r3, #1
 8000688:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d103      	bne.n	8000698 <SetSysClock+0x38>
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000696:	d1f0      	bne.n	800067a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000698:	4b2a      	ldr	r3, [pc, #168]	; (8000744 <SetSysClock+0xe4>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d002      	beq.n	80006aa <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80006a4:	2301      	movs	r3, #1
 80006a6:	603b      	str	r3, [r7, #0]
 80006a8:	e001      	b.n	80006ae <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80006aa:	2300      	movs	r3, #0
 80006ac:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	d142      	bne.n	800073a <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80006b4:	4b23      	ldr	r3, [pc, #140]	; (8000744 <SetSysClock+0xe4>)
 80006b6:	4a23      	ldr	r2, [pc, #140]	; (8000744 <SetSysClock+0xe4>)
 80006b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80006ba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80006be:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80006c0:	4b21      	ldr	r3, [pc, #132]	; (8000748 <SetSysClock+0xe8>)
 80006c2:	4a21      	ldr	r2, [pc, #132]	; (8000748 <SetSysClock+0xe8>)
 80006c4:	6812      	ldr	r2, [r2, #0]
 80006c6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80006ca:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80006cc:	4b1d      	ldr	r3, [pc, #116]	; (8000744 <SetSysClock+0xe4>)
 80006ce:	4a1d      	ldr	r2, [pc, #116]	; (8000744 <SetSysClock+0xe4>)
 80006d0:	6892      	ldr	r2, [r2, #8]
 80006d2:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80006d4:	4b1b      	ldr	r3, [pc, #108]	; (8000744 <SetSysClock+0xe4>)
 80006d6:	4a1b      	ldr	r2, [pc, #108]	; (8000744 <SetSysClock+0xe4>)
 80006d8:	6892      	ldr	r2, [r2, #8]
 80006da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80006de:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80006e0:	4b18      	ldr	r3, [pc, #96]	; (8000744 <SetSysClock+0xe4>)
 80006e2:	4a18      	ldr	r2, [pc, #96]	; (8000744 <SetSysClock+0xe4>)
 80006e4:	6892      	ldr	r2, [r2, #8]
 80006e6:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 80006ea:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80006ec:	4b15      	ldr	r3, [pc, #84]	; (8000744 <SetSysClock+0xe4>)
 80006ee:	4a17      	ldr	r2, [pc, #92]	; (800074c <SetSysClock+0xec>)
 80006f0:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80006f2:	4b14      	ldr	r3, [pc, #80]	; (8000744 <SetSysClock+0xe4>)
 80006f4:	4a13      	ldr	r2, [pc, #76]	; (8000744 <SetSysClock+0xe4>)
 80006f6:	6812      	ldr	r2, [r2, #0]
 80006f8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80006fc:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80006fe:	bf00      	nop
 8000700:	4b10      	ldr	r3, [pc, #64]	; (8000744 <SetSysClock+0xe4>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000708:	2b00      	cmp	r3, #0
 800070a:	d0f9      	beq.n	8000700 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800070c:	4b10      	ldr	r3, [pc, #64]	; (8000750 <SetSysClock+0xf0>)
 800070e:	f240 7205 	movw	r2, #1797	; 0x705
 8000712:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000714:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <SetSysClock+0xe4>)
 8000716:	4a0b      	ldr	r2, [pc, #44]	; (8000744 <SetSysClock+0xe4>)
 8000718:	6892      	ldr	r2, [r2, #8]
 800071a:	f022 0203 	bic.w	r2, r2, #3
 800071e:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000720:	4b08      	ldr	r3, [pc, #32]	; (8000744 <SetSysClock+0xe4>)
 8000722:	4a08      	ldr	r2, [pc, #32]	; (8000744 <SetSysClock+0xe4>)
 8000724:	6892      	ldr	r2, [r2, #8]
 8000726:	f042 0202 	orr.w	r2, r2, #2
 800072a:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800072c:	bf00      	nop
 800072e:	4b05      	ldr	r3, [pc, #20]	; (8000744 <SetSysClock+0xe4>)
 8000730:	689b      	ldr	r3, [r3, #8]
 8000732:	f003 030c 	and.w	r3, r3, #12
 8000736:	2b08      	cmp	r3, #8
 8000738:	d1f9      	bne.n	800072e <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	40023800 	.word	0x40023800
 8000748:	40007000 	.word	0x40007000
 800074c:	07405414 	.word	0x07405414
 8000750:	40023c00 	.word	0x40023c00

08000754 <swTimerInit>:
 * Initialize SW Timer
 *		* timerPeriod: 			Period before timer goes off
 *   	* repeat:				Should timer be reset after it expires
 *    	* pxCallbackFunction: 	Function called when timer expires
 *********************************************************************************************/
TimerHandle_t swTimerInit( uint16_t timer_period, UBaseType_t repeat, TimerCallbackFunction_t pxCallbackFunction ) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b088      	sub	sp, #32
 8000758:	af02      	add	r7, sp, #8
 800075a:	4603      	mov	r3, r0
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	607a      	str	r2, [r7, #4]
 8000760:	81fb      	strh	r3, [r7, #14]

	// Convert period in milliseconds to tick counts
	TickType_t timer_tick = timer_period * ( 1 / portTICK_PERIOD_MS);
 8000762:	89fb      	ldrh	r3, [r7, #14]
 8000764:	617b      	str	r3, [r7, #20]

	// Create timer
	// Note that pvTimerID is set to NULL so that if the same callback function is assigned to more than one timer it can't tell between them
	TimerHandle_t handle = xTimerCreate("", timer_tick, repeat, NULL, pxCallbackFunction);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	9300      	str	r3, [sp, #0]
 800076a:	4806      	ldr	r0, [pc, #24]	; (8000784 <swTimerInit+0x30>)
 800076c:	6979      	ldr	r1, [r7, #20]
 800076e:	68ba      	ldr	r2, [r7, #8]
 8000770:	2300      	movs	r3, #0
 8000772:	f005 fc07 	bl	8005f84 <xTimerCreate>
 8000776:	6138      	str	r0, [r7, #16]

	return handle;
 8000778:	693b      	ldr	r3, [r7, #16]
}
 800077a:	4618      	mov	r0, r3
 800077c:	3718      	adds	r7, #24
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	0800911c 	.word	0x0800911c

08000788 <swTimerStart>:
/*********************************************************************************************
 * Start SW Timer
 * 		* handle:				Pointer to the timer created using swTimerInit
 * 		* timeWait:				Blocking time until timer starts (can be set to 0)
 *********************************************************************************************/
uint8_t swTimerStart( TimerHandle_t handle, uint8_t timeWait ) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af02      	add	r7, sp, #8
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	460b      	mov	r3, r1
 8000792:	70fb      	strb	r3, [r7, #3]

	// If handle is NULL, timer was never properly created
	if( handle == NULL ) {
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d101      	bne.n	800079e <swTimerStart+0x16>
		return FAILURE;
 800079a:	2300      	movs	r3, #0
 800079c:	e012      	b.n	80007c4 <swTimerStart+0x3c>
	}

	// Convert period in milliseconds to wait to tick counts
	TickType_t tickWait = timeWait * (1 / portTICK_PERIOD_MS);
 800079e:	78fb      	ldrb	r3, [r7, #3]
 80007a0:	60fb      	str	r3, [r7, #12]
	if( xTimerStart(handle, tickWait) != pdPASS ) {
 80007a2:	f006 fb6d 	bl	8006e80 <xTaskGetTickCount>
 80007a6:	4603      	mov	r3, r0
 80007a8:	68fa      	ldr	r2, [r7, #12]
 80007aa:	9200      	str	r2, [sp, #0]
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	2101      	movs	r1, #1
 80007b0:	461a      	mov	r2, r3
 80007b2:	2300      	movs	r3, #0
 80007b4:	f005 fc16 	bl	8005fe4 <xTimerGenericCommand>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d001      	beq.n	80007c2 <swTimerStart+0x3a>
		return FAILURE;
 80007be:	2300      	movs	r3, #0
 80007c0:	e000      	b.n	80007c4 <swTimerStart+0x3c>
	}

	return SUCCESS;
 80007c2:	2301      	movs	r3, #1
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <swTimerStop>:

/*********************************************************************************************
 * Stop SW Timer
 * 		* handle:				Pointer to the timer created using swTimerInit
 *********************************************************************************************/
uint8_t swTimerStop( TimerHandle_t handle ) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af02      	add	r7, sp, #8
 80007d2:	6078      	str	r0, [r7, #4]

	// If handle is NULL, timer was never properly created
	if( handle == NULL ) {
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d101      	bne.n	80007de <swTimerStop+0x12>
		return FAILURE;
 80007da:	2300      	movs	r3, #0
 80007dc:	e00d      	b.n	80007fa <swTimerStop+0x2e>
	}

	if( xTimerStop(handle, 0) != pdPASS ) {
 80007de:	2300      	movs	r3, #0
 80007e0:	9300      	str	r3, [sp, #0]
 80007e2:	6878      	ldr	r0, [r7, #4]
 80007e4:	2103      	movs	r1, #3
 80007e6:	2200      	movs	r2, #0
 80007e8:	2300      	movs	r3, #0
 80007ea:	f005 fbfb 	bl	8005fe4 <xTimerGenericCommand>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d001      	beq.n	80007f8 <swTimerStop+0x2c>
		return FAILURE;
 80007f4:	2300      	movs	r3, #0
 80007f6:	e000      	b.n	80007fa <swTimerStop+0x2e>
	}

	return SUCCESS;
 80007f8:	2301      	movs	r3, #1
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop

08000804 <swIsTimerActive>:

/*********************************************************************************************
 * Check if SW Timer is active
 * 		* handle:				Pointer to the timer created using swTimerInit
 *********************************************************************************************/
uint8_t swIsTimerActive( TimerHandle_t handle ) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]

	if( xTimerIsTimerActive( handle ) != pdPASS ) {
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f005 fe3b 	bl	8006488 <xTimerIsTimerActive>
 8000812:	4603      	mov	r3, r0
 8000814:	2b01      	cmp	r3, #1
 8000816:	d001      	beq.n	800081c <swIsTimerActive+0x18>
		return FAILURE;
 8000818:	2300      	movs	r3, #0
 800081a:	e000      	b.n	800081e <swIsTimerActive+0x1a>
	}

	return SUCCESS;
 800081c:	2301      	movs	r3, #1
}
 800081e:	4618      	mov	r0, r3
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop

08000828 <prvDelayCallback>:


/*********************************************************************************************
 * Local timer callback function
 *********************************************************************************************/
void prvDelayCallback( TimerHandle_t pxTimer ) {
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
	delay_done = TRUE;
 8000830:	4b03      	ldr	r3, [pc, #12]	; (8000840 <prvDelayCallback+0x18>)
 8000832:	2201      	movs	r2, #1
 8000834:	701a      	strb	r2, [r3, #0]
}
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	2001c1fa 	.word	0x2001c1fa

08000844 <swDelay>:


/*********************************************************************************************
 * Delay for given amount of time (in ms)
 *********************************************************************************************/
uint8_t swDelay( uint16_t delay_time ) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	80fb      	strh	r3, [r7, #6]

	// Set global false
	delay_done = FALSE;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <swDelay+0x44>)
 8000850:	2200      	movs	r2, #0
 8000852:	701a      	strb	r2, [r3, #0]

	// Create and start local swTimer
	TimerHandle_t delay = swTimerInit( delay_time, NO_REPEAT, prvDelayCallback );
 8000854:	88fb      	ldrh	r3, [r7, #6]
 8000856:	4618      	mov	r0, r3
 8000858:	2100      	movs	r1, #0
 800085a:	4a0c      	ldr	r2, [pc, #48]	; (800088c <swDelay+0x48>)
 800085c:	f7ff ff7a 	bl	8000754 <swTimerInit>
 8000860:	60f8      	str	r0, [r7, #12]
	if( !swTimerStart( delay, 0 ) ) {
 8000862:	68f8      	ldr	r0, [r7, #12]
 8000864:	2100      	movs	r1, #0
 8000866:	f7ff ff8f 	bl	8000788 <swTimerStart>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d101      	bne.n	8000874 <swDelay+0x30>
		return FAILURE;
 8000870:	2300      	movs	r3, #0
 8000872:	e005      	b.n	8000880 <swDelay+0x3c>
	}

	// Wait until timer completes
	while( !delay_done );
 8000874:	bf00      	nop
 8000876:	4b04      	ldr	r3, [pc, #16]	; (8000888 <swDelay+0x44>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d0fb      	beq.n	8000876 <swDelay+0x32>

	return SUCCESS;
 800087e:	2301      	movs	r3, #1
}
 8000880:	4618      	mov	r0, r3
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	2001c1fa 	.word	0x2001c1fa
 800088c:	08000829 	.word	0x08000829

08000890 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
}
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 80008a0:	e7fe      	b.n	80008a0 <HardFault_Handler+0x4>
 80008a2:	bf00      	nop

080008a4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 80008a8:	e7fe      	b.n	80008a8 <MemManage_Handler+0x4>
 80008aa:	bf00      	nop

080008ac <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 80008b0:	e7fe      	b.n	80008b0 <BusFault_Handler+0x4>
 80008b2:	bf00      	nop

080008b4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 80008b8:	e7fe      	b.n	80008b8 <UsageFault_Handler+0x4>
 80008ba:	bf00      	nop

080008bc <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
}
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr

080008c8 <prvReadPowerCallback>:


/*********************************************************************************************
 * Timer callback to read power measurement
 *********************************************************************************************/
void prvReadPowerCallback( TimerHandle_t pxTimer ) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]

	// Increment time based on the value the timer delays
	power_time += 5;
 80008d0:	4b28      	ldr	r3, [pc, #160]	; (8000974 <prvReadPowerCallback+0xac>)
 80008d2:	881b      	ldrh	r3, [r3, #0]
 80008d4:	3305      	adds	r3, #5
 80008d6:	b29a      	uxth	r2, r3
 80008d8:	4b26      	ldr	r3, [pc, #152]	; (8000974 <prvReadPowerCallback+0xac>)
 80008da:	801a      	strh	r2, [r3, #0]

	// Read ADC pin
	ADC_RegularChannelConfig( MEASURED_POWER_ADC, MEASURED_POWER_CHANNEL, 1, ADC_SampleTime_15Cycles );
 80008dc:	4826      	ldr	r0, [pc, #152]	; (8000978 <prvReadPowerCallback+0xb0>)
 80008de:	210d      	movs	r1, #13
 80008e0:	2201      	movs	r2, #1
 80008e2:	2301      	movs	r3, #1
 80008e4:	f004 fe90 	bl	8005608 <ADC_RegularChannelConfig>
	ADC_SoftwareStartConv( MEASURED_POWER_ADC );
 80008e8:	4823      	ldr	r0, [pc, #140]	; (8000978 <prvReadPowerCallback+0xb0>)
 80008ea:	f004 ff51 	bl	8005790 <ADC_SoftwareStartConv>
	while( ADC_GetFlagStatus(MEASURED_POWER_ADC, ADC_FLAG_EOC) == RESET );
 80008ee:	bf00      	nop
 80008f0:	4821      	ldr	r0, [pc, #132]	; (8000978 <prvReadPowerCallback+0xb0>)
 80008f2:	2102      	movs	r1, #2
 80008f4:	f005 f9f0 	bl	8005cd8 <ADC_GetFlagStatus>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d0f8      	beq.n	80008f0 <prvReadPowerCallback+0x28>
	uint32_t current_power = (uint32_t) ADC_GetConversionValue( MEASURED_POWER_ADC );
 80008fe:	481e      	ldr	r0, [pc, #120]	; (8000978 <prvReadPowerCallback+0xb0>)
 8000900:	f004 ffe4 	bl	80058cc <ADC_GetConversionValue>
 8000904:	4603      	mov	r3, r0
 8000906:	617b      	str	r3, [r7, #20]

	// Add to total power value
	power_total += current_power;
 8000908:	4b1c      	ldr	r3, [pc, #112]	; (800097c <prvReadPowerCallback+0xb4>)
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	441a      	add	r2, r3
 8000910:	4b1a      	ldr	r3, [pc, #104]	; (800097c <prvReadPowerCallback+0xb4>)
 8000912:	601a      	str	r2, [r3, #0]

	// Send back packet every 30 seconds
	if( power_time % 6 == 0 ) {
 8000914:	4b17      	ldr	r3, [pc, #92]	; (8000974 <prvReadPowerCallback+0xac>)
 8000916:	881a      	ldrh	r2, [r3, #0]
 8000918:	4b19      	ldr	r3, [pc, #100]	; (8000980 <prvReadPowerCallback+0xb8>)
 800091a:	fba3 1302 	umull	r1, r3, r3, r2
 800091e:	0899      	lsrs	r1, r3, #2
 8000920:	460b      	mov	r3, r1
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	440b      	add	r3, r1
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	1ad3      	subs	r3, r2, r3
 800092a:	b29b      	uxth	r3, r3
 800092c:	2b00      	cmp	r3, #0
 800092e:	d11e      	bne.n	800096e <prvReadPowerCallback+0xa6>

		// Create header
		Header* header = pvPortMalloc( sizeof(Header) );
 8000930:	2005      	movs	r0, #5
 8000932:	f008 f9cb 	bl	8008ccc <pvPortMalloc>
 8000936:	6138      	str	r0, [r7, #16]
		header->dest = baseStation;
 8000938:	693b      	ldr	r3, [r7, #16]
 800093a:	2202      	movs	r2, #2
 800093c:	701a      	strb	r2, [r3, #0]
		header->addr = MY_ADDR;
 800093e:	693b      	ldr	r3, [r7, #16]
 8000940:	2201      	movs	r2, #1
 8000942:	705a      	strb	r2, [r3, #1]
		header->mode = allModes;
 8000944:	693b      	ldr	r3, [r7, #16]
 8000946:	2200      	movs	r2, #0
 8000948:	709a      	strb	r2, [r3, #2]
		header->type = powerConsumption;
 800094a:	693b      	ldr	r3, [r7, #16]
 800094c:	2206      	movs	r2, #6
 800094e:	70da      	strb	r2, [r3, #3]

		// Convert total power to average power
		uint16_t average_power = (uint16_t) (power_total/power_time);
 8000950:	4b0a      	ldr	r3, [pc, #40]	; (800097c <prvReadPowerCallback+0xb4>)
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	4b07      	ldr	r3, [pc, #28]	; (8000974 <prvReadPowerCallback+0xac>)
 8000956:	881b      	ldrh	r3, [r3, #0]
 8000958:	fbb2 f3f3 	udiv	r3, r2, r3
 800095c:	81fb      	strh	r3, [r7, #14]

		// Send packet
		sendPowerConsumption( header, average_power, power_time );
 800095e:	4b05      	ldr	r3, [pc, #20]	; (8000974 <prvReadPowerCallback+0xac>)
 8000960:	881b      	ldrh	r3, [r3, #0]
 8000962:	89fa      	ldrh	r2, [r7, #14]
 8000964:	6938      	ldr	r0, [r7, #16]
 8000966:	4611      	mov	r1, r2
 8000968:	461a      	mov	r2, r3
 800096a:	f000 f9b3 	bl	8000cd4 <sendPowerConsumption>
	}
}
 800096e:	3718      	adds	r7, #24
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	2001c1f8 	.word	0x2001c1f8
 8000978:	40012000 	.word	0x40012000
 800097c:	2001c1e8 	.word	0x2001c1e8
 8000980:	aaaaaaab 	.word	0xaaaaaaab

08000984 <prvReadPhotoCallback>:


/*********************************************************************************************
 * Timer callback to read photo resistors
 *********************************************************************************************/
void prvReadPhotoCallback( TimerHandle_t pxTimer ) {
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	static uint16_t photo2;
	static uint16_t photo3;
	static uint16_t photo_average;

	// Read photo1
	ADC_RegularChannelConfig( PHOTO_ADC, PHOTO_1_CHANNEL, 1, ADC_SampleTime_15Cycles );
 800098c:	484e      	ldr	r0, [pc, #312]	; (8000ac8 <prvReadPhotoCallback+0x144>)
 800098e:	210a      	movs	r1, #10
 8000990:	2201      	movs	r2, #1
 8000992:	2301      	movs	r3, #1
 8000994:	f004 fe38 	bl	8005608 <ADC_RegularChannelConfig>
	ADC_SoftwareStartConv( PHOTO_ADC );
 8000998:	484b      	ldr	r0, [pc, #300]	; (8000ac8 <prvReadPhotoCallback+0x144>)
 800099a:	f004 fef9 	bl	8005790 <ADC_SoftwareStartConv>
	while( ADC_GetFlagStatus(PHOTO_ADC, ADC_FLAG_EOC) == RESET );
 800099e:	bf00      	nop
 80009a0:	4849      	ldr	r0, [pc, #292]	; (8000ac8 <prvReadPhotoCallback+0x144>)
 80009a2:	2102      	movs	r1, #2
 80009a4:	f005 f998 	bl	8005cd8 <ADC_GetFlagStatus>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d0f8      	beq.n	80009a0 <prvReadPhotoCallback+0x1c>
	photo1 = ADC_GetConversionValue( PHOTO_ADC );
 80009ae:	4846      	ldr	r0, [pc, #280]	; (8000ac8 <prvReadPhotoCallback+0x144>)
 80009b0:	f004 ff8c 	bl	80058cc <ADC_GetConversionValue>
 80009b4:	4603      	mov	r3, r0
 80009b6:	461a      	mov	r2, r3
 80009b8:	4b44      	ldr	r3, [pc, #272]	; (8000acc <prvReadPhotoCallback+0x148>)
 80009ba:	801a      	strh	r2, [r3, #0]

	// Read photo2
	ADC_RegularChannelConfig( PHOTO_ADC, PHOTO_2_CHANNEL, 1, ADC_SampleTime_15Cycles );
 80009bc:	4842      	ldr	r0, [pc, #264]	; (8000ac8 <prvReadPhotoCallback+0x144>)
 80009be:	210b      	movs	r1, #11
 80009c0:	2201      	movs	r2, #1
 80009c2:	2301      	movs	r3, #1
 80009c4:	f004 fe20 	bl	8005608 <ADC_RegularChannelConfig>
	ADC_SoftwareStartConv( PHOTO_ADC );
 80009c8:	483f      	ldr	r0, [pc, #252]	; (8000ac8 <prvReadPhotoCallback+0x144>)
 80009ca:	f004 fee1 	bl	8005790 <ADC_SoftwareStartConv>
	while( ADC_GetFlagStatus(PHOTO_ADC, ADC_FLAG_EOC) == RESET );
 80009ce:	bf00      	nop
 80009d0:	483d      	ldr	r0, [pc, #244]	; (8000ac8 <prvReadPhotoCallback+0x144>)
 80009d2:	2102      	movs	r1, #2
 80009d4:	f005 f980 	bl	8005cd8 <ADC_GetFlagStatus>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d0f8      	beq.n	80009d0 <prvReadPhotoCallback+0x4c>
	photo2 = ADC_GetConversionValue( PHOTO_ADC );
 80009de:	483a      	ldr	r0, [pc, #232]	; (8000ac8 <prvReadPhotoCallback+0x144>)
 80009e0:	f004 ff74 	bl	80058cc <ADC_GetConversionValue>
 80009e4:	4603      	mov	r3, r0
 80009e6:	461a      	mov	r2, r3
 80009e8:	4b39      	ldr	r3, [pc, #228]	; (8000ad0 <prvReadPhotoCallback+0x14c>)
 80009ea:	801a      	strh	r2, [r3, #0]

	// Read photo3
	ADC_RegularChannelConfig( PHOTO_ADC, PHOTO_3_CHANNEL, 1, ADC_SampleTime_15Cycles );
 80009ec:	4836      	ldr	r0, [pc, #216]	; (8000ac8 <prvReadPhotoCallback+0x144>)
 80009ee:	210c      	movs	r1, #12
 80009f0:	2201      	movs	r2, #1
 80009f2:	2301      	movs	r3, #1
 80009f4:	f004 fe08 	bl	8005608 <ADC_RegularChannelConfig>
	ADC_SoftwareStartConv( PHOTO_ADC );
 80009f8:	4833      	ldr	r0, [pc, #204]	; (8000ac8 <prvReadPhotoCallback+0x144>)
 80009fa:	f004 fec9 	bl	8005790 <ADC_SoftwareStartConv>
	while( ADC_GetFlagStatus(PHOTO_ADC, ADC_FLAG_EOC) == RESET );
 80009fe:	bf00      	nop
 8000a00:	4831      	ldr	r0, [pc, #196]	; (8000ac8 <prvReadPhotoCallback+0x144>)
 8000a02:	2102      	movs	r1, #2
 8000a04:	f005 f968 	bl	8005cd8 <ADC_GetFlagStatus>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d0f8      	beq.n	8000a00 <prvReadPhotoCallback+0x7c>
	photo3 = ADC_GetConversionValue( PHOTO_ADC );
 8000a0e:	482e      	ldr	r0, [pc, #184]	; (8000ac8 <prvReadPhotoCallback+0x144>)
 8000a10:	f004 ff5c 	bl	80058cc <ADC_GetConversionValue>
 8000a14:	4603      	mov	r3, r0
 8000a16:	461a      	mov	r2, r3
 8000a18:	4b2e      	ldr	r3, [pc, #184]	; (8000ad4 <prvReadPhotoCallback+0x150>)
 8000a1a:	801a      	strh	r2, [r3, #0]

	// Average values
	photo_average = (photo1 + photo2 + photo3)/3;
 8000a1c:	4b2b      	ldr	r3, [pc, #172]	; (8000acc <prvReadPhotoCallback+0x148>)
 8000a1e:	881b      	ldrh	r3, [r3, #0]
 8000a20:	461a      	mov	r2, r3
 8000a22:	4b2b      	ldr	r3, [pc, #172]	; (8000ad0 <prvReadPhotoCallback+0x14c>)
 8000a24:	881b      	ldrh	r3, [r3, #0]
 8000a26:	441a      	add	r2, r3
 8000a28:	4b2a      	ldr	r3, [pc, #168]	; (8000ad4 <prvReadPhotoCallback+0x150>)
 8000a2a:	881b      	ldrh	r3, [r3, #0]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	4a2a      	ldr	r2, [pc, #168]	; (8000ad8 <prvReadPhotoCallback+0x154>)
 8000a30:	fb82 1203 	smull	r1, r2, r2, r3
 8000a34:	17db      	asrs	r3, r3, #31
 8000a36:	1ad3      	subs	r3, r2, r3
 8000a38:	b29a      	uxth	r2, r3
 8000a3a:	4b28      	ldr	r3, [pc, #160]	; (8000adc <prvReadPhotoCallback+0x158>)
 8000a3c:	801a      	strh	r2, [r3, #0]

	// Check if over a white line
	if( (photo_average > 250) && (photo_previous_line == black) ) {
 8000a3e:	4b27      	ldr	r3, [pc, #156]	; (8000adc <prvReadPhotoCallback+0x158>)
 8000a40:	881b      	ldrh	r3, [r3, #0]
 8000a42:	2bfa      	cmp	r3, #250	; 0xfa
 8000a44:	d910      	bls.n	8000a68 <prvReadPhotoCallback+0xe4>
 8000a46:	4b26      	ldr	r3, [pc, #152]	; (8000ae0 <prvReadPhotoCallback+0x15c>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d10c      	bne.n	8000a68 <prvReadPhotoCallback+0xe4>
		photo_previous_line = white;
 8000a4e:	4b24      	ldr	r3, [pc, #144]	; (8000ae0 <prvReadPhotoCallback+0x15c>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	701a      	strb	r2, [r3, #0]
		photo_counter += 1;
 8000a54:	4b23      	ldr	r3, [pc, #140]	; (8000ae4 <prvReadPhotoCallback+0x160>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	b2da      	uxtb	r2, r3
 8000a5c:	4b21      	ldr	r3, [pc, #132]	; (8000ae4 <prvReadPhotoCallback+0x160>)
 8000a5e:	701a      	strb	r2, [r3, #0]
		LED_MODE_PORT->ON = LED_MODE_1_PIN;
 8000a60:	4b21      	ldr	r3, [pc, #132]	; (8000ae8 <prvReadPhotoCallback+0x164>)
 8000a62:	2210      	movs	r2, #16
 8000a64:	831a      	strh	r2, [r3, #24]
 8000a66:	e013      	b.n	8000a90 <prvReadPhotoCallback+0x10c>
	}

	// Check if over a black line
	else if( (photo_average <= 250) && (photo_previous_line == white) ) {
 8000a68:	4b1c      	ldr	r3, [pc, #112]	; (8000adc <prvReadPhotoCallback+0x158>)
 8000a6a:	881b      	ldrh	r3, [r3, #0]
 8000a6c:	2bfa      	cmp	r3, #250	; 0xfa
 8000a6e:	d80f      	bhi.n	8000a90 <prvReadPhotoCallback+0x10c>
 8000a70:	4b1b      	ldr	r3, [pc, #108]	; (8000ae0 <prvReadPhotoCallback+0x15c>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d10b      	bne.n	8000a90 <prvReadPhotoCallback+0x10c>
		photo_previous_line = black;
 8000a78:	4b19      	ldr	r3, [pc, #100]	; (8000ae0 <prvReadPhotoCallback+0x15c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	701a      	strb	r2, [r3, #0]
		photo_counter += 1;
 8000a7e:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <prvReadPhotoCallback+0x160>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	3301      	adds	r3, #1
 8000a84:	b2da      	uxtb	r2, r3
 8000a86:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <prvReadPhotoCallback+0x160>)
 8000a88:	701a      	strb	r2, [r3, #0]
		LED_MODE_PORT->OFF = LED_MODE_1_PIN;
 8000a8a:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <prvReadPhotoCallback+0x164>)
 8000a8c:	2210      	movs	r2, #16
 8000a8e:	835a      	strh	r2, [r3, #26]
	}

	if( photo_counter >= 5 ) {
 8000a90:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <prvReadPhotoCallback+0x160>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	2b04      	cmp	r3, #4
 8000a96:	d913      	bls.n	8000ac0 <prvReadPhotoCallback+0x13c>
		// TODO: Change the direction (NS -> EW, EW -> NS) and indicate that it has entered / left the intersection
		if( photo_intersection == TRUE ) {
 8000a98:	4b14      	ldr	r3, [pc, #80]	; (8000aec <prvReadPhotoCallback+0x168>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d103      	bne.n	8000aa8 <prvReadPhotoCallback+0x124>
			// Leaving the intersection
			photo_intersection = FALSE;
 8000aa0:	4b12      	ldr	r3, [pc, #72]	; (8000aec <prvReadPhotoCallback+0x168>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	701a      	strb	r2, [r3, #0]
 8000aa6:	e008      	b.n	8000aba <prvReadPhotoCallback+0x136>
		} else {
			// Entering intersection
			photo_intersection = TRUE;
 8000aa8:	4b10      	ldr	r3, [pc, #64]	; (8000aec <prvReadPhotoCallback+0x168>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	701a      	strb	r2, [r3, #0]

			// Update direction SAV is traveling
			photo_direction = next_direction[photo_direction];
 8000aae:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <prvReadPhotoCallback+0x16c>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	4a10      	ldr	r2, [pc, #64]	; (8000af4 <prvReadPhotoCallback+0x170>)
 8000ab4:	5cd2      	ldrb	r2, [r2, r3]
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <prvReadPhotoCallback+0x16c>)
 8000ab8:	701a      	strb	r2, [r3, #0]
		}

		// Reset the counter
		photo_counter = 0;
 8000aba:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <prvReadPhotoCallback+0x160>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	701a      	strb	r2, [r3, #0]
	}
}
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40012000 	.word	0x40012000
 8000acc:	20000072 	.word	0x20000072
 8000ad0:	20000074 	.word	0x20000074
 8000ad4:	20000076 	.word	0x20000076
 8000ad8:	55555556 	.word	0x55555556
 8000adc:	20000078 	.word	0x20000078
 8000ae0:	20000018 	.word	0x20000018
 8000ae4:	2000006f 	.word	0x2000006f
 8000ae8:	40020800 	.word	0x40020800
 8000aec:	20000070 	.word	0x20000070
 8000af0:	20000071 	.word	0x20000071
 8000af4:	2000001c 	.word	0x2000001c

08000af8 <sendPacket>:
 * %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */

/*********************************************************************************************
 * Base function to send all packets (or strings to setup WiFi module)
 *********************************************************************************************/
uint8_t sendPacket( char* packet, uint8_t length, uint8_t tilde ) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	4613      	mov	r3, r2
 8000b02:	460a      	mov	r2, r1
 8000b04:	70fa      	strb	r2, [r7, #3]
 8000b06:	70bb      	strb	r3, [r7, #2]
	int i;
	for( i=0; i < length; i++ ) {
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	e013      	b.n	8000b36 <sendPacket+0x3e>
		// Wait for data register to be empty before adding the next char
		while( !(WIFI_USART->SR & 0x00000040) );
 8000b0e:	bf00      	nop
 8000b10:	4b21      	ldr	r3, [pc, #132]	; (8000b98 <sendPacket+0xa0>)
 8000b12:	881b      	ldrh	r3, [r3, #0]
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d0f8      	beq.n	8000b10 <sendPacket+0x18>

		// Put into TX register
		USART_SendData( WIFI_USART, *packet );
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	481d      	ldr	r0, [pc, #116]	; (8000b98 <sendPacket+0xa0>)
 8000b24:	4619      	mov	r1, r3
 8000b26:	f001 fa8f 	bl	8002048 <USART_SendData>
		packet++;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	607b      	str	r3, [r7, #4]
/*********************************************************************************************
 * Base function to send all packets (or strings to setup WiFi module)
 *********************************************************************************************/
uint8_t sendPacket( char* packet, uint8_t length, uint8_t tilde ) {
	int i;
	for( i=0; i < length; i++ ) {
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	3301      	adds	r3, #1
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	78fa      	ldrb	r2, [r7, #3]
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	dce7      	bgt.n	8000b0e <sendPacket+0x16>
		USART_SendData( WIFI_USART, *packet );
		packet++;
	}

	// Check if it is a custom packet
	if( tilde == TRUE ) {
 8000b3e:	78bb      	ldrb	r3, [r7, #2]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d10c      	bne.n	8000b5e <sendPacket+0x66>
		while( !(WIFI_USART->SR & 0x00000040) );
 8000b44:	bf00      	nop
 8000b46:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <sendPacket+0xa0>)
 8000b48:	881b      	ldrh	r3, [r3, #0]
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d0f8      	beq.n	8000b46 <sendPacket+0x4e>
		USART_SendData( WIFI_USART, '~' );
 8000b54:	4810      	ldr	r0, [pc, #64]	; (8000b98 <sendPacket+0xa0>)
 8000b56:	217e      	movs	r1, #126	; 0x7e
 8000b58:	f001 fa76 	bl	8002048 <USART_SendData>
	}

	// WiFi module expects \r\n at the end of every string
	while( !(WIFI_USART->SR & 0x00000040) );
 8000b5c:	e7ff      	b.n	8000b5e <sendPacket+0x66>
 8000b5e:	bf00      	nop
 8000b60:	4b0d      	ldr	r3, [pc, #52]	; (8000b98 <sendPacket+0xa0>)
 8000b62:	881b      	ldrh	r3, [r3, #0]
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d0f8      	beq.n	8000b60 <sendPacket+0x68>
	USART_SendData( WIFI_USART, '\r' );
 8000b6e:	480a      	ldr	r0, [pc, #40]	; (8000b98 <sendPacket+0xa0>)
 8000b70:	210d      	movs	r1, #13
 8000b72:	f001 fa69 	bl	8002048 <USART_SendData>

	while( !(WIFI_USART->SR & 0x00000040) );
 8000b76:	bf00      	nop
 8000b78:	4b07      	ldr	r3, [pc, #28]	; (8000b98 <sendPacket+0xa0>)
 8000b7a:	881b      	ldrh	r3, [r3, #0]
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d0f8      	beq.n	8000b78 <sendPacket+0x80>
	USART_SendData( WIFI_USART, '\n' );
 8000b86:	4804      	ldr	r0, [pc, #16]	; (8000b98 <sendPacket+0xa0>)
 8000b88:	210a      	movs	r1, #10
 8000b8a:	f001 fa5d 	bl	8002048 <USART_SendData>

	return SUCCESS;
 8000b8e:	2301      	movs	r3, #1
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3710      	adds	r7, #16
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40004800 	.word	0x40004800

08000b9c <sendAck>:


/*********************************************************************************************
 * Send Ack
 *********************************************************************************************/
uint8_t sendAck( Header* header, uint8_t success ) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b088      	sub	sp, #32
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	70fb      	strb	r3, [r7, #3]

	// Fill Ack struct
	Ack* ack = pvPortMalloc( sizeof(Ack) );
 8000ba8:	2001      	movs	r0, #1
 8000baa:	f008 f88f 	bl	8008ccc <pvPortMalloc>
 8000bae:	61f8      	str	r0, [r7, #28]
	ack->success = success;
 8000bb0:	69fb      	ldr	r3, [r7, #28]
 8000bb2:	78fa      	ldrb	r2, [r7, #3]
 8000bb4:	701a      	strb	r2, [r3, #0]

	// Update the length of the packet in the header
	header->length = (HEADER_LENGTH + ACK_LENGTH);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2206      	movs	r2, #6
 8000bba:	711a      	strb	r2, [r3, #4]

	// Convert structs into strings
	char* header_char = (char*) header;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	61bb      	str	r3, [r7, #24]
	char* ack_char = (char*) ack;
 8000bc0:	69fb      	ldr	r3, [r7, #28]
 8000bc2:	617b      	str	r3, [r7, #20]

	// Package header and payload together
	char* ack_packet = pvPortMalloc( sizeof((uint8_t)(header->length)) );
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	f008 f881 	bl	8008ccc <pvPortMalloc>
 8000bca:	6138      	str	r0, [r7, #16]
	pack( ack_packet, header_char, 0 );
 8000bcc:	6938      	ldr	r0, [r7, #16]
 8000bce:	69b9      	ldr	r1, [r7, #24]
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f000 fa71 	bl	80010b8 <pack>
	pack( ack_packet, ack_char, HEADER_LENGTH );
 8000bd6:	6938      	ldr	r0, [r7, #16]
 8000bd8:	6979      	ldr	r1, [r7, #20]
 8000bda:	2205      	movs	r2, #5
 8000bdc:	f000 fa6c 	bl	80010b8 <pack>

	// Send packet
	sendPacket( "AT+CIPSEND=7", 12, FALSE );
 8000be0:	480d      	ldr	r0, [pc, #52]	; (8000c18 <sendAck+0x7c>)
 8000be2:	210c      	movs	r1, #12
 8000be4:	2200      	movs	r2, #0
 8000be6:	f7ff ff87 	bl	8000af8 <sendPacket>
	swDelay(100);
 8000bea:	2064      	movs	r0, #100	; 0x64
 8000bec:	f7ff fe2a 	bl	8000844 <swDelay>
	uint8_t result = sendPacket( ack_packet, header->length, TRUE );
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	791b      	ldrb	r3, [r3, #4]
 8000bf4:	6938      	ldr	r0, [r7, #16]
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	f7ff ff7d 	bl	8000af8 <sendPacket>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	73fb      	strb	r3, [r7, #15]

	// Free variables
	vPortFree(ack);
 8000c02:	69f8      	ldr	r0, [r7, #28]
 8000c04:	f008 f8fa 	bl	8008dfc <vPortFree>
	vPortFree(ack_packet);
 8000c08:	6938      	ldr	r0, [r7, #16]
 8000c0a:	f008 f8f7 	bl	8008dfc <vPortFree>

	return result;
 8000c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3720      	adds	r7, #32
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	08009120 	.word	0x08009120

08000c1c <sendPing>:


/*********************************************************************************************
 * Send Ping
 *********************************************************************************************/
uint8_t sendPing( Header* header ) {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]

	// Update the length of the packet in the header
	header->length = (HEADER_LENGTH + PING_LENGTH);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2205      	movs	r2, #5
 8000c28:	711a      	strb	r2, [r3, #4]

	// Convert structs into strings
	char* header_char = (char*) header;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	617b      	str	r3, [r7, #20]

	// Package header and payload together
	char* ping_packet = pvPortMalloc( sizeof((uint8_t)(header->length)) );
 8000c2e:	2001      	movs	r0, #1
 8000c30:	f008 f84c 	bl	8008ccc <pvPortMalloc>
 8000c34:	6138      	str	r0, [r7, #16]
	pack( ping_packet, header_char, 0 );
 8000c36:	6938      	ldr	r0, [r7, #16]
 8000c38:	6979      	ldr	r1, [r7, #20]
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f000 fa3c 	bl	80010b8 <pack>

	// Send packet
	sendPacket( "AT+CIPSEND=6", 12, FALSE );
 8000c40:	480c      	ldr	r0, [pc, #48]	; (8000c74 <sendPing+0x58>)
 8000c42:	210c      	movs	r1, #12
 8000c44:	2200      	movs	r2, #0
 8000c46:	f7ff ff57 	bl	8000af8 <sendPacket>
	swDelay(100);
 8000c4a:	2064      	movs	r0, #100	; 0x64
 8000c4c:	f7ff fdfa 	bl	8000844 <swDelay>
	uint8_t result = sendPacket( ping_packet, header->length, TRUE );
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	791b      	ldrb	r3, [r3, #4]
 8000c54:	6938      	ldr	r0, [r7, #16]
 8000c56:	4619      	mov	r1, r3
 8000c58:	2201      	movs	r2, #1
 8000c5a:	f7ff ff4d 	bl	8000af8 <sendPacket>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	73fb      	strb	r3, [r7, #15]

	// Free variables
	vPortFree(ping_packet);
 8000c62:	6938      	ldr	r0, [r7, #16]
 8000c64:	f008 f8ca 	bl	8008dfc <vPortFree>

	return result;
 8000c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3718      	adds	r7, #24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	08009130 	.word	0x08009130

08000c78 <sendSetMode>:


/*********************************************************************************************
 * Send SetMode
 *********************************************************************************************/
uint8_t sendSetMode( Header* header ) {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]

	// Update the length of the packet in the header
	header->length = (HEADER_LENGTH + SET_MODE_LENGTH);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2205      	movs	r2, #5
 8000c84:	711a      	strb	r2, [r3, #4]

	// Convert structs into strings
	char* header_char = (char*) header;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	617b      	str	r3, [r7, #20]

	// Package header and payload together
	char* set_mode_packet = pvPortMalloc( sizeof((uint8_t)(header->length)) );
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	f008 f81e 	bl	8008ccc <pvPortMalloc>
 8000c90:	6138      	str	r0, [r7, #16]
	pack( set_mode_packet, header_char, 0 );
 8000c92:	6938      	ldr	r0, [r7, #16]
 8000c94:	6979      	ldr	r1, [r7, #20]
 8000c96:	2200      	movs	r2, #0
 8000c98:	f000 fa0e 	bl	80010b8 <pack>

	// Send packet
	sendPacket( "AT+CIPSEND=6", 12, FALSE );
 8000c9c:	480c      	ldr	r0, [pc, #48]	; (8000cd0 <sendSetMode+0x58>)
 8000c9e:	210c      	movs	r1, #12
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f7ff ff29 	bl	8000af8 <sendPacket>
	swDelay(100);
 8000ca6:	2064      	movs	r0, #100	; 0x64
 8000ca8:	f7ff fdcc 	bl	8000844 <swDelay>
	uint8_t result = sendPacket( set_mode_packet, header->length, TRUE );
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	791b      	ldrb	r3, [r3, #4]
 8000cb0:	6938      	ldr	r0, [r7, #16]
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	f7ff ff1f 	bl	8000af8 <sendPacket>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	73fb      	strb	r3, [r7, #15]

	// Free variables
	vPortFree(set_mode_packet);
 8000cbe:	6938      	ldr	r0, [r7, #16]
 8000cc0:	f008 f89c 	bl	8008dfc <vPortFree>

	return result;
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3718      	adds	r7, #24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	08009130 	.word	0x08009130

08000cd4 <sendPowerConsumption>:


/*********************************************************************************************
 * Send PowerConsumption
 *********************************************************************************************/
uint8_t sendPowerConsumption( Header* header, uint16_t average_power, uint16_t time ) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b088      	sub	sp, #32
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	4613      	mov	r3, r2
 8000cde:	460a      	mov	r2, r1
 8000ce0:	807a      	strh	r2, [r7, #2]
 8000ce2:	803b      	strh	r3, [r7, #0]

	// Fill Ack struct
	PowerConsumption* power_consumption = pvPortMalloc( sizeof(PowerConsumption) );
 8000ce4:	2004      	movs	r0, #4
 8000ce6:	f007 fff1 	bl	8008ccc <pvPortMalloc>
 8000cea:	61f8      	str	r0, [r7, #28]
	power_consumption->average_power = average_power;
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	887a      	ldrh	r2, [r7, #2]
 8000cf0:	801a      	strh	r2, [r3, #0]
	power_consumption->time = time;
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	883a      	ldrh	r2, [r7, #0]
 8000cf6:	805a      	strh	r2, [r3, #2]

	// Update the length of the packet in the header
	header->length = (HEADER_LENGTH + POWER_CONSUMPTION_LENGTH);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2209      	movs	r2, #9
 8000cfc:	711a      	strb	r2, [r3, #4]

	// Convert structs into strings
	char* header_char = (char*) header;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	61bb      	str	r3, [r7, #24]
	char* power_consumption_char = (char*) power_consumption;
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	617b      	str	r3, [r7, #20]

	// Package header and payload together
	char* power_consumption_packet = pvPortMalloc( sizeof((uint8_t)(header->length)) );
 8000d06:	2001      	movs	r0, #1
 8000d08:	f007 ffe0 	bl	8008ccc <pvPortMalloc>
 8000d0c:	6138      	str	r0, [r7, #16]
	pack( power_consumption_packet, header_char, 0 );
 8000d0e:	6938      	ldr	r0, [r7, #16]
 8000d10:	69b9      	ldr	r1, [r7, #24]
 8000d12:	2200      	movs	r2, #0
 8000d14:	f000 f9d0 	bl	80010b8 <pack>
	pack( power_consumption_packet, power_consumption_char, HEADER_LENGTH );
 8000d18:	6938      	ldr	r0, [r7, #16]
 8000d1a:	6979      	ldr	r1, [r7, #20]
 8000d1c:	2205      	movs	r2, #5
 8000d1e:	f000 f9cb 	bl	80010b8 <pack>

	// Send packet
	sendPacket( "AT+CIPSEND=10", 13, FALSE );
 8000d22:	480f      	ldr	r0, [pc, #60]	; (8000d60 <sendPowerConsumption+0x8c>)
 8000d24:	210d      	movs	r1, #13
 8000d26:	2200      	movs	r2, #0
 8000d28:	f7ff fee6 	bl	8000af8 <sendPacket>
	while(received_string[0] != 'O');
 8000d2c:	bf00      	nop
 8000d2e:	4b0d      	ldr	r3, [pc, #52]	; (8000d64 <sendPowerConsumption+0x90>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	2b4f      	cmp	r3, #79	; 0x4f
 8000d36:	d1fa      	bne.n	8000d2e <sendPowerConsumption+0x5a>
	uint8_t result = sendPacket( power_consumption_packet, header->length, TRUE );
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	791b      	ldrb	r3, [r3, #4]
 8000d3c:	6938      	ldr	r0, [r7, #16]
 8000d3e:	4619      	mov	r1, r3
 8000d40:	2201      	movs	r2, #1
 8000d42:	f7ff fed9 	bl	8000af8 <sendPacket>
 8000d46:	4603      	mov	r3, r0
 8000d48:	73fb      	strb	r3, [r7, #15]

	// Free variables
	vPortFree(power_consumption);
 8000d4a:	69f8      	ldr	r0, [r7, #28]
 8000d4c:	f008 f856 	bl	8008dfc <vPortFree>
	vPortFree(power_consumption_packet);
 8000d50:	6938      	ldr	r0, [r7, #16]
 8000d52:	f008 f853 	bl	8008dfc <vPortFree>

	return result;
 8000d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3720      	adds	r7, #32
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	08009140 	.word	0x08009140
 8000d64:	2001c240 	.word	0x2001c240

08000d68 <handlePacket>:
 * %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */

/*********************************************************************************************
 * Base function to handle all packets
 *********************************************************************************************/
PacketResult handlePacket( char* packet ) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]

	// Extract the header
	Header* header = pvPortMalloc( sizeof(Header) );
 8000d70:	2005      	movs	r0, #5
 8000d72:	f007 ffab 	bl	8008ccc <pvPortMalloc>
 8000d76:	6178      	str	r0, [r7, #20]
	char* header_char = (char*) header;
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	613b      	str	r3, [r7, #16]
	unpack( packet, header_char, 0 );
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	6939      	ldr	r1, [r7, #16]
 8000d80:	2200      	movs	r2, #0
 8000d82:	f000 f9bb 	bl	80010fc <unpack>

	// Convert string back to Header struct
	header = (Header*) header_char;
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	617b      	str	r3, [r7, #20]

	// Create packet result struct
	PacketResult packet_result;
	packet_result.type = header->type;
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	78db      	ldrb	r3, [r3, #3]
 8000d8e:	723b      	strb	r3, [r7, #8]

	// Sort by mode of operation and SAV
	if( ((header->mode == allModes) || (header->mode == my_mode )) && (header->dest == MY_ADDR) ) {
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	789b      	ldrb	r3, [r3, #2]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d005      	beq.n	8000da4 <handlePacket+0x3c>
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	789a      	ldrb	r2, [r3, #2]
 8000d9c:	4b36      	ldr	r3, [pc, #216]	; (8000e78 <handlePacket+0x110>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d157      	bne.n	8000e54 <handlePacket+0xec>
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d153      	bne.n	8000e54 <handlePacket+0xec>

		// Based on packet type, call the correct handle function
		switch( header->type ) {
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	78db      	ldrb	r3, [r3, #3]
 8000db0:	2b04      	cmp	r3, #4
 8000db2:	d83e      	bhi.n	8000e32 <handlePacket+0xca>
 8000db4:	a201      	add	r2, pc, #4	; (adr r2, 8000dbc <handlePacket+0x54>)
 8000db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dba:	bf00      	nop
 8000dbc:	08000dd1 	.word	0x08000dd1
 8000dc0:	08000ddf 	.word	0x08000ddf
 8000dc4:	08000ded 	.word	0x08000ded
 8000dc8:	08000e05 	.word	0x08000e05
 8000dcc:	08000e25 	.word	0x08000e25
			case ack:
				packet_result.result = handleAck( header, packet );
 8000dd0:	6978      	ldr	r0, [r7, #20]
 8000dd2:	6879      	ldr	r1, [r7, #4]
 8000dd4:	f000 f852 	bl	8000e7c <handleAck>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	727b      	strb	r3, [r7, #9]
				break;
 8000ddc:	e039      	b.n	8000e52 <handlePacket+0xea>
			case ping:
				packet_result.result = handlePing( header, packet );
 8000dde:	6978      	ldr	r0, [r7, #20]
 8000de0:	6879      	ldr	r1, [r7, #4]
 8000de2:	f000 f869 	bl	8000eb8 <handlePing>
 8000de6:	4603      	mov	r3, r0
 8000de8:	727b      	strb	r3, [r7, #9]
				break;
 8000dea:	e032      	b.n	8000e52 <handlePacket+0xea>
			case trafficLightCurrent:
				if( my_mode == mode2 ) {
 8000dec:	4b22      	ldr	r3, [pc, #136]	; (8000e78 <handlePacket+0x110>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	d106      	bne.n	8000e02 <handlePacket+0x9a>
					packet_result.result = handleTrafficLightCurrent( header, packet );
 8000df4:	6978      	ldr	r0, [r7, #20]
 8000df6:	6879      	ldr	r1, [r7, #4]
 8000df8:	f000 f88c 	bl	8000f14 <handleTrafficLightCurrent>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	727b      	strb	r3, [r7, #9]
				}
				break;
 8000e00:	e027      	b.n	8000e52 <handlePacket+0xea>
 8000e02:	e026      	b.n	8000e52 <handlePacket+0xea>
			case trafficLightFuture:
				if( my_mode == mode3 || my_mode == mode2) {
 8000e04:	4b1c      	ldr	r3, [pc, #112]	; (8000e78 <handlePacket+0x110>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b03      	cmp	r3, #3
 8000e0a:	d003      	beq.n	8000e14 <handlePacket+0xac>
 8000e0c:	4b1a      	ldr	r3, [pc, #104]	; (8000e78 <handlePacket+0x110>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d106      	bne.n	8000e22 <handlePacket+0xba>
					packet_result.result = handleTrafficLightFuture( header, packet );
 8000e14:	6978      	ldr	r0, [r7, #20]
 8000e16:	6879      	ldr	r1, [r7, #4]
 8000e18:	f000 f8ac 	bl	8000f74 <handleTrafficLightFuture>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	727b      	strb	r3, [r7, #9]
				}
				break;
 8000e20:	e017      	b.n	8000e52 <handlePacket+0xea>
 8000e22:	e016      	b.n	8000e52 <handlePacket+0xea>
			case changeMode:
				packet_result.result = handleChangeMode( header, packet );
 8000e24:	6978      	ldr	r0, [r7, #20]
 8000e26:	6879      	ldr	r1, [r7, #4]
 8000e28:	f000 f916 	bl	8001058 <handleChangeMode>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	727b      	strb	r3, [r7, #9]
				break;
 8000e30:	e00f      	b.n	8000e52 <handlePacket+0xea>
			default:
				// If there is no handle function, send back negative Ack
				header->dest = header->addr;
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	785a      	ldrb	r2, [r3, #1]
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	701a      	strb	r2, [r3, #0]
				header->addr = MY_ADDR;
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	705a      	strb	r2, [r3, #1]
				header->mode = allModes;
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	2200      	movs	r2, #0
 8000e44:	709a      	strb	r2, [r3, #2]
				header->type = ack;
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	70da      	strb	r2, [r3, #3]
				// sendAck( header, FAILURE );
				packet_result.result = FAILURE;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	727b      	strb	r3, [r7, #9]
				break;
 8000e50:	bf00      	nop
		}
	} else {
 8000e52:	e001      	b.n	8000e58 <handlePacket+0xf0>
		packet_result.result = WRONG_MODE;
 8000e54:	2302      	movs	r3, #2
 8000e56:	727b      	strb	r3, [r7, #9]
	}

	// Free variables
	vPortFree( header );
 8000e58:	6978      	ldr	r0, [r7, #20]
 8000e5a:	f007 ffcf 	bl	8008dfc <vPortFree>

	return packet_result;
 8000e5e:	893b      	ldrh	r3, [r7, #8]
 8000e60:	81bb      	strh	r3, [r7, #12]
 8000e62:	2300      	movs	r3, #0
 8000e64:	7b3a      	ldrb	r2, [r7, #12]
 8000e66:	f362 0307 	bfi	r3, r2, #0, #8
 8000e6a:	7b7a      	ldrb	r2, [r7, #13]
 8000e6c:	f362 230f 	bfi	r3, r2, #8, #8
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3718      	adds	r7, #24
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	2001c236 	.word	0x2001c236

08000e7c <handleAck>:


/*********************************************************************************************
 * Handle Ack
 *********************************************************************************************/
uint8_t handleAck( Header* header, char* packet ) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]

	// Extract the pay load
	Ack* ack = pvPortMalloc( sizeof(Ack) );
 8000e86:	2001      	movs	r0, #1
 8000e88:	f007 ff20 	bl	8008ccc <pvPortMalloc>
 8000e8c:	6178      	str	r0, [r7, #20]
	char* ack_char = (char*) ack;
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	613b      	str	r3, [r7, #16]
	unpack( packet, ack_char, HEADER_LENGTH );
 8000e92:	6838      	ldr	r0, [r7, #0]
 8000e94:	6939      	ldr	r1, [r7, #16]
 8000e96:	2205      	movs	r2, #5
 8000e98:	f000 f930 	bl	80010fc <unpack>

	// Convert string back to Ack struct
	ack = (Ack*) ack_char;
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	617b      	str	r3, [r7, #20]

	// Indicate success or failure from packet
	uint8_t result = ack->success;
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	73fb      	strb	r3, [r7, #15]

	// Free variables
	vPortFree( ack );
 8000ea6:	6978      	ldr	r0, [r7, #20]
 8000ea8:	f007 ffa8 	bl	8008dfc <vPortFree>

	return result;
 8000eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3718      	adds	r7, #24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop

08000eb8 <handlePing>:


/*********************************************************************************************
 * Handle Ping
 *********************************************************************************************/
uint8_t handlePing( Header* header, char* packet ) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]

	// Extract the pay load
	Ping* ping = pvPortMalloc( sizeof(Ping) );
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	f007 ff02 	bl	8008ccc <pvPortMalloc>
 8000ec8:	6178      	str	r0, [r7, #20]
	char* ping_char = (char*) ping;
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	613b      	str	r3, [r7, #16]
	unpack( packet, ping_char, HEADER_LENGTH );
 8000ece:	6838      	ldr	r0, [r7, #0]
 8000ed0:	6939      	ldr	r1, [r7, #16]
 8000ed2:	2205      	movs	r2, #5
 8000ed4:	f000 f912 	bl	80010fc <unpack>

	// Convert string back to Ping struct
	ping = (Ping*) ping_char;
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	617b      	str	r3, [r7, #20]

	// Restructure header to send back ack
	header->dest = header->addr;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	785a      	ldrb	r2, [r3, #1]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	701a      	strb	r2, [r3, #0]
	header->addr = MY_ADDR;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	705a      	strb	r2, [r3, #1]
	header->mode = allModes;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	709a      	strb	r2, [r3, #2]
	header->type = ack;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	70da      	strb	r2, [r3, #3]

	// Send Ack
	uint8_t result = sendAck( header, SUCCESS );
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	2101      	movs	r1, #1
 8000efa:	f7ff fe4f 	bl	8000b9c <sendAck>
 8000efe:	4603      	mov	r3, r0
 8000f00:	73fb      	strb	r3, [r7, #15]

	// Free variables
	vPortFree( ping );
 8000f02:	6978      	ldr	r0, [r7, #20]
 8000f04:	f007 ff7a 	bl	8008dfc <vPortFree>

	return result;
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3718      	adds	r7, #24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop

08000f14 <handleTrafficLightCurrent>:


/*********************************************************************************************
 * Handle TrafficLightCurrent
 *********************************************************************************************/
uint8_t handleTrafficLightCurrent( Header* header, char* packet ) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]

	// Extract the pay load
	TrafficLightCurrent* current = pvPortMalloc( sizeof(TrafficLightCurrent) );
 8000f1e:	2002      	movs	r0, #2
 8000f20:	f007 fed4 	bl	8008ccc <pvPortMalloc>
 8000f24:	60f8      	str	r0, [r7, #12]
	char* current_char = (char*) current;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	60bb      	str	r3, [r7, #8]
	unpack( packet, current_char, HEADER_LENGTH );
 8000f2a:	6838      	ldr	r0, [r7, #0]
 8000f2c:	68b9      	ldr	r1, [r7, #8]
 8000f2e:	2205      	movs	r2, #5
 8000f30:	f000 f8e4 	bl	80010fc <unpack>

	// Convert string back to TrafficLightCurrent struct
	current = (TrafficLightCurrent*) current_char;
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	60fb      	str	r3, [r7, #12]

	// Turn on corresponding LED
	// TODO: need to know what direction SAV is headed (northSouth / eastWest)
	LED_LIGHT_PORT->OFF = LED_LIGHT_PINS;
 8000f38:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <handleTrafficLightCurrent+0x54>)
 8000f3a:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8000f3e:	835a      	strh	r2, [r3, #26]
	LED_LIGHT_PORT->ON = led_light_pin[ current->northSouth ];
 8000f40:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <handleTrafficLightCurrent+0x54>)
 8000f42:	68fa      	ldr	r2, [r7, #12]
 8000f44:	7812      	ldrb	r2, [r2, #0]
 8000f46:	4611      	mov	r1, r2
 8000f48:	4a08      	ldr	r2, [pc, #32]	; (8000f6c <handleTrafficLightCurrent+0x58>)
 8000f4a:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000f4e:	831a      	strh	r2, [r3, #24]

	// Set global so the SAV knows what the current state is
	traffic_current_state = current->northSouth;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	781a      	ldrb	r2, [r3, #0]
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <handleTrafficLightCurrent+0x5c>)
 8000f56:	701a      	strb	r2, [r3, #0]

	// Free variables
	vPortFree( current );
 8000f58:	68f8      	ldr	r0, [r7, #12]
 8000f5a:	f007 ff4f 	bl	8008dfc <vPortFree>

	return SUCCESS;
 8000f5e:	2301      	movs	r3, #1
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40020800 	.word	0x40020800
 8000f6c:	20000024 	.word	0x20000024
 8000f70:	2001c200 	.word	0x2001c200

08000f74 <handleTrafficLightFuture>:


/*********************************************************************************************
 * Handle TrafficLightFuture
 *********************************************************************************************/
uint8_t handleTrafficLightFuture( Header* header, char* packet ) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]

	// Extract the pay load
	TrafficLightFuture* future = pvPortMalloc( sizeof(TrafficLightFuture) );
 8000f7e:	2004      	movs	r0, #4
 8000f80:	f007 fea4 	bl	8008ccc <pvPortMalloc>
 8000f84:	60f8      	str	r0, [r7, #12]
	char* future_char = (char*) future;
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	60bb      	str	r3, [r7, #8]
	unpack( packet, future_char, HEADER_LENGTH );
 8000f8a:	6838      	ldr	r0, [r7, #0]
 8000f8c:	68b9      	ldr	r1, [r7, #8]
 8000f8e:	2205      	movs	r2, #5
 8000f90:	f000 f8b4 	bl	80010fc <unpack>

	// Convert string back to TrafficLightCurrent struct
	future = (TrafficLightFuture*) future_char;
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	60fb      	str	r3, [r7, #12]

	// Turn on LED corresponding to the current state
	// TODO: need to know what direction SAV is headed (northSouth / eastWest)
	LED_LIGHT_PORT->OFF = LED_LIGHT_PINS;
 8000f98:	4b27      	ldr	r3, [pc, #156]	; (8001038 <handleTrafficLightFuture+0xc4>)
 8000f9a:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8000f9e:	835a      	strh	r2, [r3, #26]
	if( photo_direction == ns ) {
 8000fa0:	4b26      	ldr	r3, [pc, #152]	; (800103c <handleTrafficLightFuture+0xc8>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d108      	bne.n	8000fba <handleTrafficLightFuture+0x46>
		LED_LIGHT_PORT->ON = led_light_pin[ future->northSouth ];
 8000fa8:	4b23      	ldr	r3, [pc, #140]	; (8001038 <handleTrafficLightFuture+0xc4>)
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	7812      	ldrb	r2, [r2, #0]
 8000fae:	4611      	mov	r1, r2
 8000fb0:	4a23      	ldr	r2, [pc, #140]	; (8001040 <handleTrafficLightFuture+0xcc>)
 8000fb2:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000fb6:	831a      	strh	r2, [r3, #24]
 8000fb8:	e007      	b.n	8000fca <handleTrafficLightFuture+0x56>
	} else {
		LED_LIGHT_PORT->ON = led_light_pin[ future->eastWest ];
 8000fba:	4b1f      	ldr	r3, [pc, #124]	; (8001038 <handleTrafficLightFuture+0xc4>)
 8000fbc:	68fa      	ldr	r2, [r7, #12]
 8000fbe:	7892      	ldrb	r2, [r2, #2]
 8000fc0:	4611      	mov	r1, r2
 8000fc2:	4a1f      	ldr	r2, [pc, #124]	; (8001040 <handleTrafficLightFuture+0xcc>)
 8000fc4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000fc8:	831a      	strh	r2, [r3, #24]
	}

	// Blink corresponding LED
	if( my_mode == mode3 ) {
 8000fca:	4b1e      	ldr	r3, [pc, #120]	; (8001044 <handleTrafficLightFuture+0xd0>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b03      	cmp	r3, #3
 8000fd0:	d129      	bne.n	8001026 <handleTrafficLightFuture+0xb2>
		// Set global variables
		if( photo_direction == ns ) {
 8000fd2:	4b1a      	ldr	r3, [pc, #104]	; (800103c <handleTrafficLightFuture+0xc8>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d106      	bne.n	8000fe8 <handleTrafficLightFuture+0x74>
			traffic_future_state = next_light_state[ future->northSouth ];
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	4a1a      	ldr	r2, [pc, #104]	; (8001048 <handleTrafficLightFuture+0xd4>)
 8000fe0:	5cd2      	ldrb	r2, [r2, r3]
 8000fe2:	4b1a      	ldr	r3, [pc, #104]	; (800104c <handleTrafficLightFuture+0xd8>)
 8000fe4:	701a      	strb	r2, [r3, #0]
 8000fe6:	e005      	b.n	8000ff4 <handleTrafficLightFuture+0x80>
		} else {
			traffic_future_state = next_light_state[ future->eastWest ];
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	789b      	ldrb	r3, [r3, #2]
 8000fec:	4a16      	ldr	r2, [pc, #88]	; (8001048 <handleTrafficLightFuture+0xd4>)
 8000fee:	5cd2      	ldrb	r2, [r2, r3]
 8000ff0:	4b16      	ldr	r3, [pc, #88]	; (800104c <handleTrafficLightFuture+0xd8>)
 8000ff2:	701a      	strb	r2, [r3, #0]
		}

		// Time is converted into ms
		traffic_time = ((uint16_t)future->changeTimeNS *1000);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	785b      	ldrb	r3, [r3, #1]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	0152      	lsls	r2, r2, #5
 8000ffc:	1ad2      	subs	r2, r2, r3
 8000ffe:	0092      	lsls	r2, r2, #2
 8001000:	4413      	add	r3, r2
 8001002:	00db      	lsls	r3, r3, #3
 8001004:	b29a      	uxth	r2, r3
 8001006:	4b12      	ldr	r3, [pc, #72]	; (8001050 <handleTrafficLightFuture+0xdc>)
 8001008:	801a      	strh	r2, [r3, #0]

		// Check if a timer has already been started
		if( !swIsTimerActive(blinkTrafficLight) ) {
 800100a:	4b12      	ldr	r3, [pc, #72]	; (8001054 <handleTrafficLightFuture+0xe0>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fbf8 	bl	8000804 <swIsTimerActive>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d105      	bne.n	8001026 <handleTrafficLightFuture+0xb2>
			// Start timer
			swTimerStart( blinkTrafficLight, 0 );
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <handleTrafficLightFuture+0xe0>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4618      	mov	r0, r3
 8001020:	2100      	movs	r1, #0
 8001022:	f7ff fbb1 	bl	8000788 <swTimerStart>
		}
	}

	// Free variables
	vPortFree( future );
 8001026:	68f8      	ldr	r0, [r7, #12]
 8001028:	f007 fee8 	bl	8008dfc <vPortFree>

	return SUCCESS;
 800102c:	2301      	movs	r3, #1
}
 800102e:	4618      	mov	r0, r3
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40020800 	.word	0x40020800
 800103c:	20000071 	.word	0x20000071
 8001040:	20000024 	.word	0x20000024
 8001044:	2001c236 	.word	0x2001c236
 8001048:	20000000 	.word	0x20000000
 800104c:	2001c1ec 	.word	0x2001c1ec
 8001050:	2001c234 	.word	0x2001c234
 8001054:	2001c1f0 	.word	0x2001c1f0

08001058 <handleChangeMode>:


/*********************************************************************************************
 * Handle ChangeMode
 *********************************************************************************************/
uint8_t handleChangeMode( Header* header, char* packet ) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]

	// Extract the pay load
	ChangeMode* change_mode = pvPortMalloc( sizeof(ChangeMode) );
 8001062:	2001      	movs	r0, #1
 8001064:	f007 fe32 	bl	8008ccc <pvPortMalloc>
 8001068:	60f8      	str	r0, [r7, #12]
	char* change_mode_char = (char*) change_mode;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	60bb      	str	r3, [r7, #8]
	unpack( packet, change_mode_char, HEADER_LENGTH );
 800106e:	6838      	ldr	r0, [r7, #0]
 8001070:	68b9      	ldr	r1, [r7, #8]
 8001072:	2205      	movs	r2, #5
 8001074:	f000 f842 	bl	80010fc <unpack>

	// Convert string back to ChangeMode struct
	change_mode = (ChangeMode*) change_mode_char;
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	60fb      	str	r3, [r7, #12]

	// Set SAV's Mode of Operation
	my_mode = change_mode->newMode;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	781a      	ldrb	r2, [r3, #0]
 8001080:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <handleChangeMode+0x54>)
 8001082:	701a      	strb	r2, [r3, #0]

	// Set corresponding LED
	LED_MODE_PORT->OFF = led_mode_pin[ allModes ];
 8001084:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <handleChangeMode+0x58>)
 8001086:	4a0b      	ldr	r2, [pc, #44]	; (80010b4 <handleChangeMode+0x5c>)
 8001088:	8812      	ldrh	r2, [r2, #0]
 800108a:	835a      	strh	r2, [r3, #26]
	LED_MODE_PORT->ON = led_mode_pin[ my_mode ];
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <handleChangeMode+0x58>)
 800108e:	4a07      	ldr	r2, [pc, #28]	; (80010ac <handleChangeMode+0x54>)
 8001090:	7812      	ldrb	r2, [r2, #0]
 8001092:	4611      	mov	r1, r2
 8001094:	4a07      	ldr	r2, [pc, #28]	; (80010b4 <handleChangeMode+0x5c>)
 8001096:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800109a:	831a      	strh	r2, [r3, #24]

	// Free variables
	vPortFree( change_mode );
 800109c:	68f8      	ldr	r0, [r7, #12]
 800109e:	f007 fead 	bl	8008dfc <vPortFree>

	return SUCCESS;
 80010a2:	2301      	movs	r3, #1
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	2001c236 	.word	0x2001c236
 80010b0:	40020800 	.word	0x40020800
 80010b4:	2000002c 	.word	0x2000002c

080010b8 <pack>:
 * %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */

/*********************************************************************************************
 * Package string into container
 *********************************************************************************************/
void pack( char* container, char* field, uint8_t start ) {
 80010b8:	b480      	push	{r7}
 80010ba:	b087      	sub	sp, #28
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	4613      	mov	r3, r2
 80010c4:	71fb      	strb	r3, [r7, #7]

	// Iterate through field, copying each char into the container
	// Note: By adding 48, the integer value is represented as its ascii counterpart
	int i;
	for( i=0; i<=sizeof(field); i++) {
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
 80010ca:	e00e      	b.n	80010ea <pack+0x32>
		container[start + i] = field[i] + 48;
 80010cc:	79fa      	ldrb	r2, [r7, #7]
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	4413      	add	r3, r2
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	4413      	add	r3, r2
 80010d6:	697a      	ldr	r2, [r7, #20]
 80010d8:	68b9      	ldr	r1, [r7, #8]
 80010da:	440a      	add	r2, r1
 80010dc:	7812      	ldrb	r2, [r2, #0]
 80010de:	3230      	adds	r2, #48	; 0x30
 80010e0:	b2d2      	uxtb	r2, r2
 80010e2:	701a      	strb	r2, [r3, #0]
void pack( char* container, char* field, uint8_t start ) {

	// Iterate through field, copying each char into the container
	// Note: By adding 48, the integer value is represented as its ascii counterpart
	int i;
	for( i=0; i<=sizeof(field); i++) {
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	3301      	adds	r3, #1
 80010e8:	617b      	str	r3, [r7, #20]
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	2b04      	cmp	r3, #4
 80010ee:	d9ed      	bls.n	80010cc <pack+0x14>
		container[start + i] = field[i] + 48;
	}
}
 80010f0:	371c      	adds	r7, #28
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop

080010fc <unpack>:


/*********************************************************************************************
 * Unpack strings from the container
 *********************************************************************************************/
void unpack( char* container, char* field, uint8_t start ) {
 80010fc:	b480      	push	{r7}
 80010fe:	b087      	sub	sp, #28
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	4613      	mov	r3, r2
 8001108:	71fb      	strb	r3, [r7, #7]

	// Note: By subtracting 48, the ascii is converted back to the correct uint
	// Note: Each packet is of the form: +IPD,(length):(packet)

	// Begin by creating an offset to the actual packet
	int offset = 6;
 800110a:	2306      	movs	r3, #6
 800110c:	617b      	str	r3, [r7, #20]
	while( container[offset] != ':' ) {
 800110e:	e002      	b.n	8001116 <unpack+0x1a>
		offset++;
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	3301      	adds	r3, #1
 8001114:	617b      	str	r3, [r7, #20]
	// Note: By subtracting 48, the ascii is converted back to the correct uint
	// Note: Each packet is of the form: +IPD,(length):(packet)

	// Begin by creating an offset to the actual packet
	int offset = 6;
	while( container[offset] != ':' ) {
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	68fa      	ldr	r2, [r7, #12]
 800111a:	4413      	add	r3, r2
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b3a      	cmp	r3, #58	; 0x3a
 8001120:	d1f6      	bne.n	8001110 <unpack+0x14>
		offset++;
	}
	offset++;
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	3301      	adds	r3, #1
 8001126:	617b      	str	r3, [r7, #20]

	// Iterate through container, copying each char into the field
	int i;
	for( i=0; i<=sizeof(field); i++) {
 8001128:	2300      	movs	r3, #0
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	e010      	b.n	8001150 <unpack+0x54>
		field[i] = container[start + offset + i] - 48;
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	68ba      	ldr	r2, [r7, #8]
 8001132:	4413      	add	r3, r2
 8001134:	79f9      	ldrb	r1, [r7, #7]
 8001136:	697a      	ldr	r2, [r7, #20]
 8001138:	4411      	add	r1, r2
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	440a      	add	r2, r1
 800113e:	68f9      	ldr	r1, [r7, #12]
 8001140:	440a      	add	r2, r1
 8001142:	7812      	ldrb	r2, [r2, #0]
 8001144:	3a30      	subs	r2, #48	; 0x30
 8001146:	b2d2      	uxtb	r2, r2
 8001148:	701a      	strb	r2, [r3, #0]
	}
	offset++;

	// Iterate through container, copying each char into the field
	int i;
	for( i=0; i<=sizeof(field); i++) {
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	3301      	adds	r3, #1
 800114e:	613b      	str	r3, [r7, #16]
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	2b04      	cmp	r3, #4
 8001154:	d9eb      	bls.n	800112e <unpack+0x32>
		field[i] = container[start + offset + i] - 48;
	}
}
 8001156:	371c      	adds	r7, #28
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <USART3_IRQHandler>:


/*********************************************************************************************
 * USART IRQ Handler for WiFi module
 *********************************************************************************************/
void USART3_IRQHandler( void ) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0

	// Make sure USART recieve interrupt flag was set
	if( USART_GetITStatus( WIFI_USART, USART_IT_RXNE ) ) {
 8001166:	481d      	ldr	r0, [pc, #116]	; (80011dc <USART3_IRQHandler+0x7c>)
 8001168:	f240 5125 	movw	r1, #1317	; 0x525
 800116c:	f001 f986 	bl	800247c <USART_GetITStatus>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d02f      	beq.n	80011d6 <USART3_IRQHandler+0x76>

		// Counter to track packet length
		static uint8_t counter = 0;

		// Character retrieved from data register
		char t = WIFI_USART->DR;
 8001176:	4b19      	ldr	r3, [pc, #100]	; (80011dc <USART3_IRQHandler+0x7c>)
 8001178:	889b      	ldrh	r3, [r3, #4]
 800117a:	b29b      	uxth	r3, r3
 800117c:	71fb      	strb	r3, [r7, #7]

		// Check if string has ended or it exceeded the maximum packet length
		if( (t != '\n') && (counter < MAX_LENGTH)  && (t != '~') ) {
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	2b0a      	cmp	r3, #10
 8001182:	d012      	beq.n	80011aa <USART3_IRQHandler+0x4a>
 8001184:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <USART3_IRQHandler+0x80>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b0f      	cmp	r3, #15
 800118a:	d80e      	bhi.n	80011aa <USART3_IRQHandler+0x4a>
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	2b7e      	cmp	r3, #126	; 0x7e
 8001190:	d00b      	beq.n	80011aa <USART3_IRQHandler+0x4a>
			received_string[counter] = t;
 8001192:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <USART3_IRQHandler+0x80>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	4a13      	ldr	r2, [pc, #76]	; (80011e4 <USART3_IRQHandler+0x84>)
 8001198:	79f9      	ldrb	r1, [r7, #7]
 800119a:	54d1      	strb	r1, [r2, r3]
			counter++;
 800119c:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <USART3_IRQHandler+0x80>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	3301      	adds	r3, #1
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <USART3_IRQHandler+0x80>)
 80011a6:	701a      	strb	r2, [r3, #0]
 80011a8:	e015      	b.n	80011d6 <USART3_IRQHandler+0x76>
		} else {

			// Reset counter
			counter = 0;
 80011aa:	4b0d      	ldr	r3, [pc, #52]	; (80011e0 <USART3_IRQHandler+0x80>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	701a      	strb	r2, [r3, #0]

			// If received_string is a packet, put it in the queue
			if( received_string[0] == '+' ) {
 80011b0:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <USART3_IRQHandler+0x84>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b2b      	cmp	r3, #43	; 0x2b
 80011b8:	d10a      	bne.n	80011d0 <USART3_IRQHandler+0x70>
				xQueueSendToBackFromISR( xPacketQueue, &received_string, pdFALSE);
 80011ba:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <USART3_IRQHandler+0x88>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	4908      	ldr	r1, [pc, #32]	; (80011e4 <USART3_IRQHandler+0x84>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	2300      	movs	r3, #0
 80011c6:	f007 f813 	bl	80081f0 <xQueueGenericSendFromISR>
				process_packet = TRUE;
 80011ca:	4b08      	ldr	r3, [pc, #32]	; (80011ec <USART3_IRQHandler+0x8c>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	701a      	strb	r2, [r3, #0]
			}

			// Clear received_string
			received_string[0] = '\n';
 80011d0:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <USART3_IRQHandler+0x84>)
 80011d2:	220a      	movs	r2, #10
 80011d4:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40004800 	.word	0x40004800
 80011e0:	2000007a 	.word	0x2000007a
 80011e4:	2001c240 	.word	0x2001c240
 80011e8:	2001c23c 	.word	0x2001c23c
 80011ec:	2001c238 	.word	0x2001c238

080011f0 <copyString>:


/*********************************************************************************************
 * Copy original string to a new copy
 *********************************************************************************************/
void copyString( volatile char* original, char* new, uint8_t length ) {
 80011f0:	b480      	push	{r7}
 80011f2:	b087      	sub	sp, #28
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	4613      	mov	r3, r2
 80011fc:	71fb      	strb	r3, [r7, #7]

	// Iterate through string and copy each char
	int i;
	for( i=0; i<=length; i++ ) {
 80011fe:	2300      	movs	r3, #0
 8001200:	617b      	str	r3, [r7, #20]
 8001202:	e00b      	b.n	800121c <copyString+0x2c>
		new[i] = original[i];
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	68ba      	ldr	r2, [r7, #8]
 8001208:	4413      	add	r3, r2
 800120a:	697a      	ldr	r2, [r7, #20]
 800120c:	68f9      	ldr	r1, [r7, #12]
 800120e:	440a      	add	r2, r1
 8001210:	7812      	ldrb	r2, [r2, #0]
 8001212:	b2d2      	uxtb	r2, r2
 8001214:	701a      	strb	r2, [r3, #0]
 *********************************************************************************************/
void copyString( volatile char* original, char* new, uint8_t length ) {

	// Iterate through string and copy each char
	int i;
	for( i=0; i<=length; i++ ) {
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	3301      	adds	r3, #1
 800121a:	617b      	str	r3, [r7, #20]
 800121c:	79fa      	ldrb	r2, [r7, #7]
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	429a      	cmp	r2, r3
 8001222:	daef      	bge.n	8001204 <copyString+0x14>
		new[i] = original[i];
	}
}
 8001224:	371c      	adds	r7, #28
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop

08001230 <setMotor>:


/*********************************************************************************************
 * Set the motor output and speed
 *********************************************************************************************/
uint8_t setMotor( MotorOutput motor_output, uint8_t speed ) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	71fa      	strb	r2, [r7, #7]
 800123c:	71bb      	strb	r3, [r7, #6]

	switch( motor_output ) {
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	2b03      	cmp	r3, #3
 8001242:	d831      	bhi.n	80012a8 <setMotor+0x78>
 8001244:	a201      	add	r2, pc, #4	; (adr r2, 800124c <setMotor+0x1c>)
 8001246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800124a:	bf00      	nop
 800124c:	0800125d 	.word	0x0800125d
 8001250:	0800126f 	.word	0x0800126f
 8001254:	08001283 	.word	0x08001283
 8001258:	08001297 	.word	0x08001297
			case coast:
				pwmSet(0, motor1);
 800125c:	2000      	movs	r0, #0
 800125e:	2100      	movs	r1, #0
 8001260:	f000 f828 	bl	80012b4 <pwmSet>
				pwmSet(0, motor2);
 8001264:	2000      	movs	r0, #0
 8001266:	2101      	movs	r1, #1
 8001268:	f000 f824 	bl	80012b4 <pwmSet>
				break;
 800126c:	e01c      	b.n	80012a8 <setMotor+0x78>
			case reverse:
				pwmSet(0, motor1);
 800126e:	2000      	movs	r0, #0
 8001270:	2100      	movs	r1, #0
 8001272:	f000 f81f 	bl	80012b4 <pwmSet>
				pwmSet(speed, motor2);
 8001276:	79bb      	ldrb	r3, [r7, #6]
 8001278:	4618      	mov	r0, r3
 800127a:	2101      	movs	r1, #1
 800127c:	f000 f81a 	bl	80012b4 <pwmSet>
				break;
 8001280:	e012      	b.n	80012a8 <setMotor+0x78>
			case forward:
				pwmSet(speed, motor1);
 8001282:	79bb      	ldrb	r3, [r7, #6]
 8001284:	4618      	mov	r0, r3
 8001286:	2100      	movs	r1, #0
 8001288:	f000 f814 	bl	80012b4 <pwmSet>
				pwmSet(0, motor2);
 800128c:	2000      	movs	r0, #0
 800128e:	2101      	movs	r1, #1
 8001290:	f000 f810 	bl	80012b4 <pwmSet>
				break;
 8001294:	e008      	b.n	80012a8 <setMotor+0x78>
			case brake:
				pwmSet(1, motor1);
 8001296:	2001      	movs	r0, #1
 8001298:	2100      	movs	r1, #0
 800129a:	f000 f80b 	bl	80012b4 <pwmSet>
				pwmSet(1, motor2);
 800129e:	2001      	movs	r0, #1
 80012a0:	2101      	movs	r1, #1
 80012a2:	f000 f807 	bl	80012b4 <pwmSet>
				break;
 80012a6:	bf00      	nop
	}

	return SUCCESS;
 80012a8:	2301      	movs	r3, #1
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop

080012b4 <pwmSet>:


/*********************************************************************************************
 * Set PWM to given duty cycle
 *********************************************************************************************/
void pwmSet(uint8_t dutyCycle, Motor motor) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b088      	sub	sp, #32
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	71fa      	strb	r2, [r7, #7]
 80012c0:	71bb      	strb	r3, [r7, #6]
	// Timer output compare initialization
	TIM_OCInitTypeDef TIM_OC_InitStructure;

	// Configure TIM OC
	TIM_OC_InitStructure.TIM_OCMode = TIM_OCMode_PWM2;					// PWM 1 = Clear on match, PWM 2 = Set on match
 80012c2:	2370      	movs	r3, #112	; 0x70
 80012c4:	813b      	strh	r3, [r7, #8]
	TIM_OC_InitStructure.TIM_OutputState = TIM_OutputState_Enable;
 80012c6:	2301      	movs	r3, #1
 80012c8:	817b      	strh	r3, [r7, #10]
	TIM_OC_InitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 80012ca:	2302      	movs	r3, #2
 80012cc:	82bb      	strh	r3, [r7, #20]

	// Convert duty cycle to TIM pulse
	uint32_t duty = (PWM_TIM_PERIOD + 1) * dutyCycle;
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	f246 227b 	movw	r2, #25211	; 0x627b
 80012d4:	fb02 f303 	mul.w	r3, r2, r3
 80012d8:	61fb      	str	r3, [r7, #28]
	duty = (uint32_t) ((duty/100));
 80012da:	69fa      	ldr	r2, [r7, #28]
 80012dc:	4b19      	ldr	r3, [pc, #100]	; (8001344 <pwmSet+0x90>)
 80012de:	fba3 1302 	umull	r1, r3, r3, r2
 80012e2:	095b      	lsrs	r3, r3, #5
 80012e4:	61fb      	str	r3, [r7, #28]

	// Set duty cycle
	TIM_OC_InitStructure.TIM_Pulse = duty;
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	613b      	str	r3, [r7, #16]

	// Select the corresponding OCInit function
	switch( motor ) {
 80012ea:	79bb      	ldrb	r3, [r7, #6]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d00f      	beq.n	8001310 <pwmSet+0x5c>
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d018      	beq.n	8001326 <pwmSet+0x72>
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d000      	beq.n	80012fa <pwmSet+0x46>
		case servo:
			TIM_OC4Init(PWM_TIM, &TIM_OC_InitStructure);
			TIM_OC4PreloadConfig(PWM_TIM, TIM_OCPreload_Enable);
			break;
		default:
			break;
 80012f8:	e020      	b.n	800133c <pwmSet+0x88>
	TIM_OC_InitStructure.TIM_Pulse = duty;

	// Select the corresponding OCInit function
	switch( motor ) {
		case motor1:
			TIM_OC2Init(PWM_TIM, &TIM_OC_InitStructure);
 80012fa:	f107 0308 	add.w	r3, r7, #8
 80012fe:	4812      	ldr	r0, [pc, #72]	; (8001348 <pwmSet+0x94>)
 8001300:	4619      	mov	r1, r3
 8001302:	f001 fc29 	bl	8002b58 <TIM_OC2Init>
			TIM_OC2PreloadConfig(PWM_TIM, TIM_OCPreload_Enable);
 8001306:	4810      	ldr	r0, [pc, #64]	; (8001348 <pwmSet+0x94>)
 8001308:	2108      	movs	r1, #8
 800130a:	f001 fed9 	bl	80030c0 <TIM_OC2PreloadConfig>
			break;
 800130e:	e015      	b.n	800133c <pwmSet+0x88>
		case motor2:
			TIM_OC3Init(PWM_TIM, &TIM_OC_InitStructure);
 8001310:	f107 0308 	add.w	r3, r7, #8
 8001314:	480c      	ldr	r0, [pc, #48]	; (8001348 <pwmSet+0x94>)
 8001316:	4619      	mov	r1, r3
 8001318:	f001 fca6 	bl	8002c68 <TIM_OC3Init>
			TIM_OC3PreloadConfig(PWM_TIM, TIM_OCPreload_Enable);
 800131c:	480a      	ldr	r0, [pc, #40]	; (8001348 <pwmSet+0x94>)
 800131e:	2108      	movs	r1, #8
 8001320:	f001 feec 	bl	80030fc <TIM_OC3PreloadConfig>
			break;
 8001324:	e00a      	b.n	800133c <pwmSet+0x88>
		case servo:
			TIM_OC4Init(PWM_TIM, &TIM_OC_InitStructure);
 8001326:	f107 0308 	add.w	r3, r7, #8
 800132a:	4807      	ldr	r0, [pc, #28]	; (8001348 <pwmSet+0x94>)
 800132c:	4619      	mov	r1, r3
 800132e:	f001 fd21 	bl	8002d74 <TIM_OC4Init>
			TIM_OC4PreloadConfig(PWM_TIM, TIM_OCPreload_Enable);
 8001332:	4805      	ldr	r0, [pc, #20]	; (8001348 <pwmSet+0x94>)
 8001334:	2108      	movs	r1, #8
 8001336:	f001 fefd 	bl	8003134 <TIM_OC4PreloadConfig>
			break;
 800133a:	bf00      	nop
		default:
			break;
	}
}
 800133c:	3720      	adds	r7, #32
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	51eb851f 	.word	0x51eb851f
 8001348:	40000400 	.word	0x40000400

0800134c <prvSetMotorCallback>:


/*********************************************************************************************
 * Timer callback to read photo resistors
 *********************************************************************************************/
void prvSetMotorCallback( TimerHandle_t pxTimer ) {
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
//		} else if( steer > 50 ) {
//			steer -= 2;
//		}
//	}

	if( distCM_right < 20 ) {
 8001354:	4b10      	ldr	r3, [pc, #64]	; (8001398 <prvSetMotorCallback+0x4c>)
 8001356:	881b      	ldrh	r3, [r3, #0]
 8001358:	2b13      	cmp	r3, #19
 800135a:	d80a      	bhi.n	8001372 <prvSetMotorCallback+0x26>
		if( steer < 70 ) {
 800135c:	4b0f      	ldr	r3, [pc, #60]	; (800139c <prvSetMotorCallback+0x50>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b45      	cmp	r3, #69	; 0x45
 8001362:	d810      	bhi.n	8001386 <prvSetMotorCallback+0x3a>
			steer += 1;
 8001364:	4b0d      	ldr	r3, [pc, #52]	; (800139c <prvSetMotorCallback+0x50>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	3301      	adds	r3, #1
 800136a:	b2da      	uxtb	r2, r3
 800136c:	4b0b      	ldr	r3, [pc, #44]	; (800139c <prvSetMotorCallback+0x50>)
 800136e:	701a      	strb	r2, [r3, #0]
 8001370:	e009      	b.n	8001386 <prvSetMotorCallback+0x3a>
		}
	} else {
		if( steer > 50 ) {
 8001372:	4b0a      	ldr	r3, [pc, #40]	; (800139c <prvSetMotorCallback+0x50>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b32      	cmp	r3, #50	; 0x32
 8001378:	d905      	bls.n	8001386 <prvSetMotorCallback+0x3a>
			steer -= 1;
 800137a:	4b08      	ldr	r3, [pc, #32]	; (800139c <prvSetMotorCallback+0x50>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	3b01      	subs	r3, #1
 8001380:	b2da      	uxtb	r2, r3
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <prvSetMotorCallback+0x50>)
 8001384:	701a      	strb	r2, [r3, #0]
		}
	}

	pwmSet(steer, servo);
 8001386:	4b05      	ldr	r3, [pc, #20]	; (800139c <prvSetMotorCallback+0x50>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	4618      	mov	r0, r3
 800138c:	2102      	movs	r1, #2
 800138e:	f7ff ff91 	bl	80012b4 <pwmSet>
//	setMotor(forward, 90);
}
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	2001c260 	.word	0x2001c260
 800139c:	20000020 	.word	0x20000020

080013a0 <main>:


#include "main.h"


int main(void) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af04      	add	r7, sp, #16

	// Create initial task to connect to Base Station
	xTaskCreate( prvSetupTask, "", 300 * sizeof(uint8_t), NULL, setupPriority, xSetupHandle );
 80013a6:	4b09      	ldr	r3, [pc, #36]	; (80013cc <main+0x2c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2201      	movs	r2, #1
 80013ac:	9200      	str	r2, [sp, #0]
 80013ae:	9301      	str	r3, [sp, #4]
 80013b0:	2300      	movs	r3, #0
 80013b2:	9302      	str	r3, [sp, #8]
 80013b4:	2300      	movs	r3, #0
 80013b6:	9303      	str	r3, [sp, #12]
 80013b8:	4805      	ldr	r0, [pc, #20]	; (80013d0 <main+0x30>)
 80013ba:	4906      	ldr	r1, [pc, #24]	; (80013d4 <main+0x34>)
 80013bc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80013c0:	2300      	movs	r3, #0
 80013c2:	f005 f887 	bl	80064d4 <xTaskGenericCreate>

	// Start the scheduler which begins to run the tasks
	vTaskStartScheduler();
 80013c6:	f005 fc79 	bl	8006cbc <vTaskStartScheduler>
	/* If all is well, the scheduler will now be running, and the following line
	will never be reached.  If the following line does execute, then there was
	insufficient FreeRTOS heap memory available for the idle and/or timer tasks
	to be created.  See the memory management section on the FreeRTOS web site
	for more details. */
	for( ;; );
 80013ca:	e7fe      	b.n	80013ca <main+0x2a>
 80013cc:	2000007c 	.word	0x2000007c
 80013d0:	080013d9 	.word	0x080013d9
 80013d4:	08009150 	.word	0x08009150

080013d8 <prvSetupTask>:


/*********************************************************************************************
 * Setup hardware/software
 *********************************************************************************************/
void prvSetupTask( void *pvParameters ) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af04      	add	r7, sp, #16
 80013de:	6078      	str	r0, [r7, #4]

	// Setup hardware
	prvSetupHardware();
 80013e0:	f000 f856 	bl	8001490 <prvSetupHardware>

	// Test LEDs and indicate program is starting
	prvBlinkLeds();
 80013e4:	f000 f868 	bl	80014b8 <prvBlinkLeds>

	// ******************************************************************************************************** //
	// Ultrasonic tasks
//	xTaskCreate( prvUltrasonic1Task, "", configMINIMAL_STACK_SIZE, NULL, ultrasonicPriority, xUltrasonic1Handle );
	xTaskCreate( prvUltrasonic2Task, "", configMINIMAL_STACK_SIZE, NULL, ultrasonicPriority, xUltrasonic2Handle );
 80013e8:	4b1f      	ldr	r3, [pc, #124]	; (8001468 <prvSetupTask+0x90>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2202      	movs	r2, #2
 80013ee:	9200      	str	r2, [sp, #0]
 80013f0:	9301      	str	r3, [sp, #4]
 80013f2:	2300      	movs	r3, #0
 80013f4:	9302      	str	r3, [sp, #8]
 80013f6:	2300      	movs	r3, #0
 80013f8:	9303      	str	r3, [sp, #12]
 80013fa:	481c      	ldr	r0, [pc, #112]	; (800146c <prvSetupTask+0x94>)
 80013fc:	491c      	ldr	r1, [pc, #112]	; (8001470 <prvSetupTask+0x98>)
 80013fe:	2246      	movs	r2, #70	; 0x46
 8001400:	2300      	movs	r3, #0
 8001402:	f005 f867 	bl	80064d4 <xTaskGenericCreate>
//	xTaskCreate( prvUltrasonic3Task, "", configMINIMAL_STACK_SIZE, NULL, ultrasonicPriority, xUltrasonic3Handle );

	// Set motors
	swTimerStart( set_motor, 0 );
 8001406:	4b1b      	ldr	r3, [pc, #108]	; (8001474 <prvSetupTask+0x9c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	2100      	movs	r1, #0
 800140e:	f7ff f9bb 	bl	8000788 <swTimerStart>

	// Read Photo Resistor
	swTimerStart( read_photo, 0 );
 8001412:	4b19      	ldr	r3, [pc, #100]	; (8001478 <prvSetupTask+0xa0>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	2100      	movs	r1, #0
 800141a:	f7ff f9b5 	bl	8000788 <swTimerStart>
	// ******************************************************************************************************** //

	// Setup WiFi connection
	prvSetupWifi();
 800141e:	f000 f8a9 	bl	8001574 <prvSetupWifi>

	// Set initial mode to allModes
	my_mode = allModes;
 8001422:	4b16      	ldr	r3, [pc, #88]	; (800147c <prvSetupTask+0xa4>)
 8001424:	2200      	movs	r2, #0
 8001426:	701a      	strb	r2, [r3, #0]

	// Create queue for packets
	xPacketQueue = xQueueCreate( maxPacketQueueLength, MAX_LENGTH*sizeof(uint8_t) );
 8001428:	2005      	movs	r0, #5
 800142a:	2110      	movs	r1, #16
 800142c:	2200      	movs	r2, #0
 800142e:	f006 fdbd 	bl	8007fac <xQueueGenericCreate>
 8001432:	4602      	mov	r2, r0
 8001434:	4b12      	ldr	r3, [pc, #72]	; (8001480 <prvSetupTask+0xa8>)
 8001436:	601a      	str	r2, [r3, #0]

	// Create initial task to connect to Base Station
	xTaskCreate( prvConnectTask, "", 300 * sizeof(uint8_t), NULL, connectPriority, xConnectHandle );
 8001438:	4b12      	ldr	r3, [pc, #72]	; (8001484 <prvSetupTask+0xac>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2201      	movs	r2, #1
 800143e:	9200      	str	r2, [sp, #0]
 8001440:	9301      	str	r3, [sp, #4]
 8001442:	2300      	movs	r3, #0
 8001444:	9302      	str	r3, [sp, #8]
 8001446:	2300      	movs	r3, #0
 8001448:	9303      	str	r3, [sp, #12]
 800144a:	480f      	ldr	r0, [pc, #60]	; (8001488 <prvSetupTask+0xb0>)
 800144c:	4908      	ldr	r1, [pc, #32]	; (8001470 <prvSetupTask+0x98>)
 800144e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001452:	2300      	movs	r3, #0
 8001454:	f005 f83e 	bl	80064d4 <xTaskGenericCreate>

	// Delete this task
	vTaskDelete( xSetupHandle );
 8001458:	4b0c      	ldr	r3, [pc, #48]	; (800148c <prvSetupTask+0xb4>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4618      	mov	r0, r3
 800145e:	f005 f8db 	bl	8006618 <vTaskDelete>
}
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000068 	.word	0x20000068
 800146c:	08000235 	.word	0x08000235
 8001470:	08009150 	.word	0x08009150
 8001474:	2001c1d8 	.word	0x2001c1d8
 8001478:	2001c1f4 	.word	0x2001c1f4
 800147c:	2001c236 	.word	0x2001c236
 8001480:	2001c23c 	.word	0x2001c23c
 8001484:	20000080 	.word	0x20000080
 8001488:	080015b1 	.word	0x080015b1
 800148c:	2000007c 	.word	0x2000007c

08001490 <prvSetupHardware>:


/*********************************************************************************************
 * Setup relevant hardware
 *********************************************************************************************/
static void prvSetupHardware( void ) {
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
	// Ensure that all 4 interrupt priority bits are used as the pre-emption priority
	NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );
 8001494:	f44f 7040 	mov.w	r0, #768	; 0x300
 8001498:	f004 fc8c 	bl	8005db4 <NVIC_PriorityGroupConfig>

	// Setup LEDs
	ledInit();
 800149c:	f000 f99e 	bl	80017dc <ledInit>

	// Setup WiFi
	wifiInit();
 80014a0:	f000 f9e8 	bl	8001874 <wifiInit>

	// Setup PWM
	pwmInit();
 80014a4:	f000 fa44 	bl	8001930 <pwmInit>

	// Setup Photo Resistors
	photoResistorInit();
 80014a8:	f000 faa4 	bl	80019f4 <photoResistorInit>

	// Setup Measured Power
	measuredPowerInit();
 80014ac:	f000 faec 	bl	8001a88 <measuredPowerInit>

	// Setup Ultrasonic
	ultrasonicInit();
 80014b0:	f000 fb0e 	bl	8001ad0 <ultrasonicInit>
}
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop

080014b8 <prvBlinkLeds>:


/*********************************************************************************************
 * Blink LEDs on board
 *********************************************************************************************/
static void prvBlinkLeds( void ) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
	// Turn on and off each LED in order

	// Error
	LED_ERROR_PORT->ON = LED_ERROR_PIN;
 80014bc:	4b2b      	ldr	r3, [pc, #172]	; (800156c <prvBlinkLeds+0xb4>)
 80014be:	2280      	movs	r2, #128	; 0x80
 80014c0:	831a      	strh	r2, [r3, #24]
	swDelay(100);
 80014c2:	2064      	movs	r0, #100	; 0x64
 80014c4:	f7ff f9be 	bl	8000844 <swDelay>
	LED_ERROR_PORT->OFF = LED_ERROR_PIN;
 80014c8:	4b28      	ldr	r3, [pc, #160]	; (800156c <prvBlinkLeds+0xb4>)
 80014ca:	2280      	movs	r2, #128	; 0x80
 80014cc:	835a      	strh	r2, [r3, #26]

	// Wifi
	LED_WIFI_PORT->ON = LED_WIFI_RX_PIN;
 80014ce:	4b27      	ldr	r3, [pc, #156]	; (800156c <prvBlinkLeds+0xb4>)
 80014d0:	2220      	movs	r2, #32
 80014d2:	831a      	strh	r2, [r3, #24]
	swDelay(100);
 80014d4:	2064      	movs	r0, #100	; 0x64
 80014d6:	f7ff f9b5 	bl	8000844 <swDelay>
	LED_WIFI_PORT->OFF = LED_WIFI_RX_PIN;
 80014da:	4b24      	ldr	r3, [pc, #144]	; (800156c <prvBlinkLeds+0xb4>)
 80014dc:	2220      	movs	r2, #32
 80014de:	835a      	strh	r2, [r3, #26]

	LED_WIFI_PORT->ON = LED_WIFI_TX_PIN;
 80014e0:	4b22      	ldr	r3, [pc, #136]	; (800156c <prvBlinkLeds+0xb4>)
 80014e2:	2240      	movs	r2, #64	; 0x40
 80014e4:	831a      	strh	r2, [r3, #24]
	swDelay(100);
 80014e6:	2064      	movs	r0, #100	; 0x64
 80014e8:	f7ff f9ac 	bl	8000844 <swDelay>
	LED_WIFI_PORT->OFF = LED_WIFI_TX_PIN;
 80014ec:	4b1f      	ldr	r3, [pc, #124]	; (800156c <prvBlinkLeds+0xb4>)
 80014ee:	2240      	movs	r2, #64	; 0x40
 80014f0:	835a      	strh	r2, [r3, #26]

	// Lights
	LED_LIGHT_PORT->ON = LED_LIGHT_GREEN_PIN;
 80014f2:	4b1f      	ldr	r3, [pc, #124]	; (8001570 <prvBlinkLeds+0xb8>)
 80014f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014f8:	831a      	strh	r2, [r3, #24]
	swDelay(100);
 80014fa:	2064      	movs	r0, #100	; 0x64
 80014fc:	f7ff f9a2 	bl	8000844 <swDelay>
	LED_LIGHT_PORT->OFF = LED_LIGHT_GREEN_PIN;
 8001500:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <prvBlinkLeds+0xb8>)
 8001502:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001506:	835a      	strh	r2, [r3, #26]

	LED_LIGHT_PORT->ON = LED_LIGHT_YELLOW_PIN;
 8001508:	4b19      	ldr	r3, [pc, #100]	; (8001570 <prvBlinkLeds+0xb8>)
 800150a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800150e:	831a      	strh	r2, [r3, #24]
	swDelay(100);
 8001510:	2064      	movs	r0, #100	; 0x64
 8001512:	f7ff f997 	bl	8000844 <swDelay>
	LED_LIGHT_PORT->OFF = LED_LIGHT_YELLOW_PIN;
 8001516:	4b16      	ldr	r3, [pc, #88]	; (8001570 <prvBlinkLeds+0xb8>)
 8001518:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800151c:	835a      	strh	r2, [r3, #26]

	LED_LIGHT_PORT->ON = LED_LIGHT_RED_PIN;
 800151e:	4b14      	ldr	r3, [pc, #80]	; (8001570 <prvBlinkLeds+0xb8>)
 8001520:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001524:	831a      	strh	r2, [r3, #24]
	swDelay(100);
 8001526:	2064      	movs	r0, #100	; 0x64
 8001528:	f7ff f98c 	bl	8000844 <swDelay>
	LED_LIGHT_PORT->OFF = LED_LIGHT_RED_PIN;
 800152c:	4b10      	ldr	r3, [pc, #64]	; (8001570 <prvBlinkLeds+0xb8>)
 800152e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001532:	835a      	strh	r2, [r3, #26]

	// Mode
	LED_MODE_PORT->ON = LED_MODE_1_PIN;
 8001534:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <prvBlinkLeds+0xb8>)
 8001536:	2210      	movs	r2, #16
 8001538:	831a      	strh	r2, [r3, #24]
	swDelay(100);
 800153a:	2064      	movs	r0, #100	; 0x64
 800153c:	f7ff f982 	bl	8000844 <swDelay>
	LED_MODE_PORT->OFF = LED_MODE_1_PIN;
 8001540:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <prvBlinkLeds+0xb8>)
 8001542:	2210      	movs	r2, #16
 8001544:	835a      	strh	r2, [r3, #26]

	LED_MODE_PORT->ON = LED_MODE_2_PIN;
 8001546:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <prvBlinkLeds+0xb8>)
 8001548:	2220      	movs	r2, #32
 800154a:	831a      	strh	r2, [r3, #24]
	swDelay(100);
 800154c:	2064      	movs	r0, #100	; 0x64
 800154e:	f7ff f979 	bl	8000844 <swDelay>
	LED_MODE_PORT->OFF = LED_MODE_2_PIN;
 8001552:	4b07      	ldr	r3, [pc, #28]	; (8001570 <prvBlinkLeds+0xb8>)
 8001554:	2220      	movs	r2, #32
 8001556:	835a      	strh	r2, [r3, #26]

	LED_MODE_PORT->ON = LED_MODE_3_PIN;
 8001558:	4b05      	ldr	r3, [pc, #20]	; (8001570 <prvBlinkLeds+0xb8>)
 800155a:	2240      	movs	r2, #64	; 0x40
 800155c:	831a      	strh	r2, [r3, #24]
	swDelay(100);
 800155e:	2064      	movs	r0, #100	; 0x64
 8001560:	f7ff f970 	bl	8000844 <swDelay>
	LED_MODE_PORT->OFF = LED_MODE_3_PIN;
 8001564:	4b02      	ldr	r3, [pc, #8]	; (8001570 <prvBlinkLeds+0xb8>)
 8001566:	2240      	movs	r2, #64	; 0x40
 8001568:	835a      	strh	r2, [r3, #26]
}
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40020400 	.word	0x40020400
 8001570:	40020800 	.word	0x40020800

08001574 <prvSetupWifi>:


/*********************************************************************************************
 * Setup Wifi connection
 *********************************************************************************************/
static void prvSetupWifi( void ) {
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
	// Turn on Echo commands (for Arduino)
//	sendPacket( "ATE1", 4);

	// Delay to give Wifi chip time to boot up
	swDelay(5000);
 8001578:	f241 3088 	movw	r0, #5000	; 0x1388
 800157c:	f7ff f962 	bl	8000844 <swDelay>

	// Send AT
	sendPacket( "AT", 2, FALSE);
 8001580:	4809      	ldr	r0, [pc, #36]	; (80015a8 <prvSetupWifi+0x34>)
 8001582:	2102      	movs	r1, #2
 8001584:	2200      	movs	r2, #0
 8001586:	f7ff fab7 	bl	8000af8 <sendPacket>
	swDelay(500);
 800158a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800158e:	f7ff f959 	bl	8000844 <swDelay>
	// Connect to Wifi
//	sendPacket( "AT+CWJAP=\"OhmWreckers\",\"123\"", 28, FALSE);
//	swDelay(5000);

	// Connect to IP and set up TCP connection
	sendPacket( "AT+CIPSTART=\"TCP\",\"192.168.101.101\",1001", 40, FALSE);
 8001592:	4806      	ldr	r0, [pc, #24]	; (80015ac <prvSetupWifi+0x38>)
 8001594:	2128      	movs	r1, #40	; 0x28
 8001596:	2200      	movs	r2, #0
 8001598:	f7ff faae 	bl	8000af8 <sendPacket>
	swDelay(2000);
 800159c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80015a0:	f7ff f950 	bl	8000844 <swDelay>
}
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	08009154 	.word	0x08009154
 80015ac:	08009158 	.word	0x08009158

080015b0 <prvConnectTask>:
 * Initial bootup task to connect to Base Station
 * 		* Connect to Base Station 		- Send Ping packet
 * 		* Wait for response 			- Receive Ack packet
 * 		* If successful					- Turn on WiFi LEDs
 *********************************************************************************************/
void prvConnectTask( void *pvParameters ) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08a      	sub	sp, #40	; 0x28
 80015b4:	af04      	add	r7, sp, #16
 80015b6:	6078      	str	r0, [r7, #4]

	// Setup local variables
	uint8_t send_ping = TRUE;
 80015b8:	2301      	movs	r3, #1
 80015ba:	75fb      	strb	r3, [r7, #23]

	// Let task run infinitely
	for(;;) {

		if( send_ping ) {
 80015bc:	7dfb      	ldrb	r3, [r7, #23]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d017      	beq.n	80015f2 <prvConnectTask+0x42>
			// Setup header to Base Station
			Header* header = pvPortMalloc( sizeof(Header) );
 80015c2:	2005      	movs	r0, #5
 80015c4:	f007 fb82 	bl	8008ccc <pvPortMalloc>
 80015c8:	6138      	str	r0, [r7, #16]
			header->dest = baseStation;
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	2202      	movs	r2, #2
 80015ce:	701a      	strb	r2, [r3, #0]
			header->addr = MY_ADDR;
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	2201      	movs	r2, #1
 80015d4:	705a      	strb	r2, [r3, #1]
			header->mode = allModes;
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	2200      	movs	r2, #0
 80015da:	709a      	strb	r2, [r3, #2]
			header->type = ping;
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	2201      	movs	r2, #1
 80015e0:	70da      	strb	r2, [r3, #3]

			sendPing( header );
 80015e2:	6938      	ldr	r0, [r7, #16]
 80015e4:	f7ff fb1a 	bl	8000c1c <sendPing>

			vPortFree(header);
 80015e8:	6938      	ldr	r0, [r7, #16]
 80015ea:	f007 fc07 	bl	8008dfc <vPortFree>

			send_ping = FALSE;
 80015ee:	2300      	movs	r3, #0
 80015f0:	75fb      	strb	r3, [r7, #23]
		}

		// Continue to send Ping packet until get an Ack
		if( process_packet ) {
 80015f2:	4b1f      	ldr	r3, [pc, #124]	; (8001670 <prvConnectTask+0xc0>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d038      	beq.n	800166c <prvConnectTask+0xbc>

			// Create local string to represent the packet
			char* packet = pvPortMalloc( MAX_LENGTH*sizeof(uint8_t) );
 80015fa:	2010      	movs	r0, #16
 80015fc:	f007 fb66 	bl	8008ccc <pvPortMalloc>
 8001600:	60f8      	str	r0, [r7, #12]

			// Pop packet from queue
			xQueueReceive( xPacketQueue, packet, 0 );
 8001602:	4b1c      	ldr	r3, [pc, #112]	; (8001674 <prvConnectTask+0xc4>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	68f9      	ldr	r1, [r7, #12]
 800160a:	2200      	movs	r2, #0
 800160c:	2300      	movs	r3, #0
 800160e:	f006 fe8d 	bl	800832c <xQueueGenericReceive>

			// Process packet
			PacketResult packet_result = handlePacket( packet );
 8001612:	68f8      	ldr	r0, [r7, #12]
 8001614:	f7ff fba8 	bl	8000d68 <handlePacket>
 8001618:	4603      	mov	r3, r0
 800161a:	813b      	strh	r3, [r7, #8]

			// Free variables
			vPortFree( packet );
 800161c:	68f8      	ldr	r0, [r7, #12]
 800161e:	f007 fbed 	bl	8008dfc <vPortFree>

			if( (packet_result.result == SUCCESS) && (packet_result.type == ack) ) {
 8001622:	7a7b      	ldrb	r3, [r7, #9]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d11e      	bne.n	8001666 <prvConnectTask+0xb6>
 8001628:	7a3b      	ldrb	r3, [r7, #8]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d11b      	bne.n	8001666 <prvConnectTask+0xb6>
				// Turn on LEDs to indicate success
				LED_WIFI_PORT->ON = LED_WIFI_TX_PIN | LED_WIFI_RX_PIN;
 800162e:	4b12      	ldr	r3, [pc, #72]	; (8001678 <prvConnectTask+0xc8>)
 8001630:	2260      	movs	r2, #96	; 0x60
 8001632:	831a      	strh	r2, [r3, #24]

				// Reset process_packet
				process_packet = FALSE;
 8001634:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <prvConnectTask+0xc0>)
 8001636:	2200      	movs	r2, #0
 8001638:	701a      	strb	r2, [r3, #0]

				// If successful, move on to next task
				xTaskCreate( prvModeOfOperationTask, "", 300 * sizeof(uint8_t), NULL, modeOfOperationPriority, xModeOfOperationHandle );
 800163a:	4b10      	ldr	r3, [pc, #64]	; (800167c <prvConnectTask+0xcc>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2201      	movs	r2, #1
 8001640:	9200      	str	r2, [sp, #0]
 8001642:	9301      	str	r3, [sp, #4]
 8001644:	2300      	movs	r3, #0
 8001646:	9302      	str	r3, [sp, #8]
 8001648:	2300      	movs	r3, #0
 800164a:	9303      	str	r3, [sp, #12]
 800164c:	480c      	ldr	r0, [pc, #48]	; (8001680 <prvConnectTask+0xd0>)
 800164e:	490d      	ldr	r1, [pc, #52]	; (8001684 <prvConnectTask+0xd4>)
 8001650:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001654:	2300      	movs	r3, #0
 8001656:	f004 ff3d 	bl	80064d4 <xTaskGenericCreate>

				// Delete this task
				vTaskDelete( xConnectHandle );
 800165a:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <prvConnectTask+0xd8>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f004 ffda 	bl	8006618 <vTaskDelete>
 8001664:	e002      	b.n	800166c <prvConnectTask+0xbc>
			}
			 else {
				 send_ping = TRUE;
 8001666:	2301      	movs	r3, #1
 8001668:	75fb      	strb	r3, [r7, #23]
			}

		}
	}
 800166a:	e7a7      	b.n	80015bc <prvConnectTask+0xc>
 800166c:	e7a6      	b.n	80015bc <prvConnectTask+0xc>
 800166e:	bf00      	nop
 8001670:	2001c238 	.word	0x2001c238
 8001674:	2001c23c 	.word	0x2001c23c
 8001678:	40020400 	.word	0x40020400
 800167c:	20000084 	.word	0x20000084
 8001680:	0800168d 	.word	0x0800168d
 8001684:	08009150 	.word	0x08009150
 8001688:	20000080 	.word	0x20000080

0800168c <prvModeOfOperationTask>:
/*********************************************************************************************
 * Initial bootup task to setup default mode of operation
 * 		* Indicate SAV needs to set default mode of operation
 * 		* Wait for changeMode packet
 *********************************************************************************************/
void prvModeOfOperationTask( void *pvParameters ) {
 800168c:	b580      	push	{r7, lr}
 800168e:	b08a      	sub	sp, #40	; 0x28
 8001690:	af04      	add	r7, sp, #16
 8001692:	6078      	str	r0, [r7, #4]

	// Send SetMode packet
	Header* header = pvPortMalloc( sizeof(Header) );
 8001694:	2005      	movs	r0, #5
 8001696:	f007 fb19 	bl	8008ccc <pvPortMalloc>
 800169a:	6178      	str	r0, [r7, #20]
	header->dest = baseStation;
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	2202      	movs	r2, #2
 80016a0:	701a      	strb	r2, [r3, #0]
	header->addr = MY_ADDR;
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	2201      	movs	r2, #1
 80016a6:	705a      	strb	r2, [r3, #1]
	header->mode = allModes;
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	2200      	movs	r2, #0
 80016ac:	709a      	strb	r2, [r3, #2]
	header->type = setMode;
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	2205      	movs	r2, #5
 80016b2:	70da      	strb	r2, [r3, #3]
	sendSetMode( header );
 80016b4:	6978      	ldr	r0, [r7, #20]
 80016b6:	f7ff fadf 	bl	8000c78 <sendSetMode>

	// Let task run infinitely
	for(;;) {

		if( process_packet ) {
 80016ba:	4b20      	ldr	r3, [pc, #128]	; (800173c <prvModeOfOperationTask+0xb0>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d03b      	beq.n	800173a <prvModeOfOperationTask+0xae>

			// Create local string to represent the packet
			char* packet = pvPortMalloc( MAX_LENGTH*sizeof(uint8_t) );
 80016c2:	2010      	movs	r0, #16
 80016c4:	f007 fb02 	bl	8008ccc <pvPortMalloc>
 80016c8:	6138      	str	r0, [r7, #16]

			// Pop packet from queue
			xQueueReceive( xPacketQueue, packet, 0 );
 80016ca:	4b1d      	ldr	r3, [pc, #116]	; (8001740 <prvModeOfOperationTask+0xb4>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4618      	mov	r0, r3
 80016d0:	6939      	ldr	r1, [r7, #16]
 80016d2:	2200      	movs	r2, #0
 80016d4:	2300      	movs	r3, #0
 80016d6:	f006 fe29 	bl	800832c <xQueueGenericReceive>

			// Process packet
			PacketResult packet_result = handlePacket( packet );
 80016da:	6938      	ldr	r0, [r7, #16]
 80016dc:	f7ff fb44 	bl	8000d68 <handlePacket>
 80016e0:	4603      	mov	r3, r0
 80016e2:	81bb      	strh	r3, [r7, #12]

			// Free variables
			vPortFree( packet );
 80016e4:	6938      	ldr	r0, [r7, #16]
 80016e6:	f007 fb89 	bl	8008dfc <vPortFree>

			if( (packet_result.result == SUCCESS) && (packet_result.type == changeMode) ) {
 80016ea:	7b7b      	ldrb	r3, [r7, #13]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d11b      	bne.n	8001728 <prvModeOfOperationTask+0x9c>
 80016f0:	7b3b      	ldrb	r3, [r7, #12]
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	d118      	bne.n	8001728 <prvModeOfOperationTask+0x9c>

				// Reset process_packet
				process_packet = FALSE;
 80016f6:	4b11      	ldr	r3, [pc, #68]	; (800173c <prvModeOfOperationTask+0xb0>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	701a      	strb	r2, [r3, #0]

				// If successful, move on to next task
				xTaskCreate( prvTrafficLightTask, "", ( unsigned short ) 300, NULL, trafficLightPriority, xTrafficLightHandle );
 80016fc:	4b11      	ldr	r3, [pc, #68]	; (8001744 <prvModeOfOperationTask+0xb8>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2201      	movs	r2, #1
 8001702:	9200      	str	r2, [sp, #0]
 8001704:	9301      	str	r3, [sp, #4]
 8001706:	2300      	movs	r3, #0
 8001708:	9302      	str	r3, [sp, #8]
 800170a:	2300      	movs	r3, #0
 800170c:	9303      	str	r3, [sp, #12]
 800170e:	480e      	ldr	r0, [pc, #56]	; (8001748 <prvModeOfOperationTask+0xbc>)
 8001710:	490e      	ldr	r1, [pc, #56]	; (800174c <prvModeOfOperationTask+0xc0>)
 8001712:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001716:	2300      	movs	r3, #0
 8001718:	f004 fedc 	bl	80064d4 <xTaskGenericCreate>

				// Delete this task
				vTaskDelete( xModeOfOperationHandle );
 800171c:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <prvModeOfOperationTask+0xc4>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4618      	mov	r0, r3
 8001722:	f004 ff79 	bl	8006618 <vTaskDelete>
 8001726:	e008      	b.n	800173a <prvModeOfOperationTask+0xae>
			} else {
				// Throw error
				LED_ERROR_PORT->ON &= LED_ERROR_PIN;
 8001728:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <prvModeOfOperationTask+0xc8>)
 800172a:	4a0a      	ldr	r2, [pc, #40]	; (8001754 <prvModeOfOperationTask+0xc8>)
 800172c:	8b12      	ldrh	r2, [r2, #24]
 800172e:	b292      	uxth	r2, r2
 8001730:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001734:	b292      	uxth	r2, r2
 8001736:	831a      	strh	r2, [r3, #24]
			}
		}
	}
 8001738:	e7bf      	b.n	80016ba <prvModeOfOperationTask+0x2e>
 800173a:	e7be      	b.n	80016ba <prvModeOfOperationTask+0x2e>
 800173c:	2001c238 	.word	0x2001c238
 8001740:	2001c23c 	.word	0x2001c23c
 8001744:	20000088 	.word	0x20000088
 8001748:	08001759 	.word	0x08001759
 800174c:	08009150 	.word	0x08009150
 8001750:	20000084 	.word	0x20000084
 8001754:	40020400 	.word	0x40020400

08001758 <prvTrafficLightTask>:

/*********************************************************************************************
 * Task to handle (TrafficLight) packets
 * 		*
 *********************************************************************************************/
void prvTrafficLightTask( void *pvParameters ) {
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]

	// Read Measured Power
	swTimerStart( read_power, 0 );
 8001760:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <prvTrafficLightTask+0x4c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	2100      	movs	r1, #0
 8001768:	f7ff f80e 	bl	8000788 <swTimerStart>
//	swTimerStart( set_motor, 0 );

	// Let task run infinitely
	for(;;) {

		if( process_packet ) {
 800176c:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <prvTrafficLightTask+0x50>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d015      	beq.n	80017a0 <prvTrafficLightTask+0x48>

			// Create local string to represent the packet
			char* packet = pvPortMalloc( MAX_LENGTH*sizeof(uint8_t) );
 8001774:	2010      	movs	r0, #16
 8001776:	f007 faa9 	bl	8008ccc <pvPortMalloc>
 800177a:	60f8      	str	r0, [r7, #12]

			// Pop packet from queue
			xQueueReceive( xPacketQueue, packet, 0 );
 800177c:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <prvTrafficLightTask+0x54>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	68f9      	ldr	r1, [r7, #12]
 8001784:	2200      	movs	r2, #0
 8001786:	2300      	movs	r3, #0
 8001788:	f006 fdd0 	bl	800832c <xQueueGenericReceive>

			// Process packet
			handlePacket( packet );
 800178c:	68f8      	ldr	r0, [r7, #12]
 800178e:	f7ff faeb 	bl	8000d68 <handlePacket>

			// Free variables
			vPortFree( packet );
 8001792:	68f8      	ldr	r0, [r7, #12]
 8001794:	f007 fb32 	bl	8008dfc <vPortFree>

			// Reset process_packet
			process_packet = FALSE;
 8001798:	4b03      	ldr	r3, [pc, #12]	; (80017a8 <prvTrafficLightTask+0x50>)
 800179a:	2200      	movs	r2, #0
 800179c:	701a      	strb	r2, [r3, #0]
		}
	}
 800179e:	e7e5      	b.n	800176c <prvTrafficLightTask+0x14>
 80017a0:	e7e4      	b.n	800176c <prvTrafficLightTask+0x14>
 80017a2:	bf00      	nop
 80017a4:	2001c1fc 	.word	0x2001c1fc
 80017a8:	2001c238 	.word	0x2001c238
 80017ac:	2001c23c 	.word	0x2001c23c

080017b0 <vApplicationMallocFailedHook>:
/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 * Functions to handle errors if they occur
 *%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */

void vApplicationMallocFailedHook( void )
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
	free memory available in the FreeRTOS heap.  pvPortMalloc() is called
	internally by FreeRTOS API functions that create tasks, queues, software
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */

	for( ;; );
 80017b4:	e7fe      	b.n	80017b4 <vApplicationMallocFailedHook+0x4>
 80017b6:	bf00      	nop

080017b8 <vApplicationStackOverflowHook>:

/*********************************************************************************************
 * Functions to handle errors if they occur
 *********************************************************************************************/
void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	for( ;; );
 80017c2:	e7fe      	b.n	80017c2 <vApplicationStackOverflowHook+0xa>

080017c4 <vApplicationIdleHook>:

/*********************************************************************************************
 * Functions to handle errors if they occur
 *********************************************************************************************/
void vApplicationIdleHook( void )
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
volatile size_t xFreeStackSpace;

	/* This function is called on each cycle of the idle task.  In this case it
	does nothing useful, other than report the amout of FreeRTOS heap that
	remains unallocated. */
	xFreeStackSpace = xPortGetFreeHeapSize();
 80017ca:	f007 fb4f 	bl	8008e6c <xPortGetFreeHeapSize>
 80017ce:	4603      	mov	r3, r0
 80017d0:	607b      	str	r3, [r7, #4]

	if( xFreeStackSpace > 100 )
 80017d2:	687b      	ldr	r3, [r7, #4]
		/* By now, the kernel has allocated everything it is going to, so
		if there is a lot of heap remaining unallocated then
		the value of configTOTAL_HEAP_SIZE in FreeRTOSConfig.h can be
		reduced accordingly. */
	}
}
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop

080017dc <ledInit>:
void ADC_Configuration(void);

/*********************************************************************************************
 * Initialize LEDs
 *********************************************************************************************/
void ledInit() {
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef  GPIO_InitStructure;

	// Enable clock
	RCC_AHB1PeriphClockCmd( LED_LIGHT_CLK | LED_WIFI_CLK | LED_MODE_CLK | LED_ERROR_CLK, ENABLE);
 80017e2:	2006      	movs	r0, #6
 80017e4:	2101      	movs	r1, #1
 80017e6:	f003 f809 	bl	80047fc <RCC_AHB1PeriphClockCmd>

	// Configure GPIO
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80017ea:	2301      	movs	r3, #1
 80017ec:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80017ee:	2302      	movs	r3, #2
 80017f0:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80017f2:	2300      	movs	r3, #0
 80017f4:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80017f6:	2301      	movs	r3, #1
 80017f8:	71fb      	strb	r3, [r7, #7]

	GPIO_InitStructure.GPIO_Pin = LED_LIGHT_PINS;
 80017fa:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80017fe:	603b      	str	r3, [r7, #0]
	GPIO_Init(LED_LIGHT_PORT, &GPIO_InitStructure);
 8001800:	463b      	mov	r3, r7
 8001802:	4818      	ldr	r0, [pc, #96]	; (8001864 <ledInit+0x88>)
 8001804:	4619      	mov	r1, r3
 8001806:	f003 fae3 	bl	8004dd0 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = LED_WIFI_PINS;
 800180a:	2360      	movs	r3, #96	; 0x60
 800180c:	603b      	str	r3, [r7, #0]
	GPIO_Init(LED_WIFI_PORT, &GPIO_InitStructure);
 800180e:	463b      	mov	r3, r7
 8001810:	4815      	ldr	r0, [pc, #84]	; (8001868 <ledInit+0x8c>)
 8001812:	4619      	mov	r1, r3
 8001814:	f003 fadc 	bl	8004dd0 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = LED_MODE_PINS;
 8001818:	2370      	movs	r3, #112	; 0x70
 800181a:	603b      	str	r3, [r7, #0]
	GPIO_Init(LED_MODE_PORT, &GPIO_InitStructure);
 800181c:	463b      	mov	r3, r7
 800181e:	4811      	ldr	r0, [pc, #68]	; (8001864 <ledInit+0x88>)
 8001820:	4619      	mov	r1, r3
 8001822:	f003 fad5 	bl	8004dd0 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = LED_ERROR_PIN;
 8001826:	2380      	movs	r3, #128	; 0x80
 8001828:	603b      	str	r3, [r7, #0]
	GPIO_Init(LED_ERROR_PORT, &GPIO_InitStructure);
 800182a:	463b      	mov	r3, r7
 800182c:	480e      	ldr	r0, [pc, #56]	; (8001868 <ledInit+0x8c>)
 800182e:	4619      	mov	r1, r3
 8001830:	f003 face 	bl	8004dd0 <GPIO_Init>

	// Make sure all LEDs are off
	LED_LIGHT_PORT->OFF = LED_LIGHT_PINS;
 8001834:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <ledInit+0x88>)
 8001836:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800183a:	835a      	strh	r2, [r3, #26]
	LED_WIFI_PORT->OFF = LED_WIFI_PINS;
 800183c:	4b0a      	ldr	r3, [pc, #40]	; (8001868 <ledInit+0x8c>)
 800183e:	2260      	movs	r2, #96	; 0x60
 8001840:	835a      	strh	r2, [r3, #26]
	LED_MODE_PORT->OFF = LED_MODE_PINS;
 8001842:	4b08      	ldr	r3, [pc, #32]	; (8001864 <ledInit+0x88>)
 8001844:	2270      	movs	r2, #112	; 0x70
 8001846:	835a      	strh	r2, [r3, #26]
	LED_ERROR_PORT->OFF = LED_ERROR_PIN;
 8001848:	4b07      	ldr	r3, [pc, #28]	; (8001868 <ledInit+0x8c>)
 800184a:	2280      	movs	r2, #128	; 0x80
 800184c:	835a      	strh	r2, [r3, #26]

	// Initialize Traffic Light timer
	blinkTrafficLight = swTimerInit( 100, REPEAT, prvblinkTrafficLightCallback );
 800184e:	2064      	movs	r0, #100	; 0x64
 8001850:	2101      	movs	r1, #1
 8001852:	4a06      	ldr	r2, [pc, #24]	; (800186c <ledInit+0x90>)
 8001854:	f7fe ff7e 	bl	8000754 <swTimerInit>
 8001858:	4602      	mov	r2, r0
 800185a:	4b05      	ldr	r3, [pc, #20]	; (8001870 <ledInit+0x94>)
 800185c:	601a      	str	r2, [r3, #0]
}
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40020800 	.word	0x40020800
 8001868:	40020400 	.word	0x40020400
 800186c:	0800046d 	.word	0x0800046d
 8001870:	2001c1f0 	.word	0x2001c1f0

08001874 <wifiInit>:


/*********************************************************************************************
 * Initialize WiFi USART GPIO
 *********************************************************************************************/
void wifiInit() {
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef     GPIO_InitStruct;

	// Enable clock
	RCC_AHB1PeriphClockCmd(WIFI_CLK, ENABLE);
 800187a:	2002      	movs	r0, #2
 800187c:	2101      	movs	r1, #1
 800187e:	f002 ffbd 	bl	80047fc <RCC_AHB1PeriphClockCmd>

	// Set Pins to alternate function
	GPIO_PinAFConfig(WIFI_PORT, WIFI_TX_PINSOURCE, WIFI_AF);
 8001882:	480f      	ldr	r0, [pc, #60]	; (80018c0 <wifiInit+0x4c>)
 8001884:	210a      	movs	r1, #10
 8001886:	2207      	movs	r2, #7
 8001888:	f003 fc10 	bl	80050ac <GPIO_PinAFConfig>
	GPIO_PinAFConfig(WIFI_PORT, WIFI_RX_PINSOURCE, WIFI_AF);
 800188c:	480c      	ldr	r0, [pc, #48]	; (80018c0 <wifiInit+0x4c>)
 800188e:	210b      	movs	r1, #11
 8001890:	2207      	movs	r2, #7
 8001892:	f003 fc0b 	bl	80050ac <GPIO_PinAFConfig>

	// Initialize pins as alternating function
	GPIO_InitStruct.GPIO_Pin = WIFI_TX_PIN | WIFI_RX_PIN;
 8001896:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800189a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 800189c:	2302      	movs	r3, #2
 800189e:	713b      	strb	r3, [r7, #4]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 80018a0:	2300      	movs	r3, #0
 80018a2:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 80018a4:	2301      	movs	r3, #1
 80018a6:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 80018a8:	2303      	movs	r3, #3
 80018aa:	717b      	strb	r3, [r7, #5]
	GPIO_Init(WIFI_PORT, &GPIO_InitStruct);
 80018ac:	463b      	mov	r3, r7
 80018ae:	4804      	ldr	r0, [pc, #16]	; (80018c0 <wifiInit+0x4c>)
 80018b0:	4619      	mov	r1, r3
 80018b2:	f003 fa8d 	bl	8004dd0 <GPIO_Init>

	wifiConfig();
 80018b6:	f000 f805 	bl	80018c4 <wifiConfig>
}
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40020400 	.word	0x40020400

080018c4 <wifiConfig>:


/*********************************************************************************************
 * Initialize WiFi USART
 *********************************************************************************************/
void wifiConfig() {
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
	USART_InitTypeDef USART_InitStruct;
	NVIC_InitTypeDef NVIC_InitStruct;

	// Enable clock
	RCC_APB1PeriphClockCmd(WIFI_USART_CLK, ENABLE);
 80018ca:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80018ce:	2101      	movs	r1, #1
 80018d0:	f002 ffee 	bl	80048b0 <RCC_APB1PeriphClockCmd>

	// Initialize USART
	USART_InitStruct.USART_BaudRate = WIFI_USART_BAUD;
 80018d4:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80018d8:	60bb      	str	r3, [r7, #8]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80018da:	2300      	movs	r3, #0
 80018dc:	82bb      	strh	r3, [r7, #20]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 80018de:	230c      	movs	r3, #12
 80018e0:	827b      	strh	r3, [r7, #18]
	USART_InitStruct.USART_Parity = USART_Parity_No;
 80018e2:	2300      	movs	r3, #0
 80018e4:	823b      	strh	r3, [r7, #16]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;
 80018e6:	2300      	movs	r3, #0
 80018e8:	81fb      	strh	r3, [r7, #14]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;
 80018ea:	2300      	movs	r3, #0
 80018ec:	81bb      	strh	r3, [r7, #12]
	USART_Cmd(WIFI_USART, ENABLE);
 80018ee:	480f      	ldr	r0, [pc, #60]	; (800192c <wifiConfig+0x68>)
 80018f0:	2101      	movs	r1, #1
 80018f2:	f000 fb2b 	bl	8001f4c <USART_Cmd>
	USART_Init(WIFI_USART, &USART_InitStruct);
 80018f6:	f107 0308 	add.w	r3, r7, #8
 80018fa:	480c      	ldr	r0, [pc, #48]	; (800192c <wifiConfig+0x68>)
 80018fc:	4619      	mov	r1, r3
 80018fe:	f000 fa0f 	bl	8001d20 <USART_Init>

	// Enable RX interrupt
	USART_ITConfig(WIFI_USART, USART_IT_RXNE, ENABLE);
 8001902:	480a      	ldr	r0, [pc, #40]	; (800192c <wifiConfig+0x68>)
 8001904:	f240 5125 	movw	r1, #1317	; 0x525
 8001908:	2201      	movs	r2, #1
 800190a:	f000 fd43 	bl	8002394 <USART_ITConfig>

	// Initialize NVIC
	NVIC_InitStruct.NVIC_IRQChannel = WIFI_USART_IRQ;
 800190e:	2327      	movs	r3, #39	; 0x27
 8001910:	713b      	strb	r3, [r7, #4]
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8001912:	2301      	movs	r3, #1
 8001914:	71fb      	strb	r3, [r7, #7]
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	717b      	strb	r3, [r7, #5]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	71bb      	strb	r3, [r7, #6]
	NVIC_Init(&NVIC_InitStruct);
 800191e:	1d3b      	adds	r3, r7, #4
 8001920:	4618      	mov	r0, r3
 8001922:	f004 fa59 	bl	8005dd8 <NVIC_Init>
}
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40004800 	.word	0x40004800

08001930 <pwmInit>:


/*********************************************************************************************
 * Initialize PWM GPIO
 *********************************************************************************************/
void pwmInit() {
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	// Enable clock
	RCC_AHB1PeriphClockCmd(PWM_MOTOR_CLK | PWM_SERVO_CLK, ENABLE);
 8001936:	2004      	movs	r0, #4
 8001938:	2101      	movs	r1, #1
 800193a:	f002 ff5f 	bl	80047fc <RCC_AHB1PeriphClockCmd>

	// Set alternate function
	GPIO_PinAFConfig(PWM_MOTOR_PORT, PWM_MOTOR_1_PINSOURCE, PWM_MOTOR_AF);
 800193e:	481a      	ldr	r0, [pc, #104]	; (80019a8 <pwmInit+0x78>)
 8001940:	2107      	movs	r1, #7
 8001942:	2202      	movs	r2, #2
 8001944:	f003 fbb2 	bl	80050ac <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PWM_MOTOR_PORT, PWM_MOTOR_2_PINSOURCE, PWM_MOTOR_AF);
 8001948:	4817      	ldr	r0, [pc, #92]	; (80019a8 <pwmInit+0x78>)
 800194a:	2108      	movs	r1, #8
 800194c:	2202      	movs	r2, #2
 800194e:	f003 fbad 	bl	80050ac <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PWM_SERVO_PORT, PWM_SERVO_PINSOURCE, PWM_SERVO_AF);
 8001952:	4815      	ldr	r0, [pc, #84]	; (80019a8 <pwmInit+0x78>)
 8001954:	2109      	movs	r1, #9
 8001956:	2202      	movs	r2, #2
 8001958:	f003 fba8 	bl	80050ac <GPIO_PinAFConfig>

	// Configure GPIO
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;					// Set pin to alternate mode
 800195c:	2302      	movs	r3, #2
 800195e:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001960:	2300      	movs	r3, #0
 8001962:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001968:	2302      	movs	r3, #2
 800196a:	717b      	strb	r3, [r7, #5]

	GPIO_InitStructure.GPIO_Pin = PWM_MOTOR_1_PIN | PWM_MOTOR_2_PIN;
 800196c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001970:	603b      	str	r3, [r7, #0]
	GPIO_Init(PWM_MOTOR_PORT, &GPIO_InitStructure);
 8001972:	463b      	mov	r3, r7
 8001974:	480c      	ldr	r0, [pc, #48]	; (80019a8 <pwmInit+0x78>)
 8001976:	4619      	mov	r1, r3
 8001978:	f003 fa2a 	bl	8004dd0 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = PWM_SERVO_PIN;
 800197c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001980:	603b      	str	r3, [r7, #0]
	GPIO_Init(PWM_SERVO_PORT, &GPIO_InitStructure);
 8001982:	463b      	mov	r3, r7
 8001984:	4808      	ldr	r0, [pc, #32]	; (80019a8 <pwmInit+0x78>)
 8001986:	4619      	mov	r1, r3
 8001988:	f003 fa22 	bl	8004dd0 <GPIO_Init>

	pwmTimerConfig();
 800198c:	f000 f812 	bl	80019b4 <pwmTimerConfig>

	// Initialize set motor timer
	set_motor = swTimerInit( 100, REPEAT, prvSetMotorCallback );
 8001990:	2064      	movs	r0, #100	; 0x64
 8001992:	2101      	movs	r1, #1
 8001994:	4a05      	ldr	r2, [pc, #20]	; (80019ac <pwmInit+0x7c>)
 8001996:	f7fe fedd 	bl	8000754 <swTimerInit>
 800199a:	4602      	mov	r2, r0
 800199c:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <pwmInit+0x80>)
 800199e:	601a      	str	r2, [r3, #0]
}
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40020800 	.word	0x40020800
 80019ac:	0800134d 	.word	0x0800134d
 80019b0:	2001c1d8 	.word	0x2001c1d8

080019b4 <pwmTimerConfig>:


/*********************************************************************************************
 * Initializes Timer
 *********************************************************************************************/
void pwmTimerConfig() {
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef TIM_InitStructure;

	// Enable clock
	RCC_APB1PeriphClockCmd(PWM_TIM_CLK, ENABLE);
 80019ba:	2002      	movs	r0, #2
 80019bc:	2101      	movs	r1, #1
 80019be:	f002 ff77 	bl	80048b0 <RCC_APB1PeriphClockCmd>
	/*******************************************
	 * For servo, want PWM pulses such that:
	 * 		- 50% duty (1500us) -> 0 degrees
	 * Max values: 700us - 2300us
	 *******************************************/
	TIM_InitStructure.TIM_Prescaler = PWM_TIM_PRESCALER;
 80019c2:	2309      	movs	r3, #9
 80019c4:	80bb      	strh	r3, [r7, #4]
	TIM_InitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80019c6:	2300      	movs	r3, #0
 80019c8:	80fb      	strh	r3, [r7, #6]
	TIM_InitStructure.TIM_Period = PWM_TIM_PERIOD;
 80019ca:	f246 237a 	movw	r3, #25210	; 0x627a
 80019ce:	60bb      	str	r3, [r7, #8]
	TIM_InitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 80019d0:	2300      	movs	r3, #0
 80019d2:	81bb      	strh	r3, [r7, #12]
	TIM_InitStructure.TIM_RepetitionCounter = 0;						// Don't count repetitions
 80019d4:	2300      	movs	r3, #0
 80019d6:	73bb      	strb	r3, [r7, #14]
	TIM_TimeBaseInit(PWM_TIM, &TIM_InitStructure);
 80019d8:	1d3b      	adds	r3, r7, #4
 80019da:	4805      	ldr	r0, [pc, #20]	; (80019f0 <pwmTimerConfig+0x3c>)
 80019dc:	4619      	mov	r1, r3
 80019de:	f000 fe9f 	bl	8002720 <TIM_TimeBaseInit>

	// Start timer
	TIM_Cmd(PWM_TIM, ENABLE);
 80019e2:	4803      	ldr	r0, [pc, #12]	; (80019f0 <pwmTimerConfig+0x3c>)
 80019e4:	2101      	movs	r1, #1
 80019e6:	f001 f81d 	bl	8002a24 <TIM_Cmd>
}
 80019ea:	3710      	adds	r7, #16
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40000400 	.word	0x40000400

080019f4 <photoResistorInit>:


/*********************************************************************************************
 * Initializes Photo Resistors
 *********************************************************************************************/
void photoResistorInit() {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	// Enable clock
	RCC_AHB1PeriphClockCmd(PHOTO_CLK, ENABLE);
 80019fa:	2004      	movs	r0, #4
 80019fc:	2101      	movs	r1, #1
 80019fe:	f002 fefd 	bl	80047fc <RCC_AHB1PeriphClockCmd>

	// Configure GPIO
	GPIO_InitStructure.GPIO_Pin = PHOTO_PINS;
 8001a02:	2307      	movs	r3, #7
 8001a04:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;					// Set pin to analog mode
 8001a06:	2303      	movs	r3, #3
 8001a08:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(PHOTO_PORT, &GPIO_InitStructure);
 8001a0e:	463b      	mov	r3, r7
 8001a10:	4808      	ldr	r0, [pc, #32]	; (8001a34 <photoResistorInit+0x40>)
 8001a12:	4619      	mov	r1, r3
 8001a14:	f003 f9dc 	bl	8004dd0 <GPIO_Init>

	// Configure ADC
	adcConfig();
 8001a18:	f000 f812 	bl	8001a40 <adcConfig>

	// Initialize read photo resistor timer
	read_photo = swTimerInit( 1000, REPEAT, prvReadPhotoCallback );
 8001a1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a20:	2101      	movs	r1, #1
 8001a22:	4a05      	ldr	r2, [pc, #20]	; (8001a38 <photoResistorInit+0x44>)
 8001a24:	f7fe fe96 	bl	8000754 <swTimerInit>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	4b04      	ldr	r3, [pc, #16]	; (8001a3c <photoResistorInit+0x48>)
 8001a2c:	601a      	str	r2, [r3, #0]
}
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40020800 	.word	0x40020800
 8001a38:	08000985 	.word	0x08000985
 8001a3c:	2001c1f4 	.word	0x2001c1f4

08001a40 <adcConfig>:


/*********************************************************************************************
 * Initializes ADC
 *********************************************************************************************/
void adcConfig() {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
	ADC_InitTypeDef  ADC_InitStructure;

	// Enable clock
	RCC_APB2PeriphClockCmd(PHOTO_ADC_CLK, ENABLE);
 8001a46:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	f002 ff4e 	bl	80048ec <RCC_APB2PeriphClockCmd>

	// Put everything back to default values
	ADC_DeInit();
 8001a50:	f003 fc7c 	bl	800534c <ADC_DeInit>

	// Configure ADC
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 8001a54:	2300      	movs	r3, #0
 8001a56:	603b      	str	r3, [r7, #0]
	ADC_InitStructure.ADC_ScanConvMode = DISABLE;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	713b      	strb	r3, [r7, #4]
	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	717b      	strb	r3, [r7, #5]
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8001a60:	2300      	movs	r3, #0
 8001a62:	60bb      	str	r3, [r7, #8]
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 8001a64:	2300      	movs	r3, #0
 8001a66:	613b      	str	r3, [r7, #16]
	ADC_InitStructure.ADC_NbrOfConversion= 1;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	753b      	strb	r3, [r7, #20]
	ADC_Init(PHOTO_ADC, &ADC_InitStructure);
 8001a6c:	463b      	mov	r3, r7
 8001a6e:	4805      	ldr	r0, [pc, #20]	; (8001a84 <adcConfig+0x44>)
 8001a70:	4619      	mov	r1, r3
 8001a72:	f003 fc79 	bl	8005368 <ADC_Init>

	// Enable ADC
	ADC_Cmd(PHOTO_ADC, ENABLE);
 8001a76:	4803      	ldr	r0, [pc, #12]	; (8001a84 <adcConfig+0x44>)
 8001a78:	2101      	movs	r1, #1
 8001a7a:	f003 fd25 	bl	80054c8 <ADC_Cmd>
}
 8001a7e:	3718      	adds	r7, #24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40012000 	.word	0x40012000

08001a88 <measuredPowerInit>:


/*********************************************************************************************
 * Initializes Measured Power GPIO
 *********************************************************************************************/
void measuredPowerInit() {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	// Enable clock
	RCC_AHB1PeriphClockCmd(MEASURED_POWER_CLK, ENABLE);
 8001a8e:	2004      	movs	r0, #4
 8001a90:	2101      	movs	r1, #1
 8001a92:	f002 feb3 	bl	80047fc <RCC_AHB1PeriphClockCmd>

	// Configure GPIO
	GPIO_InitStructure.GPIO_Pin = MEASURED_POWER_PIN;
 8001a96:	2308      	movs	r3, #8
 8001a98:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;					// Set pin to analog mode
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(MEASURED_POWER_PORT, &GPIO_InitStructure);
 8001aa2:	463b      	mov	r3, r7
 8001aa4:	4807      	ldr	r0, [pc, #28]	; (8001ac4 <measuredPowerInit+0x3c>)
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	f003 f992 	bl	8004dd0 <GPIO_Init>

	// Note: Since both get initialized and use the same ADC, don't need to call it twice
	// adcConfig();

	// Initialize read measured power timer
	read_power = swTimerInit( 5000, REPEAT, prvReadPowerCallback );
 8001aac:	f241 3088 	movw	r0, #5000	; 0x1388
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	4a05      	ldr	r2, [pc, #20]	; (8001ac8 <measuredPowerInit+0x40>)
 8001ab4:	f7fe fe4e 	bl	8000754 <swTimerInit>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	4b04      	ldr	r3, [pc, #16]	; (8001acc <measuredPowerInit+0x44>)
 8001abc:	601a      	str	r2, [r3, #0]
}
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40020800 	.word	0x40020800
 8001ac8:	080008c9 	.word	0x080008c9
 8001acc:	2001c1fc 	.word	0x2001c1fc

08001ad0 <ultrasonicInit>:


/*********************************************************************************************
 * Initializes Ultrasonic GPIO
 *********************************************************************************************/
void ultrasonicInit() {
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;

    // Enable clock
    RCC_AHB1PeriphClockCmd(ULTRA_CLK, ENABLE);
 8001ad6:	2001      	movs	r0, #1
 8001ad8:	2101      	movs	r1, #1
 8001ada:	f002 fe8f 	bl	80047fc <RCC_AHB1PeriphClockCmd>

    // Configure GPIO
    GPIO_InitStruct.GPIO_Pin = ULTRA_PINS;
 8001ade:	23e0      	movs	r3, #224	; 0xe0
 8001ae0:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	713b      	strb	r3, [r7, #4]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8001aea:	2301      	movs	r3, #1
 8001aec:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8001aee:	2303      	movs	r3, #3
 8001af0:	717b      	strb	r3, [r7, #5]
	GPIO_Init(ULTRA_PORT, &GPIO_InitStruct);
 8001af2:	463b      	mov	r3, r7
 8001af4:	4805      	ldr	r0, [pc, #20]	; (8001b0c <ultrasonicInit+0x3c>)
 8001af6:	4619      	mov	r1, r3
 8001af8:	f003 f96a 	bl	8004dd0 <GPIO_Init>

	extiConfig();
 8001afc:	f000 f808 	bl	8001b10 <extiConfig>

	ultrasonicTimerConfig();
 8001b00:	f000 f82a 	bl	8001b58 <ultrasonicTimerConfig>
}
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40020000 	.word	0x40020000

08001b10 <extiConfig>:


/*********************************************************************************************
 * Initializes Ultrasonic EXTI
 *********************************************************************************************/
void extiConfig() {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
    EXTI_InitTypeDef EXTI_InitStruct;

    // Set pinsources
    SYSCFG_EXTILineConfig(ULTRA_EXTI_PORT, ULTRA_EXTI_PINSOURCES);
 8001b16:	2000      	movs	r0, #0
 8001b18:	2107      	movs	r1, #7
 8001b1a:	f002 fb01 	bl	8004120 <SYSCFG_EXTILineConfig>

    // Configure EXTI
    EXTI_InitStruct.EXTI_Line = ULTRA_EXTI_LINES;
 8001b1e:	23e0      	movs	r3, #224	; 0xe0
 8001b20:	60bb      	str	r3, [r7, #8]
	EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 8001b22:	2301      	movs	r3, #1
 8001b24:	73bb      	strb	r3, [r7, #14]
	EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
 8001b26:	2300      	movs	r3, #0
 8001b28:	733b      	strb	r3, [r7, #12]
	EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
 8001b2a:	2310      	movs	r3, #16
 8001b2c:	737b      	strb	r3, [r7, #13]
	EXTI_Init(&EXTI_InitStruct);
 8001b2e:	f107 0308 	add.w	r3, r7, #8
 8001b32:	4618      	mov	r0, r3
 8001b34:	f003 fb1a 	bl	800516c <EXTI_Init>

	NVIC_InitTypeDef NVIC_InitStruct;

	// Configure Interrupt
	NVIC_InitStruct.NVIC_IRQChannel = ULTRA_EXTI_IRQ;
 8001b38:	2317      	movs	r3, #23
 8001b3a:	713b      	strb	r3, [r7, #4]
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0x00;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	717b      	strb	r3, [r7, #5]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0x01;
 8001b40:	2301      	movs	r3, #1
 8001b42:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8001b44:	2301      	movs	r3, #1
 8001b46:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStruct);
 8001b48:	1d3b      	adds	r3, r7, #4
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f004 f944 	bl	8005dd8 <NVIC_Init>
}
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop

08001b58 <ultrasonicTimerConfig>:


void ultrasonicTimerConfig() {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b08a      	sub	sp, #40	; 0x28
 8001b5c:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef timerInitStructure_1;

	// Enable clock
	RCC_APB1PeriphClockCmd(ULTRA_TIM_CLK_1, ENABLE);
 8001b5e:	2001      	movs	r0, #1
 8001b60:	2101      	movs	r1, #1
 8001b62:	f002 fea5 	bl	80048b0 <RCC_APB1PeriphClockCmd>

	// Configure timer
	timerInitStructure_1.TIM_Prescaler = ULTRA_TIM_PRESCALER_1;
 8001b66:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001b6a:	83bb      	strh	r3, [r7, #28]
	timerInitStructure_1.TIM_CounterMode = TIM_CounterMode_Up;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	83fb      	strh	r3, [r7, #30]
	timerInitStructure_1.TIM_Period = ULTRA_TIM_PERIOD_1;
 8001b70:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b74:	623b      	str	r3, [r7, #32]
	timerInitStructure_1.TIM_ClockDivision = TIM_CKD_DIV1;
 8001b76:	2300      	movs	r3, #0
 8001b78:	84bb      	strh	r3, [r7, #36]	; 0x24
	timerInitStructure_1.TIM_RepetitionCounter = 0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	TIM_TimeBaseInit(ULTRA_TIM_1, &timerInitStructure_1);
 8001b80:	f107 031c 	add.w	r3, r7, #28
 8001b84:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001b88:	4619      	mov	r1, r3
 8001b8a:	f000 fdc9 	bl	8002720 <TIM_TimeBaseInit>

	// Enable timer
	TIM_Cmd(ULTRA_TIM_1, ENABLE);
 8001b8e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001b92:	2101      	movs	r1, #1
 8001b94:	f000 ff46 	bl	8002a24 <TIM_Cmd>

	TIM_TimeBaseInitTypeDef timerInitStructure_2;

	// Enable clock
	RCC_APB1PeriphClockCmd(ULTRA_TIM_CLK_2, ENABLE);
 8001b98:	2004      	movs	r0, #4
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	f002 fe88 	bl	80048b0 <RCC_APB1PeriphClockCmd>

	// Configure timer
	timerInitStructure_2.TIM_Prescaler = ULTRA_TIM_PRESCALER_2;
 8001ba0:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001ba4:	823b      	strh	r3, [r7, #16]
	timerInitStructure_2.TIM_CounterMode = TIM_CounterMode_Up;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	827b      	strh	r3, [r7, #18]
	timerInitStructure_2.TIM_Period = ULTRA_TIM_PERIOD_2;
 8001baa:	f241 3388 	movw	r3, #5000	; 0x1388
 8001bae:	617b      	str	r3, [r7, #20]
	timerInitStructure_2.TIM_ClockDivision = TIM_CKD_DIV1;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	833b      	strh	r3, [r7, #24]
	timerInitStructure_2.TIM_RepetitionCounter = 0;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	76bb      	strb	r3, [r7, #26]
	TIM_TimeBaseInit(ULTRA_TIM_2, &timerInitStructure_2);
 8001bb8:	f107 0310 	add.w	r3, r7, #16
 8001bbc:	4811      	ldr	r0, [pc, #68]	; (8001c04 <ultrasonicTimerConfig+0xac>)
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	f000 fdae 	bl	8002720 <TIM_TimeBaseInit>

	// Enable timer
	TIM_Cmd(ULTRA_TIM_2, ENABLE);
 8001bc4:	480f      	ldr	r0, [pc, #60]	; (8001c04 <ultrasonicTimerConfig+0xac>)
 8001bc6:	2101      	movs	r1, #1
 8001bc8:	f000 ff2c 	bl	8002a24 <TIM_Cmd>

	TIM_TimeBaseInitTypeDef timerInitStructure_3;

	// Enable clock
	RCC_APB1PeriphClockCmd(ULTRA_TIM_CLK_3, ENABLE);
 8001bcc:	2008      	movs	r0, #8
 8001bce:	2101      	movs	r1, #1
 8001bd0:	f002 fe6e 	bl	80048b0 <RCC_APB1PeriphClockCmd>

	// Configure timer
	timerInitStructure_3.TIM_Prescaler = ULTRA_TIM_PRESCALER_3;
 8001bd4:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001bd8:	80bb      	strh	r3, [r7, #4]
	timerInitStructure_3.TIM_CounterMode = TIM_CounterMode_Up;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	80fb      	strh	r3, [r7, #6]
	timerInitStructure_3.TIM_Period = ULTRA_TIM_PERIOD_3;
 8001bde:	f241 3388 	movw	r3, #5000	; 0x1388
 8001be2:	60bb      	str	r3, [r7, #8]
	timerInitStructure_3.TIM_ClockDivision = TIM_CKD_DIV1;
 8001be4:	2300      	movs	r3, #0
 8001be6:	81bb      	strh	r3, [r7, #12]
	timerInitStructure_3.TIM_RepetitionCounter = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	73bb      	strb	r3, [r7, #14]
	TIM_TimeBaseInit(ULTRA_TIM_3, &timerInitStructure_3);
 8001bec:	1d3b      	adds	r3, r7, #4
 8001bee:	4806      	ldr	r0, [pc, #24]	; (8001c08 <ultrasonicTimerConfig+0xb0>)
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	f000 fd95 	bl	8002720 <TIM_TimeBaseInit>

	// Enable timer
	TIM_Cmd(ULTRA_TIM_3, ENABLE);
 8001bf6:	4804      	ldr	r0, [pc, #16]	; (8001c08 <ultrasonicTimerConfig+0xb0>)
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	f000 ff13 	bl	8002a24 <TIM_Cmd>
}
 8001bfe:	3728      	adds	r7, #40	; 0x28
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40000800 	.word	0x40000800
 8001c08:	40000c00 	.word	0x40000c00

08001c0c <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	4b3a      	ldr	r3, [pc, #232]	; (8001d00 <USART_DeInit+0xf4>)
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d108      	bne.n	8001c2e <USART_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8001c1c:	2010      	movs	r0, #16
 8001c1e:	2101      	movs	r1, #1
 8001c20:	f002 fefa 	bl	8004a18 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8001c24:	2010      	movs	r0, #16
 8001c26:	2100      	movs	r1, #0
 8001c28:	f002 fef6 	bl	8004a18 <RCC_APB2PeriphResetCmd>
 8001c2c:	e065      	b.n	8001cfa <USART_DeInit+0xee>
  }
  else if (USARTx == USART2)
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	4b34      	ldr	r3, [pc, #208]	; (8001d04 <USART_DeInit+0xf8>)
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d10a      	bne.n	8001c4c <USART_DeInit+0x40>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8001c36:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	f002 fece 	bl	80049dc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8001c40:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001c44:	2100      	movs	r1, #0
 8001c46:	f002 fec9 	bl	80049dc <RCC_APB1PeriphResetCmd>
 8001c4a:	e056      	b.n	8001cfa <USART_DeInit+0xee>
  }
  else if (USARTx == USART3)
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	4b2e      	ldr	r3, [pc, #184]	; (8001d08 <USART_DeInit+0xfc>)
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d10a      	bne.n	8001c6a <USART_DeInit+0x5e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8001c54:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001c58:	2101      	movs	r1, #1
 8001c5a:	f002 febf 	bl	80049dc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8001c5e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001c62:	2100      	movs	r1, #0
 8001c64:	f002 feba 	bl	80049dc <RCC_APB1PeriphResetCmd>
 8001c68:	e047      	b.n	8001cfa <USART_DeInit+0xee>
  }    
  else if (USARTx == UART4)
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	4b27      	ldr	r3, [pc, #156]	; (8001d0c <USART_DeInit+0x100>)
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d10a      	bne.n	8001c88 <USART_DeInit+0x7c>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8001c72:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001c76:	2101      	movs	r1, #1
 8001c78:	f002 feb0 	bl	80049dc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8001c7c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001c80:	2100      	movs	r1, #0
 8001c82:	f002 feab 	bl	80049dc <RCC_APB1PeriphResetCmd>
 8001c86:	e038      	b.n	8001cfa <USART_DeInit+0xee>
  }
  else if (USARTx == UART5)
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	4b21      	ldr	r3, [pc, #132]	; (8001d10 <USART_DeInit+0x104>)
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d10a      	bne.n	8001ca6 <USART_DeInit+0x9a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8001c90:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001c94:	2101      	movs	r1, #1
 8001c96:	f002 fea1 	bl	80049dc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8001c9a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	f002 fe9c 	bl	80049dc <RCC_APB1PeriphResetCmd>
 8001ca4:	e029      	b.n	8001cfa <USART_DeInit+0xee>
  }  
  else if (USARTx == USART6)
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	4b1a      	ldr	r3, [pc, #104]	; (8001d14 <USART_DeInit+0x108>)
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d108      	bne.n	8001cc0 <USART_DeInit+0xb4>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 8001cae:	2020      	movs	r0, #32
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	f002 feb1 	bl	8004a18 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8001cb6:	2020      	movs	r0, #32
 8001cb8:	2100      	movs	r1, #0
 8001cba:	f002 fead 	bl	8004a18 <RCC_APB2PeriphResetCmd>
 8001cbe:	e01c      	b.n	8001cfa <USART_DeInit+0xee>
  }
  else if (USARTx == UART7)
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	4b15      	ldr	r3, [pc, #84]	; (8001d18 <USART_DeInit+0x10c>)
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d10a      	bne.n	8001cde <USART_DeInit+0xd2>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
 8001cc8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001ccc:	2101      	movs	r1, #1
 8001cce:	f002 fe85 	bl	80049dc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 8001cd2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	f002 fe80 	bl	80049dc <RCC_APB1PeriphResetCmd>
 8001cdc:	e00d      	b.n	8001cfa <USART_DeInit+0xee>
  }     
  else
  {
    if (USARTx == UART8)
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	4b0e      	ldr	r3, [pc, #56]	; (8001d1c <USART_DeInit+0x110>)
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d109      	bne.n	8001cfa <USART_DeInit+0xee>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
 8001ce6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8001cea:	2101      	movs	r1, #1
 8001cec:	f002 fe76 	bl	80049dc <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
 8001cf0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	f002 fe71 	bl	80049dc <RCC_APB1PeriphResetCmd>
    }
  }
}
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40011000 	.word	0x40011000
 8001d04:	40004400 	.word	0x40004400
 8001d08:	40004800 	.word	0x40004800
 8001d0c:	40004c00 	.word	0x40004c00
 8001d10:	40005000 	.word	0x40005000
 8001d14:	40011400 	.word	0x40011400
 8001d18:	40007800 	.word	0x40007800
 8001d1c:	40007c00 	.word	0x40007c00

08001d20 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08a      	sub	sp, #40	; 0x28
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d2e:	2300      	movs	r3, #0
 8001d30:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8001d32:	2300      	movs	r3, #0
 8001d34:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8001d36:	2300      	movs	r3, #0
 8001d38:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	8a1b      	ldrh	r3, [r3, #16]
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	88db      	ldrh	r3, [r3, #6]
 8001d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d50:	4313      	orrs	r3, r2
 8001d52:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	899b      	ldrh	r3, [r3, #12]
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8001d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d66:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001d6a:	f023 030c 	bic.w	r3, r3, #12
 8001d6e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	889a      	ldrh	r2, [r3, #4]
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	891b      	ldrh	r3, [r3, #8]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001d80:	4313      	orrs	r3, r2
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d86:	4313      	orrs	r3, r2
 8001d88:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	8a9b      	ldrh	r3, [r3, #20]
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8001d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001da0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	899b      	ldrh	r3, [r3, #12]
 8001da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001da8:	4313      	orrs	r3, r2
 8001daa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8001dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8001db4:	f107 0308 	add.w	r3, r7, #8
 8001db8:	4618      	mov	r0, r3
 8001dba:	f002 fc0b 	bl	80045d4 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	4b31      	ldr	r3, [pc, #196]	; (8001e88 <USART_Init+0x168>)
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d003      	beq.n	8001dce <USART_Init+0xae>
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	4b30      	ldr	r3, [pc, #192]	; (8001e8c <USART_Init+0x16c>)
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d102      	bne.n	8001dd4 <USART_Init+0xb4>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	623b      	str	r3, [r7, #32]
 8001dd2:	e001      	b.n	8001dd8 <USART_Init+0xb8>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	899b      	ldrh	r3, [r3, #12]
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	b21b      	sxth	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	da0c      	bge.n	8001e00 <USART_Init+0xe0>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8001de6:	6a3a      	ldr	r2, [r7, #32]
 8001de8:	4613      	mov	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	009a      	lsls	r2, r3, #2
 8001df0:	441a      	add	r2, r3
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dfc:	61fb      	str	r3, [r7, #28]
 8001dfe:	e00b      	b.n	8001e18 <USART_Init+0xf8>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8001e00:	6a3a      	ldr	r2, [r7, #32]
 8001e02:	4613      	mov	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	009a      	lsls	r2, r3, #2
 8001e0a:	441a      	add	r2, r3
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e16:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8001e18:	69fa      	ldr	r2, [r7, #28]
 8001e1a:	4b1d      	ldr	r3, [pc, #116]	; (8001e90 <USART_Init+0x170>)
 8001e1c:	fba3 1302 	umull	r1, r3, r3, r2
 8001e20:	095b      	lsrs	r3, r3, #5
 8001e22:	011b      	lsls	r3, r3, #4
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	091b      	lsrs	r3, r3, #4
 8001e2a:	2264      	movs	r2, #100	; 0x64
 8001e2c:	fb02 f303 	mul.w	r3, r2, r3
 8001e30:	69fa      	ldr	r2, [r7, #28]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	899b      	ldrh	r3, [r3, #12]
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	b21b      	sxth	r3, r3
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	da0d      	bge.n	8001e60 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001e4c:	4b10      	ldr	r3, [pc, #64]	; (8001e90 <USART_Init+0x170>)
 8001e4e:	fba3 1302 	umull	r1, r3, r3, r2
 8001e52:	095b      	lsrs	r3, r3, #5
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e5e:	e00c      	b.n	8001e7a <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	011b      	lsls	r3, r3, #4
 8001e64:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001e68:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <USART_Init+0x170>)
 8001e6a:	fba3 1302 	umull	r1, r3, r3, r2
 8001e6e:	095b      	lsrs	r3, r3, #5
 8001e70:	f003 030f 	and.w	r3, r3, #15
 8001e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e76:	4313      	orrs	r3, r2
 8001e78:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	811a      	strh	r2, [r3, #8]
}
 8001e82:	3728      	adds	r7, #40	; 0x28
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40011000 	.word	0x40011000
 8001e8c:	40011400 	.word	0x40011400
 8001e90:	51eb851f 	.word	0x51eb851f

08001e94 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ea2:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	220c      	movs	r2, #12
 8001eba:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	819a      	strh	r2, [r3, #12]
}
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <USART_ClockInit>:
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	8a1b      	ldrh	r3, [r3, #16]
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ee8:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	881a      	ldrh	r2, [r3, #0]
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	889b      	ldrh	r3, [r3, #4]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	88db      	ldrh	r3, [r3, #6]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	821a      	strh	r2, [r3, #16]
}
 8001f14:	3714      	adds	r7, #20
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop

08001f20 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	80da      	strh	r2, [r3, #6]
}
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop

08001f4c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	460b      	mov	r3, r1
 8001f56:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001f58:	78fb      	ldrb	r3, [r7, #3]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d008      	beq.n	8001f70 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	899b      	ldrh	r3, [r3, #12]
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	819a      	strh	r2, [r3, #12]
 8001f6e:	e007      	b.n	8001f80 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	899b      	ldrh	r3, [r3, #12]
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	819a      	strh	r2, [r3, #12]
  }
}
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop

08001f8c <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock. 
  * @note   The function is used for IrDA mode with UART4 and UART5.   
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	460b      	mov	r3, r1
 8001f96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	8b1b      	ldrh	r3, [r3, #24]
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	8b1b      	ldrh	r3, [r3, #24]
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	78fb      	ldrb	r3, [r7, #3]
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	831a      	strh	r2, [r3, #24]
}
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <USART_OverSampling8Cmd>:
  * @param  NewState: new state of the USART 8x oversampling mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001fd0:	78fb      	ldrb	r3, [r7, #3]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d00a      	beq.n	8001fec <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	899b      	ldrh	r3, [r3, #12]
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fe0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	819a      	strh	r2, [r3, #12]
 8001fea:	e007      	b.n	8001ffc <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	899b      	ldrh	r3, [r3, #12]
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	819a      	strh	r2, [r3, #12]
  }
}  
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop

08002008 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	460b      	mov	r3, r1
 8002012:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002014:	78fb      	ldrb	r3, [r7, #3]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d008      	beq.n	800202c <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	8a9b      	ldrh	r3, [r3, #20]
 800201e:	b29b      	uxth	r3, r3
 8002020:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002024:	b29a      	uxth	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	829a      	strh	r2, [r3, #20]
 800202a:	e007      	b.n	800203c <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	8a9b      	ldrh	r3, [r3, #20]
 8002030:	b29b      	uxth	r3, r3
 8002032:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002036:	b29a      	uxth	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	829a      	strh	r2, [r3, #20]
  }
}
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop

08002048 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	460b      	mov	r3, r1
 8002052:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8002054:	887b      	ldrh	r3, [r7, #2]
 8002056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800205a:	b29a      	uxth	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	809a      	strh	r2, [r3, #4]
}
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop

0800206c <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	889b      	ldrh	r3, [r3, #4]
 8002078:	b29b      	uxth	r3, r3
 800207a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800207e:	b29b      	uxth	r3, r3
}
 8002080:	4618      	mov	r0, r3
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <USART_SetAddress>:
  *         UART peripheral.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	460b      	mov	r3, r1
 8002096:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	8a1b      	ldrh	r3, [r3, #16]
 800209c:	b29b      	uxth	r3, r3
 800209e:	f023 030f 	bic.w	r3, r3, #15
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	8a1b      	ldrh	r3, [r3, #16]
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	78fb      	ldrb	r3, [r7, #3]
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	4313      	orrs	r3, r2
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	821a      	strh	r2, [r3, #16]
}
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	460b      	mov	r3, r1
 80020ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 80020d0:	78fb      	ldrb	r3, [r7, #3]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d008      	beq.n	80020e8 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	899b      	ldrh	r3, [r3, #12]
 80020da:	b29b      	uxth	r3, r3
 80020dc:	f043 0302 	orr.w	r3, r3, #2
 80020e0:	b29a      	uxth	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	819a      	strh	r2, [r3, #12]
 80020e6:	e007      	b.n	80020f8 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	899b      	ldrh	r3, [r3, #12]
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	f023 0302 	bic.w	r3, r3, #2
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	819a      	strh	r2, [r3, #12]
  }
}
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop

08002104 <USART_WakeUpConfig>:
  *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	460b      	mov	r3, r1
 800210e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	899b      	ldrh	r3, [r3, #12]
 8002114:	b29b      	uxth	r3, r3
 8002116:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800211a:	b29a      	uxth	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	899b      	ldrh	r3, [r3, #12]
 8002124:	b29a      	uxth	r2, r3
 8002126:	887b      	ldrh	r3, [r7, #2]
 8002128:	4313      	orrs	r3, r2
 800212a:	b29a      	uxth	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	819a      	strh	r2, [r3, #12]
}
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop

0800213c <USART_LINBreakDetectLengthConfig>:
  *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	460b      	mov	r3, r1
 8002146:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	8a1b      	ldrh	r3, [r3, #16]
 800214c:	b29b      	uxth	r3, r3
 800214e:	f023 0320 	bic.w	r3, r3, #32
 8002152:	b29a      	uxth	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	8a1b      	ldrh	r3, [r3, #16]
 800215c:	b29a      	uxth	r2, r3
 800215e:	887b      	ldrh	r3, [r7, #2]
 8002160:	4313      	orrs	r3, r2
 8002162:	b29a      	uxth	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	821a      	strh	r2, [r3, #16]
}
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop

08002174 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002180:	78fb      	ldrb	r3, [r7, #3]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d008      	beq.n	8002198 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	8a1b      	ldrh	r3, [r3, #16]
 800218a:	b29b      	uxth	r3, r3
 800218c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002190:	b29a      	uxth	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	821a      	strh	r2, [r3, #16]
 8002196:	e007      	b.n	80021a8 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	8a1b      	ldrh	r3, [r3, #16]
 800219c:	b29b      	uxth	r3, r3
 800219e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	821a      	strh	r2, [r3, #16]
  }
}
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop

080021b4 <USART_SendBreak>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	899b      	ldrh	r3, [r3, #12]
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	f043 0301 	orr.w	r3, r3, #1
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	819a      	strh	r2, [r3, #12]
}
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop

080021d8 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	460b      	mov	r3, r1
 80021e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80021e4:	78fb      	ldrb	r3, [r7, #3]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d008      	beq.n	80021fc <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	8a9b      	ldrh	r3, [r3, #20]
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	f043 0308 	orr.w	r3, r3, #8
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	829a      	strh	r2, [r3, #20]
 80021fa:	e007      	b.n	800220c <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	8a9b      	ldrh	r3, [r3, #20]
 8002200:	b29b      	uxth	r3, r3
 8002202:	f023 0308 	bic.w	r3, r3, #8
 8002206:	b29a      	uxth	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	829a      	strh	r2, [r3, #20]
  }
}
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop

08002218 <USART_SetGuardTime>:
  *         UART peripheral.
  * @param  USART_GuardTime: specifies the guard time.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	460b      	mov	r3, r1
 8002222:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	8b1b      	ldrh	r3, [r3, #24]
 8002228:	b29b      	uxth	r3, r3
 800222a:	b2db      	uxtb	r3, r3
 800222c:	b29a      	uxth	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	8b1b      	ldrh	r3, [r3, #24]
 8002236:	b29a      	uxth	r2, r3
 8002238:	78fb      	ldrb	r3, [r7, #3]
 800223a:	b29b      	uxth	r3, r3
 800223c:	021b      	lsls	r3, r3, #8
 800223e:	b29b      	uxth	r3, r3
 8002240:	4313      	orrs	r3, r2
 8002242:	b29a      	uxth	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	831a      	strh	r2, [r3, #24]
}
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop

08002254 <USART_SmartCardCmd>:
  * @param  NewState: new state of the Smart Card mode.
  *          This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	460b      	mov	r3, r1
 800225e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002260:	78fb      	ldrb	r3, [r7, #3]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d008      	beq.n	8002278 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	8a9b      	ldrh	r3, [r3, #20]
 800226a:	b29b      	uxth	r3, r3
 800226c:	f043 0320 	orr.w	r3, r3, #32
 8002270:	b29a      	uxth	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	829a      	strh	r2, [r3, #20]
 8002276:	e007      	b.n	8002288 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	8a9b      	ldrh	r3, [r3, #20]
 800227c:	b29b      	uxth	r3, r3
 800227e:	f023 0320 	bic.w	r3, r3, #32
 8002282:	b29a      	uxth	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	829a      	strh	r2, [r3, #20]
  }
}
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop

08002294 <USART_SmartCardNACKCmd>:
  * @param  NewState: new state of the NACK transmission.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	460b      	mov	r3, r1
 800229e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80022a0:	78fb      	ldrb	r3, [r7, #3]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d008      	beq.n	80022b8 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	8a9b      	ldrh	r3, [r3, #20]
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	f043 0310 	orr.w	r3, r3, #16
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	829a      	strh	r2, [r3, #20]
 80022b6:	e007      	b.n	80022c8 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	8a9b      	ldrh	r3, [r3, #20]
 80022bc:	b29b      	uxth	r3, r3
 80022be:	f023 0310 	bic.w	r3, r3, #16
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	829a      	strh	r2, [r3, #20]
  }
}
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop

080022d4 <USART_IrDAConfig>:
  *            @arg USART_IrDAMode_LowPower
  *            @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	8a9b      	ldrh	r3, [r3, #20]
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	f023 0304 	bic.w	r3, r3, #4
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	8a9b      	ldrh	r3, [r3, #20]
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	887b      	ldrh	r3, [r7, #2]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	829a      	strh	r2, [r3, #20]
}
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop

0800230c <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	460b      	mov	r3, r1
 8002316:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8002318:	78fb      	ldrb	r3, [r7, #3]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d008      	beq.n	8002330 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	8a9b      	ldrh	r3, [r3, #20]
 8002322:	b29b      	uxth	r3, r3
 8002324:	f043 0302 	orr.w	r3, r3, #2
 8002328:	b29a      	uxth	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	829a      	strh	r2, [r3, #20]
 800232e:	e007      	b.n	8002340 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	8a9b      	ldrh	r3, [r3, #20]
 8002334:	b29b      	uxth	r3, r3
 8002336:	f023 0302 	bic.w	r3, r3, #2
 800233a:	b29a      	uxth	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	829a      	strh	r2, [r3, #20]
  }
}
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop

0800234c <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.   
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	4613      	mov	r3, r2
 8002356:	460a      	mov	r2, r1
 8002358:	807a      	strh	r2, [r7, #2]
 800235a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 800235c:	787b      	ldrb	r3, [r7, #1]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d008      	beq.n	8002374 <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	8a9b      	ldrh	r3, [r3, #20]
 8002366:	b29a      	uxth	r2, r3
 8002368:	887b      	ldrh	r3, [r7, #2]
 800236a:	4313      	orrs	r3, r2
 800236c:	b29a      	uxth	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	829a      	strh	r2, [r3, #20]
 8002372:	e009      	b.n	8002388 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	8a9b      	ldrh	r3, [r3, #20]
 8002378:	b29a      	uxth	r2, r3
 800237a:	887b      	ldrh	r3, [r7, #2]
 800237c:	43db      	mvns	r3, r3
 800237e:	b29b      	uxth	r3, r3
 8002380:	4013      	ands	r3, r2
 8002382:	b29a      	uxth	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	829a      	strh	r2, [r3, #20]
  }
}
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop

08002394 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8002394:	b480      	push	{r7}
 8002396:	b087      	sub	sp, #28
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	4613      	mov	r3, r2
 800239e:	460a      	mov	r2, r1
 80023a0:	807a      	strh	r2, [r7, #2]
 80023a2:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 80023a4:	2300      	movs	r3, #0
 80023a6:	613b      	str	r3, [r7, #16]
 80023a8:	2300      	movs	r3, #0
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	2300      	movs	r3, #0
 80023ae:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80023b8:	887b      	ldrh	r3, [r7, #2]
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	095b      	lsrs	r3, r3, #5
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80023c2:	887b      	ldrh	r3, [r7, #2]
 80023c4:	f003 031f 	and.w	r3, r3, #31
 80023c8:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2201      	movs	r2, #1
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d103      	bne.n	80023e2 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	330c      	adds	r3, #12
 80023de:	617b      	str	r3, [r7, #20]
 80023e0:	e009      	b.n	80023f6 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d103      	bne.n	80023f0 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	3310      	adds	r3, #16
 80023ec:	617b      	str	r3, [r7, #20]
 80023ee:	e002      	b.n	80023f6 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	3314      	adds	r3, #20
 80023f4:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 80023f6:	787b      	ldrb	r3, [r7, #1]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d006      	beq.n	800240a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	697a      	ldr	r2, [r7, #20]
 8002400:	6811      	ldr	r1, [r2, #0]
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	430a      	orrs	r2, r1
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	e006      	b.n	8002418 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	697a      	ldr	r2, [r7, #20]
 800240e:	6811      	ldr	r1, [r2, #0]
 8002410:	68ba      	ldr	r2, [r7, #8]
 8002412:	43d2      	mvns	r2, r2
 8002414:	400a      	ands	r2, r1
 8002416:	601a      	str	r2, [r3, #0]
  }
}
 8002418:	371c      	adds	r7, #28
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop

08002424 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	460b      	mov	r3, r1
 800242e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8002430:	2300      	movs	r3, #0
 8002432:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	881b      	ldrh	r3, [r3, #0]
 8002438:	b29a      	uxth	r2, r3
 800243a:	887b      	ldrh	r3, [r7, #2]
 800243c:	4013      	ands	r3, r2
 800243e:	b29b      	uxth	r3, r3
 8002440:	2b00      	cmp	r3, #0
 8002442:	d002      	beq.n	800244a <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8002444:	2301      	movs	r3, #1
 8002446:	73fb      	strb	r3, [r7, #15]
 8002448:	e001      	b.n	800244e <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 800244a:	2300      	movs	r3, #0
 800244c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800244e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002450:	4618      	mov	r0, r3
 8002452:	3714      	adds	r7, #20
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <USART_ClearFlag>:
  *          (USART_SendData()).
  *   
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	460b      	mov	r3, r1
 8002466:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 8002468:	887b      	ldrh	r3, [r7, #2]
 800246a:	43db      	mvns	r3, r3
 800246c:	b29a      	uxth	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	801a      	strh	r2, [r3, #0]
}
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 800247c:	b480      	push	{r7}
 800247e:	b087      	sub	sp, #28
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	460b      	mov	r3, r1
 8002486:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8002488:	2300      	movs	r3, #0
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	2300      	movs	r3, #0
 800248e:	617b      	str	r3, [r7, #20]
 8002490:	2300      	movs	r3, #0
 8002492:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8002494:	2300      	movs	r3, #0
 8002496:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8002498:	887b      	ldrh	r3, [r7, #2]
 800249a:	b2db      	uxtb	r3, r3
 800249c:	095b      	lsrs	r3, r3, #5
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 80024a2:	887b      	ldrh	r3, [r7, #2]
 80024a4:	f003 031f 	and.w	r3, r3, #31
 80024a8:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	2201      	movs	r2, #1
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d106      	bne.n	80024c8 <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	899b      	ldrh	r3, [r3, #12]
 80024be:	b29b      	uxth	r3, r3
 80024c0:	697a      	ldr	r2, [r7, #20]
 80024c2:	4013      	ands	r3, r2
 80024c4:	617b      	str	r3, [r7, #20]
 80024c6:	e00f      	b.n	80024e8 <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d106      	bne.n	80024dc <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	8a1b      	ldrh	r3, [r3, #16]
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	697a      	ldr	r2, [r7, #20]
 80024d6:	4013      	ands	r3, r2
 80024d8:	617b      	str	r3, [r7, #20]
 80024da:	e005      	b.n	80024e8 <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	8a9b      	ldrh	r3, [r3, #20]
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	4013      	ands	r3, r2
 80024e6:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 80024e8:	887b      	ldrh	r3, [r7, #2]
 80024ea:	0a1b      	lsrs	r3, r3, #8
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2201      	movs	r2, #1
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	881b      	ldrh	r3, [r3, #0]
 80024fe:	b29b      	uxth	r3, r3
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	4013      	ands	r3, r2
 8002504:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d005      	beq.n	8002518 <USART_GetITStatus+0x9c>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d002      	beq.n	8002518 <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
 8002512:	2301      	movs	r3, #1
 8002514:	74fb      	strb	r3, [r7, #19]
 8002516:	e001      	b.n	800251c <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
 8002518:	2300      	movs	r3, #0
 800251a:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 800251c:	7cfb      	ldrb	r3, [r7, #19]
}
 800251e:	4618      	mov	r0, r3
 8002520:	371c      	adds	r7, #28
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop

0800252c <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8002538:	2300      	movs	r3, #0
 800253a:	81fb      	strh	r3, [r7, #14]
 800253c:	2300      	movs	r3, #0
 800253e:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8002540:	887b      	ldrh	r3, [r7, #2]
 8002542:	0a1b      	lsrs	r3, r3, #8
 8002544:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8002546:	89fb      	ldrh	r3, [r7, #14]
 8002548:	2201      	movs	r2, #1
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8002550:	89bb      	ldrh	r3, [r7, #12]
 8002552:	43db      	mvns	r3, r3
 8002554:	b29a      	uxth	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	801a      	strh	r2, [r3, #0]
}
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	4b5f      	ldr	r3, [pc, #380]	; (80026ec <TIM_DeInit+0x188>)
 8002570:	429a      	cmp	r2, r3
 8002572:	d108      	bne.n	8002586 <TIM_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8002574:	2001      	movs	r0, #1
 8002576:	2101      	movs	r1, #1
 8002578:	f002 fa4e 	bl	8004a18 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 800257c:	2001      	movs	r0, #1
 800257e:	2100      	movs	r1, #0
 8002580:	f002 fa4a 	bl	8004a18 <RCC_APB2PeriphResetCmd>
 8002584:	e0af      	b.n	80026e6 <TIM_DeInit+0x182>
  } 
  else if (TIMx == TIM2) 
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800258c:	d108      	bne.n	80025a0 <TIM_DeInit+0x3c>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 800258e:	2001      	movs	r0, #1
 8002590:	2101      	movs	r1, #1
 8002592:	f002 fa23 	bl	80049dc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8002596:	2001      	movs	r0, #1
 8002598:	2100      	movs	r1, #0
 800259a:	f002 fa1f 	bl	80049dc <RCC_APB1PeriphResetCmd>
 800259e:	e0a2      	b.n	80026e6 <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM3)
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	4b53      	ldr	r3, [pc, #332]	; (80026f0 <TIM_DeInit+0x18c>)
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d108      	bne.n	80025ba <TIM_DeInit+0x56>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 80025a8:	2002      	movs	r0, #2
 80025aa:	2101      	movs	r1, #1
 80025ac:	f002 fa16 	bl	80049dc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 80025b0:	2002      	movs	r0, #2
 80025b2:	2100      	movs	r1, #0
 80025b4:	f002 fa12 	bl	80049dc <RCC_APB1PeriphResetCmd>
 80025b8:	e095      	b.n	80026e6 <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM4)
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	4b4d      	ldr	r3, [pc, #308]	; (80026f4 <TIM_DeInit+0x190>)
 80025be:	429a      	cmp	r2, r3
 80025c0:	d108      	bne.n	80025d4 <TIM_DeInit+0x70>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 80025c2:	2004      	movs	r0, #4
 80025c4:	2101      	movs	r1, #1
 80025c6:	f002 fa09 	bl	80049dc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 80025ca:	2004      	movs	r0, #4
 80025cc:	2100      	movs	r1, #0
 80025ce:	f002 fa05 	bl	80049dc <RCC_APB1PeriphResetCmd>
 80025d2:	e088      	b.n	80026e6 <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM5)
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	4b48      	ldr	r3, [pc, #288]	; (80026f8 <TIM_DeInit+0x194>)
 80025d8:	429a      	cmp	r2, r3
 80025da:	d108      	bne.n	80025ee <TIM_DeInit+0x8a>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 80025dc:	2008      	movs	r0, #8
 80025de:	2101      	movs	r1, #1
 80025e0:	f002 f9fc 	bl	80049dc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 80025e4:	2008      	movs	r0, #8
 80025e6:	2100      	movs	r1, #0
 80025e8:	f002 f9f8 	bl	80049dc <RCC_APB1PeriphResetCmd>
 80025ec:	e07b      	b.n	80026e6 <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM6)  
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	4b42      	ldr	r3, [pc, #264]	; (80026fc <TIM_DeInit+0x198>)
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d108      	bne.n	8002608 <TIM_DeInit+0xa4>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 80025f6:	2010      	movs	r0, #16
 80025f8:	2101      	movs	r1, #1
 80025fa:	f002 f9ef 	bl	80049dc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 80025fe:	2010      	movs	r0, #16
 8002600:	2100      	movs	r1, #0
 8002602:	f002 f9eb 	bl	80049dc <RCC_APB1PeriphResetCmd>
 8002606:	e06e      	b.n	80026e6 <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM7)
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	4b3d      	ldr	r3, [pc, #244]	; (8002700 <TIM_DeInit+0x19c>)
 800260c:	429a      	cmp	r2, r3
 800260e:	d108      	bne.n	8002622 <TIM_DeInit+0xbe>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8002610:	2020      	movs	r0, #32
 8002612:	2101      	movs	r1, #1
 8002614:	f002 f9e2 	bl	80049dc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8002618:	2020      	movs	r0, #32
 800261a:	2100      	movs	r1, #0
 800261c:	f002 f9de 	bl	80049dc <RCC_APB1PeriphResetCmd>
 8002620:	e061      	b.n	80026e6 <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM8)
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	4b37      	ldr	r3, [pc, #220]	; (8002704 <TIM_DeInit+0x1a0>)
 8002626:	429a      	cmp	r2, r3
 8002628:	d108      	bne.n	800263c <TIM_DeInit+0xd8>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 800262a:	2002      	movs	r0, #2
 800262c:	2101      	movs	r1, #1
 800262e:	f002 f9f3 	bl	8004a18 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8002632:	2002      	movs	r0, #2
 8002634:	2100      	movs	r1, #0
 8002636:	f002 f9ef 	bl	8004a18 <RCC_APB2PeriphResetCmd>
 800263a:	e054      	b.n	80026e6 <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM9)
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	4b32      	ldr	r3, [pc, #200]	; (8002708 <TIM_DeInit+0x1a4>)
 8002640:	429a      	cmp	r2, r3
 8002642:	d10a      	bne.n	800265a <TIM_DeInit+0xf6>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 8002644:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002648:	2101      	movs	r1, #1
 800264a:	f002 f9e5 	bl	8004a18 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 800264e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002652:	2100      	movs	r1, #0
 8002654:	f002 f9e0 	bl	8004a18 <RCC_APB2PeriphResetCmd>
 8002658:	e045      	b.n	80026e6 <TIM_DeInit+0x182>
   }  
  else if (TIMx == TIM10)
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	4b2b      	ldr	r3, [pc, #172]	; (800270c <TIM_DeInit+0x1a8>)
 800265e:	429a      	cmp	r2, r3
 8002660:	d10a      	bne.n	8002678 <TIM_DeInit+0x114>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 8002662:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002666:	2101      	movs	r1, #1
 8002668:	f002 f9d6 	bl	8004a18 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 800266c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002670:	2100      	movs	r1, #0
 8002672:	f002 f9d1 	bl	8004a18 <RCC_APB2PeriphResetCmd>
 8002676:	e036      	b.n	80026e6 <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM11) 
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	4b25      	ldr	r3, [pc, #148]	; (8002710 <TIM_DeInit+0x1ac>)
 800267c:	429a      	cmp	r2, r3
 800267e:	d10a      	bne.n	8002696 <TIM_DeInit+0x132>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 8002680:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002684:	2101      	movs	r1, #1
 8002686:	f002 f9c7 	bl	8004a18 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 800268a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800268e:	2100      	movs	r1, #0
 8002690:	f002 f9c2 	bl	8004a18 <RCC_APB2PeriphResetCmd>
 8002694:	e027      	b.n	80026e6 <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM12)
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	4b1e      	ldr	r3, [pc, #120]	; (8002714 <TIM_DeInit+0x1b0>)
 800269a:	429a      	cmp	r2, r3
 800269c:	d108      	bne.n	80026b0 <TIM_DeInit+0x14c>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 800269e:	2040      	movs	r0, #64	; 0x40
 80026a0:	2101      	movs	r1, #1
 80026a2:	f002 f99b 	bl	80049dc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 80026a6:	2040      	movs	r0, #64	; 0x40
 80026a8:	2100      	movs	r1, #0
 80026aa:	f002 f997 	bl	80049dc <RCC_APB1PeriphResetCmd>
 80026ae:	e01a      	b.n	80026e6 <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM13) 
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	4b19      	ldr	r3, [pc, #100]	; (8002718 <TIM_DeInit+0x1b4>)
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d108      	bne.n	80026ca <TIM_DeInit+0x166>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 80026b8:	2080      	movs	r0, #128	; 0x80
 80026ba:	2101      	movs	r1, #1
 80026bc:	f002 f98e 	bl	80049dc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 80026c0:	2080      	movs	r0, #128	; 0x80
 80026c2:	2100      	movs	r1, #0
 80026c4:	f002 f98a 	bl	80049dc <RCC_APB1PeriphResetCmd>
 80026c8:	e00d      	b.n	80026e6 <TIM_DeInit+0x182>
  }  
  else
  { 
    if (TIMx == TIM14) 
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	4b13      	ldr	r3, [pc, #76]	; (800271c <TIM_DeInit+0x1b8>)
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d109      	bne.n	80026e6 <TIM_DeInit+0x182>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 80026d2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80026d6:	2101      	movs	r1, #1
 80026d8:	f002 f980 	bl	80049dc <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 80026dc:	f44f 7080 	mov.w	r0, #256	; 0x100
 80026e0:	2100      	movs	r1, #0
 80026e2:	f002 f97b 	bl	80049dc <RCC_APB1PeriphResetCmd>
    }   
  }
}
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40010000 	.word	0x40010000
 80026f0:	40000400 	.word	0x40000400
 80026f4:	40000800 	.word	0x40000800
 80026f8:	40000c00 	.word	0x40000c00
 80026fc:	40001000 	.word	0x40001000
 8002700:	40001400 	.word	0x40001400
 8002704:	40010400 	.word	0x40010400
 8002708:	40014000 	.word	0x40014000
 800270c:	40014400 	.word	0x40014400
 8002710:	40014800 	.word	0x40014800
 8002714:	40001800 	.word	0x40001800
 8002718:	40001c00 	.word	0x40001c00
 800271c:	40002000 	.word	0x40002000

08002720 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800272a:	2300      	movs	r3, #0
 800272c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	881b      	ldrh	r3, [r3, #0]
 8002732:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	4b28      	ldr	r3, [pc, #160]	; (80027d8 <TIM_TimeBaseInit+0xb8>)
 8002738:	429a      	cmp	r2, r3
 800273a:	d013      	beq.n	8002764 <TIM_TimeBaseInit+0x44>
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	4b27      	ldr	r3, [pc, #156]	; (80027dc <TIM_TimeBaseInit+0xbc>)
 8002740:	429a      	cmp	r2, r3
 8002742:	d00f      	beq.n	8002764 <TIM_TimeBaseInit+0x44>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800274a:	d00b      	beq.n	8002764 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	4b24      	ldr	r3, [pc, #144]	; (80027e0 <TIM_TimeBaseInit+0xc0>)
 8002750:	429a      	cmp	r2, r3
 8002752:	d007      	beq.n	8002764 <TIM_TimeBaseInit+0x44>
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	4b23      	ldr	r3, [pc, #140]	; (80027e4 <TIM_TimeBaseInit+0xc4>)
 8002758:	429a      	cmp	r2, r3
 800275a:	d003      	beq.n	8002764 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	4b22      	ldr	r3, [pc, #136]	; (80027e8 <TIM_TimeBaseInit+0xc8>)
 8002760:	429a      	cmp	r2, r3
 8002762:	d108      	bne.n	8002776 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8002764:	89fb      	ldrh	r3, [r7, #14]
 8002766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800276a:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	885a      	ldrh	r2, [r3, #2]
 8002770:	89fb      	ldrh	r3, [r7, #14]
 8002772:	4313      	orrs	r3, r2
 8002774:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	4b1c      	ldr	r3, [pc, #112]	; (80027ec <TIM_TimeBaseInit+0xcc>)
 800277a:	429a      	cmp	r2, r3
 800277c:	d00c      	beq.n	8002798 <TIM_TimeBaseInit+0x78>
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	4b1b      	ldr	r3, [pc, #108]	; (80027f0 <TIM_TimeBaseInit+0xd0>)
 8002782:	429a      	cmp	r2, r3
 8002784:	d008      	beq.n	8002798 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8002786:	89fb      	ldrh	r3, [r7, #14]
 8002788:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800278c:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	891a      	ldrh	r2, [r3, #8]
 8002792:	89fb      	ldrh	r3, [r7, #14]
 8002794:	4313      	orrs	r3, r2
 8002796:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	89fa      	ldrh	r2, [r7, #14]
 800279c:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685a      	ldr	r2, [r3, #4]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	881a      	ldrh	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <TIM_TimeBaseInit+0xb8>)
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d003      	beq.n	80027be <TIM_TimeBaseInit+0x9e>
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	4b08      	ldr	r3, [pc, #32]	; (80027dc <TIM_TimeBaseInit+0xbc>)
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d104      	bne.n	80027c8 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	7a9b      	ldrb	r3, [r3, #10]
 80027c2:	461a      	mov	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	829a      	strh	r2, [r3, #20]
}
 80027ce:	3714      	adds	r7, #20
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	40010000 	.word	0x40010000
 80027dc:	40010400 	.word	0x40010400
 80027e0:	40000400 	.word	0x40000400
 80027e4:	40000800 	.word	0x40000800
 80027e8:	40000c00 	.word	0x40000c00
 80027ec:	40001000 	.word	0x40001000
 80027f0:	40001400 	.word	0x40001400

080027f4 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f04f 32ff 	mov.w	r2, #4294967295
 8002802:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	729a      	strb	r2, [r3, #10]
}
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop

08002828 <TIM_PrescalerConfig>:
  *            @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *            @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediatly.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	4613      	mov	r3, r2
 8002832:	460a      	mov	r2, r1
 8002834:	807a      	strh	r2, [r7, #2]
 8002836:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	887a      	ldrh	r2, [r7, #2]
 800283c:	851a      	strh	r2, [r3, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	883a      	ldrh	r2, [r7, #0]
 8002842:	829a      	strh	r2, [r3, #20]
}
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop

08002850 <TIM_CounterModeConfig>:
  *            @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *            @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	460b      	mov	r3, r1
 800285a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpcr1 = 0;
 800285c:	2300      	movs	r3, #0
 800285e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	881b      	ldrh	r3, [r3, #0]
 8002864:	81fb      	strh	r3, [r7, #14]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002866:	89fb      	ldrh	r3, [r7, #14]
 8002868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800286c:	81fb      	strh	r3, [r7, #14]

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 800286e:	89fa      	ldrh	r2, [r7, #14]
 8002870:	887b      	ldrh	r3, [r7, #2]
 8002872:	4313      	orrs	r3, r2
 8002874:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	89fa      	ldrh	r2, [r7, #14]
 800287a:	801a      	strh	r2, [r3, #0]
}
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop

08002888 <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop

080028a4 <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop

080028c0 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e4:	b29b      	uxth	r3, r3
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop

080028f4 <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	460b      	mov	r3, r1
 80028fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002900:	78fb      	ldrb	r3, [r7, #3]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d008      	beq.n	8002918 <TIM_UpdateDisableConfig+0x24>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	881b      	ldrh	r3, [r3, #0]
 800290a:	b29b      	uxth	r3, r3
 800290c:	f043 0302 	orr.w	r3, r3, #2
 8002910:	b29a      	uxth	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	801a      	strh	r2, [r3, #0]
 8002916:	e007      	b.n	8002928 <TIM_UpdateDisableConfig+0x34>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	881b      	ldrh	r3, [r3, #0]
 800291c:	b29b      	uxth	r3, r3
 800291e:	f023 0302 	bic.w	r3, r3, #2
 8002922:	b29a      	uxth	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	801a      	strh	r2, [r3, #0]
  }
}
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop

08002934 <TIM_UpdateRequestConfig>:
  *                 generation through the slave mode controller.
  *            @arg TIM_UpdateSource_Regular: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	460b      	mov	r3, r1
 800293e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 8002940:	887b      	ldrh	r3, [r7, #2]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d008      	beq.n	8002958 <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	881b      	ldrh	r3, [r3, #0]
 800294a:	b29b      	uxth	r3, r3
 800294c:	f043 0304 	orr.w	r3, r3, #4
 8002950:	b29a      	uxth	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	801a      	strh	r2, [r3, #0]
 8002956:	e007      	b.n	8002968 <TIM_UpdateRequestConfig+0x34>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	881b      	ldrh	r3, [r3, #0]
 800295c:	b29b      	uxth	r3, r3
 800295e:	f023 0304 	bic.w	r3, r3, #4
 8002962:	b29a      	uxth	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	801a      	strh	r2, [r3, #0]
  }
}
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop

08002974 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	460b      	mov	r3, r1
 800297e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002980:	78fb      	ldrb	r3, [r7, #3]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d008      	beq.n	8002998 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	881b      	ldrh	r3, [r3, #0]
 800298a:	b29b      	uxth	r3, r3
 800298c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002990:	b29a      	uxth	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	801a      	strh	r2, [r3, #0]
 8002996:	e007      	b.n	80029a8 <TIM_ARRPreloadConfig+0x34>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	881b      	ldrh	r3, [r3, #0]
 800299c:	b29b      	uxth	r3, r3
 800299e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	801a      	strh	r2, [r3, #0]
  }
}
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop

080029b4 <TIM_SelectOnePulseMode>:
  *            @arg TIM_OPMode_Single
  *            @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	460b      	mov	r3, r1
 80029be:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	881b      	ldrh	r3, [r3, #0]
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	f023 0308 	bic.w	r3, r3, #8
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	801a      	strh	r2, [r3, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	881b      	ldrh	r3, [r3, #0]
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	887b      	ldrh	r3, [r7, #2]
 80029d8:	4313      	orrs	r3, r2
 80029da:	b29a      	uxth	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	801a      	strh	r2, [r3, #0]
}
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop

080029ec <TIM_SetClockDivision>:
  *            @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *            @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	460b      	mov	r3, r1
 80029f6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	881b      	ldrh	r3, [r3, #0]
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	801a      	strh	r2, [r3, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	881b      	ldrh	r3, [r3, #0]
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	887b      	ldrh	r3, [r7, #2]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	801a      	strh	r2, [r3, #0]
}
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop

08002a24 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002a30:	78fb      	ldrb	r3, [r7, #3]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d008      	beq.n	8002a48 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	881b      	ldrh	r3, [r3, #0]
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	f043 0301 	orr.w	r3, r3, #1
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	801a      	strh	r2, [r3, #0]
 8002a46:	e007      	b.n	8002a58 <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	881b      	ldrh	r3, [r3, #0]
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	f023 0301 	bic.w	r3, r3, #1
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	801a      	strh	r2, [r3, #0]
  }
}
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop

08002a64 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	817b      	strh	r3, [r7, #10]
 8002a72:	2300      	movs	r3, #0
 8002a74:	81fb      	strh	r3, [r7, #14]
 8002a76:	2300      	movs	r3, #0
 8002a78:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	8c1b      	ldrh	r3, [r3, #32]
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	f023 0301 	bic.w	r3, r3, #1
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	8c1b      	ldrh	r3, [r3, #32]
 8002a8e:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	889b      	ldrh	r3, [r3, #4]
 8002a94:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	8b1b      	ldrh	r3, [r3, #24]
 8002a9a:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 8002a9c:	897b      	ldrh	r3, [r7, #10]
 8002a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aa2:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 8002aa4:	897b      	ldrh	r3, [r7, #10]
 8002aa6:	f023 0303 	bic.w	r3, r3, #3
 8002aaa:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	881a      	ldrh	r2, [r3, #0]
 8002ab0:	897b      	ldrh	r3, [r7, #10]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 8002ab6:	89fb      	ldrh	r3, [r7, #14]
 8002ab8:	f023 0302 	bic.w	r3, r3, #2
 8002abc:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	899a      	ldrh	r2, [r3, #12]
 8002ac2:	89fb      	ldrh	r3, [r7, #14]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	885a      	ldrh	r2, [r3, #2]
 8002acc:	89fb      	ldrh	r3, [r7, #14]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	4b1e      	ldr	r3, [pc, #120]	; (8002b50 <TIM_OC1Init+0xec>)
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d003      	beq.n	8002ae2 <TIM_OC1Init+0x7e>
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	4b1d      	ldr	r3, [pc, #116]	; (8002b54 <TIM_OC1Init+0xf0>)
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d123      	bne.n	8002b2a <TIM_OC1Init+0xc6>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8002ae2:	89fb      	ldrh	r3, [r7, #14]
 8002ae4:	f023 0308 	bic.w	r3, r3, #8
 8002ae8:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	89da      	ldrh	r2, [r3, #14]
 8002aee:	89fb      	ldrh	r3, [r7, #14]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 8002af4:	89fb      	ldrh	r3, [r7, #14]
 8002af6:	f023 0304 	bic.w	r3, r3, #4
 8002afa:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	889a      	ldrh	r2, [r3, #4]
 8002b00:	89fb      	ldrh	r3, [r7, #14]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 8002b06:	89bb      	ldrh	r3, [r7, #12]
 8002b08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b0c:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 8002b0e:	89bb      	ldrh	r3, [r7, #12]
 8002b10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b14:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	8a1a      	ldrh	r2, [r3, #16]
 8002b1a:	89bb      	ldrh	r3, [r7, #12]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	8a5a      	ldrh	r2, [r3, #18]
 8002b24:	89bb      	ldrh	r3, [r7, #12]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	89ba      	ldrh	r2, [r7, #12]
 8002b2e:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	897a      	ldrh	r2, [r7, #10]
 8002b34:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	689a      	ldr	r2, [r3, #8]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	89fa      	ldrh	r2, [r7, #14]
 8002b42:	841a      	strh	r2, [r3, #32]
}
 8002b44:	3714      	adds	r7, #20
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	40010000 	.word	0x40010000
 8002b54:	40010400 	.word	0x40010400

08002b58 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8002b62:	2300      	movs	r3, #0
 8002b64:	817b      	strh	r3, [r7, #10]
 8002b66:	2300      	movs	r3, #0
 8002b68:	81fb      	strh	r3, [r7, #14]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	8c1b      	ldrh	r3, [r3, #32]
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	f023 0310 	bic.w	r3, r3, #16
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	8c1b      	ldrh	r3, [r3, #32]
 8002b82:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	889b      	ldrh	r3, [r3, #4]
 8002b88:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	8b1b      	ldrh	r3, [r3, #24]
 8002b8e:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
 8002b90:	897b      	ldrh	r3, [r7, #10]
 8002b92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b96:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 8002b98:	897b      	ldrh	r3, [r7, #10]
 8002b9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b9e:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	881b      	ldrh	r3, [r3, #0]
 8002ba4:	021b      	lsls	r3, r3, #8
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	897b      	ldrh	r3, [r7, #10]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 8002bae:	89fb      	ldrh	r3, [r7, #14]
 8002bb0:	f023 0320 	bic.w	r3, r3, #32
 8002bb4:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	899b      	ldrh	r3, [r3, #12]
 8002bba:	011b      	lsls	r3, r3, #4
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	89fb      	ldrh	r3, [r7, #14]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	885b      	ldrh	r3, [r3, #2]
 8002bc8:	011b      	lsls	r3, r3, #4
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	89fb      	ldrh	r3, [r7, #14]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	4b22      	ldr	r3, [pc, #136]	; (8002c60 <TIM_OC2Init+0x108>)
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d003      	beq.n	8002be2 <TIM_OC2Init+0x8a>
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	4b21      	ldr	r3, [pc, #132]	; (8002c64 <TIM_OC2Init+0x10c>)
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d12b      	bne.n	8002c3a <TIM_OC2Init+0xe2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8002be2:	89fb      	ldrh	r3, [r7, #14]
 8002be4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002be8:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	89db      	ldrh	r3, [r3, #14]
 8002bee:	011b      	lsls	r3, r3, #4
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	89fb      	ldrh	r3, [r7, #14]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 8002bf8:	89fb      	ldrh	r3, [r7, #14]
 8002bfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bfe:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	889b      	ldrh	r3, [r3, #4]
 8002c04:	011b      	lsls	r3, r3, #4
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	89fb      	ldrh	r3, [r7, #14]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
 8002c0e:	89bb      	ldrh	r3, [r7, #12]
 8002c10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c14:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 8002c16:	89bb      	ldrh	r3, [r7, #12]
 8002c18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c1c:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	8a1b      	ldrh	r3, [r3, #16]
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	89bb      	ldrh	r3, [r7, #12]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	8a5b      	ldrh	r3, [r3, #18]
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	89bb      	ldrh	r3, [r7, #12]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	89ba      	ldrh	r2, [r7, #12]
 8002c3e:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	897a      	ldrh	r2, [r7, #10]
 8002c44:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	689a      	ldr	r2, [r3, #8]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	89fa      	ldrh	r2, [r7, #14]
 8002c52:	841a      	strh	r2, [r3, #32]
}
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	40010000 	.word	0x40010000
 8002c64:	40010400 	.word	0x40010400

08002c68 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8002c72:	2300      	movs	r3, #0
 8002c74:	817b      	strh	r3, [r7, #10]
 8002c76:	2300      	movs	r3, #0
 8002c78:	81fb      	strh	r3, [r7, #14]
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	8c1b      	ldrh	r3, [r3, #32]
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	8c1b      	ldrh	r3, [r3, #32]
 8002c92:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	889b      	ldrh	r3, [r3, #4]
 8002c98:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	8b9b      	ldrh	r3, [r3, #28]
 8002c9e:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 8002ca0:	897b      	ldrh	r3, [r7, #10]
 8002ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ca6:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8002ca8:	897b      	ldrh	r3, [r7, #10]
 8002caa:	f023 0303 	bic.w	r3, r3, #3
 8002cae:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	881a      	ldrh	r2, [r3, #0]
 8002cb4:	897b      	ldrh	r3, [r7, #10]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8002cba:	89fb      	ldrh	r3, [r7, #14]
 8002cbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002cc0:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	899b      	ldrh	r3, [r3, #12]
 8002cc6:	021b      	lsls	r3, r3, #8
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	89fb      	ldrh	r3, [r7, #14]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	885b      	ldrh	r3, [r3, #2]
 8002cd4:	021b      	lsls	r3, r3, #8
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	89fb      	ldrh	r3, [r7, #14]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	4b22      	ldr	r3, [pc, #136]	; (8002d6c <TIM_OC3Init+0x104>)
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d003      	beq.n	8002cee <TIM_OC3Init+0x86>
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	4b21      	ldr	r3, [pc, #132]	; (8002d70 <TIM_OC3Init+0x108>)
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d12b      	bne.n	8002d46 <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8002cee:	89fb      	ldrh	r3, [r7, #14]
 8002cf0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002cf4:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	89db      	ldrh	r3, [r3, #14]
 8002cfa:	021b      	lsls	r3, r3, #8
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	89fb      	ldrh	r3, [r7, #14]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8002d04:	89fb      	ldrh	r3, [r7, #14]
 8002d06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d0a:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	889b      	ldrh	r3, [r3, #4]
 8002d10:	021b      	lsls	r3, r3, #8
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	89fb      	ldrh	r3, [r7, #14]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 8002d1a:	89bb      	ldrh	r3, [r7, #12]
 8002d1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d20:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 8002d22:	89bb      	ldrh	r3, [r7, #12]
 8002d24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d28:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	8a1b      	ldrh	r3, [r3, #16]
 8002d2e:	011b      	lsls	r3, r3, #4
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	89bb      	ldrh	r3, [r7, #12]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	8a5b      	ldrh	r3, [r3, #18]
 8002d3c:	011b      	lsls	r3, r3, #4
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	89bb      	ldrh	r3, [r7, #12]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	89ba      	ldrh	r2, [r7, #12]
 8002d4a:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	897a      	ldrh	r2, [r7, #10]
 8002d50:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	689a      	ldr	r2, [r3, #8]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	89fa      	ldrh	r2, [r7, #14]
 8002d5e:	841a      	strh	r2, [r3, #32]
}
 8002d60:	3714      	adds	r7, #20
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	40010000 	.word	0x40010000
 8002d70:	40010400 	.word	0x40010400

08002d74 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	81bb      	strh	r3, [r7, #12]
 8002d82:	2300      	movs	r3, #0
 8002d84:	817b      	strh	r3, [r7, #10]
 8002d86:	2300      	movs	r3, #0
 8002d88:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	8c1b      	ldrh	r3, [r3, #32]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	8c1b      	ldrh	r3, [r3, #32]
 8002d9e:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	889b      	ldrh	r3, [r3, #4]
 8002da4:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	8b9b      	ldrh	r3, [r3, #28]
 8002daa:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 8002dac:	89bb      	ldrh	r3, [r7, #12]
 8002dae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002db2:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 8002db4:	89bb      	ldrh	r3, [r7, #12]
 8002db6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dba:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	881b      	ldrh	r3, [r3, #0]
 8002dc0:	021b      	lsls	r3, r3, #8
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	89bb      	ldrh	r3, [r7, #12]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8002dca:	897b      	ldrh	r3, [r7, #10]
 8002dcc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002dd0:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	899b      	ldrh	r3, [r3, #12]
 8002dd6:	031b      	lsls	r3, r3, #12
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	897b      	ldrh	r3, [r7, #10]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	885b      	ldrh	r3, [r3, #2]
 8002de4:	031b      	lsls	r3, r3, #12
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	897b      	ldrh	r3, [r7, #10]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	4b11      	ldr	r3, [pc, #68]	; (8002e38 <TIM_OC4Init+0xc4>)
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d003      	beq.n	8002dfe <TIM_OC4Init+0x8a>
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	4b10      	ldr	r3, [pc, #64]	; (8002e3c <TIM_OC4Init+0xc8>)
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d10a      	bne.n	8002e14 <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 8002dfe:	89fb      	ldrh	r3, [r7, #14]
 8002e00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e04:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	8a1b      	ldrh	r3, [r3, #16]
 8002e0a:	019b      	lsls	r3, r3, #6
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	89fb      	ldrh	r3, [r7, #14]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	89fa      	ldrh	r2, [r7, #14]
 8002e18:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	89ba      	ldrh	r2, [r7, #12]
 8002e1e:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	897a      	ldrh	r2, [r7, #10]
 8002e2c:	841a      	strh	r2, [r3, #32]
}
 8002e2e:	3714      	adds	r7, #20
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	40010000 	.word	0x40010000
 8002e3c:	40010400 	.word	0x40010400

08002e40 <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	801a      	strh	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	805a      	strh	r2, [r3, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	609a      	str	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	81da      	strh	r2, [r3, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	821a      	strh	r2, [r3, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	825a      	strh	r2, [r3, #18]
}
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop

08002e84 <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	460a      	mov	r2, r1
 8002e90:	807a      	strh	r2, [r7, #2]
 8002e92:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
 8002e94:	2300      	movs	r3, #0
 8002e96:	60fb      	str	r3, [r7, #12]
  uint16_t tmp1 = 0;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	60fb      	str	r3, [r7, #12]
  tmp += CCMR_OFFSET;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	3318      	adds	r3, #24
 8002ea4:	60fb      	str	r3, [r7, #12]

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 8002ea6:	887b      	ldrh	r3, [r7, #2]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002eae:	817b      	strh	r3, [r7, #10]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	8c1b      	ldrh	r3, [r3, #32]
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	897b      	ldrh	r3, [r7, #10]
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	841a      	strh	r2, [r3, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8002ec4:	887b      	ldrh	r3, [r7, #2]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d002      	beq.n	8002ed0 <TIM_SelectOCxM+0x4c>
 8002eca:	887b      	ldrh	r3, [r7, #2]
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	d113      	bne.n	8002ef8 <TIM_SelectOCxM+0x74>
  {
    tmp += (TIM_Channel>>1);
 8002ed0:	887b      	ldrh	r3, [r7, #2]
 8002ed2:	085b      	lsrs	r3, r3, #1
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	4413      	add	r3, r2
 8002eda:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6819      	ldr	r1, [r3, #0]
 8002ee2:	f64f 738f 	movw	r3, #65423	; 0xff8f
 8002ee6:	400b      	ands	r3, r1
 8002ee8:	6013      	str	r3, [r2, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	6811      	ldr	r1, [r2, #0]
 8002ef0:	883a      	ldrh	r2, [r7, #0]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	e016      	b.n	8002f26 <TIM_SelectOCxM+0xa2>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 8002ef8:	887b      	ldrh	r3, [r7, #2]
 8002efa:	3b04      	subs	r3, #4
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	085b      	lsrs	r3, r3, #1
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	4413      	add	r3, r2
 8002f06:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6819      	ldr	r1, [r3, #0]
 8002f0e:	f648 73ff 	movw	r3, #36863	; 0x8fff
 8002f12:	400b      	ands	r3, r1
 8002f14:	6013      	str	r3, [r2, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	6811      	ldr	r1, [r2, #0]
 8002f1c:	883a      	ldrh	r2, [r7, #0]
 8002f1e:	0212      	lsls	r2, r2, #8
 8002f20:	b292      	uxth	r2, r2
 8002f22:	430a      	orrs	r2, r1
 8002f24:	601a      	str	r2, [r3, #0]
  }
}
 8002f26:	3714      	adds	r7, #20
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop

08002f4c <TIM_SetCompare2>:
  *         peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop

08002f68 <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop

08002f84 <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop

08002fa0 <TIM_ForcedOC1Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	460b      	mov	r3, r1
 8002faa:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8002fac:	2300      	movs	r3, #0
 8002fae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	8b1b      	ldrh	r3, [r3, #24]
 8002fb4:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
 8002fb6:	89fb      	ldrh	r3, [r7, #14]
 8002fb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fbc:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 8002fbe:	89fa      	ldrh	r2, [r7, #14]
 8002fc0:	887b      	ldrh	r3, [r7, #2]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	89fa      	ldrh	r2, [r7, #14]
 8002fca:	831a      	strh	r2, [r3, #24]
}
 8002fcc:	3714      	adds	r7, #20
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop

08002fd8 <TIM_ForcedOC2Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	8b1b      	ldrh	r3, [r3, #24]
 8002fec:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
 8002fee:	89fb      	ldrh	r3, [r7, #14]
 8002ff0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ff4:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 8002ff6:	887b      	ldrh	r3, [r7, #2]
 8002ff8:	021b      	lsls	r3, r3, #8
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	89fb      	ldrh	r3, [r7, #14]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	89fa      	ldrh	r2, [r7, #14]
 8003006:	831a      	strh	r2, [r3, #24]
}
 8003008:	3714      	adds	r7, #20
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop

08003014 <TIM_ForcedOC3Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	460b      	mov	r3, r1
 800301e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8003020:	2300      	movs	r3, #0
 8003022:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	8b9b      	ldrh	r3, [r3, #28]
 8003028:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
 800302a:	89fb      	ldrh	r3, [r7, #14]
 800302c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003030:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 8003032:	89fa      	ldrh	r2, [r7, #14]
 8003034:	887b      	ldrh	r3, [r7, #2]
 8003036:	4313      	orrs	r3, r2
 8003038:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	89fa      	ldrh	r2, [r7, #14]
 800303e:	839a      	strh	r2, [r3, #28]
}
 8003040:	3714      	adds	r7, #20
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop

0800304c <TIM_ForcedOC4Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	460b      	mov	r3, r1
 8003056:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8003058:	2300      	movs	r3, #0
 800305a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	8b9b      	ldrh	r3, [r3, #28]
 8003060:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
 8003062:	89fb      	ldrh	r3, [r7, #14]
 8003064:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003068:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 800306a:	887b      	ldrh	r3, [r7, #2]
 800306c:	021b      	lsls	r3, r3, #8
 800306e:	b29a      	uxth	r2, r3
 8003070:	89fb      	ldrh	r3, [r7, #14]
 8003072:	4313      	orrs	r3, r2
 8003074:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	89fa      	ldrh	r2, [r7, #14]
 800307a:	839a      	strh	r2, [r3, #28]
}
 800307c:	3714      	adds	r7, #20
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop

08003088 <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	460b      	mov	r3, r1
 8003092:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8003094:	2300      	movs	r3, #0
 8003096:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	8b1b      	ldrh	r3, [r3, #24]
 800309c:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 800309e:	89fb      	ldrh	r3, [r7, #14]
 80030a0:	f023 0308 	bic.w	r3, r3, #8
 80030a4:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 80030a6:	89fa      	ldrh	r2, [r7, #14]
 80030a8:	887b      	ldrh	r3, [r7, #2]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	89fa      	ldrh	r2, [r7, #14]
 80030b2:	831a      	strh	r2, [r3, #24]
}
 80030b4:	3714      	adds	r7, #20
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop

080030c0 <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	460b      	mov	r3, r1
 80030ca:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80030cc:	2300      	movs	r3, #0
 80030ce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	8b1b      	ldrh	r3, [r3, #24]
 80030d4:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 80030d6:	89fb      	ldrh	r3, [r7, #14]
 80030d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030dc:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 80030de:	887b      	ldrh	r3, [r7, #2]
 80030e0:	021b      	lsls	r3, r3, #8
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	89fb      	ldrh	r3, [r7, #14]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	89fa      	ldrh	r2, [r7, #14]
 80030ee:	831a      	strh	r2, [r3, #24]
}
 80030f0:	3714      	adds	r7, #20
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop

080030fc <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	460b      	mov	r3, r1
 8003106:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8003108:	2300      	movs	r3, #0
 800310a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	8b9b      	ldrh	r3, [r3, #28]
 8003110:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8003112:	89fb      	ldrh	r3, [r7, #14]
 8003114:	f023 0308 	bic.w	r3, r3, #8
 8003118:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 800311a:	89fa      	ldrh	r2, [r7, #14]
 800311c:	887b      	ldrh	r3, [r7, #2]
 800311e:	4313      	orrs	r3, r2
 8003120:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	89fa      	ldrh	r2, [r7, #14]
 8003126:	839a      	strh	r2, [r3, #28]
}
 8003128:	3714      	adds	r7, #20
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop

08003134 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	460b      	mov	r3, r1
 800313e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8003140:	2300      	movs	r3, #0
 8003142:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	8b9b      	ldrh	r3, [r3, #28]
 8003148:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 800314a:	89fb      	ldrh	r3, [r7, #14]
 800314c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003150:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8003152:	887b      	ldrh	r3, [r7, #2]
 8003154:	021b      	lsls	r3, r3, #8
 8003156:	b29a      	uxth	r2, r3
 8003158:	89fb      	ldrh	r3, [r7, #14]
 800315a:	4313      	orrs	r3, r2
 800315c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	89fa      	ldrh	r2, [r7, #14]
 8003162:	839a      	strh	r2, [r3, #28]
}
 8003164:	3714      	adds	r7, #20
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop

08003170 <TIM_OC1FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	460b      	mov	r3, r1
 800317a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800317c:	2300      	movs	r3, #0
 800317e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	8b1b      	ldrh	r3, [r3, #24]
 8003184:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
 8003186:	89fb      	ldrh	r3, [r7, #14]
 8003188:	f023 0304 	bic.w	r3, r3, #4
 800318c:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 800318e:	89fa      	ldrh	r2, [r7, #14]
 8003190:	887b      	ldrh	r3, [r7, #2]
 8003192:	4313      	orrs	r3, r2
 8003194:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	89fa      	ldrh	r2, [r7, #14]
 800319a:	831a      	strh	r2, [r3, #24]
}
 800319c:	3714      	adds	r7, #20
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop

080031a8 <TIM_OC2FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	460b      	mov	r3, r1
 80031b2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80031b4:	2300      	movs	r3, #0
 80031b6:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	8b1b      	ldrh	r3, [r3, #24]
 80031bc:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
 80031be:	89fb      	ldrh	r3, [r7, #14]
 80031c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031c4:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 80031c6:	887b      	ldrh	r3, [r7, #2]
 80031c8:	021b      	lsls	r3, r3, #8
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	89fb      	ldrh	r3, [r7, #14]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	89fa      	ldrh	r2, [r7, #14]
 80031d6:	831a      	strh	r2, [r3, #24]
}
 80031d8:	3714      	adds	r7, #20
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop

080031e4 <TIM_OC3FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	460b      	mov	r3, r1
 80031ee:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80031f0:	2300      	movs	r3, #0
 80031f2:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	8b9b      	ldrh	r3, [r3, #28]
 80031f8:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
 80031fa:	89fb      	ldrh	r3, [r7, #14]
 80031fc:	f023 0304 	bic.w	r3, r3, #4
 8003200:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 8003202:	89fa      	ldrh	r2, [r7, #14]
 8003204:	887b      	ldrh	r3, [r7, #2]
 8003206:	4313      	orrs	r3, r2
 8003208:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	89fa      	ldrh	r2, [r7, #14]
 800320e:	839a      	strh	r2, [r3, #28]
}
 8003210:	3714      	adds	r7, #20
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop

0800321c <TIM_OC4FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	460b      	mov	r3, r1
 8003226:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8003228:	2300      	movs	r3, #0
 800322a:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	8b9b      	ldrh	r3, [r3, #28]
 8003230:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
 8003232:	89fb      	ldrh	r3, [r7, #14]
 8003234:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003238:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 800323a:	887b      	ldrh	r3, [r7, #2]
 800323c:	021b      	lsls	r3, r3, #8
 800323e:	b29a      	uxth	r2, r3
 8003240:	89fb      	ldrh	r3, [r7, #14]
 8003242:	4313      	orrs	r3, r2
 8003244:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	89fa      	ldrh	r2, [r7, #14]
 800324a:	839a      	strh	r2, [r3, #28]
}
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop

08003258 <TIM_ClearOC1Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	460b      	mov	r3, r1
 8003262:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8003264:	2300      	movs	r3, #0
 8003266:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	8b1b      	ldrh	r3, [r3, #24]
 800326c:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
 800326e:	89fb      	ldrh	r3, [r7, #14]
 8003270:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003274:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 8003276:	89fa      	ldrh	r2, [r7, #14]
 8003278:	887b      	ldrh	r3, [r7, #2]
 800327a:	4313      	orrs	r3, r2
 800327c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	89fa      	ldrh	r2, [r7, #14]
 8003282:	831a      	strh	r2, [r3, #24]
}
 8003284:	3714      	adds	r7, #20
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop

08003290 <TIM_ClearOC2Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	460b      	mov	r3, r1
 800329a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800329c:	2300      	movs	r3, #0
 800329e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	8b1b      	ldrh	r3, [r3, #24]
 80032a4:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
 80032a6:	89fb      	ldrh	r3, [r7, #14]
 80032a8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80032ac:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 80032ae:	887b      	ldrh	r3, [r7, #2]
 80032b0:	021b      	lsls	r3, r3, #8
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	89fb      	ldrh	r3, [r7, #14]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	89fa      	ldrh	r2, [r7, #14]
 80032be:	831a      	strh	r2, [r3, #24]
}
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop

080032cc <TIM_ClearOC3Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	460b      	mov	r3, r1
 80032d6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80032d8:	2300      	movs	r3, #0
 80032da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	8b9b      	ldrh	r3, [r3, #28]
 80032e0:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
 80032e2:	89fb      	ldrh	r3, [r7, #14]
 80032e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032e8:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 80032ea:	89fa      	ldrh	r2, [r7, #14]
 80032ec:	887b      	ldrh	r3, [r7, #2]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	89fa      	ldrh	r2, [r7, #14]
 80032f6:	839a      	strh	r2, [r3, #28]
}
 80032f8:	3714      	adds	r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop

08003304 <TIM_ClearOC4Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	460b      	mov	r3, r1
 800330e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8003310:	2300      	movs	r3, #0
 8003312:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	8b9b      	ldrh	r3, [r3, #28]
 8003318:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
 800331a:	89fb      	ldrh	r3, [r7, #14]
 800331c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003320:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 8003322:	887b      	ldrh	r3, [r7, #2]
 8003324:	021b      	lsls	r3, r3, #8
 8003326:	b29a      	uxth	r2, r3
 8003328:	89fb      	ldrh	r3, [r7, #14]
 800332a:	4313      	orrs	r3, r2
 800332c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	89fa      	ldrh	r2, [r7, #14]
 8003332:	839a      	strh	r2, [r3, #28]
}
 8003334:	3714      	adds	r7, #20
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop

08003340 <TIM_OC1PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	460b      	mov	r3, r1
 800334a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800334c:	2300      	movs	r3, #0
 800334e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	8c1b      	ldrh	r3, [r3, #32]
 8003354:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
 8003356:	89fb      	ldrh	r3, [r7, #14]
 8003358:	f023 0302 	bic.w	r3, r3, #2
 800335c:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCPolarity;
 800335e:	89fa      	ldrh	r2, [r7, #14]
 8003360:	887b      	ldrh	r3, [r7, #2]
 8003362:	4313      	orrs	r3, r2
 8003364:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	89fa      	ldrh	r2, [r7, #14]
 800336a:	841a      	strh	r2, [r3, #32]
}
 800336c:	3714      	adds	r7, #20
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop

08003378 <TIM_OC1NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	460b      	mov	r3, r1
 8003382:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8003384:	2300      	movs	r3, #0
 8003386:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	8c1b      	ldrh	r3, [r3, #32]
 800338c:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 800338e:	89fb      	ldrh	r3, [r7, #14]
 8003390:	f023 0308 	bic.w	r3, r3, #8
 8003394:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCNPolarity;
 8003396:	89fa      	ldrh	r2, [r7, #14]
 8003398:	887b      	ldrh	r3, [r7, #2]
 800339a:	4313      	orrs	r3, r2
 800339c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	89fa      	ldrh	r2, [r7, #14]
 80033a2:	841a      	strh	r2, [r3, #32]
}
 80033a4:	3714      	adds	r7, #20
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop

080033b0 <TIM_OC2PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	460b      	mov	r3, r1
 80033ba:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 80033bc:	2300      	movs	r3, #0
 80033be:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	8c1b      	ldrh	r3, [r3, #32]
 80033c4:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
 80033c6:	89fb      	ldrh	r3, [r7, #14]
 80033c8:	f023 0320 	bic.w	r3, r3, #32
 80033cc:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 80033ce:	887b      	ldrh	r3, [r7, #2]
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	89fb      	ldrh	r3, [r7, #14]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	89fa      	ldrh	r2, [r7, #14]
 80033de:	841a      	strh	r2, [r3, #32]
}
 80033e0:	3714      	adds	r7, #20
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop

080033ec <TIM_OC2NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	460b      	mov	r3, r1
 80033f6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 80033f8:	2300      	movs	r3, #0
 80033fa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	8c1b      	ldrh	r3, [r3, #32]
 8003400:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8003402:	89fb      	ldrh	r3, [r7, #14]
 8003404:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003408:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 800340a:	887b      	ldrh	r3, [r7, #2]
 800340c:	011b      	lsls	r3, r3, #4
 800340e:	b29a      	uxth	r2, r3
 8003410:	89fb      	ldrh	r3, [r7, #14]
 8003412:	4313      	orrs	r3, r2
 8003414:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	89fa      	ldrh	r2, [r7, #14]
 800341a:	841a      	strh	r2, [r3, #32]
}
 800341c:	3714      	adds	r7, #20
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop

08003428 <TIM_OC3PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	460b      	mov	r3, r1
 8003432:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8003434:	2300      	movs	r3, #0
 8003436:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	8c1b      	ldrh	r3, [r3, #32]
 800343c:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 800343e:	89fb      	ldrh	r3, [r7, #14]
 8003440:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003444:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 8003446:	887b      	ldrh	r3, [r7, #2]
 8003448:	021b      	lsls	r3, r3, #8
 800344a:	b29a      	uxth	r2, r3
 800344c:	89fb      	ldrh	r3, [r7, #14]
 800344e:	4313      	orrs	r3, r2
 8003450:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	89fa      	ldrh	r2, [r7, #14]
 8003456:	841a      	strh	r2, [r3, #32]
}
 8003458:	3714      	adds	r7, #20
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop

08003464 <TIM_OC3NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	460b      	mov	r3, r1
 800346e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8003470:	2300      	movs	r3, #0
 8003472:	81fb      	strh	r3, [r7, #14]
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	8c1b      	ldrh	r3, [r3, #32]
 8003478:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 800347a:	89fb      	ldrh	r3, [r7, #14]
 800347c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003480:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 8003482:	887b      	ldrh	r3, [r7, #2]
 8003484:	021b      	lsls	r3, r3, #8
 8003486:	b29a      	uxth	r2, r3
 8003488:	89fb      	ldrh	r3, [r7, #14]
 800348a:	4313      	orrs	r3, r2
 800348c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	89fa      	ldrh	r2, [r7, #14]
 8003492:	841a      	strh	r2, [r3, #32]
}
 8003494:	3714      	adds	r7, #20
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop

080034a0 <TIM_OC4PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	460b      	mov	r3, r1
 80034aa:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 80034ac:	2300      	movs	r3, #0
 80034ae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	8c1b      	ldrh	r3, [r3, #32]
 80034b4:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 80034b6:	89fb      	ldrh	r3, [r7, #14]
 80034b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034bc:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 80034be:	887b      	ldrh	r3, [r7, #2]
 80034c0:	031b      	lsls	r3, r3, #12
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	89fb      	ldrh	r3, [r7, #14]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	89fa      	ldrh	r2, [r7, #14]
 80034ce:	841a      	strh	r2, [r3, #32]
}
 80034d0:	3714      	adds	r7, #20
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop

080034dc <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	4613      	mov	r3, r2
 80034e6:	460a      	mov	r2, r1
 80034e8:	807a      	strh	r2, [r7, #2]
 80034ea:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 80034ec:	2300      	movs	r3, #0
 80034ee:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 80034f0:	887b      	ldrh	r3, [r7, #2]
 80034f2:	2201      	movs	r2, #1
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	8c1b      	ldrh	r3, [r3, #32]
 80034fe:	b29a      	uxth	r2, r3
 8003500:	89fb      	ldrh	r3, [r7, #14]
 8003502:	43db      	mvns	r3, r3
 8003504:	b29b      	uxth	r3, r3
 8003506:	4013      	ands	r3, r2
 8003508:	b29a      	uxth	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	8c1b      	ldrh	r3, [r3, #32]
 8003512:	b29a      	uxth	r2, r3
 8003514:	8839      	ldrh	r1, [r7, #0]
 8003516:	887b      	ldrh	r3, [r7, #2]
 8003518:	fa01 f303 	lsl.w	r3, r1, r3
 800351c:	b29b      	uxth	r3, r3
 800351e:	4313      	orrs	r3, r2
 8003520:	b29a      	uxth	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	841a      	strh	r2, [r3, #32]
}
 8003526:	3714      	adds	r7, #20
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	4613      	mov	r3, r2
 800353a:	460a      	mov	r2, r1
 800353c:	807a      	strh	r2, [r7, #2]
 800353e:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 8003540:	2300      	movs	r3, #0
 8003542:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 8003544:	887b      	ldrh	r3, [r7, #2]
 8003546:	2204      	movs	r2, #4
 8003548:	fa02 f303 	lsl.w	r3, r2, r3
 800354c:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	8c1b      	ldrh	r3, [r3, #32]
 8003552:	b29a      	uxth	r2, r3
 8003554:	89fb      	ldrh	r3, [r7, #14]
 8003556:	43db      	mvns	r3, r3
 8003558:	b29b      	uxth	r3, r3
 800355a:	4013      	ands	r3, r2
 800355c:	b29a      	uxth	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	8c1b      	ldrh	r3, [r3, #32]
 8003566:	b29a      	uxth	r2, r3
 8003568:	8839      	ldrh	r1, [r7, #0]
 800356a:	887b      	ldrh	r3, [r7, #2]
 800356c:	fa01 f303 	lsl.w	r3, r1, r3
 8003570:	b29b      	uxth	r3, r3
 8003572:	4313      	orrs	r3, r2
 8003574:	b29a      	uxth	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	841a      	strh	r2, [r3, #32]
}
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	881b      	ldrh	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10f      	bne.n	80035b6 <TIM_ICInit+0x32>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	8859      	ldrh	r1, [r3, #2]
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	889a      	ldrh	r2, [r3, #4]
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	891b      	ldrh	r3, [r3, #8]
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 fc92 	bl	8003ecc <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	88db      	ldrh	r3, [r3, #6]
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	4619      	mov	r1, r3
 80035b0:	f000 f8e0 	bl	8003774 <TIM_SetIC1Prescaler>
 80035b4:	e036      	b.n	8003624 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	881b      	ldrh	r3, [r3, #0]
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	d10f      	bne.n	80035de <TIM_ICInit+0x5a>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	8859      	ldrh	r1, [r3, #2]
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	889a      	ldrh	r2, [r3, #4]
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	891b      	ldrh	r3, [r3, #8]
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 fcba 	bl	8003f44 <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	88db      	ldrh	r3, [r3, #6]
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	4619      	mov	r1, r3
 80035d8:	f000 f8e8 	bl	80037ac <TIM_SetIC2Prescaler>
 80035dc:	e022      	b.n	8003624 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	881b      	ldrh	r3, [r3, #0]
 80035e2:	2b08      	cmp	r3, #8
 80035e4:	d10f      	bne.n	8003606 <TIM_ICInit+0x82>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	8859      	ldrh	r1, [r3, #2]
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	889a      	ldrh	r2, [r3, #4]
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	891b      	ldrh	r3, [r3, #8]
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 fcec 	bl	8003fd0 <TI3_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	88db      	ldrh	r3, [r3, #6]
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	4619      	mov	r1, r3
 8003600:	f000 f8f2 	bl	80037e8 <TIM_SetIC3Prescaler>
 8003604:	e00e      	b.n	8003624 <TIM_ICInit+0xa0>
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	8859      	ldrh	r1, [r3, #2]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	889a      	ldrh	r2, [r3, #4]
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	891b      	ldrh	r3, [r3, #8]
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 fd1e 	bl	8004054 <TI4_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	88db      	ldrh	r3, [r3, #6]
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	4619      	mov	r1, r3
 8003620:	f000 f8fe 	bl	8003820 <TIM_SetIC4Prescaler>
  }
}
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop

0800362c <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	811a      	strh	r2, [r3, #8]
}
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
 8003666:	2300      	movs	r3, #0
 8003668:	81fb      	strh	r3, [r7, #14]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
 800366a:	2301      	movs	r3, #1
 800366c:	81bb      	strh	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	885b      	ldrh	r3, [r3, #2]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d102      	bne.n	800367c <TIM_PWMIConfig+0x20>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 8003676:	2302      	movs	r3, #2
 8003678:	81fb      	strh	r3, [r7, #14]
 800367a:	e001      	b.n	8003680 <TIM_PWMIConfig+0x24>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 800367c:	2300      	movs	r3, #0
 800367e:	81fb      	strh	r3, [r7, #14]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	889b      	ldrh	r3, [r3, #4]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d102      	bne.n	800368e <TIM_PWMIConfig+0x32>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 8003688:	2302      	movs	r3, #2
 800368a:	81bb      	strh	r3, [r7, #12]
 800368c:	e001      	b.n	8003692 <TIM_PWMIConfig+0x36>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 800368e:	2301      	movs	r3, #1
 8003690:	81bb      	strh	r3, [r7, #12]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	881b      	ldrh	r3, [r3, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d11c      	bne.n	80036d4 <TIM_PWMIConfig+0x78>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	8859      	ldrh	r1, [r3, #2]
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	889a      	ldrh	r2, [r3, #4]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	891b      	ldrh	r3, [r3, #8]
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 fc10 	bl	8003ecc <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	88db      	ldrh	r3, [r3, #6]
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	4619      	mov	r1, r3
 80036b4:	f000 f85e 	bl	8003774 <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	891b      	ldrh	r3, [r3, #8]
 80036bc:	89f9      	ldrh	r1, [r7, #14]
 80036be:	89ba      	ldrh	r2, [r7, #12]
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 fc3f 	bl	8003f44 <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	88db      	ldrh	r3, [r3, #6]
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	4619      	mov	r1, r3
 80036ce:	f000 f86d 	bl	80037ac <TIM_SetIC2Prescaler>
 80036d2:	e01b      	b.n	800370c <TIM_PWMIConfig+0xb0>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	8859      	ldrh	r1, [r3, #2]
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	889a      	ldrh	r2, [r3, #4]
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	891b      	ldrh	r3, [r3, #8]
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 fc2f 	bl	8003f44 <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	88db      	ldrh	r3, [r3, #6]
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	4619      	mov	r1, r3
 80036ee:	f000 f85d 	bl	80037ac <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	891b      	ldrh	r3, [r3, #8]
 80036f6:	89f9      	ldrh	r1, [r7, #14]
 80036f8:	89ba      	ldrh	r2, [r7, #12]
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 fbe6 	bl	8003ecc <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	88db      	ldrh	r3, [r3, #6]
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	4619      	mov	r1, r3
 8003708:	f000 f834 	bl	8003774 <TIM_SetIC1Prescaler>
  }
}
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop

08003714 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8003720:	4618      	mov	r0, r3
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <TIM_GetCapture2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint32_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8003738:	4618      	mov	r0, r3
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8003750:	4618      	mov	r0, r3
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003768:	4618      	mov	r0, r3
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <TIM_SetIC1Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	460b      	mov	r3, r1
 800377e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	8b1b      	ldrh	r3, [r3, #24]
 8003784:	b29b      	uxth	r3, r3
 8003786:	f023 030c 	bic.w	r3, r3, #12
 800378a:	b29a      	uxth	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	831a      	strh	r2, [r3, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	8b1b      	ldrh	r3, [r3, #24]
 8003794:	b29a      	uxth	r2, r3
 8003796:	887b      	ldrh	r3, [r7, #2]
 8003798:	4313      	orrs	r3, r2
 800379a:	b29a      	uxth	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	831a      	strh	r2, [r3, #24]
}
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop

080037ac <TIM_SetIC2Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	460b      	mov	r3, r1
 80037b6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	8b1b      	ldrh	r3, [r3, #24]
 80037bc:	b29b      	uxth	r3, r3
 80037be:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	831a      	strh	r2, [r3, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	8b1b      	ldrh	r3, [r3, #24]
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	887b      	ldrh	r3, [r7, #2]
 80037d0:	021b      	lsls	r3, r3, #8
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	4313      	orrs	r3, r2
 80037d6:	b29a      	uxth	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	831a      	strh	r2, [r3, #24]
}
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop

080037e8 <TIM_SetIC3Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	460b      	mov	r3, r1
 80037f2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	8b9b      	ldrh	r3, [r3, #28]
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	f023 030c 	bic.w	r3, r3, #12
 80037fe:	b29a      	uxth	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	839a      	strh	r2, [r3, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	8b9b      	ldrh	r3, [r3, #28]
 8003808:	b29a      	uxth	r2, r3
 800380a:	887b      	ldrh	r3, [r7, #2]
 800380c:	4313      	orrs	r3, r2
 800380e:	b29a      	uxth	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	839a      	strh	r2, [r3, #28]
}
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop

08003820 <TIM_SetIC4Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	460b      	mov	r3, r1
 800382a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	8b9b      	ldrh	r3, [r3, #28]
 8003830:	b29b      	uxth	r3, r3
 8003832:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003836:	b29a      	uxth	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	839a      	strh	r2, [r3, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	8b9b      	ldrh	r3, [r3, #28]
 8003840:	b29a      	uxth	r2, r3
 8003842:	887b      	ldrh	r3, [r7, #2]
 8003844:	021b      	lsls	r3, r3, #8
 8003846:	b29b      	uxth	r3, r3
 8003848:	4313      	orrs	r3, r2
 800384a:	b29a      	uxth	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	839a      	strh	r2, [r3, #28]
}
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop

0800385c <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	881a      	ldrh	r2, [r3, #0]
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	885b      	ldrh	r3, [r3, #2]
 800386e:	4313      	orrs	r3, r2
 8003870:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	889b      	ldrh	r3, [r3, #4]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8003876:	4313      	orrs	r3, r2
 8003878:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	88db      	ldrh	r3, [r3, #6]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800387e:	4313      	orrs	r3, r2
 8003880:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	891b      	ldrh	r3, [r3, #8]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8003886:	4313      	orrs	r3, r2
 8003888:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	895b      	ldrh	r3, [r3, #10]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800388e:	4313      	orrs	r3, r2
 8003890:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	899b      	ldrh	r3, [r3, #12]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8003896:	4313      	orrs	r3, r2
 8003898:	b29a      	uxth	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop

080038ac <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	801a      	strh	r2, [r3, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	805a      	strh	r2, [r3, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	809a      	strh	r2, [r3, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	80da      	strh	r2, [r3, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	811a      	strh	r2, [r3, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	815a      	strh	r2, [r3, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	819a      	strh	r2, [r3, #12]
}
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	460b      	mov	r3, r1
 80038f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80038f4:	78fb      	ldrb	r3, [r7, #3]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00c      	beq.n	8003914 <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003900:	b29b      	uxth	r3, r3
 8003902:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003906:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800390a:	b29a      	uxth	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8003912:	e009      	b.n	8003928 <TIM_CtrlPWMOutputs+0x40>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800391a:	b29b      	uxth	r3, r3
 800391c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003920:	b29a      	uxth	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }  
}
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop

08003934 <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	460b      	mov	r3, r1
 800393e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003940:	78fb      	ldrb	r3, [r7, #3]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d008      	beq.n	8003958 <TIM_SelectCOM+0x24>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	889b      	ldrh	r3, [r3, #4]
 800394a:	b29b      	uxth	r3, r3
 800394c:	f043 0304 	orr.w	r3, r3, #4
 8003950:	b29a      	uxth	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	809a      	strh	r2, [r3, #4]
 8003956:	e007      	b.n	8003968 <TIM_SelectCOM+0x34>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	889b      	ldrh	r3, [r3, #4]
 800395c:	b29b      	uxth	r3, r3
 800395e:	f023 0304 	bic.w	r3, r3, #4
 8003962:	b29a      	uxth	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	809a      	strh	r2, [r3, #4]
  }
}
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop

08003974 <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	460b      	mov	r3, r1
 800397e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003980:	78fb      	ldrb	r3, [r7, #3]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d008      	beq.n	8003998 <TIM_CCPreloadControl+0x24>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	889b      	ldrh	r3, [r3, #4]
 800398a:	b29b      	uxth	r3, r3
 800398c:	f043 0301 	orr.w	r3, r3, #1
 8003990:	b29a      	uxth	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	809a      	strh	r2, [r3, #4]
 8003996:	e007      	b.n	80039a8 <TIM_CCPreloadControl+0x34>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	889b      	ldrh	r3, [r3, #4]
 800399c:	b29b      	uxth	r3, r3
 800399e:	f023 0301 	bic.w	r3, r3, #1
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	809a      	strh	r2, [r3, #4]
  }
}
 80039a8:	370c      	adds	r7, #12
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop

080039b4 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	4613      	mov	r3, r2
 80039be:	460a      	mov	r2, r1
 80039c0:	807a      	strh	r2, [r7, #2]
 80039c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80039c4:	787b      	ldrb	r3, [r7, #1]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d008      	beq.n	80039dc <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	899b      	ldrh	r3, [r3, #12]
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	887b      	ldrh	r3, [r7, #2]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	819a      	strh	r2, [r3, #12]
 80039da:	e009      	b.n	80039f0 <TIM_ITConfig+0x3c>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	899b      	ldrh	r3, [r3, #12]
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	887b      	ldrh	r3, [r7, #2]
 80039e4:	43db      	mvns	r3, r3
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	4013      	ands	r3, r2
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	819a      	strh	r2, [r3, #12]
  }
}
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop

080039fc <TIM_GenerateEvent>:
  * @note   TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.
  *        
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	460b      	mov	r3, r1
 8003a06:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	887a      	ldrh	r2, [r7, #2]
 8003a0c:	829a      	strh	r2, [r3, #20]
}
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <TIM_GetFlagStatus>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.    
  *
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	460b      	mov	r3, r1
 8003a22:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8003a24:	2300      	movs	r3, #0
 8003a26:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	8a1b      	ldrh	r3, [r3, #16]
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	887b      	ldrh	r3, [r7, #2]
 8003a30:	4013      	ands	r3, r2
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d002      	beq.n	8003a3e <TIM_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	73fb      	strb	r3, [r7, #15]
 8003a3c:	e001      	b.n	8003a42 <TIM_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3714      	adds	r7, #20
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <TIM_ClearFlag>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.
  *    
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	460b      	mov	r3, r1
 8003a5a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 8003a5c:	887b      	ldrh	r3, [r7, #2]
 8003a5e:	43db      	mvns	r3, r3
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	821a      	strh	r2, [r3, #16]
}
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	460b      	mov	r3, r1
 8003a7a:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8003a80:	2300      	movs	r3, #0
 8003a82:	81bb      	strh	r3, [r7, #12]
 8003a84:	2300      	movs	r3, #0
 8003a86:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	8a1b      	ldrh	r3, [r3, #16]
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	887b      	ldrh	r3, [r7, #2]
 8003a90:	4013      	ands	r3, r2
 8003a92:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	899b      	ldrh	r3, [r3, #12]
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	887b      	ldrh	r3, [r7, #2]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8003aa0:	89bb      	ldrh	r3, [r7, #12]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d005      	beq.n	8003ab2 <TIM_GetITStatus+0x42>
 8003aa6:	897b      	ldrh	r3, [r7, #10]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d002      	beq.n	8003ab2 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8003aac:	2301      	movs	r3, #1
 8003aae:	73fb      	strb	r3, [r7, #15]
 8003ab0:	e001      	b.n	8003ab6 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3714      	adds	r7, #20
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	460b      	mov	r3, r1
 8003ace:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8003ad0:	887b      	ldrh	r3, [r7, #2]
 8003ad2:	43db      	mvns	r3, r3
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	821a      	strh	r2, [r3, #16]
}
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <TIM_DMAConfig>:
  * @param  TIM_DMABurstLength: DMA Burst length. This parameter can be one value
  *         between: TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	4613      	mov	r3, r2
 8003aee:	460a      	mov	r2, r1
 8003af0:	807a      	strh	r2, [r7, #2]
 8003af2:	803b      	strh	r3, [r7, #0]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 8003af4:	887a      	ldrh	r2, [r7, #2]
 8003af6:	883b      	ldrh	r3, [r7, #0]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	4613      	mov	r3, r2
 8003b16:	460a      	mov	r2, r1
 8003b18:	807a      	strh	r2, [r7, #2]
 8003b1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003b1c:	787b      	ldrb	r3, [r7, #1]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d008      	beq.n	8003b34 <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	899b      	ldrh	r3, [r3, #12]
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	887b      	ldrh	r3, [r7, #2]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	819a      	strh	r2, [r3, #12]
 8003b32:	e009      	b.n	8003b48 <TIM_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	899b      	ldrh	r3, [r3, #12]
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	887b      	ldrh	r3, [r7, #2]
 8003b3c:	43db      	mvns	r3, r3
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	4013      	ands	r3, r2
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	819a      	strh	r2, [r3, #12]
  }
}
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop

08003b54 <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003b60:	78fb      	ldrb	r3, [r7, #3]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d008      	beq.n	8003b78 <TIM_SelectCCDMA+0x24>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	889b      	ldrh	r3, [r3, #4]
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	f043 0308 	orr.w	r3, r3, #8
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	809a      	strh	r2, [r3, #4]
 8003b76:	e007      	b.n	8003b88 <TIM_SelectCCDMA+0x34>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	889b      	ldrh	r3, [r3, #4]
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	f023 0308 	bic.w	r3, r3, #8
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	809a      	strh	r2, [r3, #4]
  }
}
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop

08003b94 <TIM_InternalClockConfig>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	891b      	ldrh	r3, [r3, #8]
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	f023 0307 	bic.w	r3, r3, #7
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	811a      	strh	r2, [r3, #8]
}
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop

08003bb8 <TIM_ITRxExternalClockConfig>:
  *            @arg TIM_TS_ITR2: Internal Trigger 2
  *            @arg TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
 8003bc4:	887b      	ldrh	r3, [r7, #2]
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	4619      	mov	r1, r3
 8003bca:	f000 f875 	bl	8003cb8 <TIM_SelectInputTrigger>

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	891b      	ldrh	r3, [r3, #8]
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	f043 0307 	orr.w	r3, r3, #7
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	811a      	strh	r2, [r3, #8]
}
 8003bde:	3708      	adds	r7, #8
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <TIM_TIxExternalClockConfig>:
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	8179      	strh	r1, [r7, #10]
 8003bee:	813a      	strh	r2, [r7, #8]
 8003bf0:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 8003bf2:	897b      	ldrh	r3, [r7, #10]
 8003bf4:	2b60      	cmp	r3, #96	; 0x60
 8003bf6:	d107      	bne.n	8003c08 <TIM_TIxExternalClockConfig+0x24>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8003bf8:	893a      	ldrh	r2, [r7, #8]
 8003bfa:	88fb      	ldrh	r3, [r7, #6]
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	4611      	mov	r1, r2
 8003c00:	2201      	movs	r2, #1
 8003c02:	f000 f99f 	bl	8003f44 <TI2_Config>
 8003c06:	e006      	b.n	8003c16 <TIM_TIxExternalClockConfig+0x32>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8003c08:	893a      	ldrh	r2, [r7, #8]
 8003c0a:	88fb      	ldrh	r3, [r7, #6]
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	4611      	mov	r1, r2
 8003c10:	2201      	movs	r2, #1
 8003c12:	f000 f95b 	bl	8003ecc <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
 8003c16:	897b      	ldrh	r3, [r7, #10]
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	f000 f84c 	bl	8003cb8 <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	891b      	ldrh	r3, [r3, #8]
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	f043 0307 	orr.w	r3, r3, #7
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	811a      	strh	r2, [r3, #8]
}
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop

08003c38 <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	8179      	strh	r1, [r7, #10]
 8003c42:	813a      	strh	r2, [r7, #8]
 8003c44:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 8003c46:	2300      	movs	r3, #0
 8003c48:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8003c4a:	8979      	ldrh	r1, [r7, #10]
 8003c4c:	893a      	ldrh	r2, [r7, #8]
 8003c4e:	88fb      	ldrh	r3, [r7, #6]
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f000 f8a1 	bl	8003d98 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	891b      	ldrh	r3, [r3, #8]
 8003c5a:	82fb      	strh	r3, [r7, #22]

  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8003c5c:	8afb      	ldrh	r3, [r7, #22]
 8003c5e:	f023 0307 	bic.w	r3, r3, #7
 8003c62:	82fb      	strh	r3, [r7, #22]

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 8003c64:	8afb      	ldrh	r3, [r7, #22]
 8003c66:	f043 0307 	orr.w	r3, r3, #7
 8003c6a:	82fb      	strh	r3, [r7, #22]

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8003c6c:	8afb      	ldrh	r3, [r7, #22]
 8003c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c72:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_TS_ETRF;
 8003c74:	8afb      	ldrh	r3, [r7, #22]
 8003c76:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003c7a:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8afa      	ldrh	r2, [r7, #22]
 8003c80:	811a      	strh	r2, [r3, #8]
}
 8003c82:	3718      	adds	r7, #24
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	8179      	strh	r1, [r7, #10]
 8003c92:	813a      	strh	r2, [r7, #8]
 8003c94:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8003c96:	8979      	ldrh	r1, [r7, #10]
 8003c98:	893a      	ldrh	r2, [r7, #8]
 8003c9a:	88fb      	ldrh	r3, [r7, #6]
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	f000 f87b 	bl	8003d98 <TIM_ETRConfig>

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	891b      	ldrh	r3, [r3, #8]
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	811a      	strh	r2, [r3, #8]
}
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <TIM_SelectInputTrigger>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	891b      	ldrh	r3, [r3, #8]
 8003ccc:	81fb      	strh	r3, [r7, #14]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8003cce:	89fb      	ldrh	r3, [r7, #14]
 8003cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd4:	81fb      	strh	r3, [r7, #14]

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8003cd6:	89fa      	ldrh	r2, [r7, #14]
 8003cd8:	887b      	ldrh	r3, [r7, #2]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	89fa      	ldrh	r2, [r7, #14]
 8003ce2:	811a      	strh	r2, [r3, #8]
}
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop

08003cf0 <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	889b      	ldrh	r3, [r3, #4]
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	889b      	ldrh	r3, [r3, #4]
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	887b      	ldrh	r3, [r7, #2]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	809a      	strh	r2, [r3, #4]
}
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop

08003d28 <TIM_SelectSlaveMode>:
  *            @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI
  *            @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	460b      	mov	r3, r1
 8003d32:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	891b      	ldrh	r3, [r3, #8]
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	f023 0307 	bic.w	r3, r3, #7
 8003d3e:	b29a      	uxth	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	811a      	strh	r2, [r3, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	891b      	ldrh	r3, [r3, #8]
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	887b      	ldrh	r3, [r7, #2]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	811a      	strh	r2, [r3, #8]
}
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop

08003d60 <TIM_SelectMasterSlaveMode>:
  *                                             and its slaves (through TRGO)
  *            @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	460b      	mov	r3, r1
 8003d6a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	891b      	ldrh	r3, [r3, #8]
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	811a      	strh	r2, [r3, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	891b      	ldrh	r3, [r3, #8]
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	887b      	ldrh	r3, [r7, #2]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	811a      	strh	r2, [r3, #8]
}
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop

08003d98 <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b087      	sub	sp, #28
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	8179      	strh	r1, [r7, #10]
 8003da2:	813a      	strh	r2, [r7, #8]
 8003da4:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 8003da6:	2300      	movs	r3, #0
 8003da8:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	891b      	ldrh	r3, [r3, #8]
 8003dae:	82fb      	strh	r3, [r7, #22]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 8003db0:	8afb      	ldrh	r3, [r7, #22]
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	82fb      	strh	r3, [r7, #22]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8003db6:	88fb      	ldrh	r3, [r7, #6]
 8003db8:	021b      	lsls	r3, r3, #8
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	893b      	ldrh	r3, [r7, #8]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	897b      	ldrh	r3, [r7, #10]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	8afb      	ldrh	r3, [r7, #22]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	8afa      	ldrh	r2, [r7, #22]
 8003dd2:	811a      	strh	r2, [r3, #8]
}
 8003dd4:	371c      	adds	r7, #28
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop

08003de0 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b087      	sub	sp, #28
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	8179      	strh	r1, [r7, #10]
 8003dea:	813a      	strh	r2, [r7, #8]
 8003dec:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 8003dee:	2300      	movs	r3, #0
 8003df0:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
 8003df2:	2300      	movs	r3, #0
 8003df4:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
 8003df6:	2300      	movs	r3, #0
 8003df8:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	891b      	ldrh	r3, [r3, #8]
 8003dfe:	82fb      	strh	r3, [r7, #22]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	8b1b      	ldrh	r3, [r3, #24]
 8003e04:	82bb      	strh	r3, [r7, #20]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8c1b      	ldrh	r3, [r3, #32]
 8003e0a:	827b      	strh	r3, [r7, #18]

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8003e0c:	8afb      	ldrh	r3, [r7, #22]
 8003e0e:	f023 0307 	bic.w	r3, r3, #7
 8003e12:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
 8003e14:	8afa      	ldrh	r2, [r7, #22]
 8003e16:	897b      	ldrh	r3, [r7, #10]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	82fb      	strh	r3, [r7, #22]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8003e1c:	8abb      	ldrh	r3, [r7, #20]
 8003e1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e22:	f023 0303 	bic.w	r3, r3, #3
 8003e26:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8003e28:	8abb      	ldrh	r3, [r7, #20]
 8003e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e2e:	f043 0301 	orr.w	r3, r3, #1
 8003e32:	82bb      	strh	r3, [r7, #20]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 8003e34:	8a7b      	ldrh	r3, [r7, #18]
 8003e36:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003e3a:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8003e3c:	88fb      	ldrh	r3, [r7, #6]
 8003e3e:	011b      	lsls	r3, r3, #4
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	893b      	ldrh	r3, [r7, #8]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	8a7b      	ldrh	r3, [r7, #18]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	827b      	strh	r3, [r7, #18]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8afa      	ldrh	r2, [r7, #22]
 8003e52:	811a      	strh	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8aba      	ldrh	r2, [r7, #20]
 8003e58:	831a      	strh	r2, [r3, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	8a7a      	ldrh	r2, [r7, #18]
 8003e5e:	841a      	strh	r2, [r3, #32]
}
 8003e60:	371c      	adds	r7, #28
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop

08003e6c <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	460b      	mov	r3, r1
 8003e76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003e78:	78fb      	ldrb	r3, [r7, #3]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d008      	beq.n	8003e90 <TIM_SelectHallSensor+0x24>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	889b      	ldrh	r3, [r3, #4]
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	809a      	strh	r2, [r3, #4]
 8003e8e:	e007      	b.n	8003ea0 <TIM_SelectHallSensor+0x34>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	889b      	ldrh	r3, [r3, #4]
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	809a      	strh	r2, [r3, #4]
  }
}
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop

08003eac <TIM_RemapConfig>:
  *            @arg TIM11_HSE:      TIM11 CH4 input is connected to HSE_RTC clock
  *                                 (HSE divided by a programmable prescaler)  
  * @retval None
  */
void TIM_RemapConfig(TIM_TypeDef* TIMx, uint16_t TIM_Remap)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	807b      	strh	r3, [r7, #2]
 /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	887a      	ldrh	r2, [r7, #2]
 8003ebc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop

08003ecc <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b087      	sub	sp, #28
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	8179      	strh	r1, [r7, #10]
 8003ed6:	813a      	strh	r2, [r7, #8]
 8003ed8:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 8003eda:	2300      	movs	r3, #0
 8003edc:	82fb      	strh	r3, [r7, #22]
 8003ede:	2300      	movs	r3, #0
 8003ee0:	82bb      	strh	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8c1b      	ldrh	r3, [r3, #32]
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	f023 0301 	bic.w	r3, r3, #1
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8b1b      	ldrh	r3, [r3, #24]
 8003ef6:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8c1b      	ldrh	r3, [r3, #32]
 8003efc:	82bb      	strh	r3, [r7, #20]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8003efe:	8afb      	ldrh	r3, [r7, #22]
 8003f00:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8003f04:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8003f06:	88fb      	ldrh	r3, [r7, #6]
 8003f08:	011b      	lsls	r3, r3, #4
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	893b      	ldrh	r3, [r7, #8]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	8afb      	ldrh	r3, [r7, #22]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f18:	8abb      	ldrh	r3, [r7, #20]
 8003f1a:	f023 030a 	bic.w	r3, r3, #10
 8003f1e:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8003f20:	897a      	ldrh	r2, [r7, #10]
 8003f22:	8abb      	ldrh	r3, [r7, #20]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	f043 0301 	orr.w	r3, r3, #1
 8003f2c:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8afa      	ldrh	r2, [r7, #22]
 8003f32:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8aba      	ldrh	r2, [r7, #20]
 8003f38:	841a      	strh	r2, [r3, #32]
}
 8003f3a:	371c      	adds	r7, #28
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b087      	sub	sp, #28
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	8179      	strh	r1, [r7, #10]
 8003f4e:	813a      	strh	r2, [r7, #8]
 8003f50:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 8003f52:	2300      	movs	r3, #0
 8003f54:	82fb      	strh	r3, [r7, #22]
 8003f56:	2300      	movs	r3, #0
 8003f58:	82bb      	strh	r3, [r7, #20]
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8c1b      	ldrh	r3, [r3, #32]
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	f023 0310 	bic.w	r3, r3, #16
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8b1b      	ldrh	r3, [r3, #24]
 8003f72:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	8c1b      	ldrh	r3, [r3, #32]
 8003f78:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8003f7a:	897b      	ldrh	r3, [r7, #10]
 8003f7c:	011b      	lsls	r3, r3, #4
 8003f7e:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8003f80:	8afb      	ldrh	r3, [r7, #22]
 8003f82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f86:	051b      	lsls	r3, r3, #20
 8003f88:	0d1b      	lsrs	r3, r3, #20
 8003f8a:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8003f8c:	88fb      	ldrh	r3, [r7, #6]
 8003f8e:	031b      	lsls	r3, r3, #12
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	8afb      	ldrh	r3, [r7, #22]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8003f98:	893b      	ldrh	r3, [r7, #8]
 8003f9a:	021b      	lsls	r3, r3, #8
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	8afb      	ldrh	r3, [r7, #22]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fa4:	8abb      	ldrh	r3, [r7, #20]
 8003fa6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003faa:	82bb      	strh	r3, [r7, #20]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8003fac:	8a7a      	ldrh	r2, [r7, #18]
 8003fae:	8abb      	ldrh	r3, [r7, #20]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	f043 0310 	orr.w	r3, r3, #16
 8003fb8:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8afa      	ldrh	r2, [r7, #22]
 8003fbe:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8aba      	ldrh	r2, [r7, #20]
 8003fc4:	841a      	strh	r2, [r3, #32]
}
 8003fc6:	371c      	adds	r7, #28
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <TI3_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b087      	sub	sp, #28
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	8179      	strh	r1, [r7, #10]
 8003fda:	813a      	strh	r2, [r7, #8]
 8003fdc:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	82fb      	strh	r3, [r7, #22]
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	82bb      	strh	r3, [r7, #20]
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	8c1b      	ldrh	r3, [r3, #32]
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	8b9b      	ldrh	r3, [r3, #28]
 8003ffe:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	8c1b      	ldrh	r3, [r3, #32]
 8004004:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 8004006:	897b      	ldrh	r3, [r7, #10]
 8004008:	021b      	lsls	r3, r3, #8
 800400a:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 800400c:	8afb      	ldrh	r3, [r7, #22]
 800400e:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8004012:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8004014:	88fb      	ldrh	r3, [r7, #6]
 8004016:	011b      	lsls	r3, r3, #4
 8004018:	b29a      	uxth	r2, r3
 800401a:	893b      	ldrh	r3, [r7, #8]
 800401c:	4313      	orrs	r3, r2
 800401e:	b29a      	uxth	r2, r3
 8004020:	8afb      	ldrh	r3, [r7, #22]
 8004022:	4313      	orrs	r3, r2
 8004024:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004026:	8abb      	ldrh	r3, [r7, #20]
 8004028:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800402c:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 800402e:	8a7a      	ldrh	r2, [r7, #18]
 8004030:	8abb      	ldrh	r3, [r7, #20]
 8004032:	4313      	orrs	r3, r2
 8004034:	b29b      	uxth	r3, r3
 8004036:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800403a:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	8afa      	ldrh	r2, [r7, #22]
 8004040:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	8aba      	ldrh	r2, [r7, #20]
 8004046:	841a      	strh	r2, [r3, #32]
}
 8004048:	371c      	adds	r7, #28
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop

08004054 <TI4_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8004054:	b480      	push	{r7}
 8004056:	b087      	sub	sp, #28
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	8179      	strh	r1, [r7, #10]
 800405e:	813a      	strh	r2, [r7, #8]
 8004060:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8004062:	2300      	movs	r3, #0
 8004064:	82fb      	strh	r3, [r7, #22]
 8004066:	2300      	movs	r3, #0
 8004068:	82bb      	strh	r3, [r7, #20]
 800406a:	2300      	movs	r3, #0
 800406c:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	8c1b      	ldrh	r3, [r3, #32]
 8004072:	b29b      	uxth	r3, r3
 8004074:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004078:	b29a      	uxth	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8b9b      	ldrh	r3, [r3, #28]
 8004082:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8c1b      	ldrh	r3, [r3, #32]
 8004088:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 800408a:	897b      	ldrh	r3, [r7, #10]
 800408c:	031b      	lsls	r3, r3, #12
 800408e:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8004090:	8afb      	ldrh	r3, [r7, #22]
 8004092:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004096:	051b      	lsls	r3, r3, #20
 8004098:	0d1b      	lsrs	r3, r3, #20
 800409a:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 800409c:	893b      	ldrh	r3, [r7, #8]
 800409e:	021b      	lsls	r3, r3, #8
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	8afb      	ldrh	r3, [r7, #22]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 80040a8:	88fb      	ldrh	r3, [r7, #6]
 80040aa:	031b      	lsls	r3, r3, #12
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	8afb      	ldrh	r3, [r7, #22]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80040b4:	8abb      	ldrh	r3, [r7, #20]
 80040b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040ba:	045b      	lsls	r3, r3, #17
 80040bc:	0c5b      	lsrs	r3, r3, #17
 80040be:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 80040c0:	8a7a      	ldrh	r2, [r7, #18]
 80040c2:	8abb      	ldrh	r3, [r7, #20]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80040cc:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	8afa      	ldrh	r2, [r7, #22]
 80040d2:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8aba      	ldrh	r2, [r7, #20]
 80040d8:	841a      	strh	r2, [r3, #32]
}
 80040da:	371c      	adds	r7, #28
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <SYSCFG_DeInit>:
  *   registers to their default reset values.
  * @param  None
  * @retval None
  */
void SYSCFG_DeInit(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	af00      	add	r7, sp, #0
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80040e8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80040ec:	2101      	movs	r1, #1
 80040ee:	f000 fc93 	bl	8004a18 <RCC_APB2PeriphResetCmd>
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 80040f2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80040f6:	2100      	movs	r1, #0
 80040f8:	f000 fc8e 	bl	8004a18 <RCC_APB2PeriphResetCmd>
}
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop

08004100 <SYSCFG_MemoryRemapConfig>:
  *            @arg SYSCFG_MemoryRemap_FSMC:        FSMC (Bank1 (NOR/PSRAM 1 and 2) mapped at 0x00000000   
  *            @arg SYSCFG_MemoryRemap_SRAM:        Embedded SRAM (112kB) mapped at 0x00000000          
  * @retval None
  */
void SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	4603      	mov	r3, r0
 8004108:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap));

  SYSCFG->MEMRMP = SYSCFG_MemoryRemap;
 800410a:	4b04      	ldr	r3, [pc, #16]	; (800411c <SYSCFG_MemoryRemapConfig+0x1c>)
 800410c:	79fa      	ldrb	r2, [r7, #7]
 800410e:	601a      	str	r2, [r3, #0]
}
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	40013800 	.word	0x40013800

08004120 <SYSCFG_EXTILineConfig>:
  *           and STM32F427x/STM32F437x devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8004120:	b490      	push	{r4, r7}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	4602      	mov	r2, r0
 8004128:	460b      	mov	r3, r1
 800412a:	71fa      	strb	r2, [r7, #7]
 800412c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 800412e:	2300      	movs	r3, #0
 8004130:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8004132:	79bb      	ldrb	r3, [r7, #6]
 8004134:	f003 0303 	and.w	r3, r3, #3
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	220f      	movs	r2, #15
 800413c:	fa02 f303 	lsl.w	r3, r2, r3
 8004140:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8004142:	4b15      	ldr	r3, [pc, #84]	; (8004198 <SYSCFG_EXTILineConfig+0x78>)
 8004144:	79ba      	ldrb	r2, [r7, #6]
 8004146:	0892      	lsrs	r2, r2, #2
 8004148:	b2d2      	uxtb	r2, r2
 800414a:	4913      	ldr	r1, [pc, #76]	; (8004198 <SYSCFG_EXTILineConfig+0x78>)
 800414c:	79b8      	ldrb	r0, [r7, #6]
 800414e:	0880      	lsrs	r0, r0, #2
 8004150:	b2c0      	uxtb	r0, r0
 8004152:	3002      	adds	r0, #2
 8004154:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8004158:	68f9      	ldr	r1, [r7, #12]
 800415a:	43c9      	mvns	r1, r1
 800415c:	4001      	ands	r1, r0
 800415e:	3202      	adds	r2, #2
 8004160:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8004164:	4b0c      	ldr	r3, [pc, #48]	; (8004198 <SYSCFG_EXTILineConfig+0x78>)
 8004166:	79ba      	ldrb	r2, [r7, #6]
 8004168:	0892      	lsrs	r2, r2, #2
 800416a:	b2d2      	uxtb	r2, r2
 800416c:	490a      	ldr	r1, [pc, #40]	; (8004198 <SYSCFG_EXTILineConfig+0x78>)
 800416e:	79b8      	ldrb	r0, [r7, #6]
 8004170:	0880      	lsrs	r0, r0, #2
 8004172:	b2c0      	uxtb	r0, r0
 8004174:	3002      	adds	r0, #2
 8004176:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800417a:	79fc      	ldrb	r4, [r7, #7]
 800417c:	79b9      	ldrb	r1, [r7, #6]
 800417e:	f001 0103 	and.w	r1, r1, #3
 8004182:	0089      	lsls	r1, r1, #2
 8004184:	fa04 f101 	lsl.w	r1, r4, r1
 8004188:	4301      	orrs	r1, r0
 800418a:	3202      	adds	r2, #2
 800418c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bc90      	pop	{r4, r7}
 8004196:	4770      	bx	lr
 8004198:	40013800 	.word	0x40013800

0800419c <SYSCFG_ETH_MediaInterfaceConfig>:
  *            @arg SYSCFG_ETH_MediaInterface_MII: MII mode selected
  *            @arg SYSCFG_ETH_MediaInterface_RMII: RMII mode selected 
  * @retval None 
  */
void SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface) 
{ 
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_ETH_MEDIA_INTERFACE(SYSCFG_ETH_MediaInterface)); 
  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) PMC_MII_RMII_SEL_BB = SYSCFG_ETH_MediaInterface; 
 80041a4:	4b03      	ldr	r3, [pc, #12]	; (80041b4 <SYSCFG_ETH_MediaInterfaceConfig+0x18>)
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	601a      	str	r2, [r3, #0]
}
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	422700dc 	.word	0x422700dc

080041b8 <SYSCFG_CompensationCellCmd>:
  *            @arg ENABLE: I/O compensation cell enabled  
  *            @arg DISABLE: I/O compensation cell power-down mode  
  * @retval None
  */
void SYSCFG_CompensationCellCmd(FunctionalState NewState)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	4603      	mov	r3, r0
 80041c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CMPCR_CMP_PD_BB = (uint32_t)NewState;
 80041c2:	4b04      	ldr	r3, [pc, #16]	; (80041d4 <SYSCFG_CompensationCellCmd+0x1c>)
 80041c4:	79fa      	ldrb	r2, [r7, #7]
 80041c6:	601a      	str	r2, [r3, #0]
}
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	42270400 	.word	0x42270400

080041d8 <SYSCFG_GetCompensationCellStatus>:
  * @brief  Checks whether the I/O Compensation Cell ready flag is set or not.
  * @param  None
  * @retval The new state of the I/O Compensation Cell ready flag (SET or RESET)
  */
FlagStatus SYSCFG_GetCompensationCellStatus(void)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
  FlagStatus bitstatus = RESET;
 80041de:	2300      	movs	r3, #0
 80041e0:	71fb      	strb	r3, [r7, #7]
    
  if ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY ) != (uint32_t)RESET)
 80041e2:	4b09      	ldr	r3, [pc, #36]	; (8004208 <SYSCFG_GetCompensationCellStatus+0x30>)
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d002      	beq.n	80041f4 <SYSCFG_GetCompensationCellStatus+0x1c>
  {
    bitstatus = SET;
 80041ee:	2301      	movs	r3, #1
 80041f0:	71fb      	strb	r3, [r7, #7]
 80041f2:	e001      	b.n	80041f8 <SYSCFG_GetCompensationCellStatus+0x20>
  }
  else
  {
    bitstatus = RESET;
 80041f4:	2300      	movs	r3, #0
 80041f6:	71fb      	strb	r3, [r7, #7]
  }
  return bitstatus;
 80041f8:	79fb      	ldrb	r3, [r7, #7]
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	40013800 	.word	0x40013800

0800420c <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 800420c:	b480      	push	{r7}
 800420e:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004210:	4b12      	ldr	r3, [pc, #72]	; (800425c <RCC_DeInit+0x50>)
 8004212:	4a12      	ldr	r2, [pc, #72]	; (800425c <RCC_DeInit+0x50>)
 8004214:	6812      	ldr	r2, [r2, #0]
 8004216:	f042 0201 	orr.w	r2, r2, #1
 800421a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800421c:	4b0f      	ldr	r3, [pc, #60]	; (800425c <RCC_DeInit+0x50>)
 800421e:	2200      	movs	r2, #0
 8004220:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON and PLLI2S bits */
  RCC->CR &= (uint32_t)0xFAF6FFFF;
 8004222:	4a0e      	ldr	r2, [pc, #56]	; (800425c <RCC_DeInit+0x50>)
 8004224:	4b0d      	ldr	r3, [pc, #52]	; (800425c <RCC_DeInit+0x50>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f023 63a1 	bic.w	r3, r3, #84410368	; 0x5080000
 800422c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004230:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004232:	4b0a      	ldr	r3, [pc, #40]	; (800425c <RCC_DeInit+0x50>)
 8004234:	4a0a      	ldr	r2, [pc, #40]	; (8004260 <RCC_DeInit+0x54>)
 8004236:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8004238:	4b08      	ldr	r3, [pc, #32]	; (800425c <RCC_DeInit+0x50>)
 800423a:	4a0a      	ldr	r2, [pc, #40]	; (8004264 <RCC_DeInit+0x58>)
 800423c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004240:	4b06      	ldr	r3, [pc, #24]	; (800425c <RCC_DeInit+0x50>)
 8004242:	4a06      	ldr	r2, [pc, #24]	; (800425c <RCC_DeInit+0x50>)
 8004244:	6812      	ldr	r2, [r2, #0]
 8004246:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800424a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800424c:	4b03      	ldr	r3, [pc, #12]	; (800425c <RCC_DeInit+0x50>)
 800424e:	2200      	movs	r2, #0
 8004250:	60da      	str	r2, [r3, #12]
#ifdef STM32F427X 
  /* Disable Timers clock prescalers selection */
  RCC->DCKCFGR = 0x00000000;
#endif /* STM32F427X */ 

}
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	40023800 	.word	0x40023800
 8004260:	24003010 	.word	0x24003010
 8004264:	20003000 	.word	0x20003000

08004268 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	4603      	mov	r3, r0
 8004270:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 8004272:	4b05      	ldr	r3, [pc, #20]	; (8004288 <RCC_HSEConfig+0x20>)
 8004274:	2200      	movs	r2, #0
 8004276:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 8004278:	4b03      	ldr	r3, [pc, #12]	; (8004288 <RCC_HSEConfig+0x20>)
 800427a:	79fa      	ldrb	r2, [r7, #7]
 800427c:	701a      	strb	r2, [r3, #0]
}
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr
 8004288:	40023802 	.word	0x40023802

0800428c <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
 8004292:	2300      	movs	r3, #0
 8004294:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 8004296:	2300      	movs	r3, #0
 8004298:	71fb      	strb	r3, [r7, #7]
  FlagStatus hsestatus = RESET;
 800429a:	2300      	movs	r3, #0
 800429c:	71bb      	strb	r3, [r7, #6]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 800429e:	2031      	movs	r0, #49	; 0x31
 80042a0:	f000 fc92 	bl	8004bc8 <RCC_GetFlagStatus>
 80042a4:	4603      	mov	r3, r0
 80042a6:	71bb      	strb	r3, [r7, #6]
    startupcounter++;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	3301      	adds	r3, #1
 80042ac:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80042b4:	d002      	beq.n	80042bc <RCC_WaitForHSEStartUp+0x30>
 80042b6:	79bb      	ldrb	r3, [r7, #6]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d0f0      	beq.n	800429e <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 80042bc:	2031      	movs	r0, #49	; 0x31
 80042be:	f000 fc83 	bl	8004bc8 <RCC_GetFlagStatus>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d002      	beq.n	80042ce <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 80042c8:	2301      	movs	r3, #1
 80042ca:	71fb      	strb	r3, [r7, #7]
 80042cc:	e001      	b.n	80042d2 <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 80042ce:	2300      	movs	r3, #0
 80042d0:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 80042d2:	79fb      	ldrb	r3, [r7, #7]
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3708      	adds	r7, #8
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	4603      	mov	r3, r0
 80042e4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
 80042e6:	2300      	movs	r3, #0
 80042e8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 80042ea:	4b0a      	ldr	r3, [pc, #40]	; (8004314 <RCC_AdjustHSICalibrationValue+0x38>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80042f6:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 80042f8:	79fb      	ldrb	r3, [r7, #7]
 80042fa:	00db      	lsls	r3, r3, #3
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	4313      	orrs	r3, r2
 8004300:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
 8004302:	4b04      	ldr	r3, [pc, #16]	; (8004314 <RCC_AdjustHSICalibrationValue+0x38>)
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	601a      	str	r2, [r3, #0]
}
 8004308:	3714      	adds	r7, #20
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	40023800 	.word	0x40023800

08004318 <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	4603      	mov	r3, r0
 8004320:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8004322:	4b04      	ldr	r3, [pc, #16]	; (8004334 <RCC_HSICmd+0x1c>)
 8004324:	79fa      	ldrb	r2, [r7, #7]
 8004326:	601a      	str	r2, [r3, #0]
}
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	42470000 	.word	0x42470000

08004338 <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	4603      	mov	r3, r0
 8004340:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8004342:	4b0c      	ldr	r3, [pc, #48]	; (8004374 <RCC_LSEConfig+0x3c>)
 8004344:	2200      	movs	r2, #0
 8004346:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8004348:	4b0a      	ldr	r3, [pc, #40]	; (8004374 <RCC_LSEConfig+0x3c>)
 800434a:	2200      	movs	r2, #0
 800434c:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 800434e:	79fb      	ldrb	r3, [r7, #7]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d002      	beq.n	800435a <RCC_LSEConfig+0x22>
 8004354:	2b04      	cmp	r3, #4
 8004356:	d004      	beq.n	8004362 <RCC_LSEConfig+0x2a>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;
    default:
      break;
 8004358:	e007      	b.n	800436a <RCC_LSEConfig+0x32>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 800435a:	4b06      	ldr	r3, [pc, #24]	; (8004374 <RCC_LSEConfig+0x3c>)
 800435c:	2201      	movs	r2, #1
 800435e:	701a      	strb	r2, [r3, #0]
      break;
 8004360:	e003      	b.n	800436a <RCC_LSEConfig+0x32>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8004362:	4b04      	ldr	r3, [pc, #16]	; (8004374 <RCC_LSEConfig+0x3c>)
 8004364:	2205      	movs	r2, #5
 8004366:	701a      	strb	r2, [r3, #0]
      break;
 8004368:	bf00      	nop
    default:
      break;
  }
}
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr
 8004374:	40023870 	.word	0x40023870

08004378 <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	4603      	mov	r3, r0
 8004380:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8004382:	4b04      	ldr	r3, [pc, #16]	; (8004394 <RCC_LSICmd+0x1c>)
 8004384:	79fa      	ldrb	r2, [r7, #7]
 8004386:	601a      	str	r2, [r3, #0]
}
 8004388:	370c      	adds	r7, #12
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	42470e80 	.word	0x42470e80

08004398 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
 80043a4:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 80043a6:	4b0a      	ldr	r3, [pc, #40]	; (80043d0 <RCC_PLLConfig+0x38>)
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	0191      	lsls	r1, r2, #6
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	4311      	orrs	r1, r2
 80043b0:	683a      	ldr	r2, [r7, #0]
 80043b2:	0852      	lsrs	r2, r2, #1
 80043b4:	3a01      	subs	r2, #1
 80043b6:	0412      	lsls	r2, r2, #16
 80043b8:	4311      	orrs	r1, r2
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	4311      	orrs	r1, r2
                 (PLLQ << 24);
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	0612      	lsls	r2, r2, #24
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 80043c2:	430a      	orrs	r2, r1
 80043c4:	605a      	str	r2, [r3, #4]
                 (PLLQ << 24);
}
 80043c6:	3714      	adds	r7, #20
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	40023800 	.word	0x40023800

080043d4 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	4603      	mov	r3, r0
 80043dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 80043de:	4b04      	ldr	r3, [pc, #16]	; (80043f0 <RCC_PLLCmd+0x1c>)
 80043e0:	79fa      	ldrb	r2, [r7, #7]
 80043e2:	601a      	str	r2, [r3, #0]
}
 80043e4:	370c      	adds	r7, #12
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	42470060 	.word	0x42470060

080043f4 <RCC_PLLI2SConfig>:
  *         on the I2S clock frequency.
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 80043fe:	4b06      	ldr	r3, [pc, #24]	; (8004418 <RCC_PLLI2SConfig+0x24>)
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	0191      	lsls	r1, r2, #6
 8004404:	683a      	ldr	r2, [r7, #0]
 8004406:	0712      	lsls	r2, r2, #28
 8004408:	430a      	orrs	r2, r1
 800440a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr
 8004418:	40023800 	.word	0x40023800

0800441c <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	4603      	mov	r3, r0
 8004424:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 8004426:	4b04      	ldr	r3, [pc, #16]	; (8004438 <RCC_PLLI2SCmd+0x1c>)
 8004428:	79fa      	ldrb	r2, [r7, #7]
 800442a:	601a      	str	r2, [r3, #0]
}
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	42470068 	.word	0x42470068

0800443c <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	4603      	mov	r3, r0
 8004444:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8004446:	4b04      	ldr	r3, [pc, #16]	; (8004458 <RCC_ClockSecuritySystemCmd+0x1c>)
 8004448:	79fa      	ldrb	r2, [r7, #7]
 800444a:	601a      	str	r2, [r3, #0]
}
 800444c:	370c      	adds	r7, #12
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	4247004c 	.word	0x4247004c

0800445c <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004466:	2300      	movs	r3, #0
 8004468:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 800446a:	4b0a      	ldr	r3, [pc, #40]	; (8004494 <RCC_MCO1Config+0x38>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 8004476:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	4313      	orrs	r3, r2
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	4313      	orrs	r3, r2
 8004482:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8004484:	4b03      	ldr	r3, [pc, #12]	; (8004494 <RCC_MCO1Config+0x38>)
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	609a      	str	r2, [r3, #8]
}
 800448a:	3714      	adds	r7, #20
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr
 8004494:	40023800 	.word	0x40023800

08004498 <RCC_MCO2Config>:
  *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
  *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80044a2:	2300      	movs	r3, #0
 80044a4:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 80044a6:	4b0a      	ldr	r3, [pc, #40]	; (80044d0 <RCC_MCO2Config+0x38>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80044b2:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	4313      	orrs	r3, r2
 80044be:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 80044c0:	4b03      	ldr	r3, [pc, #12]	; (80044d0 <RCC_MCO2Config+0x38>)
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	609a      	str	r2, [r3, #8]
}
 80044c6:	3714      	adds	r7, #20
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	40023800 	.word	0x40023800

080044d4 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80044dc:	2300      	movs	r3, #0
 80044de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 80044e0:	4b09      	ldr	r3, [pc, #36]	; (8004508 <RCC_SYSCLKConfig+0x34>)
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f023 0303 	bic.w	r3, r3, #3
 80044ec:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80044f6:	4b04      	ldr	r3, [pc, #16]	; (8004508 <RCC_SYSCLKConfig+0x34>)
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	609a      	str	r2, [r3, #8]
}
 80044fc:	3714      	adds	r7, #20
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	40023800 	.word	0x40023800

0800450c <RCC_GetSYSCLKSource>:
  *              - 0x00: HSI used as system clock
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 800450c:	b480      	push	{r7}
 800450e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8004510:	4b05      	ldr	r3, [pc, #20]	; (8004528 <RCC_GetSYSCLKSource+0x1c>)
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	b2db      	uxtb	r3, r3
 8004516:	f003 030c 	and.w	r3, r3, #12
 800451a:	b2db      	uxtb	r3, r3
}
 800451c:	4618      	mov	r0, r3
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	40023800 	.word	0x40023800

0800452c <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8004534:	2300      	movs	r3, #0
 8004536:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8004538:	4b09      	ldr	r3, [pc, #36]	; (8004560 <RCC_HCLKConfig+0x34>)
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004544:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4313      	orrs	r3, r2
 800454c:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800454e:	4b04      	ldr	r3, [pc, #16]	; (8004560 <RCC_HCLKConfig+0x34>)
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	609a      	str	r2, [r3, #8]
}
 8004554:	3714      	adds	r7, #20
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	40023800 	.word	0x40023800

08004564 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800456c:	2300      	movs	r3, #0
 800456e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8004570:	4b09      	ldr	r3, [pc, #36]	; (8004598 <RCC_PCLK1Config+0x34>)
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800457c:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4313      	orrs	r3, r2
 8004584:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004586:	4b04      	ldr	r3, [pc, #16]	; (8004598 <RCC_PCLK1Config+0x34>)
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	609a      	str	r2, [r3, #8]
}
 800458c:	3714      	adds	r7, #20
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	40023800 	.word	0x40023800

0800459c <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80045a4:	2300      	movs	r3, #0
 80045a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 80045a8:	4b09      	ldr	r3, [pc, #36]	; (80045d0 <RCC_PCLK2Config+0x34>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80045b4:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	00db      	lsls	r3, r3, #3
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	4313      	orrs	r3, r2
 80045be:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80045c0:	4b03      	ldr	r3, [pc, #12]	; (80045d0 <RCC_PCLK2Config+0x34>)
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	609a      	str	r2, [r3, #8]
}
 80045c6:	3714      	adds	r7, #20
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr
 80045d0:	40023800 	.word	0x40023800

080045d4 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b089      	sub	sp, #36	; 0x24
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80045dc:	2300      	movs	r3, #0
 80045de:	61bb      	str	r3, [r7, #24]
 80045e0:	2300      	movs	r3, #0
 80045e2:	617b      	str	r3, [r7, #20]
 80045e4:	2300      	movs	r3, #0
 80045e6:	61fb      	str	r3, [r7, #28]
 80045e8:	2302      	movs	r3, #2
 80045ea:	613b      	str	r3, [r7, #16]
 80045ec:	2300      	movs	r3, #0
 80045ee:	60fb      	str	r3, [r7, #12]
 80045f0:	2302      	movs	r3, #2
 80045f2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80045f4:	4b48      	ldr	r3, [pc, #288]	; (8004718 <RCC_GetClocksFreq+0x144>)
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f003 030c 	and.w	r3, r3, #12
 80045fc:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	2b04      	cmp	r3, #4
 8004602:	d007      	beq.n	8004614 <RCC_GetClocksFreq+0x40>
 8004604:	2b08      	cmp	r3, #8
 8004606:	d009      	beq.n	800461c <RCC_GetClocksFreq+0x48>
 8004608:	2b00      	cmp	r3, #0
 800460a:	d13f      	bne.n	800468c <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a43      	ldr	r2, [pc, #268]	; (800471c <RCC_GetClocksFreq+0x148>)
 8004610:	601a      	str	r2, [r3, #0]
      break;
 8004612:	e03f      	b.n	8004694 <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a42      	ldr	r2, [pc, #264]	; (8004720 <RCC_GetClocksFreq+0x14c>)
 8004618:	601a      	str	r2, [r3, #0]
      break;
 800461a:	e03b      	b.n	8004694 <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800461c:	4b3e      	ldr	r3, [pc, #248]	; (8004718 <RCC_GetClocksFreq+0x144>)
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004624:	0d9b      	lsrs	r3, r3, #22
 8004626:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004628:	4b3b      	ldr	r3, [pc, #236]	; (8004718 <RCC_GetClocksFreq+0x144>)
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004630:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00d      	beq.n	8004654 <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8004638:	4a39      	ldr	r2, [pc, #228]	; (8004720 <RCC_GetClocksFreq+0x14c>)
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004640:	4b35      	ldr	r3, [pc, #212]	; (8004718 <RCC_GetClocksFreq+0x144>)
 8004642:	6859      	ldr	r1, [r3, #4]
 8004644:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004648:	400b      	ands	r3, r1
 800464a:	099b      	lsrs	r3, r3, #6
 800464c:	fb03 f302 	mul.w	r3, r3, r2
 8004650:	61fb      	str	r3, [r7, #28]
 8004652:	e00c      	b.n	800466e <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8004654:	4a31      	ldr	r2, [pc, #196]	; (800471c <RCC_GetClocksFreq+0x148>)
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	fbb2 f2f3 	udiv	r2, r2, r3
 800465c:	4b2e      	ldr	r3, [pc, #184]	; (8004718 <RCC_GetClocksFreq+0x144>)
 800465e:	6859      	ldr	r1, [r3, #4]
 8004660:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004664:	400b      	ands	r3, r1
 8004666:	099b      	lsrs	r3, r3, #6
 8004668:	fb03 f302 	mul.w	r3, r3, r2
 800466c:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800466e:	4b2a      	ldr	r3, [pc, #168]	; (8004718 <RCC_GetClocksFreq+0x144>)
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004676:	0c1b      	lsrs	r3, r3, #16
 8004678:	3301      	adds	r3, #1
 800467a:	005b      	lsls	r3, r3, #1
 800467c:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800467e:	69fa      	ldr	r2, [r7, #28]
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	fbb2 f2f3 	udiv	r2, r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	601a      	str	r2, [r3, #0]
      break;
 800468a:	e003      	b.n	8004694 <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a23      	ldr	r2, [pc, #140]	; (800471c <RCC_GetClocksFreq+0x148>)
 8004690:	601a      	str	r2, [r3, #0]
      break;
 8004692:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8004694:	4b20      	ldr	r3, [pc, #128]	; (8004718 <RCC_GetClocksFreq+0x144>)
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800469c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	091b      	lsrs	r3, r3, #4
 80046a2:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80046a4:	4a1f      	ldr	r2, [pc, #124]	; (8004724 <RCC_GetClocksFreq+0x150>)
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	4413      	add	r3, r2
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	40da      	lsrs	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80046bc:	4b16      	ldr	r3, [pc, #88]	; (8004718 <RCC_GetClocksFreq+0x144>)
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80046c4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	0a9b      	lsrs	r3, r3, #10
 80046ca:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80046cc:	4a15      	ldr	r2, [pc, #84]	; (8004724 <RCC_GetClocksFreq+0x150>)
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	4413      	add	r3, r2
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	40da      	lsrs	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80046e4:	4b0c      	ldr	r3, [pc, #48]	; (8004718 <RCC_GetClocksFreq+0x144>)
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80046ec:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	0b5b      	lsrs	r3, r3, #13
 80046f2:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80046f4:	4a0b      	ldr	r2, [pc, #44]	; (8004724 <RCC_GetClocksFreq+0x150>)
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	4413      	add	r3, r2
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	40da      	lsrs	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	60da      	str	r2, [r3, #12]
}
 800470c:	3724      	adds	r7, #36	; 0x24
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	40023800 	.word	0x40023800
 800471c:	00f42400 	.word	0x00f42400
 8004720:	01312d00 	.word	0x01312d00
 8004724:	20000034 	.word	0x20000034

08004728 <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 8004728:	b480      	push	{r7}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8004730:	2300      	movs	r3, #0
 8004732:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800473a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800473e:	d111      	bne.n	8004764 <RCC_RTCCLKConfig+0x3c>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8004740:	4b0f      	ldr	r3, [pc, #60]	; (8004780 <RCC_RTCCLKConfig+0x58>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800474c:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004754:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	4313      	orrs	r3, r2
 800475c:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
 800475e:	4b08      	ldr	r3, [pc, #32]	; (8004780 <RCC_RTCCLKConfig+0x58>)
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8004764:	4b06      	ldr	r3, [pc, #24]	; (8004780 <RCC_RTCCLKConfig+0x58>)
 8004766:	4a06      	ldr	r2, [pc, #24]	; (8004780 <RCC_RTCCLKConfig+0x58>)
 8004768:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8004770:	430a      	orrs	r2, r1
 8004772:	671a      	str	r2, [r3, #112]	; 0x70
}
 8004774:	3714      	adds	r7, #20
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	40023800 	.word	0x40023800

08004784 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	4603      	mov	r3, r0
 800478c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 800478e:	4b04      	ldr	r3, [pc, #16]	; (80047a0 <RCC_RTCCLKCmd+0x1c>)
 8004790:	79fa      	ldrb	r2, [r7, #7]
 8004792:	601a      	str	r2, [r3, #0]
}
 8004794:	370c      	adds	r7, #12
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	42470e3c 	.word	0x42470e3c

080047a4 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	4603      	mov	r3, r0
 80047ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 80047ae:	4b04      	ldr	r3, [pc, #16]	; (80047c0 <RCC_BackupResetCmd+0x1c>)
 80047b0:	79fa      	ldrb	r2, [r7, #7]
 80047b2:	601a      	str	r2, [r3, #0]
}
 80047b4:	370c      	adds	r7, #12
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	42470e40 	.word	0x42470e40

080047c4 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 80047cc:	4b03      	ldr	r3, [pc, #12]	; (80047dc <RCC_I2SCLKConfig+0x18>)
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	601a      	str	r2, [r3, #0]
}
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr
 80047dc:	4247015c 	.word	0x4247015c

080047e0 <RCC_TIMCLKPresConfig>:
  *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
  *                 to division by 8 or more.
  * @retval None
  */
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
 80047e8:	4b03      	ldr	r3, [pc, #12]	; (80047f8 <RCC_TIMCLKPresConfig+0x18>)
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	601a      	str	r2, [r3, #0]
  
}
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr
 80047f8:	424711e0 	.word	0x424711e0

080047fc <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	460b      	mov	r3, r1
 8004806:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004808:	78fb      	ldrb	r3, [r7, #3]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d006      	beq.n	800481c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800480e:	4b09      	ldr	r3, [pc, #36]	; (8004834 <RCC_AHB1PeriphClockCmd+0x38>)
 8004810:	4a08      	ldr	r2, [pc, #32]	; (8004834 <RCC_AHB1PeriphClockCmd+0x38>)
 8004812:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	430a      	orrs	r2, r1
 8004818:	631a      	str	r2, [r3, #48]	; 0x30
 800481a:	e006      	b.n	800482a <RCC_AHB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800481c:	4b05      	ldr	r3, [pc, #20]	; (8004834 <RCC_AHB1PeriphClockCmd+0x38>)
 800481e:	4a05      	ldr	r2, [pc, #20]	; (8004834 <RCC_AHB1PeriphClockCmd+0x38>)
 8004820:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	43d2      	mvns	r2, r2
 8004826:	400a      	ands	r2, r1
 8004828:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr
 8004834:	40023800 	.word	0x40023800

08004838 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	460b      	mov	r3, r1
 8004842:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004844:	78fb      	ldrb	r3, [r7, #3]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d006      	beq.n	8004858 <RCC_AHB2PeriphClockCmd+0x20>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 800484a:	4b09      	ldr	r3, [pc, #36]	; (8004870 <RCC_AHB2PeriphClockCmd+0x38>)
 800484c:	4a08      	ldr	r2, [pc, #32]	; (8004870 <RCC_AHB2PeriphClockCmd+0x38>)
 800484e:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	430a      	orrs	r2, r1
 8004854:	635a      	str	r2, [r3, #52]	; 0x34
 8004856:	e006      	b.n	8004866 <RCC_AHB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8004858:	4b05      	ldr	r3, [pc, #20]	; (8004870 <RCC_AHB2PeriphClockCmd+0x38>)
 800485a:	4a05      	ldr	r2, [pc, #20]	; (8004870 <RCC_AHB2PeriphClockCmd+0x38>)
 800485c:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	43d2      	mvns	r2, r2
 8004862:	400a      	ands	r2, r1
 8004864:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr
 8004870:	40023800 	.word	0x40023800

08004874 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	460b      	mov	r3, r1
 800487e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004880:	78fb      	ldrb	r3, [r7, #3]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d006      	beq.n	8004894 <RCC_AHB3PeriphClockCmd+0x20>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8004886:	4b09      	ldr	r3, [pc, #36]	; (80048ac <RCC_AHB3PeriphClockCmd+0x38>)
 8004888:	4a08      	ldr	r2, [pc, #32]	; (80048ac <RCC_AHB3PeriphClockCmd+0x38>)
 800488a:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	430a      	orrs	r2, r1
 8004890:	639a      	str	r2, [r3, #56]	; 0x38
 8004892:	e006      	b.n	80048a2 <RCC_AHB3PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 8004894:	4b05      	ldr	r3, [pc, #20]	; (80048ac <RCC_AHB3PeriphClockCmd+0x38>)
 8004896:	4a05      	ldr	r2, [pc, #20]	; (80048ac <RCC_AHB3PeriphClockCmd+0x38>)
 8004898:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	43d2      	mvns	r2, r2
 800489e:	400a      	ands	r2, r1
 80048a0:	639a      	str	r2, [r3, #56]	; 0x38
  }
}
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr
 80048ac:	40023800 	.word	0x40023800

080048b0 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	460b      	mov	r3, r1
 80048ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80048bc:	78fb      	ldrb	r3, [r7, #3]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d006      	beq.n	80048d0 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80048c2:	4b09      	ldr	r3, [pc, #36]	; (80048e8 <RCC_APB1PeriphClockCmd+0x38>)
 80048c4:	4a08      	ldr	r2, [pc, #32]	; (80048e8 <RCC_APB1PeriphClockCmd+0x38>)
 80048c6:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	430a      	orrs	r2, r1
 80048cc:	641a      	str	r2, [r3, #64]	; 0x40
 80048ce:	e006      	b.n	80048de <RCC_APB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80048d0:	4b05      	ldr	r3, [pc, #20]	; (80048e8 <RCC_APB1PeriphClockCmd+0x38>)
 80048d2:	4a05      	ldr	r2, [pc, #20]	; (80048e8 <RCC_APB1PeriphClockCmd+0x38>)
 80048d4:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	43d2      	mvns	r2, r2
 80048da:	400a      	ands	r2, r1
 80048dc:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr
 80048e8:	40023800 	.word	0x40023800

080048ec <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	460b      	mov	r3, r1
 80048f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80048f8:	78fb      	ldrb	r3, [r7, #3]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d006      	beq.n	800490c <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80048fe:	4b09      	ldr	r3, [pc, #36]	; (8004924 <RCC_APB2PeriphClockCmd+0x38>)
 8004900:	4a08      	ldr	r2, [pc, #32]	; (8004924 <RCC_APB2PeriphClockCmd+0x38>)
 8004902:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	430a      	orrs	r2, r1
 8004908:	645a      	str	r2, [r3, #68]	; 0x44
 800490a:	e006      	b.n	800491a <RCC_APB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800490c:	4b05      	ldr	r3, [pc, #20]	; (8004924 <RCC_APB2PeriphClockCmd+0x38>)
 800490e:	4a05      	ldr	r2, [pc, #20]	; (8004924 <RCC_APB2PeriphClockCmd+0x38>)
 8004910:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	43d2      	mvns	r2, r2
 8004916:	400a      	ands	r2, r1
 8004918:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr
 8004924:	40023800 	.word	0x40023800

08004928 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	460b      	mov	r3, r1
 8004932:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004934:	78fb      	ldrb	r3, [r7, #3]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d006      	beq.n	8004948 <RCC_AHB1PeriphResetCmd+0x20>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 800493a:	4b09      	ldr	r3, [pc, #36]	; (8004960 <RCC_AHB1PeriphResetCmd+0x38>)
 800493c:	4a08      	ldr	r2, [pc, #32]	; (8004960 <RCC_AHB1PeriphResetCmd+0x38>)
 800493e:	6911      	ldr	r1, [r2, #16]
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	430a      	orrs	r2, r1
 8004944:	611a      	str	r2, [r3, #16]
 8004946:	e006      	b.n	8004956 <RCC_AHB1PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8004948:	4b05      	ldr	r3, [pc, #20]	; (8004960 <RCC_AHB1PeriphResetCmd+0x38>)
 800494a:	4a05      	ldr	r2, [pc, #20]	; (8004960 <RCC_AHB1PeriphResetCmd+0x38>)
 800494c:	6911      	ldr	r1, [r2, #16]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	43d2      	mvns	r2, r2
 8004952:	400a      	ands	r2, r1
 8004954:	611a      	str	r2, [r3, #16]
  }
}
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr
 8004960:	40023800 	.word	0x40023800

08004964 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	460b      	mov	r3, r1
 800496e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004970:	78fb      	ldrb	r3, [r7, #3]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d006      	beq.n	8004984 <RCC_AHB2PeriphResetCmd+0x20>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8004976:	4b09      	ldr	r3, [pc, #36]	; (800499c <RCC_AHB2PeriphResetCmd+0x38>)
 8004978:	4a08      	ldr	r2, [pc, #32]	; (800499c <RCC_AHB2PeriphResetCmd+0x38>)
 800497a:	6951      	ldr	r1, [r2, #20]
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	430a      	orrs	r2, r1
 8004980:	615a      	str	r2, [r3, #20]
 8004982:	e006      	b.n	8004992 <RCC_AHB2PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 8004984:	4b05      	ldr	r3, [pc, #20]	; (800499c <RCC_AHB2PeriphResetCmd+0x38>)
 8004986:	4a05      	ldr	r2, [pc, #20]	; (800499c <RCC_AHB2PeriphResetCmd+0x38>)
 8004988:	6951      	ldr	r1, [r2, #20]
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	43d2      	mvns	r2, r2
 800498e:	400a      	ands	r2, r1
 8004990:	615a      	str	r2, [r3, #20]
  }
}
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr
 800499c:	40023800 	.word	0x40023800

080049a0 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	460b      	mov	r3, r1
 80049aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80049ac:	78fb      	ldrb	r3, [r7, #3]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d006      	beq.n	80049c0 <RCC_AHB3PeriphResetCmd+0x20>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 80049b2:	4b09      	ldr	r3, [pc, #36]	; (80049d8 <RCC_AHB3PeriphResetCmd+0x38>)
 80049b4:	4a08      	ldr	r2, [pc, #32]	; (80049d8 <RCC_AHB3PeriphResetCmd+0x38>)
 80049b6:	6991      	ldr	r1, [r2, #24]
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	430a      	orrs	r2, r1
 80049bc:	619a      	str	r2, [r3, #24]
 80049be:	e006      	b.n	80049ce <RCC_AHB3PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 80049c0:	4b05      	ldr	r3, [pc, #20]	; (80049d8 <RCC_AHB3PeriphResetCmd+0x38>)
 80049c2:	4a05      	ldr	r2, [pc, #20]	; (80049d8 <RCC_AHB3PeriphResetCmd+0x38>)
 80049c4:	6991      	ldr	r1, [r2, #24]
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	43d2      	mvns	r2, r2
 80049ca:	400a      	ands	r2, r1
 80049cc:	619a      	str	r2, [r3, #24]
  }
}
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr
 80049d8:	40023800 	.word	0x40023800

080049dc <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	460b      	mov	r3, r1
 80049e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80049e8:	78fb      	ldrb	r3, [r7, #3]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d006      	beq.n	80049fc <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 80049ee:	4b09      	ldr	r3, [pc, #36]	; (8004a14 <RCC_APB1PeriphResetCmd+0x38>)
 80049f0:	4a08      	ldr	r2, [pc, #32]	; (8004a14 <RCC_APB1PeriphResetCmd+0x38>)
 80049f2:	6a11      	ldr	r1, [r2, #32]
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	430a      	orrs	r2, r1
 80049f8:	621a      	str	r2, [r3, #32]
 80049fa:	e006      	b.n	8004a0a <RCC_APB1PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 80049fc:	4b05      	ldr	r3, [pc, #20]	; (8004a14 <RCC_APB1PeriphResetCmd+0x38>)
 80049fe:	4a05      	ldr	r2, [pc, #20]	; (8004a14 <RCC_APB1PeriphResetCmd+0x38>)
 8004a00:	6a11      	ldr	r1, [r2, #32]
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	43d2      	mvns	r2, r2
 8004a06:	400a      	ands	r2, r1
 8004a08:	621a      	str	r2, [r3, #32]
  }
}
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr
 8004a14:	40023800 	.word	0x40023800

08004a18 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	460b      	mov	r3, r1
 8004a22:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004a24:	78fb      	ldrb	r3, [r7, #3]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d006      	beq.n	8004a38 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8004a2a:	4b09      	ldr	r3, [pc, #36]	; (8004a50 <RCC_APB2PeriphResetCmd+0x38>)
 8004a2c:	4a08      	ldr	r2, [pc, #32]	; (8004a50 <RCC_APB2PeriphResetCmd+0x38>)
 8004a2e:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	430a      	orrs	r2, r1
 8004a34:	625a      	str	r2, [r3, #36]	; 0x24
 8004a36:	e006      	b.n	8004a46 <RCC_APB2PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8004a38:	4b05      	ldr	r3, [pc, #20]	; (8004a50 <RCC_APB2PeriphResetCmd+0x38>)
 8004a3a:	4a05      	ldr	r2, [pc, #20]	; (8004a50 <RCC_APB2PeriphResetCmd+0x38>)
 8004a3c:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	43d2      	mvns	r2, r2
 8004a42:	400a      	ands	r2, r1
 8004a44:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr
 8004a50:	40023800 	.word	0x40023800

08004a54 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004a60:	78fb      	ldrb	r3, [r7, #3]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d006      	beq.n	8004a74 <RCC_AHB1PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8004a66:	4b09      	ldr	r3, [pc, #36]	; (8004a8c <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 8004a68:	4a08      	ldr	r2, [pc, #32]	; (8004a8c <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 8004a6a:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	651a      	str	r2, [r3, #80]	; 0x50
 8004a72:	e006      	b.n	8004a82 <RCC_AHB1PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 8004a74:	4b05      	ldr	r3, [pc, #20]	; (8004a8c <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 8004a76:	4a05      	ldr	r2, [pc, #20]	; (8004a8c <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 8004a78:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	43d2      	mvns	r2, r2
 8004a7e:	400a      	ands	r2, r1
 8004a80:	651a      	str	r2, [r3, #80]	; 0x50
  }
}
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr
 8004a8c:	40023800 	.word	0x40023800

08004a90 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	460b      	mov	r3, r1
 8004a9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004a9c:	78fb      	ldrb	r3, [r7, #3]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d006      	beq.n	8004ab0 <RCC_AHB2PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8004aa2:	4b09      	ldr	r3, [pc, #36]	; (8004ac8 <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 8004aa4:	4a08      	ldr	r2, [pc, #32]	; (8004ac8 <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 8004aa6:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	655a      	str	r2, [r3, #84]	; 0x54
 8004aae:	e006      	b.n	8004abe <RCC_AHB2PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 8004ab0:	4b05      	ldr	r3, [pc, #20]	; (8004ac8 <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 8004ab2:	4a05      	ldr	r2, [pc, #20]	; (8004ac8 <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 8004ab4:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	43d2      	mvns	r2, r2
 8004aba:	400a      	ands	r2, r1
 8004abc:	655a      	str	r2, [r3, #84]	; 0x54
  }
}
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr
 8004ac8:	40023800 	.word	0x40023800

08004acc <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004ad8:	78fb      	ldrb	r3, [r7, #3]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d006      	beq.n	8004aec <RCC_AHB3PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8004ade:	4b09      	ldr	r3, [pc, #36]	; (8004b04 <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 8004ae0:	4a08      	ldr	r2, [pc, #32]	; (8004b04 <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 8004ae2:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	659a      	str	r2, [r3, #88]	; 0x58
 8004aea:	e006      	b.n	8004afa <RCC_AHB3PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 8004aec:	4b05      	ldr	r3, [pc, #20]	; (8004b04 <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 8004aee:	4a05      	ldr	r2, [pc, #20]	; (8004b04 <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 8004af0:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	43d2      	mvns	r2, r2
 8004af6:	400a      	ands	r2, r1
 8004af8:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr
 8004b04:	40023800 	.word	0x40023800

08004b08 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	460b      	mov	r3, r1
 8004b12:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004b14:	78fb      	ldrb	r3, [r7, #3]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d006      	beq.n	8004b28 <RCC_APB1PeriphClockLPModeCmd+0x20>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8004b1a:	4b09      	ldr	r3, [pc, #36]	; (8004b40 <RCC_APB1PeriphClockLPModeCmd+0x38>)
 8004b1c:	4a08      	ldr	r2, [pc, #32]	; (8004b40 <RCC_APB1PeriphClockLPModeCmd+0x38>)
 8004b1e:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	430a      	orrs	r2, r1
 8004b24:	661a      	str	r2, [r3, #96]	; 0x60
 8004b26:	e006      	b.n	8004b36 <RCC_APB1PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 8004b28:	4b05      	ldr	r3, [pc, #20]	; (8004b40 <RCC_APB1PeriphClockLPModeCmd+0x38>)
 8004b2a:	4a05      	ldr	r2, [pc, #20]	; (8004b40 <RCC_APB1PeriphClockLPModeCmd+0x38>)
 8004b2c:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	43d2      	mvns	r2, r2
 8004b32:	400a      	ands	r2, r1
 8004b34:	661a      	str	r2, [r3, #96]	; 0x60
  }
}
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr
 8004b40:	40023800 	.word	0x40023800

08004b44 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004b50:	78fb      	ldrb	r3, [r7, #3]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d006      	beq.n	8004b64 <RCC_APB2PeriphClockLPModeCmd+0x20>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8004b56:	4b09      	ldr	r3, [pc, #36]	; (8004b7c <RCC_APB2PeriphClockLPModeCmd+0x38>)
 8004b58:	4a08      	ldr	r2, [pc, #32]	; (8004b7c <RCC_APB2PeriphClockLPModeCmd+0x38>)
 8004b5a:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	665a      	str	r2, [r3, #100]	; 0x64
 8004b62:	e006      	b.n	8004b72 <RCC_APB2PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 8004b64:	4b05      	ldr	r3, [pc, #20]	; (8004b7c <RCC_APB2PeriphClockLPModeCmd+0x38>)
 8004b66:	4a05      	ldr	r2, [pc, #20]	; (8004b7c <RCC_APB2PeriphClockLPModeCmd+0x38>)
 8004b68:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	43d2      	mvns	r2, r2
 8004b6e:	400a      	ands	r2, r1
 8004b70:	665a      	str	r2, [r3, #100]	; 0x64
  }
}
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr
 8004b7c:	40023800 	.word	0x40023800

08004b80 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	4602      	mov	r2, r0
 8004b88:	460b      	mov	r3, r1
 8004b8a:	71fa      	strb	r2, [r7, #7]
 8004b8c:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004b8e:	79bb      	ldrb	r3, [r7, #6]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d008      	beq.n	8004ba6 <RCC_ITConfig+0x26>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8004b94:	4b0b      	ldr	r3, [pc, #44]	; (8004bc4 <RCC_ITConfig+0x44>)
 8004b96:	4a0b      	ldr	r2, [pc, #44]	; (8004bc4 <RCC_ITConfig+0x44>)
 8004b98:	7812      	ldrb	r2, [r2, #0]
 8004b9a:	b2d1      	uxtb	r1, r2
 8004b9c:	79fa      	ldrb	r2, [r7, #7]
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	b2d2      	uxtb	r2, r2
 8004ba2:	701a      	strb	r2, [r3, #0]
 8004ba4:	e009      	b.n	8004bba <RCC_ITConfig+0x3a>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8004ba6:	4b07      	ldr	r3, [pc, #28]	; (8004bc4 <RCC_ITConfig+0x44>)
 8004ba8:	4a06      	ldr	r2, [pc, #24]	; (8004bc4 <RCC_ITConfig+0x44>)
 8004baa:	7812      	ldrb	r2, [r2, #0]
 8004bac:	b2d1      	uxtb	r1, r2
 8004bae:	79fa      	ldrb	r2, [r7, #7]
 8004bb0:	43d2      	mvns	r2, r2
 8004bb2:	b2d2      	uxtb	r2, r2
 8004bb4:	400a      	ands	r2, r1
 8004bb6:	b2d2      	uxtb	r2, r2
 8004bb8:	701a      	strb	r2, [r3, #0]
  }
}
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr
 8004bc4:	4002380d 	.word	0x4002380d

08004bc8 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b087      	sub	sp, #28
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	4603      	mov	r3, r0
 8004bd0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8004bde:	79fb      	ldrb	r3, [r7, #7]
 8004be0:	095b      	lsrs	r3, r3, #5
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d103      	bne.n	8004bf4 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8004bec:	4b12      	ldr	r3, [pc, #72]	; (8004c38 <RCC_GetFlagStatus+0x70>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	617b      	str	r3, [r7, #20]
 8004bf2:	e009      	b.n	8004c08 <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d103      	bne.n	8004c02 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 8004bfa:	4b0f      	ldr	r3, [pc, #60]	; (8004c38 <RCC_GetFlagStatus+0x70>)
 8004bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bfe:	617b      	str	r3, [r7, #20]
 8004c00:	e002      	b.n	8004c08 <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8004c02:	4b0d      	ldr	r3, [pc, #52]	; (8004c38 <RCC_GetFlagStatus+0x70>)
 8004c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c06:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8004c08:	79fb      	ldrb	r3, [r7, #7]
 8004c0a:	f003 031f 	and.w	r3, r3, #31
 8004c0e:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	fa22 f303 	lsr.w	r3, r2, r3
 8004c18:	f003 0301 	and.w	r3, r3, #1
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d002      	beq.n	8004c26 <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 8004c20:	2301      	movs	r3, #1
 8004c22:	74fb      	strb	r3, [r7, #19]
 8004c24:	e001      	b.n	8004c2a <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 8004c26:	2300      	movs	r3, #0
 8004c28:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 8004c2a:	7cfb      	ldrb	r3, [r7, #19]
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	371c      	adds	r7, #28
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr
 8004c38:	40023800 	.word	0x40023800

08004c3c <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8004c40:	4b04      	ldr	r3, [pc, #16]	; (8004c54 <RCC_ClearFlag+0x18>)
 8004c42:	4a04      	ldr	r2, [pc, #16]	; (8004c54 <RCC_ClearFlag+0x18>)
 8004c44:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004c46:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004c4a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr
 8004c54:	40023800 	.word	0x40023800

08004c58 <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt             
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	4603      	mov	r3, r0
 8004c60:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 8004c62:	2300      	movs	r3, #0
 8004c64:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8004c66:	4b09      	ldr	r3, [pc, #36]	; (8004c8c <RCC_GetITStatus+0x34>)
 8004c68:	68da      	ldr	r2, [r3, #12]
 8004c6a:	79fb      	ldrb	r3, [r7, #7]
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d002      	beq.n	8004c78 <RCC_GetITStatus+0x20>
  {
    bitstatus = SET;
 8004c72:	2301      	movs	r3, #1
 8004c74:	73fb      	strb	r3, [r7, #15]
 8004c76:	e001      	b.n	8004c7c <RCC_GetITStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 8004c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3714      	adds	r7, #20
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	40023800 	.word	0x40023800

08004c90 <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	4603      	mov	r3, r0
 8004c98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8004c9a:	4b04      	ldr	r3, [pc, #16]	; (8004cac <RCC_ClearITPendingBit+0x1c>)
 8004c9c:	79fa      	ldrb	r2, [r7, #7]
 8004c9e:	701a      	strb	r2, [r3, #0]
}
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	4002380e 	.word	0x4002380e

08004cb0 <GPIO_DeInit>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for 
  *                STM32F40xx/41xx and STM32F427x/437x devices. 
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	4b3c      	ldr	r3, [pc, #240]	; (8004dac <GPIO_DeInit+0xfc>)
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d108      	bne.n	8004cd2 <GPIO_DeInit+0x22>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8004cc0:	2001      	movs	r0, #1
 8004cc2:	2101      	movs	r1, #1
 8004cc4:	f7ff fe30 	bl	8004928 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 8004cc8:	2001      	movs	r0, #1
 8004cca:	2100      	movs	r1, #0
 8004ccc:	f7ff fe2c 	bl	8004928 <RCC_AHB1PeriphResetCmd>
 8004cd0:	e068      	b.n	8004da4 <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOB)
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	4b36      	ldr	r3, [pc, #216]	; (8004db0 <GPIO_DeInit+0x100>)
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d108      	bne.n	8004cec <GPIO_DeInit+0x3c>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8004cda:	2002      	movs	r0, #2
 8004cdc:	2101      	movs	r1, #1
 8004cde:	f7ff fe23 	bl	8004928 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 8004ce2:	2002      	movs	r0, #2
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	f7ff fe1f 	bl	8004928 <RCC_AHB1PeriphResetCmd>
 8004cea:	e05b      	b.n	8004da4 <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOC)
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	4b31      	ldr	r3, [pc, #196]	; (8004db4 <GPIO_DeInit+0x104>)
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d108      	bne.n	8004d06 <GPIO_DeInit+0x56>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8004cf4:	2004      	movs	r0, #4
 8004cf6:	2101      	movs	r1, #1
 8004cf8:	f7ff fe16 	bl	8004928 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 8004cfc:	2004      	movs	r0, #4
 8004cfe:	2100      	movs	r1, #0
 8004d00:	f7ff fe12 	bl	8004928 <RCC_AHB1PeriphResetCmd>
 8004d04:	e04e      	b.n	8004da4 <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOD)
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	4b2b      	ldr	r3, [pc, #172]	; (8004db8 <GPIO_DeInit+0x108>)
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d108      	bne.n	8004d20 <GPIO_DeInit+0x70>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8004d0e:	2008      	movs	r0, #8
 8004d10:	2101      	movs	r1, #1
 8004d12:	f7ff fe09 	bl	8004928 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 8004d16:	2008      	movs	r0, #8
 8004d18:	2100      	movs	r1, #0
 8004d1a:	f7ff fe05 	bl	8004928 <RCC_AHB1PeriphResetCmd>
 8004d1e:	e041      	b.n	8004da4 <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOE)
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	4b26      	ldr	r3, [pc, #152]	; (8004dbc <GPIO_DeInit+0x10c>)
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d108      	bne.n	8004d3a <GPIO_DeInit+0x8a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8004d28:	2010      	movs	r0, #16
 8004d2a:	2101      	movs	r1, #1
 8004d2c:	f7ff fdfc 	bl	8004928 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 8004d30:	2010      	movs	r0, #16
 8004d32:	2100      	movs	r1, #0
 8004d34:	f7ff fdf8 	bl	8004928 <RCC_AHB1PeriphResetCmd>
 8004d38:	e034      	b.n	8004da4 <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOF)
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	4b20      	ldr	r3, [pc, #128]	; (8004dc0 <GPIO_DeInit+0x110>)
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d108      	bne.n	8004d54 <GPIO_DeInit+0xa4>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8004d42:	2020      	movs	r0, #32
 8004d44:	2101      	movs	r1, #1
 8004d46:	f7ff fdef 	bl	8004928 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 8004d4a:	2020      	movs	r0, #32
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	f7ff fdeb 	bl	8004928 <RCC_AHB1PeriphResetCmd>
 8004d52:	e027      	b.n	8004da4 <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOG)
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	4b1b      	ldr	r3, [pc, #108]	; (8004dc4 <GPIO_DeInit+0x114>)
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d108      	bne.n	8004d6e <GPIO_DeInit+0xbe>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8004d5c:	2040      	movs	r0, #64	; 0x40
 8004d5e:	2101      	movs	r1, #1
 8004d60:	f7ff fde2 	bl	8004928 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8004d64:	2040      	movs	r0, #64	; 0x40
 8004d66:	2100      	movs	r1, #0
 8004d68:	f7ff fdde 	bl	8004928 <RCC_AHB1PeriphResetCmd>
 8004d6c:	e01a      	b.n	8004da4 <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOH)
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	4b15      	ldr	r3, [pc, #84]	; (8004dc8 <GPIO_DeInit+0x118>)
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d108      	bne.n	8004d88 <GPIO_DeInit+0xd8>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 8004d76:	2080      	movs	r0, #128	; 0x80
 8004d78:	2101      	movs	r1, #1
 8004d7a:	f7ff fdd5 	bl	8004928 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 8004d7e:	2080      	movs	r0, #128	; 0x80
 8004d80:	2100      	movs	r1, #0
 8004d82:	f7ff fdd1 	bl	8004928 <RCC_AHB1PeriphResetCmd>
 8004d86:	e00d      	b.n	8004da4 <GPIO_DeInit+0xf4>
  }
  else
  {
    if (GPIOx == GPIOI)
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	4b10      	ldr	r3, [pc, #64]	; (8004dcc <GPIO_DeInit+0x11c>)
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d109      	bne.n	8004da4 <GPIO_DeInit+0xf4>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 8004d90:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004d94:	2101      	movs	r1, #1
 8004d96:	f7ff fdc7 	bl	8004928 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8004d9a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004d9e:	2100      	movs	r1, #0
 8004da0:	f7ff fdc2 	bl	8004928 <RCC_AHB1PeriphResetCmd>
    }
  }
}
 8004da4:	3708      	adds	r7, #8
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	40020000 	.word	0x40020000
 8004db0:	40020400 	.word	0x40020400
 8004db4:	40020800 	.word	0x40020800
 8004db8:	40020c00 	.word	0x40020c00
 8004dbc:	40021000 	.word	0x40021000
 8004dc0:	40021400 	.word	0x40021400
 8004dc4:	40021800 	.word	0x40021800
 8004dc8:	40021c00 	.word	0x40021c00
 8004dcc:	40022000 	.word	0x40022000

08004dd0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b087      	sub	sp, #28
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	617b      	str	r3, [r7, #20]
 8004dde:	2300      	movs	r3, #0
 8004de0:	613b      	str	r3, [r7, #16]
 8004de2:	2300      	movs	r3, #0
 8004de4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8004de6:	2300      	movs	r3, #0
 8004de8:	617b      	str	r3, [r7, #20]
 8004dea:	e076      	b.n	8004eda <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	2201      	movs	r2, #1
 8004df0:	fa02 f303 	lsl.w	r3, r2, r3
 8004df4:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d165      	bne.n	8004ed4 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	005b      	lsls	r3, r3, #1
 8004e10:	2103      	movs	r1, #3
 8004e12:	fa01 f303 	lsl.w	r3, r1, r3
 8004e16:	43db      	mvns	r3, r3
 8004e18:	401a      	ands	r2, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	791b      	ldrb	r3, [r3, #4]
 8004e26:	4619      	mov	r1, r3
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	005b      	lsls	r3, r3, #1
 8004e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e30:	431a      	orrs	r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	791b      	ldrb	r3, [r3, #4]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d003      	beq.n	8004e46 <GPIO_Init+0x76>
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	791b      	ldrb	r3, [r3, #4]
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d12e      	bne.n	8004ea4 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	689a      	ldr	r2, [r3, #8]
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	2103      	movs	r1, #3
 8004e50:	fa01 f303 	lsl.w	r3, r1, r3
 8004e54:	43db      	mvns	r3, r3
 8004e56:	401a      	ands	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689a      	ldr	r2, [r3, #8]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	795b      	ldrb	r3, [r3, #5]
 8004e64:	4619      	mov	r1, r3
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	005b      	lsls	r3, r3, #1
 8004e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e6e:	431a      	orrs	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685a      	ldr	r2, [r3, #4]
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	2101      	movs	r1, #1
 8004e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e82:	43db      	mvns	r3, r3
 8004e84:	401a      	ands	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685a      	ldr	r2, [r3, #4]
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	799b      	ldrb	r3, [r3, #6]
 8004e92:	4619      	mov	r1, r3
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	fa01 f303 	lsl.w	r3, r1, r3
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	431a      	orrs	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	68da      	ldr	r2, [r3, #12]
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	005b      	lsls	r3, r3, #1
 8004eae:	2103      	movs	r1, #3
 8004eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8004eb4:	43db      	mvns	r3, r3
 8004eb6:	401a      	ands	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	68da      	ldr	r2, [r3, #12]
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	79db      	ldrb	r3, [r3, #7]
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	fa01 f303 	lsl.w	r3, r1, r3
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	617b      	str	r3, [r7, #20]
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	2b0f      	cmp	r3, #15
 8004ede:	d985      	bls.n	8004dec <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8004ee0:	371c      	adds	r7, #28
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop

08004eec <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004efa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	71da      	strb	r2, [r3, #7]
}
 8004f14:	370c      	adds	r7, #12
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop

08004f20 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b085      	sub	sp, #20
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	460b      	mov	r3, r1
 8004f2a:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0x00010000;
 8004f2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f30:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8004f32:	887a      	ldrh	r2, [r7, #2]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8004f40:	887a      	ldrh	r2, [r7, #2]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	69db      	ldr	r3, [r3, #28]
 8004f50:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	69db      	ldr	r3, [r3, #28]
 8004f56:	60fb      	str	r3, [r7, #12]
}
 8004f58:	3714      	adds	r7, #20
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop

08004f64 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8004f70:	2300      	movs	r3, #0
 8004f72:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	691a      	ldr	r2, [r3, #16]
 8004f78:	887b      	ldrh	r3, [r7, #2]
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d002      	beq.n	8004f86 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8004f80:	2301      	movs	r3, #1
 8004f82:	73fb      	strb	r3, [r7, #15]
 8004f84:	e001      	b.n	8004f8a <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8004f86:	2300      	movs	r3, #0
 8004f88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3714      	adds	r7, #20
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <GPIO_ReadInputData>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for 
  *                STM32F40xx/41xx and STM32F427x/437x devices. 
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	b29b      	uxth	r3, r3
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop

08004fb4 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	695a      	ldr	r2, [r3, #20]
 8004fc8:	887b      	ldrh	r3, [r7, #2]
 8004fca:	4013      	ands	r3, r2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d002      	beq.n	8004fd6 <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	73fb      	strb	r3, [r7, #15]
 8004fd4:	e001      	b.n	8004fda <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3714      	adds	r7, #20
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <GPIO_ReadOutputData>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for 
  *                STM32F40xx/41xx and STM32F427x/437x devices.  
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	695b      	ldr	r3, [r3, #20]
 8004ff4:	b29b      	uxth	r3, r3
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop

08005004 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	460b      	mov	r3, r1
 800500e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	887a      	ldrh	r2, [r7, #2]
 8005014:	831a      	strh	r2, [r3, #24]
}
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	460b      	mov	r3, r1
 800502a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	887a      	ldrh	r2, [r7, #2]
 8005030:	835a      	strh	r2, [r3, #26]
}
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	4613      	mov	r3, r2
 8005046:	460a      	mov	r2, r1
 8005048:	807a      	strh	r2, [r7, #2]
 800504a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 800504c:	787b      	ldrb	r3, [r7, #1]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d003      	beq.n	800505a <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	887a      	ldrh	r2, [r7, #2]
 8005056:	831a      	strh	r2, [r3, #24]
 8005058:	e002      	b.n	8005060 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	887a      	ldrh	r2, [r7, #2]
 800505e:	835a      	strh	r2, [r3, #26]
  }
}
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop

0800506c <GPIO_Write>:
  *                STM32F40xx/41xx and STM32F427x/437x devices.  
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	460b      	mov	r3, r1
 8005076:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 8005078:	887a      	ldrh	r2, [r7, #2]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	615a      	str	r2, [r3, #20]
}
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <GPIO_ToggleBits>:
  *                STM32F40xx/41xx and STM32F427x/437x devices.  
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	460b      	mov	r3, r1
 8005092:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	695a      	ldr	r2, [r3, #20]
 8005098:	887b      	ldrh	r3, [r7, #2]
 800509a:	405a      	eors	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	615a      	str	r2, [r3, #20]
}
 80050a0:	370c      	adds	r7, #12
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop

080050ac <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	4613      	mov	r3, r2
 80050b6:	460a      	mov	r2, r1
 80050b8:	807a      	strh	r2, [r7, #2]
 80050ba:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80050bc:	2300      	movs	r3, #0
 80050be:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80050c0:	2300      	movs	r3, #0
 80050c2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80050c4:	787a      	ldrb	r2, [r7, #1]
 80050c6:	887b      	ldrh	r3, [r7, #2]
 80050c8:	f003 0307 	and.w	r3, r3, #7
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	fa02 f303 	lsl.w	r3, r2, r3
 80050d2:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80050d4:	887b      	ldrh	r3, [r7, #2]
 80050d6:	08db      	lsrs	r3, r3, #3
 80050d8:	b29b      	uxth	r3, r3
 80050da:	461a      	mov	r2, r3
 80050dc:	887b      	ldrh	r3, [r7, #2]
 80050de:	08db      	lsrs	r3, r3, #3
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	4619      	mov	r1, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	3108      	adds	r1, #8
 80050e8:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80050ec:	887b      	ldrh	r3, [r7, #2]
 80050ee:	f003 0307 	and.w	r3, r3, #7
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	200f      	movs	r0, #15
 80050f6:	fa00 f303 	lsl.w	r3, r0, r3
 80050fa:	43db      	mvns	r3, r3
 80050fc:	4019      	ands	r1, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	3208      	adds	r2, #8
 8005102:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8005106:	887b      	ldrh	r3, [r7, #2]
 8005108:	08db      	lsrs	r3, r3, #3
 800510a:	b29b      	uxth	r3, r3
 800510c:	461a      	mov	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	3208      	adds	r2, #8
 8005112:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	4313      	orrs	r3, r2
 800511a:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800511c:	887b      	ldrh	r3, [r7, #2]
 800511e:	08db      	lsrs	r3, r3, #3
 8005120:	b29b      	uxth	r3, r3
 8005122:	461a      	mov	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	3208      	adds	r2, #8
 8005128:	68b9      	ldr	r1, [r7, #8]
 800512a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800512e:	3714      	adds	r7, #20
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
 8005138:	b480      	push	{r7}
 800513a:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
 800513c:	4b09      	ldr	r3, [pc, #36]	; (8005164 <EXTI_DeInit+0x2c>)
 800513e:	2200      	movs	r2, #0
 8005140:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
 8005142:	4b08      	ldr	r3, [pc, #32]	; (8005164 <EXTI_DeInit+0x2c>)
 8005144:	2200      	movs	r2, #0
 8005146:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
 8005148:	4b06      	ldr	r3, [pc, #24]	; (8005164 <EXTI_DeInit+0x2c>)
 800514a:	2200      	movs	r2, #0
 800514c:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
 800514e:	4b05      	ldr	r3, [pc, #20]	; (8005164 <EXTI_DeInit+0x2c>)
 8005150:	2200      	movs	r2, #0
 8005152:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x007FFFFF;
 8005154:	4b03      	ldr	r3, [pc, #12]	; (8005164 <EXTI_DeInit+0x2c>)
 8005156:	4a04      	ldr	r2, [pc, #16]	; (8005168 <EXTI_DeInit+0x30>)
 8005158:	615a      	str	r2, [r3, #20]
}
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	40013c00 	.word	0x40013c00
 8005168:	007fffff 	.word	0x007fffff

0800516c <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8005174:	2300      	movs	r3, #0
 8005176:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8005178:	4b32      	ldr	r3, [pc, #200]	; (8005244 <EXTI_Init+0xd8>)
 800517a:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	799b      	ldrb	r3, [r3, #6]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d04d      	beq.n	8005220 <EXTI_Init+0xb4>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8005184:	4b2f      	ldr	r3, [pc, #188]	; (8005244 <EXTI_Init+0xd8>)
 8005186:	4a2f      	ldr	r2, [pc, #188]	; (8005244 <EXTI_Init+0xd8>)
 8005188:	6811      	ldr	r1, [r2, #0]
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	6812      	ldr	r2, [r2, #0]
 800518e:	43d2      	mvns	r2, r2
 8005190:	400a      	ands	r2, r1
 8005192:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8005194:	4b2b      	ldr	r3, [pc, #172]	; (8005244 <EXTI_Init+0xd8>)
 8005196:	4a2b      	ldr	r2, [pc, #172]	; (8005244 <EXTI_Init+0xd8>)
 8005198:	6851      	ldr	r1, [r2, #4]
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	6812      	ldr	r2, [r2, #0]
 800519e:	43d2      	mvns	r2, r2
 80051a0:	400a      	ands	r2, r1
 80051a2:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	791b      	ldrb	r3, [r3, #4]
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	4413      	add	r3, r2
 80051ac:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	6811      	ldr	r1, [r2, #0]
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	6812      	ldr	r2, [r2, #0]
 80051b8:	430a      	orrs	r2, r1
 80051ba:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 80051bc:	4b21      	ldr	r3, [pc, #132]	; (8005244 <EXTI_Init+0xd8>)
 80051be:	4a21      	ldr	r2, [pc, #132]	; (8005244 <EXTI_Init+0xd8>)
 80051c0:	6891      	ldr	r1, [r2, #8]
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	6812      	ldr	r2, [r2, #0]
 80051c6:	43d2      	mvns	r2, r2
 80051c8:	400a      	ands	r2, r1
 80051ca:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80051cc:	4b1d      	ldr	r3, [pc, #116]	; (8005244 <EXTI_Init+0xd8>)
 80051ce:	4a1d      	ldr	r2, [pc, #116]	; (8005244 <EXTI_Init+0xd8>)
 80051d0:	68d1      	ldr	r1, [r2, #12]
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	6812      	ldr	r2, [r2, #0]
 80051d6:	43d2      	mvns	r2, r2
 80051d8:	400a      	ands	r2, r1
 80051da:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	795b      	ldrb	r3, [r3, #5]
 80051e0:	2b10      	cmp	r3, #16
 80051e2:	d10e      	bne.n	8005202 <EXTI_Init+0x96>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80051e4:	4b17      	ldr	r3, [pc, #92]	; (8005244 <EXTI_Init+0xd8>)
 80051e6:	4a17      	ldr	r2, [pc, #92]	; (8005244 <EXTI_Init+0xd8>)
 80051e8:	6891      	ldr	r1, [r2, #8]
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	6812      	ldr	r2, [r2, #0]
 80051ee:	430a      	orrs	r2, r1
 80051f0:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 80051f2:	4b14      	ldr	r3, [pc, #80]	; (8005244 <EXTI_Init+0xd8>)
 80051f4:	4a13      	ldr	r2, [pc, #76]	; (8005244 <EXTI_Init+0xd8>)
 80051f6:	68d1      	ldr	r1, [r2, #12]
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	6812      	ldr	r2, [r2, #0]
 80051fc:	430a      	orrs	r2, r1
 80051fe:	60da      	str	r2, [r3, #12]
 8005200:	e01b      	b.n	800523a <EXTI_Init+0xce>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 8005202:	4b10      	ldr	r3, [pc, #64]	; (8005244 <EXTI_Init+0xd8>)
 8005204:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	795b      	ldrb	r3, [r3, #5]
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	4413      	add	r3, r2
 800520e:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	6811      	ldr	r1, [r2, #0]
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	6812      	ldr	r2, [r2, #0]
 800521a:	430a      	orrs	r2, r1
 800521c:	601a      	str	r2, [r3, #0]
 800521e:	e00c      	b.n	800523a <EXTI_Init+0xce>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	791b      	ldrb	r3, [r3, #4]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	4413      	add	r3, r2
 8005228:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	6811      	ldr	r1, [r2, #0]
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	6812      	ldr	r2, [r2, #0]
 8005234:	43d2      	mvns	r2, r2
 8005236:	400a      	ands	r2, r1
 8005238:	601a      	str	r2, [r3, #0]
  }
}
 800523a:	3714      	adds	r7, #20
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr
 8005244:	40013c00 	.word	0x40013c00

08005248 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	220c      	movs	r2, #12
 8005260:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	719a      	strb	r2, [r3, #6]
}
 8005268:	370c      	adds	r7, #12
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop

08005274 <EXTI_GenerateSWInterrupt>:
  *         will be generated.
  *         This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
 800527c:	4b05      	ldr	r3, [pc, #20]	; (8005294 <EXTI_GenerateSWInterrupt+0x20>)
 800527e:	4a05      	ldr	r2, [pc, #20]	; (8005294 <EXTI_GenerateSWInterrupt+0x20>)
 8005280:	6911      	ldr	r1, [r2, #16]
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	430a      	orrs	r2, r1
 8005286:	611a      	str	r2, [r3, #16]
}
 8005288:	370c      	adds	r7, #12
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	40013c00 	.word	0x40013c00

08005298 <EXTI_GetFlagStatus>:
  * @param  EXTI_Line: specifies the EXTI line flag to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80052a0:	2300      	movs	r3, #0
 80052a2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 80052a4:	4b08      	ldr	r3, [pc, #32]	; (80052c8 <EXTI_GetFlagStatus+0x30>)
 80052a6:	695a      	ldr	r2, [r3, #20]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4013      	ands	r3, r2
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d002      	beq.n	80052b6 <EXTI_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 80052b0:	2301      	movs	r3, #1
 80052b2:	73fb      	strb	r3, [r7, #15]
 80052b4:	e001      	b.n	80052ba <EXTI_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 80052b6:	2300      	movs	r3, #0
 80052b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80052ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3714      	adds	r7, #20
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr
 80052c8:	40013c00 	.word	0x40013c00

080052cc <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80052d4:	4b03      	ldr	r3, [pc, #12]	; (80052e4 <EXTI_ClearFlag+0x18>)
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	615a      	str	r2, [r3, #20]
}
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr
 80052e4:	40013c00 	.word	0x40013c00

080052e8 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 80052f0:	2300      	movs	r3, #0
 80052f2:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 80052f4:	2300      	movs	r3, #0
 80052f6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 80052f8:	4b0c      	ldr	r3, [pc, #48]	; (800532c <EXTI_GetITStatus+0x44>)
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4013      	ands	r3, r2
 8005300:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8005302:	4b0a      	ldr	r3, [pc, #40]	; (800532c <EXTI_GetITStatus+0x44>)
 8005304:	695a      	ldr	r2, [r3, #20]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4013      	ands	r3, r2
 800530a:	2b00      	cmp	r3, #0
 800530c:	d005      	beq.n	800531a <EXTI_GetITStatus+0x32>
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d002      	beq.n	800531a <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 8005314:	2301      	movs	r3, #1
 8005316:	73fb      	strb	r3, [r7, #15]
 8005318:	e001      	b.n	800531e <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 800531a:	2300      	movs	r3, #0
 800531c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800531e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005320:	4618      	mov	r0, r3
 8005322:	3714      	adds	r7, #20
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr
 800532c:	40013c00 	.word	0x40013c00

08005330 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8005338:	4b03      	ldr	r3, [pc, #12]	; (8005348 <EXTI_ClearITPendingBit+0x18>)
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	615a      	str	r2, [r3, #20]
}
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr
 8005348:	40013c00 	.word	0x40013c00

0800534c <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	af00      	add	r7, sp, #0
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 8005350:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005354:	2101      	movs	r1, #1
 8005356:	f7ff fb5f 	bl	8004a18 <RCC_APB2PeriphResetCmd>
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 800535a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800535e:	2100      	movs	r1, #0
 8005360:	f7ff fb5a 	bl	8004a18 <RCC_APB2PeriphResetCmd>
}
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop

08005368 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8005372:	2300      	movs	r3, #0
 8005374:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8005376:	2300      	movs	r3, #0
 8005378:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8005386:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800538a:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	791b      	ldrb	r3, [r3, #4]
 8005390:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	681b      	ldr	r3, [r3, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8005396:	4313      	orrs	r3, r2
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	4313      	orrs	r3, r2
 800539c:	60fb      	str	r3, [r7, #12]
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	4b17      	ldr	r3, [pc, #92]	; (800540c <ADC_Init+0xa4>)
 80053ae:	4013      	ands	r3, r2
 80053b0:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	68db      	ldr	r3, [r3, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80053ba:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	689b      	ldr	r3, [r3, #8]
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 80053c0:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	795b      	ldrb	r3, [r3, #5]
 80053c6:	005b      	lsls	r3, r3, #1
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80053c8:	4313      	orrs	r3, r2
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	60fb      	str	r3, [r7, #12]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053da:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80053e2:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	7d1b      	ldrb	r3, [r3, #20]
 80053e8:	3b01      	subs	r3, #1
 80053ea:	b2da      	uxtb	r2, r3
 80053ec:	7afb      	ldrb	r3, [r7, #11]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 80053f2:	7afb      	ldrb	r3, [r7, #11]
 80053f4:	051b      	lsls	r3, r3, #20
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005402:	3714      	adds	r7, #20
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr
 800540c:	c0fff7fd 	.word	0xc0fff7fd

08005410 <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	751a      	strb	r2, [r3, #20]
}
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 8005454:	2300      	movs	r3, #0
 8005456:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8005458:	4b0e      	ldr	r3, [pc, #56]	; (8005494 <ADC_CommonInit+0x48>)
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	4b0d      	ldr	r3, [pc, #52]	; (8005498 <ADC_CommonInit+0x4c>)
 8005462:	4013      	ands	r3, r2
 8005464:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	685b      	ldr	r3, [r3, #4]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 800546e:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	689b      	ldr	r3, [r3, #8]
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8005474:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	68db      	ldr	r3, [r3, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 800547a:	4313      	orrs	r3, r2
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	4313      	orrs	r3, r2
 8005480:	60fb      	str	r3, [r7, #12]
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 8005482:	4b04      	ldr	r3, [pc, #16]	; (8005494 <ADC_CommonInit+0x48>)
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	605a      	str	r2, [r3, #4]
}
 8005488:	3714      	adds	r7, #20
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	40012300 	.word	0x40012300
 8005498:	fffc30e0 	.word	0xfffc30e0

0800549c <ADC_CommonStructInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_Prescaler member */
  ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	605a      	str	r2, [r3, #4]

  /* Initialize the ADC_DMAAccessMode member */
  ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_TwoSamplingDelay member */
  ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	60da      	str	r2, [r3, #12]
}
 80054bc:	370c      	adds	r7, #12
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop

080054c8 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	460b      	mov	r3, r1
 80054d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80054d4:	78fb      	ldrb	r3, [r7, #3]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d006      	beq.n	80054e8 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f043 0201 	orr.w	r2, r3, #1
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	609a      	str	r2, [r3, #8]
 80054e6:	e005      	b.n	80054f4 <ADC_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f023 0201 	bic.w	r2, r3, #1
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	609a      	str	r2, [r3, #8]
  }
}
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop

08005500 <ADC_AnalogWatchdogCmd>:
  *            @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and injected channels
  *            @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
  * @retval None	  
  */
void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800550a:	2300      	movs	r3, #0
 800550c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
  
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	60fb      	str	r3, [r7, #12]
  
  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  tmpreg &= CR1_AWDMode_RESET;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800551a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800551e:	60fb      	str	r3, [r7, #12]
  
  /* Set the analog watchdog enable mode */
  tmpreg |= ADC_AnalogWatchdog;
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	4313      	orrs	r3, r2
 8005526:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	605a      	str	r2, [r3, #4]
}
 800552e:	3714      	adds	r7, #20
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <ADC_AnalogWatchdogThresholdsConfig>:
  *          This parameter must be a 12-bit value.
  * @retval None
  */
void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
                                        uint16_t LowThreshold)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	4613      	mov	r3, r2
 8005542:	460a      	mov	r2, r1
 8005544:	807a      	strh	r2, [r7, #2]
 8005546:	803b      	strh	r3, [r7, #0]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));
  
  /* Set the ADCx high threshold */
  ADCx->HTR = HighThreshold;
 8005548:	887a      	ldrh	r2, [r7, #2]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the ADCx low threshold */
  ADCx->LTR = LowThreshold;
 800554e:	883a      	ldrh	r2, [r7, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005554:	370c      	adds	r7, #12
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop

08005560 <ADC_AnalogWatchdogSingleChannelConfig>:
  *            @arg ADC_Channel_17: ADC Channel17 selected
  *            @arg ADC_Channel_18: ADC Channel18 selected
  * @retval None
  */
void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
{
 8005560:	b480      	push	{r7}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	460b      	mov	r3, r1
 800556a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 800556c:	2300      	movs	r3, #0
 800556e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	60fb      	str	r3, [r7, #12]
  
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= CR1_AWDCH_RESET;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f023 031f 	bic.w	r3, r3, #31
 800557c:	60fb      	str	r3, [r7, #12]
  
  /* Set the Analog watchdog channel */
  tmpreg |= ADC_Channel;
 800557e:	78fb      	ldrb	r3, [r7, #3]
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	4313      	orrs	r3, r2
 8005584:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	605a      	str	r2, [r3, #4]
}
 800558c:	3714      	adds	r7, #20
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop

08005598 <ADC_TempSensorVrefintCmd>:
  * @param  NewState: new state of the temperature sensor and Vrefint channels.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	4603      	mov	r3, r0
 80055a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80055a2:	79fb      	ldrb	r3, [r7, #7]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d006      	beq.n	80055b6 <ADC_TempSensorVrefintCmd+0x1e>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 80055a8:	4b08      	ldr	r3, [pc, #32]	; (80055cc <ADC_TempSensorVrefintCmd+0x34>)
 80055aa:	4a08      	ldr	r2, [pc, #32]	; (80055cc <ADC_TempSensorVrefintCmd+0x34>)
 80055ac:	6852      	ldr	r2, [r2, #4]
 80055ae:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80055b2:	605a      	str	r2, [r3, #4]
 80055b4:	e005      	b.n	80055c2 <ADC_TempSensorVrefintCmd+0x2a>
  }
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 80055b6:	4b05      	ldr	r3, [pc, #20]	; (80055cc <ADC_TempSensorVrefintCmd+0x34>)
 80055b8:	4a04      	ldr	r2, [pc, #16]	; (80055cc <ADC_TempSensorVrefintCmd+0x34>)
 80055ba:	6852      	ldr	r2, [r2, #4]
 80055bc:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80055c0:	605a      	str	r2, [r3, #4]
  }
}
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr
 80055cc:	40012300 	.word	0x40012300

080055d0 <ADC_VBATCmd>:
  * @param  NewState: new state of the VBAT channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_VBATCmd(FunctionalState NewState)                             
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	4603      	mov	r3, r0
 80055d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80055da:	79fb      	ldrb	r3, [r7, #7]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d006      	beq.n	80055ee <ADC_VBATCmd+0x1e>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_VBATE;
 80055e0:	4b08      	ldr	r3, [pc, #32]	; (8005604 <ADC_VBATCmd+0x34>)
 80055e2:	4a08      	ldr	r2, [pc, #32]	; (8005604 <ADC_VBATCmd+0x34>)
 80055e4:	6852      	ldr	r2, [r2, #4]
 80055e6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80055ea:	605a      	str	r2, [r3, #4]
 80055ec:	e005      	b.n	80055fa <ADC_VBATCmd+0x2a>
  }
  else
  {
    /* Disable the VBAT channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_VBATE);
 80055ee:	4b05      	ldr	r3, [pc, #20]	; (8005604 <ADC_VBATCmd+0x34>)
 80055f0:	4a04      	ldr	r2, [pc, #16]	; (8005604 <ADC_VBATCmd+0x34>)
 80055f2:	6852      	ldr	r2, [r2, #4]
 80055f4:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80055f8:	605a      	str	r2, [r3, #4]
  }
}
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr
 8005604:	40012300 	.word	0x40012300

08005608 <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	70f9      	strb	r1, [r7, #3]
 8005612:	70ba      	strb	r2, [r7, #2]
 8005614:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8005616:	2300      	movs	r3, #0
 8005618:	60fb      	str	r3, [r7, #12]
 800561a:	2300      	movs	r3, #0
 800561c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 800561e:	78fb      	ldrb	r3, [r7, #3]
 8005620:	2b09      	cmp	r3, #9
 8005622:	d923      	bls.n	800566c <ADC_RegularChannelConfig+0x64>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 800562a:	78fb      	ldrb	r3, [r7, #3]
 800562c:	f1a3 020a 	sub.w	r2, r3, #10
 8005630:	4613      	mov	r3, r2
 8005632:	005b      	lsls	r3, r3, #1
 8005634:	4413      	add	r3, r2
 8005636:	2207      	movs	r2, #7
 8005638:	fa02 f303 	lsl.w	r3, r2, r3
 800563c:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	43db      	mvns	r3, r3
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	4013      	ands	r3, r2
 8005646:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8005648:	7879      	ldrb	r1, [r7, #1]
 800564a:	78fb      	ldrb	r3, [r7, #3]
 800564c:	f1a3 020a 	sub.w	r2, r3, #10
 8005650:	4613      	mov	r3, r2
 8005652:	005b      	lsls	r3, r3, #1
 8005654:	4413      	add	r3, r2
 8005656:	fa01 f303 	lsl.w	r3, r1, r3
 800565a:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	4313      	orrs	r3, r2
 8005662:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	60da      	str	r2, [r3, #12]
 800566a:	e01e      	b.n	80056aa <ADC_RegularChannelConfig+0xa2>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8005672:	78fa      	ldrb	r2, [r7, #3]
 8005674:	4613      	mov	r3, r2
 8005676:	005b      	lsls	r3, r3, #1
 8005678:	4413      	add	r3, r2
 800567a:	2207      	movs	r2, #7
 800567c:	fa02 f303 	lsl.w	r3, r2, r3
 8005680:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	43db      	mvns	r3, r3
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	4013      	ands	r3, r2
 800568a:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 800568c:	7879      	ldrb	r1, [r7, #1]
 800568e:	78fa      	ldrb	r2, [r7, #3]
 8005690:	4613      	mov	r3, r2
 8005692:	005b      	lsls	r3, r3, #1
 8005694:	4413      	add	r3, r2
 8005696:	fa01 f303 	lsl.w	r3, r1, r3
 800569a:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80056aa:	78bb      	ldrb	r3, [r7, #2]
 80056ac:	2b06      	cmp	r3, #6
 80056ae:	d821      	bhi.n	80056f4 <ADC_RegularChannelConfig+0xec>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056b4:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 80056b6:	78bb      	ldrb	r3, [r7, #2]
 80056b8:	1e5a      	subs	r2, r3, #1
 80056ba:	4613      	mov	r3, r2
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	4413      	add	r3, r2
 80056c0:	221f      	movs	r2, #31
 80056c2:	fa02 f303 	lsl.w	r3, r2, r3
 80056c6:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	43db      	mvns	r3, r3
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	4013      	ands	r3, r2
 80056d0:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 80056d2:	78f9      	ldrb	r1, [r7, #3]
 80056d4:	78bb      	ldrb	r3, [r7, #2]
 80056d6:	1e5a      	subs	r2, r3, #1
 80056d8:	4613      	mov	r3, r2
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	4413      	add	r3, r2
 80056de:	fa01 f303 	lsl.w	r3, r1, r3
 80056e2:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	635a      	str	r2, [r3, #52]	; 0x34
 80056f2:	e047      	b.n	8005784 <ADC_RegularChannelConfig+0x17c>
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 80056f4:	78bb      	ldrb	r3, [r7, #2]
 80056f6:	2b0c      	cmp	r3, #12
 80056f8:	d821      	bhi.n	800573e <ADC_RegularChannelConfig+0x136>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fe:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8005700:	78bb      	ldrb	r3, [r7, #2]
 8005702:	1fda      	subs	r2, r3, #7
 8005704:	4613      	mov	r3, r2
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	4413      	add	r3, r2
 800570a:	221f      	movs	r2, #31
 800570c:	fa02 f303 	lsl.w	r3, r2, r3
 8005710:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	43db      	mvns	r3, r3
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	4013      	ands	r3, r2
 800571a:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 800571c:	78f9      	ldrb	r1, [r7, #3]
 800571e:	78bb      	ldrb	r3, [r7, #2]
 8005720:	1fda      	subs	r2, r3, #7
 8005722:	4613      	mov	r3, r2
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	4413      	add	r3, r2
 8005728:	fa01 f303 	lsl.w	r3, r1, r3
 800572c:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	4313      	orrs	r3, r2
 8005734:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	631a      	str	r2, [r3, #48]	; 0x30
 800573c:	e022      	b.n	8005784 <ADC_RegularChannelConfig+0x17c>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005742:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8005744:	78bb      	ldrb	r3, [r7, #2]
 8005746:	f1a3 020d 	sub.w	r2, r3, #13
 800574a:	4613      	mov	r3, r2
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	4413      	add	r3, r2
 8005750:	221f      	movs	r2, #31
 8005752:	fa02 f303 	lsl.w	r3, r2, r3
 8005756:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	43db      	mvns	r3, r3
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	4013      	ands	r3, r2
 8005760:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8005762:	78f9      	ldrb	r1, [r7, #3]
 8005764:	78bb      	ldrb	r3, [r7, #2]
 8005766:	f1a3 020d 	sub.w	r2, r3, #13
 800576a:	4613      	mov	r3, r2
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	4413      	add	r3, r2
 8005770:	fa01 f303 	lsl.w	r3, r1, r3
 8005774:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	4313      	orrs	r3, r2
 800577c:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8005784:	3714      	adds	r7, #20
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop

08005790 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	609a      	str	r2, [r3, #8]
}
 80057a4:	370c      	adds	r7, #12
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop

080057b0 <ADC_GetSoftwareStartConvStatus>:
  * @brief  Gets the selected ADC Software start regular conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80057b8:	2300      	movs	r3, #0
 80057ba:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Check the status of SWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d002      	beq.n	80057ce <ADC_GetSoftwareStartConvStatus+0x1e>
  {
    /* SWSTART bit is set */
    bitstatus = SET;
 80057c8:	2301      	movs	r3, #1
 80057ca:	73fb      	strb	r3, [r7, #15]
 80057cc:	e001      	b.n	80057d2 <ADC_GetSoftwareStartConvStatus+0x22>
  }
  else
  {
    /* SWSTART bit is reset */
    bitstatus = RESET;
 80057ce:	2300      	movs	r3, #0
 80057d0:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the SWSTART bit status */
  return  bitstatus;
 80057d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3714      	adds	r7, #20
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <ADC_EOCOnEachRegularChannelCmd>:
  * @param  NewState: new state of the selected ADC EOC flag rising
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_EOCOnEachRegularChannelCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	460b      	mov	r3, r1
 80057ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80057ec:	78fb      	ldrb	r3, [r7, #3]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d006      	beq.n	8005800 <ADC_EOCOnEachRegularChannelCmd+0x20>
  {
    /* Enable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	609a      	str	r2, [r3, #8]
 80057fe:	e005      	b.n	800580c <ADC_EOCOnEachRegularChannelCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	609a      	str	r2, [r3, #8]
  }
}
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop

08005818 <ADC_ContinuousModeCmd>:
  * @param  NewState: new state of the selected ADC continuous conversion mode
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ContinuousModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	460b      	mov	r3, r1
 8005822:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005824:	78fb      	ldrb	r3, [r7, #3]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d006      	beq.n	8005838 <ADC_ContinuousModeCmd+0x20>
  {
    /* Enable the selected ADC continuous conversion mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f043 0202 	orr.w	r2, r3, #2
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	609a      	str	r2, [r3, #8]
 8005836:	e005      	b.n	8005844 <ADC_ContinuousModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC continuous conversion mode */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	f023 0202 	bic.w	r2, r3, #2
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	609a      	str	r2, [r3, #8]
  }
}
 8005844:	370c      	adds	r7, #12
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop

08005850 <ADC_DiscModeChannelCountConfig>:
  * @param  Number: specifies the discontinuous mode regular channel count value.
  *          This number must be between 1 and 8.
  * @retval None
  */
void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	460b      	mov	r3, r1
 800585a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 800585c:	2300      	movs	r3, #0
 800585e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 8005860:	2300      	movs	r3, #0
 8005862:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
  
  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_RESET;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005870:	60fb      	str	r3, [r7, #12]
  
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
 8005872:	78fb      	ldrb	r3, [r7, #3]
 8005874:	3b01      	subs	r3, #1
 8005876:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 13;
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	035b      	lsls	r3, r3, #13
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	4313      	orrs	r3, r2
 8005880:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg1;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	605a      	str	r2, [r3, #4]
}
 8005888:	3714      	adds	r7, #20
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop

08005894 <ADC_DiscModeCmd>:
  *         regular group channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	460b      	mov	r3, r1
 800589e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80058a0:	78fb      	ldrb	r3, [r7, #3]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d006      	beq.n	80058b4 <ADC_DiscModeCmd+0x20>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	605a      	str	r2, [r3, #4]
 80058b2:	e005      	b.n	80058c0 <ADC_DiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	605a      	str	r2, [r3, #4]
  }
}
 80058c0:	370c      	adds	r7, #12
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop

080058cc <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058d8:	b29b      	uxth	r3, r3
}
 80058da:	4618      	mov	r0, r3
 80058dc:	370c      	adds	r7, #12
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop

080058e8 <ADC_GetMultiModeConversionValue>:
  * @note   In triple mode, the value returned by this function is as following
  *           Data[15:0] : these bits contain alternatively the regular data of ADC1, ADC3 and ADC2.
  *           Data[31:16]: these bits contain alternatively the regular data of ADC2, ADC1 and ADC3.           
  */
uint32_t ADC_GetMultiModeConversionValue(void)
{
 80058e8:	b480      	push	{r7}
 80058ea:	af00      	add	r7, sp, #0
  /* Return the multi mode conversion value */
  return (*(__IO uint32_t *) CDR_ADDRESS);
 80058ec:	4b03      	ldr	r3, [pc, #12]	; (80058fc <ADC_GetMultiModeConversionValue+0x14>)
 80058ee:	681b      	ldr	r3, [r3, #0]
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	40012308 	.word	0x40012308

08005900 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	460b      	mov	r3, r1
 800590a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800590c:	78fb      	ldrb	r3, [r7, #3]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d006      	beq.n	8005920 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	609a      	str	r2, [r3, #8]
 800591e:	e005      	b.n	800592c <ADC_DMACmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	609a      	str	r2, [r3, #8]
  }
}
 800592c:	370c      	adds	r7, #12
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop

08005938 <ADC_DMARequestAfterLastTransferCmd>:
  * @param  NewState: new state of the selected ADC DMA request after last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	460b      	mov	r3, r1
 8005942:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005944:	78fb      	ldrb	r3, [r7, #3]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d006      	beq.n	8005958 <ADC_DMARequestAfterLastTransferCmd+0x20>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	609a      	str	r2, [r3, #8]
 8005956:	e005      	b.n	8005964 <ADC_DMARequestAfterLastTransferCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	609a      	str	r2, [r3, #8]
  }
}
 8005964:	370c      	adds	r7, #12
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop

08005970 <ADC_MultiModeDMARequestAfterLastTransferCmd>:
  *         by ADC_CommonInitStruct.ADC_DMAAccessMode structure member) is 
  *          ADC_DMAAccessMode_1, ADC_DMAAccessMode_2 or ADC_DMAAccessMode_3.     
  * @retval None
  */
void ADC_MultiModeDMARequestAfterLastTransferCmd(FunctionalState NewState)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	4603      	mov	r3, r0
 8005978:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800597a:	79fb      	ldrb	r3, [r7, #7]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d006      	beq.n	800598e <ADC_MultiModeDMARequestAfterLastTransferCmd+0x1e>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 8005980:	4b08      	ldr	r3, [pc, #32]	; (80059a4 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x34>)
 8005982:	4a08      	ldr	r2, [pc, #32]	; (80059a4 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x34>)
 8005984:	6852      	ldr	r2, [r2, #4]
 8005986:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800598a:	605a      	str	r2, [r3, #4]
 800598c:	e005      	b.n	800599a <ADC_MultiModeDMARequestAfterLastTransferCmd+0x2a>
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
 800598e:	4b05      	ldr	r3, [pc, #20]	; (80059a4 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x34>)
 8005990:	4a04      	ldr	r2, [pc, #16]	; (80059a4 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x34>)
 8005992:	6852      	ldr	r2, [r2, #4]
 8005994:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005998:	605a      	str	r2, [r3, #4]
  }
}
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr
 80059a4:	40012300 	.word	0x40012300

080059a8 <ADC_InjectedChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b087      	sub	sp, #28
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	70f9      	strb	r1, [r7, #3]
 80059b2:	70ba      	strb	r2, [r7, #2]
 80059b4:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
 80059b6:	2300      	movs	r3, #0
 80059b8:	617b      	str	r3, [r7, #20]
 80059ba:	2300      	movs	r3, #0
 80059bc:	613b      	str	r3, [r7, #16]
 80059be:	2300      	movs	r3, #0
 80059c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80059c2:	78fb      	ldrb	r3, [r7, #3]
 80059c4:	2b09      	cmp	r3, #9
 80059c6:	d923      	bls.n	8005a10 <ADC_InjectedChannelConfig+0x68>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 80059ce:	78fb      	ldrb	r3, [r7, #3]
 80059d0:	f1a3 020a 	sub.w	r2, r3, #10
 80059d4:	4613      	mov	r3, r2
 80059d6:	005b      	lsls	r3, r3, #1
 80059d8:	4413      	add	r3, r2
 80059da:	2207      	movs	r2, #7
 80059dc:	fa02 f303 	lsl.w	r3, r2, r3
 80059e0:	613b      	str	r3, [r7, #16]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	43db      	mvns	r3, r3
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	4013      	ands	r3, r2
 80059ea:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 80059ec:	7879      	ldrb	r1, [r7, #1]
 80059ee:	78fb      	ldrb	r3, [r7, #3]
 80059f0:	f1a3 020a 	sub.w	r2, r3, #10
 80059f4:	4613      	mov	r3, r2
 80059f6:	005b      	lsls	r3, r3, #1
 80059f8:	4413      	add	r3, r2
 80059fa:	fa01 f303 	lsl.w	r3, r1, r3
 80059fe:	613b      	str	r3, [r7, #16]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	60da      	str	r2, [r3, #12]
 8005a0e:	e01e      	b.n	8005a4e <ADC_InjectedChannelConfig+0xa6>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8005a16:	78fa      	ldrb	r2, [r7, #3]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	005b      	lsls	r3, r3, #1
 8005a1c:	4413      	add	r3, r2
 8005a1e:	2207      	movs	r2, #7
 8005a20:	fa02 f303 	lsl.w	r3, r2, r3
 8005a24:	613b      	str	r3, [r7, #16]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	43db      	mvns	r3, r3
 8005a2a:	697a      	ldr	r2, [r7, #20]
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8005a30:	7879      	ldrb	r1, [r7, #1]
 8005a32:	78fa      	ldrb	r2, [r7, #3]
 8005a34:	4613      	mov	r3, r2
 8005a36:	005b      	lsls	r3, r3, #1
 8005a38:	4413      	add	r3, r2
 8005a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a3e:	613b      	str	r3, [r7, #16]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	697a      	ldr	r2, [r7, #20]
 8005a4c:	611a      	str	r2, [r3, #16]
  }
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a52:	617b      	str	r3, [r7, #20]
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005a5a:	0d1b      	lsrs	r3, r3, #20
 8005a5c:	60fb      	str	r3, [r7, #12]
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	78ba      	ldrb	r2, [r7, #2]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	3302      	adds	r3, #2
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	4613      	mov	r3, r2
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	4413      	add	r3, r2
 8005a74:	221f      	movs	r2, #31
 8005a76:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7a:	613b      	str	r3, [r7, #16]
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	43db      	mvns	r3, r3
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	4013      	ands	r3, r2
 8005a84:	617b      	str	r3, [r7, #20]
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 8005a86:	78f9      	ldrb	r1, [r7, #3]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	78ba      	ldrb	r2, [r7, #2]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	3302      	adds	r3, #2
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	461a      	mov	r2, r3
 8005a98:	4613      	mov	r3, r2
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	4413      	add	r3, r2
 8005a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8005aa2:	613b      	str	r3, [r7, #16]
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	617b      	str	r3, [r7, #20]
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005ab2:	371c      	adds	r7, #28
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <ADC_InjectedSequencerLengthConfig>:
  * @param  Length: The sequencer length. 
  *          This parameter must be a number between 1 to 4.
  * @retval None
  */
void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 8005acc:	2300      	movs	r3, #0
 8005ace:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad4:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old injected sequence length JL bits */
  tmpreg1 &= JSQR_JL_RESET;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005adc:	60fb      	str	r3, [r7, #12]
  
  /* Set the injected sequence length JL bits */
  tmpreg2 = Length - 1; 
 8005ade:	78fb      	ldrb	r3, [r7, #3]
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 20;
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	051b      	lsls	r3, r3, #20
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005af4:	3714      	adds	r7, #20
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop

08005b00 <ADC_SetInjectedOffset>:
  * @param  Offset: the offset value for the selected ADC injected channel
  *          This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	4613      	mov	r3, r2
 8005b0a:	460a      	mov	r2, r1
 8005b0c:	70fa      	strb	r2, [r7, #3]
 8005b0e:	803b      	strh	r3, [r7, #0]
    __IO uint32_t tmp = 0;
 8005b10:	2300      	movs	r3, #0
 8005b12:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_OFFSET(Offset));
  
  tmp = (uint32_t)ADCx;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel;
 8005b18:	78fa      	ldrb	r2, [r7, #3]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	60fb      	str	r3, [r7, #12]
  
  /* Set the selected injected channel data offset */
 *(__IO uint32_t *) tmp = (uint32_t)Offset;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	883a      	ldrh	r2, [r7, #0]
 8005b24:	601a      	str	r2, [r3, #0]
}
 8005b26:	3714      	adds	r7, #20
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <ADC_ExternalTrigInjectedConvConfig>:
  *            @arg ADC_ExternalTrigInjecConv_T8_CC4: Timer8 capture compare4 selected 
  *            @arg ADC_ExternalTrigInjecConv_Ext_IT15: External interrupt line 15 event selected                          
  * @retval None
  */
void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b085      	sub	sp, #20
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
  
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old external event selection for injected group */
  tmpreg &= CR2_JEXTSEL_RESET;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8005b4a:	60fb      	str	r3, [r7, #12]
  
  /* Set the external event selection for injected group */
  tmpreg |= ADC_ExternalTrigInjecConv;
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	609a      	str	r2, [r3, #8]
}
 8005b5a:	3714      	adds	r7, #20
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <ADC_ExternalTrigInjectedConvEdgeConfig>:
  *            @arg ADC_ExternalTrigInjecConvEdge_RisingFalling: detection on both rising 
  *                                                               and falling edge
  * @retval None
  */
void ADC_ExternalTrigInjectedConvEdgeConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConvEdge)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(ADC_ExternalTrigInjecConvEdge));
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	60fb      	str	r3, [r7, #12]
  /* Clear the old external trigger edge for injected group */
  tmpreg &= CR2_JEXTEN_RESET;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005b7e:	60fb      	str	r3, [r7, #12]
  /* Set the new external trigger edge for injected group */
  tmpreg |= ADC_ExternalTrigInjecConvEdge;
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	609a      	str	r2, [r3, #8]
}
 8005b8e:	3714      	adds	r7, #20
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <ADC_SoftwareStartInjectedConv>:
  * @brief  Enables the selected ADC software start conversion of the injected channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartInjectedConv(ADC_TypeDef* ADCx)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC conversion for injected group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_JSWSTART;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	609a      	str	r2, [r3, #8]
}
 8005bac:	370c      	adds	r7, #12
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop

08005bb8 <ADC_GetSoftwareStartInjectedConvCmdStatus>:
  * @brief  Gets the selected ADC Software start injected conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start injected conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Check the status of JSWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d002      	beq.n	8005bd6 <ADC_GetSoftwareStartInjectedConvCmdStatus+0x1e>
  {
    /* JSWSTART bit is set */
    bitstatus = SET;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	73fb      	strb	r3, [r7, #15]
 8005bd4:	e001      	b.n	8005bda <ADC_GetSoftwareStartInjectedConvCmdStatus+0x22>
  }
  else
  {
    /* JSWSTART bit is reset */
    bitstatus = RESET;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the JSWSTART bit status */
  return  bitstatus;
 8005bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3714      	adds	r7, #20
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <ADC_AutoInjectedConvCmd>:
  * @param  NewState: new state of the selected ADC auto injected conversion
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005bf4:	78fb      	ldrb	r3, [r7, #3]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d006      	beq.n	8005c08 <ADC_AutoInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	605a      	str	r2, [r3, #4]
 8005c06:	e005      	b.n	8005c14 <ADC_AutoInjectedConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JAUTO);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	605a      	str	r2, [r3, #4]
  }
}
 8005c14:	370c      	adds	r7, #12
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
 8005c1e:	bf00      	nop

08005c20 <ADC_InjectedDiscModeCmd>:
  *         group channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	460b      	mov	r3, r1
 8005c2a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005c2c:	78fb      	ldrb	r3, [r7, #3]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d006      	beq.n	8005c40 <ADC_InjectedDiscModeCmd+0x20>
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	605a      	str	r2, [r3, #4]
 8005c3e:	e005      	b.n	8005c4c <ADC_InjectedDiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JDISCEN);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	605a      	str	r2, [r3, #4]
  }
}
 8005c4c:	370c      	adds	r7, #12
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop

08005c58 <ADC_GetInjectedConversionValue>:
  *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
  *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	460b      	mov	r3, r1
 8005c62:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
 8005c64:	2300      	movs	r3, #0
 8005c66:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  tmp = (uint32_t)ADCx;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel + JDR_OFFSET;
 8005c6c:	78fa      	ldrb	r2, [r7, #3]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	4413      	add	r3, r2
 8005c72:	3328      	adds	r3, #40	; 0x28
 8005c74:	60fb      	str	r3, [r7, #12]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp); 
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	b29b      	uxth	r3, r3
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3714      	adds	r7, #20
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <ADC_ITConfig>:
  * @param  NewState: new state of the specified ADC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)  
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	4613      	mov	r3, r2
 8005c92:	460a      	mov	r2, r1
 8005c94:	807a      	strh	r2, [r7, #2]
 8005c96:	707b      	strb	r3, [r7, #1]
  uint32_t itmask = 0;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT)); 

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
 8005c9c:	887b      	ldrh	r3, [r7, #2]
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	60fb      	str	r3, [r7, #12]
  itmask = (uint32_t)0x01 << itmask;    
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8005caa:	60fb      	str	r3, [r7, #12]

  if (NewState != DISABLE)
 8005cac:	787b      	ldrb	r3, [r7, #1]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d006      	beq.n	8005cc0 <ADC_ITConfig+0x38>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685a      	ldr	r2, [r3, #4]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	431a      	orrs	r2, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	605a      	str	r2, [r3, #4]
 8005cbe:	e006      	b.n	8005cce <ADC_ITConfig+0x46>
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685a      	ldr	r2, [r3, #4]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	43db      	mvns	r3, r3
 8005cc8:	401a      	ands	r2, r3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	605a      	str	r2, [r3, #4]
  }
}
 8005cce:	3714      	adds	r7, #20
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <ADC_GetFlagStatus>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                                                 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	78fb      	ldrb	r3, [r7, #3]
 8005cee:	4013      	ands	r3, r2
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d002      	beq.n	8005cfa <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	73fb      	strb	r3, [r7, #15]
 8005cf8:	e001      	b.n	8005cfe <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8005cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3714      	adds	r7, #20
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <ADC_ClearFlag>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                          
  * @retval None
  */
void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	460b      	mov	r3, r1
 8005d16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));

  /* Clear the selected ADC flags */
  ADCx->SR = ~(uint32_t)ADC_FLAG;
 8005d18:	78fb      	ldrb	r3, [r7, #3]
 8005d1a:	43da      	mvns	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	601a      	str	r2, [r3, #0]
}
 8005d20:	370c      	adds	r7, #12
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop

08005d2c <ADC_GetITStatus>:
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                        
  * @retval The new state of ADC_IT (SET or RESET).
  */
ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b087      	sub	sp, #28
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	460b      	mov	r3, r1
 8005d36:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	75fb      	strb	r3, [r7, #23]
  uint32_t itmask = 0, enablestatus = 0;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	613b      	str	r3, [r7, #16]
 8005d40:	2300      	movs	r3, #0
 8005d42:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT));

  /* Get the ADC IT index */
  itmask = ADC_IT >> 8;
 8005d44:	887b      	ldrh	r3, [r7, #2]
 8005d46:	0a1b      	lsrs	r3, r3, #8
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	613b      	str	r3, [r7, #16]

  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)) ;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685a      	ldr	r2, [r3, #4]
 8005d50:	887b      	ldrh	r3, [r7, #2]
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	2101      	movs	r1, #1
 8005d56:	fa01 f303 	lsl.w	r3, r1, r3
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified ADC interrupt */
  if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	4013      	ands	r3, r2
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d005      	beq.n	8005d76 <ADC_GetITStatus+0x4a>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d002      	beq.n	8005d76 <ADC_GetITStatus+0x4a>
  {
    /* ADC_IT is set */
    bitstatus = SET;
 8005d70:	2301      	movs	r3, #1
 8005d72:	75fb      	strb	r3, [r7, #23]
 8005d74:	e001      	b.n	8005d7a <ADC_GetITStatus+0x4e>
  }
  else
  {
    /* ADC_IT is reset */
    bitstatus = RESET;
 8005d76:	2300      	movs	r3, #0
 8005d78:	75fb      	strb	r3, [r7, #23]
  }
  /* Return the ADC_IT status */
  return  bitstatus;
 8005d7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	371c      	adds	r7, #28
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <ADC_ClearITPendingBit>:
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                         
  * @retval None
  */
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	460b      	mov	r3, r1
 8005d92:	807b      	strh	r3, [r7, #2]
  uint8_t itmask = 0;
 8005d94:	2300      	movs	r3, #0
 8005d96:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT)); 
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
 8005d98:	887b      	ldrh	r3, [r7, #2]
 8005d9a:	0a1b      	lsrs	r3, r3, #8
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	73fb      	strb	r3, [r7, #15]
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
 8005da0:	7bfb      	ldrb	r3, [r7, #15]
 8005da2:	43da      	mvns	r2, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	601a      	str	r2, [r3, #0]
}                    
 8005da8:	3714      	adds	r7, #20
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop

08005db4 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8005dbc:	4a05      	ldr	r2, [pc, #20]	; (8005dd4 <NVIC_PriorityGroupConfig+0x20>)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005dc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dc8:	60d3      	str	r3, [r2, #12]
}
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr
 8005dd4:	e000ed00 	.word	0xe000ed00

08005dd8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8005de0:	2300      	movs	r3, #0
 8005de2:	73fb      	strb	r3, [r7, #15]
 8005de4:	2300      	movs	r3, #0
 8005de6:	73bb      	strb	r3, [r7, #14]
 8005de8:	230f      	movs	r3, #15
 8005dea:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	78db      	ldrb	r3, [r3, #3]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d037      	beq.n	8005e64 <NVIC_Init+0x8c>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8005df4:	4b25      	ldr	r3, [pc, #148]	; (8005e8c <NVIC_Init+0xb4>)
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	43db      	mvns	r3, r3
 8005dfa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005dfe:	0a1b      	lsrs	r3, r3, #8
 8005e00:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8005e02:	7bfb      	ldrb	r3, [r7, #15]
 8005e04:	f1c3 0304 	rsb	r3, r3, #4
 8005e08:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8005e0a:	7b7a      	ldrb	r2, [r7, #13]
 8005e0c:	7bfb      	ldrb	r3, [r7, #15]
 8005e0e:	fa42 f303 	asr.w	r3, r2, r3
 8005e12:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	785b      	ldrb	r3, [r3, #1]
 8005e18:	461a      	mov	r2, r3
 8005e1a:	7bbb      	ldrb	r3, [r7, #14]
 8005e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e20:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	789a      	ldrb	r2, [r3, #2]
 8005e26:	7b7b      	ldrb	r3, [r7, #13]
 8005e28:	4013      	ands	r3, r2
 8005e2a:	b2da      	uxtb	r2, r3
 8005e2c:	7bfb      	ldrb	r3, [r7, #15]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8005e32:	7bfb      	ldrb	r3, [r7, #15]
 8005e34:	011b      	lsls	r3, r3, #4
 8005e36:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8005e38:	4a15      	ldr	r2, [pc, #84]	; (8005e90 <NVIC_Init+0xb8>)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	4413      	add	r3, r2
 8005e40:	7bfa      	ldrb	r2, [r7, #15]
 8005e42:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005e46:	4b12      	ldr	r3, [pc, #72]	; (8005e90 <NVIC_Init+0xb8>)
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	7812      	ldrb	r2, [r2, #0]
 8005e4c:	0952      	lsrs	r2, r2, #5
 8005e4e:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8005e50:	6879      	ldr	r1, [r7, #4]
 8005e52:	7809      	ldrb	r1, [r1, #0]
 8005e54:	f001 011f 	and.w	r1, r1, #31
 8005e58:	2001      	movs	r0, #1
 8005e5a:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005e5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005e62:	e00e      	b.n	8005e82 <NVIC_Init+0xaa>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005e64:	4b0a      	ldr	r3, [pc, #40]	; (8005e90 <NVIC_Init+0xb8>)
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	7812      	ldrb	r2, [r2, #0]
 8005e6a:	0952      	lsrs	r2, r2, #5
 8005e6c:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8005e6e:	6879      	ldr	r1, [r7, #4]
 8005e70:	7809      	ldrb	r1, [r1, #0]
 8005e72:	f001 011f 	and.w	r1, r1, #31
 8005e76:	2001      	movs	r0, #1
 8005e78:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005e7c:	3220      	adds	r2, #32
 8005e7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8005e82:	3714      	adds	r7, #20
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr
 8005e8c:	e000ed00 	.word	0xe000ed00
 8005e90:	e000e100 	.word	0xe000e100

08005e94 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8005e9e:	4a07      	ldr	r2, [pc, #28]	; (8005ebc <NVIC_SetVectorTable+0x28>)
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8005ea6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005eaa:	6879      	ldr	r1, [r7, #4]
 8005eac:	430b      	orrs	r3, r1
 8005eae:	6093      	str	r3, [r2, #8]
}
 8005eb0:	370c      	adds	r7, #12
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	e000ed00 	.word	0xe000ed00

08005ec0 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	460b      	mov	r3, r1
 8005eca:	71fa      	strb	r2, [r7, #7]
 8005ecc:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8005ece:	79bb      	ldrb	r3, [r7, #6]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d006      	beq.n	8005ee2 <NVIC_SystemLPConfig+0x22>
  {
    SCB->SCR |= LowPowerMode;
 8005ed4:	4b09      	ldr	r3, [pc, #36]	; (8005efc <NVIC_SystemLPConfig+0x3c>)
 8005ed6:	4a09      	ldr	r2, [pc, #36]	; (8005efc <NVIC_SystemLPConfig+0x3c>)
 8005ed8:	6911      	ldr	r1, [r2, #16]
 8005eda:	79fa      	ldrb	r2, [r7, #7]
 8005edc:	430a      	orrs	r2, r1
 8005ede:	611a      	str	r2, [r3, #16]
 8005ee0:	e006      	b.n	8005ef0 <NVIC_SystemLPConfig+0x30>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8005ee2:	4b06      	ldr	r3, [pc, #24]	; (8005efc <NVIC_SystemLPConfig+0x3c>)
 8005ee4:	4a05      	ldr	r2, [pc, #20]	; (8005efc <NVIC_SystemLPConfig+0x3c>)
 8005ee6:	6911      	ldr	r1, [r2, #16]
 8005ee8:	79fa      	ldrb	r2, [r7, #7]
 8005eea:	43d2      	mvns	r2, r2
 8005eec:	400a      	ands	r2, r1
 8005eee:	611a      	str	r2, [r3, #16]
  }
}
 8005ef0:	370c      	adds	r7, #12
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	e000ed00 	.word	0xe000ed00

08005f00 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2b04      	cmp	r3, #4
 8005f0c:	d106      	bne.n	8005f1c <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8005f0e:	4b09      	ldr	r3, [pc, #36]	; (8005f34 <SysTick_CLKSourceConfig+0x34>)
 8005f10:	4a08      	ldr	r2, [pc, #32]	; (8005f34 <SysTick_CLKSourceConfig+0x34>)
 8005f12:	6812      	ldr	r2, [r2, #0]
 8005f14:	f042 0204 	orr.w	r2, r2, #4
 8005f18:	601a      	str	r2, [r3, #0]
 8005f1a:	e005      	b.n	8005f28 <SysTick_CLKSourceConfig+0x28>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8005f1c:	4b05      	ldr	r3, [pc, #20]	; (8005f34 <SysTick_CLKSourceConfig+0x34>)
 8005f1e:	4a05      	ldr	r2, [pc, #20]	; (8005f34 <SysTick_CLKSourceConfig+0x34>)
 8005f20:	6812      	ldr	r2, [r2, #0]
 8005f22:	f022 0204 	bic.w	r2, r2, #4
 8005f26:	601a      	str	r2, [r3, #0]
  }
}
 8005f28:	370c      	adds	r7, #12
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	e000e010 	.word	0xe000e010

08005f38 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b086      	sub	sp, #24
 8005f3c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005f42:	f000 fa77 	bl	8006434 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005f46:	4b0c      	ldr	r3, [pc, #48]	; (8005f78 <xTimerCreateTimerTask+0x40>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00e      	beq.n	8005f6c <xTimerCreateTimerTask+0x34>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 8005f4e:	2303      	movs	r3, #3
 8005f50:	9300      	str	r3, [sp, #0]
 8005f52:	2300      	movs	r3, #0
 8005f54:	9301      	str	r3, [sp, #4]
 8005f56:	2300      	movs	r3, #0
 8005f58:	9302      	str	r3, [sp, #8]
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	9303      	str	r3, [sp, #12]
 8005f5e:	4807      	ldr	r0, [pc, #28]	; (8005f7c <xTimerCreateTimerTask+0x44>)
 8005f60:	4907      	ldr	r1, [pc, #28]	; (8005f80 <xTimerCreateTimerTask+0x48>)
 8005f62:	2246      	movs	r2, #70	; 0x46
 8005f64:	2300      	movs	r3, #0
 8005f66:	f000 fab5 	bl	80064d4 <xTaskGenericCreate>
 8005f6a:	6078      	str	r0, [r7, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
	return xReturn;
 8005f6c:	687b      	ldr	r3, [r7, #4]
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3708      	adds	r7, #8
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	200000bc 	.word	0x200000bc
 8005f7c:	080060f1 	.word	0x080060f1
 8005f80:	08009184 	.word	0x08009184

08005f84 <xTimerCreate>:
/*-----------------------------------------------------------*/

TimerHandle_t xTimerCreate( const char * const pcTimerName, const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b086      	sub	sp, #24
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
 8005f90:	603b      	str	r3, [r7, #0]
Timer_t *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d102      	bne.n	8005f9e <xTimerCreate+0x1a>
	{
		pxNewTimer = NULL;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	617b      	str	r3, [r7, #20]
 8005f9c:	e01c      	b.n	8005fd8 <xTimerCreate+0x54>
	}
	else
	{
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8005f9e:	2028      	movs	r0, #40	; 0x28
 8005fa0:	f002 fe94 	bl	8008ccc <pvPortMalloc>
 8005fa4:	6178      	str	r0, [r7, #20]
		if( pxNewTimer != NULL )
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d015      	beq.n	8005fd8 <xTimerCreate+0x54>
		{
			/* Ensure the infrastructure used by the timer service task has been
			created/initialised. */
			prvCheckForValidListAndQueue();
 8005fac:	f000 fa42 	bl	8006434 <prvCheckForValidListAndQueue>

			/* Initialise the timer structure members using the function parameters. */
			pxNewTimer->pcTimerName = pcTimerName;
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	601a      	str	r2, [r3, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	68ba      	ldr	r2, [r7, #8]
 8005fba:	619a      	str	r2, [r3, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	61da      	str	r2, [r3, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	683a      	ldr	r2, [r7, #0]
 8005fc6:	621a      	str	r2, [r3, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	6a3a      	ldr	r2, [r7, #32]
 8005fcc:	625a      	str	r2, [r3, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	3304      	adds	r3, #4
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f002 fcbc 	bl	8008950 <vListInitialiseItem>
	}

	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );

	return ( TimerHandle_t ) pxNewTimer;
 8005fd8:	697b      	ldr	r3, [r7, #20]
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3718      	adds	r7, #24
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop

08005fe4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b088      	sub	sp, #32
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	607a      	str	r2, [r7, #4]
 8005ff0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005ff6:	4b1d      	ldr	r3, [pc, #116]	; (800606c <xTimerGenericCommand+0x88>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d030      	beq.n	8006060 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	2b05      	cmp	r3, #5
 800600e:	dc1c      	bgt.n	800604a <xTimerGenericCommand+0x66>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006010:	f001 fbce 	bl	80077b0 <xTaskGetSchedulerState>
 8006014:	4603      	mov	r3, r0
 8006016:	2b02      	cmp	r3, #2
 8006018:	d10b      	bne.n	8006032 <xTimerGenericCommand+0x4e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800601a:	4b14      	ldr	r3, [pc, #80]	; (800606c <xTimerGenericCommand+0x88>)
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	f107 0310 	add.w	r3, r7, #16
 8006022:	4610      	mov	r0, r2
 8006024:	4619      	mov	r1, r3
 8006026:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006028:	2300      	movs	r3, #0
 800602a:	f002 f83b 	bl	80080a4 <xQueueGenericSend>
 800602e:	61f8      	str	r0, [r7, #28]
 8006030:	e016      	b.n	8006060 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006032:	4b0e      	ldr	r3, [pc, #56]	; (800606c <xTimerGenericCommand+0x88>)
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	f107 0310 	add.w	r3, r7, #16
 800603a:	4610      	mov	r0, r2
 800603c:	4619      	mov	r1, r3
 800603e:	2200      	movs	r2, #0
 8006040:	2300      	movs	r3, #0
 8006042:	f002 f82f 	bl	80080a4 <xQueueGenericSend>
 8006046:	61f8      	str	r0, [r7, #28]
 8006048:	e00a      	b.n	8006060 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800604a:	4b08      	ldr	r3, [pc, #32]	; (800606c <xTimerGenericCommand+0x88>)
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	f107 0310 	add.w	r3, r7, #16
 8006052:	4610      	mov	r0, r2
 8006054:	4619      	mov	r1, r3
 8006056:	683a      	ldr	r2, [r7, #0]
 8006058:	2300      	movs	r3, #0
 800605a:	f002 f8c9 	bl	80081f0 <xQueueGenericSendFromISR>
 800605e:	61f8      	str	r0, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006060:	69fb      	ldr	r3, [r7, #28]
}
 8006062:	4618      	mov	r0, r3
 8006064:	3720      	adds	r7, #32
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	200000bc 	.word	0x200000bc

08006070 <pcTimerGetTimerName>:

#endif
/*-----------------------------------------------------------*/

const char * pcTimerGetTimerName( TimerHandle_t xTimer )
{
 8006070:	b480      	push	{r7}
 8006072:	b085      	sub	sp, #20
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
Timer_t *pxTimer = ( Timer_t * ) xTimer;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	60fb      	str	r3, [r7, #12]

	return pxTimer->pcTimerName;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
}
 8006080:	4618      	mov	r0, r3
 8006082:	3714      	adds	r7, #20
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b086      	sub	sp, #24
 8006090:	af02      	add	r7, sp, #8
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006096:	4b15      	ldr	r3, [pc, #84]	; (80060ec <prvProcessExpiredTimer+0x60>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	3304      	adds	r3, #4
 80060a4:	4618      	mov	r0, r3
 80060a6:	f002 fcbb 	bl	8008a20 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	69db      	ldr	r3, [r3, #28]
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d115      	bne.n	80060de <prvProcessExpiredTimer+0x52>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	699a      	ldr	r2, [r3, #24]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4413      	add	r3, r2
 80060ba:	68f8      	ldr	r0, [r7, #12]
 80060bc:	4619      	mov	r1, r3
 80060be:	683a      	ldr	r2, [r7, #0]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f000 f8a9 	bl	8006218 <prvInsertTimerInActiveList>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d108      	bne.n	80060de <prvProcessExpiredTimer+0x52>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80060cc:	2300      	movs	r3, #0
 80060ce:	9300      	str	r3, [sp, #0]
 80060d0:	68f8      	ldr	r0, [r7, #12]
 80060d2:	2100      	movs	r1, #0
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	2300      	movs	r3, #0
 80060d8:	f7ff ff84 	bl	8005fe4 <xTimerGenericCommand>
 80060dc:	60b8      	str	r0, [r7, #8]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e2:	68f8      	ldr	r0, [r7, #12]
 80060e4:	4798      	blx	r3
}
 80060e6:	3710      	adds	r7, #16
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	200000b4 	.word	0x200000b4

080060f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80060f8:	f107 0308 	add.w	r3, r7, #8
 80060fc:	4618      	mov	r0, r3
 80060fe:	f000 f847 	bl	8006190 <prvGetNextExpireTime>
 8006102:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	4619      	mov	r1, r3
 800610a:	f000 f803 	bl	8006114 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800610e:	f000 f8c5 	bl	800629c <prvProcessReceivedCommands>
	}
 8006112:	e7f1      	b.n	80060f8 <prvTimerTask+0x8>

08006114 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800611e:	f000 fe1b 	bl	8006d58 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006122:	f107 0308 	add.w	r3, r7, #8
 8006126:	4618      	mov	r0, r3
 8006128:	f000 f856 	bl	80061d8 <prvSampleTimeNow>
 800612c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d124      	bne.n	800617e <prvProcessTimerOrBlockTask+0x6a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d10a      	bne.n	8006150 <prvProcessTimerOrBlockTask+0x3c>
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	429a      	cmp	r2, r3
 8006140:	d806      	bhi.n	8006150 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006142:	f000 fe17 	bl	8006d74 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	68f9      	ldr	r1, [r7, #12]
 800614a:	f7ff ff9f 	bl	800608c <prvProcessExpiredTimer>
 800614e:	e018      	b.n	8006182 <prvProcessTimerOrBlockTask+0x6e>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 8006150:	4b0d      	ldr	r3, [pc, #52]	; (8006188 <prvProcessTimerOrBlockTask+0x74>)
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	6879      	ldr	r1, [r7, #4]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	1acb      	subs	r3, r1, r3
 800615a:	4610      	mov	r0, r2
 800615c:	4619      	mov	r1, r3
 800615e:	f002 fbab 	bl	80088b8 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 8006162:	f000 fe07 	bl	8006d74 <xTaskResumeAll>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d10a      	bne.n	8006182 <prvProcessTimerOrBlockTask+0x6e>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
 800616c:	4b07      	ldr	r3, [pc, #28]	; (800618c <prvProcessTimerOrBlockTask+0x78>)
 800616e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006172:	601a      	str	r2, [r3, #0]
 8006174:	f3bf 8f4f 	dsb	sy
 8006178:	f3bf 8f6f 	isb	sy
 800617c:	e001      	b.n	8006182 <prvProcessTimerOrBlockTask+0x6e>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 800617e:	f000 fdf9 	bl	8006d74 <xTaskResumeAll>
		}
	}
}
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}
 8006188:	200000bc 	.word	0x200000bc
 800618c:	e000ed04 	.word	0xe000ed04

08006190 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006190:	b480      	push	{r7}
 8006192:	b085      	sub	sp, #20
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006198:	4b0e      	ldr	r3, [pc, #56]	; (80061d4 <prvGetNextExpireTime+0x44>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	bf14      	ite	ne
 80061a2:	2300      	movne	r3, #0
 80061a4:	2301      	moveq	r3, #1
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	461a      	mov	r2, r3
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d105      	bne.n	80061c2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061b6:	4b07      	ldr	r3, [pc, #28]	; (80061d4 <prvGetNextExpireTime+0x44>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	60fb      	str	r3, [r7, #12]
 80061c0:	e001      	b.n	80061c6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80061c2:	2300      	movs	r3, #0
 80061c4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80061c6:	68fb      	ldr	r3, [r7, #12]
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3714      	adds	r7, #20
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr
 80061d4:	200000b4 	.word	0x200000b4

080061d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80061e0:	f000 fe4e 	bl	8006e80 <xTaskGetTickCount>
 80061e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80061e6:	4b0b      	ldr	r3, [pc, #44]	; (8006214 <prvSampleTimeNow+0x3c>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d205      	bcs.n	80061fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80061f0:	f000 f8ce 	bl	8006390 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	601a      	str	r2, [r3, #0]
 80061fa:	e002      	b.n	8006202 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006202:	4b04      	ldr	r3, [pc, #16]	; (8006214 <prvSampleTimeNow+0x3c>)
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8006208:	68fb      	ldr	r3, [r7, #12]
}
 800620a:	4618      	mov	r0, r3
 800620c:	3710      	adds	r7, #16
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	200000c0 	.word	0x200000c0

08006218 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b086      	sub	sp, #24
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]
 8006224:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006226:	2300      	movs	r3, #0
 8006228:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	68ba      	ldr	r2, [r7, #8]
 800622e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006236:	68ba      	ldr	r2, [r7, #8]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	429a      	cmp	r2, r3
 800623c:	d812      	bhi.n	8006264 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	1ad2      	subs	r2, r2, r3
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	699b      	ldr	r3, [r3, #24]
 8006248:	429a      	cmp	r2, r3
 800624a:	d302      	bcc.n	8006252 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800624c:	2301      	movs	r3, #1
 800624e:	617b      	str	r3, [r7, #20]
 8006250:	e01b      	b.n	800628a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006252:	4b10      	ldr	r3, [pc, #64]	; (8006294 <prvInsertTimerInActiveList+0x7c>)
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	3304      	adds	r3, #4
 800625a:	4610      	mov	r0, r2
 800625c:	4619      	mov	r1, r3
 800625e:	f002 fba7 	bl	80089b0 <vListInsert>
 8006262:	e012      	b.n	800628a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	429a      	cmp	r2, r3
 800626a:	d206      	bcs.n	800627a <prvInsertTimerInActiveList+0x62>
 800626c:	68ba      	ldr	r2, [r7, #8]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	429a      	cmp	r2, r3
 8006272:	d302      	bcc.n	800627a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006274:	2301      	movs	r3, #1
 8006276:	617b      	str	r3, [r7, #20]
 8006278:	e007      	b.n	800628a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800627a:	4b07      	ldr	r3, [pc, #28]	; (8006298 <prvInsertTimerInActiveList+0x80>)
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	3304      	adds	r3, #4
 8006282:	4610      	mov	r0, r2
 8006284:	4619      	mov	r1, r3
 8006286:	f002 fb93 	bl	80089b0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800628a:	697b      	ldr	r3, [r7, #20]
}
 800628c:	4618      	mov	r0, r3
 800628e:	3718      	adds	r7, #24
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}
 8006294:	200000b8 	.word	0x200000b8
 8006298:	200000b4 	.word	0x200000b4

0800629c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b08a      	sub	sp, #40	; 0x28
 80062a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80062a2:	e063      	b.n	800636c <prvProcessReceivedCommands+0xd0>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	db60      	blt.n	800636c <prvProcessReceivedCommands+0xd0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d004      	beq.n	80062c0 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	3304      	adds	r3, #4
 80062ba:	4618      	mov	r0, r3
 80062bc:	f002 fbb0 	bl	8008a20 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80062c0:	1d3b      	adds	r3, r7, #4
 80062c2:	4618      	mov	r0, r3
 80062c4:	f7ff ff88 	bl	80061d8 <prvSampleTimeNow>
 80062c8:	61b8      	str	r0, [r7, #24]

			switch( xMessage.xMessageID )
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	2b09      	cmp	r3, #9
 80062ce:	d84c      	bhi.n	800636a <prvProcessReceivedCommands+0xce>
 80062d0:	a201      	add	r2, pc, #4	; (adr r2, 80062d8 <prvProcessReceivedCommands+0x3c>)
 80062d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d6:	bf00      	nop
 80062d8:	08006301 	.word	0x08006301
 80062dc:	08006301 	.word	0x08006301
 80062e0:	08006301 	.word	0x08006301
 80062e4:	0800636b 	.word	0x0800636b
 80062e8:	08006347 	.word	0x08006347
 80062ec:	08006363 	.word	0x08006363
 80062f0:	08006301 	.word	0x08006301
 80062f4:	08006301 	.word	0x08006301
 80062f8:	0800636b 	.word	0x0800636b
 80062fc:	08006347 	.word	0x08006347
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	699b      	ldr	r3, [r3, #24]
 8006306:	441a      	add	r2, r3
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	69f8      	ldr	r0, [r7, #28]
 800630c:	4611      	mov	r1, r2
 800630e:	69ba      	ldr	r2, [r7, #24]
 8006310:	f7ff ff82 	bl	8006218 <prvInsertTimerInActiveList>
 8006314:	4603      	mov	r3, r0
 8006316:	2b01      	cmp	r3, #1
 8006318:	d114      	bne.n	8006344 <prvProcessReceivedCommands+0xa8>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631e:	69f8      	ldr	r0, [r7, #28]
 8006320:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	69db      	ldr	r3, [r3, #28]
 8006326:	2b01      	cmp	r3, #1
 8006328:	d10c      	bne.n	8006344 <prvProcessReceivedCommands+0xa8>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	699b      	ldr	r3, [r3, #24]
 8006330:	4413      	add	r3, r2
 8006332:	2200      	movs	r2, #0
 8006334:	9200      	str	r2, [sp, #0]
 8006336:	69f8      	ldr	r0, [r7, #28]
 8006338:	2100      	movs	r1, #0
 800633a:	461a      	mov	r2, r3
 800633c:	2300      	movs	r3, #0
 800633e:	f7ff fe51 	bl	8005fe4 <xTimerGenericCommand>
 8006342:	6178      	str	r0, [r7, #20]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 8006344:	e012      	b.n	800636c <prvProcessReceivedCommands+0xd0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	619a      	str	r2, [r3, #24]
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	699a      	ldr	r2, [r3, #24]
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	4413      	add	r3, r2
 8006354:	69f8      	ldr	r0, [r7, #28]
 8006356:	4619      	mov	r1, r3
 8006358:	69ba      	ldr	r2, [r7, #24]
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	f7ff ff5c 	bl	8006218 <prvInsertTimerInActiveList>
					break;
 8006360:	e004      	b.n	800636c <prvProcessReceivedCommands+0xd0>

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
 8006362:	69f8      	ldr	r0, [r7, #28]
 8006364:	f002 fd4a 	bl	8008dfc <vPortFree>
					break;
 8006368:	e000      	b.n	800636c <prvProcessReceivedCommands+0xd0>

				default	:
					/* Don't expect to get here. */
					break;
 800636a:	bf00      	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800636c:	4b07      	ldr	r3, [pc, #28]	; (800638c <prvProcessReceivedCommands+0xf0>)
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	f107 0308 	add.w	r3, r7, #8
 8006374:	4610      	mov	r0, r2
 8006376:	4619      	mov	r1, r3
 8006378:	2200      	movs	r2, #0
 800637a:	2300      	movs	r3, #0
 800637c:	f001 ffd6 	bl	800832c <xQueueGenericReceive>
 8006380:	4603      	mov	r3, r0
 8006382:	2b00      	cmp	r3, #0
 8006384:	d18e      	bne.n	80062a4 <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
 8006386:	3720      	adds	r7, #32
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}
 800638c:	200000bc 	.word	0x200000bc

08006390 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b088      	sub	sp, #32
 8006394:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006396:	e037      	b.n	8006408 <prvSwitchTimerLists+0x78>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006398:	4b24      	ldr	r3, [pc, #144]	; (800642c <prvSwitchTimerLists+0x9c>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80063a2:	4b22      	ldr	r3, [pc, #136]	; (800642c <prvSwitchTimerLists+0x9c>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	3304      	adds	r3, #4
 80063b0:	4618      	mov	r0, r3
 80063b2:	f002 fb35 	bl	8008a20 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ba:	6938      	ldr	r0, [r7, #16]
 80063bc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	69db      	ldr	r3, [r3, #28]
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d120      	bne.n	8006408 <prvSwitchTimerLists+0x78>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	699a      	ldr	r2, [r3, #24]
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	4413      	add	r3, r2
 80063ce:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d90e      	bls.n	80063f6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80063e4:	4b11      	ldr	r3, [pc, #68]	; (800642c <prvSwitchTimerLists+0x9c>)
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	3304      	adds	r3, #4
 80063ec:	4610      	mov	r0, r2
 80063ee:	4619      	mov	r1, r3
 80063f0:	f002 fade 	bl	80089b0 <vListInsert>
 80063f4:	e008      	b.n	8006408 <prvSwitchTimerLists+0x78>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80063f6:	2300      	movs	r3, #0
 80063f8:	9300      	str	r3, [sp, #0]
 80063fa:	6938      	ldr	r0, [r7, #16]
 80063fc:	2100      	movs	r1, #0
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	2300      	movs	r3, #0
 8006402:	f7ff fdef 	bl	8005fe4 <xTimerGenericCommand>
 8006406:	60b8      	str	r0, [r7, #8]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006408:	4b08      	ldr	r3, [pc, #32]	; (800642c <prvSwitchTimerLists+0x9c>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d1c2      	bne.n	8006398 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006412:	4b06      	ldr	r3, [pc, #24]	; (800642c <prvSwitchTimerLists+0x9c>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 8006418:	4b05      	ldr	r3, [pc, #20]	; (8006430 <prvSwitchTimerLists+0xa0>)
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	4b03      	ldr	r3, [pc, #12]	; (800642c <prvSwitchTimerLists+0x9c>)
 800641e:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8006420:	4b03      	ldr	r3, [pc, #12]	; (8006430 <prvSwitchTimerLists+0xa0>)
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	601a      	str	r2, [r3, #0]
}
 8006426:	3718      	adds	r7, #24
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}
 800642c:	200000b4 	.word	0x200000b4
 8006430:	200000b8 	.word	0x200000b8

08006434 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006434:	b580      	push	{r7, lr}
 8006436:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006438:	f002 fba8 	bl	8008b8c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800643c:	4b0d      	ldr	r3, [pc, #52]	; (8006474 <prvCheckForValidListAndQueue+0x40>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d113      	bne.n	800646c <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
 8006444:	480c      	ldr	r0, [pc, #48]	; (8006478 <prvCheckForValidListAndQueue+0x44>)
 8006446:	f002 fa63 	bl	8008910 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800644a:	480c      	ldr	r0, [pc, #48]	; (800647c <prvCheckForValidListAndQueue+0x48>)
 800644c:	f002 fa60 	bl	8008910 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006450:	4b0b      	ldr	r3, [pc, #44]	; (8006480 <prvCheckForValidListAndQueue+0x4c>)
 8006452:	4a09      	ldr	r2, [pc, #36]	; (8006478 <prvCheckForValidListAndQueue+0x44>)
 8006454:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006456:	4b0b      	ldr	r3, [pc, #44]	; (8006484 <prvCheckForValidListAndQueue+0x50>)
 8006458:	4a08      	ldr	r2, [pc, #32]	; (800647c <prvCheckForValidListAndQueue+0x48>)
 800645a:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800645c:	2005      	movs	r0, #5
 800645e:	210c      	movs	r1, #12
 8006460:	2200      	movs	r2, #0
 8006462:	f001 fda3 	bl	8007fac <xQueueGenericCreate>
 8006466:	4602      	mov	r2, r0
 8006468:	4b02      	ldr	r3, [pc, #8]	; (8006474 <prvCheckForValidListAndQueue+0x40>)
 800646a:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800646c:	f002 fba6 	bl	8008bbc <vPortExitCritical>
}
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	200000bc 	.word	0x200000bc
 8006478:	2000008c 	.word	0x2000008c
 800647c:	200000a0 	.word	0x200000a0
 8006480:	200000b4 	.word	0x200000b4
 8006484:	200000b8 	.word	0x200000b8

08006488 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	60fb      	str	r3, [r7, #12]

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 8006494:	f002 fb7a 	bl	8008b8c <vPortEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	695b      	ldr	r3, [r3, #20]
 800649c:	2b00      	cmp	r3, #0
 800649e:	bf0c      	ite	eq
 80064a0:	2300      	moveq	r3, #0
 80064a2:	2301      	movne	r3, #1
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
 80064a8:	f002 fb88 	bl	8008bbc <vPortExitCritical>

	return xTimerIsInActiveList;
 80064ac:	68bb      	ldr	r3, [r7, #8]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 80064ae:	4618      	mov	r0, r3
 80064b0:	3710      	adds	r7, #16
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop

080064b8 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80064b8:	b480      	push	{r7}
 80064ba:	b085      	sub	sp, #20
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	60fb      	str	r3, [r7, #12]

	return pxTimer->pvTimerID;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6a1b      	ldr	r3, [r3, #32]
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3714      	adds	r7, #20
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b08a      	sub	sp, #40	; 0x28
 80064d8:	af02      	add	r7, sp, #8
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	603b      	str	r3, [r7, #0]
 80064e0:	4613      	mov	r3, r2
 80064e2:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 80064e4:	88fb      	ldrh	r3, [r7, #6]
 80064e6:	4618      	mov	r0, r3
 80064e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064ea:	f001 f8e5 	bl	80076b8 <prvAllocateTCBAndStack>
 80064ee:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d065      	beq.n	80065c2 <xTaskGenericCreate+0xee>
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064fa:	88fb      	ldrh	r3, [r7, #6]
 80064fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006500:	3b01      	subs	r3, #1
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	4413      	add	r3, r2
 8006506:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	f023 0307 	bic.w	r3, r3, #7
 800650e:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 8006510:	88fb      	ldrh	r3, [r7, #6]
 8006512:	9300      	str	r3, [sp, #0]
 8006514:	69b8      	ldr	r0, [r7, #24]
 8006516:	68b9      	ldr	r1, [r7, #8]
 8006518:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800651a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800651c:	f000 ffcc 	bl	80074b8 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006520:	6978      	ldr	r0, [r7, #20]
 8006522:	68f9      	ldr	r1, [r7, #12]
 8006524:	683a      	ldr	r2, [r7, #0]
 8006526:	f002 faa5 	bl	8008a74 <pxPortInitialiseStack>
 800652a:	4602      	mov	r2, r0
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 8006530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006532:	2b00      	cmp	r3, #0
 8006534:	d002      	beq.n	800653c <xTaskGenericCreate+0x68>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006538:	69ba      	ldr	r2, [r7, #24]
 800653a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
 800653c:	f002 fb26 	bl	8008b8c <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 8006540:	4b2e      	ldr	r3, [pc, #184]	; (80065fc <xTaskGenericCreate+0x128>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	1c5a      	adds	r2, r3, #1
 8006546:	4b2d      	ldr	r3, [pc, #180]	; (80065fc <xTaskGenericCreate+0x128>)
 8006548:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
 800654a:	4b2d      	ldr	r3, [pc, #180]	; (8006600 <xTaskGenericCreate+0x12c>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d109      	bne.n	8006566 <xTaskGenericCreate+0x92>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 8006552:	4b2b      	ldr	r3, [pc, #172]	; (8006600 <xTaskGenericCreate+0x12c>)
 8006554:	69ba      	ldr	r2, [r7, #24]
 8006556:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006558:	4b28      	ldr	r3, [pc, #160]	; (80065fc <xTaskGenericCreate+0x128>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	2b01      	cmp	r3, #1
 800655e:	d10f      	bne.n	8006580 <xTaskGenericCreate+0xac>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 8006560:	f000 fffc 	bl	800755c <prvInitialiseTaskLists>
 8006564:	e00c      	b.n	8006580 <xTaskGenericCreate+0xac>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 8006566:	4b27      	ldr	r3, [pc, #156]	; (8006604 <xTaskGenericCreate+0x130>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d108      	bne.n	8006580 <xTaskGenericCreate+0xac>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800656e:	4b24      	ldr	r3, [pc, #144]	; (8006600 <xTaskGenericCreate+0x12c>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006576:	429a      	cmp	r2, r3
 8006578:	d802      	bhi.n	8006580 <xTaskGenericCreate+0xac>
					{
						pxCurrentTCB = pxNewTCB;
 800657a:	4b21      	ldr	r3, [pc, #132]	; (8006600 <xTaskGenericCreate+0x12c>)
 800657c:	69ba      	ldr	r2, [r7, #24]
 800657e:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 8006580:	4b21      	ldr	r3, [pc, #132]	; (8006608 <xTaskGenericCreate+0x134>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	1c5a      	adds	r2, r3, #1
 8006586:	4b20      	ldr	r3, [pc, #128]	; (8006608 <xTaskGenericCreate+0x134>)
 8006588:	601a      	str	r2, [r3, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658e:	2201      	movs	r2, #1
 8006590:	409a      	lsls	r2, r3
 8006592:	4b1e      	ldr	r3, [pc, #120]	; (800660c <xTaskGenericCreate+0x138>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	431a      	orrs	r2, r3
 8006598:	4b1c      	ldr	r3, [pc, #112]	; (800660c <xTaskGenericCreate+0x138>)
 800659a:	601a      	str	r2, [r3, #0]
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065a0:	4613      	mov	r3, r2
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	4413      	add	r3, r2
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	4a19      	ldr	r2, [pc, #100]	; (8006610 <xTaskGenericCreate+0x13c>)
 80065aa:	441a      	add	r2, r3
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	3304      	adds	r3, #4
 80065b0:	4610      	mov	r0, r2
 80065b2:	4619      	mov	r1, r3
 80065b4:	f002 f9d8 	bl	8008968 <vListInsertEnd>

			xReturn = pdPASS;
 80065b8:	2301      	movs	r3, #1
 80065ba:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 80065bc:	f002 fafe 	bl	8008bbc <vPortExitCritical>
 80065c0:	e002      	b.n	80065c8 <xTaskGenericCreate+0xf4>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80065c2:	f04f 33ff 	mov.w	r3, #4294967295
 80065c6:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d111      	bne.n	80065f2 <xTaskGenericCreate+0x11e>
	{
		if( xSchedulerRunning != pdFALSE )
 80065ce:	4b0d      	ldr	r3, [pc, #52]	; (8006604 <xTaskGenericCreate+0x130>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00d      	beq.n	80065f2 <xTaskGenericCreate+0x11e>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 80065d6:	4b0a      	ldr	r3, [pc, #40]	; (8006600 <xTaskGenericCreate+0x12c>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065de:	429a      	cmp	r2, r3
 80065e0:	d207      	bcs.n	80065f2 <xTaskGenericCreate+0x11e>
			{
				taskYIELD_IF_USING_PREEMPTION();
 80065e2:	4b0c      	ldr	r3, [pc, #48]	; (8006614 <xTaskGenericCreate+0x140>)
 80065e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065e8:	601a      	str	r2, [r3, #0]
 80065ea:	f3bf 8f4f 	dsb	sy
 80065ee:	f3bf 8f6f 	isb	sy
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
 80065f2:	69fb      	ldr	r3, [r7, #28]
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3720      	adds	r7, #32
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	2000019c 	.word	0x2000019c
 8006600:	200000c4 	.word	0x200000c4
 8006604:	200001a8 	.word	0x200001a8
 8006608:	200001b8 	.word	0x200001b8
 800660c:	200001a4 	.word	0x200001a4
 8006610:	200000c8 	.word	0x200000c8
 8006614:	e000ed04 	.word	0xe000ed04

08006618 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006620:	f002 fab4 	bl	8008b8c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d102      	bne.n	8006630 <vTaskDelete+0x18>
 800662a:	4b2c      	ldr	r3, [pc, #176]	; (80066dc <vTaskDelete+0xc4>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	e000      	b.n	8006632 <vTaskDelete+0x1a>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	3304      	adds	r3, #4
 8006638:	4618      	mov	r0, r3
 800663a:	f002 f9f1 	bl	8008a20 <uxListRemove>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d115      	bne.n	8006670 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006648:	4925      	ldr	r1, [pc, #148]	; (80066e0 <vTaskDelete+0xc8>)
 800664a:	4613      	mov	r3, r2
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	4413      	add	r3, r2
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	440b      	add	r3, r1
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d10a      	bne.n	8006670 <vTaskDelete+0x58>
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665e:	2201      	movs	r2, #1
 8006660:	fa02 f303 	lsl.w	r3, r2, r3
 8006664:	43da      	mvns	r2, r3
 8006666:	4b1f      	ldr	r3, [pc, #124]	; (80066e4 <vTaskDelete+0xcc>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	401a      	ands	r2, r3
 800666c:	4b1d      	ldr	r3, [pc, #116]	; (80066e4 <vTaskDelete+0xcc>)
 800666e:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006674:	2b00      	cmp	r3, #0
 8006676:	d004      	beq.n	8006682 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	3318      	adds	r3, #24
 800667c:	4618      	mov	r0, r3
 800667e:	f002 f9cf 	bl	8008a20 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	3304      	adds	r3, #4
 8006686:	4818      	ldr	r0, [pc, #96]	; (80066e8 <vTaskDelete+0xd0>)
 8006688:	4619      	mov	r1, r3
 800668a:	f002 f96d 	bl	8008968 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
 800668e:	4b17      	ldr	r3, [pc, #92]	; (80066ec <vTaskDelete+0xd4>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	1c5a      	adds	r2, r3, #1
 8006694:	4b15      	ldr	r3, [pc, #84]	; (80066ec <vTaskDelete+0xd4>)
 8006696:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
 8006698:	4b15      	ldr	r3, [pc, #84]	; (80066f0 <vTaskDelete+0xd8>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	1c5a      	adds	r2, r3, #1
 800669e:	4b14      	ldr	r3, [pc, #80]	; (80066f0 <vTaskDelete+0xd8>)
 80066a0:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 80066a2:	f002 fa8b 	bl	8008bbc <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80066a6:	4b13      	ldr	r3, [pc, #76]	; (80066f4 <vTaskDelete+0xdc>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d013      	beq.n	80066d6 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 80066ae:	4b0b      	ldr	r3, [pc, #44]	; (80066dc <vTaskDelete+0xc4>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d108      	bne.n	80066ca <vTaskDelete+0xb2>
				in which Windows specific clean up operations are performed,
				after which it is not possible to yield away from this task -
				hence xYieldPending is used to latch that a context switch is
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
				portYIELD_WITHIN_API();
 80066b8:	4b0f      	ldr	r3, [pc, #60]	; (80066f8 <vTaskDelete+0xe0>)
 80066ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066be:	601a      	str	r2, [r3, #0]
 80066c0:	f3bf 8f4f 	dsb	sy
 80066c4:	f3bf 8f6f 	isb	sy
 80066c8:	e005      	b.n	80066d6 <vTaskDelete+0xbe>
			}
			else
			{
				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				taskENTER_CRITICAL();
 80066ca:	f002 fa5f 	bl	8008b8c <vPortEnterCritical>
				{
					prvResetNextTaskUnblockTime();
 80066ce:	f001 f83b 	bl	8007748 <prvResetNextTaskUnblockTime>
				}
				taskEXIT_CRITICAL();
 80066d2:	f002 fa73 	bl	8008bbc <vPortExitCritical>
			}
		}
	}
 80066d6:	3710      	adds	r7, #16
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	200000c4 	.word	0x200000c4
 80066e0:	200000c8 	.word	0x200000c8
 80066e4:	200001a4 	.word	0x200001a4
 80066e8:	20000170 	.word	0x20000170
 80066ec:	20000184 	.word	0x20000184
 80066f0:	200001b8 	.word	0x200001b8
 80066f4:	200001a8 	.word	0x200001a8
 80066f8:	e000ed04 	.word	0xe000ed04

080066fc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b086      	sub	sp, #24
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8006706:	2300      	movs	r3, #0
 8006708:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );
		configASSERT( uxSchedulerSuspended == 0 );

		vTaskSuspendAll();
 800670a:	f000 fb25 	bl	8006d58 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800670e:	4b29      	ldr	r3, [pc, #164]	; (80067b4 <vTaskDelayUntil+0xb8>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	4413      	add	r3, r2
 800671c:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	429a      	cmp	r2, r3
 8006726:	d90b      	bls.n	8006740 <vTaskDelayUntil+0x44>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	429a      	cmp	r2, r3
 8006730:	d911      	bls.n	8006756 <vTaskDelayUntil+0x5a>
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	429a      	cmp	r2, r3
 8006738:	d90d      	bls.n	8006756 <vTaskDelayUntil+0x5a>
				{
					xShouldDelay = pdTRUE;
 800673a:	2301      	movs	r3, #1
 800673c:	617b      	str	r3, [r7, #20]
 800673e:	e00a      	b.n	8006756 <vTaskDelayUntil+0x5a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	429a      	cmp	r2, r3
 8006748:	d803      	bhi.n	8006752 <vTaskDelayUntil+0x56>
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	429a      	cmp	r2, r3
 8006750:	d901      	bls.n	8006756 <vTaskDelayUntil+0x5a>
				{
					xShouldDelay = pdTRUE;
 8006752:	2301      	movs	r3, #1
 8006754:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d017      	beq.n	8006792 <vTaskDelayUntil+0x96>
			{
				traceTASK_DELAY_UNTIL();

				/* Remove the task from the ready list before adding it to the
				blocked list as the same list item is used for both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8006762:	4b15      	ldr	r3, [pc, #84]	; (80067b8 <vTaskDelayUntil+0xbc>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	3304      	adds	r3, #4
 8006768:	4618      	mov	r0, r3
 800676a:	f002 f959 	bl	8008a20 <uxListRemove>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d10b      	bne.n	800678c <vTaskDelayUntil+0x90>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006774:	4b10      	ldr	r3, [pc, #64]	; (80067b8 <vTaskDelayUntil+0xbc>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677a:	2201      	movs	r2, #1
 800677c:	fa02 f303 	lsl.w	r3, r2, r3
 8006780:	43da      	mvns	r2, r3
 8006782:	4b0e      	ldr	r3, [pc, #56]	; (80067bc <vTaskDelayUntil+0xc0>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	401a      	ands	r2, r3
 8006788:	4b0c      	ldr	r3, [pc, #48]	; (80067bc <vTaskDelayUntil+0xc0>)
 800678a:	601a      	str	r2, [r3, #0]
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800678c:	68f8      	ldr	r0, [r7, #12]
 800678e:	f000 ff5d 	bl	800764c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8006792:	f000 faef 	bl	8006d74 <xTaskResumeAll>
 8006796:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d107      	bne.n	80067ae <vTaskDelayUntil+0xb2>
		{
			portYIELD_WITHIN_API();
 800679e:	4b08      	ldr	r3, [pc, #32]	; (80067c0 <vTaskDelayUntil+0xc4>)
 80067a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067a4:	601a      	str	r2, [r3, #0]
 80067a6:	f3bf 8f4f 	dsb	sy
 80067aa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80067ae:	3718      	adds	r7, #24
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	200001a0 	.word	0x200001a0
 80067b8:	200000c4 	.word	0x200000c4
 80067bc:	200001a4 	.word	0x200001a4
 80067c0:	e000ed04 	.word	0xe000ed04

080067c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;
 80067cc:	2300      	movs	r3, #0
 80067ce:	60fb      	str	r3, [r7, #12]


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d021      	beq.n	800681a <vTaskDelay+0x56>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 80067d6:	f000 fabf 	bl	8006d58 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 80067da:	4b17      	ldr	r3, [pc, #92]	; (8006838 <vTaskDelay+0x74>)
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4413      	add	r3, r2
 80067e2:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80067e4:	4b15      	ldr	r3, [pc, #84]	; (800683c <vTaskDelay+0x78>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	3304      	adds	r3, #4
 80067ea:	4618      	mov	r0, r3
 80067ec:	f002 f918 	bl	8008a20 <uxListRemove>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d10b      	bne.n	800680e <vTaskDelay+0x4a>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80067f6:	4b11      	ldr	r3, [pc, #68]	; (800683c <vTaskDelay+0x78>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067fc:	2201      	movs	r2, #1
 80067fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006802:	43da      	mvns	r2, r3
 8006804:	4b0e      	ldr	r3, [pc, #56]	; (8006840 <vTaskDelay+0x7c>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	401a      	ands	r2, r3
 800680a:	4b0d      	ldr	r3, [pc, #52]	; (8006840 <vTaskDelay+0x7c>)
 800680c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800680e:	68b8      	ldr	r0, [r7, #8]
 8006810:	f000 ff1c 	bl	800764c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006814:	f000 faae 	bl	8006d74 <xTaskResumeAll>
 8006818:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d107      	bne.n	8006830 <vTaskDelay+0x6c>
		{
			portYIELD_WITHIN_API();
 8006820:	4b08      	ldr	r3, [pc, #32]	; (8006844 <vTaskDelay+0x80>)
 8006822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006826:	601a      	str	r2, [r3, #0]
 8006828:	f3bf 8f4f 	dsb	sy
 800682c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	200001a0 	.word	0x200001a0
 800683c:	200000c4 	.word	0x200000c4
 8006840:	200001a4 	.word	0x200001a4
 8006844:	e000ed04 	.word	0xe000ed04

08006848 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 8006850:	f002 f99c 	bl	8008b8c <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d102      	bne.n	8006860 <uxTaskPriorityGet+0x18>
 800685a:	4b07      	ldr	r3, [pc, #28]	; (8006878 <uxTaskPriorityGet+0x30>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	e000      	b.n	8006862 <uxTaskPriorityGet+0x1a>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006868:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
 800686a:	f002 f9a7 	bl	8008bbc <vPortExitCritical>

		return uxReturn;
 800686e:	68bb      	ldr	r3, [r7, #8]
	}
 8006870:	4618      	mov	r0, r3
 8006872:	3710      	adds	r7, #16
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}
 8006878:	200000c4 	.word	0x200000c4

0800687c <uxTaskPriorityGetFromISR>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
	{
 800687c:	b480      	push	{r7}
 800687e:	b089      	sub	sp, #36	; 0x24
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006884:	f3ef 8211 	mrs	r2, BASEPRI
 8006888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800688c:	f383 8811 	msr	BASEPRI, r3
 8006890:	f3bf 8f6f 	isb	sy
 8006894:	f3bf 8f4f 	dsb	sy
 8006898:	613a      	str	r2, [r7, #16]
 800689a:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800689c:	693b      	ldr	r3, [r7, #16]
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 800689e:	61fb      	str	r3, [r7, #28]
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d102      	bne.n	80068ac <uxTaskPriorityGetFromISR+0x30>
 80068a6:	4b0a      	ldr	r3, [pc, #40]	; (80068d0 <uxTaskPriorityGetFromISR+0x54>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	e000      	b.n	80068ae <uxTaskPriorityGetFromISR+0x32>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	61bb      	str	r3, [r7, #24]
			uxReturn = pxTCB->uxPriority;
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b4:	617b      	str	r3, [r7, #20]
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	f383 8811 	msr	BASEPRI, r3
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );

		return uxReturn;
 80068c0:	697b      	ldr	r3, [r7, #20]
	}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3724      	adds	r7, #36	; 0x24
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop
 80068d0:	200000c4 	.word	0x200000c4

080068d4 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b086      	sub	sp, #24
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 80068de:	2300      	movs	r3, #0
 80068e0:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	2b04      	cmp	r3, #4
 80068e6:	d901      	bls.n	80068ec <vTaskPrioritySet+0x18>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80068e8:	2304      	movs	r3, #4
 80068ea:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 80068ec:	f002 f94e 	bl	8008b8c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d102      	bne.n	80068fc <vTaskPrioritySet+0x28>
 80068f6:	4b43      	ldr	r3, [pc, #268]	; (8006a04 <vTaskPrioritySet+0x130>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	e000      	b.n	80068fe <vTaskPrioritySet+0x2a>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006904:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	429a      	cmp	r2, r3
 800690c:	d074      	beq.n	80069f8 <vTaskPrioritySet+0x124>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 800690e:	683a      	ldr	r2, [r7, #0]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	429a      	cmp	r2, r3
 8006914:	d90d      	bls.n	8006932 <vTaskPrioritySet+0x5e>
				{
					if( pxTCB != pxCurrentTCB )
 8006916:	4b3b      	ldr	r3, [pc, #236]	; (8006a04 <vTaskPrioritySet+0x130>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	693a      	ldr	r2, [r7, #16]
 800691c:	429a      	cmp	r2, r3
 800691e:	d00f      	beq.n	8006940 <vTaskPrioritySet+0x6c>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8006920:	4b38      	ldr	r3, [pc, #224]	; (8006a04 <vTaskPrioritySet+0x130>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	429a      	cmp	r2, r3
 800692a:	d809      	bhi.n	8006940 <vTaskPrioritySet+0x6c>
						{
							xYieldRequired = pdTRUE;
 800692c:	2301      	movs	r3, #1
 800692e:	617b      	str	r3, [r7, #20]
 8006930:	e006      	b.n	8006940 <vTaskPrioritySet+0x6c>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8006932:	4b34      	ldr	r3, [pc, #208]	; (8006a04 <vTaskPrioritySet+0x130>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	693a      	ldr	r2, [r7, #16]
 8006938:	429a      	cmp	r2, r3
 800693a:	d101      	bne.n	8006940 <vTaskPrioritySet+0x6c>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 800693c:	2301      	movs	r3, #1
 800693e:	617b      	str	r3, [r7, #20]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006944:	60bb      	str	r3, [r7, #8]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800694e:	429a      	cmp	r2, r3
 8006950:	d102      	bne.n	8006958 <vTaskPrioritySet+0x84>
					{
						pxTCB->uxPriority = uxNewPriority;
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	683a      	ldr	r2, [r7, #0]
 8006956:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	683a      	ldr	r2, [r7, #0]
 800695c:	641a      	str	r2, [r3, #64]	; 0x40
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	2b00      	cmp	r3, #0
 8006964:	db04      	blt.n	8006970 <vTaskPrioritySet+0x9c>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	f1c3 0205 	rsb	r2, r3, #5
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	6959      	ldr	r1, [r3, #20]
 8006974:	68ba      	ldr	r2, [r7, #8]
 8006976:	4613      	mov	r3, r2
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	4413      	add	r3, r2
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	4a22      	ldr	r2, [pc, #136]	; (8006a08 <vTaskPrioritySet+0x134>)
 8006980:	4413      	add	r3, r2
 8006982:	4299      	cmp	r1, r3
 8006984:	d101      	bne.n	800698a <vTaskPrioritySet+0xb6>
 8006986:	2301      	movs	r3, #1
 8006988:	e000      	b.n	800698c <vTaskPrioritySet+0xb8>
 800698a:	2300      	movs	r3, #0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d028      	beq.n	80069e2 <vTaskPrioritySet+0x10e>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	3304      	adds	r3, #4
 8006994:	4618      	mov	r0, r3
 8006996:	f002 f843 	bl	8008a20 <uxListRemove>
 800699a:	4603      	mov	r3, r0
 800699c:	2b00      	cmp	r3, #0
 800699e:	d109      	bne.n	80069b4 <vTaskPrioritySet+0xe0>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	2201      	movs	r2, #1
 80069a4:	fa02 f303 	lsl.w	r3, r2, r3
 80069a8:	43da      	mvns	r2, r3
 80069aa:	4b18      	ldr	r3, [pc, #96]	; (8006a0c <vTaskPrioritySet+0x138>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	401a      	ands	r2, r3
 80069b0:	4b16      	ldr	r3, [pc, #88]	; (8006a0c <vTaskPrioritySet+0x138>)
 80069b2:	601a      	str	r2, [r3, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b8:	2201      	movs	r2, #1
 80069ba:	409a      	lsls	r2, r3
 80069bc:	4b13      	ldr	r3, [pc, #76]	; (8006a0c <vTaskPrioritySet+0x138>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	431a      	orrs	r2, r3
 80069c2:	4b12      	ldr	r3, [pc, #72]	; (8006a0c <vTaskPrioritySet+0x138>)
 80069c4:	601a      	str	r2, [r3, #0]
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ca:	4613      	mov	r3, r2
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	4413      	add	r3, r2
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4a0d      	ldr	r2, [pc, #52]	; (8006a08 <vTaskPrioritySet+0x134>)
 80069d4:	441a      	add	r2, r3
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	3304      	adds	r3, #4
 80069da:	4610      	mov	r0, r2
 80069dc:	4619      	mov	r1, r3
 80069de:	f001 ffc3 	bl	8008968 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired == pdTRUE )
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d107      	bne.n	80069f8 <vTaskPrioritySet+0x124>
				{
					taskYIELD_IF_USING_PREEMPTION();
 80069e8:	4b09      	ldr	r3, [pc, #36]	; (8006a10 <vTaskPrioritySet+0x13c>)
 80069ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069ee:	601a      	str	r2, [r3, #0]
 80069f0:	f3bf 8f4f 	dsb	sy
 80069f4:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 80069f8:	f002 f8e0 	bl	8008bbc <vPortExitCritical>
	}
 80069fc:	3718      	adds	r7, #24
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	200000c4 	.word	0x200000c4
 8006a08:	200000c8 	.word	0x200000c8
 8006a0c:	200001a4 	.word	0x200001a4
 8006a10:	e000ed04 	.word	0xe000ed04

08006a14 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b084      	sub	sp, #16
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006a1c:	f002 f8b6 	bl	8008b8c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d102      	bne.n	8006a2c <vTaskSuspend+0x18>
 8006a26:	4b30      	ldr	r3, [pc, #192]	; (8006ae8 <vTaskSuspend+0xd4>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	e000      	b.n	8006a2e <vTaskSuspend+0x1a>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	3304      	adds	r3, #4
 8006a34:	4618      	mov	r0, r3
 8006a36:	f001 fff3 	bl	8008a20 <uxListRemove>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d115      	bne.n	8006a6c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a44:	4929      	ldr	r1, [pc, #164]	; (8006aec <vTaskSuspend+0xd8>)
 8006a46:	4613      	mov	r3, r2
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	4413      	add	r3, r2
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	440b      	add	r3, r1
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d10a      	bne.n	8006a6c <vTaskSuspend+0x58>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a60:	43da      	mvns	r2, r3
 8006a62:	4b23      	ldr	r3, [pc, #140]	; (8006af0 <vTaskSuspend+0xdc>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	401a      	ands	r2, r3
 8006a68:	4b21      	ldr	r3, [pc, #132]	; (8006af0 <vTaskSuspend+0xdc>)
 8006a6a:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d004      	beq.n	8006a7e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	3318      	adds	r3, #24
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f001 ffd1 	bl	8008a20 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	3304      	adds	r3, #4
 8006a82:	481c      	ldr	r0, [pc, #112]	; (8006af4 <vTaskSuspend+0xe0>)
 8006a84:	4619      	mov	r1, r3
 8006a86:	f001 ff6f 	bl	8008968 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
 8006a8a:	f002 f897 	bl	8008bbc <vPortExitCritical>

		if( pxTCB == pxCurrentTCB )
 8006a8e:	4b16      	ldr	r3, [pc, #88]	; (8006ae8 <vTaskSuspend+0xd4>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d119      	bne.n	8006acc <vTaskSuspend+0xb8>
		{
			if( xSchedulerRunning != pdFALSE )
 8006a98:	4b17      	ldr	r3, [pc, #92]	; (8006af8 <vTaskSuspend+0xe4>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d008      	beq.n	8006ab2 <vTaskSuspend+0x9e>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
 8006aa0:	4b16      	ldr	r3, [pc, #88]	; (8006afc <vTaskSuspend+0xe8>)
 8006aa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006aa6:	601a      	str	r2, [r3, #0]
 8006aa8:	f3bf 8f4f 	dsb	sy
 8006aac:	f3bf 8f6f 	isb	sy
 8006ab0:	e016      	b.n	8006ae0 <vTaskSuspend+0xcc>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8006ab2:	4b10      	ldr	r3, [pc, #64]	; (8006af4 <vTaskSuspend+0xe0>)
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	4b12      	ldr	r3, [pc, #72]	; (8006b00 <vTaskSuspend+0xec>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d103      	bne.n	8006ac6 <vTaskSuspend+0xb2>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
 8006abe:	4b0a      	ldr	r3, [pc, #40]	; (8006ae8 <vTaskSuspend+0xd4>)
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	601a      	str	r2, [r3, #0]
 8006ac4:	e00c      	b.n	8006ae0 <vTaskSuspend+0xcc>
				}
				else
				{
					vTaskSwitchContext();
 8006ac6:	f000 fab7 	bl	8007038 <vTaskSwitchContext>
 8006aca:	e009      	b.n	8006ae0 <vTaskSuspend+0xcc>
				}
			}
		}
		else
		{
			if( xSchedulerRunning != pdFALSE )
 8006acc:	4b0a      	ldr	r3, [pc, #40]	; (8006af8 <vTaskSuspend+0xe4>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d005      	beq.n	8006ae0 <vTaskSuspend+0xcc>
			{
				/* A task other than the currently running task was suspended,
				reset the next expected unblock time in case it referred to the
				task that is now in the Suspended state. */
				taskENTER_CRITICAL();
 8006ad4:	f002 f85a 	bl	8008b8c <vPortEnterCritical>
				{
					prvResetNextTaskUnblockTime();
 8006ad8:	f000 fe36 	bl	8007748 <prvResetNextTaskUnblockTime>
				}
				taskEXIT_CRITICAL();
 8006adc:	f002 f86e 	bl	8008bbc <vPortExitCritical>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006ae0:	3710      	adds	r7, #16
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	200000c4 	.word	0x200000c4
 8006aec:	200000c8 	.word	0x200000c8
 8006af0:	200001a4 	.word	0x200001a4
 8006af4:	20000188 	.word	0x20000188
 8006af8:	200001a8 	.word	0x200001a8
 8006afc:	e000ed04 	.word	0xe000ed04
 8006b00:	2000019c 	.word	0x2000019c

08006b04 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8006b04:	b480      	push	{r7}
 8006b06:	b085      	sub	sp, #20
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	60fb      	str	r3, [r7, #12]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	60bb      	str	r3, [r7, #8]

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	695a      	ldr	r2, [r3, #20]
 8006b18:	4b0f      	ldr	r3, [pc, #60]	; (8006b58 <prvTaskIsTaskSuspended+0x54>)
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d101      	bne.n	8006b22 <prvTaskIsTaskSuspended+0x1e>
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e000      	b.n	8006b24 <prvTaskIsTaskSuspended+0x20>
 8006b22:	2300      	movs	r3, #0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00f      	beq.n	8006b48 <prvTaskIsTaskSuspended+0x44>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b2c:	4b0b      	ldr	r3, [pc, #44]	; (8006b5c <prvTaskIsTaskSuspended+0x58>)
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d00a      	beq.n	8006b48 <prvTaskIsTaskSuspended+0x44>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d101      	bne.n	8006b3e <prvTaskIsTaskSuspended+0x3a>
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e000      	b.n	8006b40 <prvTaskIsTaskSuspended+0x3c>
 8006b3e:	2300      	movs	r3, #0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d001      	beq.n	8006b48 <prvTaskIsTaskSuspended+0x44>
				{
					xReturn = pdTRUE;
 8006b44:	2301      	movs	r3, #1
 8006b46:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b48:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3714      	adds	r7, #20
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr
 8006b56:	bf00      	nop
 8006b58:	20000188 	.word	0x20000188
 8006b5c:	2000015c 	.word	0x2000015c

08006b60 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	60fb      	str	r3, [r7, #12]
		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d039      	beq.n	8006be6 <vTaskResume+0x86>
 8006b72:	4b1e      	ldr	r3, [pc, #120]	; (8006bec <vTaskResume+0x8c>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d034      	beq.n	8006be6 <vTaskResume+0x86>
		{
			taskENTER_CRITICAL();
 8006b7c:	f002 f806 	bl	8008b8c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f7ff ffbf 	bl	8006b04 <prvTaskIsTaskSuspended>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d12a      	bne.n	8006be2 <vTaskResume+0x82>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	3304      	adds	r3, #4
 8006b90:	4618      	mov	r0, r3
 8006b92:	f001 ff45 	bl	8008a20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	409a      	lsls	r2, r3
 8006b9e:	4b14      	ldr	r3, [pc, #80]	; (8006bf0 <vTaskResume+0x90>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	431a      	orrs	r2, r3
 8006ba4:	4b12      	ldr	r3, [pc, #72]	; (8006bf0 <vTaskResume+0x90>)
 8006ba6:	601a      	str	r2, [r3, #0]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bac:	4613      	mov	r3, r2
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	4413      	add	r3, r2
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	4a0f      	ldr	r2, [pc, #60]	; (8006bf4 <vTaskResume+0x94>)
 8006bb6:	441a      	add	r2, r3
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	3304      	adds	r3, #4
 8006bbc:	4610      	mov	r0, r2
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	f001 fed2 	bl	8008968 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bc8:	4b08      	ldr	r3, [pc, #32]	; (8006bec <vTaskResume+0x8c>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d307      	bcc.n	8006be2 <vTaskResume+0x82>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8006bd2:	4b09      	ldr	r3, [pc, #36]	; (8006bf8 <vTaskResume+0x98>)
 8006bd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bd8:	601a      	str	r2, [r3, #0]
 8006bda:	f3bf 8f4f 	dsb	sy
 8006bde:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8006be2:	f001 ffeb 	bl	8008bbc <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006be6:	3710      	adds	r7, #16
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	200000c4 	.word	0x200000c4
 8006bf0:	200001a4 	.word	0x200001a4
 8006bf4:	200000c8 	.word	0x200000c8
 8006bf8:	e000ed04 	.word	0xe000ed04

08006bfc <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b088      	sub	sp, #32
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8006c04:	2300      	movs	r3, #0
 8006c06:	61fb      	str	r3, [r7, #28]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	61bb      	str	r3, [r7, #24]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006c0c:	f3ef 8211 	mrs	r2, BASEPRI
 8006c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c14:	f383 8811 	msr	BASEPRI, r3
 8006c18:	f3bf 8f6f 	isb	sy
 8006c1c:	f3bf 8f4f 	dsb	sy
 8006c20:	613a      	str	r2, [r7, #16]
 8006c22:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006c24:	693b      	ldr	r3, [r7, #16]
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c26:	617b      	str	r3, [r7, #20]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 8006c28:	69b8      	ldr	r0, [r7, #24]
 8006c2a:	f7ff ff6b 	bl	8006b04 <prvTaskIsTaskSuspended>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d12f      	bne.n	8006c94 <xTaskResumeFromISR+0x98>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c34:	4b1c      	ldr	r3, [pc, #112]	; (8006ca8 <xTaskResumeFromISR+0xac>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d125      	bne.n	8006c88 <xTaskResumeFromISR+0x8c>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c40:	4b1a      	ldr	r3, [pc, #104]	; (8006cac <xTaskResumeFromISR+0xb0>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d301      	bcc.n	8006c4e <xTaskResumeFromISR+0x52>
					{
						xYieldRequired = pdTRUE;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	61fb      	str	r3, [r7, #28]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	3304      	adds	r3, #4
 8006c52:	4618      	mov	r0, r3
 8006c54:	f001 fee4 	bl	8008a20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006c58:	69bb      	ldr	r3, [r7, #24]
 8006c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	409a      	lsls	r2, r3
 8006c60:	4b13      	ldr	r3, [pc, #76]	; (8006cb0 <xTaskResumeFromISR+0xb4>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	431a      	orrs	r2, r3
 8006c66:	4b12      	ldr	r3, [pc, #72]	; (8006cb0 <xTaskResumeFromISR+0xb4>)
 8006c68:	601a      	str	r2, [r3, #0]
 8006c6a:	69bb      	ldr	r3, [r7, #24]
 8006c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c6e:	4613      	mov	r3, r2
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	4413      	add	r3, r2
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	4a0f      	ldr	r2, [pc, #60]	; (8006cb4 <xTaskResumeFromISR+0xb8>)
 8006c78:	441a      	add	r2, r3
 8006c7a:	69bb      	ldr	r3, [r7, #24]
 8006c7c:	3304      	adds	r3, #4
 8006c7e:	4610      	mov	r0, r2
 8006c80:	4619      	mov	r1, r3
 8006c82:	f001 fe71 	bl	8008968 <vListInsertEnd>
 8006c86:	e005      	b.n	8006c94 <xTaskResumeFromISR+0x98>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	3318      	adds	r3, #24
 8006c8c:	480a      	ldr	r0, [pc, #40]	; (8006cb8 <xTaskResumeFromISR+0xbc>)
 8006c8e:	4619      	mov	r1, r3
 8006c90:	f001 fe6a 	bl	8008968 <vListInsertEnd>
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	f383 8811 	msr	BASEPRI, r3
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8006c9e:	69fb      	ldr	r3, [r7, #28]
	}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3720      	adds	r7, #32
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	200001bc 	.word	0x200001bc
 8006cac:	200000c4 	.word	0x200000c4
 8006cb0:	200001a4 	.word	0x200001a4
 8006cb4:	200000c8 	.word	0x200000c8
 8006cb8:	2000015c 	.word	0x2000015c

08006cbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b086      	sub	sp, #24
 8006cc0:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	9300      	str	r3, [sp, #0]
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	9301      	str	r3, [sp, #4]
 8006cca:	2300      	movs	r3, #0
 8006ccc:	9302      	str	r3, [sp, #8]
 8006cce:	2300      	movs	r3, #0
 8006cd0:	9303      	str	r3, [sp, #12]
 8006cd2:	4812      	ldr	r0, [pc, #72]	; (8006d1c <vTaskStartScheduler+0x60>)
 8006cd4:	4912      	ldr	r1, [pc, #72]	; (8006d20 <vTaskStartScheduler+0x64>)
 8006cd6:	2246      	movs	r2, #70	; 0x46
 8006cd8:	2300      	movs	r3, #0
 8006cda:	f7ff fbfb 	bl	80064d4 <xTaskGenericCreate>
 8006cde:	6078      	str	r0, [r7, #4]
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d102      	bne.n	8006cec <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
 8006ce6:	f7ff f927 	bl	8005f38 <xTimerCreateTimerTask>
 8006cea:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d110      	bne.n	8006d14 <vTaskStartScheduler+0x58>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf6:	f383 8811 	msr	BASEPRI, r3
 8006cfa:	f3bf 8f6f 	isb	sy
 8006cfe:	f3bf 8f4f 	dsb	sy
 8006d02:	603b      	str	r3, [r7, #0]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
 8006d04:	4b07      	ldr	r3, [pc, #28]	; (8006d24 <vTaskStartScheduler+0x68>)
 8006d06:	2201      	movs	r2, #1
 8006d08:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006d0a:	4b07      	ldr	r3, [pc, #28]	; (8006d28 <vTaskStartScheduler+0x6c>)
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006d10:	f001 ff0e 	bl	8008b30 <xPortStartScheduler>
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
 8006d14:	3708      	adds	r7, #8
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	08007485 	.word	0x08007485
 8006d20:	0800918c 	.word	0x0800918c
 8006d24:	200001a8 	.word	0x200001a8
 8006d28:	200001a0 	.word	0x200001a0

08006d2c <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d36:	f383 8811 	msr	BASEPRI, r3
 8006d3a:	f3bf 8f6f 	isb	sy
 8006d3e:	f3bf 8f4f 	dsb	sy
 8006d42:	607b      	str	r3, [r7, #4]
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
	xSchedulerRunning = pdFALSE;
 8006d44:	4b03      	ldr	r3, [pc, #12]	; (8006d54 <vTaskEndScheduler+0x28>)
 8006d46:	2200      	movs	r2, #0
 8006d48:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
 8006d4a:	f001 ff19 	bl	8008b80 <vPortEndScheduler>
}
 8006d4e:	3708      	adds	r7, #8
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	200001a8 	.word	0x200001a8

08006d58 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006d58:	b480      	push	{r7}
 8006d5a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006d5c:	4b04      	ldr	r3, [pc, #16]	; (8006d70 <vTaskSuspendAll+0x18>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	1c5a      	adds	r2, r3, #1
 8006d62:	4b03      	ldr	r3, [pc, #12]	; (8006d70 <vTaskSuspendAll+0x18>)
 8006d64:	601a      	str	r2, [r3, #0]
}
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr
 8006d6e:	bf00      	nop
 8006d70:	200001bc 	.word	0x200001bc

08006d74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006d7e:	f001 ff05 	bl	8008b8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006d82:	4b36      	ldr	r3, [pc, #216]	; (8006e5c <xTaskResumeAll+0xe8>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	1e5a      	subs	r2, r3, #1
 8006d88:	4b34      	ldr	r3, [pc, #208]	; (8006e5c <xTaskResumeAll+0xe8>)
 8006d8a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d8c:	4b33      	ldr	r3, [pc, #204]	; (8006e5c <xTaskResumeAll+0xe8>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d15b      	bne.n	8006e4c <xTaskResumeAll+0xd8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006d94:	4b32      	ldr	r3, [pc, #200]	; (8006e60 <xTaskResumeAll+0xec>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d057      	beq.n	8006e4c <xTaskResumeAll+0xd8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d9c:	e02e      	b.n	8006dfc <xTaskResumeAll+0x88>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006d9e:	4b31      	ldr	r3, [pc, #196]	; (8006e64 <xTaskResumeAll+0xf0>)
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	3318      	adds	r3, #24
 8006daa:	4618      	mov	r0, r3
 8006dac:	f001 fe38 	bl	8008a20 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	3304      	adds	r3, #4
 8006db4:	4618      	mov	r0, r3
 8006db6:	f001 fe33 	bl	8008a20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	409a      	lsls	r2, r3
 8006dc2:	4b29      	ldr	r3, [pc, #164]	; (8006e68 <xTaskResumeAll+0xf4>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	431a      	orrs	r2, r3
 8006dc8:	4b27      	ldr	r3, [pc, #156]	; (8006e68 <xTaskResumeAll+0xf4>)
 8006dca:	601a      	str	r2, [r3, #0]
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	4413      	add	r3, r2
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	4a24      	ldr	r2, [pc, #144]	; (8006e6c <xTaskResumeAll+0xf8>)
 8006dda:	441a      	add	r2, r3
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	3304      	adds	r3, #4
 8006de0:	4610      	mov	r0, r2
 8006de2:	4619      	mov	r1, r3
 8006de4:	f001 fdc0 	bl	8008968 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dec:	4b20      	ldr	r3, [pc, #128]	; (8006e70 <xTaskResumeAll+0xfc>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d302      	bcc.n	8006dfc <xTaskResumeAll+0x88>
					{
						xYieldPending = pdTRUE;
 8006df6:	4b1f      	ldr	r3, [pc, #124]	; (8006e74 <xTaskResumeAll+0x100>)
 8006df8:	2201      	movs	r2, #1
 8006dfa:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006dfc:	4b19      	ldr	r3, [pc, #100]	; (8006e64 <xTaskResumeAll+0xf0>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d1cc      	bne.n	8006d9e <xTaskResumeAll+0x2a>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 8006e04:	4b1c      	ldr	r3, [pc, #112]	; (8006e78 <xTaskResumeAll+0x104>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d011      	beq.n	8006e30 <xTaskResumeAll+0xbc>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 8006e0c:	e00c      	b.n	8006e28 <xTaskResumeAll+0xb4>
					{
						if( xTaskIncrementTick() != pdFALSE )
 8006e0e:	f000 f865 	bl	8006edc <xTaskIncrementTick>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d002      	beq.n	8006e1e <xTaskResumeAll+0xaa>
						{
							xYieldPending = pdTRUE;
 8006e18:	4b16      	ldr	r3, [pc, #88]	; (8006e74 <xTaskResumeAll+0x100>)
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	601a      	str	r2, [r3, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
 8006e1e:	4b16      	ldr	r3, [pc, #88]	; (8006e78 <xTaskResumeAll+0x104>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	1e5a      	subs	r2, r3, #1
 8006e24:	4b14      	ldr	r3, [pc, #80]	; (8006e78 <xTaskResumeAll+0x104>)
 8006e26:	601a      	str	r2, [r3, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 8006e28:	4b13      	ldr	r3, [pc, #76]	; (8006e78 <xTaskResumeAll+0x104>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d1ee      	bne.n	8006e0e <xTaskResumeAll+0x9a>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
 8006e30:	4b10      	ldr	r3, [pc, #64]	; (8006e74 <xTaskResumeAll+0x100>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d109      	bne.n	8006e4c <xTaskResumeAll+0xd8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	607b      	str	r3, [r7, #4]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006e3c:	4b0f      	ldr	r3, [pc, #60]	; (8006e7c <xTaskResumeAll+0x108>)
 8006e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e42:	601a      	str	r2, [r3, #0]
 8006e44:	f3bf 8f4f 	dsb	sy
 8006e48:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e4c:	f001 feb6 	bl	8008bbc <vPortExitCritical>

	return xAlreadyYielded;
 8006e50:	687b      	ldr	r3, [r7, #4]
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3708      	adds	r7, #8
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	200001bc 	.word	0x200001bc
 8006e60:	2000019c 	.word	0x2000019c
 8006e64:	2000015c 	.word	0x2000015c
 8006e68:	200001a4 	.word	0x200001a4
 8006e6c:	200000c8 	.word	0x200000c8
 8006e70:	200000c4 	.word	0x200000c4
 8006e74:	200001b0 	.word	0x200001b0
 8006e78:	200001ac 	.word	0x200001ac
 8006e7c:	e000ed04 	.word	0xe000ed04

08006e80 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006e80:	b480      	push	{r7}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006e86:	4b05      	ldr	r3, [pc, #20]	; (8006e9c <xTaskGetTickCount+0x1c>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006e8c:	687b      	ldr	r3, [r7, #4]
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	370c      	adds	r7, #12
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop
 8006e9c:	200001a0 	.word	0x200001a0

08006ea0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006eaa:	4b05      	ldr	r3, [pc, #20]	; (8006ec0 <xTaskGetTickCountFromISR+0x20>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006eb0:	683b      	ldr	r3, [r7, #0]
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	370c      	adds	r7, #12
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop
 8006ec0:	200001a0 	.word	0x200001a0

08006ec4 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
 8006ec8:	4b03      	ldr	r3, [pc, #12]	; (8006ed8 <uxTaskGetNumberOfTasks+0x14>)
 8006eca:	681b      	ldr	r3, [r3, #0]
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr
 8006ed6:	bf00      	nop
 8006ed8:	2000019c 	.word	0x2000019c

08006edc <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b086      	sub	sp, #24
 8006ee0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ee6:	4b49      	ldr	r3, [pc, #292]	; (800700c <xTaskIncrementTick+0x130>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d17d      	bne.n	8006fea <xTaskIncrementTick+0x10e>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 8006eee:	4b48      	ldr	r3, [pc, #288]	; (8007010 <xTaskIncrementTick+0x134>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	1c5a      	adds	r2, r3, #1
 8006ef4:	4b46      	ldr	r3, [pc, #280]	; (8007010 <xTaskIncrementTick+0x134>)
 8006ef6:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8006ef8:	4b45      	ldr	r3, [pc, #276]	; (8007010 <xTaskIncrementTick+0x134>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	613b      	str	r3, [r7, #16]

			if( xConstTickCount == ( TickType_t ) 0U )
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d110      	bne.n	8006f26 <xTaskIncrementTick+0x4a>
			{
				taskSWITCH_DELAYED_LISTS();
 8006f04:	4b43      	ldr	r3, [pc, #268]	; (8007014 <xTaskIncrementTick+0x138>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	60fb      	str	r3, [r7, #12]
 8006f0a:	4b43      	ldr	r3, [pc, #268]	; (8007018 <xTaskIncrementTick+0x13c>)
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	4b41      	ldr	r3, [pc, #260]	; (8007014 <xTaskIncrementTick+0x138>)
 8006f10:	601a      	str	r2, [r3, #0]
 8006f12:	4b41      	ldr	r3, [pc, #260]	; (8007018 <xTaskIncrementTick+0x13c>)
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	601a      	str	r2, [r3, #0]
 8006f18:	4b40      	ldr	r3, [pc, #256]	; (800701c <xTaskIncrementTick+0x140>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	1c5a      	adds	r2, r3, #1
 8006f1e:	4b3f      	ldr	r3, [pc, #252]	; (800701c <xTaskIncrementTick+0x140>)
 8006f20:	601a      	str	r2, [r3, #0]
 8006f22:	f000 fc11 	bl	8007748 <prvResetNextTaskUnblockTime>

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 8006f26:	4b3e      	ldr	r3, [pc, #248]	; (8007020 <xTaskIncrementTick+0x144>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	693a      	ldr	r2, [r7, #16]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d34d      	bcc.n	8006fcc <xTaskIncrementTick+0xf0>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f30:	4b38      	ldr	r3, [pc, #224]	; (8007014 <xTaskIncrementTick+0x138>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d101      	bne.n	8006f3e <xTaskIncrementTick+0x62>
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e000      	b.n	8006f40 <xTaskIncrementTick+0x64>
 8006f3e:	2300      	movs	r3, #0
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d004      	beq.n	8006f4e <xTaskIncrementTick+0x72>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 8006f44:	4b36      	ldr	r3, [pc, #216]	; (8007020 <xTaskIncrementTick+0x144>)
 8006f46:	f04f 32ff 	mov.w	r2, #4294967295
 8006f4a:	601a      	str	r2, [r3, #0]
						break;
 8006f4c:	e03e      	b.n	8006fcc <xTaskIncrementTick+0xf0>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006f4e:	4b31      	ldr	r3, [pc, #196]	; (8007014 <xTaskIncrementTick+0x138>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	60bb      	str	r3, [r7, #8]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	607b      	str	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
 8006f5e:	693a      	ldr	r2, [r7, #16]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d203      	bcs.n	8006f6e <xTaskIncrementTick+0x92>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
 8006f66:	4b2e      	ldr	r3, [pc, #184]	; (8007020 <xTaskIncrementTick+0x144>)
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	601a      	str	r2, [r3, #0]
							break;
 8006f6c:	e02e      	b.n	8006fcc <xTaskIncrementTick+0xf0>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	3304      	adds	r3, #4
 8006f72:	4618      	mov	r0, r3
 8006f74:	f001 fd54 	bl	8008a20 <uxListRemove>

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d004      	beq.n	8006f8a <xTaskIncrementTick+0xae>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	3318      	adds	r3, #24
 8006f84:	4618      	mov	r0, r3
 8006f86:	f001 fd4b 	bl	8008a20 <uxListRemove>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f8e:	2201      	movs	r2, #1
 8006f90:	409a      	lsls	r2, r3
 8006f92:	4b24      	ldr	r3, [pc, #144]	; (8007024 <xTaskIncrementTick+0x148>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	431a      	orrs	r2, r3
 8006f98:	4b22      	ldr	r3, [pc, #136]	; (8007024 <xTaskIncrementTick+0x148>)
 8006f9a:	601a      	str	r2, [r3, #0]
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fa0:	4613      	mov	r3, r2
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	4413      	add	r3, r2
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	4a1f      	ldr	r2, [pc, #124]	; (8007028 <xTaskIncrementTick+0x14c>)
 8006faa:	441a      	add	r2, r3
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	3304      	adds	r3, #4
 8006fb0:	4610      	mov	r0, r2
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	f001 fcd8 	bl	8008968 <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fbc:	4b1b      	ldr	r3, [pc, #108]	; (800702c <xTaskIncrementTick+0x150>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d301      	bcc.n	8006fca <xTaskIncrementTick+0xee>
							{
								xSwitchRequired = pdTRUE;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	617b      	str	r3, [r7, #20]
								mtCOVERAGE_TEST_MARKER();
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
 8006fca:	e7b1      	b.n	8006f30 <xTaskIncrementTick+0x54>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006fcc:	4b17      	ldr	r3, [pc, #92]	; (800702c <xTaskIncrementTick+0x150>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fd2:	4915      	ldr	r1, [pc, #84]	; (8007028 <xTaskIncrementTick+0x14c>)
 8006fd4:	4613      	mov	r3, r2
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	4413      	add	r3, r2
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	440b      	add	r3, r1
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d907      	bls.n	8006ff4 <xTaskIncrementTick+0x118>
			{
				xSwitchRequired = pdTRUE;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	617b      	str	r3, [r7, #20]
 8006fe8:	e004      	b.n	8006ff4 <xTaskIncrementTick+0x118>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006fea:	4b11      	ldr	r3, [pc, #68]	; (8007030 <xTaskIncrementTick+0x154>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	1c5a      	adds	r2, r3, #1
 8006ff0:	4b0f      	ldr	r3, [pc, #60]	; (8007030 <xTaskIncrementTick+0x154>)
 8006ff2:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006ff4:	4b0f      	ldr	r3, [pc, #60]	; (8007034 <xTaskIncrementTick+0x158>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d001      	beq.n	8007000 <xTaskIncrementTick+0x124>
		{
			xSwitchRequired = pdTRUE;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007000:	697b      	ldr	r3, [r7, #20]
}
 8007002:	4618      	mov	r0, r3
 8007004:	3718      	adds	r7, #24
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	200001bc 	.word	0x200001bc
 8007010:	200001a0 	.word	0x200001a0
 8007014:	20000154 	.word	0x20000154
 8007018:	20000158 	.word	0x20000158
 800701c:	200001b4 	.word	0x200001b4
 8007020:	20000044 	.word	0x20000044
 8007024:	200001a4 	.word	0x200001a4
 8007028:	200000c8 	.word	0x200000c8
 800702c:	200000c4 	.word	0x200000c4
 8007030:	200001ac 	.word	0x200001ac
 8007034:	200001b0 	.word	0x200001b0

08007038 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800703e:	4b2d      	ldr	r3, [pc, #180]	; (80070f4 <vTaskSwitchContext+0xbc>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d003      	beq.n	800704e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007046:	4b2c      	ldr	r3, [pc, #176]	; (80070f8 <vTaskSwitchContext+0xc0>)
 8007048:	2201      	movs	r2, #1
 800704a:	601a      	str	r2, [r3, #0]
 800704c:	e04f      	b.n	80070ee <vTaskSwitchContext+0xb6>
	}
	else
	{
		xYieldPending = pdFALSE;
 800704e:	4b2a      	ldr	r3, [pc, #168]	; (80070f8 <vTaskSwitchContext+0xc0>)
 8007050:	2200      	movs	r2, #0
 8007052:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 8007054:	4b29      	ldr	r3, [pc, #164]	; (80070fc <vTaskSwitchContext+0xc4>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	4b28      	ldr	r3, [pc, #160]	; (80070fc <vTaskSwitchContext+0xc4>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007060:	429a      	cmp	r2, r3
 8007062:	d808      	bhi.n	8007076 <vTaskSwitchContext+0x3e>
 8007064:	4b25      	ldr	r3, [pc, #148]	; (80070fc <vTaskSwitchContext+0xc4>)
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	4b24      	ldr	r3, [pc, #144]	; (80070fc <vTaskSwitchContext+0xc4>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	3334      	adds	r3, #52	; 0x34
 800706e:	4610      	mov	r0, r2
 8007070:	4619      	mov	r1, r3
 8007072:	f7fa fba1 	bl	80017b8 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 8007076:	4b21      	ldr	r3, [pc, #132]	; (80070fc <vTaskSwitchContext+0xc4>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800707c:	4618      	mov	r0, r3
 800707e:	4920      	ldr	r1, [pc, #128]	; (8007100 <vTaskSwitchContext+0xc8>)
 8007080:	2214      	movs	r2, #20
 8007082:	f002 f81f 	bl	80090c4 <memcmp>
 8007086:	4603      	mov	r3, r0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d008      	beq.n	800709e <vTaskSwitchContext+0x66>
 800708c:	4b1b      	ldr	r3, [pc, #108]	; (80070fc <vTaskSwitchContext+0xc4>)
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	4b1a      	ldr	r3, [pc, #104]	; (80070fc <vTaskSwitchContext+0xc4>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	3334      	adds	r3, #52	; 0x34
 8007096:	4610      	mov	r0, r2
 8007098:	4619      	mov	r1, r3
 800709a:	f7fa fb8d 	bl	80017b8 <vApplicationStackOverflowHook>

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800709e:	4b19      	ldr	r3, [pc, #100]	; (8007104 <vTaskSwitchContext+0xcc>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	607b      	str	r3, [r7, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	fab3 f383 	clz	r3, r3
 80070aa:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 80070ac:	78fb      	ldrb	r3, [r7, #3]
 80070ae:	f1c3 031f 	rsb	r3, r3, #31
 80070b2:	60fb      	str	r3, [r7, #12]
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	4613      	mov	r3, r2
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	4413      	add	r3, r2
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	4a12      	ldr	r2, [pc, #72]	; (8007108 <vTaskSwitchContext+0xd0>)
 80070c0:	4413      	add	r3, r2
 80070c2:	60bb      	str	r3, [r7, #8]
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	685a      	ldr	r2, [r3, #4]
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	605a      	str	r2, [r3, #4]
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	685a      	ldr	r2, [r3, #4]
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	3308      	adds	r3, #8
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d104      	bne.n	80070e4 <vTaskSwitchContext+0xac>
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	685a      	ldr	r2, [r3, #4]
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	605a      	str	r2, [r3, #4]
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	68da      	ldr	r2, [r3, #12]
 80070ea:	4b04      	ldr	r3, [pc, #16]	; (80070fc <vTaskSwitchContext+0xc4>)
 80070ec:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80070ee:	3710      	adds	r7, #16
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}
 80070f4:	200001bc 	.word	0x200001bc
 80070f8:	200001b0 	.word	0x200001b0
 80070fc:	200000c4 	.word	0x200000c4
 8007100:	08009194 	.word	0x08009194
 8007104:	200001a4 	.word	0x200001a4
 8007108:	200000c8 	.word	0x200000c8

0800710c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007116:	4b19      	ldr	r3, [pc, #100]	; (800717c <vTaskPlaceOnEventList+0x70>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	3318      	adds	r3, #24
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	4619      	mov	r1, r3
 8007120:	f001 fc46 	bl	80089b0 <vListInsert>

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8007124:	4b15      	ldr	r3, [pc, #84]	; (800717c <vTaskPlaceOnEventList+0x70>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	3304      	adds	r3, #4
 800712a:	4618      	mov	r0, r3
 800712c:	f001 fc78 	bl	8008a20 <uxListRemove>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d10b      	bne.n	800714e <vTaskPlaceOnEventList+0x42>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007136:	4b11      	ldr	r3, [pc, #68]	; (800717c <vTaskPlaceOnEventList+0x70>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800713c:	2201      	movs	r2, #1
 800713e:	fa02 f303 	lsl.w	r3, r2, r3
 8007142:	43da      	mvns	r2, r3
 8007144:	4b0e      	ldr	r3, [pc, #56]	; (8007180 <vTaskPlaceOnEventList+0x74>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	401a      	ands	r2, r3
 800714a:	4b0d      	ldr	r3, [pc, #52]	; (8007180 <vTaskPlaceOnEventList+0x74>)
 800714c:	601a      	str	r2, [r3, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007154:	d107      	bne.n	8007166 <vTaskPlaceOnEventList+0x5a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8007156:	4b09      	ldr	r3, [pc, #36]	; (800717c <vTaskPlaceOnEventList+0x70>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	3304      	adds	r3, #4
 800715c:	4809      	ldr	r0, [pc, #36]	; (8007184 <vTaskPlaceOnEventList+0x78>)
 800715e:	4619      	mov	r1, r3
 8007160:	f001 fc02 	bl	8008968 <vListInsertEnd>
 8007164:	e007      	b.n	8007176 <vTaskPlaceOnEventList+0x6a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
 8007166:	4b08      	ldr	r3, [pc, #32]	; (8007188 <vTaskPlaceOnEventList+0x7c>)
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	4413      	add	r3, r2
 800716e:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 8007170:	68f8      	ldr	r0, [r7, #12]
 8007172:	f000 fa6b 	bl	800764c <prvAddCurrentTaskToDelayedList>
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007176:	3710      	adds	r7, #16
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}
 800717c:	200000c4 	.word	0x200000c4
 8007180:	200001a4 	.word	0x200001a4
 8007184:	20000188 	.word	0x20000188
 8007188:	200001a0 	.word	0x200001a0

0800718c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b086      	sub	sp, #24
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007198:	4b1c      	ldr	r3, [pc, #112]	; (800720c <vTaskPlaceOnUnorderedEventList+0x80>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	68ba      	ldr	r2, [r7, #8]
 800719e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80071a2:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80071a4:	4b19      	ldr	r3, [pc, #100]	; (800720c <vTaskPlaceOnUnorderedEventList+0x80>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	3318      	adds	r3, #24
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	4619      	mov	r1, r3
 80071ae:	f001 fbdb 	bl	8008968 <vListInsertEnd>

	/* The task must be removed from the ready list before it is added to the
	blocked list.  Exclusive access can be assured to the ready list as the
	scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80071b2:	4b16      	ldr	r3, [pc, #88]	; (800720c <vTaskPlaceOnUnorderedEventList+0x80>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	3304      	adds	r3, #4
 80071b8:	4618      	mov	r0, r3
 80071ba:	f001 fc31 	bl	8008a20 <uxListRemove>
 80071be:	4603      	mov	r3, r0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d10b      	bne.n	80071dc <vTaskPlaceOnUnorderedEventList+0x50>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80071c4:	4b11      	ldr	r3, [pc, #68]	; (800720c <vTaskPlaceOnUnorderedEventList+0x80>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ca:	2201      	movs	r2, #1
 80071cc:	fa02 f303 	lsl.w	r3, r2, r3
 80071d0:	43da      	mvns	r2, r3
 80071d2:	4b0f      	ldr	r3, [pc, #60]	; (8007210 <vTaskPlaceOnUnorderedEventList+0x84>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	401a      	ands	r2, r3
 80071d8:	4b0d      	ldr	r3, [pc, #52]	; (8007210 <vTaskPlaceOnUnorderedEventList+0x84>)
 80071da:	601a      	str	r2, [r3, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071e2:	d107      	bne.n	80071f4 <vTaskPlaceOnUnorderedEventList+0x68>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80071e4:	4b09      	ldr	r3, [pc, #36]	; (800720c <vTaskPlaceOnUnorderedEventList+0x80>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	3304      	adds	r3, #4
 80071ea:	480a      	ldr	r0, [pc, #40]	; (8007214 <vTaskPlaceOnUnorderedEventList+0x88>)
 80071ec:	4619      	mov	r1, r3
 80071ee:	f001 fbbb 	bl	8008968 <vListInsertEnd>
 80071f2:	e007      	b.n	8007204 <vTaskPlaceOnUnorderedEventList+0x78>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xTickCount + xTicksToWait;
 80071f4:	4b08      	ldr	r3, [pc, #32]	; (8007218 <vTaskPlaceOnUnorderedEventList+0x8c>)
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4413      	add	r3, r2
 80071fc:	617b      	str	r3, [r7, #20]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 80071fe:	6978      	ldr	r0, [r7, #20]
 8007200:	f000 fa24 	bl	800764c <prvAddCurrentTaskToDelayedList>
			will manage it correctly. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007204:	3718      	adds	r7, #24
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	200000c4 	.word	0x200000c4
 8007210:	200001a4 	.word	0x200001a4
 8007214:	20000188 	.word	0x20000188
 8007218:	200001a0 	.word	0x200001a0

0800721c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007226:	4b13      	ldr	r3, [pc, #76]	; (8007274 <vTaskPlaceOnEventListRestricted+0x58>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	3318      	adds	r3, #24
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	4619      	mov	r1, r3
 8007230:	f001 fb9a 	bl	8008968 <vListInsertEnd>

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8007234:	4b0f      	ldr	r3, [pc, #60]	; (8007274 <vTaskPlaceOnEventListRestricted+0x58>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	3304      	adds	r3, #4
 800723a:	4618      	mov	r0, r3
 800723c:	f001 fbf0 	bl	8008a20 <uxListRemove>
 8007240:	4603      	mov	r3, r0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d10b      	bne.n	800725e <vTaskPlaceOnEventListRestricted+0x42>
		{
			/* The current task must be in a ready list, so there is no need to
			check, and the port reset macro can be called directly. */
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007246:	4b0b      	ldr	r3, [pc, #44]	; (8007274 <vTaskPlaceOnEventListRestricted+0x58>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800724c:	2201      	movs	r2, #1
 800724e:	fa02 f303 	lsl.w	r3, r2, r3
 8007252:	43da      	mvns	r2, r3
 8007254:	4b08      	ldr	r3, [pc, #32]	; (8007278 <vTaskPlaceOnEventListRestricted+0x5c>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	401a      	ands	r2, r3
 800725a:	4b07      	ldr	r3, [pc, #28]	; (8007278 <vTaskPlaceOnEventListRestricted+0x5c>)
 800725c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
 800725e:	4b07      	ldr	r3, [pc, #28]	; (800727c <vTaskPlaceOnEventListRestricted+0x60>)
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	4413      	add	r3, r2
 8007266:	60fb      	str	r3, [r7, #12]

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 8007268:	68f8      	ldr	r0, [r7, #12]
 800726a:	f000 f9ef 	bl	800764c <prvAddCurrentTaskToDelayedList>
	}
 800726e:	3710      	adds	r7, #16
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}
 8007274:	200000c4 	.word	0x200000c4
 8007278:	200001a4 	.word	0x200001a4
 800727c:	200001a0 	.word	0x200001a0

08007280 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	3318      	adds	r3, #24
 8007294:	4618      	mov	r0, r3
 8007296:	f001 fbc3 	bl	8008a20 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800729a:	4b1d      	ldr	r3, [pc, #116]	; (8007310 <xTaskRemoveFromEventList+0x90>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d11c      	bne.n	80072dc <xTaskRemoveFromEventList+0x5c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	3304      	adds	r3, #4
 80072a6:	4618      	mov	r0, r3
 80072a8:	f001 fbba 	bl	8008a20 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b0:	2201      	movs	r2, #1
 80072b2:	409a      	lsls	r2, r3
 80072b4:	4b17      	ldr	r3, [pc, #92]	; (8007314 <xTaskRemoveFromEventList+0x94>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	431a      	orrs	r2, r3
 80072ba:	4b16      	ldr	r3, [pc, #88]	; (8007314 <xTaskRemoveFromEventList+0x94>)
 80072bc:	601a      	str	r2, [r3, #0]
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072c2:	4613      	mov	r3, r2
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	4413      	add	r3, r2
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	4a13      	ldr	r2, [pc, #76]	; (8007318 <xTaskRemoveFromEventList+0x98>)
 80072cc:	441a      	add	r2, r3
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	3304      	adds	r3, #4
 80072d2:	4610      	mov	r0, r2
 80072d4:	4619      	mov	r1, r3
 80072d6:	f001 fb47 	bl	8008968 <vListInsertEnd>
 80072da:	e005      	b.n	80072e8 <xTaskRemoveFromEventList+0x68>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	3318      	adds	r3, #24
 80072e0:	480e      	ldr	r0, [pc, #56]	; (800731c <xTaskRemoveFromEventList+0x9c>)
 80072e2:	4619      	mov	r1, r3
 80072e4:	f001 fb40 	bl	8008968 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ec:	4b0c      	ldr	r3, [pc, #48]	; (8007320 <xTaskRemoveFromEventList+0xa0>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d905      	bls.n	8007302 <xTaskRemoveFromEventList+0x82>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80072f6:	2301      	movs	r3, #1
 80072f8:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80072fa:	4b0a      	ldr	r3, [pc, #40]	; (8007324 <xTaskRemoveFromEventList+0xa4>)
 80072fc:	2201      	movs	r2, #1
 80072fe:	601a      	str	r2, [r3, #0]
 8007300:	e001      	b.n	8007306 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		xReturn = pdFALSE;
 8007302:	2300      	movs	r3, #0
 8007304:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007306:	68fb      	ldr	r3, [r7, #12]
}
 8007308:	4618      	mov	r0, r3
 800730a:	3710      	adds	r7, #16
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}
 8007310:	200001bc 	.word	0x200001bc
 8007314:	200001a4 	.word	0x200001a4
 8007318:	200000c8 	.word	0x200000c8
 800731c:	2000015c 	.word	0x2000015c
 8007320:	200000c4 	.word	0x200000c4
 8007324:	200001b0 	.word	0x200001b0

08007328 <xTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f001 fb6c 	bl	8008a20 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	3304      	adds	r3, #4
 800734c:	4618      	mov	r0, r3
 800734e:	f001 fb67 	bl	8008a20 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007356:	2201      	movs	r2, #1
 8007358:	409a      	lsls	r2, r3
 800735a:	4b13      	ldr	r3, [pc, #76]	; (80073a8 <xTaskRemoveFromUnorderedEventList+0x80>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	431a      	orrs	r2, r3
 8007360:	4b11      	ldr	r3, [pc, #68]	; (80073a8 <xTaskRemoveFromUnorderedEventList+0x80>)
 8007362:	601a      	str	r2, [r3, #0]
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007368:	4613      	mov	r3, r2
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	4413      	add	r3, r2
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	4a0e      	ldr	r2, [pc, #56]	; (80073ac <xTaskRemoveFromUnorderedEventList+0x84>)
 8007372:	441a      	add	r2, r3
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	3304      	adds	r3, #4
 8007378:	4610      	mov	r0, r2
 800737a:	4619      	mov	r1, r3
 800737c:	f001 faf4 	bl	8008968 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007384:	4b0a      	ldr	r3, [pc, #40]	; (80073b0 <xTaskRemoveFromUnorderedEventList+0x88>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800738a:	429a      	cmp	r2, r3
 800738c:	d905      	bls.n	800739a <xTaskRemoveFromUnorderedEventList+0x72>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
 800738e:	2301      	movs	r3, #1
 8007390:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007392:	4b08      	ldr	r3, [pc, #32]	; (80073b4 <xTaskRemoveFromUnorderedEventList+0x8c>)
 8007394:	2201      	movs	r2, #1
 8007396:	601a      	str	r2, [r3, #0]
 8007398:	e001      	b.n	800739e <xTaskRemoveFromUnorderedEventList+0x76>
	}
	else
	{
		xReturn = pdFALSE;
 800739a:	2300      	movs	r3, #0
 800739c:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800739e:	68fb      	ldr	r3, [r7, #12]
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3710      	adds	r7, #16
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}
 80073a8:	200001a4 	.word	0x200001a4
 80073ac:	200000c8 	.word	0x200000c8
 80073b0:	200000c4 	.word	0x200000c4
 80073b4:	200001b0 	.word	0x200001b0

080073b8 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80073c0:	4b06      	ldr	r3, [pc, #24]	; (80073dc <vTaskSetTimeOutState+0x24>)
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80073c8:	4b05      	ldr	r3, [pc, #20]	; (80073e0 <vTaskSetTimeOutState+0x28>)
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	605a      	str	r2, [r3, #4]
}
 80073d0:	370c      	adds	r7, #12
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr
 80073da:	bf00      	nop
 80073dc:	200001b4 	.word	0x200001b4
 80073e0:	200001a0 	.word	0x200001a0

080073e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 80073ee:	f001 fbcd 	bl	8008b8c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80073f2:	4b1c      	ldr	r3, [pc, #112]	; (8007464 <xTaskCheckForTimeOut+0x80>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	60bb      	str	r3, [r7, #8]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007400:	d102      	bne.n	8007408 <xTaskCheckForTimeOut+0x24>
			{
				xReturn = pdFALSE;
 8007402:	2300      	movs	r3, #0
 8007404:	60fb      	str	r3, [r7, #12]
 8007406:	e026      	b.n	8007456 <xTaskCheckForTimeOut+0x72>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	4b16      	ldr	r3, [pc, #88]	; (8007468 <xTaskCheckForTimeOut+0x84>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	429a      	cmp	r2, r3
 8007412:	d007      	beq.n	8007424 <xTaskCheckForTimeOut+0x40>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	685a      	ldr	r2, [r3, #4]
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	429a      	cmp	r2, r3
 800741c:	d802      	bhi.n	8007424 <xTaskCheckForTimeOut+0x40>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 800741e:	2301      	movs	r3, #1
 8007420:	60fb      	str	r3, [r7, #12]
 8007422:	e018      	b.n	8007456 <xTaskCheckForTimeOut+0x72>
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	68ba      	ldr	r2, [r7, #8]
 800742a:	1ad2      	subs	r2, r2, r3
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	429a      	cmp	r2, r3
 8007432:	d20e      	bcs.n	8007452 <xTaskCheckForTimeOut+0x6e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6859      	ldr	r1, [r3, #4]
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	1acb      	subs	r3, r1, r3
 8007440:	441a      	add	r2, r3
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f7ff ffb6 	bl	80073b8 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800744c:	2300      	movs	r3, #0
 800744e:	60fb      	str	r3, [r7, #12]
 8007450:	e001      	b.n	8007456 <xTaskCheckForTimeOut+0x72>
		}
		else
		{
			xReturn = pdTRUE;
 8007452:	2301      	movs	r3, #1
 8007454:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007456:	f001 fbb1 	bl	8008bbc <vPortExitCritical>

	return xReturn;
 800745a:	68fb      	ldr	r3, [r7, #12]
}
 800745c:	4618      	mov	r0, r3
 800745e:	3710      	adds	r7, #16
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}
 8007464:	200001a0 	.word	0x200001a0
 8007468:	200001b4 	.word	0x200001b4

0800746c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800746c:	b480      	push	{r7}
 800746e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007470:	4b03      	ldr	r3, [pc, #12]	; (8007480 <vTaskMissedYield+0x14>)
 8007472:	2201      	movs	r2, #1
 8007474:	601a      	str	r2, [r3, #0]
}
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr
 800747e:	bf00      	nop
 8007480:	200001b0 	.word	0x200001b0

08007484 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
 800748c:	f000 f8a4 	bl	80075d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007490:	4b07      	ldr	r3, [pc, #28]	; (80074b0 <prvIdleTask+0x2c>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2b01      	cmp	r3, #1
 8007496:	d907      	bls.n	80074a8 <prvIdleTask+0x24>
			{
				taskYIELD();
 8007498:	4b06      	ldr	r3, [pc, #24]	; (80074b4 <prvIdleTask+0x30>)
 800749a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800749e:	601a      	str	r2, [r3, #0]
 80074a0:	f3bf 8f4f 	dsb	sy
 80074a4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80074a8:	f7fa f98c 	bl	80017c4 <vApplicationIdleHook>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 80074ac:	e7ee      	b.n	800748c <prvIdleTask+0x8>
 80074ae:	bf00      	nop
 80074b0:	200000c8 	.word	0x200000c8
 80074b4:	e000ed04 	.word	0xe000ed04

080074b8 <prvInitialiseTCBVariables>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b086      	sub	sp, #24
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	607a      	str	r2, [r7, #4]
 80074c4:	603b      	str	r3, [r7, #0]
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80074c6:	2300      	movs	r3, #0
 80074c8:	617b      	str	r3, [r7, #20]
 80074ca:	e012      	b.n	80074f2 <prvInitialiseTCBVariables+0x3a>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 80074cc:	68ba      	ldr	r2, [r7, #8]
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	4413      	add	r3, r2
 80074d2:	781a      	ldrb	r2, [r3, #0]
 80074d4:	68f9      	ldr	r1, [r7, #12]
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	440b      	add	r3, r1
 80074da:	3330      	adds	r3, #48	; 0x30
 80074dc:	711a      	strb	r2, [r3, #4]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80074de:	68ba      	ldr	r2, [r7, #8]
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	4413      	add	r3, r2
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d100      	bne.n	80074ec <prvInitialiseTCBVariables+0x34>
		{
			break;
 80074ea:	e005      	b.n	80074f8 <prvInitialiseTCBVariables+0x40>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	3301      	adds	r3, #1
 80074f0:	617b      	str	r3, [r7, #20]
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	2b09      	cmp	r3, #9
 80074f6:	d9e9      	bls.n	80074cc <prvInitialiseTCBVariables+0x14>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2b04      	cmp	r3, #4
 8007504:	d901      	bls.n	800750a <prvInitialiseTCBVariables+0x52>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007506:	2304      	movs	r3, #4
 8007508:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	641a      	str	r2, [r3, #64]	; 0x40
		pxTCB->uxMutexesHeld = 0;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2200      	movs	r2, #0
 800751a:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	3304      	adds	r3, #4
 8007520:	4618      	mov	r0, r3
 8007522:	f001 fa15 	bl	8008950 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	3318      	adds	r3, #24
 800752a:	4618      	mov	r0, r3
 800752c:	f001 fa10 	bl	8008950 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	68fa      	ldr	r2, [r7, #12]
 8007534:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f1c3 0205 	rsb	r2, r3, #5
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portUSING_MPU_WRAPPERS */

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2200      	movs	r2, #0
 800754a:	649a      	str	r2, [r3, #72]	; 0x48
		pxTCB->eNotifyState = eNotWaitingNotification;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2200      	movs	r2, #0
 8007550:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
 8007554:	3718      	adds	r7, #24
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop

0800755c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007562:	2300      	movs	r3, #0
 8007564:	607b      	str	r3, [r7, #4]
 8007566:	e00c      	b.n	8007582 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	4613      	mov	r3, r2
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	4413      	add	r3, r2
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	4a11      	ldr	r2, [pc, #68]	; (80075b8 <prvInitialiseTaskLists+0x5c>)
 8007574:	4413      	add	r3, r2
 8007576:	4618      	mov	r0, r3
 8007578:	f001 f9ca 	bl	8008910 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	3301      	adds	r3, #1
 8007580:	607b      	str	r3, [r7, #4]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2b04      	cmp	r3, #4
 8007586:	d9ef      	bls.n	8007568 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8007588:	480c      	ldr	r0, [pc, #48]	; (80075bc <prvInitialiseTaskLists+0x60>)
 800758a:	f001 f9c1 	bl	8008910 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800758e:	480c      	ldr	r0, [pc, #48]	; (80075c0 <prvInitialiseTaskLists+0x64>)
 8007590:	f001 f9be 	bl	8008910 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007594:	480b      	ldr	r0, [pc, #44]	; (80075c4 <prvInitialiseTaskLists+0x68>)
 8007596:	f001 f9bb 	bl	8008910 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800759a:	480b      	ldr	r0, [pc, #44]	; (80075c8 <prvInitialiseTaskLists+0x6c>)
 800759c:	f001 f9b8 	bl	8008910 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80075a0:	480a      	ldr	r0, [pc, #40]	; (80075cc <prvInitialiseTaskLists+0x70>)
 80075a2:	f001 f9b5 	bl	8008910 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80075a6:	4b0a      	ldr	r3, [pc, #40]	; (80075d0 <prvInitialiseTaskLists+0x74>)
 80075a8:	4a04      	ldr	r2, [pc, #16]	; (80075bc <prvInitialiseTaskLists+0x60>)
 80075aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80075ac:	4b09      	ldr	r3, [pc, #36]	; (80075d4 <prvInitialiseTaskLists+0x78>)
 80075ae:	4a04      	ldr	r2, [pc, #16]	; (80075c0 <prvInitialiseTaskLists+0x64>)
 80075b0:	601a      	str	r2, [r3, #0]
}
 80075b2:	3708      	adds	r7, #8
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	200000c8 	.word	0x200000c8
 80075bc:	2000012c 	.word	0x2000012c
 80075c0:	20000140 	.word	0x20000140
 80075c4:	2000015c 	.word	0x2000015c
 80075c8:	20000170 	.word	0x20000170
 80075cc:	20000188 	.word	0x20000188
 80075d0:	20000154 	.word	0x20000154
 80075d4:	20000158 	.word	0x20000158

080075d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 80075de:	e028      	b.n	8007632 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 80075e0:	f7ff fbba 	bl	8006d58 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80075e4:	4b16      	ldr	r3, [pc, #88]	; (8007640 <prvCheckTasksWaitingTermination+0x68>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	bf14      	ite	ne
 80075ec:	2300      	movne	r3, #0
 80075ee:	2301      	moveq	r3, #1
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 80075f4:	f7ff fbbe 	bl	8006d74 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d119      	bne.n	8007632 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 80075fe:	f001 fac5 	bl	8008b8c <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007602:	4b0f      	ldr	r3, [pc, #60]	; (8007640 <prvCheckTasksWaitingTermination+0x68>)
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	3304      	adds	r3, #4
 800760e:	4618      	mov	r0, r3
 8007610:	f001 fa06 	bl	8008a20 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8007614:	4b0b      	ldr	r3, [pc, #44]	; (8007644 <prvCheckTasksWaitingTermination+0x6c>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	1e5a      	subs	r2, r3, #1
 800761a:	4b0a      	ldr	r3, [pc, #40]	; (8007644 <prvCheckTasksWaitingTermination+0x6c>)
 800761c:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
 800761e:	4b0a      	ldr	r3, [pc, #40]	; (8007648 <prvCheckTasksWaitingTermination+0x70>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	1e5a      	subs	r2, r3, #1
 8007624:	4b08      	ldr	r3, [pc, #32]	; (8007648 <prvCheckTasksWaitingTermination+0x70>)
 8007626:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
 8007628:	f001 fac8 	bl	8008bbc <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 800762c:	6838      	ldr	r0, [r7, #0]
 800762e:	f000 f87b 	bl	8007728 <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 8007632:	4b05      	ldr	r3, [pc, #20]	; (8007648 <prvCheckTasksWaitingTermination+0x70>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d1d2      	bne.n	80075e0 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
 800763a:	3708      	adds	r7, #8
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	20000170 	.word	0x20000170
 8007644:	2000019c 	.word	0x2000019c
 8007648:	20000184 	.word	0x20000184

0800764c <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8007654:	4b13      	ldr	r3, [pc, #76]	; (80076a4 <prvAddCurrentTaskToDelayedList+0x58>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
 800765c:	4b12      	ldr	r3, [pc, #72]	; (80076a8 <prvAddCurrentTaskToDelayedList+0x5c>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	429a      	cmp	r2, r3
 8007664:	d209      	bcs.n	800767a <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8007666:	4b11      	ldr	r3, [pc, #68]	; (80076ac <prvAddCurrentTaskToDelayedList+0x60>)
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	4b0e      	ldr	r3, [pc, #56]	; (80076a4 <prvAddCurrentTaskToDelayedList+0x58>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	3304      	adds	r3, #4
 8007670:	4610      	mov	r0, r2
 8007672:	4619      	mov	r1, r3
 8007674:	f001 f99c 	bl	80089b0 <vListInsert>
 8007678:	e010      	b.n	800769c <prvAddCurrentTaskToDelayedList+0x50>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800767a:	4b0d      	ldr	r3, [pc, #52]	; (80076b0 <prvAddCurrentTaskToDelayedList+0x64>)
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	4b09      	ldr	r3, [pc, #36]	; (80076a4 <prvAddCurrentTaskToDelayedList+0x58>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	3304      	adds	r3, #4
 8007684:	4610      	mov	r0, r2
 8007686:	4619      	mov	r1, r3
 8007688:	f001 f992 	bl	80089b0 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 800768c:	4b09      	ldr	r3, [pc, #36]	; (80076b4 <prvAddCurrentTaskToDelayedList+0x68>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	429a      	cmp	r2, r3
 8007694:	d202      	bcs.n	800769c <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
 8007696:	4b07      	ldr	r3, [pc, #28]	; (80076b4 <prvAddCurrentTaskToDelayedList+0x68>)
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800769c:	3708      	adds	r7, #8
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	bf00      	nop
 80076a4:	200000c4 	.word	0x200000c4
 80076a8:	200001a0 	.word	0x200001a0
 80076ac:	20000158 	.word	0x20000158
 80076b0:	20000154 	.word	0x20000154
 80076b4:	20000044 	.word	0x20000044

080076b8 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	4603      	mov	r3, r0
 80076c0:	6039      	str	r1, [r7, #0]
 80076c2:	80fb      	strh	r3, [r7, #6]
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d106      	bne.n	80076d8 <prvAllocateTCBAndStack+0x20>
 80076ca:	88fb      	ldrh	r3, [r7, #6]
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	4618      	mov	r0, r3
 80076d0:	f001 fafc 	bl	8008ccc <pvPortMalloc>
 80076d4:	4603      	mov	r3, r0
 80076d6:	e000      	b.n	80076da <prvAllocateTCBAndStack+0x22>
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	60bb      	str	r3, [r7, #8]

		if( pxStack != NULL )
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00e      	beq.n	8007700 <prvAllocateTCBAndStack+0x48>
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80076e2:	2050      	movs	r0, #80	; 0x50
 80076e4:	f001 faf2 	bl	8008ccc <pvPortMalloc>
 80076e8:	60f8      	str	r0, [r7, #12]

			if( pxNewTCB != NULL )
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d003      	beq.n	80076f8 <prvAllocateTCBAndStack+0x40>
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	68ba      	ldr	r2, [r7, #8]
 80076f4:	631a      	str	r2, [r3, #48]	; 0x30
 80076f6:	e005      	b.n	8007704 <prvAllocateTCBAndStack+0x4c>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
 80076f8:	68b8      	ldr	r0, [r7, #8]
 80076fa:	f001 fb7f 	bl	8008dfc <vPortFree>
 80076fe:	e001      	b.n	8007704 <prvAllocateTCBAndStack+0x4c>
			}
		}
		else
		{
			pxNewTCB = NULL;
 8007700:	2300      	movs	r3, #0
 8007702:	60fb      	str	r3, [r7, #12]
		}
	}
	#endif /* portSTACK_GROWTH */

	if( pxNewTCB != NULL )
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d008      	beq.n	800771c <prvAllocateTCBAndStack+0x64>
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800770e:	88fb      	ldrh	r3, [r7, #6]
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	4610      	mov	r0, r2
 8007714:	21a5      	movs	r1, #165	; 0xa5
 8007716:	461a      	mov	r2, r3
 8007718:	f001 fcec 	bl	80090f4 <memset>
		}
		#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
	}

	return pxNewTCB;
 800771c:	68fb      	ldr	r3, [r7, #12]
}
 800771e:	4618      	mov	r0, r3
 8007720:	3710      	adds	r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop

08007728 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007728:	b580      	push	{r7, lr}
 800772a:	b082      	sub	sp, #8
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007734:	4618      	mov	r0, r3
 8007736:	f001 fb61 	bl	8008dfc <vPortFree>
		}
		#endif

		vPortFree( pxTCB );
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f001 fb5e 	bl	8008dfc <vPortFree>
	}
 8007740:	3708      	adds	r7, #8
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop

08007748 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800774e:	4b0e      	ldr	r3, [pc, #56]	; (8007788 <prvResetNextTaskUnblockTime+0x40>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d101      	bne.n	800775c <prvResetNextTaskUnblockTime+0x14>
 8007758:	2301      	movs	r3, #1
 800775a:	e000      	b.n	800775e <prvResetNextTaskUnblockTime+0x16>
 800775c:	2300      	movs	r3, #0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d004      	beq.n	800776c <prvResetNextTaskUnblockTime+0x24>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007762:	4b0a      	ldr	r3, [pc, #40]	; (800778c <prvResetNextTaskUnblockTime+0x44>)
 8007764:	f04f 32ff 	mov.w	r2, #4294967295
 8007768:	601a      	str	r2, [r3, #0]
 800776a:	e008      	b.n	800777e <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800776c:	4b06      	ldr	r3, [pc, #24]	; (8007788 <prvResetNextTaskUnblockTime+0x40>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	685a      	ldr	r2, [r3, #4]
 800777a:	4b04      	ldr	r3, [pc, #16]	; (800778c <prvResetNextTaskUnblockTime+0x44>)
 800777c:	601a      	str	r2, [r3, #0]
	}
}
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr
 8007788:	20000154 	.word	0x20000154
 800778c:	20000044 	.word	0x20000044

08007790 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007796:	4b05      	ldr	r3, [pc, #20]	; (80077ac <xTaskGetCurrentTaskHandle+0x1c>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800779c:	687b      	ldr	r3, [r7, #4]
	}
 800779e:	4618      	mov	r0, r3
 80077a0:	370c      	adds	r7, #12
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr
 80077aa:	bf00      	nop
 80077ac:	200000c4 	.word	0x200000c4

080077b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80077b0:	b480      	push	{r7}
 80077b2:	b083      	sub	sp, #12
 80077b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80077b6:	4b0b      	ldr	r3, [pc, #44]	; (80077e4 <xTaskGetSchedulerState+0x34>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d102      	bne.n	80077c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80077be:	2301      	movs	r3, #1
 80077c0:	607b      	str	r3, [r7, #4]
 80077c2:	e008      	b.n	80077d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077c4:	4b08      	ldr	r3, [pc, #32]	; (80077e8 <xTaskGetSchedulerState+0x38>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d102      	bne.n	80077d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80077cc:	2302      	movs	r3, #2
 80077ce:	607b      	str	r3, [r7, #4]
 80077d0:	e001      	b.n	80077d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80077d2:	2300      	movs	r3, #0
 80077d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80077d6:	687b      	ldr	r3, [r7, #4]
	}
 80077d8:	4618      	mov	r0, r3
 80077da:	370c      	adds	r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr
 80077e4:	200001a8 	.word	0x200001a8
 80077e8:	200001bc 	.word	0x200001bc

080077ec <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d062      	beq.n	80078c4 <vTaskPriorityInherit+0xd8>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007802:	4b32      	ldr	r3, [pc, #200]	; (80078cc <vTaskPriorityInherit+0xe0>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007808:	429a      	cmp	r2, r3
 800780a:	d25b      	bcs.n	80078c4 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	699b      	ldr	r3, [r3, #24]
 8007810:	2b00      	cmp	r3, #0
 8007812:	db06      	blt.n	8007822 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007814:	4b2d      	ldr	r3, [pc, #180]	; (80078cc <vTaskPriorityInherit+0xe0>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800781a:	f1c3 0205 	rsb	r2, r3, #5
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	6959      	ldr	r1, [r3, #20]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800782a:	4613      	mov	r3, r2
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	4413      	add	r3, r2
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	4a27      	ldr	r2, [pc, #156]	; (80078d0 <vTaskPriorityInherit+0xe4>)
 8007834:	4413      	add	r3, r2
 8007836:	4299      	cmp	r1, r3
 8007838:	d101      	bne.n	800783e <vTaskPriorityInherit+0x52>
 800783a:	2301      	movs	r3, #1
 800783c:	e000      	b.n	8007840 <vTaskPriorityInherit+0x54>
 800783e:	2300      	movs	r3, #0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d03a      	beq.n	80078ba <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	3304      	adds	r3, #4
 8007848:	4618      	mov	r0, r3
 800784a:	f001 f8e9 	bl	8008a20 <uxListRemove>
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d115      	bne.n	8007880 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007858:	491d      	ldr	r1, [pc, #116]	; (80078d0 <vTaskPriorityInherit+0xe4>)
 800785a:	4613      	mov	r3, r2
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	4413      	add	r3, r2
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	440b      	add	r3, r1
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d10a      	bne.n	8007880 <vTaskPriorityInherit+0x94>
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800786e:	2201      	movs	r2, #1
 8007870:	fa02 f303 	lsl.w	r3, r2, r3
 8007874:	43da      	mvns	r2, r3
 8007876:	4b17      	ldr	r3, [pc, #92]	; (80078d4 <vTaskPriorityInherit+0xe8>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	401a      	ands	r2, r3
 800787c:	4b15      	ldr	r3, [pc, #84]	; (80078d4 <vTaskPriorityInherit+0xe8>)
 800787e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007880:	4b12      	ldr	r3, [pc, #72]	; (80078cc <vTaskPriorityInherit+0xe0>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800788e:	2201      	movs	r2, #1
 8007890:	409a      	lsls	r2, r3
 8007892:	4b10      	ldr	r3, [pc, #64]	; (80078d4 <vTaskPriorityInherit+0xe8>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	431a      	orrs	r2, r3
 8007898:	4b0e      	ldr	r3, [pc, #56]	; (80078d4 <vTaskPriorityInherit+0xe8>)
 800789a:	601a      	str	r2, [r3, #0]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078a0:	4613      	mov	r3, r2
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	4413      	add	r3, r2
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	4a09      	ldr	r2, [pc, #36]	; (80078d0 <vTaskPriorityInherit+0xe4>)
 80078aa:	441a      	add	r2, r3
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	3304      	adds	r3, #4
 80078b0:	4610      	mov	r0, r2
 80078b2:	4619      	mov	r1, r3
 80078b4:	f001 f858 	bl	8008968 <vListInsertEnd>
 80078b8:	e004      	b.n	80078c4 <vTaskPriorityInherit+0xd8>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80078ba:	4b04      	ldr	r3, [pc, #16]	; (80078cc <vTaskPriorityInherit+0xe0>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	200000c4 	.word	0x200000c4
 80078d0:	200000c8 	.word	0x200000c8
 80078d4:	200001a4 	.word	0x200001a4

080078d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80078e4:	2300      	movs	r3, #0
 80078e6:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d04f      	beq.n	800798e <xTaskPriorityDisinherit+0xb6>
		{
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078f2:	1e5a      	subs	r2, r3, #1
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	645a      	str	r2, [r3, #68]	; 0x44

			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007900:	429a      	cmp	r2, r3
 8007902:	d044      	beq.n	800798e <xTaskPriorityDisinherit+0xb6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007908:	2b00      	cmp	r3, #0
 800790a:	d140      	bne.n	800798e <xTaskPriorityDisinherit+0xb6>
					/* A task can only have an inhertied priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	3304      	adds	r3, #4
 8007910:	4618      	mov	r0, r3
 8007912:	f001 f885 	bl	8008a20 <uxListRemove>
 8007916:	4603      	mov	r3, r0
 8007918:	2b00      	cmp	r3, #0
 800791a:	d115      	bne.n	8007948 <xTaskPriorityDisinherit+0x70>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007920:	491d      	ldr	r1, [pc, #116]	; (8007998 <xTaskPriorityDisinherit+0xc0>)
 8007922:	4613      	mov	r3, r2
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	4413      	add	r3, r2
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	440b      	add	r3, r1
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d10a      	bne.n	8007948 <xTaskPriorityDisinherit+0x70>
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007936:	2201      	movs	r2, #1
 8007938:	fa02 f303 	lsl.w	r3, r2, r3
 800793c:	43da      	mvns	r2, r3
 800793e:	4b17      	ldr	r3, [pc, #92]	; (800799c <xTaskPriorityDisinherit+0xc4>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	401a      	ands	r2, r3
 8007944:	4b15      	ldr	r3, [pc, #84]	; (800799c <xTaskPriorityDisinherit+0xc4>)
 8007946:	601a      	str	r2, [r3, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007954:	f1c3 0205 	rsb	r2, r3, #5
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007960:	2201      	movs	r2, #1
 8007962:	409a      	lsls	r2, r3
 8007964:	4b0d      	ldr	r3, [pc, #52]	; (800799c <xTaskPriorityDisinherit+0xc4>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	431a      	orrs	r2, r3
 800796a:	4b0c      	ldr	r3, [pc, #48]	; (800799c <xTaskPriorityDisinherit+0xc4>)
 800796c:	601a      	str	r2, [r3, #0]
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007972:	4613      	mov	r3, r2
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	4413      	add	r3, r2
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	4a07      	ldr	r2, [pc, #28]	; (8007998 <xTaskPriorityDisinherit+0xc0>)
 800797c:	441a      	add	r2, r3
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	3304      	adds	r3, #4
 8007982:	4610      	mov	r0, r2
 8007984:	4619      	mov	r1, r3
 8007986:	f000 ffef 	bl	8008968 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800798a:	2301      	movs	r3, #1
 800798c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800798e:	68fb      	ldr	r3, [r7, #12]
	}
 8007990:	4618      	mov	r0, r3
 8007992:	3710      	adds	r7, #16
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}
 8007998:	200000c8 	.word	0x200000c8
 800799c:	200001a4 	.word	0x200001a4

080079a0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80079a6:	4b09      	ldr	r3, [pc, #36]	; (80079cc <uxTaskResetEventItemValue+0x2c>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	699b      	ldr	r3, [r3, #24]
 80079ac:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079ae:	4b07      	ldr	r3, [pc, #28]	; (80079cc <uxTaskResetEventItemValue+0x2c>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a06      	ldr	r2, [pc, #24]	; (80079cc <uxTaskResetEventItemValue+0x2c>)
 80079b4:	6812      	ldr	r2, [r2, #0]
 80079b6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80079b8:	f1c2 0205 	rsb	r2, r2, #5
 80079bc:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80079be:	687b      	ldr	r3, [r7, #4]
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr
 80079cc:	200000c4 	.word	0x200000c4

080079d0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80079d0:	b480      	push	{r7}
 80079d2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80079d4:	4b07      	ldr	r3, [pc, #28]	; (80079f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d004      	beq.n	80079e6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80079dc:	4b05      	ldr	r3, [pc, #20]	; (80079f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079e2:	3201      	adds	r2, #1
 80079e4:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
 80079e6:	4b03      	ldr	r3, [pc, #12]	; (80079f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80079e8:	681b      	ldr	r3, [r3, #0]
	}
 80079ea:	4618      	mov	r0, r3
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr
 80079f4:	200000c4 	.word	0x200000c4

080079f8 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8007a02:	f001 f8c3 	bl	8008b8c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8007a06:	4b31      	ldr	r3, [pc, #196]	; (8007acc <ulTaskNotifyTake+0xd4>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d138      	bne.n	8007a82 <ulTaskNotifyTake+0x8a>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 8007a10:	4b2e      	ldr	r3, [pc, #184]	; (8007acc <ulTaskNotifyTake+0xd4>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2201      	movs	r2, #1
 8007a16:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

				if( xTicksToWait > ( TickType_t ) 0 )
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d030      	beq.n	8007a82 <ulTaskNotifyTake+0x8a>
				{
					/* The task is going to block.  First it must be removed
					from the ready list. */
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8007a20:	4b2a      	ldr	r3, [pc, #168]	; (8007acc <ulTaskNotifyTake+0xd4>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	3304      	adds	r3, #4
 8007a26:	4618      	mov	r0, r3
 8007a28:	f000 fffa 	bl	8008a20 <uxListRemove>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d10b      	bne.n	8007a4a <ulTaskNotifyTake+0x52>
					{
						/* The current task must be in a ready list, so there is
						no need to check, and the port reset macro can be called
						directly. */
						portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007a32:	4b26      	ldr	r3, [pc, #152]	; (8007acc <ulTaskNotifyTake+0xd4>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a38:	2201      	movs	r2, #1
 8007a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a3e:	43da      	mvns	r2, r3
 8007a40:	4b23      	ldr	r3, [pc, #140]	; (8007ad0 <ulTaskNotifyTake+0xd8>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	401a      	ands	r2, r3
 8007a46:	4b22      	ldr	r3, [pc, #136]	; (8007ad0 <ulTaskNotifyTake+0xd8>)
 8007a48:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					#if ( INCLUDE_vTaskSuspend == 1 )
					{
						if( xTicksToWait == portMAX_DELAY )
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a50:	d107      	bne.n	8007a62 <ulTaskNotifyTake+0x6a>
						{
							/* Add the task to the suspended task list instead
							of a delayed task list to ensure the task is not
							woken by a timing event.  It will block
							indefinitely. */
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8007a52:	4b1e      	ldr	r3, [pc, #120]	; (8007acc <ulTaskNotifyTake+0xd4>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	3304      	adds	r3, #4
 8007a58:	481e      	ldr	r0, [pc, #120]	; (8007ad4 <ulTaskNotifyTake+0xdc>)
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	f000 ff84 	bl	8008968 <vListInsertEnd>
 8007a60:	e007      	b.n	8007a72 <ulTaskNotifyTake+0x7a>
						{
							/* Calculate the time at which the task should be
							woken if no notification events occur.  This may
							overflow but this doesn't matter, the scheduler will
							handle it. */
							xTimeToWake = xTickCount + xTicksToWait;
 8007a62:	4b1d      	ldr	r3, [pc, #116]	; (8007ad8 <ulTaskNotifyTake+0xe0>)
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	4413      	add	r3, r2
 8007a6a:	60fb      	str	r3, [r7, #12]
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 8007a6c:	68f8      	ldr	r0, [r7, #12]
 8007a6e:	f7ff fded 	bl	800764c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8007a72:	4b1a      	ldr	r3, [pc, #104]	; (8007adc <ulTaskNotifyTake+0xe4>)
 8007a74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a78:	601a      	str	r2, [r3, #0]
 8007a7a:	f3bf 8f4f 	dsb	sy
 8007a7e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007a82:	f001 f89b 	bl	8008bbc <vPortExitCritical>

		taskENTER_CRITICAL();
 8007a86:	f001 f881 	bl	8008b8c <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8007a8a:	4b10      	ldr	r3, [pc, #64]	; (8007acc <ulTaskNotifyTake+0xd4>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a90:	60bb      	str	r3, [r7, #8]

			if( ulReturn != 0UL )
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d00c      	beq.n	8007ab2 <ulTaskNotifyTake+0xba>
			{
				if( xClearCountOnExit != pdFALSE )
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d004      	beq.n	8007aa8 <ulTaskNotifyTake+0xb0>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8007a9e:	4b0b      	ldr	r3, [pc, #44]	; (8007acc <ulTaskNotifyTake+0xd4>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	649a      	str	r2, [r3, #72]	; 0x48
 8007aa6:	e004      	b.n	8007ab2 <ulTaskNotifyTake+0xba>
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
 8007aa8:	4b08      	ldr	r3, [pc, #32]	; (8007acc <ulTaskNotifyTake+0xd4>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007aae:	3a01      	subs	r2, #1
 8007ab0:	649a      	str	r2, [r3, #72]	; 0x48
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 8007ab2:	4b06      	ldr	r3, [pc, #24]	; (8007acc <ulTaskNotifyTake+0xd4>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		}
		taskEXIT_CRITICAL();
 8007abc:	f001 f87e 	bl	8008bbc <vPortExitCritical>

		return ulReturn;
 8007ac0:	68bb      	ldr	r3, [r7, #8]
	}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3710      	adds	r7, #16
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	200000c4 	.word	0x200000c4
 8007ad0:	200001a4 	.word	0x200001a4
 8007ad4:	20000188 	.word	0x20000188
 8007ad8:	200001a0 	.word	0x200001a0
 8007adc:	e000ed04 	.word	0xe000ed04

08007ae0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b086      	sub	sp, #24
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	607a      	str	r2, [r7, #4]
 8007aec:	603b      	str	r3, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8007aee:	f001 f84d 	bl	8008b8c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->eNotifyState != eNotified )
 8007af2:	4b39      	ldr	r3, [pc, #228]	; (8007bd8 <xTaskNotifyWait+0xf8>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	2b02      	cmp	r3, #2
 8007afe:	d03f      	beq.n	8007b80 <xTaskNotifyWait+0xa0>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8007b00:	4b35      	ldr	r3, [pc, #212]	; (8007bd8 <xTaskNotifyWait+0xf8>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8007b06:	68fa      	ldr	r2, [r7, #12]
 8007b08:	43d2      	mvns	r2, r2
 8007b0a:	400a      	ands	r2, r1
 8007b0c:	649a      	str	r2, [r3, #72]	; 0x48

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 8007b0e:	4b32      	ldr	r3, [pc, #200]	; (8007bd8 <xTaskNotifyWait+0xf8>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	2201      	movs	r2, #1
 8007b14:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

				if( xTicksToWait > ( TickType_t ) 0 )
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d030      	beq.n	8007b80 <xTaskNotifyWait+0xa0>
				{
					/* The task is going to block.  First it must be removed
					from the	ready list. */
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8007b1e:	4b2e      	ldr	r3, [pc, #184]	; (8007bd8 <xTaskNotifyWait+0xf8>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	3304      	adds	r3, #4
 8007b24:	4618      	mov	r0, r3
 8007b26:	f000 ff7b 	bl	8008a20 <uxListRemove>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d10b      	bne.n	8007b48 <xTaskNotifyWait+0x68>
					{
						/* The current task must be in a ready list, so there is
						no need to check, and the port reset macro can be called
						directly. */
						portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007b30:	4b29      	ldr	r3, [pc, #164]	; (8007bd8 <xTaskNotifyWait+0xf8>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b36:	2201      	movs	r2, #1
 8007b38:	fa02 f303 	lsl.w	r3, r2, r3
 8007b3c:	43da      	mvns	r2, r3
 8007b3e:	4b27      	ldr	r3, [pc, #156]	; (8007bdc <xTaskNotifyWait+0xfc>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	401a      	ands	r2, r3
 8007b44:	4b25      	ldr	r3, [pc, #148]	; (8007bdc <xTaskNotifyWait+0xfc>)
 8007b46:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					#if ( INCLUDE_vTaskSuspend == 1 )
					{
						if( xTicksToWait == portMAX_DELAY )
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b4e:	d107      	bne.n	8007b60 <xTaskNotifyWait+0x80>
						{
							/* Add the task to the suspended task list instead
							of a delayed task list to ensure the task is not
							woken by a timing event.  It will block
							indefinitely. */
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8007b50:	4b21      	ldr	r3, [pc, #132]	; (8007bd8 <xTaskNotifyWait+0xf8>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	3304      	adds	r3, #4
 8007b56:	4822      	ldr	r0, [pc, #136]	; (8007be0 <xTaskNotifyWait+0x100>)
 8007b58:	4619      	mov	r1, r3
 8007b5a:	f000 ff05 	bl	8008968 <vListInsertEnd>
 8007b5e:	e007      	b.n	8007b70 <xTaskNotifyWait+0x90>
						{
							/* Calculate the time at which the task should be
							woken if no notification events occur.  This may
							overflow but this doesn't matter, the scheduler will
							handle it. */
							xTimeToWake = xTickCount + xTicksToWait;
 8007b60:	4b20      	ldr	r3, [pc, #128]	; (8007be4 <xTaskNotifyWait+0x104>)
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	4413      	add	r3, r2
 8007b68:	613b      	str	r3, [r7, #16]
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 8007b6a:	6938      	ldr	r0, [r7, #16]
 8007b6c:	f7ff fd6e 	bl	800764c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8007b70:	4b1d      	ldr	r3, [pc, #116]	; (8007be8 <xTaskNotifyWait+0x108>)
 8007b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b76:	601a      	str	r2, [r3, #0]
 8007b78:	f3bf 8f4f 	dsb	sy
 8007b7c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007b80:	f001 f81c 	bl	8008bbc <vPortExitCritical>

		taskENTER_CRITICAL();
 8007b84:	f001 f802 	bl	8008b8c <vPortEnterCritical>
		{
			if( pulNotificationValue != NULL )
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d004      	beq.n	8007b98 <xTaskNotifyWait+0xb8>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8007b8e:	4b12      	ldr	r3, [pc, #72]	; (8007bd8 <xTaskNotifyWait+0xf8>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	601a      	str	r2, [r3, #0]

			/* If eNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->eNotifyState == eWaitingNotification )
 8007b98:	4b0f      	ldr	r3, [pc, #60]	; (8007bd8 <xTaskNotifyWait+0xf8>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d102      	bne.n	8007bac <xTaskNotifyWait+0xcc>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	617b      	str	r3, [r7, #20]
 8007baa:	e008      	b.n	8007bbe <xTaskNotifyWait+0xde>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8007bac:	4b0a      	ldr	r3, [pc, #40]	; (8007bd8 <xTaskNotifyWait+0xf8>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8007bb2:	68ba      	ldr	r2, [r7, #8]
 8007bb4:	43d2      	mvns	r2, r2
 8007bb6:	400a      	ands	r2, r1
 8007bb8:	649a      	str	r2, [r3, #72]	; 0x48
				xReturn = pdTRUE;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 8007bbe:	4b06      	ldr	r3, [pc, #24]	; (8007bd8 <xTaskNotifyWait+0xf8>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		}
		taskEXIT_CRITICAL();
 8007bc8:	f000 fff8 	bl	8008bbc <vPortExitCritical>

		return xReturn;
 8007bcc:	697b      	ldr	r3, [r7, #20]
	}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3718      	adds	r7, #24
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	200000c4 	.word	0x200000c4
 8007bdc:	200001a4 	.word	0x200001a4
 8007be0:	20000188 	.word	0x20000188
 8007be4:	200001a0 	.word	0x200001a0
 8007be8:	e000ed04 	.word	0xe000ed04

08007bec <xTaskNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction )
	{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b088      	sub	sp, #32
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	60b9      	str	r1, [r7, #8]
 8007bf6:	4613      	mov	r3, r2
 8007bf8:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	61fb      	str	r3, [r7, #28]

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	61bb      	str	r3, [r7, #24]

		taskENTER_CRITICAL();
 8007c02:	f000 ffc3 	bl	8008b8c <vPortEnterCritical>
		{
			eOriginalNotifyState = pxTCB->eNotifyState;
 8007c06:	69bb      	ldr	r3, [r7, #24]
 8007c08:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007c0c:	75fb      	strb	r3, [r7, #23]

			pxTCB->eNotifyState = eNotified;
 8007c0e:	69bb      	ldr	r3, [r7, #24]
 8007c10:	2202      	movs	r2, #2
 8007c12:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

			switch( eAction )
 8007c16:	79fb      	ldrb	r3, [r7, #7]
 8007c18:	2b04      	cmp	r3, #4
 8007c1a:	d828      	bhi.n	8007c6e <xTaskNotify+0x82>
 8007c1c:	a201      	add	r2, pc, #4	; (adr r2, 8007c24 <xTaskNotify+0x38>)
 8007c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c22:	bf00      	nop
 8007c24:	08007c6f 	.word	0x08007c6f
 8007c28:	08007c39 	.word	0x08007c39
 8007c2c:	08007c47 	.word	0x08007c47
 8007c30:	08007c53 	.word	0x08007c53
 8007c34:	08007c5b 	.word	0x08007c5b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007c38:	69bb      	ldr	r3, [r7, #24]
 8007c3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	431a      	orrs	r2, r3
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	649a      	str	r2, [r3, #72]	; 0x48
					break;
 8007c44:	e013      	b.n	8007c6e <xTaskNotify+0x82>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c4a:	1c5a      	adds	r2, r3, #1
 8007c4c:	69bb      	ldr	r3, [r7, #24]
 8007c4e:	649a      	str	r2, [r3, #72]	; 0x48
					break;
 8007c50:	e00d      	b.n	8007c6e <xTaskNotify+0x82>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007c52:	69bb      	ldr	r3, [r7, #24]
 8007c54:	68ba      	ldr	r2, [r7, #8]
 8007c56:	649a      	str	r2, [r3, #72]	; 0x48
					break;
 8007c58:	e009      	b.n	8007c6e <xTaskNotify+0x82>

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 8007c5a:	7dfb      	ldrb	r3, [r7, #23]
 8007c5c:	2b02      	cmp	r3, #2
 8007c5e:	d003      	beq.n	8007c68 <xTaskNotify+0x7c>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	68ba      	ldr	r2, [r7, #8]
 8007c64:	649a      	str	r2, [r3, #72]	; 0x48
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007c66:	e001      	b.n	8007c6c <xTaskNotify+0x80>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	61fb      	str	r3, [r7, #28]
					}
					break;
 8007c6c:	bf00      	nop
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 8007c6e:	7dfb      	ldrb	r3, [r7, #23]
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d12a      	bne.n	8007cca <xTaskNotify+0xde>
			{
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8007c74:	69bb      	ldr	r3, [r7, #24]
 8007c76:	3304      	adds	r3, #4
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f000 fed1 	bl	8008a20 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8007c7e:	69bb      	ldr	r3, [r7, #24]
 8007c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c82:	2201      	movs	r2, #1
 8007c84:	409a      	lsls	r2, r3
 8007c86:	4b14      	ldr	r3, [pc, #80]	; (8007cd8 <xTaskNotify+0xec>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	431a      	orrs	r2, r3
 8007c8c:	4b12      	ldr	r3, [pc, #72]	; (8007cd8 <xTaskNotify+0xec>)
 8007c8e:	601a      	str	r2, [r3, #0]
 8007c90:	69bb      	ldr	r3, [r7, #24]
 8007c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c94:	4613      	mov	r3, r2
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	4413      	add	r3, r2
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	4a0f      	ldr	r2, [pc, #60]	; (8007cdc <xTaskNotify+0xf0>)
 8007c9e:	441a      	add	r2, r3
 8007ca0:	69bb      	ldr	r3, [r7, #24]
 8007ca2:	3304      	adds	r3, #4
 8007ca4:	4610      	mov	r0, r2
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	f000 fe5e 	bl	8008968 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007cac:	69bb      	ldr	r3, [r7, #24]
 8007cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cb0:	4b0b      	ldr	r3, [pc, #44]	; (8007ce0 <xTaskNotify+0xf4>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d907      	bls.n	8007cca <xTaskNotify+0xde>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					portYIELD_WITHIN_API();
 8007cba:	4b0a      	ldr	r3, [pc, #40]	; (8007ce4 <xTaskNotify+0xf8>)
 8007cbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cc0:	601a      	str	r2, [r3, #0]
 8007cc2:	f3bf 8f4f 	dsb	sy
 8007cc6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007cca:	f000 ff77 	bl	8008bbc <vPortExitCritical>

		return xReturn;
 8007cce:	69fb      	ldr	r3, [r7, #28]
	}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3720      	adds	r7, #32
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	200001a4 	.word	0x200001a4
 8007cdc:	200000c8 	.word	0x200000c8
 8007ce0:	200000c4 	.word	0x200000c4
 8007ce4:	e000ed04 	.word	0xe000ed04

08007ce8 <xTaskNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b08c      	sub	sp, #48	; 0x30
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	603b      	str	r3, [r7, #0]
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	62bb      	str	r3, [r7, #40]	; 0x28

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007d00:	f3ef 8211 	mrs	r2, BASEPRI
 8007d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d08:	f383 8811 	msr	BASEPRI, r3
 8007d0c:	f3bf 8f6f 	isb	sy
 8007d10:	f3bf 8f4f 	dsb	sy
 8007d14:	61fa      	str	r2, [r7, #28]
 8007d16:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007d18:	69fb      	ldr	r3, [r7, #28]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007d1a:	627b      	str	r3, [r7, #36]	; 0x24
		{
			eOriginalNotifyState = pxTCB->eNotifyState;
 8007d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007d22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

			pxTCB->eNotifyState = eNotified;
 8007d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d28:	2202      	movs	r2, #2
 8007d2a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

			switch( eAction )
 8007d2e:	79fb      	ldrb	r3, [r7, #7]
 8007d30:	2b04      	cmp	r3, #4
 8007d32:	d829      	bhi.n	8007d88 <xTaskNotifyFromISR+0xa0>
 8007d34:	a201      	add	r2, pc, #4	; (adr r2, 8007d3c <xTaskNotifyFromISR+0x54>)
 8007d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d3a:	bf00      	nop
 8007d3c:	08007d89 	.word	0x08007d89
 8007d40:	08007d51 	.word	0x08007d51
 8007d44:	08007d5f 	.word	0x08007d5f
 8007d48:	08007d6b 	.word	0x08007d6b
 8007d4c:	08007d73 	.word	0x08007d73
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	431a      	orrs	r2, r3
 8007d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5a:	649a      	str	r2, [r3, #72]	; 0x48
					break;
 8007d5c:	e014      	b.n	8007d88 <xTaskNotifyFromISR+0xa0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d62:	1c5a      	adds	r2, r3, #1
 8007d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d66:	649a      	str	r2, [r3, #72]	; 0x48
					break;
 8007d68:	e00e      	b.n	8007d88 <xTaskNotifyFromISR+0xa0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6c:	68ba      	ldr	r2, [r7, #8]
 8007d6e:	649a      	str	r2, [r3, #72]	; 0x48
					break;
 8007d70:	e00a      	b.n	8007d88 <xTaskNotifyFromISR+0xa0>

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 8007d72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	d003      	beq.n	8007d82 <xTaskNotifyFromISR+0x9a>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7c:	68ba      	ldr	r2, [r7, #8]
 8007d7e:	649a      	str	r2, [r3, #72]	; 0x48
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007d80:	e001      	b.n	8007d86 <xTaskNotifyFromISR+0x9e>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
 8007d82:	2300      	movs	r3, #0
 8007d84:	62fb      	str	r3, [r7, #44]	; 0x2c
					}
					break;
 8007d86:	bf00      	nop
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 8007d88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d133      	bne.n	8007df8 <xTaskNotifyFromISR+0x110>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d90:	4b1e      	ldr	r3, [pc, #120]	; (8007e0c <xTaskNotifyFromISR+0x124>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d11c      	bne.n	8007dd2 <xTaskNotifyFromISR+0xea>
				{
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8007d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d9a:	3304      	adds	r3, #4
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f000 fe3f 	bl	8008a20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da6:	2201      	movs	r2, #1
 8007da8:	409a      	lsls	r2, r3
 8007daa:	4b19      	ldr	r3, [pc, #100]	; (8007e10 <xTaskNotifyFromISR+0x128>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	431a      	orrs	r2, r3
 8007db0:	4b17      	ldr	r3, [pc, #92]	; (8007e10 <xTaskNotifyFromISR+0x128>)
 8007db2:	601a      	str	r2, [r3, #0]
 8007db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007db8:	4613      	mov	r3, r2
 8007dba:	009b      	lsls	r3, r3, #2
 8007dbc:	4413      	add	r3, r2
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	4a14      	ldr	r2, [pc, #80]	; (8007e14 <xTaskNotifyFromISR+0x12c>)
 8007dc2:	441a      	add	r2, r3
 8007dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc6:	3304      	adds	r3, #4
 8007dc8:	4610      	mov	r0, r2
 8007dca:	4619      	mov	r1, r3
 8007dcc:	f000 fdcc 	bl	8008968 <vListInsertEnd>
 8007dd0:	e005      	b.n	8007dde <xTaskNotifyFromISR+0xf6>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd4:	3318      	adds	r3, #24
 8007dd6:	4810      	ldr	r0, [pc, #64]	; (8007e18 <xTaskNotifyFromISR+0x130>)
 8007dd8:	4619      	mov	r1, r3
 8007dda:	f000 fdc5 	bl	8008968 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007de2:	4b0e      	ldr	r3, [pc, #56]	; (8007e1c <xTaskNotifyFromISR+0x134>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d905      	bls.n	8007df8 <xTaskNotifyFromISR+0x110>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d002      	beq.n	8007df8 <xTaskNotifyFromISR+0x110>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	2201      	movs	r2, #1
 8007df6:	601a      	str	r2, [r3, #0]
 8007df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8007e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3730      	adds	r7, #48	; 0x30
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}
 8007e0c:	200001bc 	.word	0x200001bc
 8007e10:	200001a4 	.word	0x200001a4
 8007e14:	200000c8 	.word	0x200000c8
 8007e18:	2000015c 	.word	0x2000015c
 8007e1c:	200000c4 	.word	0x200000c4

08007e20 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b088      	sub	sp, #32
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007e2e:	f3ef 8211 	mrs	r2, BASEPRI
 8007e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e36:	f383 8811 	msr	BASEPRI, r3
 8007e3a:	f3bf 8f6f 	isb	sy
 8007e3e:	f3bf 8f4f 	dsb	sy
 8007e42:	613a      	str	r2, [r7, #16]
 8007e44:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007e46:	693b      	ldr	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007e48:	61bb      	str	r3, [r7, #24]
		{
			eOriginalNotifyState = pxTCB->eNotifyState;
 8007e4a:	69fb      	ldr	r3, [r7, #28]
 8007e4c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007e50:	75fb      	strb	r3, [r7, #23]
			pxTCB->eNotifyState = eNotified;
 8007e52:	69fb      	ldr	r3, [r7, #28]
 8007e54:	2202      	movs	r2, #2
 8007e56:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8007e5a:	69fb      	ldr	r3, [r7, #28]
 8007e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e5e:	1c5a      	adds	r2, r3, #1
 8007e60:	69fb      	ldr	r3, [r7, #28]
 8007e62:	649a      	str	r2, [r3, #72]	; 0x48

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 8007e64:	7dfb      	ldrb	r3, [r7, #23]
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d133      	bne.n	8007ed2 <vTaskNotifyGiveFromISR+0xb2>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e6a:	4b1e      	ldr	r3, [pc, #120]	; (8007ee4 <vTaskNotifyGiveFromISR+0xc4>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d11c      	bne.n	8007eac <vTaskNotifyGiveFromISR+0x8c>
				{
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	3304      	adds	r3, #4
 8007e76:	4618      	mov	r0, r3
 8007e78:	f000 fdd2 	bl	8008a20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007e7c:	69fb      	ldr	r3, [r7, #28]
 8007e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e80:	2201      	movs	r2, #1
 8007e82:	409a      	lsls	r2, r3
 8007e84:	4b18      	ldr	r3, [pc, #96]	; (8007ee8 <vTaskNotifyGiveFromISR+0xc8>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	431a      	orrs	r2, r3
 8007e8a:	4b17      	ldr	r3, [pc, #92]	; (8007ee8 <vTaskNotifyGiveFromISR+0xc8>)
 8007e8c:	601a      	str	r2, [r3, #0]
 8007e8e:	69fb      	ldr	r3, [r7, #28]
 8007e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e92:	4613      	mov	r3, r2
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	4413      	add	r3, r2
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	4a14      	ldr	r2, [pc, #80]	; (8007eec <vTaskNotifyGiveFromISR+0xcc>)
 8007e9c:	441a      	add	r2, r3
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	3304      	adds	r3, #4
 8007ea2:	4610      	mov	r0, r2
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	f000 fd5f 	bl	8008968 <vListInsertEnd>
 8007eaa:	e005      	b.n	8007eb8 <vTaskNotifyGiveFromISR+0x98>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007eac:	69fb      	ldr	r3, [r7, #28]
 8007eae:	3318      	adds	r3, #24
 8007eb0:	480f      	ldr	r0, [pc, #60]	; (8007ef0 <vTaskNotifyGiveFromISR+0xd0>)
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	f000 fd58 	bl	8008968 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007eb8:	69fb      	ldr	r3, [r7, #28]
 8007eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ebc:	4b0d      	ldr	r3, [pc, #52]	; (8007ef4 <vTaskNotifyGiveFromISR+0xd4>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d905      	bls.n	8007ed2 <vTaskNotifyGiveFromISR+0xb2>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d002      	beq.n	8007ed2 <vTaskNotifyGiveFromISR+0xb2>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	601a      	str	r2, [r3, #0]
 8007ed2:	69bb      	ldr	r3, [r7, #24]
 8007ed4:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	f383 8811 	msr	BASEPRI, r3
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8007edc:	3720      	adds	r7, #32
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	200001bc 	.word	0x200001bc
 8007ee8:	200001a4 	.word	0x200001a4
 8007eec:	200000c8 	.word	0x200000c8
 8007ef0:	2000015c 	.word	0x2000015c
 8007ef4:	200000c4 	.word	0x200000c4

08007ef8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 8007f06:	f000 fe41 	bl	8008b8c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f12:	68f9      	ldr	r1, [r7, #12]
 8007f14:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007f16:	fb01 f303 	mul.w	r3, r1, r3
 8007f1a:	441a      	add	r2, r3
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2200      	movs	r2, #0
 8007f24:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f36:	3b01      	subs	r3, #1
 8007f38:	68f9      	ldr	r1, [r7, #12]
 8007f3a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007f3c:	fb01 f303 	mul.w	r3, r1, r3
 8007f40:	441a      	add	r2, r3
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f04f 32ff 	mov.w	r2, #4294967295
 8007f4c:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f04f 32ff 	mov.w	r2, #4294967295
 8007f54:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d114      	bne.n	8007f86 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	691b      	ldr	r3, [r3, #16]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d01a      	beq.n	8007f9a <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	3310      	adds	r3, #16
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f7ff f989 	bl	8007280 <xTaskRemoveFromEventList>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d112      	bne.n	8007f9a <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007f74:	4b0c      	ldr	r3, [pc, #48]	; (8007fa8 <xQueueGenericReset+0xb0>)
 8007f76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f7a:	601a      	str	r2, [r3, #0]
 8007f7c:	f3bf 8f4f 	dsb	sy
 8007f80:	f3bf 8f6f 	isb	sy
 8007f84:	e009      	b.n	8007f9a <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	3310      	adds	r3, #16
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f000 fcc0 	bl	8008910 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	3324      	adds	r3, #36	; 0x24
 8007f94:	4618      	mov	r0, r3
 8007f96:	f000 fcbb 	bl	8008910 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007f9a:	f000 fe0f 	bl	8008bbc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007f9e:	2301      	movs	r3, #1
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3710      	adds	r7, #16
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}
 8007fa8:	e000ed04 	.word	0xe000ed04

08007fac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b088      	sub	sp, #32
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	60b9      	str	r1, [r7, #8]
 8007fb6:	4613      	mov	r3, r2
 8007fb8:	71fb      	strb	r3, [r7, #7]
Queue_t *pxNewQueue;
size_t xQueueSizeInBytes;
QueueHandle_t xReturn = NULL;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	61bb      	str	r3, [r7, #24]
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d102      	bne.n	8007fca <xQueueGenericCreate+0x1e>
	{
		/* There is not going to be a queue storage area. */
		xQueueSizeInBytes = ( size_t ) 0;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	61fb      	str	r3, [r7, #28]
 8007fc8:	e005      	b.n	8007fd6 <xQueueGenericCreate+0x2a>
	}
	else
	{
		/* The queue is one byte longer than asked for to make wrap checking
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	68ba      	ldr	r2, [r7, #8]
 8007fce:	fb02 f303 	mul.w	r3, r2, r3
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	61fb      	str	r3, [r7, #28]
	}

	/* Allocate the new queue structure and storage area. */
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007fd6:	69fb      	ldr	r3, [r7, #28]
 8007fd8:	334c      	adds	r3, #76	; 0x4c
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f000 fe76 	bl	8008ccc <pvPortMalloc>
 8007fe0:	6178      	str	r0, [r7, #20]

	if( pcAllocatedBuffer != NULL )
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d019      	beq.n	800801c <xQueueGenericCreate+0x70>
	{
		pxNewQueue = ( Queue_t * ) pcAllocatedBuffer; /*lint !e826 MISRA The buffer cannot be to small because it was dimensioned by sizeof( Queue_t ) + xQueueSizeInBytes. */
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	613b      	str	r3, [r7, #16]

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d103      	bne.n	8007ffa <xQueueGenericCreate+0x4e>
		{
			/* No RAM was allocated for the queue storage area, but PC head
			cannot be set to NULL because NULL is used as a key to say the queue
			is used as a mutex.  Therefore just set pcHead to point to the queue
			as a benign value that is known to be within the memory map. */
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	693a      	ldr	r2, [r7, #16]
 8007ff6:	601a      	str	r2, [r3, #0]
 8007ff8:	e004      	b.n	8008004 <xQueueGenericCreate+0x58>
		}
		else
		{
			/* Jump past the queue structure to find the location of the queue
			storage area - adding the padding bytes to get a better alignment. */
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	601a      	str	r2, [r3, #0]
		}

		/* Initialise the queue members as described above where the queue type
		is defined. */
		pxNewQueue->uxLength = uxQueueLength;
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	68fa      	ldr	r2, [r7, #12]
 8008008:	63da      	str	r2, [r3, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	68ba      	ldr	r2, [r7, #8]
 800800e:	641a      	str	r2, [r3, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008010:	6938      	ldr	r0, [r7, #16]
 8008012:	2101      	movs	r1, #1
 8008014:	f7ff ff70 	bl	8007ef8 <xQueueGenericReset>
			pxNewQueue->pxQueueSetContainer = NULL;
		}
		#endif /* configUSE_QUEUE_SETS */

		traceQUEUE_CREATE( pxNewQueue );
		xReturn = pxNewQueue;
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	61bb      	str	r3, [r7, #24]
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );

	return xReturn;
 800801c:	69bb      	ldr	r3, [r7, #24]
}
 800801e:	4618      	mov	r0, r3
 8008020:	3720      	adds	r7, #32
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
 8008026:	bf00      	nop

08008028 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008028:	b580      	push	{r7, lr}
 800802a:	b084      	sub	sp, #16
 800802c:	af00      	add	r7, sp, #0
 800802e:	4603      	mov	r3, r0
 8008030:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
 8008032:	204c      	movs	r0, #76	; 0x4c
 8008034:	f000 fe4a 	bl	8008ccc <pvPortMalloc>
 8008038:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d02c      	beq.n	800809a <xQueueCreateMutex+0x72>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2200      	movs	r2, #0
 8008044:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2200      	movs	r2, #0
 800804a:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2200      	movs	r2, #0
 8008050:	609a      	str	r2, [r3, #8]
			pxNewQueue->u.pcReadFrom = NULL;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2200      	movs	r2, #0
 8008056:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2200      	movs	r2, #0
 800805c:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2201      	movs	r2, #1
 8008062:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2200      	movs	r2, #0
 8008068:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f04f 32ff 	mov.w	r2, #4294967295
 8008070:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f04f 32ff 	mov.w	r2, #4294967295
 8008078:	649a      	str	r2, [r3, #72]	; 0x48
				pxNewQueue->pxQueueSetContainer = NULL;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	3310      	adds	r3, #16
 800807e:	4618      	mov	r0, r3
 8008080:	f000 fc46 	bl	8008910 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	3324      	adds	r3, #36	; 0x24
 8008088:	4618      	mov	r0, r3
 800808a:	f000 fc41 	bl	8008910 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800808e:	68f8      	ldr	r0, [r7, #12]
 8008090:	2100      	movs	r1, #0
 8008092:	2200      	movs	r2, #0
 8008094:	2300      	movs	r3, #0
 8008096:	f000 f805 	bl	80080a4 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
 800809a:	68fb      	ldr	r3, [r7, #12]
	}
 800809c:	4618      	mov	r0, r3
 800809e:	3710      	adds	r7, #16
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b08a      	sub	sp, #40	; 0x28
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	60f8      	str	r0, [r7, #12]
 80080ac:	60b9      	str	r1, [r7, #8]
 80080ae:	607a      	str	r2, [r7, #4]
 80080b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80080b2:	2300      	movs	r3, #0
 80080b4:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	623b      	str	r3, [r7, #32]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80080ba:	f000 fd67 	bl	8008b8c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80080be:	6a3b      	ldr	r3, [r7, #32]
 80080c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080c2:	6a3b      	ldr	r3, [r7, #32]
 80080c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d302      	bcc.n	80080d0 <xQueueGenericSend+0x2c>
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	2b02      	cmp	r3, #2
 80080ce:	d129      	bne.n	8008124 <xQueueGenericSend+0x80>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80080d0:	6a38      	ldr	r0, [r7, #32]
 80080d2:	68b9      	ldr	r1, [r7, #8]
 80080d4:	683a      	ldr	r2, [r7, #0]
 80080d6:	f000 fab7 	bl	8008648 <prvCopyDataToQueue>
 80080da:	61f8      	str	r0, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80080dc:	6a3b      	ldr	r3, [r7, #32]
 80080de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d010      	beq.n	8008106 <xQueueGenericSend+0x62>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 80080e4:	6a3b      	ldr	r3, [r7, #32]
 80080e6:	3324      	adds	r3, #36	; 0x24
 80080e8:	4618      	mov	r0, r3
 80080ea:	f7ff f8c9 	bl	8007280 <xTaskRemoveFromEventList>
 80080ee:	4603      	mov	r3, r0
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d113      	bne.n	800811c <xQueueGenericSend+0x78>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80080f4:	4b3d      	ldr	r3, [pc, #244]	; (80081ec <xQueueGenericSend+0x148>)
 80080f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080fa:	601a      	str	r2, [r3, #0]
 80080fc:	f3bf 8f4f 	dsb	sy
 8008100:	f3bf 8f6f 	isb	sy
 8008104:	e00a      	b.n	800811c <xQueueGenericSend+0x78>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d007      	beq.n	800811c <xQueueGenericSend+0x78>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800810c:	4b37      	ldr	r3, [pc, #220]	; (80081ec <xQueueGenericSend+0x148>)
 800810e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008112:	601a      	str	r2, [r3, #0]
 8008114:	f3bf 8f4f 	dsb	sy
 8008118:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800811c:	f000 fd4e 	bl	8008bbc <vPortExitCritical>
				return pdPASS;
 8008120:	2301      	movs	r3, #1
 8008122:	e05f      	b.n	80081e4 <xQueueGenericSend+0x140>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d103      	bne.n	8008132 <xQueueGenericSend+0x8e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800812a:	f000 fd47 	bl	8008bbc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800812e:	2300      	movs	r3, #0
 8008130:	e058      	b.n	80081e4 <xQueueGenericSend+0x140>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008134:	2b00      	cmp	r3, #0
 8008136:	d106      	bne.n	8008146 <xQueueGenericSend+0xa2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8008138:	f107 0314 	add.w	r3, r7, #20
 800813c:	4618      	mov	r0, r3
 800813e:	f7ff f93b 	bl	80073b8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008142:	2301      	movs	r3, #1
 8008144:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008146:	f000 fd39 	bl	8008bbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800814a:	f7fe fe05 	bl	8006d58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800814e:	f000 fd1d 	bl	8008b8c <vPortEnterCritical>
 8008152:	6a3b      	ldr	r3, [r7, #32]
 8008154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800815a:	d102      	bne.n	8008162 <xQueueGenericSend+0xbe>
 800815c:	6a3b      	ldr	r3, [r7, #32]
 800815e:	2200      	movs	r2, #0
 8008160:	645a      	str	r2, [r3, #68]	; 0x44
 8008162:	6a3b      	ldr	r3, [r7, #32]
 8008164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800816a:	d102      	bne.n	8008172 <xQueueGenericSend+0xce>
 800816c:	6a3b      	ldr	r3, [r7, #32]
 800816e:	2200      	movs	r2, #0
 8008170:	649a      	str	r2, [r3, #72]	; 0x48
 8008172:	f000 fd23 	bl	8008bbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008176:	f107 0214 	add.w	r2, r7, #20
 800817a:	1d3b      	adds	r3, r7, #4
 800817c:	4610      	mov	r0, r2
 800817e:	4619      	mov	r1, r3
 8008180:	f7ff f930 	bl	80073e4 <xTaskCheckForTimeOut>
 8008184:	4603      	mov	r3, r0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d124      	bne.n	80081d4 <xQueueGenericSend+0x130>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800818a:	6a38      	ldr	r0, [r7, #32]
 800818c:	f000 fb66 	bl	800885c <prvIsQueueFull>
 8008190:	4603      	mov	r3, r0
 8008192:	2b00      	cmp	r3, #0
 8008194:	d018      	beq.n	80081c8 <xQueueGenericSend+0x124>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008196:	6a3b      	ldr	r3, [r7, #32]
 8008198:	f103 0210 	add.w	r2, r3, #16
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	4610      	mov	r0, r2
 80081a0:	4619      	mov	r1, r3
 80081a2:	f7fe ffb3 	bl	800710c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80081a6:	6a38      	ldr	r0, [r7, #32]
 80081a8:	f000 fae2 	bl	8008770 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80081ac:	f7fe fde2 	bl	8006d74 <xTaskResumeAll>
 80081b0:	4603      	mov	r3, r0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d115      	bne.n	80081e2 <xQueueGenericSend+0x13e>
				{
					portYIELD_WITHIN_API();
 80081b6:	4b0d      	ldr	r3, [pc, #52]	; (80081ec <xQueueGenericSend+0x148>)
 80081b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081bc:	601a      	str	r2, [r3, #0]
 80081be:	f3bf 8f4f 	dsb	sy
 80081c2:	f3bf 8f6f 	isb	sy
 80081c6:	e00c      	b.n	80081e2 <xQueueGenericSend+0x13e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80081c8:	6a38      	ldr	r0, [r7, #32]
 80081ca:	f000 fad1 	bl	8008770 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80081ce:	f7fe fdd1 	bl	8006d74 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 80081d2:	e772      	b.n	80080ba <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80081d4:	6a38      	ldr	r0, [r7, #32]
 80081d6:	f000 facb 	bl	8008770 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80081da:	f7fe fdcb 	bl	8006d74 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80081de:	2300      	movs	r3, #0
 80081e0:	e000      	b.n	80081e4 <xQueueGenericSend+0x140>
		}
	}
 80081e2:	e76a      	b.n	80080ba <xQueueGenericSend+0x16>
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3728      	adds	r7, #40	; 0x28
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	e000ed04 	.word	0xe000ed04

080081f0 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b08a      	sub	sp, #40	; 0x28
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	607a      	str	r2, [r7, #4]
 80081fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	623b      	str	r3, [r7, #32]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008202:	f3ef 8211 	mrs	r2, BASEPRI
 8008206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800820a:	f383 8811 	msr	BASEPRI, r3
 800820e:	f3bf 8f6f 	isb	sy
 8008212:	f3bf 8f4f 	dsb	sy
 8008216:	61ba      	str	r2, [r7, #24]
 8008218:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800821a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800821c:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800821e:	6a3b      	ldr	r3, [r7, #32]
 8008220:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008222:	6a3b      	ldr	r3, [r7, #32]
 8008224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008226:	429a      	cmp	r2, r3
 8008228:	d302      	bcc.n	8008230 <xQueueGenericSendFromISR+0x40>
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	2b02      	cmp	r3, #2
 800822e:	d124      	bne.n	800827a <xQueueGenericSendFromISR+0x8a>
			/* A task can only have an inherited priority if it is a mutex
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  Therefore, unlike the xQueueGenericGive()
			function, there is no need to determine the need for priority
			disinheritance here or to clear the mutex holder TCB member. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008230:	6a38      	ldr	r0, [r7, #32]
 8008232:	68b9      	ldr	r1, [r7, #8]
 8008234:	683a      	ldr	r2, [r7, #0]
 8008236:	f000 fa07 	bl	8008648 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 800823a:	6a3b      	ldr	r3, [r7, #32]
 800823c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800823e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008242:	d112      	bne.n	800826a <xQueueGenericSendFromISR+0x7a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008244:	6a3b      	ldr	r3, [r7, #32]
 8008246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008248:	2b00      	cmp	r3, #0
 800824a:	d013      	beq.n	8008274 <xQueueGenericSendFromISR+0x84>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800824c:	6a3b      	ldr	r3, [r7, #32]
 800824e:	3324      	adds	r3, #36	; 0x24
 8008250:	4618      	mov	r0, r3
 8008252:	f7ff f815 	bl	8007280 <xTaskRemoveFromEventList>
 8008256:	4603      	mov	r3, r0
 8008258:	2b00      	cmp	r3, #0
 800825a:	d00b      	beq.n	8008274 <xQueueGenericSendFromISR+0x84>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d008      	beq.n	8008274 <xQueueGenericSendFromISR+0x84>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2201      	movs	r2, #1
 8008266:	601a      	str	r2, [r3, #0]
 8008268:	e004      	b.n	8008274 <xQueueGenericSendFromISR+0x84>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 800826a:	6a3b      	ldr	r3, [r7, #32]
 800826c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800826e:	1c5a      	adds	r2, r3, #1
 8008270:	6a3b      	ldr	r3, [r7, #32]
 8008272:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
 8008274:	2301      	movs	r3, #1
 8008276:	627b      	str	r3, [r7, #36]	; 0x24
 8008278:	e001      	b.n	800827e <xQueueGenericSendFromISR+0x8e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800827a:	2300      	movs	r3, #0
 800827c:	627b      	str	r3, [r7, #36]	; 0x24
 800827e:	69fb      	ldr	r3, [r7, #28]
 8008280:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800828a:	4618      	mov	r0, r3
 800828c:	3728      	adds	r7, #40	; 0x28
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop

08008294 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b088      	sub	sp, #32
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	61bb      	str	r3, [r7, #24]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80082a2:	f3ef 8211 	mrs	r2, BASEPRI
 80082a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082aa:	f383 8811 	msr	BASEPRI, r3
 80082ae:	f3bf 8f6f 	isb	sy
 80082b2:	f3bf 8f4f 	dsb	sy
 80082b6:	613a      	str	r2, [r7, #16]
 80082b8:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80082ba:	693b      	ldr	r3, [r7, #16]
	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80082bc:	617b      	str	r3, [r7, #20]
	{
		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 80082be:	69bb      	ldr	r3, [r7, #24]
 80082c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082c2:	69bb      	ldr	r3, [r7, #24]
 80082c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d224      	bcs.n	8008314 <xQueueGiveFromISR+0x80>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  Therefore, unlike the xQueueGenericGive()
			function, there is no need to determine the need for priority
			disinheritance here or to clear the mutex holder TCB member. */

			++( pxQueue->uxMessagesWaiting );
 80082ca:	69bb      	ldr	r3, [r7, #24]
 80082cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ce:	1c5a      	adds	r2, r3, #1
 80082d0:	69bb      	ldr	r3, [r7, #24]
 80082d2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 80082d4:	69bb      	ldr	r3, [r7, #24]
 80082d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082dc:	d112      	bne.n	8008304 <xQueueGiveFromISR+0x70>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082de:	69bb      	ldr	r3, [r7, #24]
 80082e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d013      	beq.n	800830e <xQueueGiveFromISR+0x7a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082e6:	69bb      	ldr	r3, [r7, #24]
 80082e8:	3324      	adds	r3, #36	; 0x24
 80082ea:	4618      	mov	r0, r3
 80082ec:	f7fe ffc8 	bl	8007280 <xTaskRemoveFromEventList>
 80082f0:	4603      	mov	r3, r0
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d00b      	beq.n	800830e <xQueueGiveFromISR+0x7a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d008      	beq.n	800830e <xQueueGiveFromISR+0x7a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	2201      	movs	r2, #1
 8008300:	601a      	str	r2, [r3, #0]
 8008302:	e004      	b.n	800830e <xQueueGiveFromISR+0x7a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 8008304:	69bb      	ldr	r3, [r7, #24]
 8008306:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008308:	1c5a      	adds	r2, r3, #1
 800830a:	69bb      	ldr	r3, [r7, #24]
 800830c:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
 800830e:	2301      	movs	r3, #1
 8008310:	61fb      	str	r3, [r7, #28]
 8008312:	e001      	b.n	8008318 <xQueueGiveFromISR+0x84>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008314:	2300      	movs	r3, #0
 8008316:	61fb      	str	r3, [r7, #28]
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008322:	69fb      	ldr	r3, [r7, #28]
}
 8008324:	4618      	mov	r0, r3
 8008326:	3720      	adds	r7, #32
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b08a      	sub	sp, #40	; 0x28
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	607a      	str	r2, [r7, #4]
 8008338:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800833a:	2300      	movs	r3, #0
 800833c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	623b      	str	r3, [r7, #32]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008342:	f000 fc23 	bl	8008b8c <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008346:	6a3b      	ldr	r3, [r7, #32]
 8008348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800834a:	2b00      	cmp	r3, #0
 800834c:	d047      	beq.n	80083de <xQueueGenericReceive+0xb2>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800834e:	6a3b      	ldr	r3, [r7, #32]
 8008350:	68db      	ldr	r3, [r3, #12]
 8008352:	61fb      	str	r3, [r7, #28]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008354:	6a38      	ldr	r0, [r7, #32]
 8008356:	68b9      	ldr	r1, [r7, #8]
 8008358:	f000 f9e4 	bl	8008724 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d122      	bne.n	80083a8 <xQueueGenericReceive+0x7c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
 8008362:	6a3b      	ldr	r3, [r7, #32]
 8008364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008366:	1e5a      	subs	r2, r3, #1
 8008368:	6a3b      	ldr	r3, [r7, #32]
 800836a:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800836c:	6a3b      	ldr	r3, [r7, #32]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d104      	bne.n	800837e <xQueueGenericReceive+0x52>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8008374:	f7ff fb2c 	bl	80079d0 <pvTaskIncrementMutexHeldCount>
 8008378:	4602      	mov	r2, r0
 800837a:	6a3b      	ldr	r3, [r7, #32]
 800837c:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800837e:	6a3b      	ldr	r3, [r7, #32]
 8008380:	691b      	ldr	r3, [r3, #16]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d027      	beq.n	80083d6 <xQueueGenericReceive+0xaa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8008386:	6a3b      	ldr	r3, [r7, #32]
 8008388:	3310      	adds	r3, #16
 800838a:	4618      	mov	r0, r3
 800838c:	f7fe ff78 	bl	8007280 <xTaskRemoveFromEventList>
 8008390:	4603      	mov	r3, r0
 8008392:	2b01      	cmp	r3, #1
 8008394:	d11f      	bne.n	80083d6 <xQueueGenericReceive+0xaa>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8008396:	4b4a      	ldr	r3, [pc, #296]	; (80084c0 <xQueueGenericReceive+0x194>)
 8008398:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800839c:	601a      	str	r2, [r3, #0]
 800839e:	f3bf 8f4f 	dsb	sy
 80083a2:	f3bf 8f6f 	isb	sy
 80083a6:	e016      	b.n	80083d6 <xQueueGenericReceive+0xaa>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 80083a8:	6a3b      	ldr	r3, [r7, #32]
 80083aa:	69fa      	ldr	r2, [r7, #28]
 80083ac:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083ae:	6a3b      	ldr	r3, [r7, #32]
 80083b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d00f      	beq.n	80083d6 <xQueueGenericReceive+0xaa>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083b6:	6a3b      	ldr	r3, [r7, #32]
 80083b8:	3324      	adds	r3, #36	; 0x24
 80083ba:	4618      	mov	r0, r3
 80083bc:	f7fe ff60 	bl	8007280 <xTaskRemoveFromEventList>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d007      	beq.n	80083d6 <xQueueGenericReceive+0xaa>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 80083c6:	4b3e      	ldr	r3, [pc, #248]	; (80084c0 <xQueueGenericReceive+0x194>)
 80083c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083cc:	601a      	str	r2, [r3, #0]
 80083ce:	f3bf 8f4f 	dsb	sy
 80083d2:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 80083d6:	f000 fbf1 	bl	8008bbc <vPortExitCritical>
				return pdPASS;
 80083da:	2301      	movs	r3, #1
 80083dc:	e06c      	b.n	80084b8 <xQueueGenericReceive+0x18c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d103      	bne.n	80083ec <xQueueGenericReceive+0xc0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80083e4:	f000 fbea 	bl	8008bbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80083e8:	2300      	movs	r3, #0
 80083ea:	e065      	b.n	80084b8 <xQueueGenericReceive+0x18c>
				}
				else if( xEntryTimeSet == pdFALSE )
 80083ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d106      	bne.n	8008400 <xQueueGenericReceive+0xd4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80083f2:	f107 0314 	add.w	r3, r7, #20
 80083f6:	4618      	mov	r0, r3
 80083f8:	f7fe ffde 	bl	80073b8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80083fc:	2301      	movs	r3, #1
 80083fe:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008400:	f000 fbdc 	bl	8008bbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008404:	f7fe fca8 	bl	8006d58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008408:	f000 fbc0 	bl	8008b8c <vPortEnterCritical>
 800840c:	6a3b      	ldr	r3, [r7, #32]
 800840e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008414:	d102      	bne.n	800841c <xQueueGenericReceive+0xf0>
 8008416:	6a3b      	ldr	r3, [r7, #32]
 8008418:	2200      	movs	r2, #0
 800841a:	645a      	str	r2, [r3, #68]	; 0x44
 800841c:	6a3b      	ldr	r3, [r7, #32]
 800841e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008424:	d102      	bne.n	800842c <xQueueGenericReceive+0x100>
 8008426:	6a3b      	ldr	r3, [r7, #32]
 8008428:	2200      	movs	r2, #0
 800842a:	649a      	str	r2, [r3, #72]	; 0x48
 800842c:	f000 fbc6 	bl	8008bbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008430:	f107 0214 	add.w	r2, r7, #20
 8008434:	1d3b      	adds	r3, r7, #4
 8008436:	4610      	mov	r0, r2
 8008438:	4619      	mov	r1, r3
 800843a:	f7fe ffd3 	bl	80073e4 <xTaskCheckForTimeOut>
 800843e:	4603      	mov	r3, r0
 8008440:	2b00      	cmp	r3, #0
 8008442:	d131      	bne.n	80084a8 <xQueueGenericReceive+0x17c>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008444:	6a38      	ldr	r0, [r7, #32]
 8008446:	f000 f9df 	bl	8008808 <prvIsQueueEmpty>
 800844a:	4603      	mov	r3, r0
 800844c:	2b00      	cmp	r3, #0
 800844e:	d025      	beq.n	800849c <xQueueGenericReceive+0x170>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008450:	6a3b      	ldr	r3, [r7, #32]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d108      	bne.n	800846a <xQueueGenericReceive+0x13e>
					{
						taskENTER_CRITICAL();
 8008458:	f000 fb98 	bl	8008b8c <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800845c:	6a3b      	ldr	r3, [r7, #32]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	4618      	mov	r0, r3
 8008462:	f7ff f9c3 	bl	80077ec <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8008466:	f000 fba9 	bl	8008bbc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800846a:	6a3b      	ldr	r3, [r7, #32]
 800846c:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4610      	mov	r0, r2
 8008474:	4619      	mov	r1, r3
 8008476:	f7fe fe49 	bl	800710c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800847a:	6a38      	ldr	r0, [r7, #32]
 800847c:	f000 f978 	bl	8008770 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008480:	f7fe fc78 	bl	8006d74 <xTaskResumeAll>
 8008484:	4603      	mov	r3, r0
 8008486:	2b00      	cmp	r3, #0
 8008488:	d115      	bne.n	80084b6 <xQueueGenericReceive+0x18a>
				{
					portYIELD_WITHIN_API();
 800848a:	4b0d      	ldr	r3, [pc, #52]	; (80084c0 <xQueueGenericReceive+0x194>)
 800848c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008490:	601a      	str	r2, [r3, #0]
 8008492:	f3bf 8f4f 	dsb	sy
 8008496:	f3bf 8f6f 	isb	sy
 800849a:	e00c      	b.n	80084b6 <xQueueGenericReceive+0x18a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800849c:	6a38      	ldr	r0, [r7, #32]
 800849e:	f000 f967 	bl	8008770 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80084a2:	f7fe fc67 	bl	8006d74 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 80084a6:	e74c      	b.n	8008342 <xQueueGenericReceive+0x16>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 80084a8:	6a38      	ldr	r0, [r7, #32]
 80084aa:	f000 f961 	bl	8008770 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80084ae:	f7fe fc61 	bl	8006d74 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 80084b2:	2300      	movs	r3, #0
 80084b4:	e000      	b.n	80084b8 <xQueueGenericReceive+0x18c>
		}
	}
 80084b6:	e744      	b.n	8008342 <xQueueGenericReceive+0x16>
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3728      	adds	r7, #40	; 0x28
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}
 80084c0:	e000ed04 	.word	0xe000ed04

080084c4 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b08a      	sub	sp, #40	; 0x28
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	60b9      	str	r1, [r7, #8]
 80084ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	623b      	str	r3, [r7, #32]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80084d4:	f3ef 8211 	mrs	r2, BASEPRI
 80084d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084dc:	f383 8811 	msr	BASEPRI, r3
 80084e0:	f3bf 8f6f 	isb	sy
 80084e4:	f3bf 8f4f 	dsb	sy
 80084e8:	61ba      	str	r2, [r7, #24]
 80084ea:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80084ec:	69bb      	ldr	r3, [r7, #24]
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80084ee:	61fb      	str	r3, [r7, #28]
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 80084f0:	6a3b      	ldr	r3, [r7, #32]
 80084f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d028      	beq.n	800854a <xQueueReceiveFromISR+0x86>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80084f8:	6a38      	ldr	r0, [r7, #32]
 80084fa:	68b9      	ldr	r1, [r7, #8]
 80084fc:	f000 f912 	bl	8008724 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 8008500:	6a3b      	ldr	r3, [r7, #32]
 8008502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008504:	1e5a      	subs	r2, r3, #1
 8008506:	6a3b      	ldr	r3, [r7, #32]
 8008508:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
 800850a:	6a3b      	ldr	r3, [r7, #32]
 800850c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800850e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008512:	d112      	bne.n	800853a <xQueueReceiveFromISR+0x76>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008514:	6a3b      	ldr	r3, [r7, #32]
 8008516:	691b      	ldr	r3, [r3, #16]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d013      	beq.n	8008544 <xQueueReceiveFromISR+0x80>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800851c:	6a3b      	ldr	r3, [r7, #32]
 800851e:	3310      	adds	r3, #16
 8008520:	4618      	mov	r0, r3
 8008522:	f7fe fead 	bl	8007280 <xTaskRemoveFromEventList>
 8008526:	4603      	mov	r3, r0
 8008528:	2b00      	cmp	r3, #0
 800852a:	d00b      	beq.n	8008544 <xQueueReceiveFromISR+0x80>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d008      	beq.n	8008544 <xQueueReceiveFromISR+0x80>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2201      	movs	r2, #1
 8008536:	601a      	str	r2, [r3, #0]
 8008538:	e004      	b.n	8008544 <xQueueReceiveFromISR+0x80>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
 800853a:	6a3b      	ldr	r3, [r7, #32]
 800853c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800853e:	1c5a      	adds	r2, r3, #1
 8008540:	6a3b      	ldr	r3, [r7, #32]
 8008542:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008544:	2301      	movs	r3, #1
 8008546:	627b      	str	r3, [r7, #36]	; 0x24
 8008548:	e001      	b.n	800854e <xQueueReceiveFromISR+0x8a>
		}
		else
		{
			xReturn = pdFAIL;
 800854a:	2300      	movs	r3, #0
 800854c:	627b      	str	r3, [r7, #36]	; 0x24
 800854e:	69fb      	ldr	r3, [r7, #28]
 8008550:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800855a:	4618      	mov	r0, r3
 800855c:	3728      	adds	r7, #40	; 0x28
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}
 8008562:	bf00      	nop

08008564 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b08a      	sub	sp, #40	; 0x28
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	623b      	str	r3, [r7, #32]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008572:	f3ef 8211 	mrs	r2, BASEPRI
 8008576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800857a:	f383 8811 	msr	BASEPRI, r3
 800857e:	f3bf 8f6f 	isb	sy
 8008582:	f3bf 8f4f 	dsb	sy
 8008586:	617a      	str	r2, [r7, #20]
 8008588:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800858a:	697b      	ldr	r3, [r7, #20]
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800858c:	61fb      	str	r3, [r7, #28]
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800858e:	6a3b      	ldr	r3, [r7, #32]
 8008590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008592:	2b00      	cmp	r3, #0
 8008594:	d00c      	beq.n	80085b0 <xQueuePeekFromISR+0x4c>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8008596:	6a3b      	ldr	r3, [r7, #32]
 8008598:	68db      	ldr	r3, [r3, #12]
 800859a:	61bb      	str	r3, [r7, #24]
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800859c:	6a38      	ldr	r0, [r7, #32]
 800859e:	6839      	ldr	r1, [r7, #0]
 80085a0:	f000 f8c0 	bl	8008724 <prvCopyDataFromQueue>
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 80085a4:	6a3b      	ldr	r3, [r7, #32]
 80085a6:	69ba      	ldr	r2, [r7, #24]
 80085a8:	60da      	str	r2, [r3, #12]

			xReturn = pdPASS;
 80085aa:	2301      	movs	r3, #1
 80085ac:	627b      	str	r3, [r7, #36]	; 0x24
 80085ae:	e001      	b.n	80085b4 <xQueuePeekFromISR+0x50>
		}
		else
		{
			xReturn = pdFAIL;
 80085b0:	2300      	movs	r3, #0
 80085b2:	627b      	str	r3, [r7, #36]	; 0x24
 80085b4:	69fb      	ldr	r3, [r7, #28]
 80085b6:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80085be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3728      	adds	r7, #40	; 0x28
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b084      	sub	sp, #16
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
 80085d0:	f000 fadc 	bl	8008b8c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085d8:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80085da:	f000 faef 	bl	8008bbc <vPortExitCritical>

	return uxReturn;
 80085de:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80085e0:	4618      	mov	r0, r3
 80085e2:	3710      	adds	r7, #16
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	60fb      	str	r3, [r7, #12]
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 80085f4:	f000 faca 	bl	8008b8c <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008600:	1ad3      	subs	r3, r2, r3
 8008602:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
 8008604:	f000 fada 	bl	8008bbc <vPortExitCritical>

	return uxReturn;
 8008608:	68bb      	ldr	r3, [r7, #8]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800860a:	4618      	mov	r0, r3
 800860c:	3710      	adds	r7, #16
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
 8008612:	bf00      	nop

08008614 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8008614:	b480      	push	{r7}
 8008616:	b085      	sub	sp, #20
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008620:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 8008622:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008624:	4618      	mov	r0, r3
 8008626:	3714      	adds	r7, #20
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr

08008630 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	60fb      	str	r3, [r7, #12]
	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
	}
	#endif
	vPortFree( pxQueue );
 800863c:	68f8      	ldr	r0, [r7, #12]
 800863e:	f000 fbdd 	bl	8008dfc <vPortFree>
}
 8008642:	3710      	adds	r7, #16
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b086      	sub	sp, #24
 800864c:	af00      	add	r7, sp, #0
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	60b9      	str	r1, [r7, #8]
 8008652:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008654:	2300      	movs	r3, #0
 8008656:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800865c:	2b00      	cmp	r3, #0
 800865e:	d10d      	bne.n	800867c <prvCopyDataToQueue+0x34>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d152      	bne.n	800870e <prvCopyDataToQueue+0xc6>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	4618      	mov	r0, r3
 800866e:	f7ff f933 	bl	80078d8 <xTaskPriorityDisinherit>
 8008672:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2200      	movs	r2, #0
 8008678:	605a      	str	r2, [r3, #4]
 800867a:	e048      	b.n	800870e <prvCopyDataToQueue+0xc6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d11a      	bne.n	80086b8 <prvCopyDataToQueue+0x70>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	689a      	ldr	r2, [r3, #8]
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800868a:	4610      	mov	r0, r2
 800868c:	68b9      	ldr	r1, [r7, #8]
 800868e:	461a      	mov	r2, r3
 8008690:	f000 fd27 	bl	80090e2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	689a      	ldr	r2, [r3, #8]
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800869c:	441a      	add	r2, r3
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	689a      	ldr	r2, [r3, #8]
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d32f      	bcc.n	800870e <prvCopyDataToQueue+0xc6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	609a      	str	r2, [r3, #8]
 80086b6:	e02a      	b.n	800870e <prvCopyDataToQueue+0xc6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	68da      	ldr	r2, [r3, #12]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c0:	4610      	mov	r0, r2
 80086c2:	68b9      	ldr	r1, [r7, #8]
 80086c4:	461a      	mov	r2, r3
 80086c6:	f000 fd0c 	bl	80090e2 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	68da      	ldr	r2, [r3, #12]
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d2:	425b      	negs	r3, r3
 80086d4:	441a      	add	r2, r3
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	68da      	ldr	r2, [r3, #12]
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d207      	bcs.n	80086f6 <prvCopyDataToQueue+0xae>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	685a      	ldr	r2, [r3, #4]
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ee:	425b      	negs	r3, r3
 80086f0:	441a      	add	r2, r3
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2b02      	cmp	r3, #2
 80086fa:	d108      	bne.n	800870e <prvCopyDataToQueue+0xc6>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008700:	2b00      	cmp	r3, #0
 8008702:	d004      	beq.n	800870e <prvCopyDataToQueue+0xc6>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008708:	1e5a      	subs	r2, r3, #1
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	639a      	str	r2, [r3, #56]	; 0x38
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008712:	1c5a      	adds	r2, r3, #1
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008718:	697b      	ldr	r3, [r7, #20]
}
 800871a:	4618      	mov	r0, r3
 800871c:	3718      	adds	r7, #24
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
 8008722:	bf00      	nop

08008724 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008732:	2b00      	cmp	r3, #0
 8008734:	d019      	beq.n	800876a <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	68da      	ldr	r2, [r3, #12]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800873e:	441a      	add	r2, r3
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	68da      	ldr	r2, [r3, #12]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	429a      	cmp	r2, r3
 800874e:	d303      	bcc.n	8008758 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681a      	ldr	r2, [r3, #0]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	68da      	ldr	r2, [r3, #12]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008760:	6838      	ldr	r0, [r7, #0]
 8008762:	4611      	mov	r1, r2
 8008764:	461a      	mov	r2, r3
 8008766:	f000 fcbc 	bl	80090e2 <memcpy>
	}
}
 800876a:	3708      	adds	r7, #8
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008778:	f000 fa08 	bl	8008b8c <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800877c:	e014      	b.n	80087a8 <prvUnlockQueue+0x38>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008782:	2b00      	cmp	r3, #0
 8008784:	d00a      	beq.n	800879c <prvUnlockQueue+0x2c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	3324      	adds	r3, #36	; 0x24
 800878a:	4618      	mov	r0, r3
 800878c:	f7fe fd78 	bl	8007280 <xTaskRemoveFromEventList>
 8008790:	4603      	mov	r3, r0
 8008792:	2b00      	cmp	r3, #0
 8008794:	d003      	beq.n	800879e <prvUnlockQueue+0x2e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 8008796:	f7fe fe69 	bl	800746c <vTaskMissedYield>
 800879a:	e000      	b.n	800879e <prvUnlockQueue+0x2e>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
 800879c:	e008      	b.n	80087b0 <prvUnlockQueue+0x40>
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087a2:	1e5a      	subs	r2, r3, #1
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	dce6      	bgt.n	800877e <prvUnlockQueue+0xe>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f04f 32ff 	mov.w	r2, #4294967295
 80087b6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 80087b8:	f000 fa00 	bl	8008bbc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80087bc:	f000 f9e6 	bl	8008b8c <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 80087c0:	e014      	b.n	80087ec <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	691b      	ldr	r3, [r3, #16]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d00f      	beq.n	80087ea <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	3310      	adds	r3, #16
 80087ce:	4618      	mov	r0, r3
 80087d0:	f7fe fd56 	bl	8007280 <xTaskRemoveFromEventList>
 80087d4:	4603      	mov	r3, r0
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d001      	beq.n	80087de <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
 80087da:	f7fe fe47 	bl	800746c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087e2:	1e5a      	subs	r2, r3, #1
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	645a      	str	r2, [r3, #68]	; 0x44
 80087e8:	e000      	b.n	80087ec <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
 80087ea:	e003      	b.n	80087f4 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	dce6      	bgt.n	80087c2 <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f04f 32ff 	mov.w	r2, #4294967295
 80087fa:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80087fc:	f000 f9de 	bl	8008bbc <vPortExitCritical>
}
 8008800:	3708      	adds	r7, #8
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop

08008808 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b084      	sub	sp, #16
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008810:	f000 f9bc 	bl	8008b8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008818:	2b00      	cmp	r3, #0
 800881a:	d102      	bne.n	8008822 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800881c:	2301      	movs	r3, #1
 800881e:	60fb      	str	r3, [r7, #12]
 8008820:	e001      	b.n	8008826 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008822:	2300      	movs	r3, #0
 8008824:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008826:	f000 f9c9 	bl	8008bbc <vPortExitCritical>

	return xReturn;
 800882a:	68fb      	ldr	r3, [r7, #12]
}
 800882c:	4618      	mov	r0, r3
 800882e:	3710      	adds	r7, #16
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}

08008834 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
 8008834:	b480      	push	{r7}
 8008836:	b085      	sub	sp, #20
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008840:	2b00      	cmp	r3, #0
 8008842:	d102      	bne.n	800884a <xQueueIsQueueEmptyFromISR+0x16>
	{
		xReturn = pdTRUE;
 8008844:	2301      	movs	r3, #1
 8008846:	60fb      	str	r3, [r7, #12]
 8008848:	e001      	b.n	800884e <xQueueIsQueueEmptyFromISR+0x1a>
	}
	else
	{
		xReturn = pdFALSE;
 800884a:	2300      	movs	r3, #0
 800884c:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800884e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008850:	4618      	mov	r0, r3
 8008852:	3714      	adds	r7, #20
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr

0800885c <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b084      	sub	sp, #16
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008864:	f000 f992 	bl	8008b8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008870:	429a      	cmp	r2, r3
 8008872:	d102      	bne.n	800887a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008874:	2301      	movs	r3, #1
 8008876:	60fb      	str	r3, [r7, #12]
 8008878:	e001      	b.n	800887e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800887a:	2300      	movs	r3, #0
 800887c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800887e:	f000 f99d 	bl	8008bbc <vPortExitCritical>

	return xReturn;
 8008882:	68fb      	ldr	r3, [r7, #12]
}
 8008884:	4618      	mov	r0, r3
 8008886:	3710      	adds	r7, #16
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 800888c:	b480      	push	{r7}
 800888e:	b085      	sub	sp, #20
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800889c:	429a      	cmp	r2, r3
 800889e:	d102      	bne.n	80088a6 <xQueueIsQueueFullFromISR+0x1a>
	{
		xReturn = pdTRUE;
 80088a0:	2301      	movs	r3, #1
 80088a2:	60fb      	str	r3, [r7, #12]
 80088a4:	e001      	b.n	80088aa <xQueueIsQueueFullFromISR+0x1e>
	}
	else
	{
		xReturn = pdFALSE;
 80088a6:	2300      	movs	r3, #0
 80088a8:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 80088aa:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80088ac:	4618      	mov	r0, r3
 80088ae:	3714      	adds	r7, #20
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	6039      	str	r1, [r7, #0]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	60fb      	str	r3, [r7, #12]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80088c6:	f000 f961 	bl	8008b8c <vPortEnterCritical>
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088d2:	d102      	bne.n	80088da <vQueueWaitForMessageRestricted+0x22>
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2200      	movs	r2, #0
 80088d8:	645a      	str	r2, [r3, #68]	; 0x44
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088e2:	d102      	bne.n	80088ea <vQueueWaitForMessageRestricted+0x32>
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2200      	movs	r2, #0
 80088e8:	649a      	str	r2, [r3, #72]	; 0x48
 80088ea:	f000 f967 	bl	8008bbc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d105      	bne.n	8008902 <vQueueWaitForMessageRestricted+0x4a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	3324      	adds	r3, #36	; 0x24
 80088fa:	4618      	mov	r0, r3
 80088fc:	6839      	ldr	r1, [r7, #0]
 80088fe:	f7fe fc8d 	bl	800721c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008902:	68f8      	ldr	r0, [r7, #12]
 8008904:	f7ff ff34 	bl	8008770 <prvUnlockQueue>
	}
 8008908:	3710      	adds	r7, #16
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
 800890e:	bf00      	nop

08008910 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008910:	b480      	push	{r7}
 8008912:	b083      	sub	sp, #12
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f103 0208 	add.w	r2, r3, #8
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f04f 32ff 	mov.w	r2, #4294967295
 8008928:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f103 0208 	add.w	r2, r3, #8
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f103 0208 	add.w	r2, r3, #8
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008944:	370c      	adds	r7, #12
 8008946:	46bd      	mov	sp, r7
 8008948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894c:	4770      	bx	lr
 800894e:	bf00      	nop

08008950 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008950:	b480      	push	{r7}
 8008952:	b083      	sub	sp, #12
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2200      	movs	r2, #0
 800895c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800895e:	370c      	adds	r7, #12
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008968:	b480      	push	{r7}
 800896a:	b085      	sub	sp, #20
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	68fa      	ldr	r2, [r7, #12]
 800897c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	689a      	ldr	r2, [r3, #8]
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	609a      	str	r2, [r3, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	683a      	ldr	r2, [r7, #0]
 800898c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	683a      	ldr	r2, [r7, #0]
 8008992:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	1c5a      	adds	r2, r3, #1
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	601a      	str	r2, [r3, #0]
}
 80089a4:	3714      	adds	r7, #20
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr
 80089ae:	bf00      	nop

080089b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80089b0:	b480      	push	{r7}
 80089b2:	b085      	sub	sp, #20
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089c6:	d103      	bne.n	80089d0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	691b      	ldr	r3, [r3, #16]
 80089cc:	60fb      	str	r3, [r7, #12]
 80089ce:	e00c      	b.n	80089ea <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	3308      	adds	r3, #8
 80089d4:	60fb      	str	r3, [r7, #12]
 80089d6:	e002      	b.n	80089de <vListInsert+0x2e>
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	60fb      	str	r3, [r7, #12]
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	681a      	ldr	r2, [r3, #0]
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d9f6      	bls.n	80089d8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	685a      	ldr	r2, [r3, #4]
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	683a      	ldr	r2, [r7, #0]
 80089f8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	68fa      	ldr	r2, [r7, #12]
 80089fe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	683a      	ldr	r2, [r7, #0]
 8008a04:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	1c5a      	adds	r2, r3, #1
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	601a      	str	r2, [r3, #0]
}
 8008a16:	3714      	adds	r7, #20
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr

08008a20 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008a20:	b480      	push	{r7}
 8008a22:	b085      	sub	sp, #20
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	691b      	ldr	r3, [r3, #16]
 8008a2c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	6892      	ldr	r2, [r2, #8]
 8008a36:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	6852      	ldr	r2, [r2, #4]
 8008a40:	605a      	str	r2, [r3, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	685a      	ldr	r2, [r3, #4]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d103      	bne.n	8008a54 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	689a      	ldr	r2, [r3, #8]
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2200      	movs	r2, #0
 8008a58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	1e5a      	subs	r2, r3, #1
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3714      	adds	r7, #20
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr

08008a74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008a74:	b480      	push	{r7}
 8008a76:	b085      	sub	sp, #20
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	60f8      	str	r0, [r7, #12]
 8008a7c:	60b9      	str	r1, [r7, #8]
 8008a7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	3b04      	subs	r3, #4
 8008a84:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008a8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	3b04      	subs	r3, #4
 8008a92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8008a94:	68ba      	ldr	r2, [r7, #8]
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	3b04      	subs	r3, #4
 8008a9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008aa0:	4a0c      	ldr	r2, [pc, #48]	; (8008ad4 <pxPortInitialiseStack+0x60>)
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	3b14      	subs	r3, #20
 8008aaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	3b04      	subs	r3, #4
 8008ab6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f06f 0202 	mvn.w	r2, #2
 8008abe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	3b20      	subs	r3, #32
 8008ac4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3714      	adds	r7, #20
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr
 8008ad4:	08008ad9 	.word	0x08008ad9

08008ad8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b083      	sub	sp, #12
 8008adc:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae2:	f383 8811 	msr	BASEPRI, r3
 8008ae6:	f3bf 8f6f 	isb	sy
 8008aea:	f3bf 8f4f 	dsb	sy
 8008aee:	607b      	str	r3, [r7, #4]

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	for( ;; );
 8008af0:	e7fe      	b.n	8008af0 <prvTaskExitError+0x18>
 8008af2:	bf00      	nop

08008af4 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008af4:	4b06      	ldr	r3, [pc, #24]	; (8008b10 <pxCurrentTCBConst2>)
 8008af6:	6819      	ldr	r1, [r3, #0]
 8008af8:	6808      	ldr	r0, [r1, #0]
 8008afa:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008afe:	f380 8809 	msr	PSP, r0
 8008b02:	f3bf 8f6f 	isb	sy
 8008b06:	f04f 0000 	mov.w	r0, #0
 8008b0a:	f380 8811 	msr	BASEPRI, r0
 8008b0e:	4770      	bx	lr

08008b10 <pxCurrentTCBConst2>:
 8008b10:	200000c4 	.word	0x200000c4

08008b14 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008b14:	486b      	ldr	r0, [pc, #428]	; (8008cc4 <vPortEnableVFP+0x10>)
 8008b16:	6800      	ldr	r0, [r0, #0]
 8008b18:	6800      	ldr	r0, [r0, #0]
 8008b1a:	f380 8808 	msr	MSP, r0
 8008b1e:	b662      	cpsie	i
 8008b20:	b661      	cpsie	f
 8008b22:	f3bf 8f4f 	dsb	sy
 8008b26:	f3bf 8f6f 	isb	sy
 8008b2a:	df00      	svc	0
 8008b2c:	bf00      	nop
 8008b2e:	bf00      	nop

08008b30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008b34:	4b0f      	ldr	r3, [pc, #60]	; (8008b74 <xPortStartScheduler+0x44>)
 8008b36:	4a0f      	ldr	r2, [pc, #60]	; (8008b74 <xPortStartScheduler+0x44>)
 8008b38:	6812      	ldr	r2, [r2, #0]
 8008b3a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8008b3e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008b40:	4b0c      	ldr	r3, [pc, #48]	; (8008b74 <xPortStartScheduler+0x44>)
 8008b42:	4a0c      	ldr	r2, [pc, #48]	; (8008b74 <xPortStartScheduler+0x44>)
 8008b44:	6812      	ldr	r2, [r2, #0]
 8008b46:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8008b4a:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008b4c:	f000 f8a0 	bl	8008c90 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008b50:	4b09      	ldr	r3, [pc, #36]	; (8008b78 <xPortStartScheduler+0x48>)
 8008b52:	2200      	movs	r2, #0
 8008b54:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008b56:	f000 f8ad 	bl	8008cb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008b5a:	4b08      	ldr	r3, [pc, #32]	; (8008b7c <xPortStartScheduler+0x4c>)
 8008b5c:	4a07      	ldr	r2, [pc, #28]	; (8008b7c <xPortStartScheduler+0x4c>)
 8008b5e:	6812      	ldr	r2, [r2, #0]
 8008b60:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8008b64:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008b66:	f7ff ffd5 	bl	8008b14 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8008b6a:	f7ff ffb5 	bl	8008ad8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	bd80      	pop	{r7, pc}
 8008b74:	e000ed20 	.word	0xe000ed20
 8008b78:	20000048 	.word	0x20000048
 8008b7c:	e000ef34 	.word	0xe000ef34

08008b80 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 8008b80:	b480      	push	{r7}
 8008b82:	af00      	add	r7, sp, #0
	/* Not implemented in ports where there is nothing to return to.
	Artificially force an assert. */
	configASSERT( uxCriticalNesting == 1000UL );
}
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr

08008b8c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b083      	sub	sp, #12
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b96:	f383 8811 	msr	BASEPRI, r3
 8008b9a:	f3bf 8f6f 	isb	sy
 8008b9e:	f3bf 8f4f 	dsb	sy
 8008ba2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008ba4:	4b04      	ldr	r3, [pc, #16]	; (8008bb8 <vPortEnterCritical+0x2c>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	1c5a      	adds	r2, r3, #1
 8008baa:	4b03      	ldr	r3, [pc, #12]	; (8008bb8 <vPortEnterCritical+0x2c>)
 8008bac:	601a      	str	r2, [r3, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8008bae:	370c      	adds	r7, #12
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr
 8008bb8:	20000048 	.word	0x20000048

08008bbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b083      	sub	sp, #12
 8008bc0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 8008bc2:	4b09      	ldr	r3, [pc, #36]	; (8008be8 <vPortExitCritical+0x2c>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	1e5a      	subs	r2, r3, #1
 8008bc8:	4b07      	ldr	r3, [pc, #28]	; (8008be8 <vPortExitCritical+0x2c>)
 8008bca:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8008bcc:	4b06      	ldr	r3, [pc, #24]	; (8008be8 <vPortExitCritical+0x2c>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d104      	bne.n	8008bde <vPortExitCritical+0x22>
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008bde:	370c      	adds	r7, #12
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr
 8008be8:	20000048 	.word	0x20000048

08008bec <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008bec:	f3ef 8009 	mrs	r0, PSP
 8008bf0:	f3bf 8f6f 	isb	sy
 8008bf4:	4b14      	ldr	r3, [pc, #80]	; (8008c48 <pxCurrentTCBConst>)
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	f01e 0f10 	tst.w	lr, #16
 8008bfc:	bf08      	it	eq
 8008bfe:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008c02:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c06:	6010      	str	r0, [r2, #0]
 8008c08:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8008c0c:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008c10:	f380 8811 	msr	BASEPRI, r0
 8008c14:	f3bf 8f4f 	dsb	sy
 8008c18:	f3bf 8f6f 	isb	sy
 8008c1c:	f7fe fa0c 	bl	8007038 <vTaskSwitchContext>
 8008c20:	f04f 0000 	mov.w	r0, #0
 8008c24:	f380 8811 	msr	BASEPRI, r0
 8008c28:	bc08      	pop	{r3}
 8008c2a:	6819      	ldr	r1, [r3, #0]
 8008c2c:	6808      	ldr	r0, [r1, #0]
 8008c2e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c32:	f01e 0f10 	tst.w	lr, #16
 8008c36:	bf08      	it	eq
 8008c38:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008c3c:	f380 8809 	msr	PSP, r0
 8008c40:	f3bf 8f6f 	isb	sy
 8008c44:	4770      	bx	lr
 8008c46:	bf00      	nop

08008c48 <pxCurrentTCBConst>:
 8008c48:	200000c4 	.word	0x200000c4

08008c4c <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b084      	sub	sp, #16
 8008c50:	af00      	add	r7, sp, #0

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008c52:	f3ef 8211 	mrs	r2, BASEPRI
 8008c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c5a:	f383 8811 	msr	BASEPRI, r3
 8008c5e:	f3bf 8f6f 	isb	sy
 8008c62:	f3bf 8f4f 	dsb	sy
 8008c66:	60fa      	str	r2, [r7, #12]
 8008c68:	60bb      	str	r3, [r7, #8]
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008c6a:	f7fe f937 	bl	8006edc <xTaskIncrementTick>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d003      	beq.n	8008c7c <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008c74:	4b05      	ldr	r3, [pc, #20]	; (8008c8c <SysTick_Handler+0x40>)
 8008c76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c7a:	601a      	str	r2, [r3, #0]
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
}
 8008c86:	3710      	adds	r7, #16
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}
 8008c8c:	e000ed04 	.word	0xe000ed04

08008c90 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008c90:	b480      	push	{r7}
 8008c92:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008c94:	4b04      	ldr	r3, [pc, #16]	; (8008ca8 <vPortSetupTimerInterrupt+0x18>)
 8008c96:	4a05      	ldr	r2, [pc, #20]	; (8008cac <vPortSetupTimerInterrupt+0x1c>)
 8008c98:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008c9a:	4b05      	ldr	r3, [pc, #20]	; (8008cb0 <vPortSetupTimerInterrupt+0x20>)
 8008c9c:	2207      	movs	r2, #7
 8008c9e:	601a      	str	r2, [r3, #0]
}
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr
 8008ca8:	e000e014 	.word	0xe000e014
 8008cac:	0002903f 	.word	0x0002903f
 8008cb0:	e000e010 	.word	0xe000e010

08008cb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008cb4:	f8df 0010 	ldr.w	r0, [pc, #16]	; 8008cc8 <vPortEnableVFP+0x14>
 8008cb8:	6801      	ldr	r1, [r0, #0]
 8008cba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008cbe:	6001      	str	r1, [r0, #0]
 8008cc0:	4770      	bx	lr
 8008cc2:	0000      	.short	0x0000
 8008cc4:	e000ed08 	.word	0xe000ed08
 8008cc8:	e000ed88 	.word	0xe000ed88

08008ccc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b086      	sub	sp, #24
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8008cd8:	f7fe f83e 	bl	8006d58 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008cdc:	4b42      	ldr	r3, [pc, #264]	; (8008de8 <pvPortMalloc+0x11c>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d101      	bne.n	8008ce8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008ce4:	f000 f8e0 	bl	8008ea8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008ce8:	4b40      	ldr	r3, [pc, #256]	; (8008dec <pvPortMalloc+0x120>)
 8008cea:	681a      	ldr	r2, [r3, #0]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	4013      	ands	r3, r2
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d16d      	bne.n	8008dd0 <pvPortMalloc+0x104>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d00d      	beq.n	8008d16 <pvPortMalloc+0x4a>
			{
				xWantedSize += xHeapStructSize;
 8008cfa:	2308      	movs	r3, #8
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	4413      	add	r3, r2
 8008d00:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f003 0307 	and.w	r3, r3, #7
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d004      	beq.n	8008d16 <pvPortMalloc+0x4a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f023 0307 	bic.w	r3, r3, #7
 8008d12:	3308      	adds	r3, #8
 8008d14:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d059      	beq.n	8008dd0 <pvPortMalloc+0x104>
 8008d1c:	4b34      	ldr	r3, [pc, #208]	; (8008df0 <pvPortMalloc+0x124>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d854      	bhi.n	8008dd0 <pvPortMalloc+0x104>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008d26:	4b33      	ldr	r3, [pc, #204]	; (8008df4 <pvPortMalloc+0x128>)
 8008d28:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8008d2a:	4b32      	ldr	r3, [pc, #200]	; (8008df4 <pvPortMalloc+0x128>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d30:	e004      	b.n	8008d3c <pvPortMalloc+0x70>
				{
					pxPreviousBlock = pxBlock;
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	617b      	str	r3, [r7, #20]
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	685a      	ldr	r2, [r3, #4]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d203      	bcs.n	8008d4e <pvPortMalloc+0x82>
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d1f1      	bne.n	8008d32 <pvPortMalloc+0x66>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008d4e:	4b26      	ldr	r3, [pc, #152]	; (8008de8 <pvPortMalloc+0x11c>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	697a      	ldr	r2, [r7, #20]
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d03b      	beq.n	8008dd0 <pvPortMalloc+0x104>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	2308      	movs	r3, #8
 8008d5e:	4413      	add	r3, r2
 8008d60:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	685a      	ldr	r2, [r3, #4]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	1ad2      	subs	r2, r2, r3
 8008d72:	2308      	movs	r3, #8
 8008d74:	005b      	lsls	r3, r3, #1
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d90f      	bls.n	8008d9a <pvPortMalloc+0xce>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008d7a:	697a      	ldr	r2, [r7, #20]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	4413      	add	r3, r2
 8008d80:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	685a      	ldr	r2, [r3, #4]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	1ad2      	subs	r2, r2, r3
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8008d94:	68b8      	ldr	r0, [r7, #8]
 8008d96:	f000 f8e9 	bl	8008f6c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008d9a:	4b15      	ldr	r3, [pc, #84]	; (8008df0 <pvPortMalloc+0x124>)
 8008d9c:	681a      	ldr	r2, [r3, #0]
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	1ad2      	subs	r2, r2, r3
 8008da4:	4b12      	ldr	r3, [pc, #72]	; (8008df0 <pvPortMalloc+0x124>)
 8008da6:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008da8:	4b11      	ldr	r3, [pc, #68]	; (8008df0 <pvPortMalloc+0x124>)
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	4b12      	ldr	r3, [pc, #72]	; (8008df8 <pvPortMalloc+0x12c>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d203      	bcs.n	8008dbc <pvPortMalloc+0xf0>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008db4:	4b0e      	ldr	r3, [pc, #56]	; (8008df0 <pvPortMalloc+0x124>)
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	4b0f      	ldr	r3, [pc, #60]	; (8008df8 <pvPortMalloc+0x12c>)
 8008dba:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	685a      	ldr	r2, [r3, #4]
 8008dc0:	4b0a      	ldr	r3, [pc, #40]	; (8008dec <pvPortMalloc+0x120>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	431a      	orrs	r2, r3
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008dd0:	f7fd ffd0 	bl	8006d74 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d101      	bne.n	8008dde <pvPortMalloc+0x112>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8008dda:	f7f8 fce9 	bl	80017b0 <vApplicationMallocFailedHook>
		}
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
 8008dde:	68fb      	ldr	r3, [r7, #12]
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3718      	adds	r7, #24
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}
 8008de8:	2001c1c8 	.word	0x2001c1c8
 8008dec:	2001c1d4 	.word	0x2001c1d4
 8008df0:	2001c1cc 	.word	0x2001c1cc
 8008df4:	2001c1c0 	.word	0x2001c1c0
 8008df8:	2001c1d0 	.word	0x2001c1d0

08008dfc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d027      	beq.n	8008e5e <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008e0e:	2308      	movs	r3, #8
 8008e10:	425b      	negs	r3, r3
 8008e12:	68fa      	ldr	r2, [r7, #12]
 8008e14:	4413      	add	r3, r2
 8008e16:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	685a      	ldr	r2, [r3, #4]
 8008e20:	4b10      	ldr	r3, [pc, #64]	; (8008e64 <vPortFree+0x68>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4013      	ands	r3, r2
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d019      	beq.n	8008e5e <vPortFree+0x62>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d115      	bne.n	8008e5e <vPortFree+0x62>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	685a      	ldr	r2, [r3, #4]
 8008e36:	4b0b      	ldr	r3, [pc, #44]	; (8008e64 <vPortFree+0x68>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	43db      	mvns	r3, r3
 8008e3c:	401a      	ands	r2, r3
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008e42:	f7fd ff89 	bl	8006d58 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	685a      	ldr	r2, [r3, #4]
 8008e4a:	4b07      	ldr	r3, [pc, #28]	; (8008e68 <vPortFree+0x6c>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	441a      	add	r2, r3
 8008e50:	4b05      	ldr	r3, [pc, #20]	; (8008e68 <vPortFree+0x6c>)
 8008e52:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008e54:	68b8      	ldr	r0, [r7, #8]
 8008e56:	f000 f889 	bl	8008f6c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008e5a:	f7fd ff8b 	bl	8006d74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008e5e:	3710      	adds	r7, #16
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}
 8008e64:	2001c1d4 	.word	0x2001c1d4
 8008e68:	2001c1cc 	.word	0x2001c1cc

08008e6c <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8008e70:	4b03      	ldr	r3, [pc, #12]	; (8008e80 <xPortGetFreeHeapSize+0x14>)
 8008e72:	681b      	ldr	r3, [r3, #0]
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr
 8008e7e:	bf00      	nop
 8008e80:	2001c1cc 	.word	0x2001c1cc

08008e84 <xPortGetMinimumEverFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
 8008e84:	b480      	push	{r7}
 8008e86:	af00      	add	r7, sp, #0
	return xMinimumEverFreeBytesRemaining;
 8008e88:	4b03      	ldr	r3, [pc, #12]	; (8008e98 <xPortGetMinimumEverFreeHeapSize+0x14>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr
 8008e96:	bf00      	nop
 8008e98:	2001c1d0 	.word	0x2001c1d0

08008e9c <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	af00      	add	r7, sp, #0
	/* This just exists to keep the linker quiet. */
}
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr

08008ea8 <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b085      	sub	sp, #20
 8008eac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
uint32_t ulAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008eae:	f44f 33e0 	mov.w	r3, #114688	; 0x1c000
 8008eb2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	ulAddress = ( uint32_t ) ucHeap;
 8008eb4:	4b27      	ldr	r3, [pc, #156]	; (8008f54 <prvHeapInit+0xac>)
 8008eb6:	60fb      	str	r3, [r7, #12]

	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f003 0307 	and.w	r3, r3, #7
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d00c      	beq.n	8008edc <prvHeapInit+0x34>
	{
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	3307      	adds	r3, #7
 8008ec6:	60fb      	str	r3, [r7, #12]
		ulAddress &= ~portBYTE_ALIGNMENT_MASK;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f023 0307 	bic.w	r3, r3, #7
 8008ece:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
 8008ed0:	68ba      	ldr	r2, [r7, #8]
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	1ad2      	subs	r2, r2, r3
 8008ed6:	4b1f      	ldr	r3, [pc, #124]	; (8008f54 <prvHeapInit+0xac>)
 8008ed8:	4413      	add	r3, r2
 8008eda:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) ulAddress;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008ee0:	4b1d      	ldr	r3, [pc, #116]	; (8008f58 <prvHeapInit+0xb0>)
 8008ee2:	687a      	ldr	r2, [r7, #4]
 8008ee4:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008ee6:	4b1c      	ldr	r3, [pc, #112]	; (8008f58 <prvHeapInit+0xb0>)
 8008ee8:	2200      	movs	r2, #0
 8008eea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008eec:	687a      	ldr	r2, [r7, #4]
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	4413      	add	r3, r2
 8008ef2:	60fb      	str	r3, [r7, #12]
	ulAddress -= xHeapStructSize;
 8008ef4:	2308      	movs	r3, #8
 8008ef6:	68fa      	ldr	r2, [r7, #12]
 8008ef8:	1ad3      	subs	r3, r2, r3
 8008efa:	60fb      	str	r3, [r7, #12]
	ulAddress &= ~portBYTE_ALIGNMENT_MASK;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f023 0307 	bic.w	r3, r3, #7
 8008f02:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) ulAddress;
 8008f04:	68fa      	ldr	r2, [r7, #12]
 8008f06:	4b15      	ldr	r3, [pc, #84]	; (8008f5c <prvHeapInit+0xb4>)
 8008f08:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8008f0a:	4b14      	ldr	r3, [pc, #80]	; (8008f5c <prvHeapInit+0xb4>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008f12:	4b12      	ldr	r3, [pc, #72]	; (8008f5c <prvHeapInit+0xb4>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	2200      	movs	r2, #0
 8008f18:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	68fa      	ldr	r2, [r7, #12]
 8008f22:	1ad2      	subs	r2, r2, r3
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008f28:	4b0c      	ldr	r3, [pc, #48]	; (8008f5c <prvHeapInit+0xb4>)
 8008f2a:	681a      	ldr	r2, [r3, #0]
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	685a      	ldr	r2, [r3, #4]
 8008f34:	4b0a      	ldr	r3, [pc, #40]	; (8008f60 <prvHeapInit+0xb8>)
 8008f36:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	685a      	ldr	r2, [r3, #4]
 8008f3c:	4b09      	ldr	r3, [pc, #36]	; (8008f64 <prvHeapInit+0xbc>)
 8008f3e:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008f40:	4b09      	ldr	r3, [pc, #36]	; (8008f68 <prvHeapInit+0xc0>)
 8008f42:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008f46:	601a      	str	r2, [r3, #0]
}
 8008f48:	3714      	adds	r7, #20
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f50:	4770      	bx	lr
 8008f52:	bf00      	nop
 8008f54:	200001c0 	.word	0x200001c0
 8008f58:	2001c1c0 	.word	0x2001c1c0
 8008f5c:	2001c1c8 	.word	0x2001c1c8
 8008f60:	2001c1d0 	.word	0x2001c1d0
 8008f64:	2001c1cc 	.word	0x2001c1cc
 8008f68:	2001c1d4 	.word	0x2001c1d4

08008f6c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b085      	sub	sp, #20
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008f74:	4b27      	ldr	r3, [pc, #156]	; (8009014 <prvInsertBlockIntoFreeList+0xa8>)
 8008f76:	60fb      	str	r3, [r7, #12]
 8008f78:	e002      	b.n	8008f80 <prvInsertBlockIntoFreeList+0x14>
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	60fb      	str	r3, [r7, #12]
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681a      	ldr	r2, [r3, #0]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d3f7      	bcc.n	8008f7a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	68ba      	ldr	r2, [r7, #8]
 8008f94:	441a      	add	r2, r3
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d108      	bne.n	8008fae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	685a      	ldr	r2, [r3, #4]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	441a      	add	r2, r3
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	68ba      	ldr	r2, [r7, #8]
 8008fb8:	441a      	add	r2, r3
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d118      	bne.n	8008ff4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681a      	ldr	r2, [r3, #0]
 8008fc6:	4b14      	ldr	r3, [pc, #80]	; (8009018 <prvInsertBlockIntoFreeList+0xac>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d00d      	beq.n	8008fea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	685a      	ldr	r2, [r3, #4]
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	441a      	add	r2, r3
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	681a      	ldr	r2, [r3, #0]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	601a      	str	r2, [r3, #0]
 8008fe8:	e008      	b.n	8008ffc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008fea:	4b0b      	ldr	r3, [pc, #44]	; (8009018 <prvInsertBlockIntoFreeList+0xac>)
 8008fec:	681a      	ldr	r2, [r3, #0]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	601a      	str	r2, [r3, #0]
 8008ff2:	e003      	b.n	8008ffc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681a      	ldr	r2, [r3, #0]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008ffc:	68fa      	ldr	r2, [r7, #12]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	429a      	cmp	r2, r3
 8009002:	d002      	beq.n	800900a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	687a      	ldr	r2, [r7, #4]
 8009008:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800900a:	3714      	adds	r7, #20
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr
 8009014:	2001c1c0 	.word	0x2001c1c0
 8009018:	2001c1c8 	.word	0x2001c1c8

0800901c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800901c:	f8df d03c 	ldr.w	sp, [pc, #60]	; 800905c <LoopFillZerobss+0x16>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009020:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009022:	f000 b804 	b.w	800902e <LoopCopyDataInit>

08009026 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009026:	4b0e      	ldr	r3, [pc, #56]	; (8009060 <LoopFillZerobss+0x1a>)
  ldr  r3, [r3, r1]
 8009028:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800902a:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800902c:	3104      	adds	r1, #4

0800902e <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800902e:	480d      	ldr	r0, [pc, #52]	; (8009064 <LoopFillZerobss+0x1e>)
  ldr  r3, =_edata
 8009030:	4b0d      	ldr	r3, [pc, #52]	; (8009068 <LoopFillZerobss+0x22>)
  adds  r2, r0, r1
 8009032:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009034:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009036:	f4ff aff6 	bcc.w	8009026 <CopyDataInit>
  ldr  r2, =_sbss
 800903a:	4a0c      	ldr	r2, [pc, #48]	; (800906c <LoopFillZerobss+0x26>)
  b  LoopFillZerobss
 800903c:	f000 b803 	b.w	8009046 <LoopFillZerobss>

08009040 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009040:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009042:	f842 3b04 	str.w	r3, [r2], #4

08009046 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009046:	4b0a      	ldr	r3, [pc, #40]	; (8009070 <LoopFillZerobss+0x2a>)
  cmp  r2, r3
 8009048:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800904a:	f4ff aff9 	bcc.w	8009040 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800904e:	f7f7 fa57 	bl	8000500 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009052:	f000 f811 	bl	8009078 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009056:	f7f8 f9a3 	bl	80013a0 <main>
  bx  lr    
 800905a:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800905c:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8009060:	080091b0 	.word	0x080091b0
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009064:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009068:	2000004c 	.word	0x2000004c
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 800906c:	2000004c 	.word	0x2000004c
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009070:	2001c268 	.word	0x2001c268

08009074 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009074:	f7ff bffe 	b.w	8009074 <ADC_IRQHandler>

08009078 <__libc_init_array>:
 8009078:	b570      	push	{r4, r5, r6, lr}
 800907a:	4b0e      	ldr	r3, [pc, #56]	; (80090b4 <__libc_init_array+0x3c>)
 800907c:	4d0e      	ldr	r5, [pc, #56]	; (80090b8 <__libc_init_array+0x40>)
 800907e:	1aed      	subs	r5, r5, r3
 8009080:	10ad      	asrs	r5, r5, #2
 8009082:	2400      	movs	r4, #0
 8009084:	461e      	mov	r6, r3
 8009086:	42ac      	cmp	r4, r5
 8009088:	d004      	beq.n	8009094 <__libc_init_array+0x1c>
 800908a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800908e:	4790      	blx	r2
 8009090:	3401      	adds	r4, #1
 8009092:	e7f8      	b.n	8009086 <__libc_init_array+0xe>
 8009094:	f000 f836 	bl	8009104 <_init>
 8009098:	4d08      	ldr	r5, [pc, #32]	; (80090bc <__libc_init_array+0x44>)
 800909a:	4b09      	ldr	r3, [pc, #36]	; (80090c0 <__libc_init_array+0x48>)
 800909c:	1aed      	subs	r5, r5, r3
 800909e:	10ad      	asrs	r5, r5, #2
 80090a0:	2400      	movs	r4, #0
 80090a2:	461e      	mov	r6, r3
 80090a4:	42ac      	cmp	r4, r5
 80090a6:	d004      	beq.n	80090b2 <__libc_init_array+0x3a>
 80090a8:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80090ac:	4790      	blx	r2
 80090ae:	3401      	adds	r4, #1
 80090b0:	e7f8      	b.n	80090a4 <__libc_init_array+0x2c>
 80090b2:	bd70      	pop	{r4, r5, r6, pc}
 80090b4:	080091a8 	.word	0x080091a8
 80090b8:	080091a8 	.word	0x080091a8
 80090bc:	080091ac 	.word	0x080091ac
 80090c0:	080091a8 	.word	0x080091a8

080090c4 <memcmp>:
 80090c4:	b530      	push	{r4, r5, lr}
 80090c6:	2300      	movs	r3, #0
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d008      	beq.n	80090de <memcmp+0x1a>
 80090cc:	5cc5      	ldrb	r5, [r0, r3]
 80090ce:	3301      	adds	r3, #1
 80090d0:	18cc      	adds	r4, r1, r3
 80090d2:	f814 4c01 	ldrb.w	r4, [r4, #-1]
 80090d6:	42a5      	cmp	r5, r4
 80090d8:	d0f6      	beq.n	80090c8 <memcmp+0x4>
 80090da:	1b28      	subs	r0, r5, r4
 80090dc:	bd30      	pop	{r4, r5, pc}
 80090de:	2000      	movs	r0, #0
 80090e0:	bd30      	pop	{r4, r5, pc}

080090e2 <memcpy>:
 80090e2:	b510      	push	{r4, lr}
 80090e4:	2300      	movs	r3, #0
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d003      	beq.n	80090f2 <memcpy+0x10>
 80090ea:	5ccc      	ldrb	r4, [r1, r3]
 80090ec:	54c4      	strb	r4, [r0, r3]
 80090ee:	3301      	adds	r3, #1
 80090f0:	e7f9      	b.n	80090e6 <memcpy+0x4>
 80090f2:	bd10      	pop	{r4, pc}

080090f4 <memset>:
 80090f4:	4402      	add	r2, r0
 80090f6:	4603      	mov	r3, r0
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d002      	beq.n	8009102 <memset+0xe>
 80090fc:	f803 1b01 	strb.w	r1, [r3], #1
 8009100:	e7fa      	b.n	80090f8 <memset+0x4>
 8009102:	4770      	bx	lr

08009104 <_init>:
 8009104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009106:	bf00      	nop
 8009108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800910a:	bc08      	pop	{r3}
 800910c:	469e      	mov	lr, r3
 800910e:	4770      	bx	lr

08009110 <_fini>:
 8009110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009112:	bf00      	nop
 8009114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009116:	bc08      	pop	{r3}
 8009118:	469e      	mov	lr, r3
 800911a:	4770      	bx	lr
