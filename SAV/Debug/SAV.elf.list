
SAV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092e8  08000188  08000188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08009470  08009470  00011470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080094fc  080094fc  000114fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08009500  08009500  00011500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000050  20000000  08009504  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0001c218  20000050  20000050  00018050  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  2001c268  2001c268  00018050  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00018050  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000d86b  00000000  00000000  00018080  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002406  00000000  00000000  000258eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000348  00000000  00000000  00027cf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000049e0  00000000  00000000  00028040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004c5b  00000000  00000000  0002ca20  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      00000082  00000000  00000000  0003167b  2**0
                  CONTENTS, READONLY
 15 .debug_frame  00003034  00000000  00000000  00031700  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000020  00000000  00000000  00034738  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000050 	.word	0x20000050
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009458 	.word	0x08009458

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009458 	.word	0x08009458
 80001c4:	20000054 	.word	0x20000054

080001c8 <prvUltrasonic1Task>:
 *%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */

/*********************************************************************************************
 * Ultrasonic1 data collection and processing
 *********************************************************************************************/
void prvUltrasonic1Task( void *pvParameters ) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for(;;){
	//you must also change these in the interrupt handler below and in hardware.h
//		for front sensor
		setOutput(GPIO_Pin_5);
 80001d0:	2020      	movs	r0, #32
 80001d2:	f000 f8b9 	bl	8000348 <setOutput>
		GPIOA->ON = GPIO_Pin_5;
 80001d6:	4b13      	ldr	r3, [pc, #76]	; (8000224 <prvUltrasonic1Task+0x5c>)
 80001d8:	2220      	movs	r2, #32
 80001da:	831a      	strh	r2, [r3, #24]
		for(i = 0; i < 150; i++){};//delays 10us
 80001dc:	2300      	movs	r3, #0
 80001de:	73fb      	strb	r3, [r7, #15]
 80001e0:	e002      	b.n	80001e8 <prvUltrasonic1Task+0x20>
 80001e2:	7bfb      	ldrb	r3, [r7, #15]
 80001e4:	3301      	adds	r3, #1
 80001e6:	73fb      	strb	r3, [r7, #15]
 80001e8:	7bfb      	ldrb	r3, [r7, #15]
 80001ea:	2b95      	cmp	r3, #149	; 0x95
 80001ec:	d9f9      	bls.n	80001e2 <prvUltrasonic1Task+0x1a>
		GPIOA->OFF = GPIO_Pin_5;
 80001ee:	4b0d      	ldr	r3, [pc, #52]	; (8000224 <prvUltrasonic1Task+0x5c>)
 80001f0:	2220      	movs	r2, #32
 80001f2:	835a      	strh	r2, [r3, #26]
		setInput(GPIO_Pin_5);
 80001f4:	2020      	movs	r0, #32
 80001f6:	f000 f889 	bl	800030c <setInput>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 80001fa:	b662      	cpsie	i
		__enable_irq();
		while(!done1){};
 80001fc:	bf00      	nop
 80001fe:	4b0a      	ldr	r3, [pc, #40]	; (8000228 <prvUltrasonic1Task+0x60>)
 8000200:	781b      	ldrb	r3, [r3, #0]
 8000202:	b2db      	uxtb	r3, r3
 8000204:	2b00      	cmp	r3, #0
 8000206:	d0fa      	beq.n	80001fe <prvUltrasonic1Task+0x36>
		done1 = 0;
 8000208:	4b07      	ldr	r3, [pc, #28]	; (8000228 <prvUltrasonic1Task+0x60>)
 800020a:	2200      	movs	r2, #0
 800020c:	701a      	strb	r2, [r3, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 800020e:	b672      	cpsid	i
		__disable_irq();
		distCM_front = timerValue1;//convert from timer value to cm
 8000210:	4b06      	ldr	r3, [pc, #24]	; (800022c <prvUltrasonic1Task+0x64>)
 8000212:	881b      	ldrh	r3, [r3, #0]
 8000214:	b29a      	uxth	r2, r3
 8000216:	4b06      	ldr	r3, [pc, #24]	; (8000230 <prvUltrasonic1Task+0x68>)
 8000218:	801a      	strh	r2, [r3, #0]
		{
//			LED_MODE_PORT->OFF = LED_MODE_2_PIN;
		}


		vTaskDelay(ultrasonicFreq);
 800021a:	2064      	movs	r0, #100	; 0x64
 800021c:	f006 fc7c 	bl	8006b18 <vTaskDelay>
	}
 8000220:	e7d6      	b.n	80001d0 <prvUltrasonic1Task+0x8>
 8000222:	bf00      	nop
 8000224:	40020000 	.word	0x40020000
 8000228:	20000074 	.word	0x20000074
 800022c:	2001c204 	.word	0x2001c204
 8000230:	2001c218 	.word	0x2001c218

08000234 <prvUltrasonic2Task>:


/*********************************************************************************************
 * Ultrasonic2 data collection and processing
 *********************************************************************************************/
void prvUltrasonic2Task( void *pvParameters ) {
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for(;;){
	//		for right sensor
			setOutput(GPIO_Pin_6);
 800023c:	2040      	movs	r0, #64	; 0x40
 800023e:	f000 f883 	bl	8000348 <setOutput>
			GPIOA->ON = GPIO_Pin_6;
 8000242:	4b13      	ldr	r3, [pc, #76]	; (8000290 <prvUltrasonic2Task+0x5c>)
 8000244:	2240      	movs	r2, #64	; 0x40
 8000246:	831a      	strh	r2, [r3, #24]
			for(i = 0; i < 150; i++){};//delays 10us
 8000248:	2300      	movs	r3, #0
 800024a:	73fb      	strb	r3, [r7, #15]
 800024c:	e002      	b.n	8000254 <prvUltrasonic2Task+0x20>
 800024e:	7bfb      	ldrb	r3, [r7, #15]
 8000250:	3301      	adds	r3, #1
 8000252:	73fb      	strb	r3, [r7, #15]
 8000254:	7bfb      	ldrb	r3, [r7, #15]
 8000256:	2b95      	cmp	r3, #149	; 0x95
 8000258:	d9f9      	bls.n	800024e <prvUltrasonic2Task+0x1a>
			GPIOA->OFF = GPIO_Pin_6;
 800025a:	4b0d      	ldr	r3, [pc, #52]	; (8000290 <prvUltrasonic2Task+0x5c>)
 800025c:	2240      	movs	r2, #64	; 0x40
 800025e:	835a      	strh	r2, [r3, #26]
			setInput(GPIO_Pin_6);
 8000260:	2040      	movs	r0, #64	; 0x40
 8000262:	f000 f853 	bl	800030c <setInput>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 8000266:	b662      	cpsie	i
			__enable_irq();
			while(!done2){};
 8000268:	bf00      	nop
 800026a:	4b0a      	ldr	r3, [pc, #40]	; (8000294 <prvUltrasonic2Task+0x60>)
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	b2db      	uxtb	r3, r3
 8000270:	2b00      	cmp	r3, #0
 8000272:	d0fa      	beq.n	800026a <prvUltrasonic2Task+0x36>
			done2 = 0;
 8000274:	4b07      	ldr	r3, [pc, #28]	; (8000294 <prvUltrasonic2Task+0x60>)
 8000276:	2200      	movs	r2, #0
 8000278:	701a      	strb	r2, [r3, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 800027a:	b672      	cpsid	i
			__disable_irq();
			distCM_right = timerValue2;//convert from timer value to cm
 800027c:	4b06      	ldr	r3, [pc, #24]	; (8000298 <prvUltrasonic2Task+0x64>)
 800027e:	881b      	ldrh	r3, [r3, #0]
 8000280:	b29a      	uxth	r2, r3
 8000282:	4b06      	ldr	r3, [pc, #24]	; (800029c <prvUltrasonic2Task+0x68>)
 8000284:	801a      	strh	r2, [r3, #0]

			else
			{
//				LED_MODE_PORT->OFF = LED_MODE_1_PIN;
			}
			vTaskDelay(ultrasonicFreq);
 8000286:	2064      	movs	r0, #100	; 0x64
 8000288:	f006 fc46 	bl	8006b18 <vTaskDelay>
	}
 800028c:	e7d6      	b.n	800023c <prvUltrasonic2Task+0x8>
 800028e:	bf00      	nop
 8000290:	40020000 	.word	0x40020000
 8000294:	20000075 	.word	0x20000075
 8000298:	2001c20e 	.word	0x2001c20e
 800029c:	2001c21a 	.word	0x2001c21a

080002a0 <prvUltrasonic3Task>:
}

/*********************************************************************************************
 * Ultrasonic3 data collection and processing
 *********************************************************************************************/
void prvUltrasonic3Task( void *pvParameters ) {
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for(;;){
	//		for left sensor
			setOutput(GPIO_Pin_7);
 80002a8:	2080      	movs	r0, #128	; 0x80
 80002aa:	f000 f84d 	bl	8000348 <setOutput>
			GPIOA->ON = GPIO_Pin_7;
 80002ae:	4b13      	ldr	r3, [pc, #76]	; (80002fc <prvUltrasonic3Task+0x5c>)
 80002b0:	2280      	movs	r2, #128	; 0x80
 80002b2:	831a      	strh	r2, [r3, #24]
			for(i = 0; i < 150; i++){};//delays 10us
 80002b4:	2300      	movs	r3, #0
 80002b6:	73fb      	strb	r3, [r7, #15]
 80002b8:	e002      	b.n	80002c0 <prvUltrasonic3Task+0x20>
 80002ba:	7bfb      	ldrb	r3, [r7, #15]
 80002bc:	3301      	adds	r3, #1
 80002be:	73fb      	strb	r3, [r7, #15]
 80002c0:	7bfb      	ldrb	r3, [r7, #15]
 80002c2:	2b95      	cmp	r3, #149	; 0x95
 80002c4:	d9f9      	bls.n	80002ba <prvUltrasonic3Task+0x1a>
			GPIOA->OFF = GPIO_Pin_7;
 80002c6:	4b0d      	ldr	r3, [pc, #52]	; (80002fc <prvUltrasonic3Task+0x5c>)
 80002c8:	2280      	movs	r2, #128	; 0x80
 80002ca:	835a      	strh	r2, [r3, #26]
			setInput(GPIO_Pin_7);
 80002cc:	2080      	movs	r0, #128	; 0x80
 80002ce:	f000 f81d 	bl	800030c <setInput>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 80002d2:	b662      	cpsie	i
			__enable_irq();
			while(!done3){};
 80002d4:	bf00      	nop
 80002d6:	4b0a      	ldr	r3, [pc, #40]	; (8000300 <prvUltrasonic3Task+0x60>)
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	b2db      	uxtb	r3, r3
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d0fa      	beq.n	80002d6 <prvUltrasonic3Task+0x36>
			done3 = 0;
 80002e0:	4b07      	ldr	r3, [pc, #28]	; (8000300 <prvUltrasonic3Task+0x60>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	701a      	strb	r2, [r3, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80002e6:	b672      	cpsid	i
			__disable_irq();
			distCM_left = timerValue3;//convert from timer value to cm
 80002e8:	4b06      	ldr	r3, [pc, #24]	; (8000304 <prvUltrasonic3Task+0x64>)
 80002ea:	881b      	ldrh	r3, [r3, #0]
 80002ec:	b29a      	uxth	r2, r3
 80002ee:	4b06      	ldr	r3, [pc, #24]	; (8000308 <prvUltrasonic3Task+0x68>)
 80002f0:	801a      	strh	r2, [r3, #0]

			else
			{
//				LED_MODE_PORT->OFF = LED_MODE_3_PIN;
			}
			vTaskDelay(ultrasonicFreq);
 80002f2:	2064      	movs	r0, #100	; 0x64
 80002f4:	f006 fc10 	bl	8006b18 <vTaskDelay>
	}
 80002f8:	e7d6      	b.n	80002a8 <prvUltrasonic3Task+0x8>
 80002fa:	bf00      	nop
 80002fc:	40020000 	.word	0x40020000
 8000300:	20000076 	.word	0x20000076
 8000304:	2001c24c 	.word	0x2001c24c
 8000308:	2001c1f4 	.word	0x2001c1f4

0800030c <setInput>:
 *%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */

/*********************************************************************************************
 * Sets a pin on port A to input mode
 *********************************************************************************************/
void setInput(uint16_t pin){
 800030c:	b580      	push	{r7, lr}
 800030e:	b084      	sub	sp, #16
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	80fb      	strh	r3, [r7, #6]
	GPIO_InitTypeDef  GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000316:	2001      	movs	r0, #1
 8000318:	2101      	movs	r1, #1
 800031a:	f004 fc19 	bl	8004b50 <RCC_AHB1PeriphClockCmd>
		// Configure GPIO
		GPIO_InitStructure.GPIO_Pin = pin;
 800031e:	88fb      	ldrh	r3, [r7, #6]
 8000320:	60bb      	str	r3, [r7, #8]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000322:	2300      	movs	r3, #0
 8000324:	733b      	strb	r3, [r7, #12]
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8000326:	2303      	movs	r3, #3
 8000328:	737b      	strb	r3, [r7, #13]
		GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800032a:	2300      	movs	r3, #0
 800032c:	73bb      	strb	r3, [r7, #14]
		GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 800032e:	2302      	movs	r3, #2
 8000330:	73fb      	strb	r3, [r7, #15]
		GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000332:	f107 0308 	add.w	r3, r7, #8
 8000336:	4803      	ldr	r0, [pc, #12]	; (8000344 <setInput+0x38>)
 8000338:	4619      	mov	r1, r3
 800033a:	f004 fef3 	bl	8005124 <GPIO_Init>
}
 800033e:	3710      	adds	r7, #16
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}
 8000344:	40020000 	.word	0x40020000

08000348 <setOutput>:


/*********************************************************************************************
 * Sets a pin on port A to output mode
 *********************************************************************************************/
void setOutput(uint16_t pin){
 8000348:	b580      	push	{r7, lr}
 800034a:	b084      	sub	sp, #16
 800034c:	af00      	add	r7, sp, #0
 800034e:	4603      	mov	r3, r0
 8000350:	80fb      	strh	r3, [r7, #6]
	GPIO_InitTypeDef  GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000352:	2001      	movs	r0, #1
 8000354:	2101      	movs	r1, #1
 8000356:	f004 fbfb 	bl	8004b50 <RCC_AHB1PeriphClockCmd>

		// Configure GPIO
		GPIO_InitStructure.GPIO_Pin = pin;
 800035a:	88fb      	ldrh	r3, [r7, #6]
 800035c:	60bb      	str	r3, [r7, #8]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800035e:	2301      	movs	r3, #1
 8000360:	733b      	strb	r3, [r7, #12]
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8000362:	2303      	movs	r3, #3
 8000364:	737b      	strb	r3, [r7, #13]
		GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000366:	2300      	movs	r3, #0
 8000368:	73bb      	strb	r3, [r7, #14]
		GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800036a:	2300      	movs	r3, #0
 800036c:	73fb      	strb	r3, [r7, #15]
		GPIO_Init(GPIOA, &GPIO_InitStructure);
 800036e:	f107 0308 	add.w	r3, r7, #8
 8000372:	4803      	ldr	r0, [pc, #12]	; (8000380 <setOutput+0x38>)
 8000374:	4619      	mov	r1, r3
 8000376:	f004 fed5 	bl	8005124 <GPIO_Init>
}
 800037a:	3710      	adds	r7, #16
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	40020000 	.word	0x40020000

08000384 <EXTI9_5_IRQHandler>:


/*********************************************************************************************
 * Handle interrupt for ultrasonic
 *********************************************************************************************/
void EXTI9_5_IRQHandler(void) {
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
	// Right sensor
    // Make sure that interrupt flag is set
    if (EXTI_GetITStatus(EXTI_Line5) != RESET) {
 8000388:	2020      	movs	r0, #32
 800038a:	f005 f957 	bl	800563c <EXTI_GetITStatus>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d01a      	beq.n	80003ca <EXTI9_5_IRQHandler+0x46>
    	// Read the GPIO pin to see if we're on a rising edge or a falling edge
    	if(GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_5) == (uint8_t)Bit_SET) {
 8000394:	482c      	ldr	r0, [pc, #176]	; (8000448 <EXTI9_5_IRQHandler+0xc4>)
 8000396:	2120      	movs	r1, #32
 8000398:	f004 ff8e 	bl	80052b8 <GPIO_ReadInputDataBit>
 800039c:	4603      	mov	r3, r0
 800039e:	2b01      	cmp	r3, #1
 80003a0:	d105      	bne.n	80003ae <EXTI9_5_IRQHandler+0x2a>
    		TIM_SetCounter(TIM2, 0);
 80003a2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80003a6:	2100      	movs	r1, #0
 80003a8:	f002 fc18 	bl	8002bdc <TIM_SetCounter>
 80003ac:	e00a      	b.n	80003c4 <EXTI9_5_IRQHandler+0x40>
    	} else {
    		timerValue1 = TIM_GetCounter(TIM2);
 80003ae:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80003b2:	f002 fc2f 	bl	8002c14 <TIM_GetCounter>
 80003b6:	4603      	mov	r3, r0
 80003b8:	b29a      	uxth	r2, r3
 80003ba:	4b24      	ldr	r3, [pc, #144]	; (800044c <EXTI9_5_IRQHandler+0xc8>)
 80003bc:	801a      	strh	r2, [r3, #0]
    		done1 = 1;
 80003be:	4b24      	ldr	r3, [pc, #144]	; (8000450 <EXTI9_5_IRQHandler+0xcc>)
 80003c0:	2201      	movs	r2, #1
 80003c2:	701a      	strb	r2, [r3, #0]
    	}
    	// Clear interrupt flag
    	EXTI_ClearITPendingBit(EXTI_Line5);
 80003c4:	2020      	movs	r0, #32
 80003c6:	f005 f95d 	bl	8005684 <EXTI_ClearITPendingBit>
    }

    // Front sensor
    if (EXTI_GetITStatus(EXTI_Line6) != RESET) {
 80003ca:	2040      	movs	r0, #64	; 0x40
 80003cc:	f005 f936 	bl	800563c <EXTI_GetITStatus>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d018      	beq.n	8000408 <EXTI9_5_IRQHandler+0x84>
    	if(GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_6) == (uint8_t)Bit_SET) {
 80003d6:	481c      	ldr	r0, [pc, #112]	; (8000448 <EXTI9_5_IRQHandler+0xc4>)
 80003d8:	2140      	movs	r1, #64	; 0x40
 80003da:	f004 ff6d 	bl	80052b8 <GPIO_ReadInputDataBit>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b01      	cmp	r3, #1
 80003e2:	d104      	bne.n	80003ee <EXTI9_5_IRQHandler+0x6a>
    		TIM_SetCounter(TIM4, 0);
 80003e4:	481b      	ldr	r0, [pc, #108]	; (8000454 <EXTI9_5_IRQHandler+0xd0>)
 80003e6:	2100      	movs	r1, #0
 80003e8:	f002 fbf8 	bl	8002bdc <TIM_SetCounter>
 80003ec:	e009      	b.n	8000402 <EXTI9_5_IRQHandler+0x7e>
    	} else {
    		timerValue2 = TIM_GetCounter(TIM4);
 80003ee:	4819      	ldr	r0, [pc, #100]	; (8000454 <EXTI9_5_IRQHandler+0xd0>)
 80003f0:	f002 fc10 	bl	8002c14 <TIM_GetCounter>
 80003f4:	4603      	mov	r3, r0
 80003f6:	b29a      	uxth	r2, r3
 80003f8:	4b17      	ldr	r3, [pc, #92]	; (8000458 <EXTI9_5_IRQHandler+0xd4>)
 80003fa:	801a      	strh	r2, [r3, #0]
    		done2 = 1;
 80003fc:	4b17      	ldr	r3, [pc, #92]	; (800045c <EXTI9_5_IRQHandler+0xd8>)
 80003fe:	2201      	movs	r2, #1
 8000400:	701a      	strb	r2, [r3, #0]
    	}
    	// Clear interrupt flag
    	EXTI_ClearITPendingBit(EXTI_Line6);
 8000402:	2040      	movs	r0, #64	; 0x40
 8000404:	f005 f93e 	bl	8005684 <EXTI_ClearITPendingBit>
    }

    // Left sensor
    if (EXTI_GetITStatus(EXTI_Line7) != RESET) {
 8000408:	2080      	movs	r0, #128	; 0x80
 800040a:	f005 f917 	bl	800563c <EXTI_GetITStatus>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d018      	beq.n	8000446 <EXTI9_5_IRQHandler+0xc2>
    	if(GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_7) == (uint8_t)Bit_SET) {
 8000414:	480c      	ldr	r0, [pc, #48]	; (8000448 <EXTI9_5_IRQHandler+0xc4>)
 8000416:	2180      	movs	r1, #128	; 0x80
 8000418:	f004 ff4e 	bl	80052b8 <GPIO_ReadInputDataBit>
 800041c:	4603      	mov	r3, r0
 800041e:	2b01      	cmp	r3, #1
 8000420:	d104      	bne.n	800042c <EXTI9_5_IRQHandler+0xa8>
    		TIM_SetCounter(TIM5, 0);
 8000422:	480f      	ldr	r0, [pc, #60]	; (8000460 <EXTI9_5_IRQHandler+0xdc>)
 8000424:	2100      	movs	r1, #0
 8000426:	f002 fbd9 	bl	8002bdc <TIM_SetCounter>
 800042a:	e009      	b.n	8000440 <EXTI9_5_IRQHandler+0xbc>
    	} else {
    		timerValue3 = TIM_GetCounter(TIM5);
 800042c:	480c      	ldr	r0, [pc, #48]	; (8000460 <EXTI9_5_IRQHandler+0xdc>)
 800042e:	f002 fbf1 	bl	8002c14 <TIM_GetCounter>
 8000432:	4603      	mov	r3, r0
 8000434:	b29a      	uxth	r2, r3
 8000436:	4b0b      	ldr	r3, [pc, #44]	; (8000464 <EXTI9_5_IRQHandler+0xe0>)
 8000438:	801a      	strh	r2, [r3, #0]
    		done3 = 1;
 800043a:	4b0b      	ldr	r3, [pc, #44]	; (8000468 <EXTI9_5_IRQHandler+0xe4>)
 800043c:	2201      	movs	r2, #1
 800043e:	701a      	strb	r2, [r3, #0]
    	}
    	// Clear interrupt flag
    	EXTI_ClearITPendingBit(EXTI_Line7);
 8000440:	2080      	movs	r0, #128	; 0x80
 8000442:	f005 f91f 	bl	8005684 <EXTI_ClearITPendingBit>
    }
}
 8000446:	bd80      	pop	{r7, pc}
 8000448:	40020000 	.word	0x40020000
 800044c:	2001c204 	.word	0x2001c204
 8000450:	20000074 	.word	0x20000074
 8000454:	40000800 	.word	0x40000800
 8000458:	2001c20e 	.word	0x2001c20e
 800045c:	20000075 	.word	0x20000075
 8000460:	40000c00 	.word	0x40000c00
 8000464:	2001c24c 	.word	0x2001c24c
 8000468:	20000076 	.word	0x20000076

0800046c <prvblinkTrafficLightCallback>:
#include "trafficLight.h"

/*********************************************************************************************
 * Timer callback to blink Traffic Light LED
 *********************************************************************************************/
void prvblinkTrafficLightCallback( TimerHandle_t pxTimer ) {
 800046c:	b480      	push	{r7}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]

	if( traffic_time > 0 ) {
 8000474:	4b1d      	ldr	r3, [pc, #116]	; (80004ec <prvblinkTrafficLightCallback+0x80>)
 8000476:	881b      	ldrh	r3, [r3, #0]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d025      	beq.n	80004c8 <prvblinkTrafficLightCallback+0x5c>
		// If there is at least 0.4 seconds until the change, toggle the LED
		if( (traffic_time % 400 == 0) && (traffic_time < 10000) ) {
 800047c:	4b1b      	ldr	r3, [pc, #108]	; (80004ec <prvblinkTrafficLightCallback+0x80>)
 800047e:	881b      	ldrh	r3, [r3, #0]
 8000480:	4a1b      	ldr	r2, [pc, #108]	; (80004f0 <prvblinkTrafficLightCallback+0x84>)
 8000482:	fba2 1203 	umull	r1, r2, r2, r3
 8000486:	09d2      	lsrs	r2, r2, #7
 8000488:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800048c:	fb01 f202 	mul.w	r2, r1, r2
 8000490:	1a9b      	subs	r3, r3, r2
 8000492:	b29b      	uxth	r3, r3
 8000494:	2b00      	cmp	r3, #0
 8000496:	d110      	bne.n	80004ba <prvblinkTrafficLightCallback+0x4e>
 8000498:	4b14      	ldr	r3, [pc, #80]	; (80004ec <prvblinkTrafficLightCallback+0x80>)
 800049a:	881a      	ldrh	r2, [r3, #0]
 800049c:	f242 730f 	movw	r3, #9999	; 0x270f
 80004a0:	429a      	cmp	r2, r3
 80004a2:	d80a      	bhi.n	80004ba <prvblinkTrafficLightCallback+0x4e>
			LED_LIGHT_PORT->ODR ^= led_light_pin[traffic_future_state];
 80004a4:	4b13      	ldr	r3, [pc, #76]	; (80004f4 <prvblinkTrafficLightCallback+0x88>)
 80004a6:	4a13      	ldr	r2, [pc, #76]	; (80004f4 <prvblinkTrafficLightCallback+0x88>)
 80004a8:	6951      	ldr	r1, [r2, #20]
 80004aa:	4a13      	ldr	r2, [pc, #76]	; (80004f8 <prvblinkTrafficLightCallback+0x8c>)
 80004ac:	7812      	ldrb	r2, [r2, #0]
 80004ae:	4610      	mov	r0, r2
 80004b0:	4a12      	ldr	r2, [pc, #72]	; (80004fc <prvblinkTrafficLightCallback+0x90>)
 80004b2:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 80004b6:	404a      	eors	r2, r1
 80004b8:	615a      	str	r2, [r3, #20]
		}

		// Decrease elapsed time
		traffic_time = traffic_time - 100;
 80004ba:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <prvblinkTrafficLightCallback+0x80>)
 80004bc:	881b      	ldrh	r3, [r3, #0]
 80004be:	3b64      	subs	r3, #100	; 0x64
 80004c0:	b29a      	uxth	r2, r3
 80004c2:	4b0a      	ldr	r3, [pc, #40]	; (80004ec <prvblinkTrafficLightCallback+0x80>)
 80004c4:	801a      	strh	r2, [r3, #0]
 80004c6:	e00b      	b.n	80004e0 <prvblinkTrafficLightCallback+0x74>
	} else {
		// Turn on the new state
		LED_LIGHT_PORT->OFF = LED_LIGHT_PINS;
 80004c8:	4b0a      	ldr	r3, [pc, #40]	; (80004f4 <prvblinkTrafficLightCallback+0x88>)
 80004ca:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80004ce:	835a      	strh	r2, [r3, #26]
		LED_LIGHT_PORT->ON = led_light_pin[traffic_future_state];
 80004d0:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <prvblinkTrafficLightCallback+0x88>)
 80004d2:	4a09      	ldr	r2, [pc, #36]	; (80004f8 <prvblinkTrafficLightCallback+0x8c>)
 80004d4:	7812      	ldrb	r2, [r2, #0]
 80004d6:	4611      	mov	r1, r2
 80004d8:	4a08      	ldr	r2, [pc, #32]	; (80004fc <prvblinkTrafficLightCallback+0x90>)
 80004da:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80004de:	831a      	strh	r2, [r3, #24]
	}
}
 80004e0:	370c      	adds	r7, #12
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	20000002 	.word	0x20000002
 80004f0:	51eb851f 	.word	0x51eb851f
 80004f4:	40020800 	.word	0x40020800
 80004f8:	20000000 	.word	0x20000000
 80004fc:	20000028 	.word	0x20000028

08000500 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000504:	4b15      	ldr	r3, [pc, #84]	; (800055c <SystemInit+0x5c>)
 8000506:	4a15      	ldr	r2, [pc, #84]	; (800055c <SystemInit+0x5c>)
 8000508:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800050c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000510:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <SystemInit+0x60>)
 8000516:	4a12      	ldr	r2, [pc, #72]	; (8000560 <SystemInit+0x60>)
 8000518:	6812      	ldr	r2, [r2, #0]
 800051a:	f042 0201 	orr.w	r2, r2, #1
 800051e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000520:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <SystemInit+0x60>)
 8000522:	2200      	movs	r2, #0
 8000524:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000526:	4a0e      	ldr	r2, [pc, #56]	; (8000560 <SystemInit+0x60>)
 8000528:	4b0d      	ldr	r3, [pc, #52]	; (8000560 <SystemInit+0x60>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000530:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000534:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000536:	4b0a      	ldr	r3, [pc, #40]	; (8000560 <SystemInit+0x60>)
 8000538:	4a0a      	ldr	r2, [pc, #40]	; (8000564 <SystemInit+0x64>)
 800053a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800053c:	4b08      	ldr	r3, [pc, #32]	; (8000560 <SystemInit+0x60>)
 800053e:	4a08      	ldr	r2, [pc, #32]	; (8000560 <SystemInit+0x60>)
 8000540:	6812      	ldr	r2, [r2, #0]
 8000542:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000546:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000548:	4b05      	ldr	r3, [pc, #20]	; (8000560 <SystemInit+0x60>)
 800054a:	2200      	movs	r2, #0
 800054c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800054e:	f000 f887 	bl	8000660 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000552:	4b02      	ldr	r3, [pc, #8]	; (800055c <SystemInit+0x5c>)
 8000554:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000558:	609a      	str	r2, [r3, #8]
#endif
}
 800055a:	bd80      	pop	{r7, pc}
 800055c:	e000ed00 	.word	0xe000ed00
 8000560:	40023800 	.word	0x40023800
 8000564:	24003010 	.word	0x24003010

08000568 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000568:	b480      	push	{r7}
 800056a:	b087      	sub	sp, #28
 800056c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800056e:	2300      	movs	r3, #0
 8000570:	613b      	str	r3, [r7, #16]
 8000572:	2300      	movs	r3, #0
 8000574:	617b      	str	r3, [r7, #20]
 8000576:	2302      	movs	r3, #2
 8000578:	60fb      	str	r3, [r7, #12]
 800057a:	2300      	movs	r3, #0
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	2302      	movs	r3, #2
 8000580:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000582:	4b32      	ldr	r3, [pc, #200]	; (800064c <SystemCoreClockUpdate+0xe4>)
 8000584:	689b      	ldr	r3, [r3, #8]
 8000586:	f003 030c 	and.w	r3, r3, #12
 800058a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 800058c:	693b      	ldr	r3, [r7, #16]
 800058e:	2b04      	cmp	r3, #4
 8000590:	d007      	beq.n	80005a2 <SystemCoreClockUpdate+0x3a>
 8000592:	2b08      	cmp	r3, #8
 8000594:	d009      	beq.n	80005aa <SystemCoreClockUpdate+0x42>
 8000596:	2b00      	cmp	r3, #0
 8000598:	d13f      	bne.n	800061a <SystemCoreClockUpdate+0xb2>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800059a:	4b2d      	ldr	r3, [pc, #180]	; (8000650 <SystemCoreClockUpdate+0xe8>)
 800059c:	4a2d      	ldr	r2, [pc, #180]	; (8000654 <SystemCoreClockUpdate+0xec>)
 800059e:	601a      	str	r2, [r3, #0]
      break;
 80005a0:	e03f      	b.n	8000622 <SystemCoreClockUpdate+0xba>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80005a2:	4b2b      	ldr	r3, [pc, #172]	; (8000650 <SystemCoreClockUpdate+0xe8>)
 80005a4:	4a2c      	ldr	r2, [pc, #176]	; (8000658 <SystemCoreClockUpdate+0xf0>)
 80005a6:	601a      	str	r2, [r3, #0]
      break;
 80005a8:	e03b      	b.n	8000622 <SystemCoreClockUpdate+0xba>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80005aa:	4b28      	ldr	r3, [pc, #160]	; (800064c <SystemCoreClockUpdate+0xe4>)
 80005ac:	685b      	ldr	r3, [r3, #4]
 80005ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005b2:	0d9b      	lsrs	r3, r3, #22
 80005b4:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80005b6:	4b25      	ldr	r3, [pc, #148]	; (800064c <SystemCoreClockUpdate+0xe4>)
 80005b8:	685b      	ldr	r3, [r3, #4]
 80005ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80005be:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d00d      	beq.n	80005e2 <SystemCoreClockUpdate+0x7a>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80005c6:	4a24      	ldr	r2, [pc, #144]	; (8000658 <SystemCoreClockUpdate+0xf0>)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80005ce:	4b1f      	ldr	r3, [pc, #124]	; (800064c <SystemCoreClockUpdate+0xe4>)
 80005d0:	6859      	ldr	r1, [r3, #4]
 80005d2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80005d6:	400b      	ands	r3, r1
 80005d8:	099b      	lsrs	r3, r3, #6
 80005da:	fb03 f302 	mul.w	r3, r3, r2
 80005de:	617b      	str	r3, [r7, #20]
 80005e0:	e00c      	b.n	80005fc <SystemCoreClockUpdate+0x94>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80005e2:	4a1c      	ldr	r2, [pc, #112]	; (8000654 <SystemCoreClockUpdate+0xec>)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80005ea:	4b18      	ldr	r3, [pc, #96]	; (800064c <SystemCoreClockUpdate+0xe4>)
 80005ec:	6859      	ldr	r1, [r3, #4]
 80005ee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80005f2:	400b      	ands	r3, r1
 80005f4:	099b      	lsrs	r3, r3, #6
 80005f6:	fb03 f302 	mul.w	r3, r3, r2
 80005fa:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80005fc:	4b13      	ldr	r3, [pc, #76]	; (800064c <SystemCoreClockUpdate+0xe4>)
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000604:	0c1b      	lsrs	r3, r3, #16
 8000606:	3301      	adds	r3, #1
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 800060c:	697a      	ldr	r2, [r7, #20]
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	fbb2 f2f3 	udiv	r2, r2, r3
 8000614:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <SystemCoreClockUpdate+0xe8>)
 8000616:	601a      	str	r2, [r3, #0]
      break;
 8000618:	e003      	b.n	8000622 <SystemCoreClockUpdate+0xba>
    default:
      SystemCoreClock = HSI_VALUE;
 800061a:	4b0d      	ldr	r3, [pc, #52]	; (8000650 <SystemCoreClockUpdate+0xe8>)
 800061c:	4a0d      	ldr	r2, [pc, #52]	; (8000654 <SystemCoreClockUpdate+0xec>)
 800061e:	601a      	str	r2, [r3, #0]
      break;
 8000620:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000622:	4b0a      	ldr	r3, [pc, #40]	; (800064c <SystemCoreClockUpdate+0xe4>)
 8000624:	689b      	ldr	r3, [r3, #8]
 8000626:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800062a:	091b      	lsrs	r3, r3, #4
 800062c:	4a0b      	ldr	r2, [pc, #44]	; (800065c <SystemCoreClockUpdate+0xf4>)
 800062e:	5cd3      	ldrb	r3, [r2, r3]
 8000630:	b2db      	uxtb	r3, r3
 8000632:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <SystemCoreClockUpdate+0xe8>)
 8000636:	681a      	ldr	r2, [r3, #0]
 8000638:	693b      	ldr	r3, [r7, #16]
 800063a:	40da      	lsrs	r2, r3
 800063c:	4b04      	ldr	r3, [pc, #16]	; (8000650 <SystemCoreClockUpdate+0xe8>)
 800063e:	601a      	str	r2, [r3, #0]
}
 8000640:	371c      	adds	r7, #28
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	40023800 	.word	0x40023800
 8000650:	20000008 	.word	0x20000008
 8000654:	00f42400 	.word	0x00f42400
 8000658:	01312d00 	.word	0x01312d00
 800065c:	2000000c 	.word	0x2000000c

08000660 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000666:	2300      	movs	r3, #0
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	2300      	movs	r3, #0
 800066c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800066e:	4b35      	ldr	r3, [pc, #212]	; (8000744 <SetSysClock+0xe4>)
 8000670:	4a34      	ldr	r2, [pc, #208]	; (8000744 <SetSysClock+0xe4>)
 8000672:	6812      	ldr	r2, [r2, #0]
 8000674:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000678:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800067a:	4b32      	ldr	r3, [pc, #200]	; (8000744 <SetSysClock+0xe4>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000682:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	3301      	adds	r3, #1
 8000688:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d103      	bne.n	8000698 <SetSysClock+0x38>
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000696:	d1f0      	bne.n	800067a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000698:	4b2a      	ldr	r3, [pc, #168]	; (8000744 <SetSysClock+0xe4>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d002      	beq.n	80006aa <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80006a4:	2301      	movs	r3, #1
 80006a6:	603b      	str	r3, [r7, #0]
 80006a8:	e001      	b.n	80006ae <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80006aa:	2300      	movs	r3, #0
 80006ac:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	d142      	bne.n	800073a <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80006b4:	4b23      	ldr	r3, [pc, #140]	; (8000744 <SetSysClock+0xe4>)
 80006b6:	4a23      	ldr	r2, [pc, #140]	; (8000744 <SetSysClock+0xe4>)
 80006b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80006ba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80006be:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80006c0:	4b21      	ldr	r3, [pc, #132]	; (8000748 <SetSysClock+0xe8>)
 80006c2:	4a21      	ldr	r2, [pc, #132]	; (8000748 <SetSysClock+0xe8>)
 80006c4:	6812      	ldr	r2, [r2, #0]
 80006c6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80006ca:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80006cc:	4b1d      	ldr	r3, [pc, #116]	; (8000744 <SetSysClock+0xe4>)
 80006ce:	4a1d      	ldr	r2, [pc, #116]	; (8000744 <SetSysClock+0xe4>)
 80006d0:	6892      	ldr	r2, [r2, #8]
 80006d2:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80006d4:	4b1b      	ldr	r3, [pc, #108]	; (8000744 <SetSysClock+0xe4>)
 80006d6:	4a1b      	ldr	r2, [pc, #108]	; (8000744 <SetSysClock+0xe4>)
 80006d8:	6892      	ldr	r2, [r2, #8]
 80006da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80006de:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80006e0:	4b18      	ldr	r3, [pc, #96]	; (8000744 <SetSysClock+0xe4>)
 80006e2:	4a18      	ldr	r2, [pc, #96]	; (8000744 <SetSysClock+0xe4>)
 80006e4:	6892      	ldr	r2, [r2, #8]
 80006e6:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 80006ea:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80006ec:	4b15      	ldr	r3, [pc, #84]	; (8000744 <SetSysClock+0xe4>)
 80006ee:	4a17      	ldr	r2, [pc, #92]	; (800074c <SetSysClock+0xec>)
 80006f0:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80006f2:	4b14      	ldr	r3, [pc, #80]	; (8000744 <SetSysClock+0xe4>)
 80006f4:	4a13      	ldr	r2, [pc, #76]	; (8000744 <SetSysClock+0xe4>)
 80006f6:	6812      	ldr	r2, [r2, #0]
 80006f8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80006fc:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80006fe:	bf00      	nop
 8000700:	4b10      	ldr	r3, [pc, #64]	; (8000744 <SetSysClock+0xe4>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000708:	2b00      	cmp	r3, #0
 800070a:	d0f9      	beq.n	8000700 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800070c:	4b10      	ldr	r3, [pc, #64]	; (8000750 <SetSysClock+0xf0>)
 800070e:	f240 7205 	movw	r2, #1797	; 0x705
 8000712:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000714:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <SetSysClock+0xe4>)
 8000716:	4a0b      	ldr	r2, [pc, #44]	; (8000744 <SetSysClock+0xe4>)
 8000718:	6892      	ldr	r2, [r2, #8]
 800071a:	f022 0203 	bic.w	r2, r2, #3
 800071e:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000720:	4b08      	ldr	r3, [pc, #32]	; (8000744 <SetSysClock+0xe4>)
 8000722:	4a08      	ldr	r2, [pc, #32]	; (8000744 <SetSysClock+0xe4>)
 8000724:	6892      	ldr	r2, [r2, #8]
 8000726:	f042 0202 	orr.w	r2, r2, #2
 800072a:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800072c:	bf00      	nop
 800072e:	4b05      	ldr	r3, [pc, #20]	; (8000744 <SetSysClock+0xe4>)
 8000730:	689b      	ldr	r3, [r3, #8]
 8000732:	f003 030c 	and.w	r3, r3, #12
 8000736:	2b08      	cmp	r3, #8
 8000738:	d1f9      	bne.n	800072e <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	40023800 	.word	0x40023800
 8000748:	40007000 	.word	0x40007000
 800074c:	07405414 	.word	0x07405414
 8000750:	40023c00 	.word	0x40023c00

08000754 <swTimerInit>:
 * Initialize SW Timer
 *		* timerPeriod: 			Period before timer goes off
 *   	* repeat:				Should timer be reset after it expires
 *    	* pxCallbackFunction: 	Function called when timer expires
 *********************************************************************************************/
TimerHandle_t swTimerInit( uint16_t timer_period, UBaseType_t repeat, TimerCallbackFunction_t pxCallbackFunction ) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b088      	sub	sp, #32
 8000758:	af02      	add	r7, sp, #8
 800075a:	4603      	mov	r3, r0
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	607a      	str	r2, [r7, #4]
 8000760:	81fb      	strh	r3, [r7, #14]

	// Convert period in milliseconds to tick counts
	TickType_t timer_tick = timer_period * ( 1 / portTICK_PERIOD_MS);
 8000762:	89fb      	ldrh	r3, [r7, #14]
 8000764:	617b      	str	r3, [r7, #20]

	// Create timer
	// Note that pvTimerID is set to NULL so that if the same callback function is assigned to more than one timer it can't tell between them
	TimerHandle_t handle = xTimerCreate("", timer_tick, repeat, NULL, pxCallbackFunction);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	9300      	str	r3, [sp, #0]
 800076a:	4806      	ldr	r0, [pc, #24]	; (8000784 <swTimerInit+0x30>)
 800076c:	6979      	ldr	r1, [r7, #20]
 800076e:	68ba      	ldr	r2, [r7, #8]
 8000770:	2300      	movs	r3, #0
 8000772:	f005 fdb1 	bl	80062d8 <xTimerCreate>
 8000776:	6138      	str	r0, [r7, #16]

	return handle;
 8000778:	693b      	ldr	r3, [r7, #16]
}
 800077a:	4618      	mov	r0, r3
 800077c:	3718      	adds	r7, #24
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	08009470 	.word	0x08009470

08000788 <swTimerStart>:
/*********************************************************************************************
 * Start SW Timer
 * 		* handle:				Pointer to the timer created using swTimerInit
 * 		* timeWait:				Blocking time until timer starts (can be set to 0)
 *********************************************************************************************/
uint8_t swTimerStart( TimerHandle_t handle, uint8_t timeWait ) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af02      	add	r7, sp, #8
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	460b      	mov	r3, r1
 8000792:	70fb      	strb	r3, [r7, #3]

	// If handle is NULL, timer was never properly created
	if( handle == NULL ) {
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d101      	bne.n	800079e <swTimerStart+0x16>
		return FAILURE;
 800079a:	2300      	movs	r3, #0
 800079c:	e012      	b.n	80007c4 <swTimerStart+0x3c>
	}

	// Convert period in milliseconds to wait to tick counts
	TickType_t tickWait = timeWait * (1 / portTICK_PERIOD_MS);
 800079e:	78fb      	ldrb	r3, [r7, #3]
 80007a0:	60fb      	str	r3, [r7, #12]
	if( xTimerStart(handle, tickWait) != pdPASS ) {
 80007a2:	f006 fd17 	bl	80071d4 <xTaskGetTickCount>
 80007a6:	4603      	mov	r3, r0
 80007a8:	68fa      	ldr	r2, [r7, #12]
 80007aa:	9200      	str	r2, [sp, #0]
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	2101      	movs	r1, #1
 80007b0:	461a      	mov	r2, r3
 80007b2:	2300      	movs	r3, #0
 80007b4:	f005 fdc0 	bl	8006338 <xTimerGenericCommand>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d001      	beq.n	80007c2 <swTimerStart+0x3a>
		return FAILURE;
 80007be:	2300      	movs	r3, #0
 80007c0:	e000      	b.n	80007c4 <swTimerStart+0x3c>
	}

	return SUCCESS;
 80007c2:	2301      	movs	r3, #1
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <swTimerStop>:

/*********************************************************************************************
 * Stop SW Timer
 * 		* handle:				Pointer to the timer created using swTimerInit
 *********************************************************************************************/
uint8_t swTimerStop( TimerHandle_t handle ) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af02      	add	r7, sp, #8
 80007d2:	6078      	str	r0, [r7, #4]

	// If handle is NULL, timer was never properly created
	if( handle == NULL ) {
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d101      	bne.n	80007de <swTimerStop+0x12>
		return FAILURE;
 80007da:	2300      	movs	r3, #0
 80007dc:	e00d      	b.n	80007fa <swTimerStop+0x2e>
	}

	if( xTimerStop(handle, 0) != pdPASS ) {
 80007de:	2300      	movs	r3, #0
 80007e0:	9300      	str	r3, [sp, #0]
 80007e2:	6878      	ldr	r0, [r7, #4]
 80007e4:	2103      	movs	r1, #3
 80007e6:	2200      	movs	r2, #0
 80007e8:	2300      	movs	r3, #0
 80007ea:	f005 fda5 	bl	8006338 <xTimerGenericCommand>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d001      	beq.n	80007f8 <swTimerStop+0x2c>
		return FAILURE;
 80007f4:	2300      	movs	r3, #0
 80007f6:	e000      	b.n	80007fa <swTimerStop+0x2e>
	}

	return SUCCESS;
 80007f8:	2301      	movs	r3, #1
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop

08000804 <swIsTimerActive>:

/*********************************************************************************************
 * Check if SW Timer is active
 * 		* handle:				Pointer to the timer created using swTimerInit
 *********************************************************************************************/
uint8_t swIsTimerActive( TimerHandle_t handle ) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]

	if( xTimerIsTimerActive( handle ) != pdPASS ) {
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f005 ffe5 	bl	80067dc <xTimerIsTimerActive>
 8000812:	4603      	mov	r3, r0
 8000814:	2b01      	cmp	r3, #1
 8000816:	d001      	beq.n	800081c <swIsTimerActive+0x18>
		return FAILURE;
 8000818:	2300      	movs	r3, #0
 800081a:	e000      	b.n	800081e <swIsTimerActive+0x1a>
	}

	return SUCCESS;
 800081c:	2301      	movs	r3, #1
}
 800081e:	4618      	mov	r0, r3
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop

08000828 <prvDelayCallback>:


/*********************************************************************************************
 * Local timer callback function
 *********************************************************************************************/
void prvDelayCallback( TimerHandle_t pxTimer ) {
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
	delay_done = TRUE;
 8000830:	4b03      	ldr	r3, [pc, #12]	; (8000840 <prvDelayCallback+0x18>)
 8000832:	2201      	movs	r2, #1
 8000834:	701a      	strb	r2, [r3, #0]
}
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	2001c210 	.word	0x2001c210

08000844 <swDelay>:


/*********************************************************************************************
 * Delay for given amount of time (in ms)
 *********************************************************************************************/
uint8_t swDelay( uint16_t delay_time ) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	80fb      	strh	r3, [r7, #6]

	// Set global false
	delay_done = FALSE;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <swDelay+0x44>)
 8000850:	2200      	movs	r2, #0
 8000852:	701a      	strb	r2, [r3, #0]

	// Create and start local swTimer
	TimerHandle_t delay = swTimerInit( delay_time, NO_REPEAT, prvDelayCallback );
 8000854:	88fb      	ldrh	r3, [r7, #6]
 8000856:	4618      	mov	r0, r3
 8000858:	2100      	movs	r1, #0
 800085a:	4a0c      	ldr	r2, [pc, #48]	; (800088c <swDelay+0x48>)
 800085c:	f7ff ff7a 	bl	8000754 <swTimerInit>
 8000860:	60f8      	str	r0, [r7, #12]
	if( !swTimerStart( delay, 0 ) ) {
 8000862:	68f8      	ldr	r0, [r7, #12]
 8000864:	2100      	movs	r1, #0
 8000866:	f7ff ff8f 	bl	8000788 <swTimerStart>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d101      	bne.n	8000874 <swDelay+0x30>
		return FAILURE;
 8000870:	2300      	movs	r3, #0
 8000872:	e005      	b.n	8000880 <swDelay+0x3c>
	}

	// Wait until timer completes
	while( !delay_done );
 8000874:	bf00      	nop
 8000876:	4b04      	ldr	r3, [pc, #16]	; (8000888 <swDelay+0x44>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d0fb      	beq.n	8000876 <swDelay+0x32>

	return SUCCESS;
 800087e:	2301      	movs	r3, #1
}
 8000880:	4618      	mov	r0, r3
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	2001c210 	.word	0x2001c210
 800088c:	08000829 	.word	0x08000829

08000890 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
}
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 80008a0:	e7fe      	b.n	80008a0 <HardFault_Handler+0x4>
 80008a2:	bf00      	nop

080008a4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 80008a8:	e7fe      	b.n	80008a8 <MemManage_Handler+0x4>
 80008aa:	bf00      	nop

080008ac <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 80008b0:	e7fe      	b.n	80008b0 <BusFault_Handler+0x4>
 80008b2:	bf00      	nop

080008b4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 80008b8:	e7fe      	b.n	80008b8 <UsageFault_Handler+0x4>
 80008ba:	bf00      	nop

080008bc <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
}
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr

080008c8 <prvReadPowerCallback>:


/*********************************************************************************************
 * Timer callback to read power measurement
 *********************************************************************************************/
void prvReadPowerCallback( TimerHandle_t pxTimer ) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]

	// Increment time based on the value the timer delays
	power_time += 5;
 80008d0:	4b28      	ldr	r3, [pc, #160]	; (8000974 <prvReadPowerCallback+0xac>)
 80008d2:	881b      	ldrh	r3, [r3, #0]
 80008d4:	3305      	adds	r3, #5
 80008d6:	b29a      	uxth	r2, r3
 80008d8:	4b26      	ldr	r3, [pc, #152]	; (8000974 <prvReadPowerCallback+0xac>)
 80008da:	801a      	strh	r2, [r3, #0]

	// Read ADC pin
	ADC_RegularChannelConfig( MEASURED_POWER_ADC, MEASURED_POWER_CHANNEL, 1, ADC_SampleTime_15Cycles );
 80008dc:	4826      	ldr	r0, [pc, #152]	; (8000978 <prvReadPowerCallback+0xb0>)
 80008de:	210d      	movs	r1, #13
 80008e0:	2201      	movs	r2, #1
 80008e2:	2301      	movs	r3, #1
 80008e4:	f005 f83a 	bl	800595c <ADC_RegularChannelConfig>
	ADC_SoftwareStartConv( MEASURED_POWER_ADC );
 80008e8:	4823      	ldr	r0, [pc, #140]	; (8000978 <prvReadPowerCallback+0xb0>)
 80008ea:	f005 f8fb 	bl	8005ae4 <ADC_SoftwareStartConv>
	while( ADC_GetFlagStatus(MEASURED_POWER_ADC, ADC_FLAG_EOC) == RESET );
 80008ee:	bf00      	nop
 80008f0:	4821      	ldr	r0, [pc, #132]	; (8000978 <prvReadPowerCallback+0xb0>)
 80008f2:	2102      	movs	r1, #2
 80008f4:	f005 fb9a 	bl	800602c <ADC_GetFlagStatus>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d0f8      	beq.n	80008f0 <prvReadPowerCallback+0x28>
	uint32_t current_power = (uint32_t) ADC_GetConversionValue( MEASURED_POWER_ADC );
 80008fe:	481e      	ldr	r0, [pc, #120]	; (8000978 <prvReadPowerCallback+0xb0>)
 8000900:	f005 f98e 	bl	8005c20 <ADC_GetConversionValue>
 8000904:	4603      	mov	r3, r0
 8000906:	617b      	str	r3, [r7, #20]

	// Add to total power value
	power_total += current_power;
 8000908:	4b1c      	ldr	r3, [pc, #112]	; (800097c <prvReadPowerCallback+0xb4>)
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	441a      	add	r2, r3
 8000910:	4b1a      	ldr	r3, [pc, #104]	; (800097c <prvReadPowerCallback+0xb4>)
 8000912:	601a      	str	r2, [r3, #0]

	// Send back packet every 30 seconds
	if( power_time % 6 == 0 ) {
 8000914:	4b17      	ldr	r3, [pc, #92]	; (8000974 <prvReadPowerCallback+0xac>)
 8000916:	881a      	ldrh	r2, [r3, #0]
 8000918:	4b19      	ldr	r3, [pc, #100]	; (8000980 <prvReadPowerCallback+0xb8>)
 800091a:	fba3 1302 	umull	r1, r3, r3, r2
 800091e:	0899      	lsrs	r1, r3, #2
 8000920:	460b      	mov	r3, r1
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	440b      	add	r3, r1
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	1ad3      	subs	r3, r2, r3
 800092a:	b29b      	uxth	r3, r3
 800092c:	2b00      	cmp	r3, #0
 800092e:	d11e      	bne.n	800096e <prvReadPowerCallback+0xa6>

		// Create header
		Header* header = pvPortMalloc( sizeof(Header) );
 8000930:	2005      	movs	r0, #5
 8000932:	f008 fb75 	bl	8009020 <pvPortMalloc>
 8000936:	6138      	str	r0, [r7, #16]
		header->dest = baseStation;
 8000938:	693b      	ldr	r3, [r7, #16]
 800093a:	2202      	movs	r2, #2
 800093c:	701a      	strb	r2, [r3, #0]
		header->addr = MY_ADDR;
 800093e:	693b      	ldr	r3, [r7, #16]
 8000940:	2201      	movs	r2, #1
 8000942:	705a      	strb	r2, [r3, #1]
		header->mode = allModes;
 8000944:	693b      	ldr	r3, [r7, #16]
 8000946:	2200      	movs	r2, #0
 8000948:	709a      	strb	r2, [r3, #2]
		header->type = powerConsumption;
 800094a:	693b      	ldr	r3, [r7, #16]
 800094c:	2206      	movs	r2, #6
 800094e:	70da      	strb	r2, [r3, #3]

		// Convert total power to average power
		uint16_t average_power = (uint16_t) (power_total/power_time);
 8000950:	4b0a      	ldr	r3, [pc, #40]	; (800097c <prvReadPowerCallback+0xb4>)
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	4b07      	ldr	r3, [pc, #28]	; (8000974 <prvReadPowerCallback+0xac>)
 8000956:	881b      	ldrh	r3, [r3, #0]
 8000958:	fbb2 f3f3 	udiv	r3, r2, r3
 800095c:	81fb      	strh	r3, [r7, #14]

		// Send packet
		sendPowerConsumption( header, average_power, power_time );
 800095e:	4b05      	ldr	r3, [pc, #20]	; (8000974 <prvReadPowerCallback+0xac>)
 8000960:	881b      	ldrh	r3, [r3, #0]
 8000962:	89fa      	ldrh	r2, [r7, #14]
 8000964:	6938      	ldr	r0, [r7, #16]
 8000966:	4611      	mov	r1, r2
 8000968:	461a      	mov	r2, r3
 800096a:	f000 f9cf 	bl	8000d0c <sendPowerConsumption>
	}
}
 800096e:	3718      	adds	r7, #24
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	2001c20c 	.word	0x2001c20c
 8000978:	40012000 	.word	0x40012000
 800097c:	2001c1f8 	.word	0x2001c1f8
 8000980:	aaaaaaab 	.word	0xaaaaaaab

08000984 <prvReadPhotoCallback>:


/*********************************************************************************************
 * Timer callback to read photo resistors
 *********************************************************************************************/
void prvReadPhotoCallback( TimerHandle_t pxTimer ) {
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	static uint16_t photo2;
	static uint16_t photo3;
	static uint16_t photo_average;

	// Read photo1
	ADC_RegularChannelConfig( PHOTO_ADC, PHOTO_1_CHANNEL, 1, ADC_SampleTime_15Cycles );
 800098c:	485b      	ldr	r0, [pc, #364]	; (8000afc <prvReadPhotoCallback+0x178>)
 800098e:	210a      	movs	r1, #10
 8000990:	2201      	movs	r2, #1
 8000992:	2301      	movs	r3, #1
 8000994:	f004 ffe2 	bl	800595c <ADC_RegularChannelConfig>
	ADC_SoftwareStartConv( PHOTO_ADC );
 8000998:	4858      	ldr	r0, [pc, #352]	; (8000afc <prvReadPhotoCallback+0x178>)
 800099a:	f005 f8a3 	bl	8005ae4 <ADC_SoftwareStartConv>
	while( ADC_GetFlagStatus(PHOTO_ADC, ADC_FLAG_EOC) == RESET );
 800099e:	bf00      	nop
 80009a0:	4856      	ldr	r0, [pc, #344]	; (8000afc <prvReadPhotoCallback+0x178>)
 80009a2:	2102      	movs	r1, #2
 80009a4:	f005 fb42 	bl	800602c <ADC_GetFlagStatus>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d0f8      	beq.n	80009a0 <prvReadPhotoCallback+0x1c>
	photo1 = ADC_GetConversionValue( PHOTO_ADC );
 80009ae:	4853      	ldr	r0, [pc, #332]	; (8000afc <prvReadPhotoCallback+0x178>)
 80009b0:	f005 f936 	bl	8005c20 <ADC_GetConversionValue>
 80009b4:	4603      	mov	r3, r0
 80009b6:	461a      	mov	r2, r3
 80009b8:	4b51      	ldr	r3, [pc, #324]	; (8000b00 <prvReadPhotoCallback+0x17c>)
 80009ba:	801a      	strh	r2, [r3, #0]

	// Read photo2
	ADC_RegularChannelConfig( PHOTO_ADC, PHOTO_2_CHANNEL, 1, ADC_SampleTime_15Cycles );
 80009bc:	484f      	ldr	r0, [pc, #316]	; (8000afc <prvReadPhotoCallback+0x178>)
 80009be:	210b      	movs	r1, #11
 80009c0:	2201      	movs	r2, #1
 80009c2:	2301      	movs	r3, #1
 80009c4:	f004 ffca 	bl	800595c <ADC_RegularChannelConfig>
	ADC_SoftwareStartConv( PHOTO_ADC );
 80009c8:	484c      	ldr	r0, [pc, #304]	; (8000afc <prvReadPhotoCallback+0x178>)
 80009ca:	f005 f88b 	bl	8005ae4 <ADC_SoftwareStartConv>
	while( ADC_GetFlagStatus(PHOTO_ADC, ADC_FLAG_EOC) == RESET );
 80009ce:	bf00      	nop
 80009d0:	484a      	ldr	r0, [pc, #296]	; (8000afc <prvReadPhotoCallback+0x178>)
 80009d2:	2102      	movs	r1, #2
 80009d4:	f005 fb2a 	bl	800602c <ADC_GetFlagStatus>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d0f8      	beq.n	80009d0 <prvReadPhotoCallback+0x4c>
	photo2 = ADC_GetConversionValue( PHOTO_ADC );
 80009de:	4847      	ldr	r0, [pc, #284]	; (8000afc <prvReadPhotoCallback+0x178>)
 80009e0:	f005 f91e 	bl	8005c20 <ADC_GetConversionValue>
 80009e4:	4603      	mov	r3, r0
 80009e6:	461a      	mov	r2, r3
 80009e8:	4b46      	ldr	r3, [pc, #280]	; (8000b04 <prvReadPhotoCallback+0x180>)
 80009ea:	801a      	strh	r2, [r3, #0]

	// Read photo3
	ADC_RegularChannelConfig( PHOTO_ADC, PHOTO_3_CHANNEL, 1, ADC_SampleTime_15Cycles );
 80009ec:	4843      	ldr	r0, [pc, #268]	; (8000afc <prvReadPhotoCallback+0x178>)
 80009ee:	210c      	movs	r1, #12
 80009f0:	2201      	movs	r2, #1
 80009f2:	2301      	movs	r3, #1
 80009f4:	f004 ffb2 	bl	800595c <ADC_RegularChannelConfig>
	ADC_SoftwareStartConv( PHOTO_ADC );
 80009f8:	4840      	ldr	r0, [pc, #256]	; (8000afc <prvReadPhotoCallback+0x178>)
 80009fa:	f005 f873 	bl	8005ae4 <ADC_SoftwareStartConv>
	while( ADC_GetFlagStatus(PHOTO_ADC, ADC_FLAG_EOC) == RESET );
 80009fe:	bf00      	nop
 8000a00:	483e      	ldr	r0, [pc, #248]	; (8000afc <prvReadPhotoCallback+0x178>)
 8000a02:	2102      	movs	r1, #2
 8000a04:	f005 fb12 	bl	800602c <ADC_GetFlagStatus>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d0f8      	beq.n	8000a00 <prvReadPhotoCallback+0x7c>
	photo3 = ADC_GetConversionValue( PHOTO_ADC );
 8000a0e:	483b      	ldr	r0, [pc, #236]	; (8000afc <prvReadPhotoCallback+0x178>)
 8000a10:	f005 f906 	bl	8005c20 <ADC_GetConversionValue>
 8000a14:	4603      	mov	r3, r0
 8000a16:	461a      	mov	r2, r3
 8000a18:	4b3b      	ldr	r3, [pc, #236]	; (8000b08 <prvReadPhotoCallback+0x184>)
 8000a1a:	801a      	strh	r2, [r3, #0]

	// Average values
	photo_average = (photo1 + photo2 + photo3)/3;
 8000a1c:	4b38      	ldr	r3, [pc, #224]	; (8000b00 <prvReadPhotoCallback+0x17c>)
 8000a1e:	881b      	ldrh	r3, [r3, #0]
 8000a20:	461a      	mov	r2, r3
 8000a22:	4b38      	ldr	r3, [pc, #224]	; (8000b04 <prvReadPhotoCallback+0x180>)
 8000a24:	881b      	ldrh	r3, [r3, #0]
 8000a26:	441a      	add	r2, r3
 8000a28:	4b37      	ldr	r3, [pc, #220]	; (8000b08 <prvReadPhotoCallback+0x184>)
 8000a2a:	881b      	ldrh	r3, [r3, #0]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	4a37      	ldr	r2, [pc, #220]	; (8000b0c <prvReadPhotoCallback+0x188>)
 8000a30:	fb82 1203 	smull	r1, r2, r2, r3
 8000a34:	17db      	asrs	r3, r3, #31
 8000a36:	1ad3      	subs	r3, r2, r3
 8000a38:	b29a      	uxth	r2, r3
 8000a3a:	4b35      	ldr	r3, [pc, #212]	; (8000b10 <prvReadPhotoCallback+0x18c>)
 8000a3c:	801a      	strh	r2, [r3, #0]

	// Check if over a white line
	if( (photo_average > 3200) && (photo_previous_line == black) ) {
 8000a3e:	4b34      	ldr	r3, [pc, #208]	; (8000b10 <prvReadPhotoCallback+0x18c>)
 8000a40:	881b      	ldrh	r3, [r3, #0]
 8000a42:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8000a46:	d90a      	bls.n	8000a5e <prvReadPhotoCallback+0xda>
 8000a48:	4b32      	ldr	r3, [pc, #200]	; (8000b14 <prvReadPhotoCallback+0x190>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d106      	bne.n	8000a5e <prvReadPhotoCallback+0xda>
		photo_previous_line = white;
 8000a50:	4b30      	ldr	r3, [pc, #192]	; (8000b14 <prvReadPhotoCallback+0x190>)
 8000a52:	2201      	movs	r2, #1
 8000a54:	701a      	strb	r2, [r3, #0]
//		photo_counter += 1;
		LED_MODE_PORT->OFF = LED_MODE_1_PIN;
 8000a56:	4b30      	ldr	r3, [pc, #192]	; (8000b18 <prvReadPhotoCallback+0x194>)
 8000a58:	2210      	movs	r2, #16
 8000a5a:	835a      	strh	r2, [r3, #26]
 8000a5c:	e027      	b.n	8000aae <prvReadPhotoCallback+0x12a>
	}

	// Check if over a black line
	else if( (photo_average <= 3200) && (photo_previous_line == white) ) {
 8000a5e:	4b2c      	ldr	r3, [pc, #176]	; (8000b10 <prvReadPhotoCallback+0x18c>)
 8000a60:	881b      	ldrh	r3, [r3, #0]
 8000a62:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8000a66:	d822      	bhi.n	8000aae <prvReadPhotoCallback+0x12a>
 8000a68:	4b2a      	ldr	r3, [pc, #168]	; (8000b14 <prvReadPhotoCallback+0x190>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d11e      	bne.n	8000aae <prvReadPhotoCallback+0x12a>
		photo_previous_line = black;
 8000a70:	4b28      	ldr	r3, [pc, #160]	; (8000b14 <prvReadPhotoCallback+0x190>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	701a      	strb	r2, [r3, #0]
		photo_counter += 1;
 8000a76:	4b29      	ldr	r3, [pc, #164]	; (8000b1c <prvReadPhotoCallback+0x198>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	4b27      	ldr	r3, [pc, #156]	; (8000b1c <prvReadPhotoCallback+0x198>)
 8000a80:	701a      	strb	r2, [r3, #0]
		LED_MODE_PORT->ON = LED_MODE_1_PIN;
 8000a82:	4b25      	ldr	r3, [pc, #148]	; (8000b18 <prvReadPhotoCallback+0x194>)
 8000a84:	2210      	movs	r2, #16
 8000a86:	831a      	strh	r2, [r3, #24]
		if( (photo_counter == 3) && (photo_intersection == FALSE) ) {
 8000a88:	4b24      	ldr	r3, [pc, #144]	; (8000b1c <prvReadPhotoCallback+0x198>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	2b03      	cmp	r3, #3
 8000a8e:	d10e      	bne.n	8000aae <prvReadPhotoCallback+0x12a>
 8000a90:	4b23      	ldr	r3, [pc, #140]	; (8000b20 <prvReadPhotoCallback+0x19c>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d10a      	bne.n	8000aae <prvReadPhotoCallback+0x12a>
			// Adjust steering
			if( photo_direction == ns ) {
 8000a98:	4b22      	ldr	r3, [pc, #136]	; (8000b24 <prvReadPhotoCallback+0x1a0>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d103      	bne.n	8000aa8 <prvReadPhotoCallback+0x124>
				steer = 48;
 8000aa0:	4b21      	ldr	r3, [pc, #132]	; (8000b28 <prvReadPhotoCallback+0x1a4>)
 8000aa2:	2230      	movs	r2, #48	; 0x30
 8000aa4:	701a      	strb	r2, [r3, #0]
 8000aa6:	e002      	b.n	8000aae <prvReadPhotoCallback+0x12a>
			} else {
				steer = 54;
 8000aa8:	4b1f      	ldr	r3, [pc, #124]	; (8000b28 <prvReadPhotoCallback+0x1a4>)
 8000aaa:	2236      	movs	r2, #54	; 0x36
 8000aac:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	if( photo_counter >= 5 ) {
 8000aae:	4b1b      	ldr	r3, [pc, #108]	; (8000b1c <prvReadPhotoCallback+0x198>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	2b04      	cmp	r3, #4
 8000ab4:	d91e      	bls.n	8000af4 <prvReadPhotoCallback+0x170>

		if( photo_intersection == TRUE ) {
 8000ab6:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <prvReadPhotoCallback+0x19c>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d10e      	bne.n	8000adc <prvReadPhotoCallback+0x158>
			// Leaving the intersection
			photo_intersection = FALSE;
 8000abe:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <prvReadPhotoCallback+0x19c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	701a      	strb	r2, [r3, #0]

			// Adjust steering
			if( photo_direction == ns ) {
 8000ac4:	4b17      	ldr	r3, [pc, #92]	; (8000b24 <prvReadPhotoCallback+0x1a0>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d103      	bne.n	8000ad4 <prvReadPhotoCallback+0x150>
				steer = 63;
 8000acc:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <prvReadPhotoCallback+0x1a4>)
 8000ace:	223f      	movs	r2, #63	; 0x3f
 8000ad0:	701a      	strb	r2, [r3, #0]
 8000ad2:	e00c      	b.n	8000aee <prvReadPhotoCallback+0x16a>
			} else {
				steer = 39;
 8000ad4:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <prvReadPhotoCallback+0x1a4>)
 8000ad6:	2227      	movs	r2, #39	; 0x27
 8000ad8:	701a      	strb	r2, [r3, #0]
 8000ada:	e008      	b.n	8000aee <prvReadPhotoCallback+0x16a>
			}
		} else {
			// Entering intersection
			photo_intersection = TRUE;
 8000adc:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <prvReadPhotoCallback+0x19c>)
 8000ade:	2201      	movs	r2, #1
 8000ae0:	701a      	strb	r2, [r3, #0]

			// Update direction SAV is traveling
			photo_direction = next_direction[photo_direction];
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <prvReadPhotoCallback+0x1a0>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	4a11      	ldr	r2, [pc, #68]	; (8000b2c <prvReadPhotoCallback+0x1a8>)
 8000ae8:	5cd2      	ldrb	r2, [r2, r3]
 8000aea:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <prvReadPhotoCallback+0x1a0>)
 8000aec:	701a      	strb	r2, [r3, #0]
		}

		// Reset the counter
		photo_counter = 0;
 8000aee:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <prvReadPhotoCallback+0x198>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	701a      	strb	r2, [r3, #0]
	}
}
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40012000 	.word	0x40012000
 8000b00:	2000007a 	.word	0x2000007a
 8000b04:	2000007c 	.word	0x2000007c
 8000b08:	2000007e 	.word	0x2000007e
 8000b0c:	55555556 	.word	0x55555556
 8000b10:	20000080 	.word	0x20000080
 8000b14:	2000001c 	.word	0x2000001c
 8000b18:	40020800 	.word	0x40020800
 8000b1c:	20000077 	.word	0x20000077
 8000b20:	2000001d 	.word	0x2000001d
 8000b24:	20000078 	.word	0x20000078
 8000b28:	20000024 	.word	0x20000024
 8000b2c:	20000020 	.word	0x20000020

08000b30 <sendPacket>:
 * %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */

/*********************************************************************************************
 * Base function to send all packets (or strings to setup WiFi module)
 *********************************************************************************************/
uint8_t sendPacket( char* packet, uint8_t length, uint8_t tilde ) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	4613      	mov	r3, r2
 8000b3a:	460a      	mov	r2, r1
 8000b3c:	70fa      	strb	r2, [r7, #3]
 8000b3e:	70bb      	strb	r3, [r7, #2]
	int i;
	for( i=0; i < length; i++ ) {
 8000b40:	2300      	movs	r3, #0
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	e013      	b.n	8000b6e <sendPacket+0x3e>
		// Wait for data register to be empty before adding the next char
		while( !(WIFI_USART->SR & 0x00000040) );
 8000b46:	bf00      	nop
 8000b48:	4b21      	ldr	r3, [pc, #132]	; (8000bd0 <sendPacket+0xa0>)
 8000b4a:	881b      	ldrh	r3, [r3, #0]
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d0f8      	beq.n	8000b48 <sendPacket+0x18>

		// Put into TX register
		USART_SendData( WIFI_USART, *packet );
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	481d      	ldr	r0, [pc, #116]	; (8000bd0 <sendPacket+0xa0>)
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	f001 fc1d 	bl	800239c <USART_SendData>
		packet++;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	3301      	adds	r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
/*********************************************************************************************
 * Base function to send all packets (or strings to setup WiFi module)
 *********************************************************************************************/
uint8_t sendPacket( char* packet, uint8_t length, uint8_t tilde ) {
	int i;
	for( i=0; i < length; i++ ) {
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	78fa      	ldrb	r2, [r7, #3]
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	429a      	cmp	r2, r3
 8000b74:	dce7      	bgt.n	8000b46 <sendPacket+0x16>
		USART_SendData( WIFI_USART, *packet );
		packet++;
	}

	// Check if it is a custom packet
	if( tilde == TRUE ) {
 8000b76:	78bb      	ldrb	r3, [r7, #2]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d10c      	bne.n	8000b96 <sendPacket+0x66>
		while( !(WIFI_USART->SR & 0x00000040) );
 8000b7c:	bf00      	nop
 8000b7e:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <sendPacket+0xa0>)
 8000b80:	881b      	ldrh	r3, [r3, #0]
 8000b82:	b29b      	uxth	r3, r3
 8000b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d0f8      	beq.n	8000b7e <sendPacket+0x4e>
		USART_SendData( WIFI_USART, '~' );
 8000b8c:	4810      	ldr	r0, [pc, #64]	; (8000bd0 <sendPacket+0xa0>)
 8000b8e:	217e      	movs	r1, #126	; 0x7e
 8000b90:	f001 fc04 	bl	800239c <USART_SendData>
	}

	// WiFi module expects \r\n at the end of every string
	while( !(WIFI_USART->SR & 0x00000040) );
 8000b94:	e7ff      	b.n	8000b96 <sendPacket+0x66>
 8000b96:	bf00      	nop
 8000b98:	4b0d      	ldr	r3, [pc, #52]	; (8000bd0 <sendPacket+0xa0>)
 8000b9a:	881b      	ldrh	r3, [r3, #0]
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d0f8      	beq.n	8000b98 <sendPacket+0x68>
	USART_SendData( WIFI_USART, '\r' );
 8000ba6:	480a      	ldr	r0, [pc, #40]	; (8000bd0 <sendPacket+0xa0>)
 8000ba8:	210d      	movs	r1, #13
 8000baa:	f001 fbf7 	bl	800239c <USART_SendData>

	while( !(WIFI_USART->SR & 0x00000040) );
 8000bae:	bf00      	nop
 8000bb0:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <sendPacket+0xa0>)
 8000bb2:	881b      	ldrh	r3, [r3, #0]
 8000bb4:	b29b      	uxth	r3, r3
 8000bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d0f8      	beq.n	8000bb0 <sendPacket+0x80>
	USART_SendData( WIFI_USART, '\n' );
 8000bbe:	4804      	ldr	r0, [pc, #16]	; (8000bd0 <sendPacket+0xa0>)
 8000bc0:	210a      	movs	r1, #10
 8000bc2:	f001 fbeb 	bl	800239c <USART_SendData>

	return SUCCESS;
 8000bc6:	2301      	movs	r3, #1
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3710      	adds	r7, #16
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40004800 	.word	0x40004800

08000bd4 <sendAck>:


/*********************************************************************************************
 * Send Ack
 *********************************************************************************************/
uint8_t sendAck( Header* header, uint8_t success ) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b088      	sub	sp, #32
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	460b      	mov	r3, r1
 8000bde:	70fb      	strb	r3, [r7, #3]

	// Fill Ack struct
	Ack* ack = pvPortMalloc( sizeof(Ack) );
 8000be0:	2001      	movs	r0, #1
 8000be2:	f008 fa1d 	bl	8009020 <pvPortMalloc>
 8000be6:	61f8      	str	r0, [r7, #28]
	ack->success = success;
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	78fa      	ldrb	r2, [r7, #3]
 8000bec:	701a      	strb	r2, [r3, #0]

	// Update the length of the packet in the header
	header->length = (HEADER_LENGTH + ACK_LENGTH);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2206      	movs	r2, #6
 8000bf2:	711a      	strb	r2, [r3, #4]

	// Convert structs into strings
	char* header_char = (char*) header;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	61bb      	str	r3, [r7, #24]
	char* ack_char = (char*) ack;
 8000bf8:	69fb      	ldr	r3, [r7, #28]
 8000bfa:	617b      	str	r3, [r7, #20]

	// Package header and payload together
	char* ack_packet = pvPortMalloc( sizeof((uint8_t)(header->length)) );
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	f008 fa0f 	bl	8009020 <pvPortMalloc>
 8000c02:	6138      	str	r0, [r7, #16]
	pack( ack_packet, header_char, 0 );
 8000c04:	6938      	ldr	r0, [r7, #16]
 8000c06:	69b9      	ldr	r1, [r7, #24]
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f000 fa77 	bl	80010fc <pack>
	pack( ack_packet, ack_char, HEADER_LENGTH );
 8000c0e:	6938      	ldr	r0, [r7, #16]
 8000c10:	6979      	ldr	r1, [r7, #20]
 8000c12:	2205      	movs	r2, #5
 8000c14:	f000 fa72 	bl	80010fc <pack>

	// Send packet
	sendPacket( "AT+CIPSEND=7", 12, FALSE );
 8000c18:	480d      	ldr	r0, [pc, #52]	; (8000c50 <sendAck+0x7c>)
 8000c1a:	210c      	movs	r1, #12
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f7ff ff87 	bl	8000b30 <sendPacket>
	swDelay(100);
 8000c22:	2064      	movs	r0, #100	; 0x64
 8000c24:	f7ff fe0e 	bl	8000844 <swDelay>
	uint8_t result = sendPacket( ack_packet, header->length, TRUE );
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	791b      	ldrb	r3, [r3, #4]
 8000c2c:	6938      	ldr	r0, [r7, #16]
 8000c2e:	4619      	mov	r1, r3
 8000c30:	2201      	movs	r2, #1
 8000c32:	f7ff ff7d 	bl	8000b30 <sendPacket>
 8000c36:	4603      	mov	r3, r0
 8000c38:	73fb      	strb	r3, [r7, #15]

	// Free variables
	vPortFree(ack);
 8000c3a:	69f8      	ldr	r0, [r7, #28]
 8000c3c:	f008 fa88 	bl	8009150 <vPortFree>
	vPortFree(ack_packet);
 8000c40:	6938      	ldr	r0, [r7, #16]
 8000c42:	f008 fa85 	bl	8009150 <vPortFree>

	return result;
 8000c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3720      	adds	r7, #32
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	08009474 	.word	0x08009474

08000c54 <sendPing>:


/*********************************************************************************************
 * Send Ping
 *********************************************************************************************/
uint8_t sendPing( Header* header ) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]

	// Update the length of the packet in the header
	header->length = (HEADER_LENGTH + PING_LENGTH);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2205      	movs	r2, #5
 8000c60:	711a      	strb	r2, [r3, #4]

	// Convert structs into strings
	char* header_char = (char*) header;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	617b      	str	r3, [r7, #20]

	// Package header and payload together
	char* ping_packet = pvPortMalloc( sizeof((uint8_t)(header->length)) );
 8000c66:	2001      	movs	r0, #1
 8000c68:	f008 f9da 	bl	8009020 <pvPortMalloc>
 8000c6c:	6138      	str	r0, [r7, #16]
	pack( ping_packet, header_char, 0 );
 8000c6e:	6938      	ldr	r0, [r7, #16]
 8000c70:	6979      	ldr	r1, [r7, #20]
 8000c72:	2200      	movs	r2, #0
 8000c74:	f000 fa42 	bl	80010fc <pack>

	// Send packet
	sendPacket( "AT+CIPSEND=6", 12, FALSE );
 8000c78:	480c      	ldr	r0, [pc, #48]	; (8000cac <sendPing+0x58>)
 8000c7a:	210c      	movs	r1, #12
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f7ff ff57 	bl	8000b30 <sendPacket>
	swDelay(100);
 8000c82:	2064      	movs	r0, #100	; 0x64
 8000c84:	f7ff fdde 	bl	8000844 <swDelay>
	uint8_t result = sendPacket( ping_packet, header->length, TRUE );
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	791b      	ldrb	r3, [r3, #4]
 8000c8c:	6938      	ldr	r0, [r7, #16]
 8000c8e:	4619      	mov	r1, r3
 8000c90:	2201      	movs	r2, #1
 8000c92:	f7ff ff4d 	bl	8000b30 <sendPacket>
 8000c96:	4603      	mov	r3, r0
 8000c98:	73fb      	strb	r3, [r7, #15]

	// Free variables
	vPortFree(ping_packet);
 8000c9a:	6938      	ldr	r0, [r7, #16]
 8000c9c:	f008 fa58 	bl	8009150 <vPortFree>

	return result;
 8000ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3718      	adds	r7, #24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	08009484 	.word	0x08009484

08000cb0 <sendSetMode>:


/*********************************************************************************************
 * Send SetMode
 *********************************************************************************************/
uint8_t sendSetMode( Header* header ) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]

	// Update the length of the packet in the header
	header->length = (HEADER_LENGTH + SET_MODE_LENGTH);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2205      	movs	r2, #5
 8000cbc:	711a      	strb	r2, [r3, #4]

	// Convert structs into strings
	char* header_char = (char*) header;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	617b      	str	r3, [r7, #20]

	// Package header and payload together
	char* set_mode_packet = pvPortMalloc( sizeof((uint8_t)(header->length)) );
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	f008 f9ac 	bl	8009020 <pvPortMalloc>
 8000cc8:	6138      	str	r0, [r7, #16]
	pack( set_mode_packet, header_char, 0 );
 8000cca:	6938      	ldr	r0, [r7, #16]
 8000ccc:	6979      	ldr	r1, [r7, #20]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f000 fa14 	bl	80010fc <pack>

	// Send packet
	sendPacket( "AT+CIPSEND=6", 12, FALSE );
 8000cd4:	480c      	ldr	r0, [pc, #48]	; (8000d08 <sendSetMode+0x58>)
 8000cd6:	210c      	movs	r1, #12
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f7ff ff29 	bl	8000b30 <sendPacket>
	swDelay(100);
 8000cde:	2064      	movs	r0, #100	; 0x64
 8000ce0:	f7ff fdb0 	bl	8000844 <swDelay>
	uint8_t result = sendPacket( set_mode_packet, header->length, TRUE );
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	791b      	ldrb	r3, [r3, #4]
 8000ce8:	6938      	ldr	r0, [r7, #16]
 8000cea:	4619      	mov	r1, r3
 8000cec:	2201      	movs	r2, #1
 8000cee:	f7ff ff1f 	bl	8000b30 <sendPacket>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	73fb      	strb	r3, [r7, #15]

	// Free variables
	vPortFree(set_mode_packet);
 8000cf6:	6938      	ldr	r0, [r7, #16]
 8000cf8:	f008 fa2a 	bl	8009150 <vPortFree>

	return result;
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3718      	adds	r7, #24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	08009484 	.word	0x08009484

08000d0c <sendPowerConsumption>:


/*********************************************************************************************
 * Send PowerConsumption
 *********************************************************************************************/
uint8_t sendPowerConsumption( Header* header, uint16_t average_power, uint16_t time ) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b088      	sub	sp, #32
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	4613      	mov	r3, r2
 8000d16:	460a      	mov	r2, r1
 8000d18:	807a      	strh	r2, [r7, #2]
 8000d1a:	803b      	strh	r3, [r7, #0]

	// Fill Ack struct
	PowerConsumption* power_consumption = pvPortMalloc( sizeof(PowerConsumption) );
 8000d1c:	2004      	movs	r0, #4
 8000d1e:	f008 f97f 	bl	8009020 <pvPortMalloc>
 8000d22:	61f8      	str	r0, [r7, #28]
	power_consumption->average_power = average_power;
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	887a      	ldrh	r2, [r7, #2]
 8000d28:	801a      	strh	r2, [r3, #0]
	power_consumption->time = time;
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	883a      	ldrh	r2, [r7, #0]
 8000d2e:	805a      	strh	r2, [r3, #2]

	// Update the length of the packet in the header
	header->length = (HEADER_LENGTH + POWER_CONSUMPTION_LENGTH);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2209      	movs	r2, #9
 8000d34:	711a      	strb	r2, [r3, #4]

	// Convert structs into strings
	char* header_char = (char*) header;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	61bb      	str	r3, [r7, #24]
	char* power_consumption_char = (char*) power_consumption;
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	617b      	str	r3, [r7, #20]

	// Package header and payload together
	char* power_consumption_packet = pvPortMalloc( sizeof((uint8_t)(header->length)) );
 8000d3e:	2001      	movs	r0, #1
 8000d40:	f008 f96e 	bl	8009020 <pvPortMalloc>
 8000d44:	6138      	str	r0, [r7, #16]
	pack( power_consumption_packet, header_char, 0 );
 8000d46:	6938      	ldr	r0, [r7, #16]
 8000d48:	69b9      	ldr	r1, [r7, #24]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f000 f9d6 	bl	80010fc <pack>
	pack( power_consumption_packet, power_consumption_char, HEADER_LENGTH );
 8000d50:	6938      	ldr	r0, [r7, #16]
 8000d52:	6979      	ldr	r1, [r7, #20]
 8000d54:	2205      	movs	r2, #5
 8000d56:	f000 f9d1 	bl	80010fc <pack>

	// Send packet
	sendPacket( "AT+CIPSEND=10", 13, FALSE );
 8000d5a:	480f      	ldr	r0, [pc, #60]	; (8000d98 <sendPowerConsumption+0x8c>)
 8000d5c:	210d      	movs	r1, #13
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f7ff fee6 	bl	8000b30 <sendPacket>
	while(received_string[0] != 'O');
 8000d64:	bf00      	nop
 8000d66:	4b0d      	ldr	r3, [pc, #52]	; (8000d9c <sendPowerConsumption+0x90>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	2b4f      	cmp	r3, #79	; 0x4f
 8000d6e:	d1fa      	bne.n	8000d66 <sendPowerConsumption+0x5a>
	uint8_t result = sendPacket( power_consumption_packet, header->length, TRUE );
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	791b      	ldrb	r3, [r3, #4]
 8000d74:	6938      	ldr	r0, [r7, #16]
 8000d76:	4619      	mov	r1, r3
 8000d78:	2201      	movs	r2, #1
 8000d7a:	f7ff fed9 	bl	8000b30 <sendPacket>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	73fb      	strb	r3, [r7, #15]

	// Free variables
	vPortFree(power_consumption);
 8000d82:	69f8      	ldr	r0, [r7, #28]
 8000d84:	f008 f9e4 	bl	8009150 <vPortFree>
	vPortFree(power_consumption_packet);
 8000d88:	6938      	ldr	r0, [r7, #16]
 8000d8a:	f008 f9e1 	bl	8009150 <vPortFree>

	return result;
 8000d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3720      	adds	r7, #32
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	08009494 	.word	0x08009494
 8000d9c:	2001c258 	.word	0x2001c258

08000da0 <handlePacket>:
 * %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */

/*********************************************************************************************
 * Base function to handle all packets
 *********************************************************************************************/
PacketResult handlePacket( char* packet ) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]

	// Extract the header
	Header* header = pvPortMalloc( sizeof(Header) );
 8000da8:	2005      	movs	r0, #5
 8000daa:	f008 f939 	bl	8009020 <pvPortMalloc>
 8000dae:	6178      	str	r0, [r7, #20]
	char* header_char = (char*) header;
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	613b      	str	r3, [r7, #16]
	unpack( packet, header_char, 0 );
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	6939      	ldr	r1, [r7, #16]
 8000db8:	2200      	movs	r2, #0
 8000dba:	f000 f9c1 	bl	8001140 <unpack>

	// Convert string back to Header struct
	header = (Header*) header_char;
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	617b      	str	r3, [r7, #20]

	// Create packet result struct
	PacketResult packet_result;
	packet_result.type = header->type;
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	78db      	ldrb	r3, [r3, #3]
 8000dc6:	723b      	strb	r3, [r7, #8]

	// Sort by mode of operation and SAV
	if( ((header->mode == allModes) || (header->mode == my_mode )) && (header->dest == MY_ADDR) ) {
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	789b      	ldrb	r3, [r3, #2]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d005      	beq.n	8000ddc <handlePacket+0x3c>
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	789a      	ldrb	r2, [r3, #2]
 8000dd4:	4b36      	ldr	r3, [pc, #216]	; (8000eb0 <handlePacket+0x110>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d157      	bne.n	8000e8c <handlePacket+0xec>
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d153      	bne.n	8000e8c <handlePacket+0xec>

		// Based on packet type, call the correct handle function
		switch( header->type ) {
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	78db      	ldrb	r3, [r3, #3]
 8000de8:	2b04      	cmp	r3, #4
 8000dea:	d83e      	bhi.n	8000e6a <handlePacket+0xca>
 8000dec:	a201      	add	r2, pc, #4	; (adr r2, 8000df4 <handlePacket+0x54>)
 8000dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000df2:	bf00      	nop
 8000df4:	08000e09 	.word	0x08000e09
 8000df8:	08000e17 	.word	0x08000e17
 8000dfc:	08000e25 	.word	0x08000e25
 8000e00:	08000e3d 	.word	0x08000e3d
 8000e04:	08000e5d 	.word	0x08000e5d
			case ack:
				packet_result.result = handleAck( header, packet );
 8000e08:	6978      	ldr	r0, [r7, #20]
 8000e0a:	6879      	ldr	r1, [r7, #4]
 8000e0c:	f000 f852 	bl	8000eb4 <handleAck>
 8000e10:	4603      	mov	r3, r0
 8000e12:	727b      	strb	r3, [r7, #9]
				break;
 8000e14:	e039      	b.n	8000e8a <handlePacket+0xea>
			case ping:
				packet_result.result = handlePing( header, packet );
 8000e16:	6978      	ldr	r0, [r7, #20]
 8000e18:	6879      	ldr	r1, [r7, #4]
 8000e1a:	f000 f869 	bl	8000ef0 <handlePing>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	727b      	strb	r3, [r7, #9]
				break;
 8000e22:	e032      	b.n	8000e8a <handlePacket+0xea>
			case trafficLightCurrent:
				if( my_mode == mode2 ) {
 8000e24:	4b22      	ldr	r3, [pc, #136]	; (8000eb0 <handlePacket+0x110>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d106      	bne.n	8000e3a <handlePacket+0x9a>
					packet_result.result = handleTrafficLightCurrent( header, packet );
 8000e2c:	6978      	ldr	r0, [r7, #20]
 8000e2e:	6879      	ldr	r1, [r7, #4]
 8000e30:	f000 f88c 	bl	8000f4c <handleTrafficLightCurrent>
 8000e34:	4603      	mov	r3, r0
 8000e36:	727b      	strb	r3, [r7, #9]
				}
				break;
 8000e38:	e027      	b.n	8000e8a <handlePacket+0xea>
 8000e3a:	e026      	b.n	8000e8a <handlePacket+0xea>
			case trafficLightFuture:
				if( my_mode == mode3 || my_mode == mode2) {
 8000e3c:	4b1c      	ldr	r3, [pc, #112]	; (8000eb0 <handlePacket+0x110>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b03      	cmp	r3, #3
 8000e42:	d003      	beq.n	8000e4c <handlePacket+0xac>
 8000e44:	4b1a      	ldr	r3, [pc, #104]	; (8000eb0 <handlePacket+0x110>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d106      	bne.n	8000e5a <handlePacket+0xba>
					packet_result.result = handleTrafficLightFuture( header, packet );
 8000e4c:	6978      	ldr	r0, [r7, #20]
 8000e4e:	6879      	ldr	r1, [r7, #4]
 8000e50:	f000 f8ac 	bl	8000fac <handleTrafficLightFuture>
 8000e54:	4603      	mov	r3, r0
 8000e56:	727b      	strb	r3, [r7, #9]
				}
				break;
 8000e58:	e017      	b.n	8000e8a <handlePacket+0xea>
 8000e5a:	e016      	b.n	8000e8a <handlePacket+0xea>
			case changeMode:
				packet_result.result = handleChangeMode( header, packet );
 8000e5c:	6978      	ldr	r0, [r7, #20]
 8000e5e:	6879      	ldr	r1, [r7, #4]
 8000e60:	f000 f91c 	bl	800109c <handleChangeMode>
 8000e64:	4603      	mov	r3, r0
 8000e66:	727b      	strb	r3, [r7, #9]
				break;
 8000e68:	e00f      	b.n	8000e8a <handlePacket+0xea>
			default:
				// If there is no handle function, send back negative Ack
				header->dest = header->addr;
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	785a      	ldrb	r2, [r3, #1]
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	701a      	strb	r2, [r3, #0]
				header->addr = MY_ADDR;
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	2201      	movs	r2, #1
 8000e76:	705a      	strb	r2, [r3, #1]
				header->mode = allModes;
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	709a      	strb	r2, [r3, #2]
				header->type = ack;
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	2200      	movs	r2, #0
 8000e82:	70da      	strb	r2, [r3, #3]
				// sendAck( header, FAILURE );
				packet_result.result = FAILURE;
 8000e84:	2300      	movs	r3, #0
 8000e86:	727b      	strb	r3, [r7, #9]
				break;
 8000e88:	bf00      	nop
		}
	} else {
 8000e8a:	e001      	b.n	8000e90 <handlePacket+0xf0>
		packet_result.result = WRONG_MODE;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	727b      	strb	r3, [r7, #9]
	}

	// Free variables
	vPortFree( header );
 8000e90:	6978      	ldr	r0, [r7, #20]
 8000e92:	f008 f95d 	bl	8009150 <vPortFree>

	return packet_result;
 8000e96:	893b      	ldrh	r3, [r7, #8]
 8000e98:	81bb      	strh	r3, [r7, #12]
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	7b3a      	ldrb	r2, [r7, #12]
 8000e9e:	f362 0307 	bfi	r3, r2, #0, #8
 8000ea2:	7b7a      	ldrb	r2, [r7, #13]
 8000ea4:	f362 230f 	bfi	r3, r2, #8, #8
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3718      	adds	r7, #24
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	2001c24e 	.word	0x2001c24e

08000eb4 <handleAck>:


/*********************************************************************************************
 * Handle Ack
 *********************************************************************************************/
uint8_t handleAck( Header* header, char* packet ) {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]

	// Extract the pay load
	Ack* ack = pvPortMalloc( sizeof(Ack) );
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	f008 f8ae 	bl	8009020 <pvPortMalloc>
 8000ec4:	6178      	str	r0, [r7, #20]
	char* ack_char = (char*) ack;
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	613b      	str	r3, [r7, #16]
	unpack( packet, ack_char, HEADER_LENGTH );
 8000eca:	6838      	ldr	r0, [r7, #0]
 8000ecc:	6939      	ldr	r1, [r7, #16]
 8000ece:	2205      	movs	r2, #5
 8000ed0:	f000 f936 	bl	8001140 <unpack>

	// Convert string back to Ack struct
	ack = (Ack*) ack_char;
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	617b      	str	r3, [r7, #20]

	// Indicate success or failure from packet
	uint8_t result = ack->success;
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	73fb      	strb	r3, [r7, #15]

	// Free variables
	vPortFree( ack );
 8000ede:	6978      	ldr	r0, [r7, #20]
 8000ee0:	f008 f936 	bl	8009150 <vPortFree>

	return result;
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3718      	adds	r7, #24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop

08000ef0 <handlePing>:


/*********************************************************************************************
 * Handle Ping
 *********************************************************************************************/
uint8_t handlePing( Header* header, char* packet ) {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]

	// Extract the pay load
	Ping* ping = pvPortMalloc( sizeof(Ping) );
 8000efa:	2000      	movs	r0, #0
 8000efc:	f008 f890 	bl	8009020 <pvPortMalloc>
 8000f00:	6178      	str	r0, [r7, #20]
	char* ping_char = (char*) ping;
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	613b      	str	r3, [r7, #16]
	unpack( packet, ping_char, HEADER_LENGTH );
 8000f06:	6838      	ldr	r0, [r7, #0]
 8000f08:	6939      	ldr	r1, [r7, #16]
 8000f0a:	2205      	movs	r2, #5
 8000f0c:	f000 f918 	bl	8001140 <unpack>

	// Convert string back to Ping struct
	ping = (Ping*) ping_char;
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	617b      	str	r3, [r7, #20]

	// Restructure header to send back ack
	header->dest = header->addr;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	785a      	ldrb	r2, [r3, #1]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	701a      	strb	r2, [r3, #0]
	header->addr = MY_ADDR;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2201      	movs	r2, #1
 8000f20:	705a      	strb	r2, [r3, #1]
	header->mode = allModes;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	709a      	strb	r2, [r3, #2]
	header->type = ack;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	70da      	strb	r2, [r3, #3]

	// Send Ack
	uint8_t result = sendAck( header, SUCCESS );
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	2101      	movs	r1, #1
 8000f32:	f7ff fe4f 	bl	8000bd4 <sendAck>
 8000f36:	4603      	mov	r3, r0
 8000f38:	73fb      	strb	r3, [r7, #15]

	// Free variables
	vPortFree( ping );
 8000f3a:	6978      	ldr	r0, [r7, #20]
 8000f3c:	f008 f908 	bl	8009150 <vPortFree>

	return result;
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop

08000f4c <handleTrafficLightCurrent>:


/*********************************************************************************************
 * Handle TrafficLightCurrent
 *********************************************************************************************/
uint8_t handleTrafficLightCurrent( Header* header, char* packet ) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]

	// Extract the pay load
	TrafficLightCurrent* current = pvPortMalloc( sizeof(TrafficLightCurrent) );
 8000f56:	2002      	movs	r0, #2
 8000f58:	f008 f862 	bl	8009020 <pvPortMalloc>
 8000f5c:	60f8      	str	r0, [r7, #12]
	char* current_char = (char*) current;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	60bb      	str	r3, [r7, #8]
	unpack( packet, current_char, HEADER_LENGTH );
 8000f62:	6838      	ldr	r0, [r7, #0]
 8000f64:	68b9      	ldr	r1, [r7, #8]
 8000f66:	2205      	movs	r2, #5
 8000f68:	f000 f8ea 	bl	8001140 <unpack>

	// Convert string back to TrafficLightCurrent struct
	current = (TrafficLightCurrent*) current_char;
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	60fb      	str	r3, [r7, #12]

	// Turn on corresponding LED
	// TODO: need to know what direction SAV is headed (northSouth / eastWest)
	LED_LIGHT_PORT->OFF = LED_LIGHT_PINS;
 8000f70:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <handleTrafficLightCurrent+0x54>)
 8000f72:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8000f76:	835a      	strh	r2, [r3, #26]
	LED_LIGHT_PORT->ON = led_light_pin[ current->northSouth ];
 8000f78:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <handleTrafficLightCurrent+0x54>)
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	7812      	ldrb	r2, [r2, #0]
 8000f7e:	4611      	mov	r1, r2
 8000f80:	4a08      	ldr	r2, [pc, #32]	; (8000fa4 <handleTrafficLightCurrent+0x58>)
 8000f82:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000f86:	831a      	strh	r2, [r3, #24]

	// Set global so the SAV knows what the current state is
	traffic_current_state = current->northSouth;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	781a      	ldrb	r2, [r3, #0]
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <handleTrafficLightCurrent+0x5c>)
 8000f8e:	701a      	strb	r2, [r3, #0]

	// Free variables
	vPortFree( current );
 8000f90:	68f8      	ldr	r0, [r7, #12]
 8000f92:	f008 f8dd 	bl	8009150 <vPortFree>

	return SUCCESS;
 8000f96:	2301      	movs	r3, #1
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40020800 	.word	0x40020800
 8000fa4:	20000028 	.word	0x20000028
 8000fa8:	20000001 	.word	0x20000001

08000fac <handleTrafficLightFuture>:


/*********************************************************************************************
 * Handle TrafficLightFuture
 *********************************************************************************************/
uint8_t handleTrafficLightFuture( Header* header, char* packet ) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]

	// Extract the pay load
	TrafficLightFuture* future = pvPortMalloc( sizeof(TrafficLightFuture) );
 8000fb6:	2004      	movs	r0, #4
 8000fb8:	f008 f832 	bl	8009020 <pvPortMalloc>
 8000fbc:	60f8      	str	r0, [r7, #12]
	char* future_char = (char*) future;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	60bb      	str	r3, [r7, #8]
	unpack( packet, future_char, HEADER_LENGTH );
 8000fc2:	6838      	ldr	r0, [r7, #0]
 8000fc4:	68b9      	ldr	r1, [r7, #8]
 8000fc6:	2205      	movs	r2, #5
 8000fc8:	f000 f8ba 	bl	8001140 <unpack>

	// Convert string back to TrafficLightCurrent struct
	future = (TrafficLightFuture*) future_char;
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	60fb      	str	r3, [r7, #12]


	// Set current state
	if( photo_direction == ns ) {
 8000fd0:	4b29      	ldr	r3, [pc, #164]	; (8001078 <handleTrafficLightFuture+0xcc>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d104      	bne.n	8000fe2 <handleTrafficLightFuture+0x36>
		traffic_current_state = future->northSouth;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	781a      	ldrb	r2, [r3, #0]
 8000fdc:	4b27      	ldr	r3, [pc, #156]	; (800107c <handleTrafficLightFuture+0xd0>)
 8000fde:	701a      	strb	r2, [r3, #0]
 8000fe0:	e003      	b.n	8000fea <handleTrafficLightFuture+0x3e>
	} else {
		traffic_current_state = future->eastWest;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	789a      	ldrb	r2, [r3, #2]
 8000fe6:	4b25      	ldr	r3, [pc, #148]	; (800107c <handleTrafficLightFuture+0xd0>)
 8000fe8:	701a      	strb	r2, [r3, #0]
	}

	// Turn on LED corresponding to the current state
	LED_LIGHT_PORT->OFF = LED_LIGHT_PINS;
 8000fea:	4b25      	ldr	r3, [pc, #148]	; (8001080 <handleTrafficLightFuture+0xd4>)
 8000fec:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8000ff0:	835a      	strh	r2, [r3, #26]
	LED_LIGHT_PORT->ON = led_light_pin[ traffic_current_state ];
 8000ff2:	4b23      	ldr	r3, [pc, #140]	; (8001080 <handleTrafficLightFuture+0xd4>)
 8000ff4:	4a21      	ldr	r2, [pc, #132]	; (800107c <handleTrafficLightFuture+0xd0>)
 8000ff6:	7812      	ldrb	r2, [r2, #0]
 8000ff8:	4611      	mov	r1, r2
 8000ffa:	4a22      	ldr	r2, [pc, #136]	; (8001084 <handleTrafficLightFuture+0xd8>)
 8000ffc:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8001000:	831a      	strh	r2, [r3, #24]

	// Blink corresponding LED
	if( my_mode == mode3 ) {
 8001002:	4b21      	ldr	r3, [pc, #132]	; (8001088 <handleTrafficLightFuture+0xdc>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b03      	cmp	r3, #3
 8001008:	d12e      	bne.n	8001068 <handleTrafficLightFuture+0xbc>
		// Set global variables
		traffic_future_state = next_light_state[ traffic_current_state ];
 800100a:	4b1c      	ldr	r3, [pc, #112]	; (800107c <handleTrafficLightFuture+0xd0>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	4a1f      	ldr	r2, [pc, #124]	; (800108c <handleTrafficLightFuture+0xe0>)
 8001010:	5cd2      	ldrb	r2, [r2, r3]
 8001012:	4b1f      	ldr	r3, [pc, #124]	; (8001090 <handleTrafficLightFuture+0xe4>)
 8001014:	701a      	strb	r2, [r3, #0]

		// Time is converted into ms
		if( photo_direction == ns )
 8001016:	4b18      	ldr	r3, [pc, #96]	; (8001078 <handleTrafficLightFuture+0xcc>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d10b      	bne.n	8001036 <handleTrafficLightFuture+0x8a>
			traffic_time = ((uint16_t)future->changeTimeNS *1000);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	785b      	ldrb	r3, [r3, #1]
 8001022:	461a      	mov	r2, r3
 8001024:	0152      	lsls	r2, r2, #5
 8001026:	1ad2      	subs	r2, r2, r3
 8001028:	0092      	lsls	r2, r2, #2
 800102a:	4413      	add	r3, r2
 800102c:	00db      	lsls	r3, r3, #3
 800102e:	b29a      	uxth	r2, r3
 8001030:	4b18      	ldr	r3, [pc, #96]	; (8001094 <handleTrafficLightFuture+0xe8>)
 8001032:	801a      	strh	r2, [r3, #0]
 8001034:	e00a      	b.n	800104c <handleTrafficLightFuture+0xa0>
		else
			traffic_time = ((uint16_t)future->changeTimeEW *1000);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	78db      	ldrb	r3, [r3, #3]
 800103a:	461a      	mov	r2, r3
 800103c:	0152      	lsls	r2, r2, #5
 800103e:	1ad2      	subs	r2, r2, r3
 8001040:	0092      	lsls	r2, r2, #2
 8001042:	4413      	add	r3, r2
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	b29a      	uxth	r2, r3
 8001048:	4b12      	ldr	r3, [pc, #72]	; (8001094 <handleTrafficLightFuture+0xe8>)
 800104a:	801a      	strh	r2, [r3, #0]

		// Check if a timer has already been started
		if( !swIsTimerActive(blinkTrafficLight) ) {
 800104c:	4b12      	ldr	r3, [pc, #72]	; (8001098 <handleTrafficLightFuture+0xec>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fbd7 	bl	8000804 <swIsTimerActive>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d105      	bne.n	8001068 <handleTrafficLightFuture+0xbc>
			// Start timer
			swTimerStart( blinkTrafficLight, 0 );
 800105c:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <handleTrafficLightFuture+0xec>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	2100      	movs	r1, #0
 8001064:	f7ff fb90 	bl	8000788 <swTimerStart>
		}
	}

	// Free variables
	vPortFree( future );
 8001068:	68f8      	ldr	r0, [r7, #12]
 800106a:	f008 f871 	bl	8009150 <vPortFree>

	return SUCCESS;
 800106e:	2301      	movs	r3, #1
}
 8001070:	4618      	mov	r0, r3
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000078 	.word	0x20000078
 800107c:	20000001 	.word	0x20000001
 8001080:	40020800 	.word	0x40020800
 8001084:	20000028 	.word	0x20000028
 8001088:	2001c24e 	.word	0x2001c24e
 800108c:	20000004 	.word	0x20000004
 8001090:	20000000 	.word	0x20000000
 8001094:	20000002 	.word	0x20000002
 8001098:	2001c200 	.word	0x2001c200

0800109c <handleChangeMode>:


/*********************************************************************************************
 * Handle ChangeMode
 *********************************************************************************************/
uint8_t handleChangeMode( Header* header, char* packet ) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]

	// Extract the pay load
	ChangeMode* change_mode = pvPortMalloc( sizeof(ChangeMode) );
 80010a6:	2001      	movs	r0, #1
 80010a8:	f007 ffba 	bl	8009020 <pvPortMalloc>
 80010ac:	60f8      	str	r0, [r7, #12]
	char* change_mode_char = (char*) change_mode;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	60bb      	str	r3, [r7, #8]
	unpack( packet, change_mode_char, HEADER_LENGTH );
 80010b2:	6838      	ldr	r0, [r7, #0]
 80010b4:	68b9      	ldr	r1, [r7, #8]
 80010b6:	2205      	movs	r2, #5
 80010b8:	f000 f842 	bl	8001140 <unpack>

	// Convert string back to ChangeMode struct
	change_mode = (ChangeMode*) change_mode_char;
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	60fb      	str	r3, [r7, #12]

	// Set SAV's Mode of Operation
	my_mode = change_mode->newMode;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	781a      	ldrb	r2, [r3, #0]
 80010c4:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <handleChangeMode+0x54>)
 80010c6:	701a      	strb	r2, [r3, #0]

	// Set corresponding LED
	LED_MODE_PORT->OFF = led_mode_pin[ allModes ];
 80010c8:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <handleChangeMode+0x58>)
 80010ca:	4a0b      	ldr	r2, [pc, #44]	; (80010f8 <handleChangeMode+0x5c>)
 80010cc:	8812      	ldrh	r2, [r2, #0]
 80010ce:	835a      	strh	r2, [r3, #26]
	LED_MODE_PORT->ON = led_mode_pin[ my_mode ];
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <handleChangeMode+0x58>)
 80010d2:	4a07      	ldr	r2, [pc, #28]	; (80010f0 <handleChangeMode+0x54>)
 80010d4:	7812      	ldrb	r2, [r2, #0]
 80010d6:	4611      	mov	r1, r2
 80010d8:	4a07      	ldr	r2, [pc, #28]	; (80010f8 <handleChangeMode+0x5c>)
 80010da:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80010de:	831a      	strh	r2, [r3, #24]

	// Free variables
	vPortFree( change_mode );
 80010e0:	68f8      	ldr	r0, [r7, #12]
 80010e2:	f008 f835 	bl	8009150 <vPortFree>

	return SUCCESS;
 80010e6:	2301      	movs	r3, #1
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	2001c24e 	.word	0x2001c24e
 80010f4:	40020800 	.word	0x40020800
 80010f8:	20000030 	.word	0x20000030

080010fc <pack>:
 * %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */

/*********************************************************************************************
 * Package string into container
 *********************************************************************************************/
void pack( char* container, char* field, uint8_t start ) {
 80010fc:	b480      	push	{r7}
 80010fe:	b087      	sub	sp, #28
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	4613      	mov	r3, r2
 8001108:	71fb      	strb	r3, [r7, #7]

	// Iterate through field, copying each char into the container
	// Note: By adding 48, the integer value is represented as its ascii counterpart
	int i;
	for( i=0; i<=sizeof(field); i++) {
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
 800110e:	e00e      	b.n	800112e <pack+0x32>
		container[start + i] = field[i] + 48;
 8001110:	79fa      	ldrb	r2, [r7, #7]
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	4413      	add	r3, r2
 8001116:	68fa      	ldr	r2, [r7, #12]
 8001118:	4413      	add	r3, r2
 800111a:	697a      	ldr	r2, [r7, #20]
 800111c:	68b9      	ldr	r1, [r7, #8]
 800111e:	440a      	add	r2, r1
 8001120:	7812      	ldrb	r2, [r2, #0]
 8001122:	3230      	adds	r2, #48	; 0x30
 8001124:	b2d2      	uxtb	r2, r2
 8001126:	701a      	strb	r2, [r3, #0]
void pack( char* container, char* field, uint8_t start ) {

	// Iterate through field, copying each char into the container
	// Note: By adding 48, the integer value is represented as its ascii counterpart
	int i;
	for( i=0; i<=sizeof(field); i++) {
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	3301      	adds	r3, #1
 800112c:	617b      	str	r3, [r7, #20]
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	2b04      	cmp	r3, #4
 8001132:	d9ed      	bls.n	8001110 <pack+0x14>
		container[start + i] = field[i] + 48;
	}
}
 8001134:	371c      	adds	r7, #28
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop

08001140 <unpack>:


/*********************************************************************************************
 * Unpack strings from the container
 *********************************************************************************************/
void unpack( char* container, char* field, uint8_t start ) {
 8001140:	b480      	push	{r7}
 8001142:	b087      	sub	sp, #28
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	4613      	mov	r3, r2
 800114c:	71fb      	strb	r3, [r7, #7]

	// Note: By subtracting 48, the ascii is converted back to the correct uint
	// Note: Each packet is of the form: +IPD,(length):(packet)

	// Begin by creating an offset to the actual packet
	int offset = 6;
 800114e:	2306      	movs	r3, #6
 8001150:	617b      	str	r3, [r7, #20]
	while( container[offset] != ':' ) {
 8001152:	e002      	b.n	800115a <unpack+0x1a>
		offset++;
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	3301      	adds	r3, #1
 8001158:	617b      	str	r3, [r7, #20]
	// Note: By subtracting 48, the ascii is converted back to the correct uint
	// Note: Each packet is of the form: +IPD,(length):(packet)

	// Begin by creating an offset to the actual packet
	int offset = 6;
	while( container[offset] != ':' ) {
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	68fa      	ldr	r2, [r7, #12]
 800115e:	4413      	add	r3, r2
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2b3a      	cmp	r3, #58	; 0x3a
 8001164:	d1f6      	bne.n	8001154 <unpack+0x14>
		offset++;
	}
	offset++;
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	3301      	adds	r3, #1
 800116a:	617b      	str	r3, [r7, #20]

	// Iterate through container, copying each char into the field
	int i;
	for( i=0; i<=sizeof(field); i++) {
 800116c:	2300      	movs	r3, #0
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	e010      	b.n	8001194 <unpack+0x54>
		field[i] = container[start + offset + i] - 48;
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	68ba      	ldr	r2, [r7, #8]
 8001176:	4413      	add	r3, r2
 8001178:	79f9      	ldrb	r1, [r7, #7]
 800117a:	697a      	ldr	r2, [r7, #20]
 800117c:	4411      	add	r1, r2
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	440a      	add	r2, r1
 8001182:	68f9      	ldr	r1, [r7, #12]
 8001184:	440a      	add	r2, r1
 8001186:	7812      	ldrb	r2, [r2, #0]
 8001188:	3a30      	subs	r2, #48	; 0x30
 800118a:	b2d2      	uxtb	r2, r2
 800118c:	701a      	strb	r2, [r3, #0]
	}
	offset++;

	// Iterate through container, copying each char into the field
	int i;
	for( i=0; i<=sizeof(field); i++) {
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	3301      	adds	r3, #1
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	2b04      	cmp	r3, #4
 8001198:	d9eb      	bls.n	8001172 <unpack+0x32>
		field[i] = container[start + offset + i] - 48;
	}
}
 800119a:	371c      	adds	r7, #28
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <USART3_IRQHandler>:


/*********************************************************************************************
 * USART IRQ Handler for WiFi module
 *********************************************************************************************/
void USART3_IRQHandler( void ) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0

	// Make sure USART recieve interrupt flag was set
	if( USART_GetITStatus( WIFI_USART, USART_IT_RXNE ) ) {
 80011aa:	481d      	ldr	r0, [pc, #116]	; (8001220 <USART3_IRQHandler+0x7c>)
 80011ac:	f240 5125 	movw	r1, #1317	; 0x525
 80011b0:	f001 fb0e 	bl	80027d0 <USART_GetITStatus>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d02f      	beq.n	800121a <USART3_IRQHandler+0x76>

		// Counter to track packet length
		static uint8_t counter = 0;

		// Character retrieved from data register
		char t = WIFI_USART->DR;
 80011ba:	4b19      	ldr	r3, [pc, #100]	; (8001220 <USART3_IRQHandler+0x7c>)
 80011bc:	889b      	ldrh	r3, [r3, #4]
 80011be:	b29b      	uxth	r3, r3
 80011c0:	71fb      	strb	r3, [r7, #7]

		// Check if string has ended or it exceeded the maximum packet length
		if( (t != '\n') && (counter < MAX_LENGTH)  && (t != '~') ) {
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	2b0a      	cmp	r3, #10
 80011c6:	d012      	beq.n	80011ee <USART3_IRQHandler+0x4a>
 80011c8:	4b16      	ldr	r3, [pc, #88]	; (8001224 <USART3_IRQHandler+0x80>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b0f      	cmp	r3, #15
 80011ce:	d80e      	bhi.n	80011ee <USART3_IRQHandler+0x4a>
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	2b7e      	cmp	r3, #126	; 0x7e
 80011d4:	d00b      	beq.n	80011ee <USART3_IRQHandler+0x4a>
			received_string[counter] = t;
 80011d6:	4b13      	ldr	r3, [pc, #76]	; (8001224 <USART3_IRQHandler+0x80>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	4a13      	ldr	r2, [pc, #76]	; (8001228 <USART3_IRQHandler+0x84>)
 80011dc:	79f9      	ldrb	r1, [r7, #7]
 80011de:	54d1      	strb	r1, [r2, r3]
			counter++;
 80011e0:	4b10      	ldr	r3, [pc, #64]	; (8001224 <USART3_IRQHandler+0x80>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	3301      	adds	r3, #1
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <USART3_IRQHandler+0x80>)
 80011ea:	701a      	strb	r2, [r3, #0]
 80011ec:	e015      	b.n	800121a <USART3_IRQHandler+0x76>
		} else {

			// Reset counter
			counter = 0;
 80011ee:	4b0d      	ldr	r3, [pc, #52]	; (8001224 <USART3_IRQHandler+0x80>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	701a      	strb	r2, [r3, #0]

			// If received_string is a packet, put it in the queue
			if( received_string[0] == '+' ) {
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <USART3_IRQHandler+0x84>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b2b      	cmp	r3, #43	; 0x2b
 80011fc:	d10a      	bne.n	8001214 <USART3_IRQHandler+0x70>
				xQueueSendToBackFromISR( xPacketQueue, &received_string, pdFALSE);
 80011fe:	4b0b      	ldr	r3, [pc, #44]	; (800122c <USART3_IRQHandler+0x88>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4618      	mov	r0, r3
 8001204:	4908      	ldr	r1, [pc, #32]	; (8001228 <USART3_IRQHandler+0x84>)
 8001206:	2200      	movs	r2, #0
 8001208:	2300      	movs	r3, #0
 800120a:	f007 f99b 	bl	8008544 <xQueueGenericSendFromISR>
				process_packet = TRUE;
 800120e:	4b08      	ldr	r3, [pc, #32]	; (8001230 <USART3_IRQHandler+0x8c>)
 8001210:	2201      	movs	r2, #1
 8001212:	701a      	strb	r2, [r3, #0]
			}

			// Clear received_string
			received_string[0] = '\n';
 8001214:	4b04      	ldr	r3, [pc, #16]	; (8001228 <USART3_IRQHandler+0x84>)
 8001216:	220a      	movs	r2, #10
 8001218:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40004800 	.word	0x40004800
 8001224:	20000082 	.word	0x20000082
 8001228:	2001c258 	.word	0x2001c258
 800122c:	2001c254 	.word	0x2001c254
 8001230:	2001c250 	.word	0x2001c250

08001234 <copyString>:


/*********************************************************************************************
 * Copy original string to a new copy
 *********************************************************************************************/
void copyString( volatile char* original, char* new, uint8_t length ) {
 8001234:	b480      	push	{r7}
 8001236:	b087      	sub	sp, #28
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	4613      	mov	r3, r2
 8001240:	71fb      	strb	r3, [r7, #7]

	// Iterate through string and copy each char
	int i;
	for( i=0; i<=length; i++ ) {
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
 8001246:	e00b      	b.n	8001260 <copyString+0x2c>
		new[i] = original[i];
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	4413      	add	r3, r2
 800124e:	697a      	ldr	r2, [r7, #20]
 8001250:	68f9      	ldr	r1, [r7, #12]
 8001252:	440a      	add	r2, r1
 8001254:	7812      	ldrb	r2, [r2, #0]
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	701a      	strb	r2, [r3, #0]
 *********************************************************************************************/
void copyString( volatile char* original, char* new, uint8_t length ) {

	// Iterate through string and copy each char
	int i;
	for( i=0; i<=length; i++ ) {
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	3301      	adds	r3, #1
 800125e:	617b      	str	r3, [r7, #20]
 8001260:	79fa      	ldrb	r2, [r7, #7]
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	429a      	cmp	r2, r3
 8001266:	daef      	bge.n	8001248 <copyString+0x14>
		new[i] = original[i];
	}
}
 8001268:	371c      	adds	r7, #28
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop

08001274 <setMotor>:


/*********************************************************************************************
 * Set the motor output and speed
 *********************************************************************************************/
uint8_t setMotor( MotorOutput motor_output, uint8_t speed ) {
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	71fa      	strb	r2, [r7, #7]
 8001280:	71bb      	strb	r3, [r7, #6]

	switch( motor_output ) {
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	2b03      	cmp	r3, #3
 8001286:	d831      	bhi.n	80012ec <setMotor+0x78>
 8001288:	a201      	add	r2, pc, #4	; (adr r2, 8001290 <setMotor+0x1c>)
 800128a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800128e:	bf00      	nop
 8001290:	080012a1 	.word	0x080012a1
 8001294:	080012b3 	.word	0x080012b3
 8001298:	080012c7 	.word	0x080012c7
 800129c:	080012db 	.word	0x080012db
			case coast:
				pwmSet(0, motor1);
 80012a0:	2000      	movs	r0, #0
 80012a2:	2100      	movs	r1, #0
 80012a4:	f000 f828 	bl	80012f8 <pwmSet>
				pwmSet(0, motor2);
 80012a8:	2000      	movs	r0, #0
 80012aa:	2101      	movs	r1, #1
 80012ac:	f000 f824 	bl	80012f8 <pwmSet>
				break;
 80012b0:	e01c      	b.n	80012ec <setMotor+0x78>
			case reverse:
				pwmSet(0, motor1);
 80012b2:	2000      	movs	r0, #0
 80012b4:	2100      	movs	r1, #0
 80012b6:	f000 f81f 	bl	80012f8 <pwmSet>
				pwmSet(speed, motor2);
 80012ba:	79bb      	ldrb	r3, [r7, #6]
 80012bc:	4618      	mov	r0, r3
 80012be:	2101      	movs	r1, #1
 80012c0:	f000 f81a 	bl	80012f8 <pwmSet>
				break;
 80012c4:	e012      	b.n	80012ec <setMotor+0x78>
			case forward:
				pwmSet(speed, motor1);
 80012c6:	79bb      	ldrb	r3, [r7, #6]
 80012c8:	4618      	mov	r0, r3
 80012ca:	2100      	movs	r1, #0
 80012cc:	f000 f814 	bl	80012f8 <pwmSet>
				pwmSet(0, motor2);
 80012d0:	2000      	movs	r0, #0
 80012d2:	2101      	movs	r1, #1
 80012d4:	f000 f810 	bl	80012f8 <pwmSet>
				break;
 80012d8:	e008      	b.n	80012ec <setMotor+0x78>
			case brake:
				pwmSet(1, motor1);
 80012da:	2001      	movs	r0, #1
 80012dc:	2100      	movs	r1, #0
 80012de:	f000 f80b 	bl	80012f8 <pwmSet>
				pwmSet(1, motor2);
 80012e2:	2001      	movs	r0, #1
 80012e4:	2101      	movs	r1, #1
 80012e6:	f000 f807 	bl	80012f8 <pwmSet>
				break;
 80012ea:	bf00      	nop
	}

	return SUCCESS;
 80012ec:	2301      	movs	r3, #1
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop

080012f8 <pwmSet>:


/*********************************************************************************************
 * Set PWM to given duty cycle
 *********************************************************************************************/
void pwmSet(uint8_t dutyCycle, Motor motor) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b088      	sub	sp, #32
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	71fa      	strb	r2, [r7, #7]
 8001304:	71bb      	strb	r3, [r7, #6]
	// Timer output compare initialization
	TIM_OCInitTypeDef TIM_OC_InitStructure;

	// Configure TIM OC
	TIM_OC_InitStructure.TIM_OCMode = TIM_OCMode_PWM2;					// PWM 1 = Clear on match, PWM 2 = Set on match
 8001306:	2370      	movs	r3, #112	; 0x70
 8001308:	813b      	strh	r3, [r7, #8]
	TIM_OC_InitStructure.TIM_OutputState = TIM_OutputState_Enable;
 800130a:	2301      	movs	r3, #1
 800130c:	817b      	strh	r3, [r7, #10]
	TIM_OC_InitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 800130e:	2302      	movs	r3, #2
 8001310:	82bb      	strh	r3, [r7, #20]

	// Convert duty cycle to TIM pulse
	uint32_t duty = (PWM_TIM_PERIOD + 1) * dutyCycle;
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	f246 227b 	movw	r2, #25211	; 0x627b
 8001318:	fb02 f303 	mul.w	r3, r2, r3
 800131c:	61fb      	str	r3, [r7, #28]
	duty = (uint32_t) ((duty/100));
 800131e:	69fa      	ldr	r2, [r7, #28]
 8001320:	4b19      	ldr	r3, [pc, #100]	; (8001388 <pwmSet+0x90>)
 8001322:	fba3 1302 	umull	r1, r3, r3, r2
 8001326:	095b      	lsrs	r3, r3, #5
 8001328:	61fb      	str	r3, [r7, #28]

	// Set duty cycle
	TIM_OC_InitStructure.TIM_Pulse = duty;
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	613b      	str	r3, [r7, #16]

	// Select the corresponding OCInit function
	switch( motor ) {
 800132e:	79bb      	ldrb	r3, [r7, #6]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d00f      	beq.n	8001354 <pwmSet+0x5c>
 8001334:	2b02      	cmp	r3, #2
 8001336:	d018      	beq.n	800136a <pwmSet+0x72>
 8001338:	2b00      	cmp	r3, #0
 800133a:	d000      	beq.n	800133e <pwmSet+0x46>
		case servo:
			TIM_OC4Init(PWM_TIM, &TIM_OC_InitStructure);
			TIM_OC4PreloadConfig(PWM_TIM, TIM_OCPreload_Enable);
			break;
		default:
			break;
 800133c:	e020      	b.n	8001380 <pwmSet+0x88>
	TIM_OC_InitStructure.TIM_Pulse = duty;

	// Select the corresponding OCInit function
	switch( motor ) {
		case motor1:
			TIM_OC2Init(PWM_TIM, &TIM_OC_InitStructure);
 800133e:	f107 0308 	add.w	r3, r7, #8
 8001342:	4812      	ldr	r0, [pc, #72]	; (800138c <pwmSet+0x94>)
 8001344:	4619      	mov	r1, r3
 8001346:	f001 fdb1 	bl	8002eac <TIM_OC2Init>
			TIM_OC2PreloadConfig(PWM_TIM, TIM_OCPreload_Enable);
 800134a:	4810      	ldr	r0, [pc, #64]	; (800138c <pwmSet+0x94>)
 800134c:	2108      	movs	r1, #8
 800134e:	f002 f861 	bl	8003414 <TIM_OC2PreloadConfig>
			break;
 8001352:	e015      	b.n	8001380 <pwmSet+0x88>
		case motor2:
			TIM_OC3Init(PWM_TIM, &TIM_OC_InitStructure);
 8001354:	f107 0308 	add.w	r3, r7, #8
 8001358:	480c      	ldr	r0, [pc, #48]	; (800138c <pwmSet+0x94>)
 800135a:	4619      	mov	r1, r3
 800135c:	f001 fe2e 	bl	8002fbc <TIM_OC3Init>
			TIM_OC3PreloadConfig(PWM_TIM, TIM_OCPreload_Enable);
 8001360:	480a      	ldr	r0, [pc, #40]	; (800138c <pwmSet+0x94>)
 8001362:	2108      	movs	r1, #8
 8001364:	f002 f874 	bl	8003450 <TIM_OC3PreloadConfig>
			break;
 8001368:	e00a      	b.n	8001380 <pwmSet+0x88>
		case servo:
			TIM_OC4Init(PWM_TIM, &TIM_OC_InitStructure);
 800136a:	f107 0308 	add.w	r3, r7, #8
 800136e:	4807      	ldr	r0, [pc, #28]	; (800138c <pwmSet+0x94>)
 8001370:	4619      	mov	r1, r3
 8001372:	f001 fea9 	bl	80030c8 <TIM_OC4Init>
			TIM_OC4PreloadConfig(PWM_TIM, TIM_OCPreload_Enable);
 8001376:	4805      	ldr	r0, [pc, #20]	; (800138c <pwmSet+0x94>)
 8001378:	2108      	movs	r1, #8
 800137a:	f002 f885 	bl	8003488 <TIM_OC4PreloadConfig>
			break;
 800137e:	bf00      	nop
		default:
			break;
	}
}
 8001380:	3720      	adds	r7, #32
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	51eb851f 	.word	0x51eb851f
 800138c:	40000400 	.word	0x40000400

08001390 <prvSetMotorCallback>:


/*********************************************************************************************
 * Timer callback to read photo resistors
 *********************************************************************************************/
void prvSetMotorCallback( TimerHandle_t pxTimer ) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	static uint8_t ultra_left_counter = 5;
	static uint8_t ultra_right_counter = 5;


	// Consider current state
	if( my_mode == mode2 ) {
 8001398:	4b88      	ldr	r3, [pc, #544]	; (80015bc <prvSetMotorCallback+0x22c>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b02      	cmp	r3, #2
 800139e:	d146      	bne.n	800142e <prvSetMotorCallback+0x9e>
		switch( traffic_current_state ) {
 80013a0:	4b87      	ldr	r3, [pc, #540]	; (80015c0 <prvSetMotorCallback+0x230>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d008      	beq.n	80013ba <prvSetMotorCallback+0x2a>
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d002      	beq.n	80013b2 <prvSetMotorCallback+0x22>
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d031      	beq.n	8001414 <prvSetMotorCallback+0x84>
			case red:
				if( (photo_counter >= 3) && (photo_intersection == FALSE) )
					motor_action = stop;
				break;
			default:
				break;
 80013b0:	e03d      	b.n	800142e <prvSetMotorCallback+0x9e>

	// Consider current state
	if( my_mode == mode2 ) {
		switch( traffic_current_state ) {
			case green:
				motor_action = go;
 80013b2:	4b84      	ldr	r3, [pc, #528]	; (80015c4 <prvSetMotorCallback+0x234>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	701a      	strb	r2, [r3, #0]
				break;
 80013b8:	e039      	b.n	800142e <prvSetMotorCallback+0x9e>
			case yellow:
				if( (photo_counter == 3) && (photo_intersection == FALSE) )
 80013ba:	4b83      	ldr	r3, [pc, #524]	; (80015c8 <prvSetMotorCallback+0x238>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b03      	cmp	r3, #3
 80013c0:	d107      	bne.n	80013d2 <prvSetMotorCallback+0x42>
 80013c2:	4b82      	ldr	r3, [pc, #520]	; (80015cc <prvSetMotorCallback+0x23c>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d103      	bne.n	80013d2 <prvSetMotorCallback+0x42>
					motor_action = stop;
 80013ca:	4b7e      	ldr	r3, [pc, #504]	; (80015c4 <prvSetMotorCallback+0x234>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	701a      	strb	r2, [r3, #0]
 80013d0:	e01f      	b.n	8001412 <prvSetMotorCallback+0x82>
				else if( (photo_counter > 3) && (photo_intersection == FALSE) )
 80013d2:	4b7d      	ldr	r3, [pc, #500]	; (80015c8 <prvSetMotorCallback+0x238>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b03      	cmp	r3, #3
 80013d8:	d907      	bls.n	80013ea <prvSetMotorCallback+0x5a>
 80013da:	4b7c      	ldr	r3, [pc, #496]	; (80015cc <prvSetMotorCallback+0x23c>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d103      	bne.n	80013ea <prvSetMotorCallback+0x5a>
					motor_action = speed;
 80013e2:	4b78      	ldr	r3, [pc, #480]	; (80015c4 <prvSetMotorCallback+0x234>)
 80013e4:	2203      	movs	r2, #3
 80013e6:	701a      	strb	r2, [r3, #0]
 80013e8:	e013      	b.n	8001412 <prvSetMotorCallback+0x82>
				else if( (photo_counter < 3) && (photo_counter > 0) && (photo_intersection == FALSE) )
 80013ea:	4b77      	ldr	r3, [pc, #476]	; (80015c8 <prvSetMotorCallback+0x238>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d80b      	bhi.n	800140a <prvSetMotorCallback+0x7a>
 80013f2:	4b75      	ldr	r3, [pc, #468]	; (80015c8 <prvSetMotorCallback+0x238>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d007      	beq.n	800140a <prvSetMotorCallback+0x7a>
 80013fa:	4b74      	ldr	r3, [pc, #464]	; (80015cc <prvSetMotorCallback+0x23c>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d103      	bne.n	800140a <prvSetMotorCallback+0x7a>
					motor_action = slow;
 8001402:	4b70      	ldr	r3, [pc, #448]	; (80015c4 <prvSetMotorCallback+0x234>)
 8001404:	2202      	movs	r2, #2
 8001406:	701a      	strb	r2, [r3, #0]
 8001408:	e003      	b.n	8001412 <prvSetMotorCallback+0x82>
				else
					motor_action = go;
 800140a:	4b6e      	ldr	r3, [pc, #440]	; (80015c4 <prvSetMotorCallback+0x234>)
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
				break;
 8001410:	e00d      	b.n	800142e <prvSetMotorCallback+0x9e>
 8001412:	e00c      	b.n	800142e <prvSetMotorCallback+0x9e>
			case red:
				if( (photo_counter >= 3) && (photo_intersection == FALSE) )
 8001414:	4b6c      	ldr	r3, [pc, #432]	; (80015c8 <prvSetMotorCallback+0x238>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b02      	cmp	r3, #2
 800141a:	d907      	bls.n	800142c <prvSetMotorCallback+0x9c>
 800141c:	4b6b      	ldr	r3, [pc, #428]	; (80015cc <prvSetMotorCallback+0x23c>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d103      	bne.n	800142c <prvSetMotorCallback+0x9c>
					motor_action = stop;
 8001424:	4b67      	ldr	r3, [pc, #412]	; (80015c4 <prvSetMotorCallback+0x234>)
 8001426:	2201      	movs	r2, #1
 8001428:	701a      	strb	r2, [r3, #0]
				break;
 800142a:	e7ff      	b.n	800142c <prvSetMotorCallback+0x9c>
 800142c:	bf00      	nop
				break;
		}
	}

	// Consider future state
	if( my_mode == 3 ) {
 800142e:	4b63      	ldr	r3, [pc, #396]	; (80015bc <prvSetMotorCallback+0x22c>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b03      	cmp	r3, #3
 8001434:	f040 8086 	bne.w	8001544 <prvSetMotorCallback+0x1b4>
		switch( traffic_current_state ) {
 8001438:	4b61      	ldr	r3, [pc, #388]	; (80015c0 <prvSetMotorCallback+0x230>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d031      	beq.n	80014a4 <prvSetMotorCallback+0x114>
 8001440:	2b02      	cmp	r3, #2
 8001442:	d002      	beq.n	800144a <prvSetMotorCallback+0xba>
 8001444:	2b00      	cmp	r3, #0
 8001446:	d05a      	beq.n	80014fe <prvSetMotorCallback+0x16e>
					motor_action = stop;
				else if( (traffic_time < 1000) && (photo_counter > 0) && (photo_intersection == FALSE))
					motor_action = slow;
				break;
			default:
				break;
 8001448:	e07c      	b.n	8001544 <prvSetMotorCallback+0x1b4>

	// Consider future state
	if( my_mode == 3 ) {
		switch( traffic_current_state ) {
			case green:
				if( (traffic_time > 2000) && (traffic_time < 5000) && (photo_counter < 3) && (photo_intersection == FALSE) )
 800144a:	4b61      	ldr	r3, [pc, #388]	; (80015d0 <prvSetMotorCallback+0x240>)
 800144c:	881b      	ldrh	r3, [r3, #0]
 800144e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001452:	d911      	bls.n	8001478 <prvSetMotorCallback+0xe8>
 8001454:	4b5e      	ldr	r3, [pc, #376]	; (80015d0 <prvSetMotorCallback+0x240>)
 8001456:	881a      	ldrh	r2, [r3, #0]
 8001458:	f241 3387 	movw	r3, #4999	; 0x1387
 800145c:	429a      	cmp	r2, r3
 800145e:	d80b      	bhi.n	8001478 <prvSetMotorCallback+0xe8>
 8001460:	4b59      	ldr	r3, [pc, #356]	; (80015c8 <prvSetMotorCallback+0x238>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b02      	cmp	r3, #2
 8001466:	d807      	bhi.n	8001478 <prvSetMotorCallback+0xe8>
 8001468:	4b58      	ldr	r3, [pc, #352]	; (80015cc <prvSetMotorCallback+0x23c>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d103      	bne.n	8001478 <prvSetMotorCallback+0xe8>
					motor_action = speed;
 8001470:	4b54      	ldr	r3, [pc, #336]	; (80015c4 <prvSetMotorCallback+0x234>)
 8001472:	2203      	movs	r2, #3
 8001474:	701a      	strb	r2, [r3, #0]
 8001476:	e014      	b.n	80014a2 <prvSetMotorCallback+0x112>
				else if( (traffic_time < 1000) && (photo_counter < 3) && (photo_intersection == FALSE) )
 8001478:	4b55      	ldr	r3, [pc, #340]	; (80015d0 <prvSetMotorCallback+0x240>)
 800147a:	881b      	ldrh	r3, [r3, #0]
 800147c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001480:	d20b      	bcs.n	800149a <prvSetMotorCallback+0x10a>
 8001482:	4b51      	ldr	r3, [pc, #324]	; (80015c8 <prvSetMotorCallback+0x238>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b02      	cmp	r3, #2
 8001488:	d807      	bhi.n	800149a <prvSetMotorCallback+0x10a>
 800148a:	4b50      	ldr	r3, [pc, #320]	; (80015cc <prvSetMotorCallback+0x23c>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d103      	bne.n	800149a <prvSetMotorCallback+0x10a>
					motor_action = slow;
 8001492:	4b4c      	ldr	r3, [pc, #304]	; (80015c4 <prvSetMotorCallback+0x234>)
 8001494:	2202      	movs	r2, #2
 8001496:	701a      	strb	r2, [r3, #0]
 8001498:	e003      	b.n	80014a2 <prvSetMotorCallback+0x112>
				else
					motor_action = go;
 800149a:	4b4a      	ldr	r3, [pc, #296]	; (80015c4 <prvSetMotorCallback+0x234>)
 800149c:	2200      	movs	r2, #0
 800149e:	701a      	strb	r2, [r3, #0]
				break;
 80014a0:	e050      	b.n	8001544 <prvSetMotorCallback+0x1b4>
 80014a2:	e04f      	b.n	8001544 <prvSetMotorCallback+0x1b4>
			case yellow:
				if( (photo_counter == 3) && (photo_intersection == FALSE) )
 80014a4:	4b48      	ldr	r3, [pc, #288]	; (80015c8 <prvSetMotorCallback+0x238>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b03      	cmp	r3, #3
 80014aa:	d107      	bne.n	80014bc <prvSetMotorCallback+0x12c>
 80014ac:	4b47      	ldr	r3, [pc, #284]	; (80015cc <prvSetMotorCallback+0x23c>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d103      	bne.n	80014bc <prvSetMotorCallback+0x12c>
					motor_action = stop;
 80014b4:	4b43      	ldr	r3, [pc, #268]	; (80015c4 <prvSetMotorCallback+0x234>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	701a      	strb	r2, [r3, #0]
 80014ba:	e01f      	b.n	80014fc <prvSetMotorCallback+0x16c>
				else if( (photo_counter > 3) && (photo_intersection == FALSE) )
 80014bc:	4b42      	ldr	r3, [pc, #264]	; (80015c8 <prvSetMotorCallback+0x238>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b03      	cmp	r3, #3
 80014c2:	d907      	bls.n	80014d4 <prvSetMotorCallback+0x144>
 80014c4:	4b41      	ldr	r3, [pc, #260]	; (80015cc <prvSetMotorCallback+0x23c>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d103      	bne.n	80014d4 <prvSetMotorCallback+0x144>
					motor_action = speed;
 80014cc:	4b3d      	ldr	r3, [pc, #244]	; (80015c4 <prvSetMotorCallback+0x234>)
 80014ce:	2203      	movs	r2, #3
 80014d0:	701a      	strb	r2, [r3, #0]
 80014d2:	e013      	b.n	80014fc <prvSetMotorCallback+0x16c>
				else if( (photo_counter < 3) && (photo_counter > 0) && (photo_intersection == FALSE) )
 80014d4:	4b3c      	ldr	r3, [pc, #240]	; (80015c8 <prvSetMotorCallback+0x238>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d80b      	bhi.n	80014f4 <prvSetMotorCallback+0x164>
 80014dc:	4b3a      	ldr	r3, [pc, #232]	; (80015c8 <prvSetMotorCallback+0x238>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d007      	beq.n	80014f4 <prvSetMotorCallback+0x164>
 80014e4:	4b39      	ldr	r3, [pc, #228]	; (80015cc <prvSetMotorCallback+0x23c>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d103      	bne.n	80014f4 <prvSetMotorCallback+0x164>
					motor_action = slow;
 80014ec:	4b35      	ldr	r3, [pc, #212]	; (80015c4 <prvSetMotorCallback+0x234>)
 80014ee:	2202      	movs	r2, #2
 80014f0:	701a      	strb	r2, [r3, #0]
 80014f2:	e003      	b.n	80014fc <prvSetMotorCallback+0x16c>
				else
					motor_action = go;
 80014f4:	4b33      	ldr	r3, [pc, #204]	; (80015c4 <prvSetMotorCallback+0x234>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	701a      	strb	r2, [r3, #0]
				break;
 80014fa:	e023      	b.n	8001544 <prvSetMotorCallback+0x1b4>
 80014fc:	e022      	b.n	8001544 <prvSetMotorCallback+0x1b4>
			case red:
				if( (traffic_time > 1000) && (photo_counter >= 3) && (photo_intersection == FALSE) )
 80014fe:	4b34      	ldr	r3, [pc, #208]	; (80015d0 <prvSetMotorCallback+0x240>)
 8001500:	881b      	ldrh	r3, [r3, #0]
 8001502:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001506:	d90b      	bls.n	8001520 <prvSetMotorCallback+0x190>
 8001508:	4b2f      	ldr	r3, [pc, #188]	; (80015c8 <prvSetMotorCallback+0x238>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b02      	cmp	r3, #2
 800150e:	d907      	bls.n	8001520 <prvSetMotorCallback+0x190>
 8001510:	4b2e      	ldr	r3, [pc, #184]	; (80015cc <prvSetMotorCallback+0x23c>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d103      	bne.n	8001520 <prvSetMotorCallback+0x190>
					motor_action = stop;
 8001518:	4b2a      	ldr	r3, [pc, #168]	; (80015c4 <prvSetMotorCallback+0x234>)
 800151a:	2201      	movs	r2, #1
 800151c:	701a      	strb	r2, [r3, #0]
 800151e:	e010      	b.n	8001542 <prvSetMotorCallback+0x1b2>
				else if( (traffic_time < 1000) && (photo_counter > 0) && (photo_intersection == FALSE))
 8001520:	4b2b      	ldr	r3, [pc, #172]	; (80015d0 <prvSetMotorCallback+0x240>)
 8001522:	881b      	ldrh	r3, [r3, #0]
 8001524:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001528:	d20b      	bcs.n	8001542 <prvSetMotorCallback+0x1b2>
 800152a:	4b27      	ldr	r3, [pc, #156]	; (80015c8 <prvSetMotorCallback+0x238>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d007      	beq.n	8001542 <prvSetMotorCallback+0x1b2>
 8001532:	4b26      	ldr	r3, [pc, #152]	; (80015cc <prvSetMotorCallback+0x23c>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d103      	bne.n	8001542 <prvSetMotorCallback+0x1b2>
					motor_action = slow;
 800153a:	4b22      	ldr	r3, [pc, #136]	; (80015c4 <prvSetMotorCallback+0x234>)
 800153c:	2202      	movs	r2, #2
 800153e:	701a      	strb	r2, [r3, #0]
				break;
 8001540:	e7ff      	b.n	8001542 <prvSetMotorCallback+0x1b2>
 8001542:	bf00      	nop
		}
	}


	// Set motor speed based on selected action
	switch( motor_action ) {
 8001544:	4b1f      	ldr	r3, [pc, #124]	; (80015c4 <prvSetMotorCallback+0x234>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b03      	cmp	r3, #3
 800154a:	d857      	bhi.n	80015fc <prvSetMotorCallback+0x26c>
 800154c:	a201      	add	r2, pc, #4	; (adr r2, 8001554 <prvSetMotorCallback+0x1c4>)
 800154e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001552:	bf00      	nop
 8001554:	08001565 	.word	0x08001565
 8001558:	08001591 	.word	0x08001591
 800155c:	0800159b 	.word	0x0800159b
 8001560:	080015dd 	.word	0x080015dd
		case go:
			// If going around curve, go full speed
			if( (steer > 55) || (steer < 45) ) {
 8001564:	4b1b      	ldr	r3, [pc, #108]	; (80015d4 <prvSetMotorCallback+0x244>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b37      	cmp	r3, #55	; 0x37
 800156a:	d803      	bhi.n	8001574 <prvSetMotorCallback+0x1e4>
 800156c:	4b19      	ldr	r3, [pc, #100]	; (80015d4 <prvSetMotorCallback+0x244>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b2c      	cmp	r3, #44	; 0x2c
 8001572:	d803      	bhi.n	800157c <prvSetMotorCallback+0x1ec>
				motor_speed = 100;
 8001574:	4b18      	ldr	r3, [pc, #96]	; (80015d8 <prvSetMotorCallback+0x248>)
 8001576:	2264      	movs	r2, #100	; 0x64
 8001578:	701a      	strb	r2, [r3, #0]
 800157a:	e002      	b.n	8001582 <prvSetMotorCallback+0x1f2>
			} else {
				motor_speed = 90;
 800157c:	4b16      	ldr	r3, [pc, #88]	; (80015d8 <prvSetMotorCallback+0x248>)
 800157e:	225a      	movs	r2, #90	; 0x5a
 8001580:	701a      	strb	r2, [r3, #0]
			}
			setMotor(forward, motor_speed);
 8001582:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <prvSetMotorCallback+0x248>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2002      	movs	r0, #2
 8001588:	4619      	mov	r1, r3
 800158a:	f7ff fe73 	bl	8001274 <setMotor>
			break;
 800158e:	e035      	b.n	80015fc <prvSetMotorCallback+0x26c>
		case stop:
			setMotor(brake, 0);
 8001590:	2003      	movs	r0, #3
 8001592:	2100      	movs	r1, #0
 8001594:	f7ff fe6e 	bl	8001274 <setMotor>
			break;
 8001598:	e030      	b.n	80015fc <prvSetMotorCallback+0x26c>
		case slow:
			if( motor_speed > 89 )
 800159a:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <prvSetMotorCallback+0x248>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b59      	cmp	r3, #89	; 0x59
 80015a0:	d905      	bls.n	80015ae <prvSetMotorCallback+0x21e>
				motor_speed -= 5;
 80015a2:	4b0d      	ldr	r3, [pc, #52]	; (80015d8 <prvSetMotorCallback+0x248>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	3b05      	subs	r3, #5
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <prvSetMotorCallback+0x248>)
 80015ac:	701a      	strb	r2, [r3, #0]
			setMotor(forward, motor_speed);
 80015ae:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <prvSetMotorCallback+0x248>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2002      	movs	r0, #2
 80015b4:	4619      	mov	r1, r3
 80015b6:	f7ff fe5d 	bl	8001274 <setMotor>
			break;
 80015ba:	e01f      	b.n	80015fc <prvSetMotorCallback+0x26c>
 80015bc:	2001c24e 	.word	0x2001c24e
 80015c0:	20000001 	.word	0x20000001
 80015c4:	2001c1fc 	.word	0x2001c1fc
 80015c8:	20000077 	.word	0x20000077
 80015cc:	2000001d 	.word	0x2000001d
 80015d0:	20000002 	.word	0x20000002
 80015d4:	20000024 	.word	0x20000024
 80015d8:	2001c1e0 	.word	0x2001c1e0
		case speed:
			if( motor_speed < 96 )
 80015dc:	4b2b      	ldr	r3, [pc, #172]	; (800168c <prvSetMotorCallback+0x2fc>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b5f      	cmp	r3, #95	; 0x5f
 80015e2:	d805      	bhi.n	80015f0 <prvSetMotorCallback+0x260>
				motor_speed += 5;
 80015e4:	4b29      	ldr	r3, [pc, #164]	; (800168c <prvSetMotorCallback+0x2fc>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	3305      	adds	r3, #5
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	4b27      	ldr	r3, [pc, #156]	; (800168c <prvSetMotorCallback+0x2fc>)
 80015ee:	701a      	strb	r2, [r3, #0]
			setMotor(forward, motor_speed);
 80015f0:	4b26      	ldr	r3, [pc, #152]	; (800168c <prvSetMotorCallback+0x2fc>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2002      	movs	r0, #2
 80015f6:	4619      	mov	r1, r3
 80015f8:	f7ff fe3c 	bl	8001274 <setMotor>
	}


	// Modulate steering based on ultrasonic
	if( distCM_left < 20 ) {
 80015fc:	4b24      	ldr	r3, [pc, #144]	; (8001690 <prvSetMotorCallback+0x300>)
 80015fe:	881b      	ldrh	r3, [r3, #0]
 8001600:	2b13      	cmp	r3, #19
 8001602:	d817      	bhi.n	8001634 <prvSetMotorCallback+0x2a4>
		// Increment counter
		ultra_left_counter++;
 8001604:	4b23      	ldr	r3, [pc, #140]	; (8001694 <prvSetMotorCallback+0x304>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	3301      	adds	r3, #1
 800160a:	b2da      	uxtb	r2, r3
 800160c:	4b21      	ldr	r3, [pc, #132]	; (8001694 <prvSetMotorCallback+0x304>)
 800160e:	701a      	strb	r2, [r3, #0]

		// Limit extreme values
//		if( (steer > 36) && (steer < 50) && (ultra_counter > 5) ) {
		if( (steer > 36) && (ultra_left_counter > 5) ) {
 8001610:	4b21      	ldr	r3, [pc, #132]	; (8001698 <prvSetMotorCallback+0x308>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b24      	cmp	r3, #36	; 0x24
 8001616:	d910      	bls.n	800163a <prvSetMotorCallback+0x2aa>
 8001618:	4b1e      	ldr	r3, [pc, #120]	; (8001694 <prvSetMotorCallback+0x304>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b05      	cmp	r3, #5
 800161e:	d90c      	bls.n	800163a <prvSetMotorCallback+0x2aa>
			steer -= 1;
 8001620:	4b1d      	ldr	r3, [pc, #116]	; (8001698 <prvSetMotorCallback+0x308>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	3b01      	subs	r3, #1
 8001626:	b2da      	uxtb	r2, r3
 8001628:	4b1b      	ldr	r3, [pc, #108]	; (8001698 <prvSetMotorCallback+0x308>)
 800162a:	701a      	strb	r2, [r3, #0]
			ultra_left_counter = 0;
 800162c:	4b19      	ldr	r3, [pc, #100]	; (8001694 <prvSetMotorCallback+0x304>)
 800162e:	2200      	movs	r2, #0
 8001630:	701a      	strb	r2, [r3, #0]
 8001632:	e002      	b.n	800163a <prvSetMotorCallback+0x2aa>
		}
	} else {
		ultra_left_counter = 5;
 8001634:	4b17      	ldr	r3, [pc, #92]	; (8001694 <prvSetMotorCallback+0x304>)
 8001636:	2205      	movs	r2, #5
 8001638:	701a      	strb	r2, [r3, #0]
	}

	if( distCM_right < 20 ) {
 800163a:	4b18      	ldr	r3, [pc, #96]	; (800169c <prvSetMotorCallback+0x30c>)
 800163c:	881b      	ldrh	r3, [r3, #0]
 800163e:	2b13      	cmp	r3, #19
 8001640:	d817      	bhi.n	8001672 <prvSetMotorCallback+0x2e2>
		// Increment counter
		ultra_right_counter++;
 8001642:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <prvSetMotorCallback+0x310>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	3301      	adds	r3, #1
 8001648:	b2da      	uxtb	r2, r3
 800164a:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <prvSetMotorCallback+0x310>)
 800164c:	701a      	strb	r2, [r3, #0]

		// Limit extreme values
		if( (steer < 66) && (ultra_right_counter > 5) ) {
 800164e:	4b12      	ldr	r3, [pc, #72]	; (8001698 <prvSetMotorCallback+0x308>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b41      	cmp	r3, #65	; 0x41
 8001654:	d810      	bhi.n	8001678 <prvSetMotorCallback+0x2e8>
 8001656:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <prvSetMotorCallback+0x310>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b05      	cmp	r3, #5
 800165c:	d90c      	bls.n	8001678 <prvSetMotorCallback+0x2e8>
			steer += 1;
 800165e:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <prvSetMotorCallback+0x308>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	3301      	adds	r3, #1
 8001664:	b2da      	uxtb	r2, r3
 8001666:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <prvSetMotorCallback+0x308>)
 8001668:	701a      	strb	r2, [r3, #0]
			ultra_right_counter = 0;
 800166a:	4b0d      	ldr	r3, [pc, #52]	; (80016a0 <prvSetMotorCallback+0x310>)
 800166c:	2200      	movs	r2, #0
 800166e:	701a      	strb	r2, [r3, #0]
 8001670:	e002      	b.n	8001678 <prvSetMotorCallback+0x2e8>
		}
	} else {
		ultra_right_counter = 5;
 8001672:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <prvSetMotorCallback+0x310>)
 8001674:	2205      	movs	r2, #5
 8001676:	701a      	strb	r2, [r3, #0]
	}

	// Set steering
	pwmSet(steer, servo);
 8001678:	4b07      	ldr	r3, [pc, #28]	; (8001698 <prvSetMotorCallback+0x308>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	2102      	movs	r1, #2
 8001680:	f7ff fe3a 	bl	80012f8 <pwmSet>

}
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	2001c1e0 	.word	0x2001c1e0
 8001690:	2001c1f4 	.word	0x2001c1f4
 8001694:	20000025 	.word	0x20000025
 8001698:	20000024 	.word	0x20000024
 800169c:	2001c21a 	.word	0x2001c21a
 80016a0:	20000026 	.word	0x20000026

080016a4 <main>:


#include "main.h"


int main(void) {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af04      	add	r7, sp, #16

	// Create initial task to connect to Base Station
 	xTaskCreate( prvSetupTask, "", 300 * sizeof(uint8_t), NULL, setupPriority, xSetupHandle );
 80016aa:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <main+0x2c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2201      	movs	r2, #1
 80016b0:	9200      	str	r2, [sp, #0]
 80016b2:	9301      	str	r3, [sp, #4]
 80016b4:	2300      	movs	r3, #0
 80016b6:	9302      	str	r3, [sp, #8]
 80016b8:	2300      	movs	r3, #0
 80016ba:	9303      	str	r3, [sp, #12]
 80016bc:	4805      	ldr	r0, [pc, #20]	; (80016d4 <main+0x30>)
 80016be:	4906      	ldr	r1, [pc, #24]	; (80016d8 <main+0x34>)
 80016c0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80016c4:	2300      	movs	r3, #0
 80016c6:	f005 f8af 	bl	8006828 <xTaskGenericCreate>

	// Start the scheduler which begins to run the tasks
	vTaskStartScheduler();
 80016ca:	f005 fca1 	bl	8007010 <vTaskStartScheduler>
	/* If all is well, the scheduler will now be running, and the following line
	will never be reached.  If the following line does execute, then there was
	insufficient FreeRTOS heap memory available for the idle and/or timer tasks
	to be created.  See the memory management section on the FreeRTOS web site
	for more details. */
	for( ;; );
 80016ce:	e7fe      	b.n	80016ce <main+0x2a>
 80016d0:	20000084 	.word	0x20000084
 80016d4:	080016dd 	.word	0x080016dd
 80016d8:	080094a4 	.word	0x080094a4

080016dc <prvSetupTask>:


/*********************************************************************************************
 * Setup hardware/software
 *********************************************************************************************/
void prvSetupTask( void *pvParameters ) {
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af04      	add	r7, sp, #16
 80016e2:	6078      	str	r0, [r7, #4]

	// Setup hardware
	prvSetupHardware();
 80016e4:	f000 f86e 	bl	80017c4 <prvSetupHardware>

	// Test LEDs and indicate program is starting
	prvBlinkLeds();
 80016e8:	f000 f880 	bl	80017ec <prvBlinkLeds>

	// ******************************************************************************************************** //
	// Ultrasonic tasks
//	xTaskCreate( prvUltrasonic1Task, "", configMINIMAL_STACK_SIZE, NULL, ultrasonicPriority, xUltrasonic1Handle );
	xTaskCreate( prvUltrasonic2Task, "", configMINIMAL_STACK_SIZE, NULL, ultrasonicPriority, xUltrasonic2Handle );
 80016ec:	4b28      	ldr	r3, [pc, #160]	; (8001790 <prvSetupTask+0xb4>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2202      	movs	r2, #2
 80016f2:	9200      	str	r2, [sp, #0]
 80016f4:	9301      	str	r3, [sp, #4]
 80016f6:	2300      	movs	r3, #0
 80016f8:	9302      	str	r3, [sp, #8]
 80016fa:	2300      	movs	r3, #0
 80016fc:	9303      	str	r3, [sp, #12]
 80016fe:	4825      	ldr	r0, [pc, #148]	; (8001794 <prvSetupTask+0xb8>)
 8001700:	4925      	ldr	r1, [pc, #148]	; (8001798 <prvSetupTask+0xbc>)
 8001702:	2246      	movs	r2, #70	; 0x46
 8001704:	2300      	movs	r3, #0
 8001706:	f005 f88f 	bl	8006828 <xTaskGenericCreate>
	xTaskCreate( prvUltrasonic3Task, "", configMINIMAL_STACK_SIZE, NULL, ultrasonicPriority, xUltrasonic3Handle );
 800170a:	4b24      	ldr	r3, [pc, #144]	; (800179c <prvSetupTask+0xc0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2202      	movs	r2, #2
 8001710:	9200      	str	r2, [sp, #0]
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	2300      	movs	r3, #0
 8001716:	9302      	str	r3, [sp, #8]
 8001718:	2300      	movs	r3, #0
 800171a:	9303      	str	r3, [sp, #12]
 800171c:	4820      	ldr	r0, [pc, #128]	; (80017a0 <prvSetupTask+0xc4>)
 800171e:	491e      	ldr	r1, [pc, #120]	; (8001798 <prvSetupTask+0xbc>)
 8001720:	2246      	movs	r2, #70	; 0x46
 8001722:	2300      	movs	r3, #0
 8001724:	f005 f880 	bl	8006828 <xTaskGenericCreate>

	traffic_current_state = green;
 8001728:	4b1e      	ldr	r3, [pc, #120]	; (80017a4 <prvSetupTask+0xc8>)
 800172a:	2202      	movs	r2, #2
 800172c:	701a      	strb	r2, [r3, #0]

	// Set motors
	swTimerStart( set_motor, 0 );
 800172e:	4b1e      	ldr	r3, [pc, #120]	; (80017a8 <prvSetupTask+0xcc>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	2100      	movs	r1, #0
 8001736:	f7ff f827 	bl	8000788 <swTimerStart>

	// Read Photo Resistor
	swTimerStart( read_photo, 0 );
 800173a:	4b1c      	ldr	r3, [pc, #112]	; (80017ac <prvSetupTask+0xd0>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4618      	mov	r0, r3
 8001740:	2100      	movs	r1, #0
 8001742:	f7ff f821 	bl	8000788 <swTimerStart>


	// ******************************************************************************************************** //

	// Setup WiFi connection
	prvSetupWifi();
 8001746:	f000 f8af 	bl	80018a8 <prvSetupWifi>

	// Set initial mode to allModes
	my_mode = allModes;
 800174a:	4b19      	ldr	r3, [pc, #100]	; (80017b0 <prvSetupTask+0xd4>)
 800174c:	2200      	movs	r2, #0
 800174e:	701a      	strb	r2, [r3, #0]

	// Create queue for packets
	xPacketQueue = xQueueCreate( maxPacketQueueLength, MAX_LENGTH*sizeof(uint8_t) );
 8001750:	2005      	movs	r0, #5
 8001752:	2110      	movs	r1, #16
 8001754:	2200      	movs	r2, #0
 8001756:	f006 fdd3 	bl	8008300 <xQueueGenericCreate>
 800175a:	4602      	mov	r2, r0
 800175c:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <prvSetupTask+0xd8>)
 800175e:	601a      	str	r2, [r3, #0]

	// Create initial task to connect to Base Station
	xTaskCreate( prvConnectTask, "", 300 * sizeof(uint8_t), NULL, connectPriority, xConnectHandle );
 8001760:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <prvSetupTask+0xdc>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2201      	movs	r2, #1
 8001766:	9200      	str	r2, [sp, #0]
 8001768:	9301      	str	r3, [sp, #4]
 800176a:	2300      	movs	r3, #0
 800176c:	9302      	str	r3, [sp, #8]
 800176e:	2300      	movs	r3, #0
 8001770:	9303      	str	r3, [sp, #12]
 8001772:	4812      	ldr	r0, [pc, #72]	; (80017bc <prvSetupTask+0xe0>)
 8001774:	4908      	ldr	r1, [pc, #32]	; (8001798 <prvSetupTask+0xbc>)
 8001776:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800177a:	2300      	movs	r3, #0
 800177c:	f005 f854 	bl	8006828 <xTaskGenericCreate>

	// Delete this task
	vTaskDelete( xSetupHandle );
 8001780:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <prvSetupTask+0xe4>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f005 f8f1 	bl	800696c <vTaskDelete>
}
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	2000006c 	.word	0x2000006c
 8001794:	08000235 	.word	0x08000235
 8001798:	080094a4 	.word	0x080094a4
 800179c:	20000070 	.word	0x20000070
 80017a0:	080002a1 	.word	0x080002a1
 80017a4:	20000001 	.word	0x20000001
 80017a8:	2001c1e4 	.word	0x2001c1e4
 80017ac:	2001c208 	.word	0x2001c208
 80017b0:	2001c24e 	.word	0x2001c24e
 80017b4:	2001c254 	.word	0x2001c254
 80017b8:	20000088 	.word	0x20000088
 80017bc:	080018e5 	.word	0x080018e5
 80017c0:	20000084 	.word	0x20000084

080017c4 <prvSetupHardware>:


/*********************************************************************************************
 * Setup relevant hardware
 *********************************************************************************************/
static void prvSetupHardware( void ) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
	// Ensure that all 4 interrupt priority bits are used as the pre-emption priority
	NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );
 80017c8:	f44f 7040 	mov.w	r0, #768	; 0x300
 80017cc:	f004 fc9c 	bl	8006108 <NVIC_PriorityGroupConfig>

	// Setup LEDs
	ledInit();
 80017d0:	f000 f9ae 	bl	8001b30 <ledInit>

	// Setup WiFi
	wifiInit();
 80017d4:	f000 f9f8 	bl	8001bc8 <wifiInit>

	// Setup PWM
	pwmInit();
 80017d8:	f000 fa54 	bl	8001c84 <pwmInit>

	// Setup Photo Resistors
	photoResistorInit();
 80017dc:	f000 fab4 	bl	8001d48 <photoResistorInit>

	// Setup Measured Power
	measuredPowerInit();
 80017e0:	f000 fafc 	bl	8001ddc <measuredPowerInit>

	// Setup Ultrasonic
	ultrasonicInit();
 80017e4:	f000 fb1e 	bl	8001e24 <ultrasonicInit>
}
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop

080017ec <prvBlinkLeds>:


/*********************************************************************************************
 * Blink LEDs on board
 *********************************************************************************************/
static void prvBlinkLeds( void ) {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
	// Turn on and off each LED in order

	// Error
	LED_ERROR_PORT->ON = LED_ERROR_PIN;
 80017f0:	4b2b      	ldr	r3, [pc, #172]	; (80018a0 <prvBlinkLeds+0xb4>)
 80017f2:	2280      	movs	r2, #128	; 0x80
 80017f4:	831a      	strh	r2, [r3, #24]
	swDelay(100);
 80017f6:	2064      	movs	r0, #100	; 0x64
 80017f8:	f7ff f824 	bl	8000844 <swDelay>
	LED_ERROR_PORT->OFF = LED_ERROR_PIN;
 80017fc:	4b28      	ldr	r3, [pc, #160]	; (80018a0 <prvBlinkLeds+0xb4>)
 80017fe:	2280      	movs	r2, #128	; 0x80
 8001800:	835a      	strh	r2, [r3, #26]

	// Wifi
	LED_WIFI_PORT->ON = LED_WIFI_RX_PIN;
 8001802:	4b27      	ldr	r3, [pc, #156]	; (80018a0 <prvBlinkLeds+0xb4>)
 8001804:	2220      	movs	r2, #32
 8001806:	831a      	strh	r2, [r3, #24]
	swDelay(100);
 8001808:	2064      	movs	r0, #100	; 0x64
 800180a:	f7ff f81b 	bl	8000844 <swDelay>
	LED_WIFI_PORT->OFF = LED_WIFI_RX_PIN;
 800180e:	4b24      	ldr	r3, [pc, #144]	; (80018a0 <prvBlinkLeds+0xb4>)
 8001810:	2220      	movs	r2, #32
 8001812:	835a      	strh	r2, [r3, #26]

	LED_WIFI_PORT->ON = LED_WIFI_TX_PIN;
 8001814:	4b22      	ldr	r3, [pc, #136]	; (80018a0 <prvBlinkLeds+0xb4>)
 8001816:	2240      	movs	r2, #64	; 0x40
 8001818:	831a      	strh	r2, [r3, #24]
	swDelay(100);
 800181a:	2064      	movs	r0, #100	; 0x64
 800181c:	f7ff f812 	bl	8000844 <swDelay>
	LED_WIFI_PORT->OFF = LED_WIFI_TX_PIN;
 8001820:	4b1f      	ldr	r3, [pc, #124]	; (80018a0 <prvBlinkLeds+0xb4>)
 8001822:	2240      	movs	r2, #64	; 0x40
 8001824:	835a      	strh	r2, [r3, #26]

	// Lights
	LED_LIGHT_PORT->ON = LED_LIGHT_GREEN_PIN;
 8001826:	4b1f      	ldr	r3, [pc, #124]	; (80018a4 <prvBlinkLeds+0xb8>)
 8001828:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800182c:	831a      	strh	r2, [r3, #24]
	swDelay(100);
 800182e:	2064      	movs	r0, #100	; 0x64
 8001830:	f7ff f808 	bl	8000844 <swDelay>
	LED_LIGHT_PORT->OFF = LED_LIGHT_GREEN_PIN;
 8001834:	4b1b      	ldr	r3, [pc, #108]	; (80018a4 <prvBlinkLeds+0xb8>)
 8001836:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800183a:	835a      	strh	r2, [r3, #26]

	LED_LIGHT_PORT->ON = LED_LIGHT_YELLOW_PIN;
 800183c:	4b19      	ldr	r3, [pc, #100]	; (80018a4 <prvBlinkLeds+0xb8>)
 800183e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001842:	831a      	strh	r2, [r3, #24]
	swDelay(100);
 8001844:	2064      	movs	r0, #100	; 0x64
 8001846:	f7fe fffd 	bl	8000844 <swDelay>
	LED_LIGHT_PORT->OFF = LED_LIGHT_YELLOW_PIN;
 800184a:	4b16      	ldr	r3, [pc, #88]	; (80018a4 <prvBlinkLeds+0xb8>)
 800184c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001850:	835a      	strh	r2, [r3, #26]

	LED_LIGHT_PORT->ON = LED_LIGHT_RED_PIN;
 8001852:	4b14      	ldr	r3, [pc, #80]	; (80018a4 <prvBlinkLeds+0xb8>)
 8001854:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001858:	831a      	strh	r2, [r3, #24]
	swDelay(100);
 800185a:	2064      	movs	r0, #100	; 0x64
 800185c:	f7fe fff2 	bl	8000844 <swDelay>
	LED_LIGHT_PORT->OFF = LED_LIGHT_RED_PIN;
 8001860:	4b10      	ldr	r3, [pc, #64]	; (80018a4 <prvBlinkLeds+0xb8>)
 8001862:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001866:	835a      	strh	r2, [r3, #26]

	// Mode
	LED_MODE_PORT->ON = LED_MODE_1_PIN;
 8001868:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <prvBlinkLeds+0xb8>)
 800186a:	2210      	movs	r2, #16
 800186c:	831a      	strh	r2, [r3, #24]
	swDelay(100);
 800186e:	2064      	movs	r0, #100	; 0x64
 8001870:	f7fe ffe8 	bl	8000844 <swDelay>
	LED_MODE_PORT->OFF = LED_MODE_1_PIN;
 8001874:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <prvBlinkLeds+0xb8>)
 8001876:	2210      	movs	r2, #16
 8001878:	835a      	strh	r2, [r3, #26]

	LED_MODE_PORT->ON = LED_MODE_2_PIN;
 800187a:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <prvBlinkLeds+0xb8>)
 800187c:	2220      	movs	r2, #32
 800187e:	831a      	strh	r2, [r3, #24]
	swDelay(100);
 8001880:	2064      	movs	r0, #100	; 0x64
 8001882:	f7fe ffdf 	bl	8000844 <swDelay>
	LED_MODE_PORT->OFF = LED_MODE_2_PIN;
 8001886:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <prvBlinkLeds+0xb8>)
 8001888:	2220      	movs	r2, #32
 800188a:	835a      	strh	r2, [r3, #26]

	LED_MODE_PORT->ON = LED_MODE_3_PIN;
 800188c:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <prvBlinkLeds+0xb8>)
 800188e:	2240      	movs	r2, #64	; 0x40
 8001890:	831a      	strh	r2, [r3, #24]
	swDelay(100);
 8001892:	2064      	movs	r0, #100	; 0x64
 8001894:	f7fe ffd6 	bl	8000844 <swDelay>
	LED_MODE_PORT->OFF = LED_MODE_3_PIN;
 8001898:	4b02      	ldr	r3, [pc, #8]	; (80018a4 <prvBlinkLeds+0xb8>)
 800189a:	2240      	movs	r2, #64	; 0x40
 800189c:	835a      	strh	r2, [r3, #26]
}
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40020400 	.word	0x40020400
 80018a4:	40020800 	.word	0x40020800

080018a8 <prvSetupWifi>:


/*********************************************************************************************
 * Setup Wifi connection
 *********************************************************************************************/
static void prvSetupWifi( void ) {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
	// Turn on Echo commands (for Arduino)
//	sendPacket( "ATE1", 4);

	// Delay to give Wifi chip time to boot up
	swDelay(5000);
 80018ac:	f241 3088 	movw	r0, #5000	; 0x1388
 80018b0:	f7fe ffc8 	bl	8000844 <swDelay>

	// Send AT
	sendPacket( "AT", 2, FALSE);
 80018b4:	4809      	ldr	r0, [pc, #36]	; (80018dc <prvSetupWifi+0x34>)
 80018b6:	2102      	movs	r1, #2
 80018b8:	2200      	movs	r2, #0
 80018ba:	f7ff f939 	bl	8000b30 <sendPacket>
	swDelay(500);
 80018be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018c2:	f7fe ffbf 	bl	8000844 <swDelay>
	// Connect to Wifi
//	sendPacket( "AT+CWJAP=\"OhmWreckers\",\"123\"", 28, FALSE);
//	swDelay(5000);

	// Connect to IP and set up TCP connection
	sendPacket( "AT+CIPSTART=\"TCP\",\"192.168.101.101\",1001", 40, FALSE);
 80018c6:	4806      	ldr	r0, [pc, #24]	; (80018e0 <prvSetupWifi+0x38>)
 80018c8:	2128      	movs	r1, #40	; 0x28
 80018ca:	2200      	movs	r2, #0
 80018cc:	f7ff f930 	bl	8000b30 <sendPacket>
	swDelay(2000);
 80018d0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80018d4:	f7fe ffb6 	bl	8000844 <swDelay>
}
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	080094a8 	.word	0x080094a8
 80018e0:	080094ac 	.word	0x080094ac

080018e4 <prvConnectTask>:
 * Initial bootup task to connect to Base Station
 * 		* Connect to Base Station 		- Send Ping packet
 * 		* Wait for response 			- Receive Ack packet
 * 		* If successful					- Turn on WiFi LEDs
 *********************************************************************************************/
void prvConnectTask( void *pvParameters ) {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08a      	sub	sp, #40	; 0x28
 80018e8:	af04      	add	r7, sp, #16
 80018ea:	6078      	str	r0, [r7, #4]

	// Setup local variables
	uint8_t send_ping = TRUE;
 80018ec:	2301      	movs	r3, #1
 80018ee:	75fb      	strb	r3, [r7, #23]

	// Let task run infinitely
	for(;;) {

		if( send_ping ) {
 80018f0:	7dfb      	ldrb	r3, [r7, #23]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d017      	beq.n	8001926 <prvConnectTask+0x42>
			// Setup header to Base Station
			Header* header = pvPortMalloc( sizeof(Header) );
 80018f6:	2005      	movs	r0, #5
 80018f8:	f007 fb92 	bl	8009020 <pvPortMalloc>
 80018fc:	6138      	str	r0, [r7, #16]
			header->dest = baseStation;
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	2202      	movs	r2, #2
 8001902:	701a      	strb	r2, [r3, #0]
			header->addr = MY_ADDR;
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	2201      	movs	r2, #1
 8001908:	705a      	strb	r2, [r3, #1]
			header->mode = allModes;
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	2200      	movs	r2, #0
 800190e:	709a      	strb	r2, [r3, #2]
			header->type = ping;
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	2201      	movs	r2, #1
 8001914:	70da      	strb	r2, [r3, #3]

			sendPing( header );
 8001916:	6938      	ldr	r0, [r7, #16]
 8001918:	f7ff f99c 	bl	8000c54 <sendPing>

			vPortFree(header);
 800191c:	6938      	ldr	r0, [r7, #16]
 800191e:	f007 fc17 	bl	8009150 <vPortFree>

			send_ping = FALSE;
 8001922:	2300      	movs	r3, #0
 8001924:	75fb      	strb	r3, [r7, #23]
		}

		// Continue to send Ping packet until get an Ack
		if( process_packet ) {
 8001926:	4b1f      	ldr	r3, [pc, #124]	; (80019a4 <prvConnectTask+0xc0>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d038      	beq.n	80019a0 <prvConnectTask+0xbc>

			// Create local string to represent the packet
			char* packet = pvPortMalloc( MAX_LENGTH*sizeof(uint8_t) );
 800192e:	2010      	movs	r0, #16
 8001930:	f007 fb76 	bl	8009020 <pvPortMalloc>
 8001934:	60f8      	str	r0, [r7, #12]

			// Pop packet from queue
			xQueueReceive( xPacketQueue, packet, 0 );
 8001936:	4b1c      	ldr	r3, [pc, #112]	; (80019a8 <prvConnectTask+0xc4>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	68f9      	ldr	r1, [r7, #12]
 800193e:	2200      	movs	r2, #0
 8001940:	2300      	movs	r3, #0
 8001942:	f006 fe9d 	bl	8008680 <xQueueGenericReceive>

			// Process packet
			PacketResult packet_result = handlePacket( packet );
 8001946:	68f8      	ldr	r0, [r7, #12]
 8001948:	f7ff fa2a 	bl	8000da0 <handlePacket>
 800194c:	4603      	mov	r3, r0
 800194e:	813b      	strh	r3, [r7, #8]

			// Free variables
			vPortFree( packet );
 8001950:	68f8      	ldr	r0, [r7, #12]
 8001952:	f007 fbfd 	bl	8009150 <vPortFree>

			if( (packet_result.result == SUCCESS) && (packet_result.type == ack) ) {
 8001956:	7a7b      	ldrb	r3, [r7, #9]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d11e      	bne.n	800199a <prvConnectTask+0xb6>
 800195c:	7a3b      	ldrb	r3, [r7, #8]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d11b      	bne.n	800199a <prvConnectTask+0xb6>
				// Turn on LEDs to indicate success
				LED_WIFI_PORT->ON = LED_WIFI_TX_PIN | LED_WIFI_RX_PIN;
 8001962:	4b12      	ldr	r3, [pc, #72]	; (80019ac <prvConnectTask+0xc8>)
 8001964:	2260      	movs	r2, #96	; 0x60
 8001966:	831a      	strh	r2, [r3, #24]

				// Reset process_packet
				process_packet = FALSE;
 8001968:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <prvConnectTask+0xc0>)
 800196a:	2200      	movs	r2, #0
 800196c:	701a      	strb	r2, [r3, #0]

				// If successful, move on to next task
				xTaskCreate( prvModeOfOperationTask, "", 300 * sizeof(uint8_t), NULL, modeOfOperationPriority, xModeOfOperationHandle );
 800196e:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <prvConnectTask+0xcc>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2201      	movs	r2, #1
 8001974:	9200      	str	r2, [sp, #0]
 8001976:	9301      	str	r3, [sp, #4]
 8001978:	2300      	movs	r3, #0
 800197a:	9302      	str	r3, [sp, #8]
 800197c:	2300      	movs	r3, #0
 800197e:	9303      	str	r3, [sp, #12]
 8001980:	480c      	ldr	r0, [pc, #48]	; (80019b4 <prvConnectTask+0xd0>)
 8001982:	490d      	ldr	r1, [pc, #52]	; (80019b8 <prvConnectTask+0xd4>)
 8001984:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001988:	2300      	movs	r3, #0
 800198a:	f004 ff4d 	bl	8006828 <xTaskGenericCreate>

				// Delete this task
				vTaskDelete( xConnectHandle );
 800198e:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <prvConnectTask+0xd8>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f004 ffea 	bl	800696c <vTaskDelete>
 8001998:	e002      	b.n	80019a0 <prvConnectTask+0xbc>
			}
			 else {
				 send_ping = TRUE;
 800199a:	2301      	movs	r3, #1
 800199c:	75fb      	strb	r3, [r7, #23]
			}

		}
	}
 800199e:	e7a7      	b.n	80018f0 <prvConnectTask+0xc>
 80019a0:	e7a6      	b.n	80018f0 <prvConnectTask+0xc>
 80019a2:	bf00      	nop
 80019a4:	2001c250 	.word	0x2001c250
 80019a8:	2001c254 	.word	0x2001c254
 80019ac:	40020400 	.word	0x40020400
 80019b0:	2000008c 	.word	0x2000008c
 80019b4:	080019c1 	.word	0x080019c1
 80019b8:	080094a4 	.word	0x080094a4
 80019bc:	20000088 	.word	0x20000088

080019c0 <prvModeOfOperationTask>:
/*********************************************************************************************
 * Initial bootup task to setup default mode of operation
 * 		* Indicate SAV needs to set default mode of operation
 * 		* Wait for changeMode packet
 *********************************************************************************************/
void prvModeOfOperationTask( void *pvParameters ) {
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08a      	sub	sp, #40	; 0x28
 80019c4:	af04      	add	r7, sp, #16
 80019c6:	6078      	str	r0, [r7, #4]

	// Send SetMode packet
	Header* header = pvPortMalloc( sizeof(Header) );
 80019c8:	2005      	movs	r0, #5
 80019ca:	f007 fb29 	bl	8009020 <pvPortMalloc>
 80019ce:	6178      	str	r0, [r7, #20]
	header->dest = baseStation;
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	2202      	movs	r2, #2
 80019d4:	701a      	strb	r2, [r3, #0]
	header->addr = MY_ADDR;
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	2201      	movs	r2, #1
 80019da:	705a      	strb	r2, [r3, #1]
	header->mode = allModes;
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	2200      	movs	r2, #0
 80019e0:	709a      	strb	r2, [r3, #2]
	header->type = setMode;
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	2205      	movs	r2, #5
 80019e6:	70da      	strb	r2, [r3, #3]
	sendSetMode( header );
 80019e8:	6978      	ldr	r0, [r7, #20]
 80019ea:	f7ff f961 	bl	8000cb0 <sendSetMode>

	// Let task run infinitely
	for(;;) {

		if( process_packet ) {
 80019ee:	4b20      	ldr	r3, [pc, #128]	; (8001a70 <prvModeOfOperationTask+0xb0>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d03b      	beq.n	8001a6e <prvModeOfOperationTask+0xae>

			// Create local string to represent the packet
			char* packet = pvPortMalloc( MAX_LENGTH*sizeof(uint8_t) );
 80019f6:	2010      	movs	r0, #16
 80019f8:	f007 fb12 	bl	8009020 <pvPortMalloc>
 80019fc:	6138      	str	r0, [r7, #16]

			// Pop packet from queue
			xQueueReceive( xPacketQueue, packet, 0 );
 80019fe:	4b1d      	ldr	r3, [pc, #116]	; (8001a74 <prvModeOfOperationTask+0xb4>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	6939      	ldr	r1, [r7, #16]
 8001a06:	2200      	movs	r2, #0
 8001a08:	2300      	movs	r3, #0
 8001a0a:	f006 fe39 	bl	8008680 <xQueueGenericReceive>

			// Process packet
			PacketResult packet_result = handlePacket( packet );
 8001a0e:	6938      	ldr	r0, [r7, #16]
 8001a10:	f7ff f9c6 	bl	8000da0 <handlePacket>
 8001a14:	4603      	mov	r3, r0
 8001a16:	81bb      	strh	r3, [r7, #12]

			// Free variables
			vPortFree( packet );
 8001a18:	6938      	ldr	r0, [r7, #16]
 8001a1a:	f007 fb99 	bl	8009150 <vPortFree>

			if( (packet_result.result == SUCCESS) && (packet_result.type == changeMode) ) {
 8001a1e:	7b7b      	ldrb	r3, [r7, #13]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d11b      	bne.n	8001a5c <prvModeOfOperationTask+0x9c>
 8001a24:	7b3b      	ldrb	r3, [r7, #12]
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	d118      	bne.n	8001a5c <prvModeOfOperationTask+0x9c>

				// Reset process_packet
				process_packet = FALSE;
 8001a2a:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <prvModeOfOperationTask+0xb0>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	701a      	strb	r2, [r3, #0]

				// If successful, move on to next task
				xTaskCreate( prvTrafficLightTask, "", ( unsigned short ) 300, NULL, trafficLightPriority, xTrafficLightHandle );
 8001a30:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <prvModeOfOperationTask+0xb8>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2201      	movs	r2, #1
 8001a36:	9200      	str	r2, [sp, #0]
 8001a38:	9301      	str	r3, [sp, #4]
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	9302      	str	r3, [sp, #8]
 8001a3e:	2300      	movs	r3, #0
 8001a40:	9303      	str	r3, [sp, #12]
 8001a42:	480e      	ldr	r0, [pc, #56]	; (8001a7c <prvModeOfOperationTask+0xbc>)
 8001a44:	490e      	ldr	r1, [pc, #56]	; (8001a80 <prvModeOfOperationTask+0xc0>)
 8001a46:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	f004 feec 	bl	8006828 <xTaskGenericCreate>

				// Delete this task
				vTaskDelete( xModeOfOperationHandle );
 8001a50:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <prvModeOfOperationTask+0xc4>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f004 ff89 	bl	800696c <vTaskDelete>
 8001a5a:	e008      	b.n	8001a6e <prvModeOfOperationTask+0xae>
			} else {
				// Throw error
				LED_ERROR_PORT->ON &= LED_ERROR_PIN;
 8001a5c:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <prvModeOfOperationTask+0xc8>)
 8001a5e:	4a0a      	ldr	r2, [pc, #40]	; (8001a88 <prvModeOfOperationTask+0xc8>)
 8001a60:	8b12      	ldrh	r2, [r2, #24]
 8001a62:	b292      	uxth	r2, r2
 8001a64:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001a68:	b292      	uxth	r2, r2
 8001a6a:	831a      	strh	r2, [r3, #24]
			}
		}
	}
 8001a6c:	e7bf      	b.n	80019ee <prvModeOfOperationTask+0x2e>
 8001a6e:	e7be      	b.n	80019ee <prvModeOfOperationTask+0x2e>
 8001a70:	2001c250 	.word	0x2001c250
 8001a74:	2001c254 	.word	0x2001c254
 8001a78:	20000090 	.word	0x20000090
 8001a7c:	08001a8d 	.word	0x08001a8d
 8001a80:	080094a4 	.word	0x080094a4
 8001a84:	2000008c 	.word	0x2000008c
 8001a88:	40020400 	.word	0x40020400

08001a8c <prvTrafficLightTask>:

/*********************************************************************************************
 * Task to handle (TrafficLight) packets
 * 		*
 *********************************************************************************************/
void prvTrafficLightTask( void *pvParameters ) {
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]

	// Read Measured Power
	swTimerStart( read_power, 0 );
 8001a94:	4b16      	ldr	r3, [pc, #88]	; (8001af0 <prvTrafficLightTask+0x64>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	f7fe fe74 	bl	8000788 <swTimerStart>

	// Set motors
	swTimerStart( set_motor, 0 );
 8001aa0:	4b14      	ldr	r3, [pc, #80]	; (8001af4 <prvTrafficLightTask+0x68>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	f7fe fe6e 	bl	8000788 <swTimerStart>

	// Read Photo Resistor
	swTimerStart( read_photo, 0 );
 8001aac:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <prvTrafficLightTask+0x6c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	f7fe fe68 	bl	8000788 <swTimerStart>

	// Let task run infinitely
	for(;;) {

		if( process_packet ) {
 8001ab8:	4b10      	ldr	r3, [pc, #64]	; (8001afc <prvTrafficLightTask+0x70>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d015      	beq.n	8001aec <prvTrafficLightTask+0x60>

			// Create local string to represent the packet
			char* packet = pvPortMalloc( MAX_LENGTH*sizeof(uint8_t) );
 8001ac0:	2010      	movs	r0, #16
 8001ac2:	f007 faad 	bl	8009020 <pvPortMalloc>
 8001ac6:	60f8      	str	r0, [r7, #12]

			// Pop packet from queue
			xQueueReceive( xPacketQueue, packet, 0 );
 8001ac8:	4b0d      	ldr	r3, [pc, #52]	; (8001b00 <prvTrafficLightTask+0x74>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	68f9      	ldr	r1, [r7, #12]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	f006 fdd4 	bl	8008680 <xQueueGenericReceive>

			// Process packet
			handlePacket( packet );
 8001ad8:	68f8      	ldr	r0, [r7, #12]
 8001ada:	f7ff f961 	bl	8000da0 <handlePacket>

			// Free variables
			vPortFree( packet );
 8001ade:	68f8      	ldr	r0, [r7, #12]
 8001ae0:	f007 fb36 	bl	8009150 <vPortFree>

			// Reset process_packet
			process_packet = FALSE;
 8001ae4:	4b05      	ldr	r3, [pc, #20]	; (8001afc <prvTrafficLightTask+0x70>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	701a      	strb	r2, [r3, #0]
		}
	}
 8001aea:	e7e5      	b.n	8001ab8 <prvTrafficLightTask+0x2c>
 8001aec:	e7e4      	b.n	8001ab8 <prvTrafficLightTask+0x2c>
 8001aee:	bf00      	nop
 8001af0:	2001c214 	.word	0x2001c214
 8001af4:	2001c1e4 	.word	0x2001c1e4
 8001af8:	2001c208 	.word	0x2001c208
 8001afc:	2001c250 	.word	0x2001c250
 8001b00:	2001c254 	.word	0x2001c254

08001b04 <vApplicationMallocFailedHook>:
/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 * Functions to handle errors if they occur
 *%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */

void vApplicationMallocFailedHook( void )
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
	free memory available in the FreeRTOS heap.  pvPortMalloc() is called
	internally by FreeRTOS API functions that create tasks, queues, software
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */

	for( ;; );
 8001b08:	e7fe      	b.n	8001b08 <vApplicationMallocFailedHook+0x4>
 8001b0a:	bf00      	nop

08001b0c <vApplicationStackOverflowHook>:

/*********************************************************************************************
 * Functions to handle errors if they occur
 *********************************************************************************************/
void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	for( ;; );
 8001b16:	e7fe      	b.n	8001b16 <vApplicationStackOverflowHook+0xa>

08001b18 <vApplicationIdleHook>:

/*********************************************************************************************
 * Functions to handle errors if they occur
 *********************************************************************************************/
void vApplicationIdleHook( void )
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
volatile size_t xFreeStackSpace;

	/* This function is called on each cycle of the idle task.  In this case it
	does nothing useful, other than report the amout of FreeRTOS heap that
	remains unallocated. */
	xFreeStackSpace = xPortGetFreeHeapSize();
 8001b1e:	f007 fb4f 	bl	80091c0 <xPortGetFreeHeapSize>
 8001b22:	4603      	mov	r3, r0
 8001b24:	607b      	str	r3, [r7, #4]

	if( xFreeStackSpace > 100 )
 8001b26:	687b      	ldr	r3, [r7, #4]
		/* By now, the kernel has allocated everything it is going to, so
		if there is a lot of heap remaining unallocated then
		the value of configTOTAL_HEAP_SIZE in FreeRTOSConfig.h can be
		reduced accordingly. */
	}
}
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop

08001b30 <ledInit>:
void ADC_Configuration(void);

/*********************************************************************************************
 * Initialize LEDs
 *********************************************************************************************/
void ledInit() {
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef  GPIO_InitStructure;

	// Enable clock
	RCC_AHB1PeriphClockCmd( LED_LIGHT_CLK | LED_WIFI_CLK | LED_MODE_CLK | LED_ERROR_CLK, ENABLE);
 8001b36:	2006      	movs	r0, #6
 8001b38:	2101      	movs	r1, #1
 8001b3a:	f003 f809 	bl	8004b50 <RCC_AHB1PeriphClockCmd>

	// Configure GPIO
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001b42:	2302      	movs	r3, #2
 8001b44:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001b46:	2300      	movs	r3, #0
 8001b48:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	71fb      	strb	r3, [r7, #7]

	GPIO_InitStructure.GPIO_Pin = LED_LIGHT_PINS;
 8001b4e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001b52:	603b      	str	r3, [r7, #0]
	GPIO_Init(LED_LIGHT_PORT, &GPIO_InitStructure);
 8001b54:	463b      	mov	r3, r7
 8001b56:	4818      	ldr	r0, [pc, #96]	; (8001bb8 <ledInit+0x88>)
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f003 fae3 	bl	8005124 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = LED_WIFI_PINS;
 8001b5e:	2360      	movs	r3, #96	; 0x60
 8001b60:	603b      	str	r3, [r7, #0]
	GPIO_Init(LED_WIFI_PORT, &GPIO_InitStructure);
 8001b62:	463b      	mov	r3, r7
 8001b64:	4815      	ldr	r0, [pc, #84]	; (8001bbc <ledInit+0x8c>)
 8001b66:	4619      	mov	r1, r3
 8001b68:	f003 fadc 	bl	8005124 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = LED_MODE_PINS;
 8001b6c:	2370      	movs	r3, #112	; 0x70
 8001b6e:	603b      	str	r3, [r7, #0]
	GPIO_Init(LED_MODE_PORT, &GPIO_InitStructure);
 8001b70:	463b      	mov	r3, r7
 8001b72:	4811      	ldr	r0, [pc, #68]	; (8001bb8 <ledInit+0x88>)
 8001b74:	4619      	mov	r1, r3
 8001b76:	f003 fad5 	bl	8005124 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = LED_ERROR_PIN;
 8001b7a:	2380      	movs	r3, #128	; 0x80
 8001b7c:	603b      	str	r3, [r7, #0]
	GPIO_Init(LED_ERROR_PORT, &GPIO_InitStructure);
 8001b7e:	463b      	mov	r3, r7
 8001b80:	480e      	ldr	r0, [pc, #56]	; (8001bbc <ledInit+0x8c>)
 8001b82:	4619      	mov	r1, r3
 8001b84:	f003 face 	bl	8005124 <GPIO_Init>

	// Make sure all LEDs are off
	LED_LIGHT_PORT->OFF = LED_LIGHT_PINS;
 8001b88:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <ledInit+0x88>)
 8001b8a:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8001b8e:	835a      	strh	r2, [r3, #26]
	LED_WIFI_PORT->OFF = LED_WIFI_PINS;
 8001b90:	4b0a      	ldr	r3, [pc, #40]	; (8001bbc <ledInit+0x8c>)
 8001b92:	2260      	movs	r2, #96	; 0x60
 8001b94:	835a      	strh	r2, [r3, #26]
	LED_MODE_PORT->OFF = LED_MODE_PINS;
 8001b96:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <ledInit+0x88>)
 8001b98:	2270      	movs	r2, #112	; 0x70
 8001b9a:	835a      	strh	r2, [r3, #26]
	LED_ERROR_PORT->OFF = LED_ERROR_PIN;
 8001b9c:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <ledInit+0x8c>)
 8001b9e:	2280      	movs	r2, #128	; 0x80
 8001ba0:	835a      	strh	r2, [r3, #26]

	// Initialize Traffic Light timer
	blinkTrafficLight = swTimerInit( 100, REPEAT, prvblinkTrafficLightCallback );
 8001ba2:	2064      	movs	r0, #100	; 0x64
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	4a06      	ldr	r2, [pc, #24]	; (8001bc0 <ledInit+0x90>)
 8001ba8:	f7fe fdd4 	bl	8000754 <swTimerInit>
 8001bac:	4602      	mov	r2, r0
 8001bae:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <ledInit+0x94>)
 8001bb0:	601a      	str	r2, [r3, #0]
}
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40020800 	.word	0x40020800
 8001bbc:	40020400 	.word	0x40020400
 8001bc0:	0800046d 	.word	0x0800046d
 8001bc4:	2001c200 	.word	0x2001c200

08001bc8 <wifiInit>:


/*********************************************************************************************
 * Initialize WiFi USART GPIO
 *********************************************************************************************/
void wifiInit() {
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef     GPIO_InitStruct;

	// Enable clock
	RCC_AHB1PeriphClockCmd(WIFI_CLK, ENABLE);
 8001bce:	2002      	movs	r0, #2
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	f002 ffbd 	bl	8004b50 <RCC_AHB1PeriphClockCmd>

	// Set Pins to alternate function
	GPIO_PinAFConfig(WIFI_PORT, WIFI_TX_PINSOURCE, WIFI_AF);
 8001bd6:	480f      	ldr	r0, [pc, #60]	; (8001c14 <wifiInit+0x4c>)
 8001bd8:	210a      	movs	r1, #10
 8001bda:	2207      	movs	r2, #7
 8001bdc:	f003 fc10 	bl	8005400 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(WIFI_PORT, WIFI_RX_PINSOURCE, WIFI_AF);
 8001be0:	480c      	ldr	r0, [pc, #48]	; (8001c14 <wifiInit+0x4c>)
 8001be2:	210b      	movs	r1, #11
 8001be4:	2207      	movs	r2, #7
 8001be6:	f003 fc0b 	bl	8005400 <GPIO_PinAFConfig>

	// Initialize pins as alternating function
	GPIO_InitStruct.GPIO_Pin = WIFI_TX_PIN | WIFI_RX_PIN;
 8001bea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001bee:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	713b      	strb	r3, [r7, #4]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	717b      	strb	r3, [r7, #5]
	GPIO_Init(WIFI_PORT, &GPIO_InitStruct);
 8001c00:	463b      	mov	r3, r7
 8001c02:	4804      	ldr	r0, [pc, #16]	; (8001c14 <wifiInit+0x4c>)
 8001c04:	4619      	mov	r1, r3
 8001c06:	f003 fa8d 	bl	8005124 <GPIO_Init>

	wifiConfig();
 8001c0a:	f000 f805 	bl	8001c18 <wifiConfig>
}
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40020400 	.word	0x40020400

08001c18 <wifiConfig>:


/*********************************************************************************************
 * Initialize WiFi USART
 *********************************************************************************************/
void wifiConfig() {
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
	USART_InitTypeDef USART_InitStruct;
	NVIC_InitTypeDef NVIC_InitStruct;

	// Enable clock
	RCC_APB1PeriphClockCmd(WIFI_USART_CLK, ENABLE);
 8001c1e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001c22:	2101      	movs	r1, #1
 8001c24:	f002 ffee 	bl	8004c04 <RCC_APB1PeriphClockCmd>

	// Initialize USART
	USART_InitStruct.USART_BaudRate = WIFI_USART_BAUD;
 8001c28:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001c2c:	60bb      	str	r3, [r7, #8]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	82bb      	strh	r3, [r7, #20]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 8001c32:	230c      	movs	r3, #12
 8001c34:	827b      	strh	r3, [r7, #18]
	USART_InitStruct.USART_Parity = USART_Parity_No;
 8001c36:	2300      	movs	r3, #0
 8001c38:	823b      	strh	r3, [r7, #16]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	81fb      	strh	r3, [r7, #14]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	81bb      	strh	r3, [r7, #12]
	USART_Cmd(WIFI_USART, ENABLE);
 8001c42:	480f      	ldr	r0, [pc, #60]	; (8001c80 <wifiConfig+0x68>)
 8001c44:	2101      	movs	r1, #1
 8001c46:	f000 fb2b 	bl	80022a0 <USART_Cmd>
	USART_Init(WIFI_USART, &USART_InitStruct);
 8001c4a:	f107 0308 	add.w	r3, r7, #8
 8001c4e:	480c      	ldr	r0, [pc, #48]	; (8001c80 <wifiConfig+0x68>)
 8001c50:	4619      	mov	r1, r3
 8001c52:	f000 fa0f 	bl	8002074 <USART_Init>

	// Enable RX interrupt
	USART_ITConfig(WIFI_USART, USART_IT_RXNE, ENABLE);
 8001c56:	480a      	ldr	r0, [pc, #40]	; (8001c80 <wifiConfig+0x68>)
 8001c58:	f240 5125 	movw	r1, #1317	; 0x525
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f000 fd43 	bl	80026e8 <USART_ITConfig>

	// Initialize NVIC
	NVIC_InitStruct.NVIC_IRQChannel = WIFI_USART_IRQ;
 8001c62:	2327      	movs	r3, #39	; 0x27
 8001c64:	713b      	strb	r3, [r7, #4]
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8001c66:	2301      	movs	r3, #1
 8001c68:	71fb      	strb	r3, [r7, #7]
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	717b      	strb	r3, [r7, #5]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	71bb      	strb	r3, [r7, #6]
	NVIC_Init(&NVIC_InitStruct);
 8001c72:	1d3b      	adds	r3, r7, #4
 8001c74:	4618      	mov	r0, r3
 8001c76:	f004 fa59 	bl	800612c <NVIC_Init>
}
 8001c7a:	3718      	adds	r7, #24
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40004800 	.word	0x40004800

08001c84 <pwmInit>:


/*********************************************************************************************
 * Initialize PWM GPIO
 *********************************************************************************************/
void pwmInit() {
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	// Enable clock
	RCC_AHB1PeriphClockCmd(PWM_MOTOR_CLK | PWM_SERVO_CLK, ENABLE);
 8001c8a:	2004      	movs	r0, #4
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	f002 ff5f 	bl	8004b50 <RCC_AHB1PeriphClockCmd>

	// Set alternate function
	GPIO_PinAFConfig(PWM_MOTOR_PORT, PWM_MOTOR_1_PINSOURCE, PWM_MOTOR_AF);
 8001c92:	481a      	ldr	r0, [pc, #104]	; (8001cfc <pwmInit+0x78>)
 8001c94:	2107      	movs	r1, #7
 8001c96:	2202      	movs	r2, #2
 8001c98:	f003 fbb2 	bl	8005400 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PWM_MOTOR_PORT, PWM_MOTOR_2_PINSOURCE, PWM_MOTOR_AF);
 8001c9c:	4817      	ldr	r0, [pc, #92]	; (8001cfc <pwmInit+0x78>)
 8001c9e:	2108      	movs	r1, #8
 8001ca0:	2202      	movs	r2, #2
 8001ca2:	f003 fbad 	bl	8005400 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PWM_SERVO_PORT, PWM_SERVO_PINSOURCE, PWM_SERVO_AF);
 8001ca6:	4815      	ldr	r0, [pc, #84]	; (8001cfc <pwmInit+0x78>)
 8001ca8:	2109      	movs	r1, #9
 8001caa:	2202      	movs	r2, #2
 8001cac:	f003 fba8 	bl	8005400 <GPIO_PinAFConfig>

	// Configure GPIO
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;					// Set pin to alternate mode
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	717b      	strb	r3, [r7, #5]

	GPIO_InitStructure.GPIO_Pin = PWM_MOTOR_1_PIN | PWM_MOTOR_2_PIN;
 8001cc0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001cc4:	603b      	str	r3, [r7, #0]
	GPIO_Init(PWM_MOTOR_PORT, &GPIO_InitStructure);
 8001cc6:	463b      	mov	r3, r7
 8001cc8:	480c      	ldr	r0, [pc, #48]	; (8001cfc <pwmInit+0x78>)
 8001cca:	4619      	mov	r1, r3
 8001ccc:	f003 fa2a 	bl	8005124 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = PWM_SERVO_PIN;
 8001cd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cd4:	603b      	str	r3, [r7, #0]
	GPIO_Init(PWM_SERVO_PORT, &GPIO_InitStructure);
 8001cd6:	463b      	mov	r3, r7
 8001cd8:	4808      	ldr	r0, [pc, #32]	; (8001cfc <pwmInit+0x78>)
 8001cda:	4619      	mov	r1, r3
 8001cdc:	f003 fa22 	bl	8005124 <GPIO_Init>

	pwmTimerConfig();
 8001ce0:	f000 f812 	bl	8001d08 <pwmTimerConfig>

	// Initialize set motor timer
	set_motor = swTimerInit( 100, REPEAT, prvSetMotorCallback );
 8001ce4:	2064      	movs	r0, #100	; 0x64
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	4a05      	ldr	r2, [pc, #20]	; (8001d00 <pwmInit+0x7c>)
 8001cea:	f7fe fd33 	bl	8000754 <swTimerInit>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	4b04      	ldr	r3, [pc, #16]	; (8001d04 <pwmInit+0x80>)
 8001cf2:	601a      	str	r2, [r3, #0]
}
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40020800 	.word	0x40020800
 8001d00:	08001391 	.word	0x08001391
 8001d04:	2001c1e4 	.word	0x2001c1e4

08001d08 <pwmTimerConfig>:


/*********************************************************************************************
 * Initializes Timer
 *********************************************************************************************/
void pwmTimerConfig() {
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef TIM_InitStructure;

	// Enable clock
	RCC_APB1PeriphClockCmd(PWM_TIM_CLK, ENABLE);
 8001d0e:	2002      	movs	r0, #2
 8001d10:	2101      	movs	r1, #1
 8001d12:	f002 ff77 	bl	8004c04 <RCC_APB1PeriphClockCmd>
	/*******************************************
	 * For servo, want PWM pulses such that:
	 * 		- 50% duty (1500us) -> 0 degrees
	 * Max values: 700us - 2300us
	 *******************************************/
	TIM_InitStructure.TIM_Prescaler = PWM_TIM_PRESCALER;
 8001d16:	2309      	movs	r3, #9
 8001d18:	80bb      	strh	r3, [r7, #4]
	TIM_InitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	80fb      	strh	r3, [r7, #6]
	TIM_InitStructure.TIM_Period = PWM_TIM_PERIOD;
 8001d1e:	f246 237a 	movw	r3, #25210	; 0x627a
 8001d22:	60bb      	str	r3, [r7, #8]
	TIM_InitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8001d24:	2300      	movs	r3, #0
 8001d26:	81bb      	strh	r3, [r7, #12]
	TIM_InitStructure.TIM_RepetitionCounter = 0;						// Don't count repetitions
 8001d28:	2300      	movs	r3, #0
 8001d2a:	73bb      	strb	r3, [r7, #14]
	TIM_TimeBaseInit(PWM_TIM, &TIM_InitStructure);
 8001d2c:	1d3b      	adds	r3, r7, #4
 8001d2e:	4805      	ldr	r0, [pc, #20]	; (8001d44 <pwmTimerConfig+0x3c>)
 8001d30:	4619      	mov	r1, r3
 8001d32:	f000 fe9f 	bl	8002a74 <TIM_TimeBaseInit>

	// Start timer
	TIM_Cmd(PWM_TIM, ENABLE);
 8001d36:	4803      	ldr	r0, [pc, #12]	; (8001d44 <pwmTimerConfig+0x3c>)
 8001d38:	2101      	movs	r1, #1
 8001d3a:	f001 f81d 	bl	8002d78 <TIM_Cmd>
}
 8001d3e:	3710      	adds	r7, #16
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40000400 	.word	0x40000400

08001d48 <photoResistorInit>:


/*********************************************************************************************
 * Initializes Photo Resistors
 *********************************************************************************************/
void photoResistorInit() {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	// Enable clock
	RCC_AHB1PeriphClockCmd(PHOTO_CLK, ENABLE);
 8001d4e:	2004      	movs	r0, #4
 8001d50:	2101      	movs	r1, #1
 8001d52:	f002 fefd 	bl	8004b50 <RCC_AHB1PeriphClockCmd>

	// Configure GPIO
	GPIO_InitStructure.GPIO_Pin = PHOTO_PINS;
 8001d56:	2307      	movs	r3, #7
 8001d58:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;					// Set pin to analog mode
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(PHOTO_PORT, &GPIO_InitStructure);
 8001d62:	463b      	mov	r3, r7
 8001d64:	4808      	ldr	r0, [pc, #32]	; (8001d88 <photoResistorInit+0x40>)
 8001d66:	4619      	mov	r1, r3
 8001d68:	f003 f9dc 	bl	8005124 <GPIO_Init>

	// Configure ADC
	adcConfig();
 8001d6c:	f000 f812 	bl	8001d94 <adcConfig>

	// Initialize read photo resistor timer
	read_photo = swTimerInit( 20, REPEAT, prvReadPhotoCallback );
 8001d70:	2014      	movs	r0, #20
 8001d72:	2101      	movs	r1, #1
 8001d74:	4a05      	ldr	r2, [pc, #20]	; (8001d8c <photoResistorInit+0x44>)
 8001d76:	f7fe fced 	bl	8000754 <swTimerInit>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	4b04      	ldr	r3, [pc, #16]	; (8001d90 <photoResistorInit+0x48>)
 8001d7e:	601a      	str	r2, [r3, #0]
}
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40020800 	.word	0x40020800
 8001d8c:	08000985 	.word	0x08000985
 8001d90:	2001c208 	.word	0x2001c208

08001d94 <adcConfig>:


/*********************************************************************************************
 * Initializes ADC
 *********************************************************************************************/
void adcConfig() {
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
	ADC_InitTypeDef  ADC_InitStructure;

	// Enable clock
	RCC_APB2PeriphClockCmd(PHOTO_ADC_CLK, ENABLE);
 8001d9a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001d9e:	2101      	movs	r1, #1
 8001da0:	f002 ff4e 	bl	8004c40 <RCC_APB2PeriphClockCmd>

	// Put everything back to default values
	ADC_DeInit();
 8001da4:	f003 fc7c 	bl	80056a0 <ADC_DeInit>

	// Configure ADC
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 8001da8:	2300      	movs	r3, #0
 8001daa:	603b      	str	r3, [r7, #0]
	ADC_InitStructure.ADC_ScanConvMode = DISABLE;
 8001dac:	2300      	movs	r3, #0
 8001dae:	713b      	strb	r3, [r7, #4]
	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
 8001db0:	2300      	movs	r3, #0
 8001db2:	717b      	strb	r3, [r7, #5]
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8001db4:	2300      	movs	r3, #0
 8001db6:	60bb      	str	r3, [r7, #8]
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 8001db8:	2300      	movs	r3, #0
 8001dba:	613b      	str	r3, [r7, #16]
	ADC_InitStructure.ADC_NbrOfConversion= 1;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	753b      	strb	r3, [r7, #20]
	ADC_Init(PHOTO_ADC, &ADC_InitStructure);
 8001dc0:	463b      	mov	r3, r7
 8001dc2:	4805      	ldr	r0, [pc, #20]	; (8001dd8 <adcConfig+0x44>)
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	f003 fc79 	bl	80056bc <ADC_Init>

	// Enable ADC
	ADC_Cmd(PHOTO_ADC, ENABLE);
 8001dca:	4803      	ldr	r0, [pc, #12]	; (8001dd8 <adcConfig+0x44>)
 8001dcc:	2101      	movs	r1, #1
 8001dce:	f003 fd25 	bl	800581c <ADC_Cmd>
}
 8001dd2:	3718      	adds	r7, #24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40012000 	.word	0x40012000

08001ddc <measuredPowerInit>:


/*********************************************************************************************
 * Initializes Measured Power GPIO
 *********************************************************************************************/
void measuredPowerInit() {
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	// Enable clock
	RCC_AHB1PeriphClockCmd(MEASURED_POWER_CLK, ENABLE);
 8001de2:	2004      	movs	r0, #4
 8001de4:	2101      	movs	r1, #1
 8001de6:	f002 feb3 	bl	8004b50 <RCC_AHB1PeriphClockCmd>

	// Configure GPIO
	GPIO_InitStructure.GPIO_Pin = MEASURED_POWER_PIN;
 8001dea:	2308      	movs	r3, #8
 8001dec:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;					// Set pin to analog mode
 8001dee:	2303      	movs	r3, #3
 8001df0:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001df2:	2300      	movs	r3, #0
 8001df4:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(MEASURED_POWER_PORT, &GPIO_InitStructure);
 8001df6:	463b      	mov	r3, r7
 8001df8:	4807      	ldr	r0, [pc, #28]	; (8001e18 <measuredPowerInit+0x3c>)
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	f003 f992 	bl	8005124 <GPIO_Init>

	// Note: Since both get initialized and use the same ADC, don't need to call it twice
	// adcConfig();

	// Initialize read measured power timer
	read_power = swTimerInit( 5000, REPEAT, prvReadPowerCallback );
 8001e00:	f241 3088 	movw	r0, #5000	; 0x1388
 8001e04:	2101      	movs	r1, #1
 8001e06:	4a05      	ldr	r2, [pc, #20]	; (8001e1c <measuredPowerInit+0x40>)
 8001e08:	f7fe fca4 	bl	8000754 <swTimerInit>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	4b04      	ldr	r3, [pc, #16]	; (8001e20 <measuredPowerInit+0x44>)
 8001e10:	601a      	str	r2, [r3, #0]
}
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40020800 	.word	0x40020800
 8001e1c:	080008c9 	.word	0x080008c9
 8001e20:	2001c214 	.word	0x2001c214

08001e24 <ultrasonicInit>:


/*********************************************************************************************
 * Initializes Ultrasonic GPIO
 *********************************************************************************************/
void ultrasonicInit() {
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;

    // Enable clock
    RCC_AHB1PeriphClockCmd(ULTRA_CLK, ENABLE);
 8001e2a:	2001      	movs	r0, #1
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	f002 fe8f 	bl	8004b50 <RCC_AHB1PeriphClockCmd>

    // Configure GPIO
    GPIO_InitStruct.GPIO_Pin = ULTRA_PINS;
 8001e32:	23e0      	movs	r3, #224	; 0xe0
 8001e34:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 8001e36:	2300      	movs	r3, #0
 8001e38:	713b      	strb	r3, [r7, #4]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8001e42:	2303      	movs	r3, #3
 8001e44:	717b      	strb	r3, [r7, #5]
	GPIO_Init(ULTRA_PORT, &GPIO_InitStruct);
 8001e46:	463b      	mov	r3, r7
 8001e48:	4805      	ldr	r0, [pc, #20]	; (8001e60 <ultrasonicInit+0x3c>)
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	f003 f96a 	bl	8005124 <GPIO_Init>

	extiConfig();
 8001e50:	f000 f808 	bl	8001e64 <extiConfig>

	ultrasonicTimerConfig();
 8001e54:	f000 f82a 	bl	8001eac <ultrasonicTimerConfig>
}
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40020000 	.word	0x40020000

08001e64 <extiConfig>:


/*********************************************************************************************
 * Initializes Ultrasonic EXTI
 *********************************************************************************************/
void extiConfig() {
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
    EXTI_InitTypeDef EXTI_InitStruct;

    // Set pinsources
    SYSCFG_EXTILineConfig(ULTRA_EXTI_PORT, ULTRA_EXTI_PINSOURCES);
 8001e6a:	2000      	movs	r0, #0
 8001e6c:	2107      	movs	r1, #7
 8001e6e:	f002 fb01 	bl	8004474 <SYSCFG_EXTILineConfig>

    // Configure EXTI
    EXTI_InitStruct.EXTI_Line = ULTRA_EXTI_LINES;
 8001e72:	23e0      	movs	r3, #224	; 0xe0
 8001e74:	60bb      	str	r3, [r7, #8]
	EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 8001e76:	2301      	movs	r3, #1
 8001e78:	73bb      	strb	r3, [r7, #14]
	EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	733b      	strb	r3, [r7, #12]
	EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
 8001e7e:	2310      	movs	r3, #16
 8001e80:	737b      	strb	r3, [r7, #13]
	EXTI_Init(&EXTI_InitStruct);
 8001e82:	f107 0308 	add.w	r3, r7, #8
 8001e86:	4618      	mov	r0, r3
 8001e88:	f003 fb1a 	bl	80054c0 <EXTI_Init>

	NVIC_InitTypeDef NVIC_InitStruct;

	// Configure Interrupt
	NVIC_InitStruct.NVIC_IRQChannel = ULTRA_EXTI_IRQ;
 8001e8c:	2317      	movs	r3, #23
 8001e8e:	713b      	strb	r3, [r7, #4]
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0x00;
 8001e90:	2300      	movs	r3, #0
 8001e92:	717b      	strb	r3, [r7, #5]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0x01;
 8001e94:	2301      	movs	r3, #1
 8001e96:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStruct);
 8001e9c:	1d3b      	adds	r3, r7, #4
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f004 f944 	bl	800612c <NVIC_Init>
}
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop

08001eac <ultrasonicTimerConfig>:


void ultrasonicTimerConfig() {
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b08a      	sub	sp, #40	; 0x28
 8001eb0:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef timerInitStructure_1;

	// Enable clock
	RCC_APB1PeriphClockCmd(ULTRA_TIM_CLK_1, ENABLE);
 8001eb2:	2001      	movs	r0, #1
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	f002 fea5 	bl	8004c04 <RCC_APB1PeriphClockCmd>

	// Configure timer
	timerInitStructure_1.TIM_Prescaler = ULTRA_TIM_PRESCALER_1;
 8001eba:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001ebe:	83bb      	strh	r3, [r7, #28]
	timerInitStructure_1.TIM_CounterMode = TIM_CounterMode_Up;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	83fb      	strh	r3, [r7, #30]
	timerInitStructure_1.TIM_Period = ULTRA_TIM_PERIOD_1;
 8001ec4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001ec8:	623b      	str	r3, [r7, #32]
	timerInitStructure_1.TIM_ClockDivision = TIM_CKD_DIV1;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	84bb      	strh	r3, [r7, #36]	; 0x24
	timerInitStructure_1.TIM_RepetitionCounter = 0;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	TIM_TimeBaseInit(ULTRA_TIM_1, &timerInitStructure_1);
 8001ed4:	f107 031c 	add.w	r3, r7, #28
 8001ed8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001edc:	4619      	mov	r1, r3
 8001ede:	f000 fdc9 	bl	8002a74 <TIM_TimeBaseInit>

	// Enable timer
	TIM_Cmd(ULTRA_TIM_1, ENABLE);
 8001ee2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	f000 ff46 	bl	8002d78 <TIM_Cmd>

	TIM_TimeBaseInitTypeDef timerInitStructure_2;

	// Enable clock
	RCC_APB1PeriphClockCmd(ULTRA_TIM_CLK_2, ENABLE);
 8001eec:	2004      	movs	r0, #4
 8001eee:	2101      	movs	r1, #1
 8001ef0:	f002 fe88 	bl	8004c04 <RCC_APB1PeriphClockCmd>

	// Configure timer
	timerInitStructure_2.TIM_Prescaler = ULTRA_TIM_PRESCALER_2;
 8001ef4:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001ef8:	823b      	strh	r3, [r7, #16]
	timerInitStructure_2.TIM_CounterMode = TIM_CounterMode_Up;
 8001efa:	2300      	movs	r3, #0
 8001efc:	827b      	strh	r3, [r7, #18]
	timerInitStructure_2.TIM_Period = ULTRA_TIM_PERIOD_2;
 8001efe:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f02:	617b      	str	r3, [r7, #20]
	timerInitStructure_2.TIM_ClockDivision = TIM_CKD_DIV1;
 8001f04:	2300      	movs	r3, #0
 8001f06:	833b      	strh	r3, [r7, #24]
	timerInitStructure_2.TIM_RepetitionCounter = 0;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	76bb      	strb	r3, [r7, #26]
	TIM_TimeBaseInit(ULTRA_TIM_2, &timerInitStructure_2);
 8001f0c:	f107 0310 	add.w	r3, r7, #16
 8001f10:	4811      	ldr	r0, [pc, #68]	; (8001f58 <ultrasonicTimerConfig+0xac>)
 8001f12:	4619      	mov	r1, r3
 8001f14:	f000 fdae 	bl	8002a74 <TIM_TimeBaseInit>

	// Enable timer
	TIM_Cmd(ULTRA_TIM_2, ENABLE);
 8001f18:	480f      	ldr	r0, [pc, #60]	; (8001f58 <ultrasonicTimerConfig+0xac>)
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	f000 ff2c 	bl	8002d78 <TIM_Cmd>

	TIM_TimeBaseInitTypeDef timerInitStructure_3;

	// Enable clock
	RCC_APB1PeriphClockCmd(ULTRA_TIM_CLK_3, ENABLE);
 8001f20:	2008      	movs	r0, #8
 8001f22:	2101      	movs	r1, #1
 8001f24:	f002 fe6e 	bl	8004c04 <RCC_APB1PeriphClockCmd>

	// Configure timer
	timerInitStructure_3.TIM_Prescaler = ULTRA_TIM_PRESCALER_3;
 8001f28:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001f2c:	80bb      	strh	r3, [r7, #4]
	timerInitStructure_3.TIM_CounterMode = TIM_CounterMode_Up;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	80fb      	strh	r3, [r7, #6]
	timerInitStructure_3.TIM_Period = ULTRA_TIM_PERIOD_3;
 8001f32:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f36:	60bb      	str	r3, [r7, #8]
	timerInitStructure_3.TIM_ClockDivision = TIM_CKD_DIV1;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	81bb      	strh	r3, [r7, #12]
	timerInitStructure_3.TIM_RepetitionCounter = 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	73bb      	strb	r3, [r7, #14]
	TIM_TimeBaseInit(ULTRA_TIM_3, &timerInitStructure_3);
 8001f40:	1d3b      	adds	r3, r7, #4
 8001f42:	4806      	ldr	r0, [pc, #24]	; (8001f5c <ultrasonicTimerConfig+0xb0>)
 8001f44:	4619      	mov	r1, r3
 8001f46:	f000 fd95 	bl	8002a74 <TIM_TimeBaseInit>

	// Enable timer
	TIM_Cmd(ULTRA_TIM_3, ENABLE);
 8001f4a:	4804      	ldr	r0, [pc, #16]	; (8001f5c <ultrasonicTimerConfig+0xb0>)
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	f000 ff13 	bl	8002d78 <TIM_Cmd>
}
 8001f52:	3728      	adds	r7, #40	; 0x28
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40000800 	.word	0x40000800
 8001f5c:	40000c00 	.word	0x40000c00

08001f60 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	4b3a      	ldr	r3, [pc, #232]	; (8002054 <USART_DeInit+0xf4>)
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d108      	bne.n	8001f82 <USART_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8001f70:	2010      	movs	r0, #16
 8001f72:	2101      	movs	r1, #1
 8001f74:	f002 fefa 	bl	8004d6c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8001f78:	2010      	movs	r0, #16
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	f002 fef6 	bl	8004d6c <RCC_APB2PeriphResetCmd>
 8001f80:	e065      	b.n	800204e <USART_DeInit+0xee>
  }
  else if (USARTx == USART2)
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	4b34      	ldr	r3, [pc, #208]	; (8002058 <USART_DeInit+0xf8>)
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d10a      	bne.n	8001fa0 <USART_DeInit+0x40>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8001f8a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001f8e:	2101      	movs	r1, #1
 8001f90:	f002 fece 	bl	8004d30 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8001f94:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001f98:	2100      	movs	r1, #0
 8001f9a:	f002 fec9 	bl	8004d30 <RCC_APB1PeriphResetCmd>
 8001f9e:	e056      	b.n	800204e <USART_DeInit+0xee>
  }
  else if (USARTx == USART3)
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	4b2e      	ldr	r3, [pc, #184]	; (800205c <USART_DeInit+0xfc>)
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d10a      	bne.n	8001fbe <USART_DeInit+0x5e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8001fa8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001fac:	2101      	movs	r1, #1
 8001fae:	f002 febf 	bl	8004d30 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8001fb2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	f002 feba 	bl	8004d30 <RCC_APB1PeriphResetCmd>
 8001fbc:	e047      	b.n	800204e <USART_DeInit+0xee>
  }    
  else if (USARTx == UART4)
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	4b27      	ldr	r3, [pc, #156]	; (8002060 <USART_DeInit+0x100>)
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d10a      	bne.n	8001fdc <USART_DeInit+0x7c>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8001fc6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001fca:	2101      	movs	r1, #1
 8001fcc:	f002 feb0 	bl	8004d30 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8001fd0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	f002 feab 	bl	8004d30 <RCC_APB1PeriphResetCmd>
 8001fda:	e038      	b.n	800204e <USART_DeInit+0xee>
  }
  else if (USARTx == UART5)
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	4b21      	ldr	r3, [pc, #132]	; (8002064 <USART_DeInit+0x104>)
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d10a      	bne.n	8001ffa <USART_DeInit+0x9a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8001fe4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001fe8:	2101      	movs	r1, #1
 8001fea:	f002 fea1 	bl	8004d30 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8001fee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	f002 fe9c 	bl	8004d30 <RCC_APB1PeriphResetCmd>
 8001ff8:	e029      	b.n	800204e <USART_DeInit+0xee>
  }  
  else if (USARTx == USART6)
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	4b1a      	ldr	r3, [pc, #104]	; (8002068 <USART_DeInit+0x108>)
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d108      	bne.n	8002014 <USART_DeInit+0xb4>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 8002002:	2020      	movs	r0, #32
 8002004:	2101      	movs	r1, #1
 8002006:	f002 feb1 	bl	8004d6c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 800200a:	2020      	movs	r0, #32
 800200c:	2100      	movs	r1, #0
 800200e:	f002 fead 	bl	8004d6c <RCC_APB2PeriphResetCmd>
 8002012:	e01c      	b.n	800204e <USART_DeInit+0xee>
  }
  else if (USARTx == UART7)
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	4b15      	ldr	r3, [pc, #84]	; (800206c <USART_DeInit+0x10c>)
 8002018:	429a      	cmp	r2, r3
 800201a:	d10a      	bne.n	8002032 <USART_DeInit+0xd2>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
 800201c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002020:	2101      	movs	r1, #1
 8002022:	f002 fe85 	bl	8004d30 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 8002026:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800202a:	2100      	movs	r1, #0
 800202c:	f002 fe80 	bl	8004d30 <RCC_APB1PeriphResetCmd>
 8002030:	e00d      	b.n	800204e <USART_DeInit+0xee>
  }     
  else
  {
    if (USARTx == UART8)
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	4b0e      	ldr	r3, [pc, #56]	; (8002070 <USART_DeInit+0x110>)
 8002036:	429a      	cmp	r2, r3
 8002038:	d109      	bne.n	800204e <USART_DeInit+0xee>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
 800203a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800203e:	2101      	movs	r1, #1
 8002040:	f002 fe76 	bl	8004d30 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
 8002044:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8002048:	2100      	movs	r1, #0
 800204a:	f002 fe71 	bl	8004d30 <RCC_APB1PeriphResetCmd>
    }
  }
}
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40011000 	.word	0x40011000
 8002058:	40004400 	.word	0x40004400
 800205c:	40004800 	.word	0x40004800
 8002060:	40004c00 	.word	0x40004c00
 8002064:	40005000 	.word	0x40005000
 8002068:	40011400 	.word	0x40011400
 800206c:	40007800 	.word	0x40007800
 8002070:	40007c00 	.word	0x40007c00

08002074 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08a      	sub	sp, #40	; 0x28
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800207e:	2300      	movs	r3, #0
 8002080:	627b      	str	r3, [r7, #36]	; 0x24
 8002082:	2300      	movs	r3, #0
 8002084:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8002086:	2300      	movs	r3, #0
 8002088:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800208a:	2300      	movs	r3, #0
 800208c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	8a1b      	ldrh	r3, [r3, #16]
 8002092:	b29b      	uxth	r3, r3
 8002094:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800209c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	88db      	ldrh	r3, [r3, #6]
 80020a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020a4:	4313      	orrs	r3, r2
 80020a6:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80020a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	899b      	ldrh	r3, [r3, #12]
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80020be:	f023 030c 	bic.w	r3, r3, #12
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	889a      	ldrh	r2, [r3, #4]
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	891b      	ldrh	r3, [r3, #8]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80020d4:	4313      	orrs	r3, r2
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020da:	4313      	orrs	r3, r2
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	b29a      	uxth	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	8a9b      	ldrh	r3, [r3, #20]
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020f4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	899b      	ldrh	r3, [r3, #12]
 80020fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020fc:	4313      	orrs	r3, r2
 80020fe:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	b29a      	uxth	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8002108:	f107 0308 	add.w	r3, r7, #8
 800210c:	4618      	mov	r0, r3
 800210e:	f002 fc0b 	bl	8004928 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	4b31      	ldr	r3, [pc, #196]	; (80021dc <USART_Init+0x168>)
 8002116:	429a      	cmp	r2, r3
 8002118:	d003      	beq.n	8002122 <USART_Init+0xae>
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	4b30      	ldr	r3, [pc, #192]	; (80021e0 <USART_Init+0x16c>)
 800211e:	429a      	cmp	r2, r3
 8002120:	d102      	bne.n	8002128 <USART_Init+0xb4>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	623b      	str	r3, [r7, #32]
 8002126:	e001      	b.n	800212c <USART_Init+0xb8>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	899b      	ldrh	r3, [r3, #12]
 8002130:	b29b      	uxth	r3, r3
 8002132:	b29b      	uxth	r3, r3
 8002134:	b21b      	sxth	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	da0c      	bge.n	8002154 <USART_Init+0xe0>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800213a:	6a3a      	ldr	r2, [r7, #32]
 800213c:	4613      	mov	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4413      	add	r3, r2
 8002142:	009a      	lsls	r2, r3, #2
 8002144:	441a      	add	r2, r3
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002150:	61fb      	str	r3, [r7, #28]
 8002152:	e00b      	b.n	800216c <USART_Init+0xf8>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8002154:	6a3a      	ldr	r2, [r7, #32]
 8002156:	4613      	mov	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4413      	add	r3, r2
 800215c:	009a      	lsls	r2, r3, #2
 800215e:	441a      	add	r2, r3
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	fbb2 f3f3 	udiv	r3, r2, r3
 800216a:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 800216c:	69fa      	ldr	r2, [r7, #28]
 800216e:	4b1d      	ldr	r3, [pc, #116]	; (80021e4 <USART_Init+0x170>)
 8002170:	fba3 1302 	umull	r1, r3, r3, r2
 8002174:	095b      	lsrs	r3, r3, #5
 8002176:	011b      	lsls	r3, r3, #4
 8002178:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	091b      	lsrs	r3, r3, #4
 800217e:	2264      	movs	r2, #100	; 0x64
 8002180:	fb02 f303 	mul.w	r3, r2, r3
 8002184:	69fa      	ldr	r2, [r7, #28]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	899b      	ldrh	r3, [r3, #12]
 800218e:	b29b      	uxth	r3, r3
 8002190:	b29b      	uxth	r3, r3
 8002192:	b21b      	sxth	r3, r3
 8002194:	2b00      	cmp	r3, #0
 8002196:	da0d      	bge.n	80021b4 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80021a0:	4b10      	ldr	r3, [pc, #64]	; (80021e4 <USART_Init+0x170>)
 80021a2:	fba3 1302 	umull	r1, r3, r3, r2
 80021a6:	095b      	lsrs	r3, r3, #5
 80021a8:	f003 0307 	and.w	r3, r3, #7
 80021ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021ae:	4313      	orrs	r3, r2
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24
 80021b2:	e00c      	b.n	80021ce <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	011b      	lsls	r3, r3, #4
 80021b8:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80021bc:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <USART_Init+0x170>)
 80021be:	fba3 1302 	umull	r1, r3, r3, r2
 80021c2:	095b      	lsrs	r3, r3, #5
 80021c4:	f003 030f 	and.w	r3, r3, #15
 80021c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021ca:	4313      	orrs	r3, r2
 80021cc:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	811a      	strh	r2, [r3, #8]
}
 80021d6:	3728      	adds	r7, #40	; 0x28
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40011000 	.word	0x40011000
 80021e0:	40011400 	.word	0x40011400
 80021e4:	51eb851f 	.word	0x51eb851f

080021e8 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80021f6:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	220c      	movs	r2, #12
 800220e:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	819a      	strh	r2, [r3, #12]
}
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <USART_ClockInit>:
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
 800222a:	2300      	movs	r3, #0
 800222c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	8a1b      	ldrh	r3, [r3, #16]
 8002232:	b29b      	uxth	r3, r3
 8002234:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800223c:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	881a      	ldrh	r2, [r3, #0]
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8002246:	4313      	orrs	r3, r2
 8002248:	b29a      	uxth	r2, r3
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	889b      	ldrh	r3, [r3, #4]
 800224e:	4313      	orrs	r3, r2
 8002250:	b29a      	uxth	r2, r3
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	88db      	ldrh	r3, [r3, #6]
 8002256:	4313      	orrs	r3, r2
 8002258:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	4313      	orrs	r3, r2
 800225e:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	b29a      	uxth	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	821a      	strh	r2, [r3, #16]
}
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop

08002274 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	80da      	strh	r2, [r3, #6]
}
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop

080022a0 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80022ac:	78fb      	ldrb	r3, [r7, #3]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d008      	beq.n	80022c4 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	899b      	ldrh	r3, [r3, #12]
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022bc:	b29a      	uxth	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	819a      	strh	r2, [r3, #12]
 80022c2:	e007      	b.n	80022d4 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	899b      	ldrh	r3, [r3, #12]
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	819a      	strh	r2, [r3, #12]
  }
}
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop

080022e0 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock. 
  * @note   The function is used for IrDA mode with UART4 and UART5.   
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	460b      	mov	r3, r1
 80022ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	8b1b      	ldrh	r3, [r3, #24]
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	8b1b      	ldrh	r3, [r3, #24]
 8002300:	b29a      	uxth	r2, r3
 8002302:	78fb      	ldrb	r3, [r7, #3]
 8002304:	b29b      	uxth	r3, r3
 8002306:	4313      	orrs	r3, r2
 8002308:	b29a      	uxth	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	831a      	strh	r2, [r3, #24]
}
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <USART_OverSampling8Cmd>:
  * @param  NewState: new state of the USART 8x oversampling mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	460b      	mov	r3, r1
 8002322:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002324:	78fb      	ldrb	r3, [r7, #3]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00a      	beq.n	8002340 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	899b      	ldrh	r3, [r3, #12]
 800232e:	b29b      	uxth	r3, r3
 8002330:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002334:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002338:	b29a      	uxth	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	819a      	strh	r2, [r3, #12]
 800233e:	e007      	b.n	8002350 <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	899b      	ldrh	r3, [r3, #12]
 8002344:	b29b      	uxth	r3, r3
 8002346:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800234a:	b29a      	uxth	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	819a      	strh	r2, [r3, #12]
  }
}  
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop

0800235c <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	460b      	mov	r3, r1
 8002366:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002368:	78fb      	ldrb	r3, [r7, #3]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d008      	beq.n	8002380 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	8a9b      	ldrh	r3, [r3, #20]
 8002372:	b29b      	uxth	r3, r3
 8002374:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002378:	b29a      	uxth	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	829a      	strh	r2, [r3, #20]
 800237e:	e007      	b.n	8002390 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	8a9b      	ldrh	r3, [r3, #20]
 8002384:	b29b      	uxth	r3, r3
 8002386:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800238a:	b29a      	uxth	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	829a      	strh	r2, [r3, #20]
  }
}
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop

0800239c <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	460b      	mov	r3, r1
 80023a6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 80023a8:	887b      	ldrh	r3, [r7, #2]
 80023aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	809a      	strh	r2, [r3, #4]
}
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop

080023c0 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	889b      	ldrh	r3, [r3, #4]
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023d2:	b29b      	uxth	r3, r3
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <USART_SetAddress>:
  *         UART peripheral.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	460b      	mov	r3, r1
 80023ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	8a1b      	ldrh	r3, [r3, #16]
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	f023 030f 	bic.w	r3, r3, #15
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	8a1b      	ldrh	r3, [r3, #16]
 8002400:	b29a      	uxth	r2, r3
 8002402:	78fb      	ldrb	r3, [r7, #3]
 8002404:	b29b      	uxth	r3, r3
 8002406:	4313      	orrs	r3, r2
 8002408:	b29a      	uxth	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	821a      	strh	r2, [r3, #16]
}
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	460b      	mov	r3, r1
 8002422:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8002424:	78fb      	ldrb	r3, [r7, #3]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d008      	beq.n	800243c <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	899b      	ldrh	r3, [r3, #12]
 800242e:	b29b      	uxth	r3, r3
 8002430:	f043 0302 	orr.w	r3, r3, #2
 8002434:	b29a      	uxth	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	819a      	strh	r2, [r3, #12]
 800243a:	e007      	b.n	800244c <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	899b      	ldrh	r3, [r3, #12]
 8002440:	b29b      	uxth	r3, r3
 8002442:	f023 0302 	bic.w	r3, r3, #2
 8002446:	b29a      	uxth	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	819a      	strh	r2, [r3, #12]
  }
}
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop

08002458 <USART_WakeUpConfig>:
  *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	460b      	mov	r3, r1
 8002462:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	899b      	ldrh	r3, [r3, #12]
 8002468:	b29b      	uxth	r3, r3
 800246a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800246e:	b29a      	uxth	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	899b      	ldrh	r3, [r3, #12]
 8002478:	b29a      	uxth	r2, r3
 800247a:	887b      	ldrh	r3, [r7, #2]
 800247c:	4313      	orrs	r3, r2
 800247e:	b29a      	uxth	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	819a      	strh	r2, [r3, #12]
}
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop

08002490 <USART_LINBreakDetectLengthConfig>:
  *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	460b      	mov	r3, r1
 800249a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	8a1b      	ldrh	r3, [r3, #16]
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	f023 0320 	bic.w	r3, r3, #32
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	8a1b      	ldrh	r3, [r3, #16]
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	887b      	ldrh	r3, [r7, #2]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	821a      	strh	r2, [r3, #16]
}
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop

080024c8 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80024d4:	78fb      	ldrb	r3, [r7, #3]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d008      	beq.n	80024ec <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	8a1b      	ldrh	r3, [r3, #16]
 80024de:	b29b      	uxth	r3, r3
 80024e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	821a      	strh	r2, [r3, #16]
 80024ea:	e007      	b.n	80024fc <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	8a1b      	ldrh	r3, [r3, #16]
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	821a      	strh	r2, [r3, #16]
  }
}
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop

08002508 <USART_SendBreak>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	899b      	ldrh	r3, [r3, #12]
 8002514:	b29b      	uxth	r3, r3
 8002516:	f043 0301 	orr.w	r3, r3, #1
 800251a:	b29a      	uxth	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	819a      	strh	r2, [r3, #12]
}
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop

0800252c <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002538:	78fb      	ldrb	r3, [r7, #3]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d008      	beq.n	8002550 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	8a9b      	ldrh	r3, [r3, #20]
 8002542:	b29b      	uxth	r3, r3
 8002544:	f043 0308 	orr.w	r3, r3, #8
 8002548:	b29a      	uxth	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	829a      	strh	r2, [r3, #20]
 800254e:	e007      	b.n	8002560 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	8a9b      	ldrh	r3, [r3, #20]
 8002554:	b29b      	uxth	r3, r3
 8002556:	f023 0308 	bic.w	r3, r3, #8
 800255a:	b29a      	uxth	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	829a      	strh	r2, [r3, #20]
  }
}
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop

0800256c <USART_SetGuardTime>:
  *         UART peripheral.
  * @param  USART_GuardTime: specifies the guard time.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	460b      	mov	r3, r1
 8002576:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	8b1b      	ldrh	r3, [r3, #24]
 800257c:	b29b      	uxth	r3, r3
 800257e:	b2db      	uxtb	r3, r3
 8002580:	b29a      	uxth	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	8b1b      	ldrh	r3, [r3, #24]
 800258a:	b29a      	uxth	r2, r3
 800258c:	78fb      	ldrb	r3, [r7, #3]
 800258e:	b29b      	uxth	r3, r3
 8002590:	021b      	lsls	r3, r3, #8
 8002592:	b29b      	uxth	r3, r3
 8002594:	4313      	orrs	r3, r2
 8002596:	b29a      	uxth	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	831a      	strh	r2, [r3, #24]
}
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop

080025a8 <USART_SmartCardCmd>:
  * @param  NewState: new state of the Smart Card mode.
  *          This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	460b      	mov	r3, r1
 80025b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80025b4:	78fb      	ldrb	r3, [r7, #3]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d008      	beq.n	80025cc <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	8a9b      	ldrh	r3, [r3, #20]
 80025be:	b29b      	uxth	r3, r3
 80025c0:	f043 0320 	orr.w	r3, r3, #32
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	829a      	strh	r2, [r3, #20]
 80025ca:	e007      	b.n	80025dc <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	8a9b      	ldrh	r3, [r3, #20]
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	f023 0320 	bic.w	r3, r3, #32
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	829a      	strh	r2, [r3, #20]
  }
}
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop

080025e8 <USART_SmartCardNACKCmd>:
  * @param  NewState: new state of the NACK transmission.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80025f4:	78fb      	ldrb	r3, [r7, #3]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d008      	beq.n	800260c <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	8a9b      	ldrh	r3, [r3, #20]
 80025fe:	b29b      	uxth	r3, r3
 8002600:	f043 0310 	orr.w	r3, r3, #16
 8002604:	b29a      	uxth	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	829a      	strh	r2, [r3, #20]
 800260a:	e007      	b.n	800261c <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	8a9b      	ldrh	r3, [r3, #20]
 8002610:	b29b      	uxth	r3, r3
 8002612:	f023 0310 	bic.w	r3, r3, #16
 8002616:	b29a      	uxth	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	829a      	strh	r2, [r3, #20]
  }
}
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop

08002628 <USART_IrDAConfig>:
  *            @arg USART_IrDAMode_LowPower
  *            @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	460b      	mov	r3, r1
 8002632:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	8a9b      	ldrh	r3, [r3, #20]
 8002638:	b29b      	uxth	r3, r3
 800263a:	f023 0304 	bic.w	r3, r3, #4
 800263e:	b29a      	uxth	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	8a9b      	ldrh	r3, [r3, #20]
 8002648:	b29a      	uxth	r2, r3
 800264a:	887b      	ldrh	r3, [r7, #2]
 800264c:	4313      	orrs	r3, r2
 800264e:	b29a      	uxth	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	829a      	strh	r2, [r3, #20]
}
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop

08002660 <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	460b      	mov	r3, r1
 800266a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 800266c:	78fb      	ldrb	r3, [r7, #3]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d008      	beq.n	8002684 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	8a9b      	ldrh	r3, [r3, #20]
 8002676:	b29b      	uxth	r3, r3
 8002678:	f043 0302 	orr.w	r3, r3, #2
 800267c:	b29a      	uxth	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	829a      	strh	r2, [r3, #20]
 8002682:	e007      	b.n	8002694 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	8a9b      	ldrh	r3, [r3, #20]
 8002688:	b29b      	uxth	r3, r3
 800268a:	f023 0302 	bic.w	r3, r3, #2
 800268e:	b29a      	uxth	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	829a      	strh	r2, [r3, #20]
  }
}
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop

080026a0 <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.   
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	4613      	mov	r3, r2
 80026aa:	460a      	mov	r2, r1
 80026ac:	807a      	strh	r2, [r7, #2]
 80026ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 80026b0:	787b      	ldrb	r3, [r7, #1]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d008      	beq.n	80026c8 <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	8a9b      	ldrh	r3, [r3, #20]
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	887b      	ldrh	r3, [r7, #2]
 80026be:	4313      	orrs	r3, r2
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	829a      	strh	r2, [r3, #20]
 80026c6:	e009      	b.n	80026dc <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	8a9b      	ldrh	r3, [r3, #20]
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	887b      	ldrh	r3, [r7, #2]
 80026d0:	43db      	mvns	r3, r3
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	4013      	ands	r3, r2
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	829a      	strh	r2, [r3, #20]
  }
}
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop

080026e8 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b087      	sub	sp, #28
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	4613      	mov	r3, r2
 80026f2:	460a      	mov	r2, r1
 80026f4:	807a      	strh	r2, [r7, #2]
 80026f6:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 80026f8:	2300      	movs	r3, #0
 80026fa:	613b      	str	r3, [r7, #16]
 80026fc:	2300      	movs	r3, #0
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	2300      	movs	r3, #0
 8002702:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8002704:	2300      	movs	r3, #0
 8002706:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800270c:	887b      	ldrh	r3, [r7, #2]
 800270e:	b2db      	uxtb	r3, r3
 8002710:	095b      	lsrs	r3, r3, #5
 8002712:	b2db      	uxtb	r3, r3
 8002714:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8002716:	887b      	ldrh	r3, [r7, #2]
 8002718:	f003 031f 	and.w	r3, r3, #31
 800271c:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2201      	movs	r2, #1
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d103      	bne.n	8002736 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	330c      	adds	r3, #12
 8002732:	617b      	str	r3, [r7, #20]
 8002734:	e009      	b.n	800274a <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	2b02      	cmp	r3, #2
 800273a:	d103      	bne.n	8002744 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	3310      	adds	r3, #16
 8002740:	617b      	str	r3, [r7, #20]
 8002742:	e002      	b.n	800274a <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	3314      	adds	r3, #20
 8002748:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 800274a:	787b      	ldrb	r3, [r7, #1]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d006      	beq.n	800275e <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	6811      	ldr	r1, [r2, #0]
 8002756:	68ba      	ldr	r2, [r7, #8]
 8002758:	430a      	orrs	r2, r1
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	e006      	b.n	800276c <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	6811      	ldr	r1, [r2, #0]
 8002764:	68ba      	ldr	r2, [r7, #8]
 8002766:	43d2      	mvns	r2, r2
 8002768:	400a      	ands	r2, r1
 800276a:	601a      	str	r2, [r3, #0]
  }
}
 800276c:	371c      	adds	r7, #28
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop

08002778 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	460b      	mov	r3, r1
 8002782:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8002784:	2300      	movs	r3, #0
 8002786:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	881b      	ldrh	r3, [r3, #0]
 800278c:	b29a      	uxth	r2, r3
 800278e:	887b      	ldrh	r3, [r7, #2]
 8002790:	4013      	ands	r3, r2
 8002792:	b29b      	uxth	r3, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	d002      	beq.n	800279e <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8002798:	2301      	movs	r3, #1
 800279a:	73fb      	strb	r3, [r7, #15]
 800279c:	e001      	b.n	80027a2 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 800279e:	2300      	movs	r3, #0
 80027a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3714      	adds	r7, #20
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <USART_ClearFlag>:
  *          (USART_SendData()).
  *   
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	460b      	mov	r3, r1
 80027ba:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 80027bc:	887b      	ldrh	r3, [r7, #2]
 80027be:	43db      	mvns	r3, r3
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	801a      	strh	r2, [r3, #0]
}
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b087      	sub	sp, #28
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	460b      	mov	r3, r1
 80027da:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 80027dc:	2300      	movs	r3, #0
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	2300      	movs	r3, #0
 80027e2:	617b      	str	r3, [r7, #20]
 80027e4:	2300      	movs	r3, #0
 80027e6:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 80027e8:	2300      	movs	r3, #0
 80027ea:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80027ec:	887b      	ldrh	r3, [r7, #2]
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	095b      	lsrs	r3, r3, #5
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 80027f6:	887b      	ldrh	r3, [r7, #2]
 80027f8:	f003 031f 	and.w	r3, r3, #31
 80027fc:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	2201      	movs	r2, #1
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d106      	bne.n	800281c <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	899b      	ldrh	r3, [r3, #12]
 8002812:	b29b      	uxth	r3, r3
 8002814:	697a      	ldr	r2, [r7, #20]
 8002816:	4013      	ands	r3, r2
 8002818:	617b      	str	r3, [r7, #20]
 800281a:	e00f      	b.n	800283c <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	2b02      	cmp	r3, #2
 8002820:	d106      	bne.n	8002830 <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	8a1b      	ldrh	r3, [r3, #16]
 8002826:	b29b      	uxth	r3, r3
 8002828:	697a      	ldr	r2, [r7, #20]
 800282a:	4013      	ands	r3, r2
 800282c:	617b      	str	r3, [r7, #20]
 800282e:	e005      	b.n	800283c <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	8a9b      	ldrh	r3, [r3, #20]
 8002834:	b29b      	uxth	r3, r3
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	4013      	ands	r3, r2
 800283a:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 800283c:	887b      	ldrh	r3, [r7, #2]
 800283e:	0a1b      	lsrs	r3, r3, #8
 8002840:	b29b      	uxth	r3, r3
 8002842:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2201      	movs	r2, #1
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	881b      	ldrh	r3, [r3, #0]
 8002852:	b29b      	uxth	r3, r3
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	4013      	ands	r3, r2
 8002858:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d005      	beq.n	800286c <USART_GetITStatus+0x9c>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d002      	beq.n	800286c <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
 8002866:	2301      	movs	r3, #1
 8002868:	74fb      	strb	r3, [r7, #19]
 800286a:	e001      	b.n	8002870 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
 800286c:	2300      	movs	r3, #0
 800286e:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8002870:	7cfb      	ldrb	r3, [r7, #19]
}
 8002872:	4618      	mov	r0, r3
 8002874:	371c      	adds	r7, #28
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop

08002880 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	460b      	mov	r3, r1
 800288a:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 800288c:	2300      	movs	r3, #0
 800288e:	81fb      	strh	r3, [r7, #14]
 8002890:	2300      	movs	r3, #0
 8002892:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8002894:	887b      	ldrh	r3, [r7, #2]
 8002896:	0a1b      	lsrs	r3, r3, #8
 8002898:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 800289a:	89fb      	ldrh	r3, [r7, #14]
 800289c:	2201      	movs	r2, #1
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 80028a4:	89bb      	ldrh	r3, [r7, #12]
 80028a6:	43db      	mvns	r3, r3
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	801a      	strh	r2, [r3, #0]
}
 80028ae:	3714      	adds	r7, #20
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	4b5f      	ldr	r3, [pc, #380]	; (8002a40 <TIM_DeInit+0x188>)
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d108      	bne.n	80028da <TIM_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 80028c8:	2001      	movs	r0, #1
 80028ca:	2101      	movs	r1, #1
 80028cc:	f002 fa4e 	bl	8004d6c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 80028d0:	2001      	movs	r0, #1
 80028d2:	2100      	movs	r1, #0
 80028d4:	f002 fa4a 	bl	8004d6c <RCC_APB2PeriphResetCmd>
 80028d8:	e0af      	b.n	8002a3a <TIM_DeInit+0x182>
  } 
  else if (TIMx == TIM2) 
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028e0:	d108      	bne.n	80028f4 <TIM_DeInit+0x3c>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 80028e2:	2001      	movs	r0, #1
 80028e4:	2101      	movs	r1, #1
 80028e6:	f002 fa23 	bl	8004d30 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 80028ea:	2001      	movs	r0, #1
 80028ec:	2100      	movs	r1, #0
 80028ee:	f002 fa1f 	bl	8004d30 <RCC_APB1PeriphResetCmd>
 80028f2:	e0a2      	b.n	8002a3a <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM3)
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	4b53      	ldr	r3, [pc, #332]	; (8002a44 <TIM_DeInit+0x18c>)
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d108      	bne.n	800290e <TIM_DeInit+0x56>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 80028fc:	2002      	movs	r0, #2
 80028fe:	2101      	movs	r1, #1
 8002900:	f002 fa16 	bl	8004d30 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8002904:	2002      	movs	r0, #2
 8002906:	2100      	movs	r1, #0
 8002908:	f002 fa12 	bl	8004d30 <RCC_APB1PeriphResetCmd>
 800290c:	e095      	b.n	8002a3a <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM4)
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	4b4d      	ldr	r3, [pc, #308]	; (8002a48 <TIM_DeInit+0x190>)
 8002912:	429a      	cmp	r2, r3
 8002914:	d108      	bne.n	8002928 <TIM_DeInit+0x70>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8002916:	2004      	movs	r0, #4
 8002918:	2101      	movs	r1, #1
 800291a:	f002 fa09 	bl	8004d30 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 800291e:	2004      	movs	r0, #4
 8002920:	2100      	movs	r1, #0
 8002922:	f002 fa05 	bl	8004d30 <RCC_APB1PeriphResetCmd>
 8002926:	e088      	b.n	8002a3a <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM5)
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	4b48      	ldr	r3, [pc, #288]	; (8002a4c <TIM_DeInit+0x194>)
 800292c:	429a      	cmp	r2, r3
 800292e:	d108      	bne.n	8002942 <TIM_DeInit+0x8a>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8002930:	2008      	movs	r0, #8
 8002932:	2101      	movs	r1, #1
 8002934:	f002 f9fc 	bl	8004d30 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8002938:	2008      	movs	r0, #8
 800293a:	2100      	movs	r1, #0
 800293c:	f002 f9f8 	bl	8004d30 <RCC_APB1PeriphResetCmd>
 8002940:	e07b      	b.n	8002a3a <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM6)  
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	4b42      	ldr	r3, [pc, #264]	; (8002a50 <TIM_DeInit+0x198>)
 8002946:	429a      	cmp	r2, r3
 8002948:	d108      	bne.n	800295c <TIM_DeInit+0xa4>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 800294a:	2010      	movs	r0, #16
 800294c:	2101      	movs	r1, #1
 800294e:	f002 f9ef 	bl	8004d30 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8002952:	2010      	movs	r0, #16
 8002954:	2100      	movs	r1, #0
 8002956:	f002 f9eb 	bl	8004d30 <RCC_APB1PeriphResetCmd>
 800295a:	e06e      	b.n	8002a3a <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM7)
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	4b3d      	ldr	r3, [pc, #244]	; (8002a54 <TIM_DeInit+0x19c>)
 8002960:	429a      	cmp	r2, r3
 8002962:	d108      	bne.n	8002976 <TIM_DeInit+0xbe>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8002964:	2020      	movs	r0, #32
 8002966:	2101      	movs	r1, #1
 8002968:	f002 f9e2 	bl	8004d30 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 800296c:	2020      	movs	r0, #32
 800296e:	2100      	movs	r1, #0
 8002970:	f002 f9de 	bl	8004d30 <RCC_APB1PeriphResetCmd>
 8002974:	e061      	b.n	8002a3a <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM8)
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	4b37      	ldr	r3, [pc, #220]	; (8002a58 <TIM_DeInit+0x1a0>)
 800297a:	429a      	cmp	r2, r3
 800297c:	d108      	bne.n	8002990 <TIM_DeInit+0xd8>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 800297e:	2002      	movs	r0, #2
 8002980:	2101      	movs	r1, #1
 8002982:	f002 f9f3 	bl	8004d6c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8002986:	2002      	movs	r0, #2
 8002988:	2100      	movs	r1, #0
 800298a:	f002 f9ef 	bl	8004d6c <RCC_APB2PeriphResetCmd>
 800298e:	e054      	b.n	8002a3a <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM9)
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	4b32      	ldr	r3, [pc, #200]	; (8002a5c <TIM_DeInit+0x1a4>)
 8002994:	429a      	cmp	r2, r3
 8002996:	d10a      	bne.n	80029ae <TIM_DeInit+0xf6>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 8002998:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800299c:	2101      	movs	r1, #1
 800299e:	f002 f9e5 	bl	8004d6c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 80029a2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80029a6:	2100      	movs	r1, #0
 80029a8:	f002 f9e0 	bl	8004d6c <RCC_APB2PeriphResetCmd>
 80029ac:	e045      	b.n	8002a3a <TIM_DeInit+0x182>
   }  
  else if (TIMx == TIM10)
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	4b2b      	ldr	r3, [pc, #172]	; (8002a60 <TIM_DeInit+0x1a8>)
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d10a      	bne.n	80029cc <TIM_DeInit+0x114>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 80029b6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80029ba:	2101      	movs	r1, #1
 80029bc:	f002 f9d6 	bl	8004d6c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 80029c0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80029c4:	2100      	movs	r1, #0
 80029c6:	f002 f9d1 	bl	8004d6c <RCC_APB2PeriphResetCmd>
 80029ca:	e036      	b.n	8002a3a <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM11) 
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	4b25      	ldr	r3, [pc, #148]	; (8002a64 <TIM_DeInit+0x1ac>)
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d10a      	bne.n	80029ea <TIM_DeInit+0x132>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 80029d4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80029d8:	2101      	movs	r1, #1
 80029da:	f002 f9c7 	bl	8004d6c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 80029de:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80029e2:	2100      	movs	r1, #0
 80029e4:	f002 f9c2 	bl	8004d6c <RCC_APB2PeriphResetCmd>
 80029e8:	e027      	b.n	8002a3a <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM12)
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	4b1e      	ldr	r3, [pc, #120]	; (8002a68 <TIM_DeInit+0x1b0>)
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d108      	bne.n	8002a04 <TIM_DeInit+0x14c>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 80029f2:	2040      	movs	r0, #64	; 0x40
 80029f4:	2101      	movs	r1, #1
 80029f6:	f002 f99b 	bl	8004d30 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 80029fa:	2040      	movs	r0, #64	; 0x40
 80029fc:	2100      	movs	r1, #0
 80029fe:	f002 f997 	bl	8004d30 <RCC_APB1PeriphResetCmd>
 8002a02:	e01a      	b.n	8002a3a <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM13) 
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	4b19      	ldr	r3, [pc, #100]	; (8002a6c <TIM_DeInit+0x1b4>)
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d108      	bne.n	8002a1e <TIM_DeInit+0x166>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 8002a0c:	2080      	movs	r0, #128	; 0x80
 8002a0e:	2101      	movs	r1, #1
 8002a10:	f002 f98e 	bl	8004d30 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8002a14:	2080      	movs	r0, #128	; 0x80
 8002a16:	2100      	movs	r1, #0
 8002a18:	f002 f98a 	bl	8004d30 <RCC_APB1PeriphResetCmd>
 8002a1c:	e00d      	b.n	8002a3a <TIM_DeInit+0x182>
  }  
  else
  { 
    if (TIMx == TIM14) 
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	4b13      	ldr	r3, [pc, #76]	; (8002a70 <TIM_DeInit+0x1b8>)
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d109      	bne.n	8002a3a <TIM_DeInit+0x182>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 8002a26:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	f002 f980 	bl	8004d30 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8002a30:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002a34:	2100      	movs	r1, #0
 8002a36:	f002 f97b 	bl	8004d30 <RCC_APB1PeriphResetCmd>
    }   
  }
}
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40010000 	.word	0x40010000
 8002a44:	40000400 	.word	0x40000400
 8002a48:	40000800 	.word	0x40000800
 8002a4c:	40000c00 	.word	0x40000c00
 8002a50:	40001000 	.word	0x40001000
 8002a54:	40001400 	.word	0x40001400
 8002a58:	40010400 	.word	0x40010400
 8002a5c:	40014000 	.word	0x40014000
 8002a60:	40014400 	.word	0x40014400
 8002a64:	40014800 	.word	0x40014800
 8002a68:	40001800 	.word	0x40001800
 8002a6c:	40001c00 	.word	0x40001c00
 8002a70:	40002000 	.word	0x40002000

08002a74 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	881b      	ldrh	r3, [r3, #0]
 8002a86:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	4b28      	ldr	r3, [pc, #160]	; (8002b2c <TIM_TimeBaseInit+0xb8>)
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d013      	beq.n	8002ab8 <TIM_TimeBaseInit+0x44>
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	4b27      	ldr	r3, [pc, #156]	; (8002b30 <TIM_TimeBaseInit+0xbc>)
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d00f      	beq.n	8002ab8 <TIM_TimeBaseInit+0x44>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a9e:	d00b      	beq.n	8002ab8 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	4b24      	ldr	r3, [pc, #144]	; (8002b34 <TIM_TimeBaseInit+0xc0>)
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d007      	beq.n	8002ab8 <TIM_TimeBaseInit+0x44>
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	4b23      	ldr	r3, [pc, #140]	; (8002b38 <TIM_TimeBaseInit+0xc4>)
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d003      	beq.n	8002ab8 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	4b22      	ldr	r3, [pc, #136]	; (8002b3c <TIM_TimeBaseInit+0xc8>)
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d108      	bne.n	8002aca <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8002ab8:	89fb      	ldrh	r3, [r7, #14]
 8002aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002abe:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	885a      	ldrh	r2, [r3, #2]
 8002ac4:	89fb      	ldrh	r3, [r7, #14]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	4b1c      	ldr	r3, [pc, #112]	; (8002b40 <TIM_TimeBaseInit+0xcc>)
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d00c      	beq.n	8002aec <TIM_TimeBaseInit+0x78>
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	4b1b      	ldr	r3, [pc, #108]	; (8002b44 <TIM_TimeBaseInit+0xd0>)
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d008      	beq.n	8002aec <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8002ada:	89fb      	ldrh	r3, [r7, #14]
 8002adc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ae0:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	891a      	ldrh	r2, [r3, #8]
 8002ae6:	89fb      	ldrh	r3, [r7, #14]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	89fa      	ldrh	r2, [r7, #14]
 8002af0:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	881a      	ldrh	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	4b09      	ldr	r3, [pc, #36]	; (8002b2c <TIM_TimeBaseInit+0xb8>)
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d003      	beq.n	8002b12 <TIM_TimeBaseInit+0x9e>
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	4b08      	ldr	r3, [pc, #32]	; (8002b30 <TIM_TimeBaseInit+0xbc>)
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d104      	bne.n	8002b1c <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	7a9b      	ldrb	r3, [r3, #10]
 8002b16:	461a      	mov	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	829a      	strh	r2, [r3, #20]
}
 8002b22:	3714      	adds	r7, #20
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	40010000 	.word	0x40010000
 8002b30:	40010400 	.word	0x40010400
 8002b34:	40000400 	.word	0x40000400
 8002b38:	40000800 	.word	0x40000800
 8002b3c:	40000c00 	.word	0x40000c00
 8002b40:	40001000 	.word	0x40001000
 8002b44:	40001400 	.word	0x40001400

08002b48 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f04f 32ff 	mov.w	r2, #4294967295
 8002b56:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	729a      	strb	r2, [r3, #10]
}
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop

08002b7c <TIM_PrescalerConfig>:
  *            @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *            @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediatly.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	4613      	mov	r3, r2
 8002b86:	460a      	mov	r2, r1
 8002b88:	807a      	strh	r2, [r7, #2]
 8002b8a:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	887a      	ldrh	r2, [r7, #2]
 8002b90:	851a      	strh	r2, [r3, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	883a      	ldrh	r2, [r7, #0]
 8002b96:	829a      	strh	r2, [r3, #20]
}
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop

08002ba4 <TIM_CounterModeConfig>:
  *            @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *            @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	460b      	mov	r3, r1
 8002bae:	807b      	strh	r3, [r7, #2]
  uint16_t tmpcr1 = 0;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	881b      	ldrh	r3, [r3, #0]
 8002bb8:	81fb      	strh	r3, [r7, #14]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bba:	89fb      	ldrh	r3, [r7, #14]
 8002bbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bc0:	81fb      	strh	r3, [r7, #14]

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 8002bc2:	89fa      	ldrh	r2, [r7, #14]
 8002bc4:	887b      	ldrh	r3, [r7, #2]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	89fa      	ldrh	r2, [r7, #14]
 8002bce:	801a      	strh	r2, [r3, #0]
}
 8002bd0:	3714      	adds	r7, #20
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop

08002bdc <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop

08002bf8 <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop

08002c14 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c38:	b29b      	uxth	r3, r3
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop

08002c48 <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	460b      	mov	r3, r1
 8002c52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002c54:	78fb      	ldrb	r3, [r7, #3]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d008      	beq.n	8002c6c <TIM_UpdateDisableConfig+0x24>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	881b      	ldrh	r3, [r3, #0]
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	f043 0302 	orr.w	r3, r3, #2
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	801a      	strh	r2, [r3, #0]
 8002c6a:	e007      	b.n	8002c7c <TIM_UpdateDisableConfig+0x34>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	881b      	ldrh	r3, [r3, #0]
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	f023 0302 	bic.w	r3, r3, #2
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	801a      	strh	r2, [r3, #0]
  }
}
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop

08002c88 <TIM_UpdateRequestConfig>:
  *                 generation through the slave mode controller.
  *            @arg TIM_UpdateSource_Regular: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	460b      	mov	r3, r1
 8002c92:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 8002c94:	887b      	ldrh	r3, [r7, #2]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d008      	beq.n	8002cac <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	881b      	ldrh	r3, [r3, #0]
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	f043 0304 	orr.w	r3, r3, #4
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	801a      	strh	r2, [r3, #0]
 8002caa:	e007      	b.n	8002cbc <TIM_UpdateRequestConfig+0x34>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	881b      	ldrh	r3, [r3, #0]
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	f023 0304 	bic.w	r3, r3, #4
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	801a      	strh	r2, [r3, #0]
  }
}
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop

08002cc8 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002cd4:	78fb      	ldrb	r3, [r7, #3]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d008      	beq.n	8002cec <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	881b      	ldrh	r3, [r3, #0]
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	801a      	strh	r2, [r3, #0]
 8002cea:	e007      	b.n	8002cfc <TIM_ARRPreloadConfig+0x34>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	881b      	ldrh	r3, [r3, #0]
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	801a      	strh	r2, [r3, #0]
  }
}
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop

08002d08 <TIM_SelectOnePulseMode>:
  *            @arg TIM_OPMode_Single
  *            @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	460b      	mov	r3, r1
 8002d12:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	881b      	ldrh	r3, [r3, #0]
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	f023 0308 	bic.w	r3, r3, #8
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	801a      	strh	r2, [r3, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	881b      	ldrh	r3, [r3, #0]
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	887b      	ldrh	r3, [r7, #2]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	801a      	strh	r2, [r3, #0]
}
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop

08002d40 <TIM_SetClockDivision>:
  *            @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *            @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	460b      	mov	r3, r1
 8002d4a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	881b      	ldrh	r3, [r3, #0]
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	801a      	strh	r2, [r3, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	881b      	ldrh	r3, [r3, #0]
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	887b      	ldrh	r3, [r7, #2]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	801a      	strh	r2, [r3, #0]
}
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop

08002d78 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	460b      	mov	r3, r1
 8002d82:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002d84:	78fb      	ldrb	r3, [r7, #3]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d008      	beq.n	8002d9c <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	881b      	ldrh	r3, [r3, #0]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	f043 0301 	orr.w	r3, r3, #1
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	801a      	strh	r2, [r3, #0]
 8002d9a:	e007      	b.n	8002dac <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	881b      	ldrh	r3, [r3, #0]
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	f023 0301 	bic.w	r3, r3, #1
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	801a      	strh	r2, [r3, #0]
  }
}
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop

08002db8 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	817b      	strh	r3, [r7, #10]
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	81fb      	strh	r3, [r7, #14]
 8002dca:	2300      	movs	r3, #0
 8002dcc:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	8c1b      	ldrh	r3, [r3, #32]
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	f023 0301 	bic.w	r3, r3, #1
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	8c1b      	ldrh	r3, [r3, #32]
 8002de2:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	889b      	ldrh	r3, [r3, #4]
 8002de8:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	8b1b      	ldrh	r3, [r3, #24]
 8002dee:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 8002df0:	897b      	ldrh	r3, [r7, #10]
 8002df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002df6:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 8002df8:	897b      	ldrh	r3, [r7, #10]
 8002dfa:	f023 0303 	bic.w	r3, r3, #3
 8002dfe:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	881a      	ldrh	r2, [r3, #0]
 8002e04:	897b      	ldrh	r3, [r7, #10]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 8002e0a:	89fb      	ldrh	r3, [r7, #14]
 8002e0c:	f023 0302 	bic.w	r3, r3, #2
 8002e10:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	899a      	ldrh	r2, [r3, #12]
 8002e16:	89fb      	ldrh	r3, [r7, #14]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	885a      	ldrh	r2, [r3, #2]
 8002e20:	89fb      	ldrh	r3, [r7, #14]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	4b1e      	ldr	r3, [pc, #120]	; (8002ea4 <TIM_OC1Init+0xec>)
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d003      	beq.n	8002e36 <TIM_OC1Init+0x7e>
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	4b1d      	ldr	r3, [pc, #116]	; (8002ea8 <TIM_OC1Init+0xf0>)
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d123      	bne.n	8002e7e <TIM_OC1Init+0xc6>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8002e36:	89fb      	ldrh	r3, [r7, #14]
 8002e38:	f023 0308 	bic.w	r3, r3, #8
 8002e3c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	89da      	ldrh	r2, [r3, #14]
 8002e42:	89fb      	ldrh	r3, [r7, #14]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 8002e48:	89fb      	ldrh	r3, [r7, #14]
 8002e4a:	f023 0304 	bic.w	r3, r3, #4
 8002e4e:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	889a      	ldrh	r2, [r3, #4]
 8002e54:	89fb      	ldrh	r3, [r7, #14]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 8002e5a:	89bb      	ldrh	r3, [r7, #12]
 8002e5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e60:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 8002e62:	89bb      	ldrh	r3, [r7, #12]
 8002e64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e68:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	8a1a      	ldrh	r2, [r3, #16]
 8002e6e:	89bb      	ldrh	r3, [r7, #12]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	8a5a      	ldrh	r2, [r3, #18]
 8002e78:	89bb      	ldrh	r3, [r7, #12]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	89ba      	ldrh	r2, [r7, #12]
 8002e82:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	897a      	ldrh	r2, [r7, #10]
 8002e88:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	689a      	ldr	r2, [r3, #8]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	89fa      	ldrh	r2, [r7, #14]
 8002e96:	841a      	strh	r2, [r3, #32]
}
 8002e98:	3714      	adds	r7, #20
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	40010000 	.word	0x40010000
 8002ea8:	40010400 	.word	0x40010400

08002eac <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	817b      	strh	r3, [r7, #10]
 8002eba:	2300      	movs	r3, #0
 8002ebc:	81fb      	strh	r3, [r7, #14]
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	8c1b      	ldrh	r3, [r3, #32]
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	f023 0310 	bic.w	r3, r3, #16
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	8c1b      	ldrh	r3, [r3, #32]
 8002ed6:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	889b      	ldrh	r3, [r3, #4]
 8002edc:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	8b1b      	ldrh	r3, [r3, #24]
 8002ee2:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
 8002ee4:	897b      	ldrh	r3, [r7, #10]
 8002ee6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002eea:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 8002eec:	897b      	ldrh	r3, [r7, #10]
 8002eee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ef2:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	881b      	ldrh	r3, [r3, #0]
 8002ef8:	021b      	lsls	r3, r3, #8
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	897b      	ldrh	r3, [r7, #10]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 8002f02:	89fb      	ldrh	r3, [r7, #14]
 8002f04:	f023 0320 	bic.w	r3, r3, #32
 8002f08:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	899b      	ldrh	r3, [r3, #12]
 8002f0e:	011b      	lsls	r3, r3, #4
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	89fb      	ldrh	r3, [r7, #14]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	885b      	ldrh	r3, [r3, #2]
 8002f1c:	011b      	lsls	r3, r3, #4
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	89fb      	ldrh	r3, [r7, #14]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	4b22      	ldr	r3, [pc, #136]	; (8002fb4 <TIM_OC2Init+0x108>)
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d003      	beq.n	8002f36 <TIM_OC2Init+0x8a>
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	4b21      	ldr	r3, [pc, #132]	; (8002fb8 <TIM_OC2Init+0x10c>)
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d12b      	bne.n	8002f8e <TIM_OC2Init+0xe2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8002f36:	89fb      	ldrh	r3, [r7, #14]
 8002f38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f3c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	89db      	ldrh	r3, [r3, #14]
 8002f42:	011b      	lsls	r3, r3, #4
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	89fb      	ldrh	r3, [r7, #14]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 8002f4c:	89fb      	ldrh	r3, [r7, #14]
 8002f4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f52:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	889b      	ldrh	r3, [r3, #4]
 8002f58:	011b      	lsls	r3, r3, #4
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	89fb      	ldrh	r3, [r7, #14]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
 8002f62:	89bb      	ldrh	r3, [r7, #12]
 8002f64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f68:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 8002f6a:	89bb      	ldrh	r3, [r7, #12]
 8002f6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f70:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	8a1b      	ldrh	r3, [r3, #16]
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	89bb      	ldrh	r3, [r7, #12]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	8a5b      	ldrh	r3, [r3, #18]
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	89bb      	ldrh	r3, [r7, #12]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	89ba      	ldrh	r2, [r7, #12]
 8002f92:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	897a      	ldrh	r2, [r7, #10]
 8002f98:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	689a      	ldr	r2, [r3, #8]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	89fa      	ldrh	r2, [r7, #14]
 8002fa6:	841a      	strh	r2, [r3, #32]
}
 8002fa8:	3714      	adds	r7, #20
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	40010000 	.word	0x40010000
 8002fb8:	40010400 	.word	0x40010400

08002fbc <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	817b      	strh	r3, [r7, #10]
 8002fca:	2300      	movs	r3, #0
 8002fcc:	81fb      	strh	r3, [r7, #14]
 8002fce:	2300      	movs	r3, #0
 8002fd0:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	8c1b      	ldrh	r3, [r3, #32]
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	8c1b      	ldrh	r3, [r3, #32]
 8002fe6:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	889b      	ldrh	r3, [r3, #4]
 8002fec:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	8b9b      	ldrh	r3, [r3, #28]
 8002ff2:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 8002ff4:	897b      	ldrh	r3, [r7, #10]
 8002ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ffa:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8002ffc:	897b      	ldrh	r3, [r7, #10]
 8002ffe:	f023 0303 	bic.w	r3, r3, #3
 8003002:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	881a      	ldrh	r2, [r3, #0]
 8003008:	897b      	ldrh	r3, [r7, #10]
 800300a:	4313      	orrs	r3, r2
 800300c:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 800300e:	89fb      	ldrh	r3, [r7, #14]
 8003010:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003014:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	899b      	ldrh	r3, [r3, #12]
 800301a:	021b      	lsls	r3, r3, #8
 800301c:	b29a      	uxth	r2, r3
 800301e:	89fb      	ldrh	r3, [r7, #14]
 8003020:	4313      	orrs	r3, r2
 8003022:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	885b      	ldrh	r3, [r3, #2]
 8003028:	021b      	lsls	r3, r3, #8
 800302a:	b29a      	uxth	r2, r3
 800302c:	89fb      	ldrh	r3, [r7, #14]
 800302e:	4313      	orrs	r3, r2
 8003030:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	4b22      	ldr	r3, [pc, #136]	; (80030c0 <TIM_OC3Init+0x104>)
 8003036:	429a      	cmp	r2, r3
 8003038:	d003      	beq.n	8003042 <TIM_OC3Init+0x86>
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	4b21      	ldr	r3, [pc, #132]	; (80030c4 <TIM_OC3Init+0x108>)
 800303e:	429a      	cmp	r2, r3
 8003040:	d12b      	bne.n	800309a <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8003042:	89fb      	ldrh	r3, [r7, #14]
 8003044:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003048:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	89db      	ldrh	r3, [r3, #14]
 800304e:	021b      	lsls	r3, r3, #8
 8003050:	b29a      	uxth	r2, r3
 8003052:	89fb      	ldrh	r3, [r7, #14]
 8003054:	4313      	orrs	r3, r2
 8003056:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8003058:	89fb      	ldrh	r3, [r7, #14]
 800305a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800305e:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	889b      	ldrh	r3, [r3, #4]
 8003064:	021b      	lsls	r3, r3, #8
 8003066:	b29a      	uxth	r2, r3
 8003068:	89fb      	ldrh	r3, [r7, #14]
 800306a:	4313      	orrs	r3, r2
 800306c:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 800306e:	89bb      	ldrh	r3, [r7, #12]
 8003070:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003074:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 8003076:	89bb      	ldrh	r3, [r7, #12]
 8003078:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800307c:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	8a1b      	ldrh	r3, [r3, #16]
 8003082:	011b      	lsls	r3, r3, #4
 8003084:	b29a      	uxth	r2, r3
 8003086:	89bb      	ldrh	r3, [r7, #12]
 8003088:	4313      	orrs	r3, r2
 800308a:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	8a5b      	ldrh	r3, [r3, #18]
 8003090:	011b      	lsls	r3, r3, #4
 8003092:	b29a      	uxth	r2, r3
 8003094:	89bb      	ldrh	r3, [r7, #12]
 8003096:	4313      	orrs	r3, r2
 8003098:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	89ba      	ldrh	r2, [r7, #12]
 800309e:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	897a      	ldrh	r2, [r7, #10]
 80030a4:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	689a      	ldr	r2, [r3, #8]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	89fa      	ldrh	r2, [r7, #14]
 80030b2:	841a      	strh	r2, [r3, #32]
}
 80030b4:	3714      	adds	r7, #20
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	40010000 	.word	0x40010000
 80030c4:	40010400 	.word	0x40010400

080030c8 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80030d2:	2300      	movs	r3, #0
 80030d4:	81bb      	strh	r3, [r7, #12]
 80030d6:	2300      	movs	r3, #0
 80030d8:	817b      	strh	r3, [r7, #10]
 80030da:	2300      	movs	r3, #0
 80030dc:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	8c1b      	ldrh	r3, [r3, #32]
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	8c1b      	ldrh	r3, [r3, #32]
 80030f2:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	889b      	ldrh	r3, [r3, #4]
 80030f8:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	8b9b      	ldrh	r3, [r3, #28]
 80030fe:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 8003100:	89bb      	ldrh	r3, [r7, #12]
 8003102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003106:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 8003108:	89bb      	ldrh	r3, [r7, #12]
 800310a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800310e:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	881b      	ldrh	r3, [r3, #0]
 8003114:	021b      	lsls	r3, r3, #8
 8003116:	b29a      	uxth	r2, r3
 8003118:	89bb      	ldrh	r3, [r7, #12]
 800311a:	4313      	orrs	r3, r2
 800311c:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 800311e:	897b      	ldrh	r3, [r7, #10]
 8003120:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003124:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	899b      	ldrh	r3, [r3, #12]
 800312a:	031b      	lsls	r3, r3, #12
 800312c:	b29a      	uxth	r2, r3
 800312e:	897b      	ldrh	r3, [r7, #10]
 8003130:	4313      	orrs	r3, r2
 8003132:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	885b      	ldrh	r3, [r3, #2]
 8003138:	031b      	lsls	r3, r3, #12
 800313a:	b29a      	uxth	r2, r3
 800313c:	897b      	ldrh	r3, [r7, #10]
 800313e:	4313      	orrs	r3, r2
 8003140:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	4b11      	ldr	r3, [pc, #68]	; (800318c <TIM_OC4Init+0xc4>)
 8003146:	429a      	cmp	r2, r3
 8003148:	d003      	beq.n	8003152 <TIM_OC4Init+0x8a>
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	4b10      	ldr	r3, [pc, #64]	; (8003190 <TIM_OC4Init+0xc8>)
 800314e:	429a      	cmp	r2, r3
 8003150:	d10a      	bne.n	8003168 <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 8003152:	89fb      	ldrh	r3, [r7, #14]
 8003154:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003158:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	8a1b      	ldrh	r3, [r3, #16]
 800315e:	019b      	lsls	r3, r3, #6
 8003160:	b29a      	uxth	r2, r3
 8003162:	89fb      	ldrh	r3, [r7, #14]
 8003164:	4313      	orrs	r3, r2
 8003166:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	89fa      	ldrh	r2, [r7, #14]
 800316c:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	89ba      	ldrh	r2, [r7, #12]
 8003172:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	689a      	ldr	r2, [r3, #8]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	897a      	ldrh	r2, [r7, #10]
 8003180:	841a      	strh	r2, [r3, #32]
}
 8003182:	3714      	adds	r7, #20
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr
 800318c:	40010000 	.word	0x40010000
 8003190:	40010400 	.word	0x40010400

08003194 <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	801a      	strh	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	805a      	strh	r2, [r3, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	609a      	str	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	81da      	strh	r2, [r3, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	821a      	strh	r2, [r3, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	825a      	strh	r2, [r3, #18]
}
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop

080031d8 <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	4613      	mov	r3, r2
 80031e2:	460a      	mov	r2, r1
 80031e4:	807a      	strh	r2, [r7, #2]
 80031e6:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
 80031e8:	2300      	movs	r3, #0
 80031ea:	60fb      	str	r3, [r7, #12]
  uint16_t tmp1 = 0;
 80031ec:	2300      	movs	r3, #0
 80031ee:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	60fb      	str	r3, [r7, #12]
  tmp += CCMR_OFFSET;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	3318      	adds	r3, #24
 80031f8:	60fb      	str	r3, [r7, #12]

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 80031fa:	887b      	ldrh	r3, [r7, #2]
 80031fc:	2201      	movs	r2, #1
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	817b      	strh	r3, [r7, #10]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	8c1b      	ldrh	r3, [r3, #32]
 8003208:	b29a      	uxth	r2, r3
 800320a:	897b      	ldrh	r3, [r7, #10]
 800320c:	43db      	mvns	r3, r3
 800320e:	b29b      	uxth	r3, r3
 8003210:	4013      	ands	r3, r2
 8003212:	b29a      	uxth	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	841a      	strh	r2, [r3, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8003218:	887b      	ldrh	r3, [r7, #2]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d002      	beq.n	8003224 <TIM_SelectOCxM+0x4c>
 800321e:	887b      	ldrh	r3, [r7, #2]
 8003220:	2b08      	cmp	r3, #8
 8003222:	d113      	bne.n	800324c <TIM_SelectOCxM+0x74>
  {
    tmp += (TIM_Channel>>1);
 8003224:	887b      	ldrh	r3, [r7, #2]
 8003226:	085b      	lsrs	r3, r3, #1
 8003228:	b29b      	uxth	r3, r3
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	4413      	add	r3, r2
 800322e:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6819      	ldr	r1, [r3, #0]
 8003236:	f64f 738f 	movw	r3, #65423	; 0xff8f
 800323a:	400b      	ands	r3, r1
 800323c:	6013      	str	r3, [r2, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	6811      	ldr	r1, [r2, #0]
 8003244:	883a      	ldrh	r2, [r7, #0]
 8003246:	430a      	orrs	r2, r1
 8003248:	601a      	str	r2, [r3, #0]
 800324a:	e016      	b.n	800327a <TIM_SelectOCxM+0xa2>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 800324c:	887b      	ldrh	r3, [r7, #2]
 800324e:	3b04      	subs	r3, #4
 8003250:	b29b      	uxth	r3, r3
 8003252:	085b      	lsrs	r3, r3, #1
 8003254:	b29b      	uxth	r3, r3
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	4413      	add	r3, r2
 800325a:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6819      	ldr	r1, [r3, #0]
 8003262:	f648 73ff 	movw	r3, #36863	; 0x8fff
 8003266:	400b      	ands	r3, r1
 8003268:	6013      	str	r3, [r2, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	6811      	ldr	r1, [r2, #0]
 8003270:	883a      	ldrh	r2, [r7, #0]
 8003272:	0212      	lsls	r2, r2, #8
 8003274:	b292      	uxth	r2, r2
 8003276:	430a      	orrs	r2, r1
 8003278:	601a      	str	r2, [r3, #0]
  }
}
 800327a:	3714      	adds	r7, #20
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop

080032a0 <TIM_SetCompare2>:
  *         peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	639a      	str	r2, [r3, #56]	; 0x38
}
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop

080032bc <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop

080032d8 <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop

080032f4 <TIM_ForcedOC1Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	460b      	mov	r3, r1
 80032fe:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8003300:	2300      	movs	r3, #0
 8003302:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	8b1b      	ldrh	r3, [r3, #24]
 8003308:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
 800330a:	89fb      	ldrh	r3, [r7, #14]
 800330c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003310:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 8003312:	89fa      	ldrh	r2, [r7, #14]
 8003314:	887b      	ldrh	r3, [r7, #2]
 8003316:	4313      	orrs	r3, r2
 8003318:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	89fa      	ldrh	r2, [r7, #14]
 800331e:	831a      	strh	r2, [r3, #24]
}
 8003320:	3714      	adds	r7, #20
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop

0800332c <TIM_ForcedOC2Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	460b      	mov	r3, r1
 8003336:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8003338:	2300      	movs	r3, #0
 800333a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	8b1b      	ldrh	r3, [r3, #24]
 8003340:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
 8003342:	89fb      	ldrh	r3, [r7, #14]
 8003344:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003348:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 800334a:	887b      	ldrh	r3, [r7, #2]
 800334c:	021b      	lsls	r3, r3, #8
 800334e:	b29a      	uxth	r2, r3
 8003350:	89fb      	ldrh	r3, [r7, #14]
 8003352:	4313      	orrs	r3, r2
 8003354:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	89fa      	ldrh	r2, [r7, #14]
 800335a:	831a      	strh	r2, [r3, #24]
}
 800335c:	3714      	adds	r7, #20
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop

08003368 <TIM_ForcedOC3Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	460b      	mov	r3, r1
 8003372:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8003374:	2300      	movs	r3, #0
 8003376:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	8b9b      	ldrh	r3, [r3, #28]
 800337c:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
 800337e:	89fb      	ldrh	r3, [r7, #14]
 8003380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003384:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 8003386:	89fa      	ldrh	r2, [r7, #14]
 8003388:	887b      	ldrh	r3, [r7, #2]
 800338a:	4313      	orrs	r3, r2
 800338c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	89fa      	ldrh	r2, [r7, #14]
 8003392:	839a      	strh	r2, [r3, #28]
}
 8003394:	3714      	adds	r7, #20
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop

080033a0 <TIM_ForcedOC4Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	460b      	mov	r3, r1
 80033aa:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80033ac:	2300      	movs	r3, #0
 80033ae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	8b9b      	ldrh	r3, [r3, #28]
 80033b4:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
 80033b6:	89fb      	ldrh	r3, [r7, #14]
 80033b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033bc:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 80033be:	887b      	ldrh	r3, [r7, #2]
 80033c0:	021b      	lsls	r3, r3, #8
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	89fb      	ldrh	r3, [r7, #14]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	89fa      	ldrh	r2, [r7, #14]
 80033ce:	839a      	strh	r2, [r3, #28]
}
 80033d0:	3714      	adds	r7, #20
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop

080033dc <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	460b      	mov	r3, r1
 80033e6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80033e8:	2300      	movs	r3, #0
 80033ea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	8b1b      	ldrh	r3, [r3, #24]
 80033f0:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 80033f2:	89fb      	ldrh	r3, [r7, #14]
 80033f4:	f023 0308 	bic.w	r3, r3, #8
 80033f8:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 80033fa:	89fa      	ldrh	r2, [r7, #14]
 80033fc:	887b      	ldrh	r3, [r7, #2]
 80033fe:	4313      	orrs	r3, r2
 8003400:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	89fa      	ldrh	r2, [r7, #14]
 8003406:	831a      	strh	r2, [r3, #24]
}
 8003408:	3714      	adds	r7, #20
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop

08003414 <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	460b      	mov	r3, r1
 800341e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8003420:	2300      	movs	r3, #0
 8003422:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	8b1b      	ldrh	r3, [r3, #24]
 8003428:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 800342a:	89fb      	ldrh	r3, [r7, #14]
 800342c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003430:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8003432:	887b      	ldrh	r3, [r7, #2]
 8003434:	021b      	lsls	r3, r3, #8
 8003436:	b29a      	uxth	r2, r3
 8003438:	89fb      	ldrh	r3, [r7, #14]
 800343a:	4313      	orrs	r3, r2
 800343c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	89fa      	ldrh	r2, [r7, #14]
 8003442:	831a      	strh	r2, [r3, #24]
}
 8003444:	3714      	adds	r7, #20
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop

08003450 <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	460b      	mov	r3, r1
 800345a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800345c:	2300      	movs	r3, #0
 800345e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	8b9b      	ldrh	r3, [r3, #28]
 8003464:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8003466:	89fb      	ldrh	r3, [r7, #14]
 8003468:	f023 0308 	bic.w	r3, r3, #8
 800346c:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 800346e:	89fa      	ldrh	r2, [r7, #14]
 8003470:	887b      	ldrh	r3, [r7, #2]
 8003472:	4313      	orrs	r3, r2
 8003474:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	89fa      	ldrh	r2, [r7, #14]
 800347a:	839a      	strh	r2, [r3, #28]
}
 800347c:	3714      	adds	r7, #20
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop

08003488 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	460b      	mov	r3, r1
 8003492:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8003494:	2300      	movs	r3, #0
 8003496:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	8b9b      	ldrh	r3, [r3, #28]
 800349c:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 800349e:	89fb      	ldrh	r3, [r7, #14]
 80034a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034a4:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 80034a6:	887b      	ldrh	r3, [r7, #2]
 80034a8:	021b      	lsls	r3, r3, #8
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	89fb      	ldrh	r3, [r7, #14]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	89fa      	ldrh	r2, [r7, #14]
 80034b6:	839a      	strh	r2, [r3, #28]
}
 80034b8:	3714      	adds	r7, #20
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop

080034c4 <TIM_OC1FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	460b      	mov	r3, r1
 80034ce:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80034d0:	2300      	movs	r3, #0
 80034d2:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	8b1b      	ldrh	r3, [r3, #24]
 80034d8:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
 80034da:	89fb      	ldrh	r3, [r7, #14]
 80034dc:	f023 0304 	bic.w	r3, r3, #4
 80034e0:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 80034e2:	89fa      	ldrh	r2, [r7, #14]
 80034e4:	887b      	ldrh	r3, [r7, #2]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	89fa      	ldrh	r2, [r7, #14]
 80034ee:	831a      	strh	r2, [r3, #24]
}
 80034f0:	3714      	adds	r7, #20
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop

080034fc <TIM_OC2FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	460b      	mov	r3, r1
 8003506:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8003508:	2300      	movs	r3, #0
 800350a:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	8b1b      	ldrh	r3, [r3, #24]
 8003510:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
 8003512:	89fb      	ldrh	r3, [r7, #14]
 8003514:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003518:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 800351a:	887b      	ldrh	r3, [r7, #2]
 800351c:	021b      	lsls	r3, r3, #8
 800351e:	b29a      	uxth	r2, r3
 8003520:	89fb      	ldrh	r3, [r7, #14]
 8003522:	4313      	orrs	r3, r2
 8003524:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	89fa      	ldrh	r2, [r7, #14]
 800352a:	831a      	strh	r2, [r3, #24]
}
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop

08003538 <TIM_OC3FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	460b      	mov	r3, r1
 8003542:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8003544:	2300      	movs	r3, #0
 8003546:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	8b9b      	ldrh	r3, [r3, #28]
 800354c:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
 800354e:	89fb      	ldrh	r3, [r7, #14]
 8003550:	f023 0304 	bic.w	r3, r3, #4
 8003554:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 8003556:	89fa      	ldrh	r2, [r7, #14]
 8003558:	887b      	ldrh	r3, [r7, #2]
 800355a:	4313      	orrs	r3, r2
 800355c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	89fa      	ldrh	r2, [r7, #14]
 8003562:	839a      	strh	r2, [r3, #28]
}
 8003564:	3714      	adds	r7, #20
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop

08003570 <TIM_OC4FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	460b      	mov	r3, r1
 800357a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800357c:	2300      	movs	r3, #0
 800357e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	8b9b      	ldrh	r3, [r3, #28]
 8003584:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
 8003586:	89fb      	ldrh	r3, [r7, #14]
 8003588:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800358c:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 800358e:	887b      	ldrh	r3, [r7, #2]
 8003590:	021b      	lsls	r3, r3, #8
 8003592:	b29a      	uxth	r2, r3
 8003594:	89fb      	ldrh	r3, [r7, #14]
 8003596:	4313      	orrs	r3, r2
 8003598:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	89fa      	ldrh	r2, [r7, #14]
 800359e:	839a      	strh	r2, [r3, #28]
}
 80035a0:	3714      	adds	r7, #20
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop

080035ac <TIM_ClearOC1Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	460b      	mov	r3, r1
 80035b6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80035b8:	2300      	movs	r3, #0
 80035ba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	8b1b      	ldrh	r3, [r3, #24]
 80035c0:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
 80035c2:	89fb      	ldrh	r3, [r7, #14]
 80035c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035c8:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 80035ca:	89fa      	ldrh	r2, [r7, #14]
 80035cc:	887b      	ldrh	r3, [r7, #2]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	89fa      	ldrh	r2, [r7, #14]
 80035d6:	831a      	strh	r2, [r3, #24]
}
 80035d8:	3714      	adds	r7, #20
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop

080035e4 <TIM_ClearOC2Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	460b      	mov	r3, r1
 80035ee:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80035f0:	2300      	movs	r3, #0
 80035f2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	8b1b      	ldrh	r3, [r3, #24]
 80035f8:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
 80035fa:	89fb      	ldrh	r3, [r7, #14]
 80035fc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003600:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 8003602:	887b      	ldrh	r3, [r7, #2]
 8003604:	021b      	lsls	r3, r3, #8
 8003606:	b29a      	uxth	r2, r3
 8003608:	89fb      	ldrh	r3, [r7, #14]
 800360a:	4313      	orrs	r3, r2
 800360c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	89fa      	ldrh	r2, [r7, #14]
 8003612:	831a      	strh	r2, [r3, #24]
}
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop

08003620 <TIM_ClearOC3Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	460b      	mov	r3, r1
 800362a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800362c:	2300      	movs	r3, #0
 800362e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	8b9b      	ldrh	r3, [r3, #28]
 8003634:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
 8003636:	89fb      	ldrh	r3, [r7, #14]
 8003638:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800363c:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 800363e:	89fa      	ldrh	r2, [r7, #14]
 8003640:	887b      	ldrh	r3, [r7, #2]
 8003642:	4313      	orrs	r3, r2
 8003644:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	89fa      	ldrh	r2, [r7, #14]
 800364a:	839a      	strh	r2, [r3, #28]
}
 800364c:	3714      	adds	r7, #20
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop

08003658 <TIM_ClearOC4Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	460b      	mov	r3, r1
 8003662:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8003664:	2300      	movs	r3, #0
 8003666:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	8b9b      	ldrh	r3, [r3, #28]
 800366c:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
 800366e:	89fb      	ldrh	r3, [r7, #14]
 8003670:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003674:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 8003676:	887b      	ldrh	r3, [r7, #2]
 8003678:	021b      	lsls	r3, r3, #8
 800367a:	b29a      	uxth	r2, r3
 800367c:	89fb      	ldrh	r3, [r7, #14]
 800367e:	4313      	orrs	r3, r2
 8003680:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	89fa      	ldrh	r2, [r7, #14]
 8003686:	839a      	strh	r2, [r3, #28]
}
 8003688:	3714      	adds	r7, #20
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop

08003694 <TIM_OC1PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	460b      	mov	r3, r1
 800369e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 80036a0:	2300      	movs	r3, #0
 80036a2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	8c1b      	ldrh	r3, [r3, #32]
 80036a8:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
 80036aa:	89fb      	ldrh	r3, [r7, #14]
 80036ac:	f023 0302 	bic.w	r3, r3, #2
 80036b0:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCPolarity;
 80036b2:	89fa      	ldrh	r2, [r7, #14]
 80036b4:	887b      	ldrh	r3, [r7, #2]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	89fa      	ldrh	r2, [r7, #14]
 80036be:	841a      	strh	r2, [r3, #32]
}
 80036c0:	3714      	adds	r7, #20
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop

080036cc <TIM_OC1NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	460b      	mov	r3, r1
 80036d6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 80036d8:	2300      	movs	r3, #0
 80036da:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	8c1b      	ldrh	r3, [r3, #32]
 80036e0:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 80036e2:	89fb      	ldrh	r3, [r7, #14]
 80036e4:	f023 0308 	bic.w	r3, r3, #8
 80036e8:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCNPolarity;
 80036ea:	89fa      	ldrh	r2, [r7, #14]
 80036ec:	887b      	ldrh	r3, [r7, #2]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	89fa      	ldrh	r2, [r7, #14]
 80036f6:	841a      	strh	r2, [r3, #32]
}
 80036f8:	3714      	adds	r7, #20
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop

08003704 <TIM_OC2PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	460b      	mov	r3, r1
 800370e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8003710:	2300      	movs	r3, #0
 8003712:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	8c1b      	ldrh	r3, [r3, #32]
 8003718:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
 800371a:	89fb      	ldrh	r3, [r7, #14]
 800371c:	f023 0320 	bic.w	r3, r3, #32
 8003720:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 8003722:	887b      	ldrh	r3, [r7, #2]
 8003724:	011b      	lsls	r3, r3, #4
 8003726:	b29a      	uxth	r2, r3
 8003728:	89fb      	ldrh	r3, [r7, #14]
 800372a:	4313      	orrs	r3, r2
 800372c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	89fa      	ldrh	r2, [r7, #14]
 8003732:	841a      	strh	r2, [r3, #32]
}
 8003734:	3714      	adds	r7, #20
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop

08003740 <TIM_OC2NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	460b      	mov	r3, r1
 800374a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800374c:	2300      	movs	r3, #0
 800374e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	8c1b      	ldrh	r3, [r3, #32]
 8003754:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8003756:	89fb      	ldrh	r3, [r7, #14]
 8003758:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800375c:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 800375e:	887b      	ldrh	r3, [r7, #2]
 8003760:	011b      	lsls	r3, r3, #4
 8003762:	b29a      	uxth	r2, r3
 8003764:	89fb      	ldrh	r3, [r7, #14]
 8003766:	4313      	orrs	r3, r2
 8003768:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	89fa      	ldrh	r2, [r7, #14]
 800376e:	841a      	strh	r2, [r3, #32]
}
 8003770:	3714      	adds	r7, #20
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop

0800377c <TIM_OC3PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	460b      	mov	r3, r1
 8003786:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8003788:	2300      	movs	r3, #0
 800378a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	8c1b      	ldrh	r3, [r3, #32]
 8003790:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8003792:	89fb      	ldrh	r3, [r7, #14]
 8003794:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003798:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 800379a:	887b      	ldrh	r3, [r7, #2]
 800379c:	021b      	lsls	r3, r3, #8
 800379e:	b29a      	uxth	r2, r3
 80037a0:	89fb      	ldrh	r3, [r7, #14]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	89fa      	ldrh	r2, [r7, #14]
 80037aa:	841a      	strh	r2, [r3, #32]
}
 80037ac:	3714      	adds	r7, #20
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop

080037b8 <TIM_OC3NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	460b      	mov	r3, r1
 80037c2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 80037c4:	2300      	movs	r3, #0
 80037c6:	81fb      	strh	r3, [r7, #14]
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	8c1b      	ldrh	r3, [r3, #32]
 80037cc:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 80037ce:	89fb      	ldrh	r3, [r7, #14]
 80037d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037d4:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 80037d6:	887b      	ldrh	r3, [r7, #2]
 80037d8:	021b      	lsls	r3, r3, #8
 80037da:	b29a      	uxth	r2, r3
 80037dc:	89fb      	ldrh	r3, [r7, #14]
 80037de:	4313      	orrs	r3, r2
 80037e0:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	89fa      	ldrh	r2, [r7, #14]
 80037e6:	841a      	strh	r2, [r3, #32]
}
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop

080037f4 <TIM_OC4PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	460b      	mov	r3, r1
 80037fe:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8003800:	2300      	movs	r3, #0
 8003802:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	8c1b      	ldrh	r3, [r3, #32]
 8003808:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 800380a:	89fb      	ldrh	r3, [r7, #14]
 800380c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003810:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 8003812:	887b      	ldrh	r3, [r7, #2]
 8003814:	031b      	lsls	r3, r3, #12
 8003816:	b29a      	uxth	r2, r3
 8003818:	89fb      	ldrh	r3, [r7, #14]
 800381a:	4313      	orrs	r3, r2
 800381c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	89fa      	ldrh	r2, [r7, #14]
 8003822:	841a      	strh	r2, [r3, #32]
}
 8003824:	3714      	adds	r7, #20
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop

08003830 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	4613      	mov	r3, r2
 800383a:	460a      	mov	r2, r1
 800383c:	807a      	strh	r2, [r7, #2]
 800383e:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 8003840:	2300      	movs	r3, #0
 8003842:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 8003844:	887b      	ldrh	r3, [r7, #2]
 8003846:	2201      	movs	r2, #1
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	8c1b      	ldrh	r3, [r3, #32]
 8003852:	b29a      	uxth	r2, r3
 8003854:	89fb      	ldrh	r3, [r7, #14]
 8003856:	43db      	mvns	r3, r3
 8003858:	b29b      	uxth	r3, r3
 800385a:	4013      	ands	r3, r2
 800385c:	b29a      	uxth	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	8c1b      	ldrh	r3, [r3, #32]
 8003866:	b29a      	uxth	r2, r3
 8003868:	8839      	ldrh	r1, [r7, #0]
 800386a:	887b      	ldrh	r3, [r7, #2]
 800386c:	fa01 f303 	lsl.w	r3, r1, r3
 8003870:	b29b      	uxth	r3, r3
 8003872:	4313      	orrs	r3, r2
 8003874:	b29a      	uxth	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	841a      	strh	r2, [r3, #32]
}
 800387a:	3714      	adds	r7, #20
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	4613      	mov	r3, r2
 800388e:	460a      	mov	r2, r1
 8003890:	807a      	strh	r2, [r7, #2]
 8003892:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 8003894:	2300      	movs	r3, #0
 8003896:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 8003898:	887b      	ldrh	r3, [r7, #2]
 800389a:	2204      	movs	r2, #4
 800389c:	fa02 f303 	lsl.w	r3, r2, r3
 80038a0:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	8c1b      	ldrh	r3, [r3, #32]
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	89fb      	ldrh	r3, [r7, #14]
 80038aa:	43db      	mvns	r3, r3
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	4013      	ands	r3, r2
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	8c1b      	ldrh	r3, [r3, #32]
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	8839      	ldrh	r1, [r7, #0]
 80038be:	887b      	ldrh	r3, [r7, #2]
 80038c0:	fa01 f303 	lsl.w	r3, r1, r3
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	4313      	orrs	r3, r2
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	841a      	strh	r2, [r3, #32]
}
 80038ce:	3714      	adds	r7, #20
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	881b      	ldrh	r3, [r3, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10f      	bne.n	800390a <TIM_ICInit+0x32>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	8859      	ldrh	r1, [r3, #2]
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	889a      	ldrh	r2, [r3, #4]
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	891b      	ldrh	r3, [r3, #8]
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 fc92 	bl	8004220 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	88db      	ldrh	r3, [r3, #6]
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	4619      	mov	r1, r3
 8003904:	f000 f8e0 	bl	8003ac8 <TIM_SetIC1Prescaler>
 8003908:	e036      	b.n	8003978 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	881b      	ldrh	r3, [r3, #0]
 800390e:	2b04      	cmp	r3, #4
 8003910:	d10f      	bne.n	8003932 <TIM_ICInit+0x5a>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	8859      	ldrh	r1, [r3, #2]
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	889a      	ldrh	r2, [r3, #4]
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	891b      	ldrh	r3, [r3, #8]
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 fcba 	bl	8004298 <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	88db      	ldrh	r3, [r3, #6]
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	4619      	mov	r1, r3
 800392c:	f000 f8e8 	bl	8003b00 <TIM_SetIC2Prescaler>
 8003930:	e022      	b.n	8003978 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	881b      	ldrh	r3, [r3, #0]
 8003936:	2b08      	cmp	r3, #8
 8003938:	d10f      	bne.n	800395a <TIM_ICInit+0x82>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	8859      	ldrh	r1, [r3, #2]
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	889a      	ldrh	r2, [r3, #4]
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	891b      	ldrh	r3, [r3, #8]
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 fcec 	bl	8004324 <TI3_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	88db      	ldrh	r3, [r3, #6]
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	4619      	mov	r1, r3
 8003954:	f000 f8f2 	bl	8003b3c <TIM_SetIC3Prescaler>
 8003958:	e00e      	b.n	8003978 <TIM_ICInit+0xa0>
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	8859      	ldrh	r1, [r3, #2]
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	889a      	ldrh	r2, [r3, #4]
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	891b      	ldrh	r3, [r3, #8]
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 fd1e 	bl	80043a8 <TI4_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	88db      	ldrh	r3, [r3, #6]
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	4619      	mov	r1, r3
 8003974:	f000 f8fe 	bl	8003b74 <TIM_SetIC4Prescaler>
  }
}
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop

08003980 <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	811a      	strh	r2, [r3, #8]
}
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
 80039ba:	2300      	movs	r3, #0
 80039bc:	81fb      	strh	r3, [r7, #14]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
 80039be:	2301      	movs	r3, #1
 80039c0:	81bb      	strh	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	885b      	ldrh	r3, [r3, #2]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d102      	bne.n	80039d0 <TIM_PWMIConfig+0x20>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 80039ca:	2302      	movs	r3, #2
 80039cc:	81fb      	strh	r3, [r7, #14]
 80039ce:	e001      	b.n	80039d4 <TIM_PWMIConfig+0x24>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 80039d0:	2300      	movs	r3, #0
 80039d2:	81fb      	strh	r3, [r7, #14]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	889b      	ldrh	r3, [r3, #4]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d102      	bne.n	80039e2 <TIM_PWMIConfig+0x32>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 80039dc:	2302      	movs	r3, #2
 80039de:	81bb      	strh	r3, [r7, #12]
 80039e0:	e001      	b.n	80039e6 <TIM_PWMIConfig+0x36>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 80039e2:	2301      	movs	r3, #1
 80039e4:	81bb      	strh	r3, [r7, #12]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	881b      	ldrh	r3, [r3, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d11c      	bne.n	8003a28 <TIM_PWMIConfig+0x78>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	8859      	ldrh	r1, [r3, #2]
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	889a      	ldrh	r2, [r3, #4]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	891b      	ldrh	r3, [r3, #8]
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 fc10 	bl	8004220 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	88db      	ldrh	r3, [r3, #6]
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	4619      	mov	r1, r3
 8003a08:	f000 f85e 	bl	8003ac8 <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	891b      	ldrh	r3, [r3, #8]
 8003a10:	89f9      	ldrh	r1, [r7, #14]
 8003a12:	89ba      	ldrh	r2, [r7, #12]
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 fc3f 	bl	8004298 <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	88db      	ldrh	r3, [r3, #6]
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	4619      	mov	r1, r3
 8003a22:	f000 f86d 	bl	8003b00 <TIM_SetIC2Prescaler>
 8003a26:	e01b      	b.n	8003a60 <TIM_PWMIConfig+0xb0>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	8859      	ldrh	r1, [r3, #2]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	889a      	ldrh	r2, [r3, #4]
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	891b      	ldrh	r3, [r3, #8]
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 fc2f 	bl	8004298 <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	88db      	ldrh	r3, [r3, #6]
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	4619      	mov	r1, r3
 8003a42:	f000 f85d 	bl	8003b00 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	891b      	ldrh	r3, [r3, #8]
 8003a4a:	89f9      	ldrh	r1, [r7, #14]
 8003a4c:	89ba      	ldrh	r2, [r7, #12]
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 fbe6 	bl	8004220 <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	88db      	ldrh	r3, [r3, #6]
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	f000 f834 	bl	8003ac8 <TIM_SetIC1Prescaler>
  }
}
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop

08003a68 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <TIM_GetCapture2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint32_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <TIM_SetIC1Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	8b1b      	ldrh	r3, [r3, #24]
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	f023 030c 	bic.w	r3, r3, #12
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	831a      	strh	r2, [r3, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	8b1b      	ldrh	r3, [r3, #24]
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	887b      	ldrh	r3, [r7, #2]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	831a      	strh	r2, [r3, #24]
}
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop

08003b00 <TIM_SetIC2Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	460b      	mov	r3, r1
 8003b0a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	8b1b      	ldrh	r3, [r3, #24]
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	831a      	strh	r2, [r3, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	8b1b      	ldrh	r3, [r3, #24]
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	887b      	ldrh	r3, [r7, #2]
 8003b24:	021b      	lsls	r3, r3, #8
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	831a      	strh	r2, [r3, #24]
}
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop

08003b3c <TIM_SetIC3Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	460b      	mov	r3, r1
 8003b46:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	8b9b      	ldrh	r3, [r3, #28]
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	f023 030c 	bic.w	r3, r3, #12
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	839a      	strh	r2, [r3, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	8b9b      	ldrh	r3, [r3, #28]
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	887b      	ldrh	r3, [r7, #2]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	839a      	strh	r2, [r3, #28]
}
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop

08003b74 <TIM_SetIC4Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	8b9b      	ldrh	r3, [r3, #28]
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	839a      	strh	r2, [r3, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	8b9b      	ldrh	r3, [r3, #28]
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	887b      	ldrh	r3, [r7, #2]
 8003b98:	021b      	lsls	r3, r3, #8
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	839a      	strh	r2, [r3, #28]
}
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop

08003bb0 <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	881a      	ldrh	r2, [r3, #0]
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	885b      	ldrh	r3, [r3, #2]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	889b      	ldrh	r3, [r3, #4]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	88db      	ldrh	r3, [r3, #6]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	891b      	ldrh	r3, [r3, #8]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	895b      	ldrh	r3, [r3, #10]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8003be2:	4313      	orrs	r3, r2
 8003be4:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	899b      	ldrh	r3, [r3, #12]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8003bea:	4313      	orrs	r3, r2
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop

08003c00 <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	801a      	strh	r2, [r3, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	805a      	strh	r2, [r3, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	809a      	strh	r2, [r3, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	80da      	strh	r2, [r3, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	811a      	strh	r2, [r3, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	815a      	strh	r2, [r3, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	819a      	strh	r2, [r3, #12]
}
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	460b      	mov	r3, r1
 8003c46:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003c48:	78fb      	ldrb	r3, [r7, #3]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00c      	beq.n	8003c68 <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8003c66:	e009      	b.n	8003c7c <TIM_CtrlPWMOutputs+0x40>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }  
}
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop

08003c88 <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	460b      	mov	r3, r1
 8003c92:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003c94:	78fb      	ldrb	r3, [r7, #3]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d008      	beq.n	8003cac <TIM_SelectCOM+0x24>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	889b      	ldrh	r3, [r3, #4]
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	f043 0304 	orr.w	r3, r3, #4
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	809a      	strh	r2, [r3, #4]
 8003caa:	e007      	b.n	8003cbc <TIM_SelectCOM+0x34>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	889b      	ldrh	r3, [r3, #4]
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	f023 0304 	bic.w	r3, r3, #4
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	809a      	strh	r2, [r3, #4]
  }
}
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop

08003cc8 <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003cd4:	78fb      	ldrb	r3, [r7, #3]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d008      	beq.n	8003cec <TIM_CCPreloadControl+0x24>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	889b      	ldrh	r3, [r3, #4]
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	f043 0301 	orr.w	r3, r3, #1
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	809a      	strh	r2, [r3, #4]
 8003cea:	e007      	b.n	8003cfc <TIM_CCPreloadControl+0x34>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	889b      	ldrh	r3, [r3, #4]
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	f023 0301 	bic.w	r3, r3, #1
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	809a      	strh	r2, [r3, #4]
  }
}
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop

08003d08 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	4613      	mov	r3, r2
 8003d12:	460a      	mov	r2, r1
 8003d14:	807a      	strh	r2, [r7, #2]
 8003d16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003d18:	787b      	ldrb	r3, [r7, #1]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d008      	beq.n	8003d30 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	899b      	ldrh	r3, [r3, #12]
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	887b      	ldrh	r3, [r7, #2]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	819a      	strh	r2, [r3, #12]
 8003d2e:	e009      	b.n	8003d44 <TIM_ITConfig+0x3c>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	899b      	ldrh	r3, [r3, #12]
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	887b      	ldrh	r3, [r7, #2]
 8003d38:	43db      	mvns	r3, r3
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	b29a      	uxth	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	819a      	strh	r2, [r3, #12]
  }
}
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop

08003d50 <TIM_GenerateEvent>:
  * @note   TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.
  *        
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	460b      	mov	r3, r1
 8003d5a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	887a      	ldrh	r2, [r7, #2]
 8003d60:	829a      	strh	r2, [r3, #20]
}
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <TIM_GetFlagStatus>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.    
  *
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	460b      	mov	r3, r1
 8003d76:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8003d78:	2300      	movs	r3, #0
 8003d7a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	8a1b      	ldrh	r3, [r3, #16]
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	887b      	ldrh	r3, [r7, #2]
 8003d84:	4013      	ands	r3, r2
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d002      	beq.n	8003d92 <TIM_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	73fb      	strb	r3, [r7, #15]
 8003d90:	e001      	b.n	8003d96 <TIM_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8003d92:	2300      	movs	r3, #0
 8003d94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3714      	adds	r7, #20
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <TIM_ClearFlag>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.
  *    
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	460b      	mov	r3, r1
 8003dae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 8003db0:	887b      	ldrh	r3, [r7, #2]
 8003db2:	43db      	mvns	r3, r3
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	821a      	strh	r2, [r3, #16]
}
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	460b      	mov	r3, r1
 8003dce:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	81bb      	strh	r3, [r7, #12]
 8003dd8:	2300      	movs	r3, #0
 8003dda:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	8a1b      	ldrh	r3, [r3, #16]
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	887b      	ldrh	r3, [r7, #2]
 8003de4:	4013      	ands	r3, r2
 8003de6:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	899b      	ldrh	r3, [r3, #12]
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	887b      	ldrh	r3, [r7, #2]
 8003df0:	4013      	ands	r3, r2
 8003df2:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8003df4:	89bb      	ldrh	r3, [r7, #12]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d005      	beq.n	8003e06 <TIM_GetITStatus+0x42>
 8003dfa:	897b      	ldrh	r3, [r7, #10]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d002      	beq.n	8003e06 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8003e00:	2301      	movs	r3, #1
 8003e02:	73fb      	strb	r3, [r7, #15]
 8003e04:	e001      	b.n	8003e0a <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8003e06:	2300      	movs	r3, #0
 8003e08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3714      	adds	r7, #20
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	460b      	mov	r3, r1
 8003e22:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8003e24:	887b      	ldrh	r3, [r7, #2]
 8003e26:	43db      	mvns	r3, r3
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	821a      	strh	r2, [r3, #16]
}
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <TIM_DMAConfig>:
  * @param  TIM_DMABurstLength: DMA Burst length. This parameter can be one value
  *         between: TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	4613      	mov	r3, r2
 8003e42:	460a      	mov	r2, r1
 8003e44:	807a      	strh	r2, [r7, #2]
 8003e46:	803b      	strh	r3, [r7, #0]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 8003e48:	887a      	ldrh	r2, [r7, #2]
 8003e4a:	883b      	ldrh	r3, [r7, #0]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	460a      	mov	r2, r1
 8003e6c:	807a      	strh	r2, [r7, #2]
 8003e6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003e70:	787b      	ldrb	r3, [r7, #1]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d008      	beq.n	8003e88 <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	899b      	ldrh	r3, [r3, #12]
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	887b      	ldrh	r3, [r7, #2]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	819a      	strh	r2, [r3, #12]
 8003e86:	e009      	b.n	8003e9c <TIM_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	899b      	ldrh	r3, [r3, #12]
 8003e8c:	b29a      	uxth	r2, r3
 8003e8e:	887b      	ldrh	r3, [r7, #2]
 8003e90:	43db      	mvns	r3, r3
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	4013      	ands	r3, r2
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	819a      	strh	r2, [r3, #12]
  }
}
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop

08003ea8 <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003eb4:	78fb      	ldrb	r3, [r7, #3]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d008      	beq.n	8003ecc <TIM_SelectCCDMA+0x24>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	889b      	ldrh	r3, [r3, #4]
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	f043 0308 	orr.w	r3, r3, #8
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	809a      	strh	r2, [r3, #4]
 8003eca:	e007      	b.n	8003edc <TIM_SelectCCDMA+0x34>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	889b      	ldrh	r3, [r3, #4]
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	f023 0308 	bic.w	r3, r3, #8
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	809a      	strh	r2, [r3, #4]
  }
}
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop

08003ee8 <TIM_InternalClockConfig>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	891b      	ldrh	r3, [r3, #8]
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	f023 0307 	bic.w	r3, r3, #7
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	811a      	strh	r2, [r3, #8]
}
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop

08003f0c <TIM_ITRxExternalClockConfig>:
  *            @arg TIM_TS_ITR2: Internal Trigger 2
  *            @arg TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	460b      	mov	r3, r1
 8003f16:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
 8003f18:	887b      	ldrh	r3, [r7, #2]
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	f000 f875 	bl	800400c <TIM_SelectInputTrigger>

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	891b      	ldrh	r3, [r3, #8]
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	f043 0307 	orr.w	r3, r3, #7
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	811a      	strh	r2, [r3, #8]
}
 8003f32:	3708      	adds	r7, #8
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <TIM_TIxExternalClockConfig>:
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	8179      	strh	r1, [r7, #10]
 8003f42:	813a      	strh	r2, [r7, #8]
 8003f44:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 8003f46:	897b      	ldrh	r3, [r7, #10]
 8003f48:	2b60      	cmp	r3, #96	; 0x60
 8003f4a:	d107      	bne.n	8003f5c <TIM_TIxExternalClockConfig+0x24>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8003f4c:	893a      	ldrh	r2, [r7, #8]
 8003f4e:	88fb      	ldrh	r3, [r7, #6]
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	4611      	mov	r1, r2
 8003f54:	2201      	movs	r2, #1
 8003f56:	f000 f99f 	bl	8004298 <TI2_Config>
 8003f5a:	e006      	b.n	8003f6a <TIM_TIxExternalClockConfig+0x32>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8003f5c:	893a      	ldrh	r2, [r7, #8]
 8003f5e:	88fb      	ldrh	r3, [r7, #6]
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	4611      	mov	r1, r2
 8003f64:	2201      	movs	r2, #1
 8003f66:	f000 f95b 	bl	8004220 <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
 8003f6a:	897b      	ldrh	r3, [r7, #10]
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	4619      	mov	r1, r3
 8003f70:	f000 f84c 	bl	800400c <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	891b      	ldrh	r3, [r3, #8]
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	f043 0307 	orr.w	r3, r3, #7
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	811a      	strh	r2, [r3, #8]
}
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop

08003f8c <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	8179      	strh	r1, [r7, #10]
 8003f96:	813a      	strh	r2, [r7, #8]
 8003f98:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8003f9e:	8979      	ldrh	r1, [r7, #10]
 8003fa0:	893a      	ldrh	r2, [r7, #8]
 8003fa2:	88fb      	ldrh	r3, [r7, #6]
 8003fa4:	68f8      	ldr	r0, [r7, #12]
 8003fa6:	f000 f8a1 	bl	80040ec <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	891b      	ldrh	r3, [r3, #8]
 8003fae:	82fb      	strh	r3, [r7, #22]

  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8003fb0:	8afb      	ldrh	r3, [r7, #22]
 8003fb2:	f023 0307 	bic.w	r3, r3, #7
 8003fb6:	82fb      	strh	r3, [r7, #22]

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 8003fb8:	8afb      	ldrh	r3, [r7, #22]
 8003fba:	f043 0307 	orr.w	r3, r3, #7
 8003fbe:	82fb      	strh	r3, [r7, #22]

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8003fc0:	8afb      	ldrh	r3, [r7, #22]
 8003fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fc6:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_TS_ETRF;
 8003fc8:	8afb      	ldrh	r3, [r7, #22]
 8003fca:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003fce:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8afa      	ldrh	r2, [r7, #22]
 8003fd4:	811a      	strh	r2, [r3, #8]
}
 8003fd6:	3718      	adds	r7, #24
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	8179      	strh	r1, [r7, #10]
 8003fe6:	813a      	strh	r2, [r7, #8]
 8003fe8:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8003fea:	8979      	ldrh	r1, [r7, #10]
 8003fec:	893a      	ldrh	r2, [r7, #8]
 8003fee:	88fb      	ldrh	r3, [r7, #6]
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f000 f87b 	bl	80040ec <TIM_ETRConfig>

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	891b      	ldrh	r3, [r3, #8]
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004000:	b29a      	uxth	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	811a      	strh	r2, [r3, #8]
}
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <TIM_SelectInputTrigger>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	460b      	mov	r3, r1
 8004016:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
 8004018:	2300      	movs	r3, #0
 800401a:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	891b      	ldrh	r3, [r3, #8]
 8004020:	81fb      	strh	r3, [r7, #14]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8004022:	89fb      	ldrh	r3, [r7, #14]
 8004024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004028:	81fb      	strh	r3, [r7, #14]

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 800402a:	89fa      	ldrh	r2, [r7, #14]
 800402c:	887b      	ldrh	r3, [r7, #2]
 800402e:	4313      	orrs	r3, r2
 8004030:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	89fa      	ldrh	r2, [r7, #14]
 8004036:	811a      	strh	r2, [r3, #8]
}
 8004038:	3714      	adds	r7, #20
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop

08004044 <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	460b      	mov	r3, r1
 800404e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	889b      	ldrh	r3, [r3, #4]
 8004054:	b29b      	uxth	r3, r3
 8004056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800405a:	b29a      	uxth	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	889b      	ldrh	r3, [r3, #4]
 8004064:	b29a      	uxth	r2, r3
 8004066:	887b      	ldrh	r3, [r7, #2]
 8004068:	4313      	orrs	r3, r2
 800406a:	b29a      	uxth	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	809a      	strh	r2, [r3, #4]
}
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop

0800407c <TIM_SelectSlaveMode>:
  *            @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI
  *            @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	460b      	mov	r3, r1
 8004086:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	891b      	ldrh	r3, [r3, #8]
 800408c:	b29b      	uxth	r3, r3
 800408e:	f023 0307 	bic.w	r3, r3, #7
 8004092:	b29a      	uxth	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	811a      	strh	r2, [r3, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	891b      	ldrh	r3, [r3, #8]
 800409c:	b29a      	uxth	r2, r3
 800409e:	887b      	ldrh	r3, [r7, #2]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	811a      	strh	r2, [r3, #8]
}
 80040a8:	370c      	adds	r7, #12
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop

080040b4 <TIM_SelectMasterSlaveMode>:
  *                                             and its slaves (through TRGO)
  *            @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	460b      	mov	r3, r1
 80040be:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	891b      	ldrh	r3, [r3, #8]
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	811a      	strh	r2, [r3, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	891b      	ldrh	r3, [r3, #8]
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	887b      	ldrh	r3, [r7, #2]
 80040d8:	4313      	orrs	r3, r2
 80040da:	b29a      	uxth	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	811a      	strh	r2, [r3, #8]
}
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop

080040ec <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b087      	sub	sp, #28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	8179      	strh	r1, [r7, #10]
 80040f6:	813a      	strh	r2, [r7, #8]
 80040f8:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 80040fa:	2300      	movs	r3, #0
 80040fc:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	891b      	ldrh	r3, [r3, #8]
 8004102:	82fb      	strh	r3, [r7, #22]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 8004104:	8afb      	ldrh	r3, [r7, #22]
 8004106:	b2db      	uxtb	r3, r3
 8004108:	82fb      	strh	r3, [r7, #22]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 800410a:	88fb      	ldrh	r3, [r7, #6]
 800410c:	021b      	lsls	r3, r3, #8
 800410e:	b29a      	uxth	r2, r3
 8004110:	893b      	ldrh	r3, [r7, #8]
 8004112:	4313      	orrs	r3, r2
 8004114:	b29a      	uxth	r2, r3
 8004116:	897b      	ldrh	r3, [r7, #10]
 8004118:	4313      	orrs	r3, r2
 800411a:	b29a      	uxth	r2, r3
 800411c:	8afb      	ldrh	r3, [r7, #22]
 800411e:	4313      	orrs	r3, r2
 8004120:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8afa      	ldrh	r2, [r7, #22]
 8004126:	811a      	strh	r2, [r3, #8]
}
 8004128:	371c      	adds	r7, #28
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop

08004134 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 8004134:	b480      	push	{r7}
 8004136:	b087      	sub	sp, #28
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	8179      	strh	r1, [r7, #10]
 800413e:	813a      	strh	r2, [r7, #8]
 8004140:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 8004142:	2300      	movs	r3, #0
 8004144:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
 8004146:	2300      	movs	r3, #0
 8004148:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
 800414a:	2300      	movs	r3, #0
 800414c:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	891b      	ldrh	r3, [r3, #8]
 8004152:	82fb      	strh	r3, [r7, #22]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	8b1b      	ldrh	r3, [r3, #24]
 8004158:	82bb      	strh	r3, [r7, #20]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	8c1b      	ldrh	r3, [r3, #32]
 800415e:	827b      	strh	r3, [r7, #18]

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8004160:	8afb      	ldrh	r3, [r7, #22]
 8004162:	f023 0307 	bic.w	r3, r3, #7
 8004166:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
 8004168:	8afa      	ldrh	r2, [r7, #22]
 800416a:	897b      	ldrh	r3, [r7, #10]
 800416c:	4313      	orrs	r3, r2
 800416e:	82fb      	strh	r3, [r7, #22]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8004170:	8abb      	ldrh	r3, [r7, #20]
 8004172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004176:	f023 0303 	bic.w	r3, r3, #3
 800417a:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 800417c:	8abb      	ldrh	r3, [r7, #20]
 800417e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004182:	f043 0301 	orr.w	r3, r3, #1
 8004186:	82bb      	strh	r3, [r7, #20]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 8004188:	8a7b      	ldrh	r3, [r7, #18]
 800418a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800418e:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8004190:	88fb      	ldrh	r3, [r7, #6]
 8004192:	011b      	lsls	r3, r3, #4
 8004194:	b29a      	uxth	r2, r3
 8004196:	893b      	ldrh	r3, [r7, #8]
 8004198:	4313      	orrs	r3, r2
 800419a:	b29a      	uxth	r2, r3
 800419c:	8a7b      	ldrh	r3, [r7, #18]
 800419e:	4313      	orrs	r3, r2
 80041a0:	827b      	strh	r3, [r7, #18]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	8afa      	ldrh	r2, [r7, #22]
 80041a6:	811a      	strh	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8aba      	ldrh	r2, [r7, #20]
 80041ac:	831a      	strh	r2, [r3, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	8a7a      	ldrh	r2, [r7, #18]
 80041b2:	841a      	strh	r2, [r3, #32]
}
 80041b4:	371c      	adds	r7, #28
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop

080041c0 <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	460b      	mov	r3, r1
 80041ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80041cc:	78fb      	ldrb	r3, [r7, #3]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d008      	beq.n	80041e4 <TIM_SelectHallSensor+0x24>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	889b      	ldrh	r3, [r3, #4]
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041dc:	b29a      	uxth	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	809a      	strh	r2, [r3, #4]
 80041e2:	e007      	b.n	80041f4 <TIM_SelectHallSensor+0x34>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	889b      	ldrh	r3, [r3, #4]
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	809a      	strh	r2, [r3, #4]
  }
}
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop

08004200 <TIM_RemapConfig>:
  *            @arg TIM11_HSE:      TIM11 CH4 input is connected to HSE_RTC clock
  *                                 (HSE divided by a programmable prescaler)  
  * @retval None
  */
void TIM_RemapConfig(TIM_TypeDef* TIMx, uint16_t TIM_Remap)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	460b      	mov	r3, r1
 800420a:	807b      	strh	r3, [r7, #2]
 /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	887a      	ldrh	r2, [r7, #2]
 8004210:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop

08004220 <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8004220:	b480      	push	{r7}
 8004222:	b087      	sub	sp, #28
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	8179      	strh	r1, [r7, #10]
 800422a:	813a      	strh	r2, [r7, #8]
 800422c:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 800422e:	2300      	movs	r3, #0
 8004230:	82fb      	strh	r3, [r7, #22]
 8004232:	2300      	movs	r3, #0
 8004234:	82bb      	strh	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8c1b      	ldrh	r3, [r3, #32]
 800423a:	b29b      	uxth	r3, r3
 800423c:	f023 0301 	bic.w	r3, r3, #1
 8004240:	b29a      	uxth	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8b1b      	ldrh	r3, [r3, #24]
 800424a:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	8c1b      	ldrh	r3, [r3, #32]
 8004250:	82bb      	strh	r3, [r7, #20]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8004252:	8afb      	ldrh	r3, [r7, #22]
 8004254:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8004258:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800425a:	88fb      	ldrh	r3, [r7, #6]
 800425c:	011b      	lsls	r3, r3, #4
 800425e:	b29a      	uxth	r2, r3
 8004260:	893b      	ldrh	r3, [r7, #8]
 8004262:	4313      	orrs	r3, r2
 8004264:	b29a      	uxth	r2, r3
 8004266:	8afb      	ldrh	r3, [r7, #22]
 8004268:	4313      	orrs	r3, r2
 800426a:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800426c:	8abb      	ldrh	r3, [r7, #20]
 800426e:	f023 030a 	bic.w	r3, r3, #10
 8004272:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8004274:	897a      	ldrh	r2, [r7, #10]
 8004276:	8abb      	ldrh	r3, [r7, #20]
 8004278:	4313      	orrs	r3, r2
 800427a:	b29b      	uxth	r3, r3
 800427c:	f043 0301 	orr.w	r3, r3, #1
 8004280:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	8afa      	ldrh	r2, [r7, #22]
 8004286:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8aba      	ldrh	r2, [r7, #20]
 800428c:	841a      	strh	r2, [r3, #32]
}
 800428e:	371c      	adds	r7, #28
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8004298:	b480      	push	{r7}
 800429a:	b087      	sub	sp, #28
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	8179      	strh	r1, [r7, #10]
 80042a2:	813a      	strh	r2, [r7, #8]
 80042a4:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 80042a6:	2300      	movs	r3, #0
 80042a8:	82fb      	strh	r3, [r7, #22]
 80042aa:	2300      	movs	r3, #0
 80042ac:	82bb      	strh	r3, [r7, #20]
 80042ae:	2300      	movs	r3, #0
 80042b0:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	8c1b      	ldrh	r3, [r3, #32]
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	f023 0310 	bic.w	r3, r3, #16
 80042bc:	b29a      	uxth	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8b1b      	ldrh	r3, [r3, #24]
 80042c6:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8c1b      	ldrh	r3, [r3, #32]
 80042cc:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 80042ce:	897b      	ldrh	r3, [r7, #10]
 80042d0:	011b      	lsls	r3, r3, #4
 80042d2:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 80042d4:	8afb      	ldrh	r3, [r7, #22]
 80042d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042da:	051b      	lsls	r3, r3, #20
 80042dc:	0d1b      	lsrs	r3, r3, #20
 80042de:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 80042e0:	88fb      	ldrh	r3, [r7, #6]
 80042e2:	031b      	lsls	r3, r3, #12
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	8afb      	ldrh	r3, [r7, #22]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 80042ec:	893b      	ldrh	r3, [r7, #8]
 80042ee:	021b      	lsls	r3, r3, #8
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	8afb      	ldrh	r3, [r7, #22]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042f8:	8abb      	ldrh	r3, [r7, #20]
 80042fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80042fe:	82bb      	strh	r3, [r7, #20]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8004300:	8a7a      	ldrh	r2, [r7, #18]
 8004302:	8abb      	ldrh	r3, [r7, #20]
 8004304:	4313      	orrs	r3, r2
 8004306:	b29b      	uxth	r3, r3
 8004308:	f043 0310 	orr.w	r3, r3, #16
 800430c:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8afa      	ldrh	r2, [r7, #22]
 8004312:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8aba      	ldrh	r2, [r7, #20]
 8004318:	841a      	strh	r2, [r3, #32]
}
 800431a:	371c      	adds	r7, #28
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <TI3_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8004324:	b480      	push	{r7}
 8004326:	b087      	sub	sp, #28
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	8179      	strh	r1, [r7, #10]
 800432e:	813a      	strh	r2, [r7, #8]
 8004330:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8004332:	2300      	movs	r3, #0
 8004334:	82fb      	strh	r3, [r7, #22]
 8004336:	2300      	movs	r3, #0
 8004338:	82bb      	strh	r3, [r7, #20]
 800433a:	2300      	movs	r3, #0
 800433c:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	8c1b      	ldrh	r3, [r3, #32]
 8004342:	b29b      	uxth	r3, r3
 8004344:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004348:	b29a      	uxth	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8b9b      	ldrh	r3, [r3, #28]
 8004352:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8c1b      	ldrh	r3, [r3, #32]
 8004358:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 800435a:	897b      	ldrh	r3, [r7, #10]
 800435c:	021b      	lsls	r3, r3, #8
 800435e:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 8004360:	8afb      	ldrh	r3, [r7, #22]
 8004362:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8004366:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8004368:	88fb      	ldrh	r3, [r7, #6]
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	b29a      	uxth	r2, r3
 800436e:	893b      	ldrh	r3, [r7, #8]
 8004370:	4313      	orrs	r3, r2
 8004372:	b29a      	uxth	r2, r3
 8004374:	8afb      	ldrh	r3, [r7, #22]
 8004376:	4313      	orrs	r3, r2
 8004378:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800437a:	8abb      	ldrh	r3, [r7, #20]
 800437c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004380:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8004382:	8a7a      	ldrh	r2, [r7, #18]
 8004384:	8abb      	ldrh	r3, [r7, #20]
 8004386:	4313      	orrs	r3, r2
 8004388:	b29b      	uxth	r3, r3
 800438a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800438e:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	8afa      	ldrh	r2, [r7, #22]
 8004394:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	8aba      	ldrh	r2, [r7, #20]
 800439a:	841a      	strh	r2, [r3, #32]
}
 800439c:	371c      	adds	r7, #28
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop

080043a8 <TI4_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b087      	sub	sp, #28
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	8179      	strh	r1, [r7, #10]
 80043b2:	813a      	strh	r2, [r7, #8]
 80043b4:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 80043b6:	2300      	movs	r3, #0
 80043b8:	82fb      	strh	r3, [r7, #22]
 80043ba:	2300      	movs	r3, #0
 80043bc:	82bb      	strh	r3, [r7, #20]
 80043be:	2300      	movs	r3, #0
 80043c0:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	8c1b      	ldrh	r3, [r3, #32]
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	8b9b      	ldrh	r3, [r3, #28]
 80043d6:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	8c1b      	ldrh	r3, [r3, #32]
 80043dc:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 80043de:	897b      	ldrh	r3, [r7, #10]
 80043e0:	031b      	lsls	r3, r3, #12
 80043e2:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 80043e4:	8afb      	ldrh	r3, [r7, #22]
 80043e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ea:	051b      	lsls	r3, r3, #20
 80043ec:	0d1b      	lsrs	r3, r3, #20
 80043ee:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 80043f0:	893b      	ldrh	r3, [r7, #8]
 80043f2:	021b      	lsls	r3, r3, #8
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	8afb      	ldrh	r3, [r7, #22]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 80043fc:	88fb      	ldrh	r3, [r7, #6]
 80043fe:	031b      	lsls	r3, r3, #12
 8004400:	b29a      	uxth	r2, r3
 8004402:	8afb      	ldrh	r3, [r7, #22]
 8004404:	4313      	orrs	r3, r2
 8004406:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004408:	8abb      	ldrh	r3, [r7, #20]
 800440a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800440e:	045b      	lsls	r3, r3, #17
 8004410:	0c5b      	lsrs	r3, r3, #17
 8004412:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8004414:	8a7a      	ldrh	r2, [r7, #18]
 8004416:	8abb      	ldrh	r3, [r7, #20]
 8004418:	4313      	orrs	r3, r2
 800441a:	b29b      	uxth	r3, r3
 800441c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004420:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	8afa      	ldrh	r2, [r7, #22]
 8004426:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	8aba      	ldrh	r2, [r7, #20]
 800442c:	841a      	strh	r2, [r3, #32]
}
 800442e:	371c      	adds	r7, #28
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <SYSCFG_DeInit>:
  *   registers to their default reset values.
  * @param  None
  * @retval None
  */
void SYSCFG_DeInit(void)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	af00      	add	r7, sp, #0
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 800443c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004440:	2101      	movs	r1, #1
 8004442:	f000 fc93 	bl	8004d6c <RCC_APB2PeriphResetCmd>
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 8004446:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800444a:	2100      	movs	r1, #0
 800444c:	f000 fc8e 	bl	8004d6c <RCC_APB2PeriphResetCmd>
}
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop

08004454 <SYSCFG_MemoryRemapConfig>:
  *            @arg SYSCFG_MemoryRemap_FSMC:        FSMC (Bank1 (NOR/PSRAM 1 and 2) mapped at 0x00000000   
  *            @arg SYSCFG_MemoryRemap_SRAM:        Embedded SRAM (112kB) mapped at 0x00000000          
  * @retval None
  */
void SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	4603      	mov	r3, r0
 800445c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap));

  SYSCFG->MEMRMP = SYSCFG_MemoryRemap;
 800445e:	4b04      	ldr	r3, [pc, #16]	; (8004470 <SYSCFG_MemoryRemapConfig+0x1c>)
 8004460:	79fa      	ldrb	r2, [r7, #7]
 8004462:	601a      	str	r2, [r3, #0]
}
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	40013800 	.word	0x40013800

08004474 <SYSCFG_EXTILineConfig>:
  *           and STM32F427x/STM32F437x devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8004474:	b490      	push	{r4, r7}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	4602      	mov	r2, r0
 800447c:	460b      	mov	r3, r1
 800447e:	71fa      	strb	r2, [r7, #7]
 8004480:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8004482:	2300      	movs	r3, #0
 8004484:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8004486:	79bb      	ldrb	r3, [r7, #6]
 8004488:	f003 0303 	and.w	r3, r3, #3
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	220f      	movs	r2, #15
 8004490:	fa02 f303 	lsl.w	r3, r2, r3
 8004494:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8004496:	4b15      	ldr	r3, [pc, #84]	; (80044ec <SYSCFG_EXTILineConfig+0x78>)
 8004498:	79ba      	ldrb	r2, [r7, #6]
 800449a:	0892      	lsrs	r2, r2, #2
 800449c:	b2d2      	uxtb	r2, r2
 800449e:	4913      	ldr	r1, [pc, #76]	; (80044ec <SYSCFG_EXTILineConfig+0x78>)
 80044a0:	79b8      	ldrb	r0, [r7, #6]
 80044a2:	0880      	lsrs	r0, r0, #2
 80044a4:	b2c0      	uxtb	r0, r0
 80044a6:	3002      	adds	r0, #2
 80044a8:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 80044ac:	68f9      	ldr	r1, [r7, #12]
 80044ae:	43c9      	mvns	r1, r1
 80044b0:	4001      	ands	r1, r0
 80044b2:	3202      	adds	r2, #2
 80044b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 80044b8:	4b0c      	ldr	r3, [pc, #48]	; (80044ec <SYSCFG_EXTILineConfig+0x78>)
 80044ba:	79ba      	ldrb	r2, [r7, #6]
 80044bc:	0892      	lsrs	r2, r2, #2
 80044be:	b2d2      	uxtb	r2, r2
 80044c0:	490a      	ldr	r1, [pc, #40]	; (80044ec <SYSCFG_EXTILineConfig+0x78>)
 80044c2:	79b8      	ldrb	r0, [r7, #6]
 80044c4:	0880      	lsrs	r0, r0, #2
 80044c6:	b2c0      	uxtb	r0, r0
 80044c8:	3002      	adds	r0, #2
 80044ca:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 80044ce:	79fc      	ldrb	r4, [r7, #7]
 80044d0:	79b9      	ldrb	r1, [r7, #6]
 80044d2:	f001 0103 	and.w	r1, r1, #3
 80044d6:	0089      	lsls	r1, r1, #2
 80044d8:	fa04 f101 	lsl.w	r1, r4, r1
 80044dc:	4301      	orrs	r1, r0
 80044de:	3202      	adds	r2, #2
 80044e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bc90      	pop	{r4, r7}
 80044ea:	4770      	bx	lr
 80044ec:	40013800 	.word	0x40013800

080044f0 <SYSCFG_ETH_MediaInterfaceConfig>:
  *            @arg SYSCFG_ETH_MediaInterface_MII: MII mode selected
  *            @arg SYSCFG_ETH_MediaInterface_RMII: RMII mode selected 
  * @retval None 
  */
void SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface) 
{ 
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_ETH_MEDIA_INTERFACE(SYSCFG_ETH_MediaInterface)); 
  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) PMC_MII_RMII_SEL_BB = SYSCFG_ETH_MediaInterface; 
 80044f8:	4b03      	ldr	r3, [pc, #12]	; (8004508 <SYSCFG_ETH_MediaInterfaceConfig+0x18>)
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	601a      	str	r2, [r3, #0]
}
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr
 8004508:	422700dc 	.word	0x422700dc

0800450c <SYSCFG_CompensationCellCmd>:
  *            @arg ENABLE: I/O compensation cell enabled  
  *            @arg DISABLE: I/O compensation cell power-down mode  
  * @retval None
  */
void SYSCFG_CompensationCellCmd(FunctionalState NewState)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	4603      	mov	r3, r0
 8004514:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CMPCR_CMP_PD_BB = (uint32_t)NewState;
 8004516:	4b04      	ldr	r3, [pc, #16]	; (8004528 <SYSCFG_CompensationCellCmd+0x1c>)
 8004518:	79fa      	ldrb	r2, [r7, #7]
 800451a:	601a      	str	r2, [r3, #0]
}
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	42270400 	.word	0x42270400

0800452c <SYSCFG_GetCompensationCellStatus>:
  * @brief  Checks whether the I/O Compensation Cell ready flag is set or not.
  * @param  None
  * @retval The new state of the I/O Compensation Cell ready flag (SET or RESET)
  */
FlagStatus SYSCFG_GetCompensationCellStatus(void)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
  FlagStatus bitstatus = RESET;
 8004532:	2300      	movs	r3, #0
 8004534:	71fb      	strb	r3, [r7, #7]
    
  if ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY ) != (uint32_t)RESET)
 8004536:	4b09      	ldr	r3, [pc, #36]	; (800455c <SYSCFG_GetCompensationCellStatus+0x30>)
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800453e:	2b00      	cmp	r3, #0
 8004540:	d002      	beq.n	8004548 <SYSCFG_GetCompensationCellStatus+0x1c>
  {
    bitstatus = SET;
 8004542:	2301      	movs	r3, #1
 8004544:	71fb      	strb	r3, [r7, #7]
 8004546:	e001      	b.n	800454c <SYSCFG_GetCompensationCellStatus+0x20>
  }
  else
  {
    bitstatus = RESET;
 8004548:	2300      	movs	r3, #0
 800454a:	71fb      	strb	r3, [r7, #7]
  }
  return bitstatus;
 800454c:	79fb      	ldrb	r3, [r7, #7]
}
 800454e:	4618      	mov	r0, r3
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	40013800 	.word	0x40013800

08004560 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004564:	4b12      	ldr	r3, [pc, #72]	; (80045b0 <RCC_DeInit+0x50>)
 8004566:	4a12      	ldr	r2, [pc, #72]	; (80045b0 <RCC_DeInit+0x50>)
 8004568:	6812      	ldr	r2, [r2, #0]
 800456a:	f042 0201 	orr.w	r2, r2, #1
 800456e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004570:	4b0f      	ldr	r3, [pc, #60]	; (80045b0 <RCC_DeInit+0x50>)
 8004572:	2200      	movs	r2, #0
 8004574:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON and PLLI2S bits */
  RCC->CR &= (uint32_t)0xFAF6FFFF;
 8004576:	4a0e      	ldr	r2, [pc, #56]	; (80045b0 <RCC_DeInit+0x50>)
 8004578:	4b0d      	ldr	r3, [pc, #52]	; (80045b0 <RCC_DeInit+0x50>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f023 63a1 	bic.w	r3, r3, #84410368	; 0x5080000
 8004580:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004584:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004586:	4b0a      	ldr	r3, [pc, #40]	; (80045b0 <RCC_DeInit+0x50>)
 8004588:	4a0a      	ldr	r2, [pc, #40]	; (80045b4 <RCC_DeInit+0x54>)
 800458a:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 800458c:	4b08      	ldr	r3, [pc, #32]	; (80045b0 <RCC_DeInit+0x50>)
 800458e:	4a0a      	ldr	r2, [pc, #40]	; (80045b8 <RCC_DeInit+0x58>)
 8004590:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004594:	4b06      	ldr	r3, [pc, #24]	; (80045b0 <RCC_DeInit+0x50>)
 8004596:	4a06      	ldr	r2, [pc, #24]	; (80045b0 <RCC_DeInit+0x50>)
 8004598:	6812      	ldr	r2, [r2, #0]
 800459a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800459e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80045a0:	4b03      	ldr	r3, [pc, #12]	; (80045b0 <RCC_DeInit+0x50>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	60da      	str	r2, [r3, #12]
#ifdef STM32F427X 
  /* Disable Timers clock prescalers selection */
  RCC->DCKCFGR = 0x00000000;
#endif /* STM32F427X */ 

}
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	40023800 	.word	0x40023800
 80045b4:	24003010 	.word	0x24003010
 80045b8:	20003000 	.word	0x20003000

080045bc <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	4603      	mov	r3, r0
 80045c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 80045c6:	4b05      	ldr	r3, [pc, #20]	; (80045dc <RCC_HSEConfig+0x20>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 80045cc:	4b03      	ldr	r3, [pc, #12]	; (80045dc <RCC_HSEConfig+0x20>)
 80045ce:	79fa      	ldrb	r2, [r7, #7]
 80045d0:	701a      	strb	r2, [r3, #0]
}
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr
 80045dc:	40023802 	.word	0x40023802

080045e0 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
 80045e6:	2300      	movs	r3, #0
 80045e8:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 80045ea:	2300      	movs	r3, #0
 80045ec:	71fb      	strb	r3, [r7, #7]
  FlagStatus hsestatus = RESET;
 80045ee:	2300      	movs	r3, #0
 80045f0:	71bb      	strb	r3, [r7, #6]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 80045f2:	2031      	movs	r0, #49	; 0x31
 80045f4:	f000 fc92 	bl	8004f1c <RCC_GetFlagStatus>
 80045f8:	4603      	mov	r3, r0
 80045fa:	71bb      	strb	r3, [r7, #6]
    startupcounter++;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	3301      	adds	r3, #1
 8004600:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004608:	d002      	beq.n	8004610 <RCC_WaitForHSEStartUp+0x30>
 800460a:	79bb      	ldrb	r3, [r7, #6]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0f0      	beq.n	80045f2 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8004610:	2031      	movs	r0, #49	; 0x31
 8004612:	f000 fc83 	bl	8004f1c <RCC_GetFlagStatus>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d002      	beq.n	8004622 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 800461c:	2301      	movs	r3, #1
 800461e:	71fb      	strb	r3, [r7, #7]
 8004620:	e001      	b.n	8004626 <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 8004622:	2300      	movs	r3, #0
 8004624:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 8004626:	79fb      	ldrb	r3, [r7, #7]
}
 8004628:	4618      	mov	r0, r3
 800462a:	3708      	adds	r7, #8
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	4603      	mov	r3, r0
 8004638:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
 800463a:	2300      	movs	r3, #0
 800463c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 800463e:	4b0a      	ldr	r3, [pc, #40]	; (8004668 <RCC_AdjustHSICalibrationValue+0x38>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800464a:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 800464c:	79fb      	ldrb	r3, [r7, #7]
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	4313      	orrs	r3, r2
 8004654:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
 8004656:	4b04      	ldr	r3, [pc, #16]	; (8004668 <RCC_AdjustHSICalibrationValue+0x38>)
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	601a      	str	r2, [r3, #0]
}
 800465c:	3714      	adds	r7, #20
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	40023800 	.word	0x40023800

0800466c <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	4603      	mov	r3, r0
 8004674:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8004676:	4b04      	ldr	r3, [pc, #16]	; (8004688 <RCC_HSICmd+0x1c>)
 8004678:	79fa      	ldrb	r2, [r7, #7]
 800467a:	601a      	str	r2, [r3, #0]
}
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	42470000 	.word	0x42470000

0800468c <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	4603      	mov	r3, r0
 8004694:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8004696:	4b0c      	ldr	r3, [pc, #48]	; (80046c8 <RCC_LSEConfig+0x3c>)
 8004698:	2200      	movs	r2, #0
 800469a:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800469c:	4b0a      	ldr	r3, [pc, #40]	; (80046c8 <RCC_LSEConfig+0x3c>)
 800469e:	2200      	movs	r2, #0
 80046a0:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 80046a2:	79fb      	ldrb	r3, [r7, #7]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d002      	beq.n	80046ae <RCC_LSEConfig+0x22>
 80046a8:	2b04      	cmp	r3, #4
 80046aa:	d004      	beq.n	80046b6 <RCC_LSEConfig+0x2a>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;
    default:
      break;
 80046ac:	e007      	b.n	80046be <RCC_LSEConfig+0x32>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 80046ae:	4b06      	ldr	r3, [pc, #24]	; (80046c8 <RCC_LSEConfig+0x3c>)
 80046b0:	2201      	movs	r2, #1
 80046b2:	701a      	strb	r2, [r3, #0]
      break;
 80046b4:	e003      	b.n	80046be <RCC_LSEConfig+0x32>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 80046b6:	4b04      	ldr	r3, [pc, #16]	; (80046c8 <RCC_LSEConfig+0x3c>)
 80046b8:	2205      	movs	r2, #5
 80046ba:	701a      	strb	r2, [r3, #0]
      break;
 80046bc:	bf00      	nop
    default:
      break;
  }
}
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	40023870 	.word	0x40023870

080046cc <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	4603      	mov	r3, r0
 80046d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 80046d6:	4b04      	ldr	r3, [pc, #16]	; (80046e8 <RCC_LSICmd+0x1c>)
 80046d8:	79fa      	ldrb	r2, [r7, #7]
 80046da:	601a      	str	r2, [r3, #0]
}
 80046dc:	370c      	adds	r7, #12
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	42470e80 	.word	0x42470e80

080046ec <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
 80046f8:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 80046fa:	4b0a      	ldr	r3, [pc, #40]	; (8004724 <RCC_PLLConfig+0x38>)
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	0191      	lsls	r1, r2, #6
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	4311      	orrs	r1, r2
 8004704:	683a      	ldr	r2, [r7, #0]
 8004706:	0852      	lsrs	r2, r2, #1
 8004708:	3a01      	subs	r2, #1
 800470a:	0412      	lsls	r2, r2, #16
 800470c:	4311      	orrs	r1, r2
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	4311      	orrs	r1, r2
                 (PLLQ << 24);
 8004712:	69ba      	ldr	r2, [r7, #24]
 8004714:	0612      	lsls	r2, r2, #24
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8004716:	430a      	orrs	r2, r1
 8004718:	605a      	str	r2, [r3, #4]
                 (PLLQ << 24);
}
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr
 8004724:	40023800 	.word	0x40023800

08004728 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	4603      	mov	r3, r0
 8004730:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8004732:	4b04      	ldr	r3, [pc, #16]	; (8004744 <RCC_PLLCmd+0x1c>)
 8004734:	79fa      	ldrb	r2, [r7, #7]
 8004736:	601a      	str	r2, [r3, #0]
}
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	42470060 	.word	0x42470060

08004748 <RCC_PLLI2SConfig>:
  *         on the I2S clock frequency.
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 8004752:	4b06      	ldr	r3, [pc, #24]	; (800476c <RCC_PLLI2SConfig+0x24>)
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	0191      	lsls	r1, r2, #6
 8004758:	683a      	ldr	r2, [r7, #0]
 800475a:	0712      	lsls	r2, r2, #28
 800475c:	430a      	orrs	r2, r1
 800475e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr
 800476c:	40023800 	.word	0x40023800

08004770 <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	4603      	mov	r3, r0
 8004778:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 800477a:	4b04      	ldr	r3, [pc, #16]	; (800478c <RCC_PLLI2SCmd+0x1c>)
 800477c:	79fa      	ldrb	r2, [r7, #7]
 800477e:	601a      	str	r2, [r3, #0]
}
 8004780:	370c      	adds	r7, #12
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	42470068 	.word	0x42470068

08004790 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	4603      	mov	r3, r0
 8004798:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 800479a:	4b04      	ldr	r3, [pc, #16]	; (80047ac <RCC_ClockSecuritySystemCmd+0x1c>)
 800479c:	79fa      	ldrb	r2, [r7, #7]
 800479e:	601a      	str	r2, [r3, #0]
}
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	4247004c 	.word	0x4247004c

080047b0 <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80047ba:	2300      	movs	r3, #0
 80047bc:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 80047be:	4b0a      	ldr	r3, [pc, #40]	; (80047e8 <RCC_MCO1Config+0x38>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 80047d8:	4b03      	ldr	r3, [pc, #12]	; (80047e8 <RCC_MCO1Config+0x38>)
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	609a      	str	r2, [r3, #8]
}
 80047de:	3714      	adds	r7, #20
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr
 80047e8:	40023800 	.word	0x40023800

080047ec <RCC_MCO2Config>:
  *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
  *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80047f6:	2300      	movs	r3, #0
 80047f8:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 80047fa:	4b0a      	ldr	r3, [pc, #40]	; (8004824 <RCC_MCO2Config+0x38>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004806:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	4313      	orrs	r3, r2
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	4313      	orrs	r3, r2
 8004812:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8004814:	4b03      	ldr	r3, [pc, #12]	; (8004824 <RCC_MCO2Config+0x38>)
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	609a      	str	r2, [r3, #8]
}
 800481a:	3714      	adds	r7, #20
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	40023800 	.word	0x40023800

08004828 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8004830:	2300      	movs	r3, #0
 8004832:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8004834:	4b09      	ldr	r3, [pc, #36]	; (800485c <RCC_SYSCLKConfig+0x34>)
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f023 0303 	bic.w	r3, r3, #3
 8004840:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4313      	orrs	r3, r2
 8004848:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800484a:	4b04      	ldr	r3, [pc, #16]	; (800485c <RCC_SYSCLKConfig+0x34>)
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	609a      	str	r2, [r3, #8]
}
 8004850:	3714      	adds	r7, #20
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	40023800 	.word	0x40023800

08004860 <RCC_GetSYSCLKSource>:
  *              - 0x00: HSI used as system clock
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 8004860:	b480      	push	{r7}
 8004862:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8004864:	4b05      	ldr	r3, [pc, #20]	; (800487c <RCC_GetSYSCLKSource+0x1c>)
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	b2db      	uxtb	r3, r3
 800486a:	f003 030c 	and.w	r3, r3, #12
 800486e:	b2db      	uxtb	r3, r3
}
 8004870:	4618      	mov	r0, r3
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	40023800 	.word	0x40023800

08004880 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8004888:	2300      	movs	r3, #0
 800488a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 800488c:	4b09      	ldr	r3, [pc, #36]	; (80048b4 <RCC_HCLKConfig+0x34>)
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004898:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4313      	orrs	r3, r2
 80048a0:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80048a2:	4b04      	ldr	r3, [pc, #16]	; (80048b4 <RCC_HCLKConfig+0x34>)
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	609a      	str	r2, [r3, #8]
}
 80048a8:	3714      	adds	r7, #20
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	40023800 	.word	0x40023800

080048b8 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80048c0:	2300      	movs	r3, #0
 80048c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 80048c4:	4b09      	ldr	r3, [pc, #36]	; (80048ec <RCC_PCLK1Config+0x34>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80048d0:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80048da:	4b04      	ldr	r3, [pc, #16]	; (80048ec <RCC_PCLK1Config+0x34>)
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	609a      	str	r2, [r3, #8]
}
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	40023800 	.word	0x40023800

080048f0 <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80048f8:	2300      	movs	r3, #0
 80048fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 80048fc:	4b09      	ldr	r3, [pc, #36]	; (8004924 <RCC_PCLK2Config+0x34>)
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004908:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	00db      	lsls	r3, r3, #3
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	4313      	orrs	r3, r2
 8004912:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004914:	4b03      	ldr	r3, [pc, #12]	; (8004924 <RCC_PCLK2Config+0x34>)
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	609a      	str	r2, [r3, #8]
}
 800491a:	3714      	adds	r7, #20
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr
 8004924:	40023800 	.word	0x40023800

08004928 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8004928:	b480      	push	{r7}
 800492a:	b089      	sub	sp, #36	; 0x24
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8004930:	2300      	movs	r3, #0
 8004932:	61bb      	str	r3, [r7, #24]
 8004934:	2300      	movs	r3, #0
 8004936:	617b      	str	r3, [r7, #20]
 8004938:	2300      	movs	r3, #0
 800493a:	61fb      	str	r3, [r7, #28]
 800493c:	2302      	movs	r3, #2
 800493e:	613b      	str	r3, [r7, #16]
 8004940:	2300      	movs	r3, #0
 8004942:	60fb      	str	r3, [r7, #12]
 8004944:	2302      	movs	r3, #2
 8004946:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8004948:	4b48      	ldr	r3, [pc, #288]	; (8004a6c <RCC_GetClocksFreq+0x144>)
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f003 030c 	and.w	r3, r3, #12
 8004950:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	2b04      	cmp	r3, #4
 8004956:	d007      	beq.n	8004968 <RCC_GetClocksFreq+0x40>
 8004958:	2b08      	cmp	r3, #8
 800495a:	d009      	beq.n	8004970 <RCC_GetClocksFreq+0x48>
 800495c:	2b00      	cmp	r3, #0
 800495e:	d13f      	bne.n	80049e0 <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a43      	ldr	r2, [pc, #268]	; (8004a70 <RCC_GetClocksFreq+0x148>)
 8004964:	601a      	str	r2, [r3, #0]
      break;
 8004966:	e03f      	b.n	80049e8 <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a42      	ldr	r2, [pc, #264]	; (8004a74 <RCC_GetClocksFreq+0x14c>)
 800496c:	601a      	str	r2, [r3, #0]
      break;
 800496e:	e03b      	b.n	80049e8 <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8004970:	4b3e      	ldr	r3, [pc, #248]	; (8004a6c <RCC_GetClocksFreq+0x144>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004978:	0d9b      	lsrs	r3, r3, #22
 800497a:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800497c:	4b3b      	ldr	r3, [pc, #236]	; (8004a6c <RCC_GetClocksFreq+0x144>)
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004984:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00d      	beq.n	80049a8 <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800498c:	4a39      	ldr	r2, [pc, #228]	; (8004a74 <RCC_GetClocksFreq+0x14c>)
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	fbb2 f2f3 	udiv	r2, r2, r3
 8004994:	4b35      	ldr	r3, [pc, #212]	; (8004a6c <RCC_GetClocksFreq+0x144>)
 8004996:	6859      	ldr	r1, [r3, #4]
 8004998:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800499c:	400b      	ands	r3, r1
 800499e:	099b      	lsrs	r3, r3, #6
 80049a0:	fb03 f302 	mul.w	r3, r3, r2
 80049a4:	61fb      	str	r3, [r7, #28]
 80049a6:	e00c      	b.n	80049c2 <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80049a8:	4a31      	ldr	r2, [pc, #196]	; (8004a70 <RCC_GetClocksFreq+0x148>)
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80049b0:	4b2e      	ldr	r3, [pc, #184]	; (8004a6c <RCC_GetClocksFreq+0x144>)
 80049b2:	6859      	ldr	r1, [r3, #4]
 80049b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049b8:	400b      	ands	r3, r1
 80049ba:	099b      	lsrs	r3, r3, #6
 80049bc:	fb03 f302 	mul.w	r3, r3, r2
 80049c0:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80049c2:	4b2a      	ldr	r3, [pc, #168]	; (8004a6c <RCC_GetClocksFreq+0x144>)
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049ca:	0c1b      	lsrs	r3, r3, #16
 80049cc:	3301      	adds	r3, #1
 80049ce:	005b      	lsls	r3, r3, #1
 80049d0:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80049d2:	69fa      	ldr	r2, [r7, #28]
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	601a      	str	r2, [r3, #0]
      break;
 80049de:	e003      	b.n	80049e8 <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a23      	ldr	r2, [pc, #140]	; (8004a70 <RCC_GetClocksFreq+0x148>)
 80049e4:	601a      	str	r2, [r3, #0]
      break;
 80049e6:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80049e8:	4b20      	ldr	r3, [pc, #128]	; (8004a6c <RCC_GetClocksFreq+0x144>)
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049f0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	091b      	lsrs	r3, r3, #4
 80049f6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80049f8:	4a1f      	ldr	r2, [pc, #124]	; (8004a78 <RCC_GetClocksFreq+0x150>)
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	4413      	add	r3, r2
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	40da      	lsrs	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8004a10:	4b16      	ldr	r3, [pc, #88]	; (8004a6c <RCC_GetClocksFreq+0x144>)
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8004a18:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	0a9b      	lsrs	r3, r3, #10
 8004a1e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8004a20:	4a15      	ldr	r2, [pc, #84]	; (8004a78 <RCC_GetClocksFreq+0x150>)
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	4413      	add	r3, r2
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	40da      	lsrs	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8004a38:	4b0c      	ldr	r3, [pc, #48]	; (8004a6c <RCC_GetClocksFreq+0x144>)
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004a40:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	0b5b      	lsrs	r3, r3, #13
 8004a46:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8004a48:	4a0b      	ldr	r2, [pc, #44]	; (8004a78 <RCC_GetClocksFreq+0x150>)
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685a      	ldr	r2, [r3, #4]
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	40da      	lsrs	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	60da      	str	r2, [r3, #12]
}
 8004a60:	3724      	adds	r7, #36	; 0x24
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	40023800 	.word	0x40023800
 8004a70:	00f42400 	.word	0x00f42400
 8004a74:	01312d00 	.word	0x01312d00
 8004a78:	20000038 	.word	0x20000038

08004a7c <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8004a84:	2300      	movs	r3, #0
 8004a86:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a92:	d111      	bne.n	8004ab8 <RCC_RTCCLKConfig+0x3c>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8004a94:	4b0f      	ldr	r3, [pc, #60]	; (8004ad4 <RCC_RTCCLKConfig+0x58>)
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004aa0:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004aa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8004ab2:	4b08      	ldr	r3, [pc, #32]	; (8004ad4 <RCC_RTCCLKConfig+0x58>)
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8004ab8:	4b06      	ldr	r3, [pc, #24]	; (8004ad4 <RCC_RTCCLKConfig+0x58>)
 8004aba:	4a06      	ldr	r2, [pc, #24]	; (8004ad4 <RCC_RTCCLKConfig+0x58>)
 8004abc:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	671a      	str	r2, [r3, #112]	; 0x70
}
 8004ac8:	3714      	adds	r7, #20
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	40023800 	.word	0x40023800

08004ad8 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	4603      	mov	r3, r0
 8004ae0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8004ae2:	4b04      	ldr	r3, [pc, #16]	; (8004af4 <RCC_RTCCLKCmd+0x1c>)
 8004ae4:	79fa      	ldrb	r2, [r7, #7]
 8004ae6:	601a      	str	r2, [r3, #0]
}
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	42470e3c 	.word	0x42470e3c

08004af8 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	4603      	mov	r3, r0
 8004b00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8004b02:	4b04      	ldr	r3, [pc, #16]	; (8004b14 <RCC_BackupResetCmd+0x1c>)
 8004b04:	79fa      	ldrb	r2, [r7, #7]
 8004b06:	601a      	str	r2, [r3, #0]
}
 8004b08:	370c      	adds	r7, #12
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	42470e40 	.word	0x42470e40

08004b18 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 8004b20:	4b03      	ldr	r3, [pc, #12]	; (8004b30 <RCC_I2SCLKConfig+0x18>)
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	601a      	str	r2, [r3, #0]
}
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr
 8004b30:	4247015c 	.word	0x4247015c

08004b34 <RCC_TIMCLKPresConfig>:
  *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
  *                 to division by 8 or more.
  * @retval None
  */
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
 8004b3c:	4b03      	ldr	r3, [pc, #12]	; (8004b4c <RCC_TIMCLKPresConfig+0x18>)
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	601a      	str	r2, [r3, #0]
  
}
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr
 8004b4c:	424711e0 	.word	0x424711e0

08004b50 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	460b      	mov	r3, r1
 8004b5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004b5c:	78fb      	ldrb	r3, [r7, #3]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d006      	beq.n	8004b70 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8004b62:	4b09      	ldr	r3, [pc, #36]	; (8004b88 <RCC_AHB1PeriphClockCmd+0x38>)
 8004b64:	4a08      	ldr	r2, [pc, #32]	; (8004b88 <RCC_AHB1PeriphClockCmd+0x38>)
 8004b66:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	631a      	str	r2, [r3, #48]	; 0x30
 8004b6e:	e006      	b.n	8004b7e <RCC_AHB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8004b70:	4b05      	ldr	r3, [pc, #20]	; (8004b88 <RCC_AHB1PeriphClockCmd+0x38>)
 8004b72:	4a05      	ldr	r2, [pc, #20]	; (8004b88 <RCC_AHB1PeriphClockCmd+0x38>)
 8004b74:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	43d2      	mvns	r2, r2
 8004b7a:	400a      	ands	r2, r1
 8004b7c:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	40023800 	.word	0x40023800

08004b8c <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	460b      	mov	r3, r1
 8004b96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004b98:	78fb      	ldrb	r3, [r7, #3]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d006      	beq.n	8004bac <RCC_AHB2PeriphClockCmd+0x20>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8004b9e:	4b09      	ldr	r3, [pc, #36]	; (8004bc4 <RCC_AHB2PeriphClockCmd+0x38>)
 8004ba0:	4a08      	ldr	r2, [pc, #32]	; (8004bc4 <RCC_AHB2PeriphClockCmd+0x38>)
 8004ba2:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	635a      	str	r2, [r3, #52]	; 0x34
 8004baa:	e006      	b.n	8004bba <RCC_AHB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8004bac:	4b05      	ldr	r3, [pc, #20]	; (8004bc4 <RCC_AHB2PeriphClockCmd+0x38>)
 8004bae:	4a05      	ldr	r2, [pc, #20]	; (8004bc4 <RCC_AHB2PeriphClockCmd+0x38>)
 8004bb0:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	43d2      	mvns	r2, r2
 8004bb6:	400a      	ands	r2, r1
 8004bb8:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr
 8004bc4:	40023800 	.word	0x40023800

08004bc8 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004bd4:	78fb      	ldrb	r3, [r7, #3]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d006      	beq.n	8004be8 <RCC_AHB3PeriphClockCmd+0x20>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8004bda:	4b09      	ldr	r3, [pc, #36]	; (8004c00 <RCC_AHB3PeriphClockCmd+0x38>)
 8004bdc:	4a08      	ldr	r2, [pc, #32]	; (8004c00 <RCC_AHB3PeriphClockCmd+0x38>)
 8004bde:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	430a      	orrs	r2, r1
 8004be4:	639a      	str	r2, [r3, #56]	; 0x38
 8004be6:	e006      	b.n	8004bf6 <RCC_AHB3PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 8004be8:	4b05      	ldr	r3, [pc, #20]	; (8004c00 <RCC_AHB3PeriphClockCmd+0x38>)
 8004bea:	4a05      	ldr	r2, [pc, #20]	; (8004c00 <RCC_AHB3PeriphClockCmd+0x38>)
 8004bec:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	43d2      	mvns	r2, r2
 8004bf2:	400a      	ands	r2, r1
 8004bf4:	639a      	str	r2, [r3, #56]	; 0x38
  }
}
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr
 8004c00:	40023800 	.word	0x40023800

08004c04 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004c10:	78fb      	ldrb	r3, [r7, #3]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d006      	beq.n	8004c24 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8004c16:	4b09      	ldr	r3, [pc, #36]	; (8004c3c <RCC_APB1PeriphClockCmd+0x38>)
 8004c18:	4a08      	ldr	r2, [pc, #32]	; (8004c3c <RCC_APB1PeriphClockCmd+0x38>)
 8004c1a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	641a      	str	r2, [r3, #64]	; 0x40
 8004c22:	e006      	b.n	8004c32 <RCC_APB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8004c24:	4b05      	ldr	r3, [pc, #20]	; (8004c3c <RCC_APB1PeriphClockCmd+0x38>)
 8004c26:	4a05      	ldr	r2, [pc, #20]	; (8004c3c <RCC_APB1PeriphClockCmd+0x38>)
 8004c28:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	43d2      	mvns	r2, r2
 8004c2e:	400a      	ands	r2, r1
 8004c30:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr
 8004c3c:	40023800 	.word	0x40023800

08004c40 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	460b      	mov	r3, r1
 8004c4a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004c4c:	78fb      	ldrb	r3, [r7, #3]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d006      	beq.n	8004c60 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8004c52:	4b09      	ldr	r3, [pc, #36]	; (8004c78 <RCC_APB2PeriphClockCmd+0x38>)
 8004c54:	4a08      	ldr	r2, [pc, #32]	; (8004c78 <RCC_APB2PeriphClockCmd+0x38>)
 8004c56:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	645a      	str	r2, [r3, #68]	; 0x44
 8004c5e:	e006      	b.n	8004c6e <RCC_APB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8004c60:	4b05      	ldr	r3, [pc, #20]	; (8004c78 <RCC_APB2PeriphClockCmd+0x38>)
 8004c62:	4a05      	ldr	r2, [pc, #20]	; (8004c78 <RCC_APB2PeriphClockCmd+0x38>)
 8004c64:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	43d2      	mvns	r2, r2
 8004c6a:	400a      	ands	r2, r1
 8004c6c:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr
 8004c78:	40023800 	.word	0x40023800

08004c7c <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	460b      	mov	r3, r1
 8004c86:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004c88:	78fb      	ldrb	r3, [r7, #3]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d006      	beq.n	8004c9c <RCC_AHB1PeriphResetCmd+0x20>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8004c8e:	4b09      	ldr	r3, [pc, #36]	; (8004cb4 <RCC_AHB1PeriphResetCmd+0x38>)
 8004c90:	4a08      	ldr	r2, [pc, #32]	; (8004cb4 <RCC_AHB1PeriphResetCmd+0x38>)
 8004c92:	6911      	ldr	r1, [r2, #16]
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	611a      	str	r2, [r3, #16]
 8004c9a:	e006      	b.n	8004caa <RCC_AHB1PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8004c9c:	4b05      	ldr	r3, [pc, #20]	; (8004cb4 <RCC_AHB1PeriphResetCmd+0x38>)
 8004c9e:	4a05      	ldr	r2, [pc, #20]	; (8004cb4 <RCC_AHB1PeriphResetCmd+0x38>)
 8004ca0:	6911      	ldr	r1, [r2, #16]
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	43d2      	mvns	r2, r2
 8004ca6:	400a      	ands	r2, r1
 8004ca8:	611a      	str	r2, [r3, #16]
  }
}
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr
 8004cb4:	40023800 	.word	0x40023800

08004cb8 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004cc4:	78fb      	ldrb	r3, [r7, #3]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d006      	beq.n	8004cd8 <RCC_AHB2PeriphResetCmd+0x20>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8004cca:	4b09      	ldr	r3, [pc, #36]	; (8004cf0 <RCC_AHB2PeriphResetCmd+0x38>)
 8004ccc:	4a08      	ldr	r2, [pc, #32]	; (8004cf0 <RCC_AHB2PeriphResetCmd+0x38>)
 8004cce:	6951      	ldr	r1, [r2, #20]
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	615a      	str	r2, [r3, #20]
 8004cd6:	e006      	b.n	8004ce6 <RCC_AHB2PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 8004cd8:	4b05      	ldr	r3, [pc, #20]	; (8004cf0 <RCC_AHB2PeriphResetCmd+0x38>)
 8004cda:	4a05      	ldr	r2, [pc, #20]	; (8004cf0 <RCC_AHB2PeriphResetCmd+0x38>)
 8004cdc:	6951      	ldr	r1, [r2, #20]
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	43d2      	mvns	r2, r2
 8004ce2:	400a      	ands	r2, r1
 8004ce4:	615a      	str	r2, [r3, #20]
  }
}
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr
 8004cf0:	40023800 	.word	0x40023800

08004cf4 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004d00:	78fb      	ldrb	r3, [r7, #3]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d006      	beq.n	8004d14 <RCC_AHB3PeriphResetCmd+0x20>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8004d06:	4b09      	ldr	r3, [pc, #36]	; (8004d2c <RCC_AHB3PeriphResetCmd+0x38>)
 8004d08:	4a08      	ldr	r2, [pc, #32]	; (8004d2c <RCC_AHB3PeriphResetCmd+0x38>)
 8004d0a:	6991      	ldr	r1, [r2, #24]
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	619a      	str	r2, [r3, #24]
 8004d12:	e006      	b.n	8004d22 <RCC_AHB3PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 8004d14:	4b05      	ldr	r3, [pc, #20]	; (8004d2c <RCC_AHB3PeriphResetCmd+0x38>)
 8004d16:	4a05      	ldr	r2, [pc, #20]	; (8004d2c <RCC_AHB3PeriphResetCmd+0x38>)
 8004d18:	6991      	ldr	r1, [r2, #24]
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	43d2      	mvns	r2, r2
 8004d1e:	400a      	ands	r2, r1
 8004d20:	619a      	str	r2, [r3, #24]
  }
}
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr
 8004d2c:	40023800 	.word	0x40023800

08004d30 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	460b      	mov	r3, r1
 8004d3a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004d3c:	78fb      	ldrb	r3, [r7, #3]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d006      	beq.n	8004d50 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8004d42:	4b09      	ldr	r3, [pc, #36]	; (8004d68 <RCC_APB1PeriphResetCmd+0x38>)
 8004d44:	4a08      	ldr	r2, [pc, #32]	; (8004d68 <RCC_APB1PeriphResetCmd+0x38>)
 8004d46:	6a11      	ldr	r1, [r2, #32]
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	621a      	str	r2, [r3, #32]
 8004d4e:	e006      	b.n	8004d5e <RCC_APB1PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8004d50:	4b05      	ldr	r3, [pc, #20]	; (8004d68 <RCC_APB1PeriphResetCmd+0x38>)
 8004d52:	4a05      	ldr	r2, [pc, #20]	; (8004d68 <RCC_APB1PeriphResetCmd+0x38>)
 8004d54:	6a11      	ldr	r1, [r2, #32]
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	43d2      	mvns	r2, r2
 8004d5a:	400a      	ands	r2, r1
 8004d5c:	621a      	str	r2, [r3, #32]
  }
}
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr
 8004d68:	40023800 	.word	0x40023800

08004d6c <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	460b      	mov	r3, r1
 8004d76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004d78:	78fb      	ldrb	r3, [r7, #3]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d006      	beq.n	8004d8c <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8004d7e:	4b09      	ldr	r3, [pc, #36]	; (8004da4 <RCC_APB2PeriphResetCmd+0x38>)
 8004d80:	4a08      	ldr	r2, [pc, #32]	; (8004da4 <RCC_APB2PeriphResetCmd+0x38>)
 8004d82:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	430a      	orrs	r2, r1
 8004d88:	625a      	str	r2, [r3, #36]	; 0x24
 8004d8a:	e006      	b.n	8004d9a <RCC_APB2PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8004d8c:	4b05      	ldr	r3, [pc, #20]	; (8004da4 <RCC_APB2PeriphResetCmd+0x38>)
 8004d8e:	4a05      	ldr	r2, [pc, #20]	; (8004da4 <RCC_APB2PeriphResetCmd+0x38>)
 8004d90:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	43d2      	mvns	r2, r2
 8004d96:	400a      	ands	r2, r1
 8004d98:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr
 8004da4:	40023800 	.word	0x40023800

08004da8 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	460b      	mov	r3, r1
 8004db2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004db4:	78fb      	ldrb	r3, [r7, #3]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d006      	beq.n	8004dc8 <RCC_AHB1PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8004dba:	4b09      	ldr	r3, [pc, #36]	; (8004de0 <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 8004dbc:	4a08      	ldr	r2, [pc, #32]	; (8004de0 <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 8004dbe:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	651a      	str	r2, [r3, #80]	; 0x50
 8004dc6:	e006      	b.n	8004dd6 <RCC_AHB1PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 8004dc8:	4b05      	ldr	r3, [pc, #20]	; (8004de0 <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 8004dca:	4a05      	ldr	r2, [pc, #20]	; (8004de0 <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 8004dcc:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	43d2      	mvns	r2, r2
 8004dd2:	400a      	ands	r2, r1
 8004dd4:	651a      	str	r2, [r3, #80]	; 0x50
  }
}
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr
 8004de0:	40023800 	.word	0x40023800

08004de4 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	460b      	mov	r3, r1
 8004dee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004df0:	78fb      	ldrb	r3, [r7, #3]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d006      	beq.n	8004e04 <RCC_AHB2PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8004df6:	4b09      	ldr	r3, [pc, #36]	; (8004e1c <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 8004df8:	4a08      	ldr	r2, [pc, #32]	; (8004e1c <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 8004dfa:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	655a      	str	r2, [r3, #84]	; 0x54
 8004e02:	e006      	b.n	8004e12 <RCC_AHB2PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 8004e04:	4b05      	ldr	r3, [pc, #20]	; (8004e1c <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 8004e06:	4a05      	ldr	r2, [pc, #20]	; (8004e1c <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 8004e08:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	43d2      	mvns	r2, r2
 8004e0e:	400a      	ands	r2, r1
 8004e10:	655a      	str	r2, [r3, #84]	; 0x54
  }
}
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr
 8004e1c:	40023800 	.word	0x40023800

08004e20 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	460b      	mov	r3, r1
 8004e2a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004e2c:	78fb      	ldrb	r3, [r7, #3]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d006      	beq.n	8004e40 <RCC_AHB3PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8004e32:	4b09      	ldr	r3, [pc, #36]	; (8004e58 <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 8004e34:	4a08      	ldr	r2, [pc, #32]	; (8004e58 <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 8004e36:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	659a      	str	r2, [r3, #88]	; 0x58
 8004e3e:	e006      	b.n	8004e4e <RCC_AHB3PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 8004e40:	4b05      	ldr	r3, [pc, #20]	; (8004e58 <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 8004e42:	4a05      	ldr	r2, [pc, #20]	; (8004e58 <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 8004e44:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	43d2      	mvns	r2, r2
 8004e4a:	400a      	ands	r2, r1
 8004e4c:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr
 8004e58:	40023800 	.word	0x40023800

08004e5c <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	460b      	mov	r3, r1
 8004e66:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004e68:	78fb      	ldrb	r3, [r7, #3]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d006      	beq.n	8004e7c <RCC_APB1PeriphClockLPModeCmd+0x20>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8004e6e:	4b09      	ldr	r3, [pc, #36]	; (8004e94 <RCC_APB1PeriphClockLPModeCmd+0x38>)
 8004e70:	4a08      	ldr	r2, [pc, #32]	; (8004e94 <RCC_APB1PeriphClockLPModeCmd+0x38>)
 8004e72:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	661a      	str	r2, [r3, #96]	; 0x60
 8004e7a:	e006      	b.n	8004e8a <RCC_APB1PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 8004e7c:	4b05      	ldr	r3, [pc, #20]	; (8004e94 <RCC_APB1PeriphClockLPModeCmd+0x38>)
 8004e7e:	4a05      	ldr	r2, [pc, #20]	; (8004e94 <RCC_APB1PeriphClockLPModeCmd+0x38>)
 8004e80:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	43d2      	mvns	r2, r2
 8004e86:	400a      	ands	r2, r1
 8004e88:	661a      	str	r2, [r3, #96]	; 0x60
  }
}
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr
 8004e94:	40023800 	.word	0x40023800

08004e98 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004ea4:	78fb      	ldrb	r3, [r7, #3]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d006      	beq.n	8004eb8 <RCC_APB2PeriphClockLPModeCmd+0x20>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8004eaa:	4b09      	ldr	r3, [pc, #36]	; (8004ed0 <RCC_APB2PeriphClockLPModeCmd+0x38>)
 8004eac:	4a08      	ldr	r2, [pc, #32]	; (8004ed0 <RCC_APB2PeriphClockLPModeCmd+0x38>)
 8004eae:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	665a      	str	r2, [r3, #100]	; 0x64
 8004eb6:	e006      	b.n	8004ec6 <RCC_APB2PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 8004eb8:	4b05      	ldr	r3, [pc, #20]	; (8004ed0 <RCC_APB2PeriphClockLPModeCmd+0x38>)
 8004eba:	4a05      	ldr	r2, [pc, #20]	; (8004ed0 <RCC_APB2PeriphClockLPModeCmd+0x38>)
 8004ebc:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	43d2      	mvns	r2, r2
 8004ec2:	400a      	ands	r2, r1
 8004ec4:	665a      	str	r2, [r3, #100]	; 0x64
  }
}
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr
 8004ed0:	40023800 	.word	0x40023800

08004ed4 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	4602      	mov	r2, r0
 8004edc:	460b      	mov	r3, r1
 8004ede:	71fa      	strb	r2, [r7, #7]
 8004ee0:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004ee2:	79bb      	ldrb	r3, [r7, #6]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d008      	beq.n	8004efa <RCC_ITConfig+0x26>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8004ee8:	4b0b      	ldr	r3, [pc, #44]	; (8004f18 <RCC_ITConfig+0x44>)
 8004eea:	4a0b      	ldr	r2, [pc, #44]	; (8004f18 <RCC_ITConfig+0x44>)
 8004eec:	7812      	ldrb	r2, [r2, #0]
 8004eee:	b2d1      	uxtb	r1, r2
 8004ef0:	79fa      	ldrb	r2, [r7, #7]
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	b2d2      	uxtb	r2, r2
 8004ef6:	701a      	strb	r2, [r3, #0]
 8004ef8:	e009      	b.n	8004f0e <RCC_ITConfig+0x3a>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8004efa:	4b07      	ldr	r3, [pc, #28]	; (8004f18 <RCC_ITConfig+0x44>)
 8004efc:	4a06      	ldr	r2, [pc, #24]	; (8004f18 <RCC_ITConfig+0x44>)
 8004efe:	7812      	ldrb	r2, [r2, #0]
 8004f00:	b2d1      	uxtb	r1, r2
 8004f02:	79fa      	ldrb	r2, [r7, #7]
 8004f04:	43d2      	mvns	r2, r2
 8004f06:	b2d2      	uxtb	r2, r2
 8004f08:	400a      	ands	r2, r1
 8004f0a:	b2d2      	uxtb	r2, r2
 8004f0c:	701a      	strb	r2, [r3, #0]
  }
}
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr
 8004f18:	4002380d 	.word	0x4002380d

08004f1c <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b087      	sub	sp, #28
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	4603      	mov	r3, r0
 8004f24:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8004f26:	2300      	movs	r3, #0
 8004f28:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8004f32:	79fb      	ldrb	r3, [r7, #7]
 8004f34:	095b      	lsrs	r3, r3, #5
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d103      	bne.n	8004f48 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8004f40:	4b12      	ldr	r3, [pc, #72]	; (8004f8c <RCC_GetFlagStatus+0x70>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	617b      	str	r3, [r7, #20]
 8004f46:	e009      	b.n	8004f5c <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d103      	bne.n	8004f56 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 8004f4e:	4b0f      	ldr	r3, [pc, #60]	; (8004f8c <RCC_GetFlagStatus+0x70>)
 8004f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f52:	617b      	str	r3, [r7, #20]
 8004f54:	e002      	b.n	8004f5c <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8004f56:	4b0d      	ldr	r3, [pc, #52]	; (8004f8c <RCC_GetFlagStatus+0x70>)
 8004f58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f5a:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8004f5c:	79fb      	ldrb	r3, [r7, #7]
 8004f5e:	f003 031f 	and.w	r3, r3, #31
 8004f62:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	fa22 f303 	lsr.w	r3, r2, r3
 8004f6c:	f003 0301 	and.w	r3, r3, #1
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d002      	beq.n	8004f7a <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 8004f74:	2301      	movs	r3, #1
 8004f76:	74fb      	strb	r3, [r7, #19]
 8004f78:	e001      	b.n	8004f7e <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 8004f7e:	7cfb      	ldrb	r3, [r7, #19]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	371c      	adds	r7, #28
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr
 8004f8c:	40023800 	.word	0x40023800

08004f90 <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
 8004f90:	b480      	push	{r7}
 8004f92:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8004f94:	4b04      	ldr	r3, [pc, #16]	; (8004fa8 <RCC_ClearFlag+0x18>)
 8004f96:	4a04      	ldr	r2, [pc, #16]	; (8004fa8 <RCC_ClearFlag+0x18>)
 8004f98:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004f9a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004f9e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr
 8004fa8:	40023800 	.word	0x40023800

08004fac <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt             
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b085      	sub	sp, #20
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8004fba:	4b09      	ldr	r3, [pc, #36]	; (8004fe0 <RCC_GetITStatus+0x34>)
 8004fbc:	68da      	ldr	r2, [r3, #12]
 8004fbe:	79fb      	ldrb	r3, [r7, #7]
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d002      	beq.n	8004fcc <RCC_GetITStatus+0x20>
  {
    bitstatus = SET;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	73fb      	strb	r3, [r7, #15]
 8004fca:	e001      	b.n	8004fd0 <RCC_GetITStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 8004fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3714      	adds	r7, #20
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	40023800 	.word	0x40023800

08004fe4 <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	4603      	mov	r3, r0
 8004fec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8004fee:	4b04      	ldr	r3, [pc, #16]	; (8005000 <RCC_ClearITPendingBit+0x1c>)
 8004ff0:	79fa      	ldrb	r2, [r7, #7]
 8004ff2:	701a      	strb	r2, [r3, #0]
}
 8004ff4:	370c      	adds	r7, #12
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	4002380e 	.word	0x4002380e

08005004 <GPIO_DeInit>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for 
  *                STM32F40xx/41xx and STM32F427x/437x devices. 
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	4b3c      	ldr	r3, [pc, #240]	; (8005100 <GPIO_DeInit+0xfc>)
 8005010:	429a      	cmp	r2, r3
 8005012:	d108      	bne.n	8005026 <GPIO_DeInit+0x22>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8005014:	2001      	movs	r0, #1
 8005016:	2101      	movs	r1, #1
 8005018:	f7ff fe30 	bl	8004c7c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 800501c:	2001      	movs	r0, #1
 800501e:	2100      	movs	r1, #0
 8005020:	f7ff fe2c 	bl	8004c7c <RCC_AHB1PeriphResetCmd>
 8005024:	e068      	b.n	80050f8 <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOB)
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	4b36      	ldr	r3, [pc, #216]	; (8005104 <GPIO_DeInit+0x100>)
 800502a:	429a      	cmp	r2, r3
 800502c:	d108      	bne.n	8005040 <GPIO_DeInit+0x3c>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800502e:	2002      	movs	r0, #2
 8005030:	2101      	movs	r1, #1
 8005032:	f7ff fe23 	bl	8004c7c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 8005036:	2002      	movs	r0, #2
 8005038:	2100      	movs	r1, #0
 800503a:	f7ff fe1f 	bl	8004c7c <RCC_AHB1PeriphResetCmd>
 800503e:	e05b      	b.n	80050f8 <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOC)
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	4b31      	ldr	r3, [pc, #196]	; (8005108 <GPIO_DeInit+0x104>)
 8005044:	429a      	cmp	r2, r3
 8005046:	d108      	bne.n	800505a <GPIO_DeInit+0x56>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8005048:	2004      	movs	r0, #4
 800504a:	2101      	movs	r1, #1
 800504c:	f7ff fe16 	bl	8004c7c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 8005050:	2004      	movs	r0, #4
 8005052:	2100      	movs	r1, #0
 8005054:	f7ff fe12 	bl	8004c7c <RCC_AHB1PeriphResetCmd>
 8005058:	e04e      	b.n	80050f8 <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOD)
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	4b2b      	ldr	r3, [pc, #172]	; (800510c <GPIO_DeInit+0x108>)
 800505e:	429a      	cmp	r2, r3
 8005060:	d108      	bne.n	8005074 <GPIO_DeInit+0x70>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8005062:	2008      	movs	r0, #8
 8005064:	2101      	movs	r1, #1
 8005066:	f7ff fe09 	bl	8004c7c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 800506a:	2008      	movs	r0, #8
 800506c:	2100      	movs	r1, #0
 800506e:	f7ff fe05 	bl	8004c7c <RCC_AHB1PeriphResetCmd>
 8005072:	e041      	b.n	80050f8 <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOE)
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	4b26      	ldr	r3, [pc, #152]	; (8005110 <GPIO_DeInit+0x10c>)
 8005078:	429a      	cmp	r2, r3
 800507a:	d108      	bne.n	800508e <GPIO_DeInit+0x8a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 800507c:	2010      	movs	r0, #16
 800507e:	2101      	movs	r1, #1
 8005080:	f7ff fdfc 	bl	8004c7c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 8005084:	2010      	movs	r0, #16
 8005086:	2100      	movs	r1, #0
 8005088:	f7ff fdf8 	bl	8004c7c <RCC_AHB1PeriphResetCmd>
 800508c:	e034      	b.n	80050f8 <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOF)
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	4b20      	ldr	r3, [pc, #128]	; (8005114 <GPIO_DeInit+0x110>)
 8005092:	429a      	cmp	r2, r3
 8005094:	d108      	bne.n	80050a8 <GPIO_DeInit+0xa4>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8005096:	2020      	movs	r0, #32
 8005098:	2101      	movs	r1, #1
 800509a:	f7ff fdef 	bl	8004c7c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 800509e:	2020      	movs	r0, #32
 80050a0:	2100      	movs	r1, #0
 80050a2:	f7ff fdeb 	bl	8004c7c <RCC_AHB1PeriphResetCmd>
 80050a6:	e027      	b.n	80050f8 <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOG)
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	4b1b      	ldr	r3, [pc, #108]	; (8005118 <GPIO_DeInit+0x114>)
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d108      	bne.n	80050c2 <GPIO_DeInit+0xbe>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 80050b0:	2040      	movs	r0, #64	; 0x40
 80050b2:	2101      	movs	r1, #1
 80050b4:	f7ff fde2 	bl	8004c7c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 80050b8:	2040      	movs	r0, #64	; 0x40
 80050ba:	2100      	movs	r1, #0
 80050bc:	f7ff fdde 	bl	8004c7c <RCC_AHB1PeriphResetCmd>
 80050c0:	e01a      	b.n	80050f8 <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOH)
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	4b15      	ldr	r3, [pc, #84]	; (800511c <GPIO_DeInit+0x118>)
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d108      	bne.n	80050dc <GPIO_DeInit+0xd8>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 80050ca:	2080      	movs	r0, #128	; 0x80
 80050cc:	2101      	movs	r1, #1
 80050ce:	f7ff fdd5 	bl	8004c7c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 80050d2:	2080      	movs	r0, #128	; 0x80
 80050d4:	2100      	movs	r1, #0
 80050d6:	f7ff fdd1 	bl	8004c7c <RCC_AHB1PeriphResetCmd>
 80050da:	e00d      	b.n	80050f8 <GPIO_DeInit+0xf4>
  }
  else
  {
    if (GPIOx == GPIOI)
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	4b10      	ldr	r3, [pc, #64]	; (8005120 <GPIO_DeInit+0x11c>)
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d109      	bne.n	80050f8 <GPIO_DeInit+0xf4>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 80050e4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80050e8:	2101      	movs	r1, #1
 80050ea:	f7ff fdc7 	bl	8004c7c <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 80050ee:	f44f 7080 	mov.w	r0, #256	; 0x100
 80050f2:	2100      	movs	r1, #0
 80050f4:	f7ff fdc2 	bl	8004c7c <RCC_AHB1PeriphResetCmd>
    }
  }
}
 80050f8:	3708      	adds	r7, #8
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	40020000 	.word	0x40020000
 8005104:	40020400 	.word	0x40020400
 8005108:	40020800 	.word	0x40020800
 800510c:	40020c00 	.word	0x40020c00
 8005110:	40021000 	.word	0x40021000
 8005114:	40021400 	.word	0x40021400
 8005118:	40021800 	.word	0x40021800
 800511c:	40021c00 	.word	0x40021c00
 8005120:	40022000 	.word	0x40022000

08005124 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8005124:	b480      	push	{r7}
 8005126:	b087      	sub	sp, #28
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800512e:	2300      	movs	r3, #0
 8005130:	617b      	str	r3, [r7, #20]
 8005132:	2300      	movs	r3, #0
 8005134:	613b      	str	r3, [r7, #16]
 8005136:	2300      	movs	r3, #0
 8005138:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800513a:	2300      	movs	r3, #0
 800513c:	617b      	str	r3, [r7, #20]
 800513e:	e076      	b.n	800522e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	2201      	movs	r2, #1
 8005144:	fa02 f303 	lsl.w	r3, r2, r3
 8005148:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	4013      	ands	r3, r2
 8005152:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	429a      	cmp	r2, r3
 800515a:	d165      	bne.n	8005228 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	005b      	lsls	r3, r3, #1
 8005164:	2103      	movs	r1, #3
 8005166:	fa01 f303 	lsl.w	r3, r1, r3
 800516a:	43db      	mvns	r3, r3
 800516c:	401a      	ands	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	791b      	ldrb	r3, [r3, #4]
 800517a:	4619      	mov	r1, r3
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	005b      	lsls	r3, r3, #1
 8005180:	fa01 f303 	lsl.w	r3, r1, r3
 8005184:	431a      	orrs	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	791b      	ldrb	r3, [r3, #4]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d003      	beq.n	800519a <GPIO_Init+0x76>
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	791b      	ldrb	r3, [r3, #4]
 8005196:	2b02      	cmp	r3, #2
 8005198:	d12e      	bne.n	80051f8 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	689a      	ldr	r2, [r3, #8]
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	005b      	lsls	r3, r3, #1
 80051a2:	2103      	movs	r1, #3
 80051a4:	fa01 f303 	lsl.w	r3, r1, r3
 80051a8:	43db      	mvns	r3, r3
 80051aa:	401a      	ands	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	689a      	ldr	r2, [r3, #8]
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	795b      	ldrb	r3, [r3, #5]
 80051b8:	4619      	mov	r1, r3
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	005b      	lsls	r3, r3, #1
 80051be:	fa01 f303 	lsl.w	r3, r1, r3
 80051c2:	431a      	orrs	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	2101      	movs	r1, #1
 80051d2:	fa01 f303 	lsl.w	r3, r1, r3
 80051d6:	43db      	mvns	r3, r3
 80051d8:	401a      	ands	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	685a      	ldr	r2, [r3, #4]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	799b      	ldrb	r3, [r3, #6]
 80051e6:	4619      	mov	r1, r3
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	fa01 f303 	lsl.w	r3, r1, r3
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	431a      	orrs	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68da      	ldr	r2, [r3, #12]
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	b29b      	uxth	r3, r3
 8005200:	005b      	lsls	r3, r3, #1
 8005202:	2103      	movs	r1, #3
 8005204:	fa01 f303 	lsl.w	r3, r1, r3
 8005208:	43db      	mvns	r3, r3
 800520a:	401a      	ands	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	68da      	ldr	r2, [r3, #12]
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	79db      	ldrb	r3, [r3, #7]
 8005218:	4619      	mov	r1, r3
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	005b      	lsls	r3, r3, #1
 800521e:	fa01 f303 	lsl.w	r3, r1, r3
 8005222:	431a      	orrs	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	3301      	adds	r3, #1
 800522c:	617b      	str	r3, [r7, #20]
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	2b0f      	cmp	r3, #15
 8005232:	d985      	bls.n	8005140 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8005234:	371c      	adds	r7, #28
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop

08005240 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800524e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	71da      	strb	r2, [r3, #7]
}
 8005268:	370c      	adds	r7, #12
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop

08005274 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	460b      	mov	r3, r1
 800527e:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0x00010000;
 8005280:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005284:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8005286:	887a      	ldrh	r2, [r7, #2]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	4313      	orrs	r3, r2
 800528c:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8005294:	887a      	ldrh	r2, [r7, #2]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	69db      	ldr	r3, [r3, #28]
 80052a4:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	69db      	ldr	r3, [r3, #28]
 80052aa:	60fb      	str	r3, [r7, #12]
}
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop

080052b8 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	460b      	mov	r3, r1
 80052c2:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80052c4:	2300      	movs	r3, #0
 80052c6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	691a      	ldr	r2, [r3, #16]
 80052cc:	887b      	ldrh	r3, [r7, #2]
 80052ce:	4013      	ands	r3, r2
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d002      	beq.n	80052da <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80052d4:	2301      	movs	r3, #1
 80052d6:	73fb      	strb	r3, [r7, #15]
 80052d8:	e001      	b.n	80052de <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80052da:	2300      	movs	r3, #0
 80052dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80052de:	7bfb      	ldrb	r3, [r7, #15]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3714      	adds	r7, #20
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <GPIO_ReadInputData>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for 
  *                STM32F40xx/41xx and STM32F427x/437x devices. 
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	b29b      	uxth	r3, r3
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	370c      	adds	r7, #12
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop

08005308 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005308:	b480      	push	{r7}
 800530a:	b085      	sub	sp, #20
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	460b      	mov	r3, r1
 8005312:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8005314:	2300      	movs	r3, #0
 8005316:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	695a      	ldr	r2, [r3, #20]
 800531c:	887b      	ldrh	r3, [r7, #2]
 800531e:	4013      	ands	r3, r2
 8005320:	2b00      	cmp	r3, #0
 8005322:	d002      	beq.n	800532a <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8005324:	2301      	movs	r3, #1
 8005326:	73fb      	strb	r3, [r7, #15]
 8005328:	e001      	b.n	800532e <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800532a:	2300      	movs	r3, #0
 800532c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800532e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005330:	4618      	mov	r0, r3
 8005332:	3714      	adds	r7, #20
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <GPIO_ReadOutputData>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for 
  *                STM32F40xx/41xx and STM32F427x/437x devices.  
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	695b      	ldr	r3, [r3, #20]
 8005348:	b29b      	uxth	r3, r3
}
 800534a:	4618      	mov	r0, r3
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop

08005358 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	460b      	mov	r3, r1
 8005362:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	887a      	ldrh	r2, [r7, #2]
 8005368:	831a      	strh	r2, [r3, #24]
}
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	460b      	mov	r3, r1
 800537e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	887a      	ldrh	r2, [r7, #2]
 8005384:	835a      	strh	r2, [r3, #26]
}
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	4613      	mov	r3, r2
 800539a:	460a      	mov	r2, r1
 800539c:	807a      	strh	r2, [r7, #2]
 800539e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 80053a0:	787b      	ldrb	r3, [r7, #1]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d003      	beq.n	80053ae <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	887a      	ldrh	r2, [r7, #2]
 80053aa:	831a      	strh	r2, [r3, #24]
 80053ac:	e002      	b.n	80053b4 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	887a      	ldrh	r2, [r7, #2]
 80053b2:	835a      	strh	r2, [r3, #26]
  }
}
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop

080053c0 <GPIO_Write>:
  *                STM32F40xx/41xx and STM32F427x/437x devices.  
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	460b      	mov	r3, r1
 80053ca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 80053cc:	887a      	ldrh	r2, [r7, #2]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	615a      	str	r2, [r3, #20]
}
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <GPIO_ToggleBits>:
  *                STM32F40xx/41xx and STM32F427x/437x devices.  
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	460b      	mov	r3, r1
 80053e6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	695a      	ldr	r2, [r3, #20]
 80053ec:	887b      	ldrh	r3, [r7, #2]
 80053ee:	405a      	eors	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	615a      	str	r2, [r3, #20]
}
 80053f4:	370c      	adds	r7, #12
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop

08005400 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	4613      	mov	r3, r2
 800540a:	460a      	mov	r2, r1
 800540c:	807a      	strh	r2, [r7, #2]
 800540e:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8005410:	2300      	movs	r3, #0
 8005412:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8005414:	2300      	movs	r3, #0
 8005416:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8005418:	787a      	ldrb	r2, [r7, #1]
 800541a:	887b      	ldrh	r3, [r7, #2]
 800541c:	f003 0307 	and.w	r3, r3, #7
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	fa02 f303 	lsl.w	r3, r2, r3
 8005426:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8005428:	887b      	ldrh	r3, [r7, #2]
 800542a:	08db      	lsrs	r3, r3, #3
 800542c:	b29b      	uxth	r3, r3
 800542e:	461a      	mov	r2, r3
 8005430:	887b      	ldrh	r3, [r7, #2]
 8005432:	08db      	lsrs	r3, r3, #3
 8005434:	b29b      	uxth	r3, r3
 8005436:	4619      	mov	r1, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	3108      	adds	r1, #8
 800543c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8005440:	887b      	ldrh	r3, [r7, #2]
 8005442:	f003 0307 	and.w	r3, r3, #7
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	200f      	movs	r0, #15
 800544a:	fa00 f303 	lsl.w	r3, r0, r3
 800544e:	43db      	mvns	r3, r3
 8005450:	4019      	ands	r1, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	3208      	adds	r2, #8
 8005456:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800545a:	887b      	ldrh	r3, [r7, #2]
 800545c:	08db      	lsrs	r3, r3, #3
 800545e:	b29b      	uxth	r3, r3
 8005460:	461a      	mov	r2, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	3208      	adds	r2, #8
 8005466:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	4313      	orrs	r3, r2
 800546e:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8005470:	887b      	ldrh	r3, [r7, #2]
 8005472:	08db      	lsrs	r3, r3, #3
 8005474:	b29b      	uxth	r3, r3
 8005476:	461a      	mov	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	3208      	adds	r2, #8
 800547c:	68b9      	ldr	r1, [r7, #8]
 800547e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8005482:	3714      	adds	r7, #20
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
 800548c:	b480      	push	{r7}
 800548e:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
 8005490:	4b09      	ldr	r3, [pc, #36]	; (80054b8 <EXTI_DeInit+0x2c>)
 8005492:	2200      	movs	r2, #0
 8005494:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
 8005496:	4b08      	ldr	r3, [pc, #32]	; (80054b8 <EXTI_DeInit+0x2c>)
 8005498:	2200      	movs	r2, #0
 800549a:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
 800549c:	4b06      	ldr	r3, [pc, #24]	; (80054b8 <EXTI_DeInit+0x2c>)
 800549e:	2200      	movs	r2, #0
 80054a0:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
 80054a2:	4b05      	ldr	r3, [pc, #20]	; (80054b8 <EXTI_DeInit+0x2c>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x007FFFFF;
 80054a8:	4b03      	ldr	r3, [pc, #12]	; (80054b8 <EXTI_DeInit+0x2c>)
 80054aa:	4a04      	ldr	r2, [pc, #16]	; (80054bc <EXTI_DeInit+0x30>)
 80054ac:	615a      	str	r2, [r3, #20]
}
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	40013c00 	.word	0x40013c00
 80054bc:	007fffff 	.word	0x007fffff

080054c0 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80054c8:	2300      	movs	r3, #0
 80054ca:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 80054cc:	4b32      	ldr	r3, [pc, #200]	; (8005598 <EXTI_Init+0xd8>)
 80054ce:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	799b      	ldrb	r3, [r3, #6]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d04d      	beq.n	8005574 <EXTI_Init+0xb4>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80054d8:	4b2f      	ldr	r3, [pc, #188]	; (8005598 <EXTI_Init+0xd8>)
 80054da:	4a2f      	ldr	r2, [pc, #188]	; (8005598 <EXTI_Init+0xd8>)
 80054dc:	6811      	ldr	r1, [r2, #0]
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	6812      	ldr	r2, [r2, #0]
 80054e2:	43d2      	mvns	r2, r2
 80054e4:	400a      	ands	r2, r1
 80054e6:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80054e8:	4b2b      	ldr	r3, [pc, #172]	; (8005598 <EXTI_Init+0xd8>)
 80054ea:	4a2b      	ldr	r2, [pc, #172]	; (8005598 <EXTI_Init+0xd8>)
 80054ec:	6851      	ldr	r1, [r2, #4]
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	6812      	ldr	r2, [r2, #0]
 80054f2:	43d2      	mvns	r2, r2
 80054f4:	400a      	ands	r2, r1
 80054f6:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	791b      	ldrb	r3, [r3, #4]
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	4413      	add	r3, r2
 8005500:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	6811      	ldr	r1, [r2, #0]
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	6812      	ldr	r2, [r2, #0]
 800550c:	430a      	orrs	r2, r1
 800550e:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8005510:	4b21      	ldr	r3, [pc, #132]	; (8005598 <EXTI_Init+0xd8>)
 8005512:	4a21      	ldr	r2, [pc, #132]	; (8005598 <EXTI_Init+0xd8>)
 8005514:	6891      	ldr	r1, [r2, #8]
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	6812      	ldr	r2, [r2, #0]
 800551a:	43d2      	mvns	r2, r2
 800551c:	400a      	ands	r2, r1
 800551e:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8005520:	4b1d      	ldr	r3, [pc, #116]	; (8005598 <EXTI_Init+0xd8>)
 8005522:	4a1d      	ldr	r2, [pc, #116]	; (8005598 <EXTI_Init+0xd8>)
 8005524:	68d1      	ldr	r1, [r2, #12]
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	6812      	ldr	r2, [r2, #0]
 800552a:	43d2      	mvns	r2, r2
 800552c:	400a      	ands	r2, r1
 800552e:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	795b      	ldrb	r3, [r3, #5]
 8005534:	2b10      	cmp	r3, #16
 8005536:	d10e      	bne.n	8005556 <EXTI_Init+0x96>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8005538:	4b17      	ldr	r3, [pc, #92]	; (8005598 <EXTI_Init+0xd8>)
 800553a:	4a17      	ldr	r2, [pc, #92]	; (8005598 <EXTI_Init+0xd8>)
 800553c:	6891      	ldr	r1, [r2, #8]
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	6812      	ldr	r2, [r2, #0]
 8005542:	430a      	orrs	r2, r1
 8005544:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8005546:	4b14      	ldr	r3, [pc, #80]	; (8005598 <EXTI_Init+0xd8>)
 8005548:	4a13      	ldr	r2, [pc, #76]	; (8005598 <EXTI_Init+0xd8>)
 800554a:	68d1      	ldr	r1, [r2, #12]
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	6812      	ldr	r2, [r2, #0]
 8005550:	430a      	orrs	r2, r1
 8005552:	60da      	str	r2, [r3, #12]
 8005554:	e01b      	b.n	800558e <EXTI_Init+0xce>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 8005556:	4b10      	ldr	r3, [pc, #64]	; (8005598 <EXTI_Init+0xd8>)
 8005558:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	795b      	ldrb	r3, [r3, #5]
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	4413      	add	r3, r2
 8005562:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	6811      	ldr	r1, [r2, #0]
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	6812      	ldr	r2, [r2, #0]
 800556e:	430a      	orrs	r2, r1
 8005570:	601a      	str	r2, [r3, #0]
 8005572:	e00c      	b.n	800558e <EXTI_Init+0xce>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	791b      	ldrb	r3, [r3, #4]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	4413      	add	r3, r2
 800557c:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	6811      	ldr	r1, [r2, #0]
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	6812      	ldr	r2, [r2, #0]
 8005588:	43d2      	mvns	r2, r2
 800558a:	400a      	ands	r2, r1
 800558c:	601a      	str	r2, [r3, #0]
  }
}
 800558e:	3714      	adds	r7, #20
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr
 8005598:	40013c00 	.word	0x40013c00

0800559c <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	220c      	movs	r2, #12
 80055b4:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	719a      	strb	r2, [r3, #6]
}
 80055bc:	370c      	adds	r7, #12
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop

080055c8 <EXTI_GenerateSWInterrupt>:
  *         will be generated.
  *         This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
 80055d0:	4b05      	ldr	r3, [pc, #20]	; (80055e8 <EXTI_GenerateSWInterrupt+0x20>)
 80055d2:	4a05      	ldr	r2, [pc, #20]	; (80055e8 <EXTI_GenerateSWInterrupt+0x20>)
 80055d4:	6911      	ldr	r1, [r2, #16]
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	430a      	orrs	r2, r1
 80055da:	611a      	str	r2, [r3, #16]
}
 80055dc:	370c      	adds	r7, #12
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	40013c00 	.word	0x40013c00

080055ec <EXTI_GetFlagStatus>:
  * @param  EXTI_Line: specifies the EXTI line flag to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80055f4:	2300      	movs	r3, #0
 80055f6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 80055f8:	4b08      	ldr	r3, [pc, #32]	; (800561c <EXTI_GetFlagStatus+0x30>)
 80055fa:	695a      	ldr	r2, [r3, #20]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4013      	ands	r3, r2
 8005600:	2b00      	cmp	r3, #0
 8005602:	d002      	beq.n	800560a <EXTI_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 8005604:	2301      	movs	r3, #1
 8005606:	73fb      	strb	r3, [r7, #15]
 8005608:	e001      	b.n	800560e <EXTI_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 800560a:	2300      	movs	r3, #0
 800560c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800560e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005610:	4618      	mov	r0, r3
 8005612:	3714      	adds	r7, #20
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr
 800561c:	40013c00 	.word	0x40013c00

08005620 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8005628:	4b03      	ldr	r3, [pc, #12]	; (8005638 <EXTI_ClearFlag+0x18>)
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	615a      	str	r2, [r3, #20]
}
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr
 8005638:	40013c00 	.word	0x40013c00

0800563c <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 800563c:	b480      	push	{r7}
 800563e:	b085      	sub	sp, #20
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8005644:	2300      	movs	r3, #0
 8005646:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8005648:	2300      	movs	r3, #0
 800564a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 800564c:	4b0c      	ldr	r3, [pc, #48]	; (8005680 <EXTI_GetITStatus+0x44>)
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4013      	ands	r3, r2
 8005654:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8005656:	4b0a      	ldr	r3, [pc, #40]	; (8005680 <EXTI_GetITStatus+0x44>)
 8005658:	695a      	ldr	r2, [r3, #20]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4013      	ands	r3, r2
 800565e:	2b00      	cmp	r3, #0
 8005660:	d005      	beq.n	800566e <EXTI_GetITStatus+0x32>
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d002      	beq.n	800566e <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 8005668:	2301      	movs	r3, #1
 800566a:	73fb      	strb	r3, [r7, #15]
 800566c:	e001      	b.n	8005672 <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 800566e:	2300      	movs	r3, #0
 8005670:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005672:	7bfb      	ldrb	r3, [r7, #15]
}
 8005674:	4618      	mov	r0, r3
 8005676:	3714      	adds	r7, #20
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr
 8005680:	40013c00 	.word	0x40013c00

08005684 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 800568c:	4b03      	ldr	r3, [pc, #12]	; (800569c <EXTI_ClearITPendingBit+0x18>)
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	615a      	str	r2, [r3, #20]
}
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr
 800569c:	40013c00 	.word	0x40013c00

080056a0 <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	af00      	add	r7, sp, #0
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 80056a4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80056a8:	2101      	movs	r1, #1
 80056aa:	f7ff fb5f 	bl	8004d6c <RCC_APB2PeriphResetCmd>
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 80056ae:	f44f 7080 	mov.w	r0, #256	; 0x100
 80056b2:	2100      	movs	r1, #0
 80056b4:	f7ff fb5a 	bl	8004d6c <RCC_APB2PeriphResetCmd>
}
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop

080056bc <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 80056c6:	2300      	movs	r3, #0
 80056c8:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 80056ca:	2300      	movs	r3, #0
 80056cc:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80056da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056de:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	791b      	ldrb	r3, [r3, #4]
 80056e4:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	681b      	ldr	r3, [r3, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80056ea:	4313      	orrs	r3, r2
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	60fb      	str	r3, [r7, #12]
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	4b17      	ldr	r3, [pc, #92]	; (8005760 <ADC_Init+0xa4>)
 8005702:	4013      	ands	r3, r2
 8005704:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	68db      	ldr	r3, [r3, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800570e:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	689b      	ldr	r3, [r3, #8]
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8005714:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	795b      	ldrb	r3, [r3, #5]
 800571a:	005b      	lsls	r3, r3, #1
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800571c:	4313      	orrs	r3, r2
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	4313      	orrs	r3, r2
 8005722:	60fb      	str	r3, [r7, #12]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572e:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005736:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	7d1b      	ldrb	r3, [r3, #20]
 800573c:	3b01      	subs	r3, #1
 800573e:	b2da      	uxtb	r2, r3
 8005740:	7afb      	ldrb	r3, [r7, #11]
 8005742:	4313      	orrs	r3, r2
 8005744:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8005746:	7afb      	ldrb	r3, [r7, #11]
 8005748:	051b      	lsls	r3, r3, #20
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	4313      	orrs	r3, r2
 800574e:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005756:	3714      	adds	r7, #20
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr
 8005760:	c0fff7fd 	.word	0xc0fff7fd

08005764 <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	751a      	strb	r2, [r3, #20]
}
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 80057a8:	2300      	movs	r3, #0
 80057aa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 80057ac:	4b0e      	ldr	r3, [pc, #56]	; (80057e8 <ADC_CommonInit+0x48>)
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	4b0d      	ldr	r3, [pc, #52]	; (80057ec <ADC_CommonInit+0x4c>)
 80057b6:	4013      	ands	r3, r2
 80057b8:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 80057c2:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	689b      	ldr	r3, [r3, #8]
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
 80057c8:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68db      	ldr	r3, [r3, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 80057ce:	4313      	orrs	r3, r2
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	60fb      	str	r3, [r7, #12]
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 80057d6:	4b04      	ldr	r3, [pc, #16]	; (80057e8 <ADC_CommonInit+0x48>)
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	605a      	str	r2, [r3, #4]
}
 80057dc:	3714      	adds	r7, #20
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	40012300 	.word	0x40012300
 80057ec:	fffc30e0 	.word	0xfffc30e0

080057f0 <ADC_CommonStructInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_Prescaler member */
  ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	605a      	str	r2, [r3, #4]

  /* Initialize the ADC_DMAAccessMode member */
  ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_TwoSamplingDelay member */
  ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	60da      	str	r2, [r3, #12]
}
 8005810:	370c      	adds	r7, #12
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop

0800581c <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	460b      	mov	r3, r1
 8005826:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005828:	78fb      	ldrb	r3, [r7, #3]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d006      	beq.n	800583c <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f043 0201 	orr.w	r2, r3, #1
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	609a      	str	r2, [r3, #8]
 800583a:	e005      	b.n	8005848 <ADC_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	f023 0201 	bic.w	r2, r3, #1
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	609a      	str	r2, [r3, #8]
  }
}
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop

08005854 <ADC_AnalogWatchdogCmd>:
  *            @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and injected channels
  *            @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
  * @retval None	  
  */
void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
{
 8005854:	b480      	push	{r7}
 8005856:	b085      	sub	sp, #20
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800585e:	2300      	movs	r3, #0
 8005860:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
  
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	60fb      	str	r3, [r7, #12]
  
  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  tmpreg &= CR1_AWDMode_RESET;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800586e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005872:	60fb      	str	r3, [r7, #12]
  
  /* Set the analog watchdog enable mode */
  tmpreg |= ADC_AnalogWatchdog;
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	4313      	orrs	r3, r2
 800587a:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	605a      	str	r2, [r3, #4]
}
 8005882:	3714      	adds	r7, #20
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <ADC_AnalogWatchdogThresholdsConfig>:
  *          This parameter must be a 12-bit value.
  * @retval None
  */
void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
                                        uint16_t LowThreshold)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	4613      	mov	r3, r2
 8005896:	460a      	mov	r2, r1
 8005898:	807a      	strh	r2, [r7, #2]
 800589a:	803b      	strh	r3, [r7, #0]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));
  
  /* Set the ADCx high threshold */
  ADCx->HTR = HighThreshold;
 800589c:	887a      	ldrh	r2, [r7, #2]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the ADCx low threshold */
  ADCx->LTR = LowThreshold;
 80058a2:	883a      	ldrh	r2, [r7, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80058a8:	370c      	adds	r7, #12
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop

080058b4 <ADC_AnalogWatchdogSingleChannelConfig>:
  *            @arg ADC_Channel_17: ADC Channel17 selected
  *            @arg ADC_Channel_18: ADC Channel18 selected
  * @retval None
  */
void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	460b      	mov	r3, r1
 80058be:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 80058c0:	2300      	movs	r3, #0
 80058c2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	60fb      	str	r3, [r7, #12]
  
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= CR1_AWDCH_RESET;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f023 031f 	bic.w	r3, r3, #31
 80058d0:	60fb      	str	r3, [r7, #12]
  
  /* Set the Analog watchdog channel */
  tmpreg |= ADC_Channel;
 80058d2:	78fb      	ldrb	r3, [r7, #3]
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	605a      	str	r2, [r3, #4]
}
 80058e0:	3714      	adds	r7, #20
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop

080058ec <ADC_TempSensorVrefintCmd>:
  * @param  NewState: new state of the temperature sensor and Vrefint channels.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	4603      	mov	r3, r0
 80058f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80058f6:	79fb      	ldrb	r3, [r7, #7]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d006      	beq.n	800590a <ADC_TempSensorVrefintCmd+0x1e>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 80058fc:	4b08      	ldr	r3, [pc, #32]	; (8005920 <ADC_TempSensorVrefintCmd+0x34>)
 80058fe:	4a08      	ldr	r2, [pc, #32]	; (8005920 <ADC_TempSensorVrefintCmd+0x34>)
 8005900:	6852      	ldr	r2, [r2, #4]
 8005902:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005906:	605a      	str	r2, [r3, #4]
 8005908:	e005      	b.n	8005916 <ADC_TempSensorVrefintCmd+0x2a>
  }
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 800590a:	4b05      	ldr	r3, [pc, #20]	; (8005920 <ADC_TempSensorVrefintCmd+0x34>)
 800590c:	4a04      	ldr	r2, [pc, #16]	; (8005920 <ADC_TempSensorVrefintCmd+0x34>)
 800590e:	6852      	ldr	r2, [r2, #4]
 8005910:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8005914:	605a      	str	r2, [r3, #4]
  }
}
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr
 8005920:	40012300 	.word	0x40012300

08005924 <ADC_VBATCmd>:
  * @param  NewState: new state of the VBAT channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_VBATCmd(FunctionalState NewState)                             
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	4603      	mov	r3, r0
 800592c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800592e:	79fb      	ldrb	r3, [r7, #7]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d006      	beq.n	8005942 <ADC_VBATCmd+0x1e>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_VBATE;
 8005934:	4b08      	ldr	r3, [pc, #32]	; (8005958 <ADC_VBATCmd+0x34>)
 8005936:	4a08      	ldr	r2, [pc, #32]	; (8005958 <ADC_VBATCmd+0x34>)
 8005938:	6852      	ldr	r2, [r2, #4]
 800593a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800593e:	605a      	str	r2, [r3, #4]
 8005940:	e005      	b.n	800594e <ADC_VBATCmd+0x2a>
  }
  else
  {
    /* Disable the VBAT channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_VBATE);
 8005942:	4b05      	ldr	r3, [pc, #20]	; (8005958 <ADC_VBATCmd+0x34>)
 8005944:	4a04      	ldr	r2, [pc, #16]	; (8005958 <ADC_VBATCmd+0x34>)
 8005946:	6852      	ldr	r2, [r2, #4]
 8005948:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 800594c:	605a      	str	r2, [r3, #4]
  }
}
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr
 8005958:	40012300 	.word	0x40012300

0800595c <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	70f9      	strb	r1, [r7, #3]
 8005966:	70ba      	strb	r2, [r7, #2]
 8005968:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 800596a:	2300      	movs	r3, #0
 800596c:	60fb      	str	r3, [r7, #12]
 800596e:	2300      	movs	r3, #0
 8005970:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8005972:	78fb      	ldrb	r3, [r7, #3]
 8005974:	2b09      	cmp	r3, #9
 8005976:	d923      	bls.n	80059c0 <ADC_RegularChannelConfig+0x64>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 800597e:	78fb      	ldrb	r3, [r7, #3]
 8005980:	f1a3 020a 	sub.w	r2, r3, #10
 8005984:	4613      	mov	r3, r2
 8005986:	005b      	lsls	r3, r3, #1
 8005988:	4413      	add	r3, r2
 800598a:	2207      	movs	r2, #7
 800598c:	fa02 f303 	lsl.w	r3, r2, r3
 8005990:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	43db      	mvns	r3, r3
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	4013      	ands	r3, r2
 800599a:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 800599c:	7879      	ldrb	r1, [r7, #1]
 800599e:	78fb      	ldrb	r3, [r7, #3]
 80059a0:	f1a3 020a 	sub.w	r2, r3, #10
 80059a4:	4613      	mov	r3, r2
 80059a6:	005b      	lsls	r3, r3, #1
 80059a8:	4413      	add	r3, r2
 80059aa:	fa01 f303 	lsl.w	r3, r1, r3
 80059ae:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	60da      	str	r2, [r3, #12]
 80059be:	e01e      	b.n	80059fe <ADC_RegularChannelConfig+0xa2>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 80059c6:	78fa      	ldrb	r2, [r7, #3]
 80059c8:	4613      	mov	r3, r2
 80059ca:	005b      	lsls	r3, r3, #1
 80059cc:	4413      	add	r3, r2
 80059ce:	2207      	movs	r2, #7
 80059d0:	fa02 f303 	lsl.w	r3, r2, r3
 80059d4:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	43db      	mvns	r3, r3
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	4013      	ands	r3, r2
 80059de:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 80059e0:	7879      	ldrb	r1, [r7, #1]
 80059e2:	78fa      	ldrb	r2, [r7, #3]
 80059e4:	4613      	mov	r3, r2
 80059e6:	005b      	lsls	r3, r3, #1
 80059e8:	4413      	add	r3, r2
 80059ea:	fa01 f303 	lsl.w	r3, r1, r3
 80059ee:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80059fe:	78bb      	ldrb	r3, [r7, #2]
 8005a00:	2b06      	cmp	r3, #6
 8005a02:	d821      	bhi.n	8005a48 <ADC_RegularChannelConfig+0xec>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a08:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8005a0a:	78bb      	ldrb	r3, [r7, #2]
 8005a0c:	1e5a      	subs	r2, r3, #1
 8005a0e:	4613      	mov	r3, r2
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	4413      	add	r3, r2
 8005a14:	221f      	movs	r2, #31
 8005a16:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1a:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	43db      	mvns	r3, r3
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	4013      	ands	r3, r2
 8005a24:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8005a26:	78f9      	ldrb	r1, [r7, #3]
 8005a28:	78bb      	ldrb	r3, [r7, #2]
 8005a2a:	1e5a      	subs	r2, r3, #1
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	4413      	add	r3, r2
 8005a32:	fa01 f303 	lsl.w	r3, r1, r3
 8005a36:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	635a      	str	r2, [r3, #52]	; 0x34
 8005a46:	e047      	b.n	8005ad8 <ADC_RegularChannelConfig+0x17c>
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8005a48:	78bb      	ldrb	r3, [r7, #2]
 8005a4a:	2b0c      	cmp	r3, #12
 8005a4c:	d821      	bhi.n	8005a92 <ADC_RegularChannelConfig+0x136>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a52:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8005a54:	78bb      	ldrb	r3, [r7, #2]
 8005a56:	1fda      	subs	r2, r3, #7
 8005a58:	4613      	mov	r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4413      	add	r3, r2
 8005a5e:	221f      	movs	r2, #31
 8005a60:	fa02 f303 	lsl.w	r3, r2, r3
 8005a64:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	43db      	mvns	r3, r3
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8005a70:	78f9      	ldrb	r1, [r7, #3]
 8005a72:	78bb      	ldrb	r3, [r7, #2]
 8005a74:	1fda      	subs	r2, r3, #7
 8005a76:	4613      	mov	r3, r2
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	4413      	add	r3, r2
 8005a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a80:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	631a      	str	r2, [r3, #48]	; 0x30
 8005a90:	e022      	b.n	8005ad8 <ADC_RegularChannelConfig+0x17c>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a96:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8005a98:	78bb      	ldrb	r3, [r7, #2]
 8005a9a:	f1a3 020d 	sub.w	r2, r3, #13
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	4413      	add	r3, r2
 8005aa4:	221f      	movs	r2, #31
 8005aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aaa:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	43db      	mvns	r3, r3
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8005ab6:	78f9      	ldrb	r1, [r7, #3]
 8005ab8:	78bb      	ldrb	r3, [r7, #2]
 8005aba:	f1a3 020d 	sub.w	r2, r3, #13
 8005abe:	4613      	mov	r3, r2
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	4413      	add	r3, r2
 8005ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ac8:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8005ad8:	3714      	adds	r7, #20
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop

08005ae4 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	609a      	str	r2, [r3, #8]
}
 8005af8:	370c      	adds	r7, #12
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop

08005b04 <ADC_GetSoftwareStartConvStatus>:
  * @brief  Gets the selected ADC Software start regular conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Check the status of SWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d002      	beq.n	8005b22 <ADC_GetSoftwareStartConvStatus+0x1e>
  {
    /* SWSTART bit is set */
    bitstatus = SET;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	73fb      	strb	r3, [r7, #15]
 8005b20:	e001      	b.n	8005b26 <ADC_GetSoftwareStartConvStatus+0x22>
  }
  else
  {
    /* SWSTART bit is reset */
    bitstatus = RESET;
 8005b22:	2300      	movs	r3, #0
 8005b24:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the SWSTART bit status */
  return  bitstatus;
 8005b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3714      	adds	r7, #20
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <ADC_EOCOnEachRegularChannelCmd>:
  * @param  NewState: new state of the selected ADC EOC flag rising
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_EOCOnEachRegularChannelCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005b40:	78fb      	ldrb	r3, [r7, #3]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d006      	beq.n	8005b54 <ADC_EOCOnEachRegularChannelCmd+0x20>
  {
    /* Enable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	609a      	str	r2, [r3, #8]
 8005b52:	e005      	b.n	8005b60 <ADC_EOCOnEachRegularChannelCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	609a      	str	r2, [r3, #8]
  }
}
 8005b60:	370c      	adds	r7, #12
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
 8005b6a:	bf00      	nop

08005b6c <ADC_ContinuousModeCmd>:
  * @param  NewState: new state of the selected ADC continuous conversion mode
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ContinuousModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	460b      	mov	r3, r1
 8005b76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005b78:	78fb      	ldrb	r3, [r7, #3]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d006      	beq.n	8005b8c <ADC_ContinuousModeCmd+0x20>
  {
    /* Enable the selected ADC continuous conversion mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	f043 0202 	orr.w	r2, r3, #2
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	609a      	str	r2, [r3, #8]
 8005b8a:	e005      	b.n	8005b98 <ADC_ContinuousModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC continuous conversion mode */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	f023 0202 	bic.w	r2, r3, #2
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	609a      	str	r2, [r3, #8]
  }
}
 8005b98:	370c      	adds	r7, #12
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop

08005ba4 <ADC_DiscModeChannelCountConfig>:
  * @param  Number: specifies the discontinuous mode regular channel count value.
  *          This number must be between 1 and 8.
  * @retval None
  */
void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b085      	sub	sp, #20
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	460b      	mov	r3, r1
 8005bae:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
  
  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_RESET;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005bc4:	60fb      	str	r3, [r7, #12]
  
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
 8005bc6:	78fb      	ldrb	r3, [r7, #3]
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 13;
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	035b      	lsls	r3, r3, #13
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg1;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	605a      	str	r2, [r3, #4]
}
 8005bdc:	3714      	adds	r7, #20
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop

08005be8 <ADC_DiscModeCmd>:
  *         regular group channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005bf4:	78fb      	ldrb	r3, [r7, #3]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d006      	beq.n	8005c08 <ADC_DiscModeCmd+0x20>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	605a      	str	r2, [r3, #4]
 8005c06:	e005      	b.n	8005c14 <ADC_DiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	605a      	str	r2, [r3, #4]
  }
}
 8005c14:	370c      	adds	r7, #12
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
 8005c1e:	bf00      	nop

08005c20 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c2c:	b29b      	uxth	r3, r3
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	370c      	adds	r7, #12
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop

08005c3c <ADC_GetMultiModeConversionValue>:
  * @note   In triple mode, the value returned by this function is as following
  *           Data[15:0] : these bits contain alternatively the regular data of ADC1, ADC3 and ADC2.
  *           Data[31:16]: these bits contain alternatively the regular data of ADC2, ADC1 and ADC3.           
  */
uint32_t ADC_GetMultiModeConversionValue(void)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	af00      	add	r7, sp, #0
  /* Return the multi mode conversion value */
  return (*(__IO uint32_t *) CDR_ADDRESS);
 8005c40:	4b03      	ldr	r3, [pc, #12]	; (8005c50 <ADC_GetMultiModeConversionValue+0x14>)
 8005c42:	681b      	ldr	r3, [r3, #0]
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	40012308 	.word	0x40012308

08005c54 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005c60:	78fb      	ldrb	r3, [r7, #3]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d006      	beq.n	8005c74 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	609a      	str	r2, [r3, #8]
 8005c72:	e005      	b.n	8005c80 <ADC_DMACmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	609a      	str	r2, [r3, #8]
  }
}
 8005c80:	370c      	adds	r7, #12
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop

08005c8c <ADC_DMARequestAfterLastTransferCmd>:
  * @param  NewState: new state of the selected ADC DMA request after last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	460b      	mov	r3, r1
 8005c96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005c98:	78fb      	ldrb	r3, [r7, #3]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d006      	beq.n	8005cac <ADC_DMARequestAfterLastTransferCmd+0x20>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	609a      	str	r2, [r3, #8]
 8005caa:	e005      	b.n	8005cb8 <ADC_DMARequestAfterLastTransferCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	609a      	str	r2, [r3, #8]
  }
}
 8005cb8:	370c      	adds	r7, #12
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop

08005cc4 <ADC_MultiModeDMARequestAfterLastTransferCmd>:
  *         by ADC_CommonInitStruct.ADC_DMAAccessMode structure member) is 
  *          ADC_DMAAccessMode_1, ADC_DMAAccessMode_2 or ADC_DMAAccessMode_3.     
  * @retval None
  */
void ADC_MultiModeDMARequestAfterLastTransferCmd(FunctionalState NewState)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	4603      	mov	r3, r0
 8005ccc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005cce:	79fb      	ldrb	r3, [r7, #7]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d006      	beq.n	8005ce2 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x1e>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 8005cd4:	4b08      	ldr	r3, [pc, #32]	; (8005cf8 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x34>)
 8005cd6:	4a08      	ldr	r2, [pc, #32]	; (8005cf8 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x34>)
 8005cd8:	6852      	ldr	r2, [r2, #4]
 8005cda:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cde:	605a      	str	r2, [r3, #4]
 8005ce0:	e005      	b.n	8005cee <ADC_MultiModeDMARequestAfterLastTransferCmd+0x2a>
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
 8005ce2:	4b05      	ldr	r3, [pc, #20]	; (8005cf8 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x34>)
 8005ce4:	4a04      	ldr	r2, [pc, #16]	; (8005cf8 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x34>)
 8005ce6:	6852      	ldr	r2, [r2, #4]
 8005ce8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005cec:	605a      	str	r2, [r3, #4]
  }
}
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr
 8005cf8:	40012300 	.word	0x40012300

08005cfc <ADC_InjectedChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b087      	sub	sp, #28
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	70f9      	strb	r1, [r7, #3]
 8005d06:	70ba      	strb	r2, [r7, #2]
 8005d08:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	617b      	str	r3, [r7, #20]
 8005d0e:	2300      	movs	r3, #0
 8005d10:	613b      	str	r3, [r7, #16]
 8005d12:	2300      	movs	r3, #0
 8005d14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8005d16:	78fb      	ldrb	r3, [r7, #3]
 8005d18:	2b09      	cmp	r3, #9
 8005d1a:	d923      	bls.n	8005d64 <ADC_InjectedChannelConfig+0x68>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 8005d22:	78fb      	ldrb	r3, [r7, #3]
 8005d24:	f1a3 020a 	sub.w	r2, r3, #10
 8005d28:	4613      	mov	r3, r2
 8005d2a:	005b      	lsls	r3, r3, #1
 8005d2c:	4413      	add	r3, r2
 8005d2e:	2207      	movs	r2, #7
 8005d30:	fa02 f303 	lsl.w	r3, r2, r3
 8005d34:	613b      	str	r3, [r7, #16]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	43db      	mvns	r3, r3
 8005d3a:	697a      	ldr	r2, [r7, #20]
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 8005d40:	7879      	ldrb	r1, [r7, #1]
 8005d42:	78fb      	ldrb	r3, [r7, #3]
 8005d44:	f1a3 020a 	sub.w	r2, r3, #10
 8005d48:	4613      	mov	r3, r2
 8005d4a:	005b      	lsls	r3, r3, #1
 8005d4c:	4413      	add	r3, r2
 8005d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d52:	613b      	str	r3, [r7, #16]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8005d54:	697a      	ldr	r2, [r7, #20]
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	60da      	str	r2, [r3, #12]
 8005d62:	e01e      	b.n	8005da2 <ADC_InjectedChannelConfig+0xa6>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8005d6a:	78fa      	ldrb	r2, [r7, #3]
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	005b      	lsls	r3, r3, #1
 8005d70:	4413      	add	r3, r2
 8005d72:	2207      	movs	r2, #7
 8005d74:	fa02 f303 	lsl.w	r3, r2, r3
 8005d78:	613b      	str	r3, [r7, #16]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	43db      	mvns	r3, r3
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	4013      	ands	r3, r2
 8005d82:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8005d84:	7879      	ldrb	r1, [r7, #1]
 8005d86:	78fa      	ldrb	r2, [r7, #3]
 8005d88:	4613      	mov	r3, r2
 8005d8a:	005b      	lsls	r3, r3, #1
 8005d8c:	4413      	add	r3, r2
 8005d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d92:	613b      	str	r3, [r7, #16]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8005d94:	697a      	ldr	r2, [r7, #20]
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	611a      	str	r2, [r3, #16]
  }
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da6:	617b      	str	r3, [r7, #20]
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005dae:	0d1b      	lsrs	r3, r3, #20
 8005db0:	60fb      	str	r3, [r7, #12]
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	78ba      	ldrb	r2, [r7, #2]
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	3302      	adds	r3, #2
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	4413      	add	r3, r2
 8005dc8:	221f      	movs	r2, #31
 8005dca:	fa02 f303 	lsl.w	r3, r2, r3
 8005dce:	613b      	str	r3, [r7, #16]
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	43db      	mvns	r3, r3
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	617b      	str	r3, [r7, #20]
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 8005dda:	78f9      	ldrb	r1, [r7, #3]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	78ba      	ldrb	r2, [r7, #2]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	3302      	adds	r3, #2
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	461a      	mov	r2, r3
 8005dec:	4613      	mov	r3, r2
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4413      	add	r3, r2
 8005df2:	fa01 f303 	lsl.w	r3, r1, r3
 8005df6:	613b      	str	r3, [r7, #16]
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
 8005df8:	697a      	ldr	r2, [r7, #20]
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	617b      	str	r3, [r7, #20]
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	697a      	ldr	r2, [r7, #20]
 8005e04:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005e06:	371c      	adds	r7, #28
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <ADC_InjectedSequencerLengthConfig>:
  * @param  Length: The sequencer length. 
  *          This parameter must be a number between 1 to 4.
  * @retval None
  */
void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b085      	sub	sp, #20
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	460b      	mov	r3, r1
 8005e1a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 8005e20:	2300      	movs	r3, #0
 8005e22:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e28:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old injected sequence length JL bits */
  tmpreg1 &= JSQR_JL_RESET;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005e30:	60fb      	str	r3, [r7, #12]
  
  /* Set the injected sequence length JL bits */
  tmpreg2 = Length - 1; 
 8005e32:	78fb      	ldrb	r3, [r7, #3]
 8005e34:	3b01      	subs	r3, #1
 8005e36:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 20;
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	051b      	lsls	r3, r3, #20
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005e48:	3714      	adds	r7, #20
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop

08005e54 <ADC_SetInjectedOffset>:
  * @param  Offset: the offset value for the selected ADC injected channel
  *          This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	460a      	mov	r2, r1
 8005e60:	70fa      	strb	r2, [r7, #3]
 8005e62:	803b      	strh	r3, [r7, #0]
    __IO uint32_t tmp = 0;
 8005e64:	2300      	movs	r3, #0
 8005e66:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_OFFSET(Offset));
  
  tmp = (uint32_t)ADCx;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel;
 8005e6c:	78fa      	ldrb	r2, [r7, #3]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	4413      	add	r3, r2
 8005e72:	60fb      	str	r3, [r7, #12]
  
  /* Set the selected injected channel data offset */
 *(__IO uint32_t *) tmp = (uint32_t)Offset;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	883a      	ldrh	r2, [r7, #0]
 8005e78:	601a      	str	r2, [r3, #0]
}
 8005e7a:	3714      	adds	r7, #20
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <ADC_ExternalTrigInjectedConvConfig>:
  *            @arg ADC_ExternalTrigInjecConv_T8_CC4: Timer8 capture compare4 selected 
  *            @arg ADC_ExternalTrigInjecConv_Ext_IT15: External interrupt line 15 event selected                          
  * @retval None
  */
void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
  
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old external event selection for injected group */
  tmpreg &= CR2_JEXTSEL_RESET;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8005e9e:	60fb      	str	r3, [r7, #12]
  
  /* Set the external event selection for injected group */
  tmpreg |= ADC_ExternalTrigInjecConv;
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	609a      	str	r2, [r3, #8]
}
 8005eae:	3714      	adds	r7, #20
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <ADC_ExternalTrigInjectedConvEdgeConfig>:
  *            @arg ADC_ExternalTrigInjecConvEdge_RisingFalling: detection on both rising 
  *                                                               and falling edge
  * @retval None
  */
void ADC_ExternalTrigInjectedConvEdgeConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConvEdge)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b085      	sub	sp, #20
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(ADC_ExternalTrigInjecConvEdge));
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	60fb      	str	r3, [r7, #12]
  /* Clear the old external trigger edge for injected group */
  tmpreg &= CR2_JEXTEN_RESET;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005ed2:	60fb      	str	r3, [r7, #12]
  /* Set the new external trigger edge for injected group */
  tmpreg |= ADC_ExternalTrigInjecConvEdge;
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	609a      	str	r2, [r3, #8]
}
 8005ee2:	3714      	adds	r7, #20
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <ADC_SoftwareStartInjectedConv>:
  * @brief  Enables the selected ADC software start conversion of the injected channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartInjectedConv(ADC_TypeDef* ADCx)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC conversion for injected group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_JSWSTART;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	609a      	str	r2, [r3, #8]
}
 8005f00:	370c      	adds	r7, #12
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop

08005f0c <ADC_GetSoftwareStartInjectedConvCmdStatus>:
  * @brief  Gets the selected ADC Software start injected conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start injected conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b085      	sub	sp, #20
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8005f14:	2300      	movs	r3, #0
 8005f16:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Check the status of JSWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d002      	beq.n	8005f2a <ADC_GetSoftwareStartInjectedConvCmdStatus+0x1e>
  {
    /* JSWSTART bit is set */
    bitstatus = SET;
 8005f24:	2301      	movs	r3, #1
 8005f26:	73fb      	strb	r3, [r7, #15]
 8005f28:	e001      	b.n	8005f2e <ADC_GetSoftwareStartInjectedConvCmdStatus+0x22>
  }
  else
  {
    /* JSWSTART bit is reset */
    bitstatus = RESET;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the JSWSTART bit status */
  return  bitstatus;
 8005f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3714      	adds	r7, #20
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <ADC_AutoInjectedConvCmd>:
  * @param  NewState: new state of the selected ADC auto injected conversion
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	460b      	mov	r3, r1
 8005f46:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005f48:	78fb      	ldrb	r3, [r7, #3]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d006      	beq.n	8005f5c <ADC_AutoInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	605a      	str	r2, [r3, #4]
 8005f5a:	e005      	b.n	8005f68 <ADC_AutoInjectedConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JAUTO);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	605a      	str	r2, [r3, #4]
  }
}
 8005f68:	370c      	adds	r7, #12
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop

08005f74 <ADC_InjectedDiscModeCmd>:
  *         group channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005f80:	78fb      	ldrb	r3, [r7, #3]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d006      	beq.n	8005f94 <ADC_InjectedDiscModeCmd+0x20>
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	605a      	str	r2, [r3, #4]
 8005f92:	e005      	b.n	8005fa0 <ADC_InjectedDiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JDISCEN);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	605a      	str	r2, [r3, #4]
  }
}
 8005fa0:	370c      	adds	r7, #12
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop

08005fac <ADC_GetInjectedConversionValue>:
  *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
  *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b085      	sub	sp, #20
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  tmp = (uint32_t)ADCx;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel + JDR_OFFSET;
 8005fc0:	78fa      	ldrb	r2, [r7, #3]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	3328      	adds	r3, #40	; 0x28
 8005fc8:	60fb      	str	r3, [r7, #12]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp); 
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	b29b      	uxth	r3, r3
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3714      	adds	r7, #20
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <ADC_ITConfig>:
  * @param  NewState: new state of the specified ADC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)  
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b085      	sub	sp, #20
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	460a      	mov	r2, r1
 8005fe8:	807a      	strh	r2, [r7, #2]
 8005fea:	707b      	strb	r3, [r7, #1]
  uint32_t itmask = 0;
 8005fec:	2300      	movs	r3, #0
 8005fee:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT)); 

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
 8005ff0:	887b      	ldrh	r3, [r7, #2]
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	60fb      	str	r3, [r7, #12]
  itmask = (uint32_t)0x01 << itmask;    
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8005ffe:	60fb      	str	r3, [r7, #12]

  if (NewState != DISABLE)
 8006000:	787b      	ldrb	r3, [r7, #1]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d006      	beq.n	8006014 <ADC_ITConfig+0x38>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	685a      	ldr	r2, [r3, #4]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	431a      	orrs	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	605a      	str	r2, [r3, #4]
 8006012:	e006      	b.n	8006022 <ADC_ITConfig+0x46>
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	685a      	ldr	r2, [r3, #4]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	43db      	mvns	r3, r3
 800601c:	401a      	ands	r2, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	605a      	str	r2, [r3, #4]
  }
}
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <ADC_GetFlagStatus>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                                                 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 800602c:	b480      	push	{r7}
 800602e:	b085      	sub	sp, #20
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	460b      	mov	r3, r1
 8006036:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
 8006038:	2300      	movs	r3, #0
 800603a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	78fb      	ldrb	r3, [r7, #3]
 8006042:	4013      	ands	r3, r2
 8006044:	2b00      	cmp	r3, #0
 8006046:	d002      	beq.n	800604e <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 8006048:	2301      	movs	r3, #1
 800604a:	73fb      	strb	r3, [r7, #15]
 800604c:	e001      	b.n	8006052 <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 800604e:	2300      	movs	r3, #0
 8006050:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8006052:	7bfb      	ldrb	r3, [r7, #15]
}
 8006054:	4618      	mov	r0, r3
 8006056:	3714      	adds	r7, #20
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <ADC_ClearFlag>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                          
  * @retval None
  */
void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	460b      	mov	r3, r1
 800606a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));

  /* Clear the selected ADC flags */
  ADCx->SR = ~(uint32_t)ADC_FLAG;
 800606c:	78fb      	ldrb	r3, [r7, #3]
 800606e:	43da      	mvns	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	601a      	str	r2, [r3, #0]
}
 8006074:	370c      	adds	r7, #12
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop

08006080 <ADC_GetITStatus>:
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                        
  * @retval The new state of ADC_IT (SET or RESET).
  */
ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 8006080:	b480      	push	{r7}
 8006082:	b087      	sub	sp, #28
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	460b      	mov	r3, r1
 800608a:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;
 800608c:	2300      	movs	r3, #0
 800608e:	75fb      	strb	r3, [r7, #23]
  uint32_t itmask = 0, enablestatus = 0;
 8006090:	2300      	movs	r3, #0
 8006092:	613b      	str	r3, [r7, #16]
 8006094:	2300      	movs	r3, #0
 8006096:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT));

  /* Get the ADC IT index */
  itmask = ADC_IT >> 8;
 8006098:	887b      	ldrh	r3, [r7, #2]
 800609a:	0a1b      	lsrs	r3, r3, #8
 800609c:	b29b      	uxth	r3, r3
 800609e:	613b      	str	r3, [r7, #16]

  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)) ;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	685a      	ldr	r2, [r3, #4]
 80060a4:	887b      	ldrh	r3, [r7, #2]
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	2101      	movs	r1, #1
 80060aa:	fa01 f303 	lsl.w	r3, r1, r3
 80060ae:	4013      	ands	r3, r2
 80060b0:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified ADC interrupt */
  if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	4013      	ands	r3, r2
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d005      	beq.n	80060ca <ADC_GetITStatus+0x4a>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d002      	beq.n	80060ca <ADC_GetITStatus+0x4a>
  {
    /* ADC_IT is set */
    bitstatus = SET;
 80060c4:	2301      	movs	r3, #1
 80060c6:	75fb      	strb	r3, [r7, #23]
 80060c8:	e001      	b.n	80060ce <ADC_GetITStatus+0x4e>
  }
  else
  {
    /* ADC_IT is reset */
    bitstatus = RESET;
 80060ca:	2300      	movs	r3, #0
 80060cc:	75fb      	strb	r3, [r7, #23]
  }
  /* Return the ADC_IT status */
  return  bitstatus;
 80060ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	371c      	adds	r7, #28
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <ADC_ClearITPendingBit>:
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                         
  * @retval None
  */
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 80060dc:	b480      	push	{r7}
 80060de:	b085      	sub	sp, #20
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	460b      	mov	r3, r1
 80060e6:	807b      	strh	r3, [r7, #2]
  uint8_t itmask = 0;
 80060e8:	2300      	movs	r3, #0
 80060ea:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT)); 
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
 80060ec:	887b      	ldrh	r3, [r7, #2]
 80060ee:	0a1b      	lsrs	r3, r3, #8
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	73fb      	strb	r3, [r7, #15]
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
 80060f4:	7bfb      	ldrb	r3, [r7, #15]
 80060f6:	43da      	mvns	r2, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	601a      	str	r2, [r3, #0]
}                    
 80060fc:	3714      	adds	r7, #20
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop

08006108 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8006110:	4a05      	ldr	r2, [pc, #20]	; (8006128 <NVIC_PriorityGroupConfig+0x20>)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800611c:	60d3      	str	r3, [r2, #12]
}
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr
 8006128:	e000ed00 	.word	0xe000ed00

0800612c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800612c:	b480      	push	{r7}
 800612e:	b085      	sub	sp, #20
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8006134:	2300      	movs	r3, #0
 8006136:	73fb      	strb	r3, [r7, #15]
 8006138:	2300      	movs	r3, #0
 800613a:	73bb      	strb	r3, [r7, #14]
 800613c:	230f      	movs	r3, #15
 800613e:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	78db      	ldrb	r3, [r3, #3]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d037      	beq.n	80061b8 <NVIC_Init+0x8c>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8006148:	4b25      	ldr	r3, [pc, #148]	; (80061e0 <NVIC_Init+0xb4>)
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	43db      	mvns	r3, r3
 800614e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006152:	0a1b      	lsrs	r3, r3, #8
 8006154:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8006156:	7bfb      	ldrb	r3, [r7, #15]
 8006158:	f1c3 0304 	rsb	r3, r3, #4
 800615c:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 800615e:	7b7a      	ldrb	r2, [r7, #13]
 8006160:	7bfb      	ldrb	r3, [r7, #15]
 8006162:	fa42 f303 	asr.w	r3, r2, r3
 8006166:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	785b      	ldrb	r3, [r3, #1]
 800616c:	461a      	mov	r2, r3
 800616e:	7bbb      	ldrb	r3, [r7, #14]
 8006170:	fa02 f303 	lsl.w	r3, r2, r3
 8006174:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	789a      	ldrb	r2, [r3, #2]
 800617a:	7b7b      	ldrb	r3, [r7, #13]
 800617c:	4013      	ands	r3, r2
 800617e:	b2da      	uxtb	r2, r3
 8006180:	7bfb      	ldrb	r3, [r7, #15]
 8006182:	4313      	orrs	r3, r2
 8006184:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8006186:	7bfb      	ldrb	r3, [r7, #15]
 8006188:	011b      	lsls	r3, r3, #4
 800618a:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800618c:	4a15      	ldr	r2, [pc, #84]	; (80061e4 <NVIC_Init+0xb8>)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	4413      	add	r3, r2
 8006194:	7bfa      	ldrb	r2, [r7, #15]
 8006196:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800619a:	4b12      	ldr	r3, [pc, #72]	; (80061e4 <NVIC_Init+0xb8>)
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	7812      	ldrb	r2, [r2, #0]
 80061a0:	0952      	lsrs	r2, r2, #5
 80061a2:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80061a4:	6879      	ldr	r1, [r7, #4]
 80061a6:	7809      	ldrb	r1, [r1, #0]
 80061a8:	f001 011f 	and.w	r1, r1, #31
 80061ac:	2001      	movs	r0, #1
 80061ae:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80061b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80061b6:	e00e      	b.n	80061d6 <NVIC_Init+0xaa>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80061b8:	4b0a      	ldr	r3, [pc, #40]	; (80061e4 <NVIC_Init+0xb8>)
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	7812      	ldrb	r2, [r2, #0]
 80061be:	0952      	lsrs	r2, r2, #5
 80061c0:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80061c2:	6879      	ldr	r1, [r7, #4]
 80061c4:	7809      	ldrb	r1, [r1, #0]
 80061c6:	f001 011f 	and.w	r1, r1, #31
 80061ca:	2001      	movs	r0, #1
 80061cc:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80061d0:	3220      	adds	r2, #32
 80061d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80061d6:	3714      	adds	r7, #20
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr
 80061e0:	e000ed00 	.word	0xe000ed00
 80061e4:	e000e100 	.word	0xe000e100

080061e8 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 80061f2:	4a07      	ldr	r2, [pc, #28]	; (8006210 <NVIC_SetVectorTable+0x28>)
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80061fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80061fe:	6879      	ldr	r1, [r7, #4]
 8006200:	430b      	orrs	r3, r1
 8006202:	6093      	str	r3, [r2, #8]
}
 8006204:	370c      	adds	r7, #12
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	e000ed00 	.word	0xe000ed00

08006214 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	4602      	mov	r2, r0
 800621c:	460b      	mov	r3, r1
 800621e:	71fa      	strb	r2, [r7, #7]
 8006220:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8006222:	79bb      	ldrb	r3, [r7, #6]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d006      	beq.n	8006236 <NVIC_SystemLPConfig+0x22>
  {
    SCB->SCR |= LowPowerMode;
 8006228:	4b09      	ldr	r3, [pc, #36]	; (8006250 <NVIC_SystemLPConfig+0x3c>)
 800622a:	4a09      	ldr	r2, [pc, #36]	; (8006250 <NVIC_SystemLPConfig+0x3c>)
 800622c:	6911      	ldr	r1, [r2, #16]
 800622e:	79fa      	ldrb	r2, [r7, #7]
 8006230:	430a      	orrs	r2, r1
 8006232:	611a      	str	r2, [r3, #16]
 8006234:	e006      	b.n	8006244 <NVIC_SystemLPConfig+0x30>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8006236:	4b06      	ldr	r3, [pc, #24]	; (8006250 <NVIC_SystemLPConfig+0x3c>)
 8006238:	4a05      	ldr	r2, [pc, #20]	; (8006250 <NVIC_SystemLPConfig+0x3c>)
 800623a:	6911      	ldr	r1, [r2, #16]
 800623c:	79fa      	ldrb	r2, [r7, #7]
 800623e:	43d2      	mvns	r2, r2
 8006240:	400a      	ands	r2, r1
 8006242:	611a      	str	r2, [r3, #16]
  }
}
 8006244:	370c      	adds	r7, #12
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr
 800624e:	bf00      	nop
 8006250:	e000ed00 	.word	0xe000ed00

08006254 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2b04      	cmp	r3, #4
 8006260:	d106      	bne.n	8006270 <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8006262:	4b09      	ldr	r3, [pc, #36]	; (8006288 <SysTick_CLKSourceConfig+0x34>)
 8006264:	4a08      	ldr	r2, [pc, #32]	; (8006288 <SysTick_CLKSourceConfig+0x34>)
 8006266:	6812      	ldr	r2, [r2, #0]
 8006268:	f042 0204 	orr.w	r2, r2, #4
 800626c:	601a      	str	r2, [r3, #0]
 800626e:	e005      	b.n	800627c <SysTick_CLKSourceConfig+0x28>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8006270:	4b05      	ldr	r3, [pc, #20]	; (8006288 <SysTick_CLKSourceConfig+0x34>)
 8006272:	4a05      	ldr	r2, [pc, #20]	; (8006288 <SysTick_CLKSourceConfig+0x34>)
 8006274:	6812      	ldr	r2, [r2, #0]
 8006276:	f022 0204 	bic.w	r2, r2, #4
 800627a:	601a      	str	r2, [r3, #0]
  }
}
 800627c:	370c      	adds	r7, #12
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr
 8006286:	bf00      	nop
 8006288:	e000e010 	.word	0xe000e010

0800628c <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b086      	sub	sp, #24
 8006290:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006292:	2300      	movs	r3, #0
 8006294:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006296:	f000 fa77 	bl	8006788 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800629a:	4b0c      	ldr	r3, [pc, #48]	; (80062cc <xTimerCreateTimerTask+0x40>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00e      	beq.n	80062c0 <xTimerCreateTimerTask+0x34>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 80062a2:	2303      	movs	r3, #3
 80062a4:	9300      	str	r3, [sp, #0]
 80062a6:	2300      	movs	r3, #0
 80062a8:	9301      	str	r3, [sp, #4]
 80062aa:	2300      	movs	r3, #0
 80062ac:	9302      	str	r3, [sp, #8]
 80062ae:	2300      	movs	r3, #0
 80062b0:	9303      	str	r3, [sp, #12]
 80062b2:	4807      	ldr	r0, [pc, #28]	; (80062d0 <xTimerCreateTimerTask+0x44>)
 80062b4:	4907      	ldr	r1, [pc, #28]	; (80062d4 <xTimerCreateTimerTask+0x48>)
 80062b6:	2246      	movs	r2, #70	; 0x46
 80062b8:	2300      	movs	r3, #0
 80062ba:	f000 fab5 	bl	8006828 <xTaskGenericCreate>
 80062be:	6078      	str	r0, [r7, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
	return xReturn;
 80062c0:	687b      	ldr	r3, [r7, #4]
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3708      	adds	r7, #8
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	200000c4 	.word	0x200000c4
 80062d0:	08006445 	.word	0x08006445
 80062d4:	080094d8 	.word	0x080094d8

080062d8 <xTimerCreate>:
/*-----------------------------------------------------------*/

TimerHandle_t xTimerCreate( const char * const pcTimerName, const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b086      	sub	sp, #24
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	607a      	str	r2, [r7, #4]
 80062e4:	603b      	str	r3, [r7, #0]
Timer_t *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d102      	bne.n	80062f2 <xTimerCreate+0x1a>
	{
		pxNewTimer = NULL;
 80062ec:	2300      	movs	r3, #0
 80062ee:	617b      	str	r3, [r7, #20]
 80062f0:	e01c      	b.n	800632c <xTimerCreate+0x54>
	}
	else
	{
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 80062f2:	2028      	movs	r0, #40	; 0x28
 80062f4:	f002 fe94 	bl	8009020 <pvPortMalloc>
 80062f8:	6178      	str	r0, [r7, #20]
		if( pxNewTimer != NULL )
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d015      	beq.n	800632c <xTimerCreate+0x54>
		{
			/* Ensure the infrastructure used by the timer service task has been
			created/initialised. */
			prvCheckForValidListAndQueue();
 8006300:	f000 fa42 	bl	8006788 <prvCheckForValidListAndQueue>

			/* Initialise the timer structure members using the function parameters. */
			pxNewTimer->pcTimerName = pcTimerName;
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	601a      	str	r2, [r3, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	68ba      	ldr	r2, [r7, #8]
 800630e:	619a      	str	r2, [r3, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	61da      	str	r2, [r3, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	683a      	ldr	r2, [r7, #0]
 800631a:	621a      	str	r2, [r3, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	6a3a      	ldr	r2, [r7, #32]
 8006320:	625a      	str	r2, [r3, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	3304      	adds	r3, #4
 8006326:	4618      	mov	r0, r3
 8006328:	f002 fcbc 	bl	8008ca4 <vListInitialiseItem>
	}

	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );

	return ( TimerHandle_t ) pxNewTimer;
 800632c:	697b      	ldr	r3, [r7, #20]
}
 800632e:	4618      	mov	r0, r3
 8006330:	3718      	adds	r7, #24
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop

08006338 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b088      	sub	sp, #32
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	607a      	str	r2, [r7, #4]
 8006344:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006346:	2300      	movs	r3, #0
 8006348:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800634a:	4b1d      	ldr	r3, [pc, #116]	; (80063c0 <xTimerGenericCommand+0x88>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d030      	beq.n	80063b4 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	2b05      	cmp	r3, #5
 8006362:	dc1c      	bgt.n	800639e <xTimerGenericCommand+0x66>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006364:	f001 fbce 	bl	8007b04 <xTaskGetSchedulerState>
 8006368:	4603      	mov	r3, r0
 800636a:	2b02      	cmp	r3, #2
 800636c:	d10b      	bne.n	8006386 <xTimerGenericCommand+0x4e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800636e:	4b14      	ldr	r3, [pc, #80]	; (80063c0 <xTimerGenericCommand+0x88>)
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	f107 0310 	add.w	r3, r7, #16
 8006376:	4610      	mov	r0, r2
 8006378:	4619      	mov	r1, r3
 800637a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800637c:	2300      	movs	r3, #0
 800637e:	f002 f83b 	bl	80083f8 <xQueueGenericSend>
 8006382:	61f8      	str	r0, [r7, #28]
 8006384:	e016      	b.n	80063b4 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006386:	4b0e      	ldr	r3, [pc, #56]	; (80063c0 <xTimerGenericCommand+0x88>)
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	f107 0310 	add.w	r3, r7, #16
 800638e:	4610      	mov	r0, r2
 8006390:	4619      	mov	r1, r3
 8006392:	2200      	movs	r2, #0
 8006394:	2300      	movs	r3, #0
 8006396:	f002 f82f 	bl	80083f8 <xQueueGenericSend>
 800639a:	61f8      	str	r0, [r7, #28]
 800639c:	e00a      	b.n	80063b4 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800639e:	4b08      	ldr	r3, [pc, #32]	; (80063c0 <xTimerGenericCommand+0x88>)
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	f107 0310 	add.w	r3, r7, #16
 80063a6:	4610      	mov	r0, r2
 80063a8:	4619      	mov	r1, r3
 80063aa:	683a      	ldr	r2, [r7, #0]
 80063ac:	2300      	movs	r3, #0
 80063ae:	f002 f8c9 	bl	8008544 <xQueueGenericSendFromISR>
 80063b2:	61f8      	str	r0, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80063b4:	69fb      	ldr	r3, [r7, #28]
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3720      	adds	r7, #32
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	200000c4 	.word	0x200000c4

080063c4 <pcTimerGetTimerName>:

#endif
/*-----------------------------------------------------------*/

const char * pcTimerGetTimerName( TimerHandle_t xTimer )
{
 80063c4:	b480      	push	{r7}
 80063c6:	b085      	sub	sp, #20
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
Timer_t *pxTimer = ( Timer_t * ) xTimer;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	60fb      	str	r3, [r7, #12]

	return pxTimer->pcTimerName;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3714      	adds	r7, #20
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b086      	sub	sp, #24
 80063e4:	af02      	add	r7, sp, #8
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80063ea:	4b15      	ldr	r3, [pc, #84]	; (8006440 <prvProcessExpiredTimer+0x60>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	3304      	adds	r3, #4
 80063f8:	4618      	mov	r0, r3
 80063fa:	f002 fcbb 	bl	8008d74 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	69db      	ldr	r3, [r3, #28]
 8006402:	2b01      	cmp	r3, #1
 8006404:	d115      	bne.n	8006432 <prvProcessExpiredTimer+0x52>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	699a      	ldr	r2, [r3, #24]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4413      	add	r3, r2
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	4619      	mov	r1, r3
 8006412:	683a      	ldr	r2, [r7, #0]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f000 f8a9 	bl	800656c <prvInsertTimerInActiveList>
 800641a:	4603      	mov	r3, r0
 800641c:	2b01      	cmp	r3, #1
 800641e:	d108      	bne.n	8006432 <prvProcessExpiredTimer+0x52>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006420:	2300      	movs	r3, #0
 8006422:	9300      	str	r3, [sp, #0]
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	2100      	movs	r1, #0
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	2300      	movs	r3, #0
 800642c:	f7ff ff84 	bl	8006338 <xTimerGenericCommand>
 8006430:	60b8      	str	r0, [r7, #8]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006436:	68f8      	ldr	r0, [r7, #12]
 8006438:	4798      	blx	r3
}
 800643a:	3710      	adds	r7, #16
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}
 8006440:	200000bc 	.word	0x200000bc

08006444 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800644c:	f107 0308 	add.w	r3, r7, #8
 8006450:	4618      	mov	r0, r3
 8006452:	f000 f847 	bl	80064e4 <prvGetNextExpireTime>
 8006456:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	68f8      	ldr	r0, [r7, #12]
 800645c:	4619      	mov	r1, r3
 800645e:	f000 f803 	bl	8006468 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006462:	f000 f8c5 	bl	80065f0 <prvProcessReceivedCommands>
	}
 8006466:	e7f1      	b.n	800644c <prvTimerTask+0x8>

08006468 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006472:	f000 fe1b 	bl	80070ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006476:	f107 0308 	add.w	r3, r7, #8
 800647a:	4618      	mov	r0, r3
 800647c:	f000 f856 	bl	800652c <prvSampleTimeNow>
 8006480:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d124      	bne.n	80064d2 <prvProcessTimerOrBlockTask+0x6a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d10a      	bne.n	80064a4 <prvProcessTimerOrBlockTask+0x3c>
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	429a      	cmp	r2, r3
 8006494:	d806      	bhi.n	80064a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006496:	f000 fe17 	bl	80070c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	68f9      	ldr	r1, [r7, #12]
 800649e:	f7ff ff9f 	bl	80063e0 <prvProcessExpiredTimer>
 80064a2:	e018      	b.n	80064d6 <prvProcessTimerOrBlockTask+0x6e>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 80064a4:	4b0d      	ldr	r3, [pc, #52]	; (80064dc <prvProcessTimerOrBlockTask+0x74>)
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	6879      	ldr	r1, [r7, #4]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	1acb      	subs	r3, r1, r3
 80064ae:	4610      	mov	r0, r2
 80064b0:	4619      	mov	r1, r3
 80064b2:	f002 fbab 	bl	8008c0c <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 80064b6:	f000 fe07 	bl	80070c8 <xTaskResumeAll>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d10a      	bne.n	80064d6 <prvProcessTimerOrBlockTask+0x6e>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
 80064c0:	4b07      	ldr	r3, [pc, #28]	; (80064e0 <prvProcessTimerOrBlockTask+0x78>)
 80064c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064c6:	601a      	str	r2, [r3, #0]
 80064c8:	f3bf 8f4f 	dsb	sy
 80064cc:	f3bf 8f6f 	isb	sy
 80064d0:	e001      	b.n	80064d6 <prvProcessTimerOrBlockTask+0x6e>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 80064d2:	f000 fdf9 	bl	80070c8 <xTaskResumeAll>
		}
	}
}
 80064d6:	3710      	adds	r7, #16
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	200000c4 	.word	0x200000c4
 80064e0:	e000ed04 	.word	0xe000ed04

080064e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80064e4:	b480      	push	{r7}
 80064e6:	b085      	sub	sp, #20
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80064ec:	4b0e      	ldr	r3, [pc, #56]	; (8006528 <prvGetNextExpireTime+0x44>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	bf14      	ite	ne
 80064f6:	2300      	movne	r3, #0
 80064f8:	2301      	moveq	r3, #1
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	461a      	mov	r2, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d105      	bne.n	8006516 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800650a:	4b07      	ldr	r3, [pc, #28]	; (8006528 <prvGetNextExpireTime+0x44>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	60fb      	str	r3, [r7, #12]
 8006514:	e001      	b.n	800651a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006516:	2300      	movs	r3, #0
 8006518:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800651a:	68fb      	ldr	r3, [r7, #12]
}
 800651c:	4618      	mov	r0, r3
 800651e:	3714      	adds	r7, #20
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr
 8006528:	200000bc 	.word	0x200000bc

0800652c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006534:	f000 fe4e 	bl	80071d4 <xTaskGetTickCount>
 8006538:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800653a:	4b0b      	ldr	r3, [pc, #44]	; (8006568 <prvSampleTimeNow+0x3c>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	429a      	cmp	r2, r3
 8006542:	d205      	bcs.n	8006550 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006544:	f000 f8ce 	bl	80066e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	601a      	str	r2, [r3, #0]
 800654e:	e002      	b.n	8006556 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006556:	4b04      	ldr	r3, [pc, #16]	; (8006568 <prvSampleTimeNow+0x3c>)
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 800655c:	68fb      	ldr	r3, [r7, #12]
}
 800655e:	4618      	mov	r0, r3
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	200000c8 	.word	0x200000c8

0800656c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b086      	sub	sp, #24
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	607a      	str	r2, [r7, #4]
 8006578:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800657a:	2300      	movs	r3, #0
 800657c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	68ba      	ldr	r2, [r7, #8]
 8006582:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800658a:	68ba      	ldr	r2, [r7, #8]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	429a      	cmp	r2, r3
 8006590:	d812      	bhi.n	80065b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	1ad2      	subs	r2, r2, r3
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	699b      	ldr	r3, [r3, #24]
 800659c:	429a      	cmp	r2, r3
 800659e:	d302      	bcc.n	80065a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80065a0:	2301      	movs	r3, #1
 80065a2:	617b      	str	r3, [r7, #20]
 80065a4:	e01b      	b.n	80065de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80065a6:	4b10      	ldr	r3, [pc, #64]	; (80065e8 <prvInsertTimerInActiveList+0x7c>)
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	3304      	adds	r3, #4
 80065ae:	4610      	mov	r0, r2
 80065b0:	4619      	mov	r1, r3
 80065b2:	f002 fba7 	bl	8008d04 <vListInsert>
 80065b6:	e012      	b.n	80065de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	429a      	cmp	r2, r3
 80065be:	d206      	bcs.n	80065ce <prvInsertTimerInActiveList+0x62>
 80065c0:	68ba      	ldr	r2, [r7, #8]
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d302      	bcc.n	80065ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80065c8:	2301      	movs	r3, #1
 80065ca:	617b      	str	r3, [r7, #20]
 80065cc:	e007      	b.n	80065de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80065ce:	4b07      	ldr	r3, [pc, #28]	; (80065ec <prvInsertTimerInActiveList+0x80>)
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	3304      	adds	r3, #4
 80065d6:	4610      	mov	r0, r2
 80065d8:	4619      	mov	r1, r3
 80065da:	f002 fb93 	bl	8008d04 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80065de:	697b      	ldr	r3, [r7, #20]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3718      	adds	r7, #24
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	200000c0 	.word	0x200000c0
 80065ec:	200000bc 	.word	0x200000bc

080065f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b08a      	sub	sp, #40	; 0x28
 80065f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80065f6:	e063      	b.n	80066c0 <prvProcessReceivedCommands+0xd0>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	db60      	blt.n	80066c0 <prvProcessReceivedCommands+0xd0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	695b      	ldr	r3, [r3, #20]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d004      	beq.n	8006614 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	3304      	adds	r3, #4
 800660e:	4618      	mov	r0, r3
 8006610:	f002 fbb0 	bl	8008d74 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006614:	1d3b      	adds	r3, r7, #4
 8006616:	4618      	mov	r0, r3
 8006618:	f7ff ff88 	bl	800652c <prvSampleTimeNow>
 800661c:	61b8      	str	r0, [r7, #24]

			switch( xMessage.xMessageID )
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	2b09      	cmp	r3, #9
 8006622:	d84c      	bhi.n	80066be <prvProcessReceivedCommands+0xce>
 8006624:	a201      	add	r2, pc, #4	; (adr r2, 800662c <prvProcessReceivedCommands+0x3c>)
 8006626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800662a:	bf00      	nop
 800662c:	08006655 	.word	0x08006655
 8006630:	08006655 	.word	0x08006655
 8006634:	08006655 	.word	0x08006655
 8006638:	080066bf 	.word	0x080066bf
 800663c:	0800669b 	.word	0x0800669b
 8006640:	080066b7 	.word	0x080066b7
 8006644:	08006655 	.word	0x08006655
 8006648:	08006655 	.word	0x08006655
 800664c:	080066bf 	.word	0x080066bf
 8006650:	0800669b 	.word	0x0800669b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	699b      	ldr	r3, [r3, #24]
 800665a:	441a      	add	r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	69f8      	ldr	r0, [r7, #28]
 8006660:	4611      	mov	r1, r2
 8006662:	69ba      	ldr	r2, [r7, #24]
 8006664:	f7ff ff82 	bl	800656c <prvInsertTimerInActiveList>
 8006668:	4603      	mov	r3, r0
 800666a:	2b01      	cmp	r3, #1
 800666c:	d114      	bne.n	8006698 <prvProcessReceivedCommands+0xa8>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006672:	69f8      	ldr	r0, [r7, #28]
 8006674:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	69db      	ldr	r3, [r3, #28]
 800667a:	2b01      	cmp	r3, #1
 800667c:	d10c      	bne.n	8006698 <prvProcessReceivedCommands+0xa8>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	699b      	ldr	r3, [r3, #24]
 8006684:	4413      	add	r3, r2
 8006686:	2200      	movs	r2, #0
 8006688:	9200      	str	r2, [sp, #0]
 800668a:	69f8      	ldr	r0, [r7, #28]
 800668c:	2100      	movs	r1, #0
 800668e:	461a      	mov	r2, r3
 8006690:	2300      	movs	r3, #0
 8006692:	f7ff fe51 	bl	8006338 <xTimerGenericCommand>
 8006696:	6178      	str	r0, [r7, #20]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 8006698:	e012      	b.n	80066c0 <prvProcessReceivedCommands+0xd0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	619a      	str	r2, [r3, #24]
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	699a      	ldr	r2, [r3, #24]
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	4413      	add	r3, r2
 80066a8:	69f8      	ldr	r0, [r7, #28]
 80066aa:	4619      	mov	r1, r3
 80066ac:	69ba      	ldr	r2, [r7, #24]
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	f7ff ff5c 	bl	800656c <prvInsertTimerInActiveList>
					break;
 80066b4:	e004      	b.n	80066c0 <prvProcessReceivedCommands+0xd0>

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
 80066b6:	69f8      	ldr	r0, [r7, #28]
 80066b8:	f002 fd4a 	bl	8009150 <vPortFree>
					break;
 80066bc:	e000      	b.n	80066c0 <prvProcessReceivedCommands+0xd0>

				default	:
					/* Don't expect to get here. */
					break;
 80066be:	bf00      	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80066c0:	4b07      	ldr	r3, [pc, #28]	; (80066e0 <prvProcessReceivedCommands+0xf0>)
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	f107 0308 	add.w	r3, r7, #8
 80066c8:	4610      	mov	r0, r2
 80066ca:	4619      	mov	r1, r3
 80066cc:	2200      	movs	r2, #0
 80066ce:	2300      	movs	r3, #0
 80066d0:	f001 ffd6 	bl	8008680 <xQueueGenericReceive>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d18e      	bne.n	80065f8 <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
 80066da:	3720      	adds	r7, #32
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}
 80066e0:	200000c4 	.word	0x200000c4

080066e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b088      	sub	sp, #32
 80066e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80066ea:	e037      	b.n	800675c <prvSwitchTimerLists+0x78>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80066ec:	4b24      	ldr	r3, [pc, #144]	; (8006780 <prvSwitchTimerLists+0x9c>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80066f6:	4b22      	ldr	r3, [pc, #136]	; (8006780 <prvSwitchTimerLists+0x9c>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	3304      	adds	r3, #4
 8006704:	4618      	mov	r0, r3
 8006706:	f002 fb35 	bl	8008d74 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670e:	6938      	ldr	r0, [r7, #16]
 8006710:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	69db      	ldr	r3, [r3, #28]
 8006716:	2b01      	cmp	r3, #1
 8006718:	d120      	bne.n	800675c <prvSwitchTimerLists+0x78>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	699a      	ldr	r2, [r3, #24]
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	4413      	add	r3, r2
 8006722:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	429a      	cmp	r2, r3
 800672a:	d90e      	bls.n	800674a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	693a      	ldr	r2, [r7, #16]
 8006736:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006738:	4b11      	ldr	r3, [pc, #68]	; (8006780 <prvSwitchTimerLists+0x9c>)
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	3304      	adds	r3, #4
 8006740:	4610      	mov	r0, r2
 8006742:	4619      	mov	r1, r3
 8006744:	f002 fade 	bl	8008d04 <vListInsert>
 8006748:	e008      	b.n	800675c <prvSwitchTimerLists+0x78>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800674a:	2300      	movs	r3, #0
 800674c:	9300      	str	r3, [sp, #0]
 800674e:	6938      	ldr	r0, [r7, #16]
 8006750:	2100      	movs	r1, #0
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	2300      	movs	r3, #0
 8006756:	f7ff fdef 	bl	8006338 <xTimerGenericCommand>
 800675a:	60b8      	str	r0, [r7, #8]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800675c:	4b08      	ldr	r3, [pc, #32]	; (8006780 <prvSwitchTimerLists+0x9c>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1c2      	bne.n	80066ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006766:	4b06      	ldr	r3, [pc, #24]	; (8006780 <prvSwitchTimerLists+0x9c>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 800676c:	4b05      	ldr	r3, [pc, #20]	; (8006784 <prvSwitchTimerLists+0xa0>)
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	4b03      	ldr	r3, [pc, #12]	; (8006780 <prvSwitchTimerLists+0x9c>)
 8006772:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8006774:	4b03      	ldr	r3, [pc, #12]	; (8006784 <prvSwitchTimerLists+0xa0>)
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	601a      	str	r2, [r3, #0]
}
 800677a:	3718      	adds	r7, #24
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}
 8006780:	200000bc 	.word	0x200000bc
 8006784:	200000c0 	.word	0x200000c0

08006788 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006788:	b580      	push	{r7, lr}
 800678a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800678c:	f002 fba8 	bl	8008ee0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006790:	4b0d      	ldr	r3, [pc, #52]	; (80067c8 <prvCheckForValidListAndQueue+0x40>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d113      	bne.n	80067c0 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
 8006798:	480c      	ldr	r0, [pc, #48]	; (80067cc <prvCheckForValidListAndQueue+0x44>)
 800679a:	f002 fa63 	bl	8008c64 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800679e:	480c      	ldr	r0, [pc, #48]	; (80067d0 <prvCheckForValidListAndQueue+0x48>)
 80067a0:	f002 fa60 	bl	8008c64 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80067a4:	4b0b      	ldr	r3, [pc, #44]	; (80067d4 <prvCheckForValidListAndQueue+0x4c>)
 80067a6:	4a09      	ldr	r2, [pc, #36]	; (80067cc <prvCheckForValidListAndQueue+0x44>)
 80067a8:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80067aa:	4b0b      	ldr	r3, [pc, #44]	; (80067d8 <prvCheckForValidListAndQueue+0x50>)
 80067ac:	4a08      	ldr	r2, [pc, #32]	; (80067d0 <prvCheckForValidListAndQueue+0x48>)
 80067ae:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80067b0:	2005      	movs	r0, #5
 80067b2:	210c      	movs	r1, #12
 80067b4:	2200      	movs	r2, #0
 80067b6:	f001 fda3 	bl	8008300 <xQueueGenericCreate>
 80067ba:	4602      	mov	r2, r0
 80067bc:	4b02      	ldr	r3, [pc, #8]	; (80067c8 <prvCheckForValidListAndQueue+0x40>)
 80067be:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80067c0:	f002 fba6 	bl	8008f10 <vPortExitCritical>
}
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	200000c4 	.word	0x200000c4
 80067cc:	20000094 	.word	0x20000094
 80067d0:	200000a8 	.word	0x200000a8
 80067d4:	200000bc 	.word	0x200000bc
 80067d8:	200000c0 	.word	0x200000c0

080067dc <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	60fb      	str	r3, [r7, #12]

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 80067e8:	f002 fb7a 	bl	8008ee0 <vPortEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	695b      	ldr	r3, [r3, #20]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	bf0c      	ite	eq
 80067f4:	2300      	moveq	r3, #0
 80067f6:	2301      	movne	r3, #1
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
 80067fc:	f002 fb88 	bl	8008f10 <vPortExitCritical>

	return xTimerIsInActiveList;
 8006800:	68bb      	ldr	r3, [r7, #8]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 8006802:	4618      	mov	r0, r3
 8006804:	3710      	adds	r7, #16
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop

0800680c <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	60fb      	str	r3, [r7, #12]

	return pxTimer->pvTimerID;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6a1b      	ldr	r3, [r3, #32]
}
 800681c:	4618      	mov	r0, r3
 800681e:	3714      	adds	r7, #20
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b08a      	sub	sp, #40	; 0x28
 800682c:	af02      	add	r7, sp, #8
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	603b      	str	r3, [r7, #0]
 8006834:	4613      	mov	r3, r2
 8006836:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 8006838:	88fb      	ldrh	r3, [r7, #6]
 800683a:	4618      	mov	r0, r3
 800683c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800683e:	f001 f8e5 	bl	8007a0c <prvAllocateTCBAndStack>
 8006842:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d065      	beq.n	8006916 <xTaskGenericCreate+0xee>
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800684e:	88fb      	ldrh	r3, [r7, #6]
 8006850:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006854:	3b01      	subs	r3, #1
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	4413      	add	r3, r2
 800685a:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	f023 0307 	bic.w	r3, r3, #7
 8006862:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 8006864:	88fb      	ldrh	r3, [r7, #6]
 8006866:	9300      	str	r3, [sp, #0]
 8006868:	69b8      	ldr	r0, [r7, #24]
 800686a:	68b9      	ldr	r1, [r7, #8]
 800686c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800686e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006870:	f000 ffcc 	bl	800780c <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006874:	6978      	ldr	r0, [r7, #20]
 8006876:	68f9      	ldr	r1, [r7, #12]
 8006878:	683a      	ldr	r2, [r7, #0]
 800687a:	f002 faa5 	bl	8008dc8 <pxPortInitialiseStack>
 800687e:	4602      	mov	r2, r0
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	601a      	str	r2, [r3, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 8006884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006886:	2b00      	cmp	r3, #0
 8006888:	d002      	beq.n	8006890 <xTaskGenericCreate+0x68>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800688a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688c:	69ba      	ldr	r2, [r7, #24]
 800688e:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
 8006890:	f002 fb26 	bl	8008ee0 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 8006894:	4b2e      	ldr	r3, [pc, #184]	; (8006950 <xTaskGenericCreate+0x128>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	1c5a      	adds	r2, r3, #1
 800689a:	4b2d      	ldr	r3, [pc, #180]	; (8006950 <xTaskGenericCreate+0x128>)
 800689c:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
 800689e:	4b2d      	ldr	r3, [pc, #180]	; (8006954 <xTaskGenericCreate+0x12c>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d109      	bne.n	80068ba <xTaskGenericCreate+0x92>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 80068a6:	4b2b      	ldr	r3, [pc, #172]	; (8006954 <xTaskGenericCreate+0x12c>)
 80068a8:	69ba      	ldr	r2, [r7, #24]
 80068aa:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80068ac:	4b28      	ldr	r3, [pc, #160]	; (8006950 <xTaskGenericCreate+0x128>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d10f      	bne.n	80068d4 <xTaskGenericCreate+0xac>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 80068b4:	f000 fffc 	bl	80078b0 <prvInitialiseTaskLists>
 80068b8:	e00c      	b.n	80068d4 <xTaskGenericCreate+0xac>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 80068ba:	4b27      	ldr	r3, [pc, #156]	; (8006958 <xTaskGenericCreate+0x130>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d108      	bne.n	80068d4 <xTaskGenericCreate+0xac>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 80068c2:	4b24      	ldr	r3, [pc, #144]	; (8006954 <xTaskGenericCreate+0x12c>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d802      	bhi.n	80068d4 <xTaskGenericCreate+0xac>
					{
						pxCurrentTCB = pxNewTCB;
 80068ce:	4b21      	ldr	r3, [pc, #132]	; (8006954 <xTaskGenericCreate+0x12c>)
 80068d0:	69ba      	ldr	r2, [r7, #24]
 80068d2:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 80068d4:	4b21      	ldr	r3, [pc, #132]	; (800695c <xTaskGenericCreate+0x134>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	1c5a      	adds	r2, r3, #1
 80068da:	4b20      	ldr	r3, [pc, #128]	; (800695c <xTaskGenericCreate+0x134>)
 80068dc:	601a      	str	r2, [r3, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e2:	2201      	movs	r2, #1
 80068e4:	409a      	lsls	r2, r3
 80068e6:	4b1e      	ldr	r3, [pc, #120]	; (8006960 <xTaskGenericCreate+0x138>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	431a      	orrs	r2, r3
 80068ec:	4b1c      	ldr	r3, [pc, #112]	; (8006960 <xTaskGenericCreate+0x138>)
 80068ee:	601a      	str	r2, [r3, #0]
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068f4:	4613      	mov	r3, r2
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	4413      	add	r3, r2
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	4a19      	ldr	r2, [pc, #100]	; (8006964 <xTaskGenericCreate+0x13c>)
 80068fe:	441a      	add	r2, r3
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	3304      	adds	r3, #4
 8006904:	4610      	mov	r0, r2
 8006906:	4619      	mov	r1, r3
 8006908:	f002 f9d8 	bl	8008cbc <vListInsertEnd>

			xReturn = pdPASS;
 800690c:	2301      	movs	r3, #1
 800690e:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 8006910:	f002 fafe 	bl	8008f10 <vPortExitCritical>
 8006914:	e002      	b.n	800691c <xTaskGenericCreate+0xf4>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006916:	f04f 33ff 	mov.w	r3, #4294967295
 800691a:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	2b01      	cmp	r3, #1
 8006920:	d111      	bne.n	8006946 <xTaskGenericCreate+0x11e>
	{
		if( xSchedulerRunning != pdFALSE )
 8006922:	4b0d      	ldr	r3, [pc, #52]	; (8006958 <xTaskGenericCreate+0x130>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d00d      	beq.n	8006946 <xTaskGenericCreate+0x11e>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 800692a:	4b0a      	ldr	r3, [pc, #40]	; (8006954 <xTaskGenericCreate+0x12c>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006932:	429a      	cmp	r2, r3
 8006934:	d207      	bcs.n	8006946 <xTaskGenericCreate+0x11e>
			{
				taskYIELD_IF_USING_PREEMPTION();
 8006936:	4b0c      	ldr	r3, [pc, #48]	; (8006968 <xTaskGenericCreate+0x140>)
 8006938:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800693c:	601a      	str	r2, [r3, #0]
 800693e:	f3bf 8f4f 	dsb	sy
 8006942:	f3bf 8f6f 	isb	sy
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
 8006946:	69fb      	ldr	r3, [r7, #28]
}
 8006948:	4618      	mov	r0, r3
 800694a:	3720      	adds	r7, #32
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}
 8006950:	200001a4 	.word	0x200001a4
 8006954:	200000cc 	.word	0x200000cc
 8006958:	200001b0 	.word	0x200001b0
 800695c:	200001c0 	.word	0x200001c0
 8006960:	200001ac 	.word	0x200001ac
 8006964:	200000d0 	.word	0x200000d0
 8006968:	e000ed04 	.word	0xe000ed04

0800696c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006974:	f002 fab4 	bl	8008ee0 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d102      	bne.n	8006984 <vTaskDelete+0x18>
 800697e:	4b2c      	ldr	r3, [pc, #176]	; (8006a30 <vTaskDelete+0xc4>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	e000      	b.n	8006986 <vTaskDelete+0x1a>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	3304      	adds	r3, #4
 800698c:	4618      	mov	r0, r3
 800698e:	f002 f9f1 	bl	8008d74 <uxListRemove>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d115      	bne.n	80069c4 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800699c:	4925      	ldr	r1, [pc, #148]	; (8006a34 <vTaskDelete+0xc8>)
 800699e:	4613      	mov	r3, r2
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	4413      	add	r3, r2
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	440b      	add	r3, r1
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d10a      	bne.n	80069c4 <vTaskDelete+0x58>
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b2:	2201      	movs	r2, #1
 80069b4:	fa02 f303 	lsl.w	r3, r2, r3
 80069b8:	43da      	mvns	r2, r3
 80069ba:	4b1f      	ldr	r3, [pc, #124]	; (8006a38 <vTaskDelete+0xcc>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	401a      	ands	r2, r3
 80069c0:	4b1d      	ldr	r3, [pc, #116]	; (8006a38 <vTaskDelete+0xcc>)
 80069c2:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d004      	beq.n	80069d6 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	3318      	adds	r3, #24
 80069d0:	4618      	mov	r0, r3
 80069d2:	f002 f9cf 	bl	8008d74 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	3304      	adds	r3, #4
 80069da:	4818      	ldr	r0, [pc, #96]	; (8006a3c <vTaskDelete+0xd0>)
 80069dc:	4619      	mov	r1, r3
 80069de:	f002 f96d 	bl	8008cbc <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
 80069e2:	4b17      	ldr	r3, [pc, #92]	; (8006a40 <vTaskDelete+0xd4>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	1c5a      	adds	r2, r3, #1
 80069e8:	4b15      	ldr	r3, [pc, #84]	; (8006a40 <vTaskDelete+0xd4>)
 80069ea:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
 80069ec:	4b15      	ldr	r3, [pc, #84]	; (8006a44 <vTaskDelete+0xd8>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	1c5a      	adds	r2, r3, #1
 80069f2:	4b14      	ldr	r3, [pc, #80]	; (8006a44 <vTaskDelete+0xd8>)
 80069f4:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 80069f6:	f002 fa8b 	bl	8008f10 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80069fa:	4b13      	ldr	r3, [pc, #76]	; (8006a48 <vTaskDelete+0xdc>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d013      	beq.n	8006a2a <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8006a02:	4b0b      	ldr	r3, [pc, #44]	; (8006a30 <vTaskDelete+0xc4>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d108      	bne.n	8006a1e <vTaskDelete+0xb2>
				in which Windows specific clean up operations are performed,
				after which it is not possible to yield away from this task -
				hence xYieldPending is used to latch that a context switch is
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
				portYIELD_WITHIN_API();
 8006a0c:	4b0f      	ldr	r3, [pc, #60]	; (8006a4c <vTaskDelete+0xe0>)
 8006a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a12:	601a      	str	r2, [r3, #0]
 8006a14:	f3bf 8f4f 	dsb	sy
 8006a18:	f3bf 8f6f 	isb	sy
 8006a1c:	e005      	b.n	8006a2a <vTaskDelete+0xbe>
			}
			else
			{
				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				taskENTER_CRITICAL();
 8006a1e:	f002 fa5f 	bl	8008ee0 <vPortEnterCritical>
				{
					prvResetNextTaskUnblockTime();
 8006a22:	f001 f83b 	bl	8007a9c <prvResetNextTaskUnblockTime>
				}
				taskEXIT_CRITICAL();
 8006a26:	f002 fa73 	bl	8008f10 <vPortExitCritical>
			}
		}
	}
 8006a2a:	3710      	adds	r7, #16
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	200000cc 	.word	0x200000cc
 8006a34:	200000d0 	.word	0x200000d0
 8006a38:	200001ac 	.word	0x200001ac
 8006a3c:	20000178 	.word	0x20000178
 8006a40:	2000018c 	.word	0x2000018c
 8006a44:	200001c0 	.word	0x200001c0
 8006a48:	200001b0 	.word	0x200001b0
 8006a4c:	e000ed04 	.word	0xe000ed04

08006a50 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b086      	sub	sp, #24
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );
		configASSERT( uxSchedulerSuspended == 0 );

		vTaskSuspendAll();
 8006a5e:	f000 fb25 	bl	80070ac <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8006a62:	4b29      	ldr	r3, [pc, #164]	; (8006b08 <vTaskDelayUntil+0xb8>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	4413      	add	r3, r2
 8006a70:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d90b      	bls.n	8006a94 <vTaskDelayUntil+0x44>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d911      	bls.n	8006aaa <vTaskDelayUntil+0x5a>
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d90d      	bls.n	8006aaa <vTaskDelayUntil+0x5a>
				{
					xShouldDelay = pdTRUE;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	617b      	str	r3, [r7, #20]
 8006a92:	e00a      	b.n	8006aaa <vTaskDelayUntil+0x5a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d803      	bhi.n	8006aa6 <vTaskDelayUntil+0x56>
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d901      	bls.n	8006aaa <vTaskDelayUntil+0x5a>
				{
					xShouldDelay = pdTRUE;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d017      	beq.n	8006ae6 <vTaskDelayUntil+0x96>
			{
				traceTASK_DELAY_UNTIL();

				/* Remove the task from the ready list before adding it to the
				blocked list as the same list item is used for both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8006ab6:	4b15      	ldr	r3, [pc, #84]	; (8006b0c <vTaskDelayUntil+0xbc>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	3304      	adds	r3, #4
 8006abc:	4618      	mov	r0, r3
 8006abe:	f002 f959 	bl	8008d74 <uxListRemove>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d10b      	bne.n	8006ae0 <vTaskDelayUntil+0x90>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006ac8:	4b10      	ldr	r3, [pc, #64]	; (8006b0c <vTaskDelayUntil+0xbc>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ace:	2201      	movs	r2, #1
 8006ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad4:	43da      	mvns	r2, r3
 8006ad6:	4b0e      	ldr	r3, [pc, #56]	; (8006b10 <vTaskDelayUntil+0xc0>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	401a      	ands	r2, r3
 8006adc:	4b0c      	ldr	r3, [pc, #48]	; (8006b10 <vTaskDelayUntil+0xc0>)
 8006ade:	601a      	str	r2, [r3, #0]
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8006ae0:	68f8      	ldr	r0, [r7, #12]
 8006ae2:	f000 ff5d 	bl	80079a0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8006ae6:	f000 faef 	bl	80070c8 <xTaskResumeAll>
 8006aea:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d107      	bne.n	8006b02 <vTaskDelayUntil+0xb2>
		{
			portYIELD_WITHIN_API();
 8006af2:	4b08      	ldr	r3, [pc, #32]	; (8006b14 <vTaskDelayUntil+0xc4>)
 8006af4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006af8:	601a      	str	r2, [r3, #0]
 8006afa:	f3bf 8f4f 	dsb	sy
 8006afe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006b02:	3718      	adds	r7, #24
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	200001a8 	.word	0x200001a8
 8006b0c:	200000cc 	.word	0x200000cc
 8006b10:	200001ac 	.word	0x200001ac
 8006b14:	e000ed04 	.word	0xe000ed04

08006b18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;
 8006b20:	2300      	movs	r3, #0
 8006b22:	60fb      	str	r3, [r7, #12]


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d021      	beq.n	8006b6e <vTaskDelay+0x56>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 8006b2a:	f000 fabf 	bl	80070ac <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 8006b2e:	4b17      	ldr	r3, [pc, #92]	; (8006b8c <vTaskDelay+0x74>)
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4413      	add	r3, r2
 8006b36:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8006b38:	4b15      	ldr	r3, [pc, #84]	; (8006b90 <vTaskDelay+0x78>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	3304      	adds	r3, #4
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f002 f918 	bl	8008d74 <uxListRemove>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d10b      	bne.n	8006b62 <vTaskDelay+0x4a>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006b4a:	4b11      	ldr	r3, [pc, #68]	; (8006b90 <vTaskDelay+0x78>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b50:	2201      	movs	r2, #1
 8006b52:	fa02 f303 	lsl.w	r3, r2, r3
 8006b56:	43da      	mvns	r2, r3
 8006b58:	4b0e      	ldr	r3, [pc, #56]	; (8006b94 <vTaskDelay+0x7c>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	401a      	ands	r2, r3
 8006b5e:	4b0d      	ldr	r3, [pc, #52]	; (8006b94 <vTaskDelay+0x7c>)
 8006b60:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8006b62:	68b8      	ldr	r0, [r7, #8]
 8006b64:	f000 ff1c 	bl	80079a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006b68:	f000 faae 	bl	80070c8 <xTaskResumeAll>
 8006b6c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d107      	bne.n	8006b84 <vTaskDelay+0x6c>
		{
			portYIELD_WITHIN_API();
 8006b74:	4b08      	ldr	r3, [pc, #32]	; (8006b98 <vTaskDelay+0x80>)
 8006b76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b7a:	601a      	str	r2, [r3, #0]
 8006b7c:	f3bf 8f4f 	dsb	sy
 8006b80:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006b84:	3710      	adds	r7, #16
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	200001a8 	.word	0x200001a8
 8006b90:	200000cc 	.word	0x200000cc
 8006b94:	200001ac 	.word	0x200001ac
 8006b98:	e000ed04 	.word	0xe000ed04

08006b9c <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 8006ba4:	f002 f99c 	bl	8008ee0 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d102      	bne.n	8006bb4 <uxTaskPriorityGet+0x18>
 8006bae:	4b07      	ldr	r3, [pc, #28]	; (8006bcc <uxTaskPriorityGet+0x30>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	e000      	b.n	8006bb6 <uxTaskPriorityGet+0x1a>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bbc:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
 8006bbe:	f002 f9a7 	bl	8008f10 <vPortExitCritical>

		return uxReturn;
 8006bc2:	68bb      	ldr	r3, [r7, #8]
	}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3710      	adds	r7, #16
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	200000cc 	.word	0x200000cc

08006bd0 <uxTaskPriorityGetFromISR>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
	{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b089      	sub	sp, #36	; 0x24
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006bd8:	f3ef 8211 	mrs	r2, BASEPRI
 8006bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be0:	f383 8811 	msr	BASEPRI, r3
 8006be4:	f3bf 8f6f 	isb	sy
 8006be8:	f3bf 8f4f 	dsb	sy
 8006bec:	613a      	str	r2, [r7, #16]
 8006bee:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006bf0:	693b      	ldr	r3, [r7, #16]
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 8006bf2:	61fb      	str	r3, [r7, #28]
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d102      	bne.n	8006c00 <uxTaskPriorityGetFromISR+0x30>
 8006bfa:	4b0a      	ldr	r3, [pc, #40]	; (8006c24 <uxTaskPriorityGetFromISR+0x54>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	e000      	b.n	8006c02 <uxTaskPriorityGetFromISR+0x32>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	61bb      	str	r3, [r7, #24]
			uxReturn = pxTCB->uxPriority;
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c08:	617b      	str	r3, [r7, #20]
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	f383 8811 	msr	BASEPRI, r3
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );

		return uxReturn;
 8006c14:	697b      	ldr	r3, [r7, #20]
	}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3724      	adds	r7, #36	; 0x24
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr
 8006c22:	bf00      	nop
 8006c24:	200000cc 	.word	0x200000cc

08006c28 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b086      	sub	sp, #24
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8006c32:	2300      	movs	r3, #0
 8006c34:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	2b04      	cmp	r3, #4
 8006c3a:	d901      	bls.n	8006c40 <vTaskPrioritySet+0x18>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006c3c:	2304      	movs	r3, #4
 8006c3e:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8006c40:	f002 f94e 	bl	8008ee0 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d102      	bne.n	8006c50 <vTaskPrioritySet+0x28>
 8006c4a:	4b43      	ldr	r3, [pc, #268]	; (8006d58 <vTaskPrioritySet+0x130>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	e000      	b.n	8006c52 <vTaskPrioritySet+0x2a>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c58:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d074      	beq.n	8006d4c <vTaskPrioritySet+0x124>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8006c62:	683a      	ldr	r2, [r7, #0]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d90d      	bls.n	8006c86 <vTaskPrioritySet+0x5e>
				{
					if( pxTCB != pxCurrentTCB )
 8006c6a:	4b3b      	ldr	r3, [pc, #236]	; (8006d58 <vTaskPrioritySet+0x130>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	693a      	ldr	r2, [r7, #16]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d00f      	beq.n	8006c94 <vTaskPrioritySet+0x6c>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8006c74:	4b38      	ldr	r3, [pc, #224]	; (8006d58 <vTaskPrioritySet+0x130>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d809      	bhi.n	8006c94 <vTaskPrioritySet+0x6c>
						{
							xYieldRequired = pdTRUE;
 8006c80:	2301      	movs	r3, #1
 8006c82:	617b      	str	r3, [r7, #20]
 8006c84:	e006      	b.n	8006c94 <vTaskPrioritySet+0x6c>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8006c86:	4b34      	ldr	r3, [pc, #208]	; (8006d58 <vTaskPrioritySet+0x130>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	693a      	ldr	r2, [r7, #16]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d101      	bne.n	8006c94 <vTaskPrioritySet+0x6c>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8006c90:	2301      	movs	r3, #1
 8006c92:	617b      	str	r3, [r7, #20]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c98:	60bb      	str	r3, [r7, #8]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d102      	bne.n	8006cac <vTaskPrioritySet+0x84>
					{
						pxTCB->uxPriority = uxNewPriority;
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	683a      	ldr	r2, [r7, #0]
 8006caa:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	683a      	ldr	r2, [r7, #0]
 8006cb0:	641a      	str	r2, [r3, #64]	; 0x40
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	699b      	ldr	r3, [r3, #24]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	db04      	blt.n	8006cc4 <vTaskPrioritySet+0x9c>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	f1c3 0205 	rsb	r2, r3, #5
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	6959      	ldr	r1, [r3, #20]
 8006cc8:	68ba      	ldr	r2, [r7, #8]
 8006cca:	4613      	mov	r3, r2
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	4413      	add	r3, r2
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	4a22      	ldr	r2, [pc, #136]	; (8006d5c <vTaskPrioritySet+0x134>)
 8006cd4:	4413      	add	r3, r2
 8006cd6:	4299      	cmp	r1, r3
 8006cd8:	d101      	bne.n	8006cde <vTaskPrioritySet+0xb6>
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e000      	b.n	8006ce0 <vTaskPrioritySet+0xb8>
 8006cde:	2300      	movs	r3, #0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d028      	beq.n	8006d36 <vTaskPrioritySet+0x10e>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	3304      	adds	r3, #4
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f002 f843 	bl	8008d74 <uxListRemove>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d109      	bne.n	8006d08 <vTaskPrioritySet+0xe0>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cfc:	43da      	mvns	r2, r3
 8006cfe:	4b18      	ldr	r3, [pc, #96]	; (8006d60 <vTaskPrioritySet+0x138>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	401a      	ands	r2, r3
 8006d04:	4b16      	ldr	r3, [pc, #88]	; (8006d60 <vTaskPrioritySet+0x138>)
 8006d06:	601a      	str	r2, [r3, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	409a      	lsls	r2, r3
 8006d10:	4b13      	ldr	r3, [pc, #76]	; (8006d60 <vTaskPrioritySet+0x138>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	431a      	orrs	r2, r3
 8006d16:	4b12      	ldr	r3, [pc, #72]	; (8006d60 <vTaskPrioritySet+0x138>)
 8006d18:	601a      	str	r2, [r3, #0]
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d1e:	4613      	mov	r3, r2
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	4413      	add	r3, r2
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	4a0d      	ldr	r2, [pc, #52]	; (8006d5c <vTaskPrioritySet+0x134>)
 8006d28:	441a      	add	r2, r3
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	3304      	adds	r3, #4
 8006d2e:	4610      	mov	r0, r2
 8006d30:	4619      	mov	r1, r3
 8006d32:	f001 ffc3 	bl	8008cbc <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired == pdTRUE )
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d107      	bne.n	8006d4c <vTaskPrioritySet+0x124>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8006d3c:	4b09      	ldr	r3, [pc, #36]	; (8006d64 <vTaskPrioritySet+0x13c>)
 8006d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d42:	601a      	str	r2, [r3, #0]
 8006d44:	f3bf 8f4f 	dsb	sy
 8006d48:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8006d4c:	f002 f8e0 	bl	8008f10 <vPortExitCritical>
	}
 8006d50:	3718      	adds	r7, #24
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	200000cc 	.word	0x200000cc
 8006d5c:	200000d0 	.word	0x200000d0
 8006d60:	200001ac 	.word	0x200001ac
 8006d64:	e000ed04 	.word	0xe000ed04

08006d68 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b084      	sub	sp, #16
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006d70:	f002 f8b6 	bl	8008ee0 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d102      	bne.n	8006d80 <vTaskSuspend+0x18>
 8006d7a:	4b30      	ldr	r3, [pc, #192]	; (8006e3c <vTaskSuspend+0xd4>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	e000      	b.n	8006d82 <vTaskSuspend+0x1a>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	3304      	adds	r3, #4
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f001 fff3 	bl	8008d74 <uxListRemove>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d115      	bne.n	8006dc0 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d98:	4929      	ldr	r1, [pc, #164]	; (8006e40 <vTaskSuspend+0xd8>)
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	4413      	add	r3, r2
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	440b      	add	r3, r1
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d10a      	bne.n	8006dc0 <vTaskSuspend+0x58>
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dae:	2201      	movs	r2, #1
 8006db0:	fa02 f303 	lsl.w	r3, r2, r3
 8006db4:	43da      	mvns	r2, r3
 8006db6:	4b23      	ldr	r3, [pc, #140]	; (8006e44 <vTaskSuspend+0xdc>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	401a      	ands	r2, r3
 8006dbc:	4b21      	ldr	r3, [pc, #132]	; (8006e44 <vTaskSuspend+0xdc>)
 8006dbe:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d004      	beq.n	8006dd2 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	3318      	adds	r3, #24
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f001 ffd1 	bl	8008d74 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	3304      	adds	r3, #4
 8006dd6:	481c      	ldr	r0, [pc, #112]	; (8006e48 <vTaskSuspend+0xe0>)
 8006dd8:	4619      	mov	r1, r3
 8006dda:	f001 ff6f 	bl	8008cbc <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
 8006dde:	f002 f897 	bl	8008f10 <vPortExitCritical>

		if( pxTCB == pxCurrentTCB )
 8006de2:	4b16      	ldr	r3, [pc, #88]	; (8006e3c <vTaskSuspend+0xd4>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	68fa      	ldr	r2, [r7, #12]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d119      	bne.n	8006e20 <vTaskSuspend+0xb8>
		{
			if( xSchedulerRunning != pdFALSE )
 8006dec:	4b17      	ldr	r3, [pc, #92]	; (8006e4c <vTaskSuspend+0xe4>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d008      	beq.n	8006e06 <vTaskSuspend+0x9e>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
 8006df4:	4b16      	ldr	r3, [pc, #88]	; (8006e50 <vTaskSuspend+0xe8>)
 8006df6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dfa:	601a      	str	r2, [r3, #0]
 8006dfc:	f3bf 8f4f 	dsb	sy
 8006e00:	f3bf 8f6f 	isb	sy
 8006e04:	e016      	b.n	8006e34 <vTaskSuspend+0xcc>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8006e06:	4b10      	ldr	r3, [pc, #64]	; (8006e48 <vTaskSuspend+0xe0>)
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	4b12      	ldr	r3, [pc, #72]	; (8006e54 <vTaskSuspend+0xec>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d103      	bne.n	8006e1a <vTaskSuspend+0xb2>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
 8006e12:	4b0a      	ldr	r3, [pc, #40]	; (8006e3c <vTaskSuspend+0xd4>)
 8006e14:	2200      	movs	r2, #0
 8006e16:	601a      	str	r2, [r3, #0]
 8006e18:	e00c      	b.n	8006e34 <vTaskSuspend+0xcc>
				}
				else
				{
					vTaskSwitchContext();
 8006e1a:	f000 fab7 	bl	800738c <vTaskSwitchContext>
 8006e1e:	e009      	b.n	8006e34 <vTaskSuspend+0xcc>
				}
			}
		}
		else
		{
			if( xSchedulerRunning != pdFALSE )
 8006e20:	4b0a      	ldr	r3, [pc, #40]	; (8006e4c <vTaskSuspend+0xe4>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d005      	beq.n	8006e34 <vTaskSuspend+0xcc>
			{
				/* A task other than the currently running task was suspended,
				reset the next expected unblock time in case it referred to the
				task that is now in the Suspended state. */
				taskENTER_CRITICAL();
 8006e28:	f002 f85a 	bl	8008ee0 <vPortEnterCritical>
				{
					prvResetNextTaskUnblockTime();
 8006e2c:	f000 fe36 	bl	8007a9c <prvResetNextTaskUnblockTime>
				}
				taskEXIT_CRITICAL();
 8006e30:	f002 f86e 	bl	8008f10 <vPortExitCritical>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006e34:	3710      	adds	r7, #16
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	200000cc 	.word	0x200000cc
 8006e40:	200000d0 	.word	0x200000d0
 8006e44:	200001ac 	.word	0x200001ac
 8006e48:	20000190 	.word	0x20000190
 8006e4c:	200001b0 	.word	0x200001b0
 8006e50:	e000ed04 	.word	0xe000ed04
 8006e54:	200001a4 	.word	0x200001a4

08006e58 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8006e58:	b480      	push	{r7}
 8006e5a:	b085      	sub	sp, #20
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8006e60:	2300      	movs	r3, #0
 8006e62:	60fb      	str	r3, [r7, #12]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	60bb      	str	r3, [r7, #8]

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	695a      	ldr	r2, [r3, #20]
 8006e6c:	4b0f      	ldr	r3, [pc, #60]	; (8006eac <prvTaskIsTaskSuspended+0x54>)
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d101      	bne.n	8006e76 <prvTaskIsTaskSuspended+0x1e>
 8006e72:	2301      	movs	r3, #1
 8006e74:	e000      	b.n	8006e78 <prvTaskIsTaskSuspended+0x20>
 8006e76:	2300      	movs	r3, #0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d00f      	beq.n	8006e9c <prvTaskIsTaskSuspended+0x44>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e80:	4b0b      	ldr	r3, [pc, #44]	; (8006eb0 <prvTaskIsTaskSuspended+0x58>)
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d00a      	beq.n	8006e9c <prvTaskIsTaskSuspended+0x44>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d101      	bne.n	8006e92 <prvTaskIsTaskSuspended+0x3a>
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e000      	b.n	8006e94 <prvTaskIsTaskSuspended+0x3c>
 8006e92:	2300      	movs	r3, #0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d001      	beq.n	8006e9c <prvTaskIsTaskSuspended+0x44>
				{
					xReturn = pdTRUE;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3714      	adds	r7, #20
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr
 8006eaa:	bf00      	nop
 8006eac:	20000190 	.word	0x20000190
 8006eb0:	20000164 	.word	0x20000164

08006eb4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	60fb      	str	r3, [r7, #12]
		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d039      	beq.n	8006f3a <vTaskResume+0x86>
 8006ec6:	4b1e      	ldr	r3, [pc, #120]	; (8006f40 <vTaskResume+0x8c>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d034      	beq.n	8006f3a <vTaskResume+0x86>
		{
			taskENTER_CRITICAL();
 8006ed0:	f002 f806 	bl	8008ee0 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f7ff ffbf 	bl	8006e58 <prvTaskIsTaskSuspended>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d12a      	bne.n	8006f36 <vTaskResume+0x82>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	3304      	adds	r3, #4
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f001 ff45 	bl	8008d74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eee:	2201      	movs	r2, #1
 8006ef0:	409a      	lsls	r2, r3
 8006ef2:	4b14      	ldr	r3, [pc, #80]	; (8006f44 <vTaskResume+0x90>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	431a      	orrs	r2, r3
 8006ef8:	4b12      	ldr	r3, [pc, #72]	; (8006f44 <vTaskResume+0x90>)
 8006efa:	601a      	str	r2, [r3, #0]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f00:	4613      	mov	r3, r2
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	4413      	add	r3, r2
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	4a0f      	ldr	r2, [pc, #60]	; (8006f48 <vTaskResume+0x94>)
 8006f0a:	441a      	add	r2, r3
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	3304      	adds	r3, #4
 8006f10:	4610      	mov	r0, r2
 8006f12:	4619      	mov	r1, r3
 8006f14:	f001 fed2 	bl	8008cbc <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f1c:	4b08      	ldr	r3, [pc, #32]	; (8006f40 <vTaskResume+0x8c>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d307      	bcc.n	8006f36 <vTaskResume+0x82>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8006f26:	4b09      	ldr	r3, [pc, #36]	; (8006f4c <vTaskResume+0x98>)
 8006f28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f2c:	601a      	str	r2, [r3, #0]
 8006f2e:	f3bf 8f4f 	dsb	sy
 8006f32:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8006f36:	f001 ffeb 	bl	8008f10 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f3a:	3710      	adds	r7, #16
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	200000cc 	.word	0x200000cc
 8006f44:	200001ac 	.word	0x200001ac
 8006f48:	200000d0 	.word	0x200000d0
 8006f4c:	e000ed04 	.word	0xe000ed04

08006f50 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b088      	sub	sp, #32
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	61fb      	str	r3, [r7, #28]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	61bb      	str	r3, [r7, #24]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006f60:	f3ef 8211 	mrs	r2, BASEPRI
 8006f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f68:	f383 8811 	msr	BASEPRI, r3
 8006f6c:	f3bf 8f6f 	isb	sy
 8006f70:	f3bf 8f4f 	dsb	sy
 8006f74:	613a      	str	r2, [r7, #16]
 8006f76:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006f78:	693b      	ldr	r3, [r7, #16]
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f7a:	617b      	str	r3, [r7, #20]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 8006f7c:	69b8      	ldr	r0, [r7, #24]
 8006f7e:	f7ff ff6b 	bl	8006e58 <prvTaskIsTaskSuspended>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d12f      	bne.n	8006fe8 <xTaskResumeFromISR+0x98>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f88:	4b1c      	ldr	r3, [pc, #112]	; (8006ffc <xTaskResumeFromISR+0xac>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d125      	bne.n	8006fdc <xTaskResumeFromISR+0x8c>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f94:	4b1a      	ldr	r3, [pc, #104]	; (8007000 <xTaskResumeFromISR+0xb0>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d301      	bcc.n	8006fa2 <xTaskResumeFromISR+0x52>
					{
						xYieldRequired = pdTRUE;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	61fb      	str	r3, [r7, #28]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	3304      	adds	r3, #4
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f001 fee4 	bl	8008d74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	409a      	lsls	r2, r3
 8006fb4:	4b13      	ldr	r3, [pc, #76]	; (8007004 <xTaskResumeFromISR+0xb4>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	431a      	orrs	r2, r3
 8006fba:	4b12      	ldr	r3, [pc, #72]	; (8007004 <xTaskResumeFromISR+0xb4>)
 8006fbc:	601a      	str	r2, [r3, #0]
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	4413      	add	r3, r2
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	4a0f      	ldr	r2, [pc, #60]	; (8007008 <xTaskResumeFromISR+0xb8>)
 8006fcc:	441a      	add	r2, r3
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	3304      	adds	r3, #4
 8006fd2:	4610      	mov	r0, r2
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	f001 fe71 	bl	8008cbc <vListInsertEnd>
 8006fda:	e005      	b.n	8006fe8 <xTaskResumeFromISR+0x98>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006fdc:	69bb      	ldr	r3, [r7, #24]
 8006fde:	3318      	adds	r3, #24
 8006fe0:	480a      	ldr	r0, [pc, #40]	; (800700c <xTaskResumeFromISR+0xbc>)
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	f001 fe6a 	bl	8008cbc <vListInsertEnd>
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	f383 8811 	msr	BASEPRI, r3
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8006ff2:	69fb      	ldr	r3, [r7, #28]
	}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3720      	adds	r7, #32
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	200001c4 	.word	0x200001c4
 8007000:	200000cc 	.word	0x200000cc
 8007004:	200001ac 	.word	0x200001ac
 8007008:	200000d0 	.word	0x200000d0
 800700c:	20000164 	.word	0x20000164

08007010 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b086      	sub	sp, #24
 8007014:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 8007016:	2300      	movs	r3, #0
 8007018:	9300      	str	r3, [sp, #0]
 800701a:	2300      	movs	r3, #0
 800701c:	9301      	str	r3, [sp, #4]
 800701e:	2300      	movs	r3, #0
 8007020:	9302      	str	r3, [sp, #8]
 8007022:	2300      	movs	r3, #0
 8007024:	9303      	str	r3, [sp, #12]
 8007026:	4812      	ldr	r0, [pc, #72]	; (8007070 <vTaskStartScheduler+0x60>)
 8007028:	4912      	ldr	r1, [pc, #72]	; (8007074 <vTaskStartScheduler+0x64>)
 800702a:	2246      	movs	r2, #70	; 0x46
 800702c:	2300      	movs	r3, #0
 800702e:	f7ff fbfb 	bl	8006828 <xTaskGenericCreate>
 8007032:	6078      	str	r0, [r7, #4]
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2b01      	cmp	r3, #1
 8007038:	d102      	bne.n	8007040 <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
 800703a:	f7ff f927 	bl	800628c <xTimerCreateTimerTask>
 800703e:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2b01      	cmp	r3, #1
 8007044:	d110      	bne.n	8007068 <vTaskStartScheduler+0x58>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800704a:	f383 8811 	msr	BASEPRI, r3
 800704e:	f3bf 8f6f 	isb	sy
 8007052:	f3bf 8f4f 	dsb	sy
 8007056:	603b      	str	r3, [r7, #0]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
 8007058:	4b07      	ldr	r3, [pc, #28]	; (8007078 <vTaskStartScheduler+0x68>)
 800705a:	2201      	movs	r2, #1
 800705c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800705e:	4b07      	ldr	r3, [pc, #28]	; (800707c <vTaskStartScheduler+0x6c>)
 8007060:	2200      	movs	r2, #0
 8007062:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007064:	f001 ff0e 	bl	8008e84 <xPortStartScheduler>
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
 8007068:	3708      	adds	r7, #8
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	080077d9 	.word	0x080077d9
 8007074:	080094e0 	.word	0x080094e0
 8007078:	200001b0 	.word	0x200001b0
 800707c:	200001a8 	.word	0x200001a8

08007080 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b082      	sub	sp, #8
 8007084:	af00      	add	r7, sp, #0
 8007086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800708a:	f383 8811 	msr	BASEPRI, r3
 800708e:	f3bf 8f6f 	isb	sy
 8007092:	f3bf 8f4f 	dsb	sy
 8007096:	607b      	str	r3, [r7, #4]
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
	xSchedulerRunning = pdFALSE;
 8007098:	4b03      	ldr	r3, [pc, #12]	; (80070a8 <vTaskEndScheduler+0x28>)
 800709a:	2200      	movs	r2, #0
 800709c:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
 800709e:	f001 ff19 	bl	8008ed4 <vPortEndScheduler>
}
 80070a2:	3708      	adds	r7, #8
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	200001b0 	.word	0x200001b0

080070ac <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80070ac:	b480      	push	{r7}
 80070ae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80070b0:	4b04      	ldr	r3, [pc, #16]	; (80070c4 <vTaskSuspendAll+0x18>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	1c5a      	adds	r2, r3, #1
 80070b6:	4b03      	ldr	r3, [pc, #12]	; (80070c4 <vTaskSuspendAll+0x18>)
 80070b8:	601a      	str	r2, [r3, #0]
}
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	200001c4 	.word	0x200001c4

080070c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
 80070ce:	2300      	movs	r3, #0
 80070d0:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80070d2:	f001 ff05 	bl	8008ee0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80070d6:	4b36      	ldr	r3, [pc, #216]	; (80071b0 <xTaskResumeAll+0xe8>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	1e5a      	subs	r2, r3, #1
 80070dc:	4b34      	ldr	r3, [pc, #208]	; (80071b0 <xTaskResumeAll+0xe8>)
 80070de:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070e0:	4b33      	ldr	r3, [pc, #204]	; (80071b0 <xTaskResumeAll+0xe8>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d15b      	bne.n	80071a0 <xTaskResumeAll+0xd8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80070e8:	4b32      	ldr	r3, [pc, #200]	; (80071b4 <xTaskResumeAll+0xec>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d057      	beq.n	80071a0 <xTaskResumeAll+0xd8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80070f0:	e02e      	b.n	8007150 <xTaskResumeAll+0x88>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80070f2:	4b31      	ldr	r3, [pc, #196]	; (80071b8 <xTaskResumeAll+0xf0>)
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	3318      	adds	r3, #24
 80070fe:	4618      	mov	r0, r3
 8007100:	f001 fe38 	bl	8008d74 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	3304      	adds	r3, #4
 8007108:	4618      	mov	r0, r3
 800710a:	f001 fe33 	bl	8008d74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007112:	2201      	movs	r2, #1
 8007114:	409a      	lsls	r2, r3
 8007116:	4b29      	ldr	r3, [pc, #164]	; (80071bc <xTaskResumeAll+0xf4>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	431a      	orrs	r2, r3
 800711c:	4b27      	ldr	r3, [pc, #156]	; (80071bc <xTaskResumeAll+0xf4>)
 800711e:	601a      	str	r2, [r3, #0]
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007124:	4613      	mov	r3, r2
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	4413      	add	r3, r2
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	4a24      	ldr	r2, [pc, #144]	; (80071c0 <xTaskResumeAll+0xf8>)
 800712e:	441a      	add	r2, r3
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	3304      	adds	r3, #4
 8007134:	4610      	mov	r0, r2
 8007136:	4619      	mov	r1, r3
 8007138:	f001 fdc0 	bl	8008cbc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007140:	4b20      	ldr	r3, [pc, #128]	; (80071c4 <xTaskResumeAll+0xfc>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007146:	429a      	cmp	r2, r3
 8007148:	d302      	bcc.n	8007150 <xTaskResumeAll+0x88>
					{
						xYieldPending = pdTRUE;
 800714a:	4b1f      	ldr	r3, [pc, #124]	; (80071c8 <xTaskResumeAll+0x100>)
 800714c:	2201      	movs	r2, #1
 800714e:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007150:	4b19      	ldr	r3, [pc, #100]	; (80071b8 <xTaskResumeAll+0xf0>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d1cc      	bne.n	80070f2 <xTaskResumeAll+0x2a>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 8007158:	4b1c      	ldr	r3, [pc, #112]	; (80071cc <xTaskResumeAll+0x104>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d011      	beq.n	8007184 <xTaskResumeAll+0xbc>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 8007160:	e00c      	b.n	800717c <xTaskResumeAll+0xb4>
					{
						if( xTaskIncrementTick() != pdFALSE )
 8007162:	f000 f865 	bl	8007230 <xTaskIncrementTick>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d002      	beq.n	8007172 <xTaskResumeAll+0xaa>
						{
							xYieldPending = pdTRUE;
 800716c:	4b16      	ldr	r3, [pc, #88]	; (80071c8 <xTaskResumeAll+0x100>)
 800716e:	2201      	movs	r2, #1
 8007170:	601a      	str	r2, [r3, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
 8007172:	4b16      	ldr	r3, [pc, #88]	; (80071cc <xTaskResumeAll+0x104>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	1e5a      	subs	r2, r3, #1
 8007178:	4b14      	ldr	r3, [pc, #80]	; (80071cc <xTaskResumeAll+0x104>)
 800717a:	601a      	str	r2, [r3, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800717c:	4b13      	ldr	r3, [pc, #76]	; (80071cc <xTaskResumeAll+0x104>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d1ee      	bne.n	8007162 <xTaskResumeAll+0x9a>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
 8007184:	4b10      	ldr	r3, [pc, #64]	; (80071c8 <xTaskResumeAll+0x100>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	2b01      	cmp	r3, #1
 800718a:	d109      	bne.n	80071a0 <xTaskResumeAll+0xd8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800718c:	2301      	movs	r3, #1
 800718e:	607b      	str	r3, [r7, #4]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007190:	4b0f      	ldr	r3, [pc, #60]	; (80071d0 <xTaskResumeAll+0x108>)
 8007192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007196:	601a      	str	r2, [r3, #0]
 8007198:	f3bf 8f4f 	dsb	sy
 800719c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80071a0:	f001 feb6 	bl	8008f10 <vPortExitCritical>

	return xAlreadyYielded;
 80071a4:	687b      	ldr	r3, [r7, #4]
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3708      	adds	r7, #8
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop
 80071b0:	200001c4 	.word	0x200001c4
 80071b4:	200001a4 	.word	0x200001a4
 80071b8:	20000164 	.word	0x20000164
 80071bc:	200001ac 	.word	0x200001ac
 80071c0:	200000d0 	.word	0x200000d0
 80071c4:	200000cc 	.word	0x200000cc
 80071c8:	200001b8 	.word	0x200001b8
 80071cc:	200001b4 	.word	0x200001b4
 80071d0:	e000ed04 	.word	0xe000ed04

080071d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80071d4:	b480      	push	{r7}
 80071d6:	b083      	sub	sp, #12
 80071d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80071da:	4b05      	ldr	r3, [pc, #20]	; (80071f0 <xTaskGetTickCount+0x1c>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80071e0:	687b      	ldr	r3, [r7, #4]
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	370c      	adds	r7, #12
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr
 80071ee:	bf00      	nop
 80071f0:	200001a8 	.word	0x200001a8

080071f4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80071fa:	2300      	movs	r3, #0
 80071fc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80071fe:	4b05      	ldr	r3, [pc, #20]	; (8007214 <xTaskGetTickCountFromISR+0x20>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007204:	683b      	ldr	r3, [r7, #0]
}
 8007206:	4618      	mov	r0, r3
 8007208:	370c      	adds	r7, #12
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop
 8007214:	200001a8 	.word	0x200001a8

08007218 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8007218:	b480      	push	{r7}
 800721a:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
 800721c:	4b03      	ldr	r3, [pc, #12]	; (800722c <uxTaskGetNumberOfTasks+0x14>)
 800721e:	681b      	ldr	r3, [r3, #0]
}
 8007220:	4618      	mov	r0, r3
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop
 800722c:	200001a4 	.word	0x200001a4

08007230 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b086      	sub	sp, #24
 8007234:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007236:	2300      	movs	r3, #0
 8007238:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800723a:	4b49      	ldr	r3, [pc, #292]	; (8007360 <xTaskIncrementTick+0x130>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d17d      	bne.n	800733e <xTaskIncrementTick+0x10e>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 8007242:	4b48      	ldr	r3, [pc, #288]	; (8007364 <xTaskIncrementTick+0x134>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	1c5a      	adds	r2, r3, #1
 8007248:	4b46      	ldr	r3, [pc, #280]	; (8007364 <xTaskIncrementTick+0x134>)
 800724a:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800724c:	4b45      	ldr	r3, [pc, #276]	; (8007364 <xTaskIncrementTick+0x134>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	613b      	str	r3, [r7, #16]

			if( xConstTickCount == ( TickType_t ) 0U )
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d110      	bne.n	800727a <xTaskIncrementTick+0x4a>
			{
				taskSWITCH_DELAYED_LISTS();
 8007258:	4b43      	ldr	r3, [pc, #268]	; (8007368 <xTaskIncrementTick+0x138>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	60fb      	str	r3, [r7, #12]
 800725e:	4b43      	ldr	r3, [pc, #268]	; (800736c <xTaskIncrementTick+0x13c>)
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	4b41      	ldr	r3, [pc, #260]	; (8007368 <xTaskIncrementTick+0x138>)
 8007264:	601a      	str	r2, [r3, #0]
 8007266:	4b41      	ldr	r3, [pc, #260]	; (800736c <xTaskIncrementTick+0x13c>)
 8007268:	68fa      	ldr	r2, [r7, #12]
 800726a:	601a      	str	r2, [r3, #0]
 800726c:	4b40      	ldr	r3, [pc, #256]	; (8007370 <xTaskIncrementTick+0x140>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	1c5a      	adds	r2, r3, #1
 8007272:	4b3f      	ldr	r3, [pc, #252]	; (8007370 <xTaskIncrementTick+0x140>)
 8007274:	601a      	str	r2, [r3, #0]
 8007276:	f000 fc11 	bl	8007a9c <prvResetNextTaskUnblockTime>

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 800727a:	4b3e      	ldr	r3, [pc, #248]	; (8007374 <xTaskIncrementTick+0x144>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	693a      	ldr	r2, [r7, #16]
 8007280:	429a      	cmp	r2, r3
 8007282:	d34d      	bcc.n	8007320 <xTaskIncrementTick+0xf0>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007284:	4b38      	ldr	r3, [pc, #224]	; (8007368 <xTaskIncrementTick+0x138>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d101      	bne.n	8007292 <xTaskIncrementTick+0x62>
 800728e:	2301      	movs	r3, #1
 8007290:	e000      	b.n	8007294 <xTaskIncrementTick+0x64>
 8007292:	2300      	movs	r3, #0
 8007294:	2b00      	cmp	r3, #0
 8007296:	d004      	beq.n	80072a2 <xTaskIncrementTick+0x72>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 8007298:	4b36      	ldr	r3, [pc, #216]	; (8007374 <xTaskIncrementTick+0x144>)
 800729a:	f04f 32ff 	mov.w	r2, #4294967295
 800729e:	601a      	str	r2, [r3, #0]
						break;
 80072a0:	e03e      	b.n	8007320 <xTaskIncrementTick+0xf0>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80072a2:	4b31      	ldr	r3, [pc, #196]	; (8007368 <xTaskIncrementTick+0x138>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	60bb      	str	r3, [r7, #8]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	607b      	str	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
 80072b2:	693a      	ldr	r2, [r7, #16]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d203      	bcs.n	80072c2 <xTaskIncrementTick+0x92>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
 80072ba:	4b2e      	ldr	r3, [pc, #184]	; (8007374 <xTaskIncrementTick+0x144>)
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	601a      	str	r2, [r3, #0]
							break;
 80072c0:	e02e      	b.n	8007320 <xTaskIncrementTick+0xf0>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	3304      	adds	r3, #4
 80072c6:	4618      	mov	r0, r3
 80072c8:	f001 fd54 	bl	8008d74 <uxListRemove>

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d004      	beq.n	80072de <xTaskIncrementTick+0xae>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	3318      	adds	r3, #24
 80072d8:	4618      	mov	r0, r3
 80072da:	f001 fd4b 	bl	8008d74 <uxListRemove>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e2:	2201      	movs	r2, #1
 80072e4:	409a      	lsls	r2, r3
 80072e6:	4b24      	ldr	r3, [pc, #144]	; (8007378 <xTaskIncrementTick+0x148>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	431a      	orrs	r2, r3
 80072ec:	4b22      	ldr	r3, [pc, #136]	; (8007378 <xTaskIncrementTick+0x148>)
 80072ee:	601a      	str	r2, [r3, #0]
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072f4:	4613      	mov	r3, r2
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	4413      	add	r3, r2
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	4a1f      	ldr	r2, [pc, #124]	; (800737c <xTaskIncrementTick+0x14c>)
 80072fe:	441a      	add	r2, r3
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	3304      	adds	r3, #4
 8007304:	4610      	mov	r0, r2
 8007306:	4619      	mov	r1, r3
 8007308:	f001 fcd8 	bl	8008cbc <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007310:	4b1b      	ldr	r3, [pc, #108]	; (8007380 <xTaskIncrementTick+0x150>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007316:	429a      	cmp	r2, r3
 8007318:	d301      	bcc.n	800731e <xTaskIncrementTick+0xee>
							{
								xSwitchRequired = pdTRUE;
 800731a:	2301      	movs	r3, #1
 800731c:	617b      	str	r3, [r7, #20]
								mtCOVERAGE_TEST_MARKER();
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
 800731e:	e7b1      	b.n	8007284 <xTaskIncrementTick+0x54>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007320:	4b17      	ldr	r3, [pc, #92]	; (8007380 <xTaskIncrementTick+0x150>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007326:	4915      	ldr	r1, [pc, #84]	; (800737c <xTaskIncrementTick+0x14c>)
 8007328:	4613      	mov	r3, r2
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	4413      	add	r3, r2
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	440b      	add	r3, r1
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	2b01      	cmp	r3, #1
 8007336:	d907      	bls.n	8007348 <xTaskIncrementTick+0x118>
			{
				xSwitchRequired = pdTRUE;
 8007338:	2301      	movs	r3, #1
 800733a:	617b      	str	r3, [r7, #20]
 800733c:	e004      	b.n	8007348 <xTaskIncrementTick+0x118>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800733e:	4b11      	ldr	r3, [pc, #68]	; (8007384 <xTaskIncrementTick+0x154>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	1c5a      	adds	r2, r3, #1
 8007344:	4b0f      	ldr	r3, [pc, #60]	; (8007384 <xTaskIncrementTick+0x154>)
 8007346:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007348:	4b0f      	ldr	r3, [pc, #60]	; (8007388 <xTaskIncrementTick+0x158>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d001      	beq.n	8007354 <xTaskIncrementTick+0x124>
		{
			xSwitchRequired = pdTRUE;
 8007350:	2301      	movs	r3, #1
 8007352:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007354:	697b      	ldr	r3, [r7, #20]
}
 8007356:	4618      	mov	r0, r3
 8007358:	3718      	adds	r7, #24
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	200001c4 	.word	0x200001c4
 8007364:	200001a8 	.word	0x200001a8
 8007368:	2000015c 	.word	0x2000015c
 800736c:	20000160 	.word	0x20000160
 8007370:	200001bc 	.word	0x200001bc
 8007374:	20000048 	.word	0x20000048
 8007378:	200001ac 	.word	0x200001ac
 800737c:	200000d0 	.word	0x200000d0
 8007380:	200000cc 	.word	0x200000cc
 8007384:	200001b4 	.word	0x200001b4
 8007388:	200001b8 	.word	0x200001b8

0800738c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007392:	4b2d      	ldr	r3, [pc, #180]	; (8007448 <vTaskSwitchContext+0xbc>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d003      	beq.n	80073a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800739a:	4b2c      	ldr	r3, [pc, #176]	; (800744c <vTaskSwitchContext+0xc0>)
 800739c:	2201      	movs	r2, #1
 800739e:	601a      	str	r2, [r3, #0]
 80073a0:	e04f      	b.n	8007442 <vTaskSwitchContext+0xb6>
	}
	else
	{
		xYieldPending = pdFALSE;
 80073a2:	4b2a      	ldr	r3, [pc, #168]	; (800744c <vTaskSwitchContext+0xc0>)
 80073a4:	2200      	movs	r2, #0
 80073a6:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 80073a8:	4b29      	ldr	r3, [pc, #164]	; (8007450 <vTaskSwitchContext+0xc4>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	4b28      	ldr	r3, [pc, #160]	; (8007450 <vTaskSwitchContext+0xc4>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d808      	bhi.n	80073ca <vTaskSwitchContext+0x3e>
 80073b8:	4b25      	ldr	r3, [pc, #148]	; (8007450 <vTaskSwitchContext+0xc4>)
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	4b24      	ldr	r3, [pc, #144]	; (8007450 <vTaskSwitchContext+0xc4>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	3334      	adds	r3, #52	; 0x34
 80073c2:	4610      	mov	r0, r2
 80073c4:	4619      	mov	r1, r3
 80073c6:	f7fa fba1 	bl	8001b0c <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 80073ca:	4b21      	ldr	r3, [pc, #132]	; (8007450 <vTaskSwitchContext+0xc4>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073d0:	4618      	mov	r0, r3
 80073d2:	4920      	ldr	r1, [pc, #128]	; (8007454 <vTaskSwitchContext+0xc8>)
 80073d4:	2214      	movs	r2, #20
 80073d6:	f002 f81f 	bl	8009418 <memcmp>
 80073da:	4603      	mov	r3, r0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d008      	beq.n	80073f2 <vTaskSwitchContext+0x66>
 80073e0:	4b1b      	ldr	r3, [pc, #108]	; (8007450 <vTaskSwitchContext+0xc4>)
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	4b1a      	ldr	r3, [pc, #104]	; (8007450 <vTaskSwitchContext+0xc4>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	3334      	adds	r3, #52	; 0x34
 80073ea:	4610      	mov	r0, r2
 80073ec:	4619      	mov	r1, r3
 80073ee:	f7fa fb8d 	bl	8001b0c <vApplicationStackOverflowHook>

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80073f2:	4b19      	ldr	r3, [pc, #100]	; (8007458 <vTaskSwitchContext+0xcc>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	607b      	str	r3, [r7, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	fab3 f383 	clz	r3, r3
 80073fe:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 8007400:	78fb      	ldrb	r3, [r7, #3]
 8007402:	f1c3 031f 	rsb	r3, r3, #31
 8007406:	60fb      	str	r3, [r7, #12]
 8007408:	68fa      	ldr	r2, [r7, #12]
 800740a:	4613      	mov	r3, r2
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	4413      	add	r3, r2
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	4a12      	ldr	r2, [pc, #72]	; (800745c <vTaskSwitchContext+0xd0>)
 8007414:	4413      	add	r3, r2
 8007416:	60bb      	str	r3, [r7, #8]
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	685a      	ldr	r2, [r3, #4]
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	605a      	str	r2, [r3, #4]
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	685a      	ldr	r2, [r3, #4]
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	3308      	adds	r3, #8
 800742a:	429a      	cmp	r2, r3
 800742c:	d104      	bne.n	8007438 <vTaskSwitchContext+0xac>
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	685a      	ldr	r2, [r3, #4]
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	605a      	str	r2, [r3, #4]
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	68da      	ldr	r2, [r3, #12]
 800743e:	4b04      	ldr	r3, [pc, #16]	; (8007450 <vTaskSwitchContext+0xc4>)
 8007440:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007442:	3710      	adds	r7, #16
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}
 8007448:	200001c4 	.word	0x200001c4
 800744c:	200001b8 	.word	0x200001b8
 8007450:	200000cc 	.word	0x200000cc
 8007454:	080094e8 	.word	0x080094e8
 8007458:	200001ac 	.word	0x200001ac
 800745c:	200000d0 	.word	0x200000d0

08007460 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800746a:	4b19      	ldr	r3, [pc, #100]	; (80074d0 <vTaskPlaceOnEventList+0x70>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	3318      	adds	r3, #24
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	4619      	mov	r1, r3
 8007474:	f001 fc46 	bl	8008d04 <vListInsert>

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8007478:	4b15      	ldr	r3, [pc, #84]	; (80074d0 <vTaskPlaceOnEventList+0x70>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	3304      	adds	r3, #4
 800747e:	4618      	mov	r0, r3
 8007480:	f001 fc78 	bl	8008d74 <uxListRemove>
 8007484:	4603      	mov	r3, r0
 8007486:	2b00      	cmp	r3, #0
 8007488:	d10b      	bne.n	80074a2 <vTaskPlaceOnEventList+0x42>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800748a:	4b11      	ldr	r3, [pc, #68]	; (80074d0 <vTaskPlaceOnEventList+0x70>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007490:	2201      	movs	r2, #1
 8007492:	fa02 f303 	lsl.w	r3, r2, r3
 8007496:	43da      	mvns	r2, r3
 8007498:	4b0e      	ldr	r3, [pc, #56]	; (80074d4 <vTaskPlaceOnEventList+0x74>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	401a      	ands	r2, r3
 800749e:	4b0d      	ldr	r3, [pc, #52]	; (80074d4 <vTaskPlaceOnEventList+0x74>)
 80074a0:	601a      	str	r2, [r3, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074a8:	d107      	bne.n	80074ba <vTaskPlaceOnEventList+0x5a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80074aa:	4b09      	ldr	r3, [pc, #36]	; (80074d0 <vTaskPlaceOnEventList+0x70>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	3304      	adds	r3, #4
 80074b0:	4809      	ldr	r0, [pc, #36]	; (80074d8 <vTaskPlaceOnEventList+0x78>)
 80074b2:	4619      	mov	r1, r3
 80074b4:	f001 fc02 	bl	8008cbc <vListInsertEnd>
 80074b8:	e007      	b.n	80074ca <vTaskPlaceOnEventList+0x6a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
 80074ba:	4b08      	ldr	r3, [pc, #32]	; (80074dc <vTaskPlaceOnEventList+0x7c>)
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	4413      	add	r3, r2
 80074c2:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 80074c4:	68f8      	ldr	r0, [r7, #12]
 80074c6:	f000 fa6b 	bl	80079a0 <prvAddCurrentTaskToDelayedList>
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80074ca:	3710      	adds	r7, #16
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	200000cc 	.word	0x200000cc
 80074d4:	200001ac 	.word	0x200001ac
 80074d8:	20000190 	.word	0x20000190
 80074dc:	200001a8 	.word	0x200001a8

080074e0 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b086      	sub	sp, #24
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	60b9      	str	r1, [r7, #8]
 80074ea:	607a      	str	r2, [r7, #4]
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80074ec:	4b1c      	ldr	r3, [pc, #112]	; (8007560 <vTaskPlaceOnUnorderedEventList+0x80>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	68ba      	ldr	r2, [r7, #8]
 80074f2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80074f6:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80074f8:	4b19      	ldr	r3, [pc, #100]	; (8007560 <vTaskPlaceOnUnorderedEventList+0x80>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	3318      	adds	r3, #24
 80074fe:	68f8      	ldr	r0, [r7, #12]
 8007500:	4619      	mov	r1, r3
 8007502:	f001 fbdb 	bl	8008cbc <vListInsertEnd>

	/* The task must be removed from the ready list before it is added to the
	blocked list.  Exclusive access can be assured to the ready list as the
	scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8007506:	4b16      	ldr	r3, [pc, #88]	; (8007560 <vTaskPlaceOnUnorderedEventList+0x80>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	3304      	adds	r3, #4
 800750c:	4618      	mov	r0, r3
 800750e:	f001 fc31 	bl	8008d74 <uxListRemove>
 8007512:	4603      	mov	r3, r0
 8007514:	2b00      	cmp	r3, #0
 8007516:	d10b      	bne.n	8007530 <vTaskPlaceOnUnorderedEventList+0x50>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007518:	4b11      	ldr	r3, [pc, #68]	; (8007560 <vTaskPlaceOnUnorderedEventList+0x80>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800751e:	2201      	movs	r2, #1
 8007520:	fa02 f303 	lsl.w	r3, r2, r3
 8007524:	43da      	mvns	r2, r3
 8007526:	4b0f      	ldr	r3, [pc, #60]	; (8007564 <vTaskPlaceOnUnorderedEventList+0x84>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	401a      	ands	r2, r3
 800752c:	4b0d      	ldr	r3, [pc, #52]	; (8007564 <vTaskPlaceOnUnorderedEventList+0x84>)
 800752e:	601a      	str	r2, [r3, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007536:	d107      	bne.n	8007548 <vTaskPlaceOnUnorderedEventList+0x68>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8007538:	4b09      	ldr	r3, [pc, #36]	; (8007560 <vTaskPlaceOnUnorderedEventList+0x80>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	3304      	adds	r3, #4
 800753e:	480a      	ldr	r0, [pc, #40]	; (8007568 <vTaskPlaceOnUnorderedEventList+0x88>)
 8007540:	4619      	mov	r1, r3
 8007542:	f001 fbbb 	bl	8008cbc <vListInsertEnd>
 8007546:	e007      	b.n	8007558 <vTaskPlaceOnUnorderedEventList+0x78>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xTickCount + xTicksToWait;
 8007548:	4b08      	ldr	r3, [pc, #32]	; (800756c <vTaskPlaceOnUnorderedEventList+0x8c>)
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4413      	add	r3, r2
 8007550:	617b      	str	r3, [r7, #20]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 8007552:	6978      	ldr	r0, [r7, #20]
 8007554:	f000 fa24 	bl	80079a0 <prvAddCurrentTaskToDelayedList>
			will manage it correctly. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007558:	3718      	adds	r7, #24
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop
 8007560:	200000cc 	.word	0x200000cc
 8007564:	200001ac 	.word	0x200001ac
 8007568:	20000190 	.word	0x20000190
 800756c:	200001a8 	.word	0x200001a8

08007570 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800757a:	4b13      	ldr	r3, [pc, #76]	; (80075c8 <vTaskPlaceOnEventListRestricted+0x58>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	3318      	adds	r3, #24
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	4619      	mov	r1, r3
 8007584:	f001 fb9a 	bl	8008cbc <vListInsertEnd>

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8007588:	4b0f      	ldr	r3, [pc, #60]	; (80075c8 <vTaskPlaceOnEventListRestricted+0x58>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	3304      	adds	r3, #4
 800758e:	4618      	mov	r0, r3
 8007590:	f001 fbf0 	bl	8008d74 <uxListRemove>
 8007594:	4603      	mov	r3, r0
 8007596:	2b00      	cmp	r3, #0
 8007598:	d10b      	bne.n	80075b2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			/* The current task must be in a ready list, so there is no need to
			check, and the port reset macro can be called directly. */
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800759a:	4b0b      	ldr	r3, [pc, #44]	; (80075c8 <vTaskPlaceOnEventListRestricted+0x58>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a0:	2201      	movs	r2, #1
 80075a2:	fa02 f303 	lsl.w	r3, r2, r3
 80075a6:	43da      	mvns	r2, r3
 80075a8:	4b08      	ldr	r3, [pc, #32]	; (80075cc <vTaskPlaceOnEventListRestricted+0x5c>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	401a      	ands	r2, r3
 80075ae:	4b07      	ldr	r3, [pc, #28]	; (80075cc <vTaskPlaceOnEventListRestricted+0x5c>)
 80075b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
 80075b2:	4b07      	ldr	r3, [pc, #28]	; (80075d0 <vTaskPlaceOnEventListRestricted+0x60>)
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	4413      	add	r3, r2
 80075ba:	60fb      	str	r3, [r7, #12]

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	f000 f9ef 	bl	80079a0 <prvAddCurrentTaskToDelayedList>
	}
 80075c2:	3710      	adds	r7, #16
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	200000cc 	.word	0x200000cc
 80075cc:	200001ac 	.word	0x200001ac
 80075d0:	200001a8 	.word	0x200001a8

080075d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	3318      	adds	r3, #24
 80075e8:	4618      	mov	r0, r3
 80075ea:	f001 fbc3 	bl	8008d74 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075ee:	4b1d      	ldr	r3, [pc, #116]	; (8007664 <xTaskRemoveFromEventList+0x90>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d11c      	bne.n	8007630 <xTaskRemoveFromEventList+0x5c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	3304      	adds	r3, #4
 80075fa:	4618      	mov	r0, r3
 80075fc:	f001 fbba 	bl	8008d74 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007604:	2201      	movs	r2, #1
 8007606:	409a      	lsls	r2, r3
 8007608:	4b17      	ldr	r3, [pc, #92]	; (8007668 <xTaskRemoveFromEventList+0x94>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	431a      	orrs	r2, r3
 800760e:	4b16      	ldr	r3, [pc, #88]	; (8007668 <xTaskRemoveFromEventList+0x94>)
 8007610:	601a      	str	r2, [r3, #0]
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007616:	4613      	mov	r3, r2
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	4413      	add	r3, r2
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	4a13      	ldr	r2, [pc, #76]	; (800766c <xTaskRemoveFromEventList+0x98>)
 8007620:	441a      	add	r2, r3
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	3304      	adds	r3, #4
 8007626:	4610      	mov	r0, r2
 8007628:	4619      	mov	r1, r3
 800762a:	f001 fb47 	bl	8008cbc <vListInsertEnd>
 800762e:	e005      	b.n	800763c <xTaskRemoveFromEventList+0x68>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	3318      	adds	r3, #24
 8007634:	480e      	ldr	r0, [pc, #56]	; (8007670 <xTaskRemoveFromEventList+0x9c>)
 8007636:	4619      	mov	r1, r3
 8007638:	f001 fb40 	bl	8008cbc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007640:	4b0c      	ldr	r3, [pc, #48]	; (8007674 <xTaskRemoveFromEventList+0xa0>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007646:	429a      	cmp	r2, r3
 8007648:	d905      	bls.n	8007656 <xTaskRemoveFromEventList+0x82>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800764a:	2301      	movs	r3, #1
 800764c:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800764e:	4b0a      	ldr	r3, [pc, #40]	; (8007678 <xTaskRemoveFromEventList+0xa4>)
 8007650:	2201      	movs	r2, #1
 8007652:	601a      	str	r2, [r3, #0]
 8007654:	e001      	b.n	800765a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		xReturn = pdFALSE;
 8007656:	2300      	movs	r3, #0
 8007658:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800765a:	68fb      	ldr	r3, [r7, #12]
}
 800765c:	4618      	mov	r0, r3
 800765e:	3710      	adds	r7, #16
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}
 8007664:	200001c4 	.word	0x200001c4
 8007668:	200001ac 	.word	0x200001ac
 800766c:	200000d0 	.word	0x200000d0
 8007670:	20000164 	.word	0x20000164
 8007674:	200000cc 	.word	0x200000cc
 8007678:	200001b8 	.word	0x200001b8

0800767c <xTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f001 fb6c 	bl	8008d74 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	3304      	adds	r3, #4
 80076a0:	4618      	mov	r0, r3
 80076a2:	f001 fb67 	bl	8008d74 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076aa:	2201      	movs	r2, #1
 80076ac:	409a      	lsls	r2, r3
 80076ae:	4b13      	ldr	r3, [pc, #76]	; (80076fc <xTaskRemoveFromUnorderedEventList+0x80>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	431a      	orrs	r2, r3
 80076b4:	4b11      	ldr	r3, [pc, #68]	; (80076fc <xTaskRemoveFromUnorderedEventList+0x80>)
 80076b6:	601a      	str	r2, [r3, #0]
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076bc:	4613      	mov	r3, r2
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	4413      	add	r3, r2
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	4a0e      	ldr	r2, [pc, #56]	; (8007700 <xTaskRemoveFromUnorderedEventList+0x84>)
 80076c6:	441a      	add	r2, r3
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	3304      	adds	r3, #4
 80076cc:	4610      	mov	r0, r2
 80076ce:	4619      	mov	r1, r3
 80076d0:	f001 faf4 	bl	8008cbc <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076d8:	4b0a      	ldr	r3, [pc, #40]	; (8007704 <xTaskRemoveFromUnorderedEventList+0x88>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076de:	429a      	cmp	r2, r3
 80076e0:	d905      	bls.n	80076ee <xTaskRemoveFromUnorderedEventList+0x72>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
 80076e2:	2301      	movs	r3, #1
 80076e4:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80076e6:	4b08      	ldr	r3, [pc, #32]	; (8007708 <xTaskRemoveFromUnorderedEventList+0x8c>)
 80076e8:	2201      	movs	r2, #1
 80076ea:	601a      	str	r2, [r3, #0]
 80076ec:	e001      	b.n	80076f2 <xTaskRemoveFromUnorderedEventList+0x76>
	}
	else
	{
		xReturn = pdFALSE;
 80076ee:	2300      	movs	r3, #0
 80076f0:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 80076f2:	68fb      	ldr	r3, [r7, #12]
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3710      	adds	r7, #16
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	200001ac 	.word	0x200001ac
 8007700:	200000d0 	.word	0x200000d0
 8007704:	200000cc 	.word	0x200000cc
 8007708:	200001b8 	.word	0x200001b8

0800770c <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007714:	4b06      	ldr	r3, [pc, #24]	; (8007730 <vTaskSetTimeOutState+0x24>)
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800771c:	4b05      	ldr	r3, [pc, #20]	; (8007734 <vTaskSetTimeOutState+0x28>)
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	605a      	str	r2, [r3, #4]
}
 8007724:	370c      	adds	r7, #12
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop
 8007730:	200001bc 	.word	0x200001bc
 8007734:	200001a8 	.word	0x200001a8

08007738 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 8007742:	f001 fbcd 	bl	8008ee0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007746:	4b1c      	ldr	r3, [pc, #112]	; (80077b8 <xTaskCheckForTimeOut+0x80>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	60bb      	str	r3, [r7, #8]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007754:	d102      	bne.n	800775c <xTaskCheckForTimeOut+0x24>
			{
				xReturn = pdFALSE;
 8007756:	2300      	movs	r3, #0
 8007758:	60fb      	str	r3, [r7, #12]
 800775a:	e026      	b.n	80077aa <xTaskCheckForTimeOut+0x72>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	4b16      	ldr	r3, [pc, #88]	; (80077bc <xTaskCheckForTimeOut+0x84>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	429a      	cmp	r2, r3
 8007766:	d007      	beq.n	8007778 <xTaskCheckForTimeOut+0x40>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	685a      	ldr	r2, [r3, #4]
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	429a      	cmp	r2, r3
 8007770:	d802      	bhi.n	8007778 <xTaskCheckForTimeOut+0x40>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 8007772:	2301      	movs	r3, #1
 8007774:	60fb      	str	r3, [r7, #12]
 8007776:	e018      	b.n	80077aa <xTaskCheckForTimeOut+0x72>
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	68ba      	ldr	r2, [r7, #8]
 800777e:	1ad2      	subs	r2, r2, r3
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	429a      	cmp	r2, r3
 8007786:	d20e      	bcs.n	80077a6 <xTaskCheckForTimeOut+0x6e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6859      	ldr	r1, [r3, #4]
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	1acb      	subs	r3, r1, r3
 8007794:	441a      	add	r2, r3
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f7ff ffb6 	bl	800770c <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 80077a0:	2300      	movs	r3, #0
 80077a2:	60fb      	str	r3, [r7, #12]
 80077a4:	e001      	b.n	80077aa <xTaskCheckForTimeOut+0x72>
		}
		else
		{
			xReturn = pdTRUE;
 80077a6:	2301      	movs	r3, #1
 80077a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80077aa:	f001 fbb1 	bl	8008f10 <vPortExitCritical>

	return xReturn;
 80077ae:	68fb      	ldr	r3, [r7, #12]
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3710      	adds	r7, #16
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	200001a8 	.word	0x200001a8
 80077bc:	200001bc 	.word	0x200001bc

080077c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80077c0:	b480      	push	{r7}
 80077c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80077c4:	4b03      	ldr	r3, [pc, #12]	; (80077d4 <vTaskMissedYield+0x14>)
 80077c6:	2201      	movs	r2, #1
 80077c8:	601a      	str	r2, [r3, #0]
}
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr
 80077d2:	bf00      	nop
 80077d4:	200001b8 	.word	0x200001b8

080077d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
 80077e0:	f000 f8a4 	bl	800792c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80077e4:	4b07      	ldr	r3, [pc, #28]	; (8007804 <prvIdleTask+0x2c>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d907      	bls.n	80077fc <prvIdleTask+0x24>
			{
				taskYIELD();
 80077ec:	4b06      	ldr	r3, [pc, #24]	; (8007808 <prvIdleTask+0x30>)
 80077ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077f2:	601a      	str	r2, [r3, #0]
 80077f4:	f3bf 8f4f 	dsb	sy
 80077f8:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80077fc:	f7fa f98c 	bl	8001b18 <vApplicationIdleHook>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 8007800:	e7ee      	b.n	80077e0 <prvIdleTask+0x8>
 8007802:	bf00      	nop
 8007804:	200000d0 	.word	0x200000d0
 8007808:	e000ed04 	.word	0xe000ed04

0800780c <prvInitialiseTCBVariables>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b086      	sub	sp, #24
 8007810:	af00      	add	r7, sp, #0
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	607a      	str	r2, [r7, #4]
 8007818:	603b      	str	r3, [r7, #0]
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800781a:	2300      	movs	r3, #0
 800781c:	617b      	str	r3, [r7, #20]
 800781e:	e012      	b.n	8007846 <prvInitialiseTCBVariables+0x3a>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8007820:	68ba      	ldr	r2, [r7, #8]
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	4413      	add	r3, r2
 8007826:	781a      	ldrb	r2, [r3, #0]
 8007828:	68f9      	ldr	r1, [r7, #12]
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	440b      	add	r3, r1
 800782e:	3330      	adds	r3, #48	; 0x30
 8007830:	711a      	strb	r2, [r3, #4]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007832:	68ba      	ldr	r2, [r7, #8]
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	4413      	add	r3, r2
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d100      	bne.n	8007840 <prvInitialiseTCBVariables+0x34>
		{
			break;
 800783e:	e005      	b.n	800784c <prvInitialiseTCBVariables+0x40>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	3301      	adds	r3, #1
 8007844:	617b      	str	r3, [r7, #20]
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	2b09      	cmp	r3, #9
 800784a:	d9e9      	bls.n	8007820 <prvInitialiseTCBVariables+0x14>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2200      	movs	r2, #0
 8007850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2b04      	cmp	r3, #4
 8007858:	d901      	bls.n	800785e <prvInitialiseTCBVariables+0x52>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800785a:	2304      	movs	r3, #4
 800785c:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	687a      	ldr	r2, [r7, #4]
 8007862:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	641a      	str	r2, [r3, #64]	; 0x40
		pxTCB->uxMutexesHeld = 0;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2200      	movs	r2, #0
 800786e:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	3304      	adds	r3, #4
 8007874:	4618      	mov	r0, r3
 8007876:	f001 fa15 	bl	8008ca4 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	3318      	adds	r3, #24
 800787e:	4618      	mov	r0, r3
 8007880:	f001 fa10 	bl	8008ca4 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	68fa      	ldr	r2, [r7, #12]
 8007888:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f1c3 0205 	rsb	r2, r3, #5
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	68fa      	ldr	r2, [r7, #12]
 8007898:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portUSING_MPU_WRAPPERS */

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2200      	movs	r2, #0
 800789e:	649a      	str	r2, [r3, #72]	; 0x48
		pxTCB->eNotifyState = eNotWaitingNotification;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2200      	movs	r2, #0
 80078a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
 80078a8:	3718      	adds	r7, #24
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop

080078b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b082      	sub	sp, #8
 80078b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80078b6:	2300      	movs	r3, #0
 80078b8:	607b      	str	r3, [r7, #4]
 80078ba:	e00c      	b.n	80078d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	4613      	mov	r3, r2
 80078c0:	009b      	lsls	r3, r3, #2
 80078c2:	4413      	add	r3, r2
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	4a11      	ldr	r2, [pc, #68]	; (800790c <prvInitialiseTaskLists+0x5c>)
 80078c8:	4413      	add	r3, r2
 80078ca:	4618      	mov	r0, r3
 80078cc:	f001 f9ca 	bl	8008c64 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	3301      	adds	r3, #1
 80078d4:	607b      	str	r3, [r7, #4]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2b04      	cmp	r3, #4
 80078da:	d9ef      	bls.n	80078bc <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 80078dc:	480c      	ldr	r0, [pc, #48]	; (8007910 <prvInitialiseTaskLists+0x60>)
 80078de:	f001 f9c1 	bl	8008c64 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80078e2:	480c      	ldr	r0, [pc, #48]	; (8007914 <prvInitialiseTaskLists+0x64>)
 80078e4:	f001 f9be 	bl	8008c64 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80078e8:	480b      	ldr	r0, [pc, #44]	; (8007918 <prvInitialiseTaskLists+0x68>)
 80078ea:	f001 f9bb 	bl	8008c64 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80078ee:	480b      	ldr	r0, [pc, #44]	; (800791c <prvInitialiseTaskLists+0x6c>)
 80078f0:	f001 f9b8 	bl	8008c64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80078f4:	480a      	ldr	r0, [pc, #40]	; (8007920 <prvInitialiseTaskLists+0x70>)
 80078f6:	f001 f9b5 	bl	8008c64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80078fa:	4b0a      	ldr	r3, [pc, #40]	; (8007924 <prvInitialiseTaskLists+0x74>)
 80078fc:	4a04      	ldr	r2, [pc, #16]	; (8007910 <prvInitialiseTaskLists+0x60>)
 80078fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007900:	4b09      	ldr	r3, [pc, #36]	; (8007928 <prvInitialiseTaskLists+0x78>)
 8007902:	4a04      	ldr	r2, [pc, #16]	; (8007914 <prvInitialiseTaskLists+0x64>)
 8007904:	601a      	str	r2, [r3, #0]
}
 8007906:	3708      	adds	r7, #8
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}
 800790c:	200000d0 	.word	0x200000d0
 8007910:	20000134 	.word	0x20000134
 8007914:	20000148 	.word	0x20000148
 8007918:	20000164 	.word	0x20000164
 800791c:	20000178 	.word	0x20000178
 8007920:	20000190 	.word	0x20000190
 8007924:	2000015c 	.word	0x2000015c
 8007928:	20000160 	.word	0x20000160

0800792c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 8007932:	e028      	b.n	8007986 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8007934:	f7ff fbba 	bl	80070ac <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8007938:	4b16      	ldr	r3, [pc, #88]	; (8007994 <prvCheckTasksWaitingTermination+0x68>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2b00      	cmp	r3, #0
 800793e:	bf14      	ite	ne
 8007940:	2300      	movne	r3, #0
 8007942:	2301      	moveq	r3, #1
 8007944:	b2db      	uxtb	r3, r3
 8007946:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8007948:	f7ff fbbe 	bl	80070c8 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d119      	bne.n	8007986 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8007952:	f001 fac5 	bl	8008ee0 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007956:	4b0f      	ldr	r3, [pc, #60]	; (8007994 <prvCheckTasksWaitingTermination+0x68>)
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	3304      	adds	r3, #4
 8007962:	4618      	mov	r0, r3
 8007964:	f001 fa06 	bl	8008d74 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8007968:	4b0b      	ldr	r3, [pc, #44]	; (8007998 <prvCheckTasksWaitingTermination+0x6c>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	1e5a      	subs	r2, r3, #1
 800796e:	4b0a      	ldr	r3, [pc, #40]	; (8007998 <prvCheckTasksWaitingTermination+0x6c>)
 8007970:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
 8007972:	4b0a      	ldr	r3, [pc, #40]	; (800799c <prvCheckTasksWaitingTermination+0x70>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	1e5a      	subs	r2, r3, #1
 8007978:	4b08      	ldr	r3, [pc, #32]	; (800799c <prvCheckTasksWaitingTermination+0x70>)
 800797a:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
 800797c:	f001 fac8 	bl	8008f10 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8007980:	6838      	ldr	r0, [r7, #0]
 8007982:	f000 f87b 	bl	8007a7c <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 8007986:	4b05      	ldr	r3, [pc, #20]	; (800799c <prvCheckTasksWaitingTermination+0x70>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d1d2      	bne.n	8007934 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
 800798e:	3708      	adds	r7, #8
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}
 8007994:	20000178 	.word	0x20000178
 8007998:	200001a4 	.word	0x200001a4
 800799c:	2000018c 	.word	0x2000018c

080079a0 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b082      	sub	sp, #8
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 80079a8:	4b13      	ldr	r3, [pc, #76]	; (80079f8 <prvAddCurrentTaskToDelayedList+0x58>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
 80079b0:	4b12      	ldr	r3, [pc, #72]	; (80079fc <prvAddCurrentTaskToDelayedList+0x5c>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d209      	bcs.n	80079ce <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80079ba:	4b11      	ldr	r3, [pc, #68]	; (8007a00 <prvAddCurrentTaskToDelayedList+0x60>)
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	4b0e      	ldr	r3, [pc, #56]	; (80079f8 <prvAddCurrentTaskToDelayedList+0x58>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	3304      	adds	r3, #4
 80079c4:	4610      	mov	r0, r2
 80079c6:	4619      	mov	r1, r3
 80079c8:	f001 f99c 	bl	8008d04 <vListInsert>
 80079cc:	e010      	b.n	80079f0 <prvAddCurrentTaskToDelayedList+0x50>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80079ce:	4b0d      	ldr	r3, [pc, #52]	; (8007a04 <prvAddCurrentTaskToDelayedList+0x64>)
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	4b09      	ldr	r3, [pc, #36]	; (80079f8 <prvAddCurrentTaskToDelayedList+0x58>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	3304      	adds	r3, #4
 80079d8:	4610      	mov	r0, r2
 80079da:	4619      	mov	r1, r3
 80079dc:	f001 f992 	bl	8008d04 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 80079e0:	4b09      	ldr	r3, [pc, #36]	; (8007a08 <prvAddCurrentTaskToDelayedList+0x68>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d202      	bcs.n	80079f0 <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
 80079ea:	4b07      	ldr	r3, [pc, #28]	; (8007a08 <prvAddCurrentTaskToDelayedList+0x68>)
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80079f0:	3708      	adds	r7, #8
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	bf00      	nop
 80079f8:	200000cc 	.word	0x200000cc
 80079fc:	200001a8 	.word	0x200001a8
 8007a00:	20000160 	.word	0x20000160
 8007a04:	2000015c 	.word	0x2000015c
 8007a08:	20000048 	.word	0x20000048

08007a0c <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	4603      	mov	r3, r0
 8007a14:	6039      	str	r1, [r7, #0]
 8007a16:	80fb      	strh	r3, [r7, #6]
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d106      	bne.n	8007a2c <prvAllocateTCBAndStack+0x20>
 8007a1e:	88fb      	ldrh	r3, [r7, #6]
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	4618      	mov	r0, r3
 8007a24:	f001 fafc 	bl	8009020 <pvPortMalloc>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	e000      	b.n	8007a2e <prvAllocateTCBAndStack+0x22>
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	60bb      	str	r3, [r7, #8]

		if( pxStack != NULL )
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d00e      	beq.n	8007a54 <prvAllocateTCBAndStack+0x48>
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8007a36:	2050      	movs	r0, #80	; 0x50
 8007a38:	f001 faf2 	bl	8009020 <pvPortMalloc>
 8007a3c:	60f8      	str	r0, [r7, #12]

			if( pxNewTCB != NULL )
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d003      	beq.n	8007a4c <prvAllocateTCBAndStack+0x40>
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	68ba      	ldr	r2, [r7, #8]
 8007a48:	631a      	str	r2, [r3, #48]	; 0x30
 8007a4a:	e005      	b.n	8007a58 <prvAllocateTCBAndStack+0x4c>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
 8007a4c:	68b8      	ldr	r0, [r7, #8]
 8007a4e:	f001 fb7f 	bl	8009150 <vPortFree>
 8007a52:	e001      	b.n	8007a58 <prvAllocateTCBAndStack+0x4c>
			}
		}
		else
		{
			pxNewTCB = NULL;
 8007a54:	2300      	movs	r3, #0
 8007a56:	60fb      	str	r3, [r7, #12]
		}
	}
	#endif /* portSTACK_GROWTH */

	if( pxNewTCB != NULL )
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d008      	beq.n	8007a70 <prvAllocateTCBAndStack+0x64>
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a62:	88fb      	ldrh	r3, [r7, #6]
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	4610      	mov	r0, r2
 8007a68:	21a5      	movs	r1, #165	; 0xa5
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	f001 fcec 	bl	8009448 <memset>
		}
		#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
	}

	return pxNewTCB;
 8007a70:	68fb      	ldr	r3, [r7, #12]
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3710      	adds	r7, #16
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop

08007a7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f001 fb61 	bl	8009150 <vPortFree>
		}
		#endif

		vPortFree( pxTCB );
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f001 fb5e 	bl	8009150 <vPortFree>
	}
 8007a94:	3708      	adds	r7, #8
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	bf00      	nop

08007a9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007aa2:	4b0e      	ldr	r3, [pc, #56]	; (8007adc <prvResetNextTaskUnblockTime+0x40>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d101      	bne.n	8007ab0 <prvResetNextTaskUnblockTime+0x14>
 8007aac:	2301      	movs	r3, #1
 8007aae:	e000      	b.n	8007ab2 <prvResetNextTaskUnblockTime+0x16>
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d004      	beq.n	8007ac0 <prvResetNextTaskUnblockTime+0x24>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ab6:	4b0a      	ldr	r3, [pc, #40]	; (8007ae0 <prvResetNextTaskUnblockTime+0x44>)
 8007ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8007abc:	601a      	str	r2, [r3, #0]
 8007abe:	e008      	b.n	8007ad2 <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007ac0:	4b06      	ldr	r3, [pc, #24]	; (8007adc <prvResetNextTaskUnblockTime+0x40>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	685a      	ldr	r2, [r3, #4]
 8007ace:	4b04      	ldr	r3, [pc, #16]	; (8007ae0 <prvResetNextTaskUnblockTime+0x44>)
 8007ad0:	601a      	str	r2, [r3, #0]
	}
}
 8007ad2:	370c      	adds	r7, #12
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr
 8007adc:	2000015c 	.word	0x2000015c
 8007ae0:	20000048 	.word	0x20000048

08007ae4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007aea:	4b05      	ldr	r3, [pc, #20]	; (8007b00 <xTaskGetCurrentTaskHandle+0x1c>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007af0:	687b      	ldr	r3, [r7, #4]
	}
 8007af2:	4618      	mov	r0, r3
 8007af4:	370c      	adds	r7, #12
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	200000cc 	.word	0x200000cc

08007b04 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007b0a:	4b0b      	ldr	r3, [pc, #44]	; (8007b38 <xTaskGetSchedulerState+0x34>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d102      	bne.n	8007b18 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007b12:	2301      	movs	r3, #1
 8007b14:	607b      	str	r3, [r7, #4]
 8007b16:	e008      	b.n	8007b2a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b18:	4b08      	ldr	r3, [pc, #32]	; (8007b3c <xTaskGetSchedulerState+0x38>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d102      	bne.n	8007b26 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007b20:	2302      	movs	r3, #2
 8007b22:	607b      	str	r3, [r7, #4]
 8007b24:	e001      	b.n	8007b2a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007b26:	2300      	movs	r3, #0
 8007b28:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007b2a:	687b      	ldr	r3, [r7, #4]
	}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr
 8007b38:	200001b0 	.word	0x200001b0
 8007b3c:	200001c4 	.word	0x200001c4

08007b40 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d062      	beq.n	8007c18 <vTaskPriorityInherit+0xd8>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b56:	4b32      	ldr	r3, [pc, #200]	; (8007c20 <vTaskPriorityInherit+0xe0>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d25b      	bcs.n	8007c18 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	699b      	ldr	r3, [r3, #24]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	db06      	blt.n	8007b76 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b68:	4b2d      	ldr	r3, [pc, #180]	; (8007c20 <vTaskPriorityInherit+0xe0>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b6e:	f1c3 0205 	rsb	r2, r3, #5
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	6959      	ldr	r1, [r3, #20]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b7e:	4613      	mov	r3, r2
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	4413      	add	r3, r2
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	4a27      	ldr	r2, [pc, #156]	; (8007c24 <vTaskPriorityInherit+0xe4>)
 8007b88:	4413      	add	r3, r2
 8007b8a:	4299      	cmp	r1, r3
 8007b8c:	d101      	bne.n	8007b92 <vTaskPriorityInherit+0x52>
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e000      	b.n	8007b94 <vTaskPriorityInherit+0x54>
 8007b92:	2300      	movs	r3, #0
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d03a      	beq.n	8007c0e <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	3304      	adds	r3, #4
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f001 f8e9 	bl	8008d74 <uxListRemove>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d115      	bne.n	8007bd4 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bac:	491d      	ldr	r1, [pc, #116]	; (8007c24 <vTaskPriorityInherit+0xe4>)
 8007bae:	4613      	mov	r3, r2
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	4413      	add	r3, r2
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	440b      	add	r3, r1
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d10a      	bne.n	8007bd4 <vTaskPriorityInherit+0x94>
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8007bc8:	43da      	mvns	r2, r3
 8007bca:	4b17      	ldr	r3, [pc, #92]	; (8007c28 <vTaskPriorityInherit+0xe8>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	401a      	ands	r2, r3
 8007bd0:	4b15      	ldr	r3, [pc, #84]	; (8007c28 <vTaskPriorityInherit+0xe8>)
 8007bd2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007bd4:	4b12      	ldr	r3, [pc, #72]	; (8007c20 <vTaskPriorityInherit+0xe0>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be2:	2201      	movs	r2, #1
 8007be4:	409a      	lsls	r2, r3
 8007be6:	4b10      	ldr	r3, [pc, #64]	; (8007c28 <vTaskPriorityInherit+0xe8>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	431a      	orrs	r2, r3
 8007bec:	4b0e      	ldr	r3, [pc, #56]	; (8007c28 <vTaskPriorityInherit+0xe8>)
 8007bee:	601a      	str	r2, [r3, #0]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bf4:	4613      	mov	r3, r2
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	4413      	add	r3, r2
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	4a09      	ldr	r2, [pc, #36]	; (8007c24 <vTaskPriorityInherit+0xe4>)
 8007bfe:	441a      	add	r2, r3
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	3304      	adds	r3, #4
 8007c04:	4610      	mov	r0, r2
 8007c06:	4619      	mov	r1, r3
 8007c08:	f001 f858 	bl	8008cbc <vListInsertEnd>
 8007c0c:	e004      	b.n	8007c18 <vTaskPriorityInherit+0xd8>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007c0e:	4b04      	ldr	r3, [pc, #16]	; (8007c20 <vTaskPriorityInherit+0xe0>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	200000cc 	.word	0x200000cc
 8007c24:	200000d0 	.word	0x200000d0
 8007c28:	200001ac 	.word	0x200001ac

08007c2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d04f      	beq.n	8007ce2 <xTaskPriorityDisinherit+0xb6>
		{
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c46:	1e5a      	subs	r2, r3, #1
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	645a      	str	r2, [r3, #68]	; 0x44

			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d044      	beq.n	8007ce2 <xTaskPriorityDisinherit+0xb6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d140      	bne.n	8007ce2 <xTaskPriorityDisinherit+0xb6>
					/* A task can only have an inhertied priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	3304      	adds	r3, #4
 8007c64:	4618      	mov	r0, r3
 8007c66:	f001 f885 	bl	8008d74 <uxListRemove>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d115      	bne.n	8007c9c <xTaskPriorityDisinherit+0x70>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c74:	491d      	ldr	r1, [pc, #116]	; (8007cec <xTaskPriorityDisinherit+0xc0>)
 8007c76:	4613      	mov	r3, r2
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	4413      	add	r3, r2
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	440b      	add	r3, r1
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d10a      	bne.n	8007c9c <xTaskPriorityDisinherit+0x70>
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c90:	43da      	mvns	r2, r3
 8007c92:	4b17      	ldr	r3, [pc, #92]	; (8007cf0 <xTaskPriorityDisinherit+0xc4>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	401a      	ands	r2, r3
 8007c98:	4b15      	ldr	r3, [pc, #84]	; (8007cf0 <xTaskPriorityDisinherit+0xc4>)
 8007c9a:	601a      	str	r2, [r3, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca8:	f1c3 0205 	rsb	r2, r3, #5
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	409a      	lsls	r2, r3
 8007cb8:	4b0d      	ldr	r3, [pc, #52]	; (8007cf0 <xTaskPriorityDisinherit+0xc4>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	431a      	orrs	r2, r3
 8007cbe:	4b0c      	ldr	r3, [pc, #48]	; (8007cf0 <xTaskPriorityDisinherit+0xc4>)
 8007cc0:	601a      	str	r2, [r3, #0]
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cc6:	4613      	mov	r3, r2
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	4413      	add	r3, r2
 8007ccc:	009b      	lsls	r3, r3, #2
 8007cce:	4a07      	ldr	r2, [pc, #28]	; (8007cec <xTaskPriorityDisinherit+0xc0>)
 8007cd0:	441a      	add	r2, r3
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	3304      	adds	r3, #4
 8007cd6:	4610      	mov	r0, r2
 8007cd8:	4619      	mov	r1, r3
 8007cda:	f000 ffef 	bl	8008cbc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
	}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3710      	adds	r7, #16
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	200000d0 	.word	0x200000d0
 8007cf0:	200001ac 	.word	0x200001ac

08007cf4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8007cfa:	4b09      	ldr	r3, [pc, #36]	; (8007d20 <uxTaskResetEventItemValue+0x2c>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	699b      	ldr	r3, [r3, #24]
 8007d00:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d02:	4b07      	ldr	r3, [pc, #28]	; (8007d20 <uxTaskResetEventItemValue+0x2c>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a06      	ldr	r2, [pc, #24]	; (8007d20 <uxTaskResetEventItemValue+0x2c>)
 8007d08:	6812      	ldr	r2, [r2, #0]
 8007d0a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007d0c:	f1c2 0205 	rsb	r2, r2, #5
 8007d10:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8007d12:	687b      	ldr	r3, [r7, #4]
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	370c      	adds	r7, #12
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr
 8007d20:	200000cc 	.word	0x200000cc

08007d24 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8007d24:	b480      	push	{r7}
 8007d26:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007d28:	4b07      	ldr	r3, [pc, #28]	; (8007d48 <pvTaskIncrementMutexHeldCount+0x24>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d004      	beq.n	8007d3a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007d30:	4b05      	ldr	r3, [pc, #20]	; (8007d48 <pvTaskIncrementMutexHeldCount+0x24>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d36:	3201      	adds	r2, #1
 8007d38:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
 8007d3a:	4b03      	ldr	r3, [pc, #12]	; (8007d48 <pvTaskIncrementMutexHeldCount+0x24>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
	}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr
 8007d48:	200000cc 	.word	0x200000cc

08007d4c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8007d56:	f001 f8c3 	bl	8008ee0 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8007d5a:	4b31      	ldr	r3, [pc, #196]	; (8007e20 <ulTaskNotifyTake+0xd4>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d138      	bne.n	8007dd6 <ulTaskNotifyTake+0x8a>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 8007d64:	4b2e      	ldr	r3, [pc, #184]	; (8007e20 <ulTaskNotifyTake+0xd4>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	2201      	movs	r2, #1
 8007d6a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

				if( xTicksToWait > ( TickType_t ) 0 )
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d030      	beq.n	8007dd6 <ulTaskNotifyTake+0x8a>
				{
					/* The task is going to block.  First it must be removed
					from the ready list. */
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8007d74:	4b2a      	ldr	r3, [pc, #168]	; (8007e20 <ulTaskNotifyTake+0xd4>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	3304      	adds	r3, #4
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f000 fffa 	bl	8008d74 <uxListRemove>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d10b      	bne.n	8007d9e <ulTaskNotifyTake+0x52>
					{
						/* The current task must be in a ready list, so there is
						no need to check, and the port reset macro can be called
						directly. */
						portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007d86:	4b26      	ldr	r3, [pc, #152]	; (8007e20 <ulTaskNotifyTake+0xd4>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d92:	43da      	mvns	r2, r3
 8007d94:	4b23      	ldr	r3, [pc, #140]	; (8007e24 <ulTaskNotifyTake+0xd8>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	401a      	ands	r2, r3
 8007d9a:	4b22      	ldr	r3, [pc, #136]	; (8007e24 <ulTaskNotifyTake+0xd8>)
 8007d9c:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					#if ( INCLUDE_vTaskSuspend == 1 )
					{
						if( xTicksToWait == portMAX_DELAY )
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007da4:	d107      	bne.n	8007db6 <ulTaskNotifyTake+0x6a>
						{
							/* Add the task to the suspended task list instead
							of a delayed task list to ensure the task is not
							woken by a timing event.  It will block
							indefinitely. */
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8007da6:	4b1e      	ldr	r3, [pc, #120]	; (8007e20 <ulTaskNotifyTake+0xd4>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	3304      	adds	r3, #4
 8007dac:	481e      	ldr	r0, [pc, #120]	; (8007e28 <ulTaskNotifyTake+0xdc>)
 8007dae:	4619      	mov	r1, r3
 8007db0:	f000 ff84 	bl	8008cbc <vListInsertEnd>
 8007db4:	e007      	b.n	8007dc6 <ulTaskNotifyTake+0x7a>
						{
							/* Calculate the time at which the task should be
							woken if no notification events occur.  This may
							overflow but this doesn't matter, the scheduler will
							handle it. */
							xTimeToWake = xTickCount + xTicksToWait;
 8007db6:	4b1d      	ldr	r3, [pc, #116]	; (8007e2c <ulTaskNotifyTake+0xe0>)
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	4413      	add	r3, r2
 8007dbe:	60fb      	str	r3, [r7, #12]
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 8007dc0:	68f8      	ldr	r0, [r7, #12]
 8007dc2:	f7ff fded 	bl	80079a0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8007dc6:	4b1a      	ldr	r3, [pc, #104]	; (8007e30 <ulTaskNotifyTake+0xe4>)
 8007dc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dcc:	601a      	str	r2, [r3, #0]
 8007dce:	f3bf 8f4f 	dsb	sy
 8007dd2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007dd6:	f001 f89b 	bl	8008f10 <vPortExitCritical>

		taskENTER_CRITICAL();
 8007dda:	f001 f881 	bl	8008ee0 <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8007dde:	4b10      	ldr	r3, [pc, #64]	; (8007e20 <ulTaskNotifyTake+0xd4>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007de4:	60bb      	str	r3, [r7, #8]

			if( ulReturn != 0UL )
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d00c      	beq.n	8007e06 <ulTaskNotifyTake+0xba>
			{
				if( xClearCountOnExit != pdFALSE )
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d004      	beq.n	8007dfc <ulTaskNotifyTake+0xb0>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8007df2:	4b0b      	ldr	r3, [pc, #44]	; (8007e20 <ulTaskNotifyTake+0xd4>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	2200      	movs	r2, #0
 8007df8:	649a      	str	r2, [r3, #72]	; 0x48
 8007dfa:	e004      	b.n	8007e06 <ulTaskNotifyTake+0xba>
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
 8007dfc:	4b08      	ldr	r3, [pc, #32]	; (8007e20 <ulTaskNotifyTake+0xd4>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e02:	3a01      	subs	r2, #1
 8007e04:	649a      	str	r2, [r3, #72]	; 0x48
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 8007e06:	4b06      	ldr	r3, [pc, #24]	; (8007e20 <ulTaskNotifyTake+0xd4>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		}
		taskEXIT_CRITICAL();
 8007e10:	f001 f87e 	bl	8008f10 <vPortExitCritical>

		return ulReturn;
 8007e14:	68bb      	ldr	r3, [r7, #8]
	}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	200000cc 	.word	0x200000cc
 8007e24:	200001ac 	.word	0x200001ac
 8007e28:	20000190 	.word	0x20000190
 8007e2c:	200001a8 	.word	0x200001a8
 8007e30:	e000ed04 	.word	0xe000ed04

08007e34 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b086      	sub	sp, #24
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	60b9      	str	r1, [r7, #8]
 8007e3e:	607a      	str	r2, [r7, #4]
 8007e40:	603b      	str	r3, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8007e42:	f001 f84d 	bl	8008ee0 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->eNotifyState != eNotified )
 8007e46:	4b39      	ldr	r3, [pc, #228]	; (8007f2c <xTaskNotifyWait+0xf8>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	2b02      	cmp	r3, #2
 8007e52:	d03f      	beq.n	8007ed4 <xTaskNotifyWait+0xa0>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8007e54:	4b35      	ldr	r3, [pc, #212]	; (8007f2c <xTaskNotifyWait+0xf8>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8007e5a:	68fa      	ldr	r2, [r7, #12]
 8007e5c:	43d2      	mvns	r2, r2
 8007e5e:	400a      	ands	r2, r1
 8007e60:	649a      	str	r2, [r3, #72]	; 0x48

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 8007e62:	4b32      	ldr	r3, [pc, #200]	; (8007f2c <xTaskNotifyWait+0xf8>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	2201      	movs	r2, #1
 8007e68:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

				if( xTicksToWait > ( TickType_t ) 0 )
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d030      	beq.n	8007ed4 <xTaskNotifyWait+0xa0>
				{
					/* The task is going to block.  First it must be removed
					from the	ready list. */
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8007e72:	4b2e      	ldr	r3, [pc, #184]	; (8007f2c <xTaskNotifyWait+0xf8>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	3304      	adds	r3, #4
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f000 ff7b 	bl	8008d74 <uxListRemove>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d10b      	bne.n	8007e9c <xTaskNotifyWait+0x68>
					{
						/* The current task must be in a ready list, so there is
						no need to check, and the port reset macro can be called
						directly. */
						portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007e84:	4b29      	ldr	r3, [pc, #164]	; (8007f2c <xTaskNotifyWait+0xf8>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e90:	43da      	mvns	r2, r3
 8007e92:	4b27      	ldr	r3, [pc, #156]	; (8007f30 <xTaskNotifyWait+0xfc>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	401a      	ands	r2, r3
 8007e98:	4b25      	ldr	r3, [pc, #148]	; (8007f30 <xTaskNotifyWait+0xfc>)
 8007e9a:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					#if ( INCLUDE_vTaskSuspend == 1 )
					{
						if( xTicksToWait == portMAX_DELAY )
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ea2:	d107      	bne.n	8007eb4 <xTaskNotifyWait+0x80>
						{
							/* Add the task to the suspended task list instead
							of a delayed task list to ensure the task is not
							woken by a timing event.  It will block
							indefinitely. */
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8007ea4:	4b21      	ldr	r3, [pc, #132]	; (8007f2c <xTaskNotifyWait+0xf8>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	3304      	adds	r3, #4
 8007eaa:	4822      	ldr	r0, [pc, #136]	; (8007f34 <xTaskNotifyWait+0x100>)
 8007eac:	4619      	mov	r1, r3
 8007eae:	f000 ff05 	bl	8008cbc <vListInsertEnd>
 8007eb2:	e007      	b.n	8007ec4 <xTaskNotifyWait+0x90>
						{
							/* Calculate the time at which the task should be
							woken if no notification events occur.  This may
							overflow but this doesn't matter, the scheduler will
							handle it. */
							xTimeToWake = xTickCount + xTicksToWait;
 8007eb4:	4b20      	ldr	r3, [pc, #128]	; (8007f38 <xTaskNotifyWait+0x104>)
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	4413      	add	r3, r2
 8007ebc:	613b      	str	r3, [r7, #16]
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 8007ebe:	6938      	ldr	r0, [r7, #16]
 8007ec0:	f7ff fd6e 	bl	80079a0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8007ec4:	4b1d      	ldr	r3, [pc, #116]	; (8007f3c <xTaskNotifyWait+0x108>)
 8007ec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007eca:	601a      	str	r2, [r3, #0]
 8007ecc:	f3bf 8f4f 	dsb	sy
 8007ed0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007ed4:	f001 f81c 	bl	8008f10 <vPortExitCritical>

		taskENTER_CRITICAL();
 8007ed8:	f001 f802 	bl	8008ee0 <vPortEnterCritical>
		{
			if( pulNotificationValue != NULL )
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d004      	beq.n	8007eec <xTaskNotifyWait+0xb8>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8007ee2:	4b12      	ldr	r3, [pc, #72]	; (8007f2c <xTaskNotifyWait+0xf8>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	601a      	str	r2, [r3, #0]

			/* If eNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->eNotifyState == eWaitingNotification )
 8007eec:	4b0f      	ldr	r3, [pc, #60]	; (8007f2c <xTaskNotifyWait+0xf8>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	2b01      	cmp	r3, #1
 8007ef8:	d102      	bne.n	8007f00 <xTaskNotifyWait+0xcc>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8007efa:	2300      	movs	r3, #0
 8007efc:	617b      	str	r3, [r7, #20]
 8007efe:	e008      	b.n	8007f12 <xTaskNotifyWait+0xde>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8007f00:	4b0a      	ldr	r3, [pc, #40]	; (8007f2c <xTaskNotifyWait+0xf8>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8007f06:	68ba      	ldr	r2, [r7, #8]
 8007f08:	43d2      	mvns	r2, r2
 8007f0a:	400a      	ands	r2, r1
 8007f0c:	649a      	str	r2, [r3, #72]	; 0x48
				xReturn = pdTRUE;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 8007f12:	4b06      	ldr	r3, [pc, #24]	; (8007f2c <xTaskNotifyWait+0xf8>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	2200      	movs	r2, #0
 8007f18:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		}
		taskEXIT_CRITICAL();
 8007f1c:	f000 fff8 	bl	8008f10 <vPortExitCritical>

		return xReturn;
 8007f20:	697b      	ldr	r3, [r7, #20]
	}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3718      	adds	r7, #24
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
 8007f2a:	bf00      	nop
 8007f2c:	200000cc 	.word	0x200000cc
 8007f30:	200001ac 	.word	0x200001ac
 8007f34:	20000190 	.word	0x20000190
 8007f38:	200001a8 	.word	0x200001a8
 8007f3c:	e000ed04 	.word	0xe000ed04

08007f40 <xTaskNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction )
	{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b088      	sub	sp, #32
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	4613      	mov	r3, r2
 8007f4c:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	61fb      	str	r3, [r7, #28]

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	61bb      	str	r3, [r7, #24]

		taskENTER_CRITICAL();
 8007f56:	f000 ffc3 	bl	8008ee0 <vPortEnterCritical>
		{
			eOriginalNotifyState = pxTCB->eNotifyState;
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007f60:	75fb      	strb	r3, [r7, #23]

			pxTCB->eNotifyState = eNotified;
 8007f62:	69bb      	ldr	r3, [r7, #24]
 8007f64:	2202      	movs	r2, #2
 8007f66:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

			switch( eAction )
 8007f6a:	79fb      	ldrb	r3, [r7, #7]
 8007f6c:	2b04      	cmp	r3, #4
 8007f6e:	d828      	bhi.n	8007fc2 <xTaskNotify+0x82>
 8007f70:	a201      	add	r2, pc, #4	; (adr r2, 8007f78 <xTaskNotify+0x38>)
 8007f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f76:	bf00      	nop
 8007f78:	08007fc3 	.word	0x08007fc3
 8007f7c:	08007f8d 	.word	0x08007f8d
 8007f80:	08007f9b 	.word	0x08007f9b
 8007f84:	08007fa7 	.word	0x08007fa7
 8007f88:	08007faf 	.word	0x08007faf
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	431a      	orrs	r2, r3
 8007f94:	69bb      	ldr	r3, [r7, #24]
 8007f96:	649a      	str	r2, [r3, #72]	; 0x48
					break;
 8007f98:	e013      	b.n	8007fc2 <xTaskNotify+0x82>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007f9a:	69bb      	ldr	r3, [r7, #24]
 8007f9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f9e:	1c5a      	adds	r2, r3, #1
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	649a      	str	r2, [r3, #72]	; 0x48
					break;
 8007fa4:	e00d      	b.n	8007fc2 <xTaskNotify+0x82>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007fa6:	69bb      	ldr	r3, [r7, #24]
 8007fa8:	68ba      	ldr	r2, [r7, #8]
 8007faa:	649a      	str	r2, [r3, #72]	; 0x48
					break;
 8007fac:	e009      	b.n	8007fc2 <xTaskNotify+0x82>

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 8007fae:	7dfb      	ldrb	r3, [r7, #23]
 8007fb0:	2b02      	cmp	r3, #2
 8007fb2:	d003      	beq.n	8007fbc <xTaskNotify+0x7c>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007fb4:	69bb      	ldr	r3, [r7, #24]
 8007fb6:	68ba      	ldr	r2, [r7, #8]
 8007fb8:	649a      	str	r2, [r3, #72]	; 0x48
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007fba:	e001      	b.n	8007fc0 <xTaskNotify+0x80>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	61fb      	str	r3, [r7, #28]
					}
					break;
 8007fc0:	bf00      	nop
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 8007fc2:	7dfb      	ldrb	r3, [r7, #23]
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d12a      	bne.n	800801e <xTaskNotify+0xde>
			{
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8007fc8:	69bb      	ldr	r3, [r7, #24]
 8007fca:	3304      	adds	r3, #4
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f000 fed1 	bl	8008d74 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8007fd2:	69bb      	ldr	r3, [r7, #24]
 8007fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	409a      	lsls	r2, r3
 8007fda:	4b14      	ldr	r3, [pc, #80]	; (800802c <xTaskNotify+0xec>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	431a      	orrs	r2, r3
 8007fe0:	4b12      	ldr	r3, [pc, #72]	; (800802c <xTaskNotify+0xec>)
 8007fe2:	601a      	str	r2, [r3, #0]
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fe8:	4613      	mov	r3, r2
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	4413      	add	r3, r2
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	4a0f      	ldr	r2, [pc, #60]	; (8008030 <xTaskNotify+0xf0>)
 8007ff2:	441a      	add	r2, r3
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	3304      	adds	r3, #4
 8007ff8:	4610      	mov	r0, r2
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	f000 fe5e 	bl	8008cbc <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008000:	69bb      	ldr	r3, [r7, #24]
 8008002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008004:	4b0b      	ldr	r3, [pc, #44]	; (8008034 <xTaskNotify+0xf4>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800800a:	429a      	cmp	r2, r3
 800800c:	d907      	bls.n	800801e <xTaskNotify+0xde>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					portYIELD_WITHIN_API();
 800800e:	4b0a      	ldr	r3, [pc, #40]	; (8008038 <xTaskNotify+0xf8>)
 8008010:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008014:	601a      	str	r2, [r3, #0]
 8008016:	f3bf 8f4f 	dsb	sy
 800801a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800801e:	f000 ff77 	bl	8008f10 <vPortExitCritical>

		return xReturn;
 8008022:	69fb      	ldr	r3, [r7, #28]
	}
 8008024:	4618      	mov	r0, r3
 8008026:	3720      	adds	r7, #32
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}
 800802c:	200001ac 	.word	0x200001ac
 8008030:	200000d0 	.word	0x200000d0
 8008034:	200000cc 	.word	0x200000cc
 8008038:	e000ed04 	.word	0xe000ed04

0800803c <xTaskNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800803c:	b580      	push	{r7, lr}
 800803e:	b08c      	sub	sp, #48	; 0x30
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	603b      	str	r3, [r7, #0]
 8008048:	4613      	mov	r3, r2
 800804a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800804c:	2301      	movs	r3, #1
 800804e:	62fb      	str	r3, [r7, #44]	; 0x2c
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	62bb      	str	r3, [r7, #40]	; 0x28

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008054:	f3ef 8211 	mrs	r2, BASEPRI
 8008058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805c:	f383 8811 	msr	BASEPRI, r3
 8008060:	f3bf 8f6f 	isb	sy
 8008064:	f3bf 8f4f 	dsb	sy
 8008068:	61fa      	str	r2, [r7, #28]
 800806a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800806c:	69fb      	ldr	r3, [r7, #28]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800806e:	627b      	str	r3, [r7, #36]	; 0x24
		{
			eOriginalNotifyState = pxTCB->eNotifyState;
 8008070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008072:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

			pxTCB->eNotifyState = eNotified;
 800807a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800807c:	2202      	movs	r2, #2
 800807e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

			switch( eAction )
 8008082:	79fb      	ldrb	r3, [r7, #7]
 8008084:	2b04      	cmp	r3, #4
 8008086:	d829      	bhi.n	80080dc <xTaskNotifyFromISR+0xa0>
 8008088:	a201      	add	r2, pc, #4	; (adr r2, 8008090 <xTaskNotifyFromISR+0x54>)
 800808a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800808e:	bf00      	nop
 8008090:	080080dd 	.word	0x080080dd
 8008094:	080080a5 	.word	0x080080a5
 8008098:	080080b3 	.word	0x080080b3
 800809c:	080080bf 	.word	0x080080bf
 80080a0:	080080c7 	.word	0x080080c7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80080a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	431a      	orrs	r2, r3
 80080ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ae:	649a      	str	r2, [r3, #72]	; 0x48
					break;
 80080b0:	e014      	b.n	80080dc <xTaskNotifyFromISR+0xa0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80080b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080b6:	1c5a      	adds	r2, r3, #1
 80080b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ba:	649a      	str	r2, [r3, #72]	; 0x48
					break;
 80080bc:	e00e      	b.n	80080dc <xTaskNotifyFromISR+0xa0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80080be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c0:	68ba      	ldr	r2, [r7, #8]
 80080c2:	649a      	str	r2, [r3, #72]	; 0x48
					break;
 80080c4:	e00a      	b.n	80080dc <xTaskNotifyFromISR+0xa0>

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 80080c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80080ca:	2b02      	cmp	r3, #2
 80080cc:	d003      	beq.n	80080d6 <xTaskNotifyFromISR+0x9a>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80080ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d0:	68ba      	ldr	r2, [r7, #8]
 80080d2:	649a      	str	r2, [r3, #72]	; 0x48
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80080d4:	e001      	b.n	80080da <xTaskNotifyFromISR+0x9e>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
 80080d6:	2300      	movs	r3, #0
 80080d8:	62fb      	str	r3, [r7, #44]	; 0x2c
					}
					break;
 80080da:	bf00      	nop
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 80080dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d133      	bne.n	800814c <xTaskNotifyFromISR+0x110>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080e4:	4b1e      	ldr	r3, [pc, #120]	; (8008160 <xTaskNotifyFromISR+0x124>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d11c      	bne.n	8008126 <xTaskNotifyFromISR+0xea>
				{
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 80080ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ee:	3304      	adds	r3, #4
 80080f0:	4618      	mov	r0, r3
 80080f2:	f000 fe3f 	bl	8008d74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80080f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080fa:	2201      	movs	r2, #1
 80080fc:	409a      	lsls	r2, r3
 80080fe:	4b19      	ldr	r3, [pc, #100]	; (8008164 <xTaskNotifyFromISR+0x128>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	431a      	orrs	r2, r3
 8008104:	4b17      	ldr	r3, [pc, #92]	; (8008164 <xTaskNotifyFromISR+0x128>)
 8008106:	601a      	str	r2, [r3, #0]
 8008108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800810a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800810c:	4613      	mov	r3, r2
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	4413      	add	r3, r2
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	4a14      	ldr	r2, [pc, #80]	; (8008168 <xTaskNotifyFromISR+0x12c>)
 8008116:	441a      	add	r2, r3
 8008118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800811a:	3304      	adds	r3, #4
 800811c:	4610      	mov	r0, r2
 800811e:	4619      	mov	r1, r3
 8008120:	f000 fdcc 	bl	8008cbc <vListInsertEnd>
 8008124:	e005      	b.n	8008132 <xTaskNotifyFromISR+0xf6>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8008126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008128:	3318      	adds	r3, #24
 800812a:	4810      	ldr	r0, [pc, #64]	; (800816c <xTaskNotifyFromISR+0x130>)
 800812c:	4619      	mov	r1, r3
 800812e:	f000 fdc5 	bl	8008cbc <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008136:	4b0e      	ldr	r3, [pc, #56]	; (8008170 <xTaskNotifyFromISR+0x134>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800813c:	429a      	cmp	r2, r3
 800813e:	d905      	bls.n	800814c <xTaskNotifyFromISR+0x110>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d002      	beq.n	800814c <xTaskNotifyFromISR+0x110>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	2201      	movs	r2, #1
 800814a:	601a      	str	r2, [r3, #0]
 800814c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8008156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008158:	4618      	mov	r0, r3
 800815a:	3730      	adds	r7, #48	; 0x30
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}
 8008160:	200001c4 	.word	0x200001c4
 8008164:	200001ac 	.word	0x200001ac
 8008168:	200000d0 	.word	0x200000d0
 800816c:	20000164 	.word	0x20000164
 8008170:	200000cc 	.word	0x200000cc

08008174 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008174:	b580      	push	{r7, lr}
 8008176:	b088      	sub	sp, #32
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008182:	f3ef 8211 	mrs	r2, BASEPRI
 8008186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800818a:	f383 8811 	msr	BASEPRI, r3
 800818e:	f3bf 8f6f 	isb	sy
 8008192:	f3bf 8f4f 	dsb	sy
 8008196:	613a      	str	r2, [r7, #16]
 8008198:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800819a:	693b      	ldr	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800819c:	61bb      	str	r3, [r7, #24]
		{
			eOriginalNotifyState = pxTCB->eNotifyState;
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80081a4:	75fb      	strb	r3, [r7, #23]
			pxTCB->eNotifyState = eNotified;
 80081a6:	69fb      	ldr	r3, [r7, #28]
 80081a8:	2202      	movs	r2, #2
 80081aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 80081ae:	69fb      	ldr	r3, [r7, #28]
 80081b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081b2:	1c5a      	adds	r2, r3, #1
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	649a      	str	r2, [r3, #72]	; 0x48

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 80081b8:	7dfb      	ldrb	r3, [r7, #23]
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d133      	bne.n	8008226 <vTaskNotifyGiveFromISR+0xb2>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081be:	4b1e      	ldr	r3, [pc, #120]	; (8008238 <vTaskNotifyGiveFromISR+0xc4>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d11c      	bne.n	8008200 <vTaskNotifyGiveFromISR+0x8c>
				{
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 80081c6:	69fb      	ldr	r3, [r7, #28]
 80081c8:	3304      	adds	r3, #4
 80081ca:	4618      	mov	r0, r3
 80081cc:	f000 fdd2 	bl	8008d74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80081d0:	69fb      	ldr	r3, [r7, #28]
 80081d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d4:	2201      	movs	r2, #1
 80081d6:	409a      	lsls	r2, r3
 80081d8:	4b18      	ldr	r3, [pc, #96]	; (800823c <vTaskNotifyGiveFromISR+0xc8>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	431a      	orrs	r2, r3
 80081de:	4b17      	ldr	r3, [pc, #92]	; (800823c <vTaskNotifyGiveFromISR+0xc8>)
 80081e0:	601a      	str	r2, [r3, #0]
 80081e2:	69fb      	ldr	r3, [r7, #28]
 80081e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081e6:	4613      	mov	r3, r2
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	4413      	add	r3, r2
 80081ec:	009b      	lsls	r3, r3, #2
 80081ee:	4a14      	ldr	r2, [pc, #80]	; (8008240 <vTaskNotifyGiveFromISR+0xcc>)
 80081f0:	441a      	add	r2, r3
 80081f2:	69fb      	ldr	r3, [r7, #28]
 80081f4:	3304      	adds	r3, #4
 80081f6:	4610      	mov	r0, r2
 80081f8:	4619      	mov	r1, r3
 80081fa:	f000 fd5f 	bl	8008cbc <vListInsertEnd>
 80081fe:	e005      	b.n	800820c <vTaskNotifyGiveFromISR+0x98>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8008200:	69fb      	ldr	r3, [r7, #28]
 8008202:	3318      	adds	r3, #24
 8008204:	480f      	ldr	r0, [pc, #60]	; (8008244 <vTaskNotifyGiveFromISR+0xd0>)
 8008206:	4619      	mov	r1, r3
 8008208:	f000 fd58 	bl	8008cbc <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800820c:	69fb      	ldr	r3, [r7, #28]
 800820e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008210:	4b0d      	ldr	r3, [pc, #52]	; (8008248 <vTaskNotifyGiveFromISR+0xd4>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008216:	429a      	cmp	r2, r3
 8008218:	d905      	bls.n	8008226 <vTaskNotifyGiveFromISR+0xb2>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d002      	beq.n	8008226 <vTaskNotifyGiveFromISR+0xb2>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	2201      	movs	r2, #1
 8008224:	601a      	str	r2, [r3, #0]
 8008226:	69bb      	ldr	r3, [r7, #24]
 8008228:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	f383 8811 	msr	BASEPRI, r3
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8008230:	3720      	adds	r7, #32
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	200001c4 	.word	0x200001c4
 800823c:	200001ac 	.word	0x200001ac
 8008240:	200000d0 	.word	0x200000d0
 8008244:	20000164 	.word	0x20000164
 8008248:	200000cc 	.word	0x200000cc

0800824c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 800825a:	f000 fe41 	bl	8008ee0 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681a      	ldr	r2, [r3, #0]
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008266:	68f9      	ldr	r1, [r7, #12]
 8008268:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800826a:	fb01 f303 	mul.w	r3, r1, r3
 800826e:	441a      	add	r2, r3
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2200      	movs	r2, #0
 8008278:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800828a:	3b01      	subs	r3, #1
 800828c:	68f9      	ldr	r1, [r7, #12]
 800828e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008290:	fb01 f303 	mul.w	r3, r1, r3
 8008294:	441a      	add	r2, r3
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f04f 32ff 	mov.w	r2, #4294967295
 80082a0:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f04f 32ff 	mov.w	r2, #4294967295
 80082a8:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d114      	bne.n	80082da <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	691b      	ldr	r3, [r3, #16]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d01a      	beq.n	80082ee <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	3310      	adds	r3, #16
 80082bc:	4618      	mov	r0, r3
 80082be:	f7ff f989 	bl	80075d4 <xTaskRemoveFromEventList>
 80082c2:	4603      	mov	r3, r0
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d112      	bne.n	80082ee <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80082c8:	4b0c      	ldr	r3, [pc, #48]	; (80082fc <xQueueGenericReset+0xb0>)
 80082ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082ce:	601a      	str	r2, [r3, #0]
 80082d0:	f3bf 8f4f 	dsb	sy
 80082d4:	f3bf 8f6f 	isb	sy
 80082d8:	e009      	b.n	80082ee <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	3310      	adds	r3, #16
 80082de:	4618      	mov	r0, r3
 80082e0:	f000 fcc0 	bl	8008c64 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	3324      	adds	r3, #36	; 0x24
 80082e8:	4618      	mov	r0, r3
 80082ea:	f000 fcbb 	bl	8008c64 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80082ee:	f000 fe0f 	bl	8008f10 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80082f2:	2301      	movs	r3, #1
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3710      	adds	r7, #16
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	e000ed04 	.word	0xe000ed04

08008300 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b088      	sub	sp, #32
 8008304:	af00      	add	r7, sp, #0
 8008306:	60f8      	str	r0, [r7, #12]
 8008308:	60b9      	str	r1, [r7, #8]
 800830a:	4613      	mov	r3, r2
 800830c:	71fb      	strb	r3, [r7, #7]
Queue_t *pxNewQueue;
size_t xQueueSizeInBytes;
QueueHandle_t xReturn = NULL;
 800830e:	2300      	movs	r3, #0
 8008310:	61bb      	str	r3, [r7, #24]
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d102      	bne.n	800831e <xQueueGenericCreate+0x1e>
	{
		/* There is not going to be a queue storage area. */
		xQueueSizeInBytes = ( size_t ) 0;
 8008318:	2300      	movs	r3, #0
 800831a:	61fb      	str	r3, [r7, #28]
 800831c:	e005      	b.n	800832a <xQueueGenericCreate+0x2a>
	}
	else
	{
		/* The queue is one byte longer than asked for to make wrap checking
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	68ba      	ldr	r2, [r7, #8]
 8008322:	fb02 f303 	mul.w	r3, r2, r3
 8008326:	3301      	adds	r3, #1
 8008328:	61fb      	str	r3, [r7, #28]
	}

	/* Allocate the new queue structure and storage area. */
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	334c      	adds	r3, #76	; 0x4c
 800832e:	4618      	mov	r0, r3
 8008330:	f000 fe76 	bl	8009020 <pvPortMalloc>
 8008334:	6178      	str	r0, [r7, #20]

	if( pcAllocatedBuffer != NULL )
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d019      	beq.n	8008370 <xQueueGenericCreate+0x70>
	{
		pxNewQueue = ( Queue_t * ) pcAllocatedBuffer; /*lint !e826 MISRA The buffer cannot be to small because it was dimensioned by sizeof( Queue_t ) + xQueueSizeInBytes. */
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	613b      	str	r3, [r7, #16]

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d103      	bne.n	800834e <xQueueGenericCreate+0x4e>
		{
			/* No RAM was allocated for the queue storage area, but PC head
			cannot be set to NULL because NULL is used as a key to say the queue
			is used as a mutex.  Therefore just set pcHead to point to the queue
			as a benign value that is known to be within the memory map. */
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	693a      	ldr	r2, [r7, #16]
 800834a:	601a      	str	r2, [r3, #0]
 800834c:	e004      	b.n	8008358 <xQueueGenericCreate+0x58>
		}
		else
		{
			/* Jump past the queue structure to find the location of the queue
			storage area - adding the padding bytes to get a better alignment. */
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	601a      	str	r2, [r3, #0]
		}

		/* Initialise the queue members as described above where the queue type
		is defined. */
		pxNewQueue->uxLength = uxQueueLength;
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	68fa      	ldr	r2, [r7, #12]
 800835c:	63da      	str	r2, [r3, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	68ba      	ldr	r2, [r7, #8]
 8008362:	641a      	str	r2, [r3, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008364:	6938      	ldr	r0, [r7, #16]
 8008366:	2101      	movs	r1, #1
 8008368:	f7ff ff70 	bl	800824c <xQueueGenericReset>
			pxNewQueue->pxQueueSetContainer = NULL;
		}
		#endif /* configUSE_QUEUE_SETS */

		traceQUEUE_CREATE( pxNewQueue );
		xReturn = pxNewQueue;
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	61bb      	str	r3, [r7, #24]
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );

	return xReturn;
 8008370:	69bb      	ldr	r3, [r7, #24]
}
 8008372:	4618      	mov	r0, r3
 8008374:	3720      	adds	r7, #32
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop

0800837c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800837c:	b580      	push	{r7, lr}
 800837e:	b084      	sub	sp, #16
 8008380:	af00      	add	r7, sp, #0
 8008382:	4603      	mov	r3, r0
 8008384:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
 8008386:	204c      	movs	r0, #76	; 0x4c
 8008388:	f000 fe4a 	bl	8009020 <pvPortMalloc>
 800838c:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d02c      	beq.n	80083ee <xQueueCreateMutex+0x72>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2200      	movs	r2, #0
 8008398:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2200      	movs	r2, #0
 800839e:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2200      	movs	r2, #0
 80083a4:	609a      	str	r2, [r3, #8]
			pxNewQueue->u.pcReadFrom = NULL;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2200      	movs	r2, #0
 80083aa:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2200      	movs	r2, #0
 80083b0:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2201      	movs	r2, #1
 80083b6:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2200      	movs	r2, #0
 80083bc:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f04f 32ff 	mov.w	r2, #4294967295
 80083c4:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f04f 32ff 	mov.w	r2, #4294967295
 80083cc:	649a      	str	r2, [r3, #72]	; 0x48
				pxNewQueue->pxQueueSetContainer = NULL;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	3310      	adds	r3, #16
 80083d2:	4618      	mov	r0, r3
 80083d4:	f000 fc46 	bl	8008c64 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	3324      	adds	r3, #36	; 0x24
 80083dc:	4618      	mov	r0, r3
 80083de:	f000 fc41 	bl	8008c64 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80083e2:	68f8      	ldr	r0, [r7, #12]
 80083e4:	2100      	movs	r1, #0
 80083e6:	2200      	movs	r2, #0
 80083e8:	2300      	movs	r3, #0
 80083ea:	f000 f805 	bl	80083f8 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
 80083ee:	68fb      	ldr	r3, [r7, #12]
	}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3710      	adds	r7, #16
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b08a      	sub	sp, #40	; 0x28
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	60b9      	str	r1, [r7, #8]
 8008402:	607a      	str	r2, [r7, #4]
 8008404:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008406:	2300      	movs	r3, #0
 8008408:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	623b      	str	r3, [r7, #32]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800840e:	f000 fd67 	bl	8008ee0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008412:	6a3b      	ldr	r3, [r7, #32]
 8008414:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008416:	6a3b      	ldr	r3, [r7, #32]
 8008418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800841a:	429a      	cmp	r2, r3
 800841c:	d302      	bcc.n	8008424 <xQueueGenericSend+0x2c>
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	2b02      	cmp	r3, #2
 8008422:	d129      	bne.n	8008478 <xQueueGenericSend+0x80>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008424:	6a38      	ldr	r0, [r7, #32]
 8008426:	68b9      	ldr	r1, [r7, #8]
 8008428:	683a      	ldr	r2, [r7, #0]
 800842a:	f000 fab7 	bl	800899c <prvCopyDataToQueue>
 800842e:	61f8      	str	r0, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008430:	6a3b      	ldr	r3, [r7, #32]
 8008432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008434:	2b00      	cmp	r3, #0
 8008436:	d010      	beq.n	800845a <xQueueGenericSend+0x62>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 8008438:	6a3b      	ldr	r3, [r7, #32]
 800843a:	3324      	adds	r3, #36	; 0x24
 800843c:	4618      	mov	r0, r3
 800843e:	f7ff f8c9 	bl	80075d4 <xTaskRemoveFromEventList>
 8008442:	4603      	mov	r3, r0
 8008444:	2b01      	cmp	r3, #1
 8008446:	d113      	bne.n	8008470 <xQueueGenericSend+0x78>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008448:	4b3d      	ldr	r3, [pc, #244]	; (8008540 <xQueueGenericSend+0x148>)
 800844a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800844e:	601a      	str	r2, [r3, #0]
 8008450:	f3bf 8f4f 	dsb	sy
 8008454:	f3bf 8f6f 	isb	sy
 8008458:	e00a      	b.n	8008470 <xQueueGenericSend+0x78>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800845a:	69fb      	ldr	r3, [r7, #28]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d007      	beq.n	8008470 <xQueueGenericSend+0x78>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008460:	4b37      	ldr	r3, [pc, #220]	; (8008540 <xQueueGenericSend+0x148>)
 8008462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008466:	601a      	str	r2, [r3, #0]
 8008468:	f3bf 8f4f 	dsb	sy
 800846c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008470:	f000 fd4e 	bl	8008f10 <vPortExitCritical>
				return pdPASS;
 8008474:	2301      	movs	r3, #1
 8008476:	e05f      	b.n	8008538 <xQueueGenericSend+0x140>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d103      	bne.n	8008486 <xQueueGenericSend+0x8e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800847e:	f000 fd47 	bl	8008f10 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008482:	2300      	movs	r3, #0
 8008484:	e058      	b.n	8008538 <xQueueGenericSend+0x140>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008488:	2b00      	cmp	r3, #0
 800848a:	d106      	bne.n	800849a <xQueueGenericSend+0xa2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800848c:	f107 0314 	add.w	r3, r7, #20
 8008490:	4618      	mov	r0, r3
 8008492:	f7ff f93b 	bl	800770c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008496:	2301      	movs	r3, #1
 8008498:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800849a:	f000 fd39 	bl	8008f10 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800849e:	f7fe fe05 	bl	80070ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80084a2:	f000 fd1d 	bl	8008ee0 <vPortEnterCritical>
 80084a6:	6a3b      	ldr	r3, [r7, #32]
 80084a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ae:	d102      	bne.n	80084b6 <xQueueGenericSend+0xbe>
 80084b0:	6a3b      	ldr	r3, [r7, #32]
 80084b2:	2200      	movs	r2, #0
 80084b4:	645a      	str	r2, [r3, #68]	; 0x44
 80084b6:	6a3b      	ldr	r3, [r7, #32]
 80084b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084be:	d102      	bne.n	80084c6 <xQueueGenericSend+0xce>
 80084c0:	6a3b      	ldr	r3, [r7, #32]
 80084c2:	2200      	movs	r2, #0
 80084c4:	649a      	str	r2, [r3, #72]	; 0x48
 80084c6:	f000 fd23 	bl	8008f10 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80084ca:	f107 0214 	add.w	r2, r7, #20
 80084ce:	1d3b      	adds	r3, r7, #4
 80084d0:	4610      	mov	r0, r2
 80084d2:	4619      	mov	r1, r3
 80084d4:	f7ff f930 	bl	8007738 <xTaskCheckForTimeOut>
 80084d8:	4603      	mov	r3, r0
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d124      	bne.n	8008528 <xQueueGenericSend+0x130>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80084de:	6a38      	ldr	r0, [r7, #32]
 80084e0:	f000 fb66 	bl	8008bb0 <prvIsQueueFull>
 80084e4:	4603      	mov	r3, r0
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d018      	beq.n	800851c <xQueueGenericSend+0x124>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80084ea:	6a3b      	ldr	r3, [r7, #32]
 80084ec:	f103 0210 	add.w	r2, r3, #16
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	4610      	mov	r0, r2
 80084f4:	4619      	mov	r1, r3
 80084f6:	f7fe ffb3 	bl	8007460 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80084fa:	6a38      	ldr	r0, [r7, #32]
 80084fc:	f000 fae2 	bl	8008ac4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008500:	f7fe fde2 	bl	80070c8 <xTaskResumeAll>
 8008504:	4603      	mov	r3, r0
 8008506:	2b00      	cmp	r3, #0
 8008508:	d115      	bne.n	8008536 <xQueueGenericSend+0x13e>
				{
					portYIELD_WITHIN_API();
 800850a:	4b0d      	ldr	r3, [pc, #52]	; (8008540 <xQueueGenericSend+0x148>)
 800850c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008510:	601a      	str	r2, [r3, #0]
 8008512:	f3bf 8f4f 	dsb	sy
 8008516:	f3bf 8f6f 	isb	sy
 800851a:	e00c      	b.n	8008536 <xQueueGenericSend+0x13e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800851c:	6a38      	ldr	r0, [r7, #32]
 800851e:	f000 fad1 	bl	8008ac4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008522:	f7fe fdd1 	bl	80070c8 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 8008526:	e772      	b.n	800840e <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008528:	6a38      	ldr	r0, [r7, #32]
 800852a:	f000 facb 	bl	8008ac4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800852e:	f7fe fdcb 	bl	80070c8 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008532:	2300      	movs	r3, #0
 8008534:	e000      	b.n	8008538 <xQueueGenericSend+0x140>
		}
	}
 8008536:	e76a      	b.n	800840e <xQueueGenericSend+0x16>
}
 8008538:	4618      	mov	r0, r3
 800853a:	3728      	adds	r7, #40	; 0x28
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}
 8008540:	e000ed04 	.word	0xe000ed04

08008544 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b08a      	sub	sp, #40	; 0x28
 8008548:	af00      	add	r7, sp, #0
 800854a:	60f8      	str	r0, [r7, #12]
 800854c:	60b9      	str	r1, [r7, #8]
 800854e:	607a      	str	r2, [r7, #4]
 8008550:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	623b      	str	r3, [r7, #32]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008556:	f3ef 8211 	mrs	r2, BASEPRI
 800855a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800855e:	f383 8811 	msr	BASEPRI, r3
 8008562:	f3bf 8f6f 	isb	sy
 8008566:	f3bf 8f4f 	dsb	sy
 800856a:	61ba      	str	r2, [r7, #24]
 800856c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800856e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008570:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008572:	6a3b      	ldr	r3, [r7, #32]
 8008574:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008576:	6a3b      	ldr	r3, [r7, #32]
 8008578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800857a:	429a      	cmp	r2, r3
 800857c:	d302      	bcc.n	8008584 <xQueueGenericSendFromISR+0x40>
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	2b02      	cmp	r3, #2
 8008582:	d124      	bne.n	80085ce <xQueueGenericSendFromISR+0x8a>
			/* A task can only have an inherited priority if it is a mutex
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  Therefore, unlike the xQueueGenericGive()
			function, there is no need to determine the need for priority
			disinheritance here or to clear the mutex holder TCB member. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008584:	6a38      	ldr	r0, [r7, #32]
 8008586:	68b9      	ldr	r1, [r7, #8]
 8008588:	683a      	ldr	r2, [r7, #0]
 800858a:	f000 fa07 	bl	800899c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 800858e:	6a3b      	ldr	r3, [r7, #32]
 8008590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008596:	d112      	bne.n	80085be <xQueueGenericSendFromISR+0x7a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008598:	6a3b      	ldr	r3, [r7, #32]
 800859a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800859c:	2b00      	cmp	r3, #0
 800859e:	d013      	beq.n	80085c8 <xQueueGenericSendFromISR+0x84>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085a0:	6a3b      	ldr	r3, [r7, #32]
 80085a2:	3324      	adds	r3, #36	; 0x24
 80085a4:	4618      	mov	r0, r3
 80085a6:	f7ff f815 	bl	80075d4 <xTaskRemoveFromEventList>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d00b      	beq.n	80085c8 <xQueueGenericSendFromISR+0x84>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d008      	beq.n	80085c8 <xQueueGenericSendFromISR+0x84>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2201      	movs	r2, #1
 80085ba:	601a      	str	r2, [r3, #0]
 80085bc:	e004      	b.n	80085c8 <xQueueGenericSendFromISR+0x84>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 80085be:	6a3b      	ldr	r3, [r7, #32]
 80085c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085c2:	1c5a      	adds	r2, r3, #1
 80085c4:	6a3b      	ldr	r3, [r7, #32]
 80085c6:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
 80085c8:	2301      	movs	r3, #1
 80085ca:	627b      	str	r3, [r7, #36]	; 0x24
 80085cc:	e001      	b.n	80085d2 <xQueueGenericSendFromISR+0x8e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80085ce:	2300      	movs	r3, #0
 80085d0:	627b      	str	r3, [r7, #36]	; 0x24
 80085d2:	69fb      	ldr	r3, [r7, #28]
 80085d4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80085dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3728      	adds	r7, #40	; 0x28
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop

080085e8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b088      	sub	sp, #32
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	61bb      	str	r3, [r7, #24]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80085f6:	f3ef 8211 	mrs	r2, BASEPRI
 80085fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085fe:	f383 8811 	msr	BASEPRI, r3
 8008602:	f3bf 8f6f 	isb	sy
 8008606:	f3bf 8f4f 	dsb	sy
 800860a:	613a      	str	r2, [r7, #16]
 800860c:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800860e:	693b      	ldr	r3, [r7, #16]
	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008610:	617b      	str	r3, [r7, #20]
	{
		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 8008612:	69bb      	ldr	r3, [r7, #24]
 8008614:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008616:	69bb      	ldr	r3, [r7, #24]
 8008618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800861a:	429a      	cmp	r2, r3
 800861c:	d224      	bcs.n	8008668 <xQueueGiveFromISR+0x80>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  Therefore, unlike the xQueueGenericGive()
			function, there is no need to determine the need for priority
			disinheritance here or to clear the mutex holder TCB member. */

			++( pxQueue->uxMessagesWaiting );
 800861e:	69bb      	ldr	r3, [r7, #24]
 8008620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008622:	1c5a      	adds	r2, r3, #1
 8008624:	69bb      	ldr	r3, [r7, #24]
 8008626:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 8008628:	69bb      	ldr	r3, [r7, #24]
 800862a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800862c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008630:	d112      	bne.n	8008658 <xQueueGiveFromISR+0x70>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008632:	69bb      	ldr	r3, [r7, #24]
 8008634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008636:	2b00      	cmp	r3, #0
 8008638:	d013      	beq.n	8008662 <xQueueGiveFromISR+0x7a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800863a:	69bb      	ldr	r3, [r7, #24]
 800863c:	3324      	adds	r3, #36	; 0x24
 800863e:	4618      	mov	r0, r3
 8008640:	f7fe ffc8 	bl	80075d4 <xTaskRemoveFromEventList>
 8008644:	4603      	mov	r3, r0
 8008646:	2b00      	cmp	r3, #0
 8008648:	d00b      	beq.n	8008662 <xQueueGiveFromISR+0x7a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d008      	beq.n	8008662 <xQueueGiveFromISR+0x7a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	2201      	movs	r2, #1
 8008654:	601a      	str	r2, [r3, #0]
 8008656:	e004      	b.n	8008662 <xQueueGiveFromISR+0x7a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 8008658:	69bb      	ldr	r3, [r7, #24]
 800865a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800865c:	1c5a      	adds	r2, r3, #1
 800865e:	69bb      	ldr	r3, [r7, #24]
 8008660:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
 8008662:	2301      	movs	r3, #1
 8008664:	61fb      	str	r3, [r7, #28]
 8008666:	e001      	b.n	800866c <xQueueGiveFromISR+0x84>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008668:	2300      	movs	r3, #0
 800866a:	61fb      	str	r3, [r7, #28]
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008676:	69fb      	ldr	r3, [r7, #28]
}
 8008678:	4618      	mov	r0, r3
 800867a:	3720      	adds	r7, #32
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b08a      	sub	sp, #40	; 0x28
 8008684:	af00      	add	r7, sp, #0
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	607a      	str	r2, [r7, #4]
 800868c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800868e:	2300      	movs	r3, #0
 8008690:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	623b      	str	r3, [r7, #32]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008696:	f000 fc23 	bl	8008ee0 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800869a:	6a3b      	ldr	r3, [r7, #32]
 800869c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d047      	beq.n	8008732 <xQueueGenericReceive+0xb2>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80086a2:	6a3b      	ldr	r3, [r7, #32]
 80086a4:	68db      	ldr	r3, [r3, #12]
 80086a6:	61fb      	str	r3, [r7, #28]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80086a8:	6a38      	ldr	r0, [r7, #32]
 80086aa:	68b9      	ldr	r1, [r7, #8]
 80086ac:	f000 f9e4 	bl	8008a78 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d122      	bne.n	80086fc <xQueueGenericReceive+0x7c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
 80086b6:	6a3b      	ldr	r3, [r7, #32]
 80086b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ba:	1e5a      	subs	r2, r3, #1
 80086bc:	6a3b      	ldr	r3, [r7, #32]
 80086be:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80086c0:	6a3b      	ldr	r3, [r7, #32]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d104      	bne.n	80086d2 <xQueueGenericReceive+0x52>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80086c8:	f7ff fb2c 	bl	8007d24 <pvTaskIncrementMutexHeldCount>
 80086cc:	4602      	mov	r2, r0
 80086ce:	6a3b      	ldr	r3, [r7, #32]
 80086d0:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086d2:	6a3b      	ldr	r3, [r7, #32]
 80086d4:	691b      	ldr	r3, [r3, #16]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d027      	beq.n	800872a <xQueueGenericReceive+0xaa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 80086da:	6a3b      	ldr	r3, [r7, #32]
 80086dc:	3310      	adds	r3, #16
 80086de:	4618      	mov	r0, r3
 80086e0:	f7fe ff78 	bl	80075d4 <xTaskRemoveFromEventList>
 80086e4:	4603      	mov	r3, r0
 80086e6:	2b01      	cmp	r3, #1
 80086e8:	d11f      	bne.n	800872a <xQueueGenericReceive+0xaa>
						{
							queueYIELD_IF_USING_PREEMPTION();
 80086ea:	4b4a      	ldr	r3, [pc, #296]	; (8008814 <xQueueGenericReceive+0x194>)
 80086ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086f0:	601a      	str	r2, [r3, #0]
 80086f2:	f3bf 8f4f 	dsb	sy
 80086f6:	f3bf 8f6f 	isb	sy
 80086fa:	e016      	b.n	800872a <xQueueGenericReceive+0xaa>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 80086fc:	6a3b      	ldr	r3, [r7, #32]
 80086fe:	69fa      	ldr	r2, [r7, #28]
 8008700:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008702:	6a3b      	ldr	r3, [r7, #32]
 8008704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008706:	2b00      	cmp	r3, #0
 8008708:	d00f      	beq.n	800872a <xQueueGenericReceive+0xaa>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800870a:	6a3b      	ldr	r3, [r7, #32]
 800870c:	3324      	adds	r3, #36	; 0x24
 800870e:	4618      	mov	r0, r3
 8008710:	f7fe ff60 	bl	80075d4 <xTaskRemoveFromEventList>
 8008714:	4603      	mov	r3, r0
 8008716:	2b00      	cmp	r3, #0
 8008718:	d007      	beq.n	800872a <xQueueGenericReceive+0xaa>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 800871a:	4b3e      	ldr	r3, [pc, #248]	; (8008814 <xQueueGenericReceive+0x194>)
 800871c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008720:	601a      	str	r2, [r3, #0]
 8008722:	f3bf 8f4f 	dsb	sy
 8008726:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 800872a:	f000 fbf1 	bl	8008f10 <vPortExitCritical>
				return pdPASS;
 800872e:	2301      	movs	r3, #1
 8008730:	e06c      	b.n	800880c <xQueueGenericReceive+0x18c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d103      	bne.n	8008740 <xQueueGenericReceive+0xc0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008738:	f000 fbea 	bl	8008f10 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800873c:	2300      	movs	r3, #0
 800873e:	e065      	b.n	800880c <xQueueGenericReceive+0x18c>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008742:	2b00      	cmp	r3, #0
 8008744:	d106      	bne.n	8008754 <xQueueGenericReceive+0xd4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8008746:	f107 0314 	add.w	r3, r7, #20
 800874a:	4618      	mov	r0, r3
 800874c:	f7fe ffde 	bl	800770c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008750:	2301      	movs	r3, #1
 8008752:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008754:	f000 fbdc 	bl	8008f10 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008758:	f7fe fca8 	bl	80070ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800875c:	f000 fbc0 	bl	8008ee0 <vPortEnterCritical>
 8008760:	6a3b      	ldr	r3, [r7, #32]
 8008762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008768:	d102      	bne.n	8008770 <xQueueGenericReceive+0xf0>
 800876a:	6a3b      	ldr	r3, [r7, #32]
 800876c:	2200      	movs	r2, #0
 800876e:	645a      	str	r2, [r3, #68]	; 0x44
 8008770:	6a3b      	ldr	r3, [r7, #32]
 8008772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008778:	d102      	bne.n	8008780 <xQueueGenericReceive+0x100>
 800877a:	6a3b      	ldr	r3, [r7, #32]
 800877c:	2200      	movs	r2, #0
 800877e:	649a      	str	r2, [r3, #72]	; 0x48
 8008780:	f000 fbc6 	bl	8008f10 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008784:	f107 0214 	add.w	r2, r7, #20
 8008788:	1d3b      	adds	r3, r7, #4
 800878a:	4610      	mov	r0, r2
 800878c:	4619      	mov	r1, r3
 800878e:	f7fe ffd3 	bl	8007738 <xTaskCheckForTimeOut>
 8008792:	4603      	mov	r3, r0
 8008794:	2b00      	cmp	r3, #0
 8008796:	d131      	bne.n	80087fc <xQueueGenericReceive+0x17c>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008798:	6a38      	ldr	r0, [r7, #32]
 800879a:	f000 f9df 	bl	8008b5c <prvIsQueueEmpty>
 800879e:	4603      	mov	r3, r0
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d025      	beq.n	80087f0 <xQueueGenericReceive+0x170>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80087a4:	6a3b      	ldr	r3, [r7, #32]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d108      	bne.n	80087be <xQueueGenericReceive+0x13e>
					{
						taskENTER_CRITICAL();
 80087ac:	f000 fb98 	bl	8008ee0 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80087b0:	6a3b      	ldr	r3, [r7, #32]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	4618      	mov	r0, r3
 80087b6:	f7ff f9c3 	bl	8007b40 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 80087ba:	f000 fba9 	bl	8008f10 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80087be:	6a3b      	ldr	r3, [r7, #32]
 80087c0:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	4610      	mov	r0, r2
 80087c8:	4619      	mov	r1, r3
 80087ca:	f7fe fe49 	bl	8007460 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80087ce:	6a38      	ldr	r0, [r7, #32]
 80087d0:	f000 f978 	bl	8008ac4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80087d4:	f7fe fc78 	bl	80070c8 <xTaskResumeAll>
 80087d8:	4603      	mov	r3, r0
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d115      	bne.n	800880a <xQueueGenericReceive+0x18a>
				{
					portYIELD_WITHIN_API();
 80087de:	4b0d      	ldr	r3, [pc, #52]	; (8008814 <xQueueGenericReceive+0x194>)
 80087e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087e4:	601a      	str	r2, [r3, #0]
 80087e6:	f3bf 8f4f 	dsb	sy
 80087ea:	f3bf 8f6f 	isb	sy
 80087ee:	e00c      	b.n	800880a <xQueueGenericReceive+0x18a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80087f0:	6a38      	ldr	r0, [r7, #32]
 80087f2:	f000 f967 	bl	8008ac4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80087f6:	f7fe fc67 	bl	80070c8 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 80087fa:	e74c      	b.n	8008696 <xQueueGenericReceive+0x16>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 80087fc:	6a38      	ldr	r0, [r7, #32]
 80087fe:	f000 f961 	bl	8008ac4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008802:	f7fe fc61 	bl	80070c8 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 8008806:	2300      	movs	r3, #0
 8008808:	e000      	b.n	800880c <xQueueGenericReceive+0x18c>
		}
	}
 800880a:	e744      	b.n	8008696 <xQueueGenericReceive+0x16>
}
 800880c:	4618      	mov	r0, r3
 800880e:	3728      	adds	r7, #40	; 0x28
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}
 8008814:	e000ed04 	.word	0xe000ed04

08008818 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b08a      	sub	sp, #40	; 0x28
 800881c:	af00      	add	r7, sp, #0
 800881e:	60f8      	str	r0, [r7, #12]
 8008820:	60b9      	str	r1, [r7, #8]
 8008822:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	623b      	str	r3, [r7, #32]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008828:	f3ef 8211 	mrs	r2, BASEPRI
 800882c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008830:	f383 8811 	msr	BASEPRI, r3
 8008834:	f3bf 8f6f 	isb	sy
 8008838:	f3bf 8f4f 	dsb	sy
 800883c:	61ba      	str	r2, [r7, #24]
 800883e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008840:	69bb      	ldr	r3, [r7, #24]
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008842:	61fb      	str	r3, [r7, #28]
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008844:	6a3b      	ldr	r3, [r7, #32]
 8008846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008848:	2b00      	cmp	r3, #0
 800884a:	d028      	beq.n	800889e <xQueueReceiveFromISR+0x86>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800884c:	6a38      	ldr	r0, [r7, #32]
 800884e:	68b9      	ldr	r1, [r7, #8]
 8008850:	f000 f912 	bl	8008a78 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 8008854:	6a3b      	ldr	r3, [r7, #32]
 8008856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008858:	1e5a      	subs	r2, r3, #1
 800885a:	6a3b      	ldr	r3, [r7, #32]
 800885c:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
 800885e:	6a3b      	ldr	r3, [r7, #32]
 8008860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008866:	d112      	bne.n	800888e <xQueueReceiveFromISR+0x76>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008868:	6a3b      	ldr	r3, [r7, #32]
 800886a:	691b      	ldr	r3, [r3, #16]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d013      	beq.n	8008898 <xQueueReceiveFromISR+0x80>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008870:	6a3b      	ldr	r3, [r7, #32]
 8008872:	3310      	adds	r3, #16
 8008874:	4618      	mov	r0, r3
 8008876:	f7fe fead 	bl	80075d4 <xTaskRemoveFromEventList>
 800887a:	4603      	mov	r3, r0
 800887c:	2b00      	cmp	r3, #0
 800887e:	d00b      	beq.n	8008898 <xQueueReceiveFromISR+0x80>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d008      	beq.n	8008898 <xQueueReceiveFromISR+0x80>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2201      	movs	r2, #1
 800888a:	601a      	str	r2, [r3, #0]
 800888c:	e004      	b.n	8008898 <xQueueReceiveFromISR+0x80>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
 800888e:	6a3b      	ldr	r3, [r7, #32]
 8008890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008892:	1c5a      	adds	r2, r3, #1
 8008894:	6a3b      	ldr	r3, [r7, #32]
 8008896:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008898:	2301      	movs	r3, #1
 800889a:	627b      	str	r3, [r7, #36]	; 0x24
 800889c:	e001      	b.n	80088a2 <xQueueReceiveFromISR+0x8a>
		}
		else
		{
			xReturn = pdFAIL;
 800889e:	2300      	movs	r3, #0
 80088a0:	627b      	str	r3, [r7, #36]	; 0x24
 80088a2:	69fb      	ldr	r3, [r7, #28]
 80088a4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80088ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3728      	adds	r7, #40	; 0x28
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
 80088b6:	bf00      	nop

080088b8 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b08a      	sub	sp, #40	; 0x28
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	623b      	str	r3, [r7, #32]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80088c6:	f3ef 8211 	mrs	r2, BASEPRI
 80088ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ce:	f383 8811 	msr	BASEPRI, r3
 80088d2:	f3bf 8f6f 	isb	sy
 80088d6:	f3bf 8f4f 	dsb	sy
 80088da:	617a      	str	r2, [r7, #20]
 80088dc:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80088de:	697b      	ldr	r3, [r7, #20]
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80088e0:	61fb      	str	r3, [r7, #28]
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 80088e2:	6a3b      	ldr	r3, [r7, #32]
 80088e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d00c      	beq.n	8008904 <xQueuePeekFromISR+0x4c>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80088ea:	6a3b      	ldr	r3, [r7, #32]
 80088ec:	68db      	ldr	r3, [r3, #12]
 80088ee:	61bb      	str	r3, [r7, #24]
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80088f0:	6a38      	ldr	r0, [r7, #32]
 80088f2:	6839      	ldr	r1, [r7, #0]
 80088f4:	f000 f8c0 	bl	8008a78 <prvCopyDataFromQueue>
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 80088f8:	6a3b      	ldr	r3, [r7, #32]
 80088fa:	69ba      	ldr	r2, [r7, #24]
 80088fc:	60da      	str	r2, [r3, #12]

			xReturn = pdPASS;
 80088fe:	2301      	movs	r3, #1
 8008900:	627b      	str	r3, [r7, #36]	; 0x24
 8008902:	e001      	b.n	8008908 <xQueuePeekFromISR+0x50>
		}
		else
		{
			xReturn = pdFAIL;
 8008904:	2300      	movs	r3, #0
 8008906:	627b      	str	r3, [r7, #36]	; 0x24
 8008908:	69fb      	ldr	r3, [r7, #28]
 800890a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008914:	4618      	mov	r0, r3
 8008916:	3728      	adds	r7, #40	; 0x28
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b084      	sub	sp, #16
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
 8008924:	f000 fadc 	bl	8008ee0 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800892c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800892e:	f000 faef 	bl	8008f10 <vPortExitCritical>

	return uxReturn;
 8008932:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008934:	4618      	mov	r0, r3
 8008936:	3710      	adds	r7, #16
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	60fb      	str	r3, [r7, #12]
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 8008948:	f000 faca 	bl	8008ee0 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008954:	1ad3      	subs	r3, r2, r3
 8008956:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
 8008958:	f000 fada 	bl	8008f10 <vPortExitCritical>

	return uxReturn;
 800895c:	68bb      	ldr	r3, [r7, #8]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800895e:	4618      	mov	r0, r3
 8008960:	3710      	adds	r7, #16
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
 8008966:	bf00      	nop

08008968 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8008968:	b480      	push	{r7}
 800896a:	b085      	sub	sp, #20
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008974:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 8008976:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008978:	4618      	mov	r0, r3
 800897a:	3714      	adds	r7, #20
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr

08008984 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b084      	sub	sp, #16
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	60fb      	str	r3, [r7, #12]
	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
	}
	#endif
	vPortFree( pxQueue );
 8008990:	68f8      	ldr	r0, [r7, #12]
 8008992:	f000 fbdd 	bl	8009150 <vPortFree>
}
 8008996:	3710      	adds	r7, #16
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b086      	sub	sp, #24
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	60f8      	str	r0, [r7, #12]
 80089a4:	60b9      	str	r1, [r7, #8]
 80089a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80089a8:	2300      	movs	r3, #0
 80089aa:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d10d      	bne.n	80089d0 <prvCopyDataToQueue+0x34>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d152      	bne.n	8008a62 <prvCopyDataToQueue+0xc6>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	4618      	mov	r0, r3
 80089c2:	f7ff f933 	bl	8007c2c <xTaskPriorityDisinherit>
 80089c6:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2200      	movs	r2, #0
 80089cc:	605a      	str	r2, [r3, #4]
 80089ce:	e048      	b.n	8008a62 <prvCopyDataToQueue+0xc6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d11a      	bne.n	8008a0c <prvCopyDataToQueue+0x70>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	689a      	ldr	r2, [r3, #8]
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089de:	4610      	mov	r0, r2
 80089e0:	68b9      	ldr	r1, [r7, #8]
 80089e2:	461a      	mov	r2, r3
 80089e4:	f000 fd27 	bl	8009436 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	689a      	ldr	r2, [r3, #8]
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089f0:	441a      	add	r2, r3
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	689a      	ldr	r2, [r3, #8]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d32f      	bcc.n	8008a62 <prvCopyDataToQueue+0xc6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	609a      	str	r2, [r3, #8]
 8008a0a:	e02a      	b.n	8008a62 <prvCopyDataToQueue+0xc6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	68da      	ldr	r2, [r3, #12]
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a14:	4610      	mov	r0, r2
 8008a16:	68b9      	ldr	r1, [r7, #8]
 8008a18:	461a      	mov	r2, r3
 8008a1a:	f000 fd0c 	bl	8009436 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	68da      	ldr	r2, [r3, #12]
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a26:	425b      	negs	r3, r3
 8008a28:	441a      	add	r2, r3
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	68da      	ldr	r2, [r3, #12]
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d207      	bcs.n	8008a4a <prvCopyDataToQueue+0xae>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	685a      	ldr	r2, [r3, #4]
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a42:	425b      	negs	r3, r3
 8008a44:	441a      	add	r2, r3
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2b02      	cmp	r3, #2
 8008a4e:	d108      	bne.n	8008a62 <prvCopyDataToQueue+0xc6>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d004      	beq.n	8008a62 <prvCopyDataToQueue+0xc6>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a5c:	1e5a      	subs	r2, r3, #1
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	639a      	str	r2, [r3, #56]	; 0x38
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a66:	1c5a      	adds	r2, r3, #1
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008a6c:	697b      	ldr	r3, [r7, #20]
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3718      	adds	r7, #24
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop

08008a78 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d019      	beq.n	8008abe <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	68da      	ldr	r2, [r3, #12]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a92:	441a      	add	r2, r3
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	68da      	ldr	r2, [r3, #12]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d303      	bcc.n	8008aac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681a      	ldr	r2, [r3, #0]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	68da      	ldr	r2, [r3, #12]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ab4:	6838      	ldr	r0, [r7, #0]
 8008ab6:	4611      	mov	r1, r2
 8008ab8:	461a      	mov	r2, r3
 8008aba:	f000 fcbc 	bl	8009436 <memcpy>
	}
}
 8008abe:	3708      	adds	r7, #8
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b082      	sub	sp, #8
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008acc:	f000 fa08 	bl	8008ee0 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8008ad0:	e014      	b.n	8008afc <prvUnlockQueue+0x38>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d00a      	beq.n	8008af0 <prvUnlockQueue+0x2c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	3324      	adds	r3, #36	; 0x24
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f7fe fd78 	bl	80075d4 <xTaskRemoveFromEventList>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d003      	beq.n	8008af2 <prvUnlockQueue+0x2e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 8008aea:	f7fe fe69 	bl	80077c0 <vTaskMissedYield>
 8008aee:	e000      	b.n	8008af2 <prvUnlockQueue+0x2e>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
 8008af0:	e008      	b.n	8008b04 <prvUnlockQueue+0x40>
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008af6:	1e5a      	subs	r2, r3, #1
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	dce6      	bgt.n	8008ad2 <prvUnlockQueue+0xe>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f04f 32ff 	mov.w	r2, #4294967295
 8008b0a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 8008b0c:	f000 fa00 	bl	8008f10 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008b10:	f000 f9e6 	bl	8008ee0 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8008b14:	e014      	b.n	8008b40 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	691b      	ldr	r3, [r3, #16]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00f      	beq.n	8008b3e <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	3310      	adds	r3, #16
 8008b22:	4618      	mov	r0, r3
 8008b24:	f7fe fd56 	bl	80075d4 <xTaskRemoveFromEventList>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d001      	beq.n	8008b32 <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
 8008b2e:	f7fe fe47 	bl	80077c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b36:	1e5a      	subs	r2, r3, #1
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	645a      	str	r2, [r3, #68]	; 0x44
 8008b3c:	e000      	b.n	8008b40 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
 8008b3e:	e003      	b.n	8008b48 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	dce6      	bgt.n	8008b16 <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8008b4e:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008b50:	f000 f9de 	bl	8008f10 <vPortExitCritical>
}
 8008b54:	3708      	adds	r7, #8
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}
 8008b5a:	bf00      	nop

08008b5c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008b64:	f000 f9bc 	bl	8008ee0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d102      	bne.n	8008b76 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008b70:	2301      	movs	r3, #1
 8008b72:	60fb      	str	r3, [r7, #12]
 8008b74:	e001      	b.n	8008b7a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008b76:	2300      	movs	r3, #0
 8008b78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008b7a:	f000 f9c9 	bl	8008f10 <vPortExitCritical>

	return xReturn;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3710      	adds	r7, #16
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b085      	sub	sp, #20
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d102      	bne.n	8008b9e <xQueueIsQueueEmptyFromISR+0x16>
	{
		xReturn = pdTRUE;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	60fb      	str	r3, [r7, #12]
 8008b9c:	e001      	b.n	8008ba2 <xQueueIsQueueEmptyFromISR+0x1a>
	}
	else
	{
		xReturn = pdFALSE;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3714      	adds	r7, #20
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008bb8:	f000 f992 	bl	8008ee0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d102      	bne.n	8008bce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	60fb      	str	r3, [r7, #12]
 8008bcc:	e001      	b.n	8008bd2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008bd2:	f000 f99d 	bl	8008f10 <vPortExitCritical>

	return xReturn;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3710      	adds	r7, #16
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8008be0:	b480      	push	{r7}
 8008be2:	b085      	sub	sp, #20
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d102      	bne.n	8008bfa <xQueueIsQueueFullFromISR+0x1a>
	{
		xReturn = pdTRUE;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	60fb      	str	r3, [r7, #12]
 8008bf8:	e001      	b.n	8008bfe <xQueueIsQueueFullFromISR+0x1e>
	}
	else
	{
		xReturn = pdFALSE;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008c00:	4618      	mov	r0, r3
 8008c02:	3714      	adds	r7, #20
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6039      	str	r1, [r7, #0]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	60fb      	str	r3, [r7, #12]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008c1a:	f000 f961 	bl	8008ee0 <vPortEnterCritical>
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c26:	d102      	bne.n	8008c2e <vQueueWaitForMessageRestricted+0x22>
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	645a      	str	r2, [r3, #68]	; 0x44
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c36:	d102      	bne.n	8008c3e <vQueueWaitForMessageRestricted+0x32>
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	649a      	str	r2, [r3, #72]	; 0x48
 8008c3e:	f000 f967 	bl	8008f10 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d105      	bne.n	8008c56 <vQueueWaitForMessageRestricted+0x4a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	3324      	adds	r3, #36	; 0x24
 8008c4e:	4618      	mov	r0, r3
 8008c50:	6839      	ldr	r1, [r7, #0]
 8008c52:	f7fe fc8d 	bl	8007570 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008c56:	68f8      	ldr	r0, [r7, #12]
 8008c58:	f7ff ff34 	bl	8008ac4 <prvUnlockQueue>
	}
 8008c5c:	3710      	adds	r7, #16
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop

08008c64 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008c64:	b480      	push	{r7}
 8008c66:	b083      	sub	sp, #12
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f103 0208 	add.w	r2, r3, #8
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f04f 32ff 	mov.w	r2, #4294967295
 8008c7c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f103 0208 	add.w	r2, r3, #8
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f103 0208 	add.w	r2, r3, #8
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2200      	movs	r2, #0
 8008c96:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008c98:	370c      	adds	r7, #12
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr
 8008ca2:	bf00      	nop

08008ca4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b083      	sub	sp, #12
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008cb2:	370c      	adds	r7, #12
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cba:	4770      	bx	lr

08008cbc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b085      	sub	sp, #20
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	68fa      	ldr	r2, [r7, #12]
 8008cd0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	689a      	ldr	r2, [r3, #8]
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	609a      	str	r2, [r3, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	683a      	ldr	r2, [r7, #0]
 8008ce0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	683a      	ldr	r2, [r7, #0]
 8008ce6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	687a      	ldr	r2, [r7, #4]
 8008cec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	1c5a      	adds	r2, r3, #1
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	601a      	str	r2, [r3, #0]
}
 8008cf8:	3714      	adds	r7, #20
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr
 8008d02:	bf00      	nop

08008d04 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008d04:	b480      	push	{r7}
 8008d06:	b085      	sub	sp, #20
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d1a:	d103      	bne.n	8008d24 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	691b      	ldr	r3, [r3, #16]
 8008d20:	60fb      	str	r3, [r7, #12]
 8008d22:	e00c      	b.n	8008d3e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	3308      	adds	r3, #8
 8008d28:	60fb      	str	r3, [r7, #12]
 8008d2a:	e002      	b.n	8008d32 <vListInsert+0x2e>
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	60fb      	str	r3, [r7, #12]
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	681a      	ldr	r2, [r3, #0]
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d9f6      	bls.n	8008d2c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	685a      	ldr	r2, [r3, #4]
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	683a      	ldr	r2, [r7, #0]
 8008d4c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	68fa      	ldr	r2, [r7, #12]
 8008d52:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	683a      	ldr	r2, [r7, #0]
 8008d58:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	1c5a      	adds	r2, r3, #1
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	601a      	str	r2, [r3, #0]
}
 8008d6a:	3714      	adds	r7, #20
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr

08008d74 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008d74:	b480      	push	{r7}
 8008d76:	b085      	sub	sp, #20
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	691b      	ldr	r3, [r3, #16]
 8008d80:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	687a      	ldr	r2, [r7, #4]
 8008d88:	6892      	ldr	r2, [r2, #8]
 8008d8a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	689b      	ldr	r3, [r3, #8]
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	6852      	ldr	r2, [r2, #4]
 8008d94:	605a      	str	r2, [r3, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	685a      	ldr	r2, [r3, #4]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d103      	bne.n	8008da8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	689a      	ldr	r2, [r3, #8]
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	1e5a      	subs	r2, r3, #1
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3714      	adds	r7, #20
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr

08008dc8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b085      	sub	sp, #20
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	60f8      	str	r0, [r7, #12]
 8008dd0:	60b9      	str	r1, [r7, #8]
 8008dd2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	3b04      	subs	r3, #4
 8008dd8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008de0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	3b04      	subs	r3, #4
 8008de6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8008de8:	68ba      	ldr	r2, [r7, #8]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	3b04      	subs	r3, #4
 8008df2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008df4:	4a0c      	ldr	r2, [pc, #48]	; (8008e28 <pxPortInitialiseStack+0x60>)
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	3b14      	subs	r3, #20
 8008dfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	3b04      	subs	r3, #4
 8008e0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f06f 0202 	mvn.w	r2, #2
 8008e12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	3b20      	subs	r3, #32
 8008e18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3714      	adds	r7, #20
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr
 8008e28:	08008e2d 	.word	0x08008e2d

08008e2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b083      	sub	sp, #12
 8008e30:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e36:	f383 8811 	msr	BASEPRI, r3
 8008e3a:	f3bf 8f6f 	isb	sy
 8008e3e:	f3bf 8f4f 	dsb	sy
 8008e42:	607b      	str	r3, [r7, #4]

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	for( ;; );
 8008e44:	e7fe      	b.n	8008e44 <prvTaskExitError+0x18>
 8008e46:	bf00      	nop

08008e48 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008e48:	4b06      	ldr	r3, [pc, #24]	; (8008e64 <pxCurrentTCBConst2>)
 8008e4a:	6819      	ldr	r1, [r3, #0]
 8008e4c:	6808      	ldr	r0, [r1, #0]
 8008e4e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e52:	f380 8809 	msr	PSP, r0
 8008e56:	f3bf 8f6f 	isb	sy
 8008e5a:	f04f 0000 	mov.w	r0, #0
 8008e5e:	f380 8811 	msr	BASEPRI, r0
 8008e62:	4770      	bx	lr

08008e64 <pxCurrentTCBConst2>:
 8008e64:	200000cc 	.word	0x200000cc

08008e68 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008e68:	486b      	ldr	r0, [pc, #428]	; (8009018 <vPortEnableVFP+0x10>)
 8008e6a:	6800      	ldr	r0, [r0, #0]
 8008e6c:	6800      	ldr	r0, [r0, #0]
 8008e6e:	f380 8808 	msr	MSP, r0
 8008e72:	b662      	cpsie	i
 8008e74:	b661      	cpsie	f
 8008e76:	f3bf 8f4f 	dsb	sy
 8008e7a:	f3bf 8f6f 	isb	sy
 8008e7e:	df00      	svc	0
 8008e80:	bf00      	nop
 8008e82:	bf00      	nop

08008e84 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008e88:	4b0f      	ldr	r3, [pc, #60]	; (8008ec8 <xPortStartScheduler+0x44>)
 8008e8a:	4a0f      	ldr	r2, [pc, #60]	; (8008ec8 <xPortStartScheduler+0x44>)
 8008e8c:	6812      	ldr	r2, [r2, #0]
 8008e8e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8008e92:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008e94:	4b0c      	ldr	r3, [pc, #48]	; (8008ec8 <xPortStartScheduler+0x44>)
 8008e96:	4a0c      	ldr	r2, [pc, #48]	; (8008ec8 <xPortStartScheduler+0x44>)
 8008e98:	6812      	ldr	r2, [r2, #0]
 8008e9a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8008e9e:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008ea0:	f000 f8a0 	bl	8008fe4 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008ea4:	4b09      	ldr	r3, [pc, #36]	; (8008ecc <xPortStartScheduler+0x48>)
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008eaa:	f000 f8ad 	bl	8009008 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008eae:	4b08      	ldr	r3, [pc, #32]	; (8008ed0 <xPortStartScheduler+0x4c>)
 8008eb0:	4a07      	ldr	r2, [pc, #28]	; (8008ed0 <xPortStartScheduler+0x4c>)
 8008eb2:	6812      	ldr	r2, [r2, #0]
 8008eb4:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8008eb8:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008eba:	f7ff ffd5 	bl	8008e68 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8008ebe:	f7ff ffb5 	bl	8008e2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008ec2:	2300      	movs	r3, #0
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	bd80      	pop	{r7, pc}
 8008ec8:	e000ed20 	.word	0xe000ed20
 8008ecc:	2000004c 	.word	0x2000004c
 8008ed0:	e000ef34 	.word	0xe000ef34

08008ed4 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	af00      	add	r7, sp, #0
	/* Not implemented in ports where there is nothing to return to.
	Artificially force an assert. */
	configASSERT( uxCriticalNesting == 1000UL );
}
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr

08008ee0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b083      	sub	sp, #12
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eea:	f383 8811 	msr	BASEPRI, r3
 8008eee:	f3bf 8f6f 	isb	sy
 8008ef2:	f3bf 8f4f 	dsb	sy
 8008ef6:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008ef8:	4b04      	ldr	r3, [pc, #16]	; (8008f0c <vPortEnterCritical+0x2c>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	1c5a      	adds	r2, r3, #1
 8008efe:	4b03      	ldr	r3, [pc, #12]	; (8008f0c <vPortEnterCritical+0x2c>)
 8008f00:	601a      	str	r2, [r3, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr
 8008f0c:	2000004c 	.word	0x2000004c

08008f10 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 8008f16:	4b09      	ldr	r3, [pc, #36]	; (8008f3c <vPortExitCritical+0x2c>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	1e5a      	subs	r2, r3, #1
 8008f1c:	4b07      	ldr	r3, [pc, #28]	; (8008f3c <vPortExitCritical+0x2c>)
 8008f1e:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8008f20:	4b06      	ldr	r3, [pc, #24]	; (8008f3c <vPortExitCritical+0x2c>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d104      	bne.n	8008f32 <vPortExitCritical+0x22>
 8008f28:	2300      	movs	r3, #0
 8008f2a:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008f32:	370c      	adds	r7, #12
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr
 8008f3c:	2000004c 	.word	0x2000004c

08008f40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008f40:	f3ef 8009 	mrs	r0, PSP
 8008f44:	f3bf 8f6f 	isb	sy
 8008f48:	4b14      	ldr	r3, [pc, #80]	; (8008f9c <pxCurrentTCBConst>)
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	f01e 0f10 	tst.w	lr, #16
 8008f50:	bf08      	it	eq
 8008f52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008f56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f5a:	6010      	str	r0, [r2, #0]
 8008f5c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8008f60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008f64:	f380 8811 	msr	BASEPRI, r0
 8008f68:	f3bf 8f4f 	dsb	sy
 8008f6c:	f3bf 8f6f 	isb	sy
 8008f70:	f7fe fa0c 	bl	800738c <vTaskSwitchContext>
 8008f74:	f04f 0000 	mov.w	r0, #0
 8008f78:	f380 8811 	msr	BASEPRI, r0
 8008f7c:	bc08      	pop	{r3}
 8008f7e:	6819      	ldr	r1, [r3, #0]
 8008f80:	6808      	ldr	r0, [r1, #0]
 8008f82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f86:	f01e 0f10 	tst.w	lr, #16
 8008f8a:	bf08      	it	eq
 8008f8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008f90:	f380 8809 	msr	PSP, r0
 8008f94:	f3bf 8f6f 	isb	sy
 8008f98:	4770      	bx	lr
 8008f9a:	bf00      	nop

08008f9c <pxCurrentTCBConst>:
 8008f9c:	200000cc 	.word	0x200000cc

08008fa0 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b084      	sub	sp, #16
 8008fa4:	af00      	add	r7, sp, #0

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008fa6:	f3ef 8211 	mrs	r2, BASEPRI
 8008faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fae:	f383 8811 	msr	BASEPRI, r3
 8008fb2:	f3bf 8f6f 	isb	sy
 8008fb6:	f3bf 8f4f 	dsb	sy
 8008fba:	60fa      	str	r2, [r7, #12]
 8008fbc:	60bb      	str	r3, [r7, #8]
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008fbe:	f7fe f937 	bl	8007230 <xTaskIncrementTick>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d003      	beq.n	8008fd0 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008fc8:	4b05      	ldr	r3, [pc, #20]	; (8008fe0 <SysTick_Handler+0x40>)
 8008fca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fce:	601a      	str	r2, [r3, #0]
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
}
 8008fda:	3710      	adds	r7, #16
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}
 8008fe0:	e000ed04 	.word	0xe000ed04

08008fe4 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008fe8:	4b04      	ldr	r3, [pc, #16]	; (8008ffc <vPortSetupTimerInterrupt+0x18>)
 8008fea:	4a05      	ldr	r2, [pc, #20]	; (8009000 <vPortSetupTimerInterrupt+0x1c>)
 8008fec:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008fee:	4b05      	ldr	r3, [pc, #20]	; (8009004 <vPortSetupTimerInterrupt+0x20>)
 8008ff0:	2207      	movs	r2, #7
 8008ff2:	601a      	str	r2, [r3, #0]
}
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr
 8008ffc:	e000e014 	.word	0xe000e014
 8009000:	0002903f 	.word	0x0002903f
 8009004:	e000e010 	.word	0xe000e010

08009008 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009008:	f8df 0010 	ldr.w	r0, [pc, #16]	; 800901c <vPortEnableVFP+0x14>
 800900c:	6801      	ldr	r1, [r0, #0]
 800900e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009012:	6001      	str	r1, [r0, #0]
 8009014:	4770      	bx	lr
 8009016:	0000      	.short	0x0000
 8009018:	e000ed08 	.word	0xe000ed08
 800901c:	e000ed88 	.word	0xe000ed88

08009020 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b086      	sub	sp, #24
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009028:	2300      	movs	r3, #0
 800902a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800902c:	f7fe f83e 	bl	80070ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009030:	4b42      	ldr	r3, [pc, #264]	; (800913c <pvPortMalloc+0x11c>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d101      	bne.n	800903c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009038:	f000 f8e0 	bl	80091fc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800903c:	4b40      	ldr	r3, [pc, #256]	; (8009140 <pvPortMalloc+0x120>)
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	4013      	ands	r3, r2
 8009044:	2b00      	cmp	r3, #0
 8009046:	d16d      	bne.n	8009124 <pvPortMalloc+0x104>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d00d      	beq.n	800906a <pvPortMalloc+0x4a>
			{
				xWantedSize += xHeapStructSize;
 800904e:	2308      	movs	r3, #8
 8009050:	687a      	ldr	r2, [r7, #4]
 8009052:	4413      	add	r3, r2
 8009054:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f003 0307 	and.w	r3, r3, #7
 800905c:	2b00      	cmp	r3, #0
 800905e:	d004      	beq.n	800906a <pvPortMalloc+0x4a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f023 0307 	bic.w	r3, r3, #7
 8009066:	3308      	adds	r3, #8
 8009068:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d059      	beq.n	8009124 <pvPortMalloc+0x104>
 8009070:	4b34      	ldr	r3, [pc, #208]	; (8009144 <pvPortMalloc+0x124>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	429a      	cmp	r2, r3
 8009078:	d854      	bhi.n	8009124 <pvPortMalloc+0x104>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800907a:	4b33      	ldr	r3, [pc, #204]	; (8009148 <pvPortMalloc+0x128>)
 800907c:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800907e:	4b32      	ldr	r3, [pc, #200]	; (8009148 <pvPortMalloc+0x128>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009084:	e004      	b.n	8009090 <pvPortMalloc+0x70>
				{
					pxPreviousBlock = pxBlock;
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	617b      	str	r3, [r7, #20]
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	685a      	ldr	r2, [r3, #4]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	429a      	cmp	r2, r3
 8009098:	d203      	bcs.n	80090a2 <pvPortMalloc+0x82>
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d1f1      	bne.n	8009086 <pvPortMalloc+0x66>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80090a2:	4b26      	ldr	r3, [pc, #152]	; (800913c <pvPortMalloc+0x11c>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	697a      	ldr	r2, [r7, #20]
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d03b      	beq.n	8009124 <pvPortMalloc+0x104>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	2308      	movs	r3, #8
 80090b2:	4413      	add	r3, r2
 80090b4:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	685a      	ldr	r2, [r3, #4]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	1ad2      	subs	r2, r2, r3
 80090c6:	2308      	movs	r3, #8
 80090c8:	005b      	lsls	r3, r3, #1
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d90f      	bls.n	80090ee <pvPortMalloc+0xce>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80090ce:	697a      	ldr	r2, [r7, #20]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	4413      	add	r3, r2
 80090d4:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	685a      	ldr	r2, [r3, #4]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	1ad2      	subs	r2, r2, r3
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 80090e8:	68b8      	ldr	r0, [r7, #8]
 80090ea:	f000 f8e9 	bl	80092c0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80090ee:	4b15      	ldr	r3, [pc, #84]	; (8009144 <pvPortMalloc+0x124>)
 80090f0:	681a      	ldr	r2, [r3, #0]
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	1ad2      	subs	r2, r2, r3
 80090f8:	4b12      	ldr	r3, [pc, #72]	; (8009144 <pvPortMalloc+0x124>)
 80090fa:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80090fc:	4b11      	ldr	r3, [pc, #68]	; (8009144 <pvPortMalloc+0x124>)
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	4b12      	ldr	r3, [pc, #72]	; (800914c <pvPortMalloc+0x12c>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	429a      	cmp	r2, r3
 8009106:	d203      	bcs.n	8009110 <pvPortMalloc+0xf0>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009108:	4b0e      	ldr	r3, [pc, #56]	; (8009144 <pvPortMalloc+0x124>)
 800910a:	681a      	ldr	r2, [r3, #0]
 800910c:	4b0f      	ldr	r3, [pc, #60]	; (800914c <pvPortMalloc+0x12c>)
 800910e:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	685a      	ldr	r2, [r3, #4]
 8009114:	4b0a      	ldr	r3, [pc, #40]	; (8009140 <pvPortMalloc+0x120>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	431a      	orrs	r2, r3
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	2200      	movs	r2, #0
 8009122:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009124:	f7fd ffd0 	bl	80070c8 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d101      	bne.n	8009132 <pvPortMalloc+0x112>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800912e:	f7f8 fce9 	bl	8001b04 <vApplicationMallocFailedHook>
		}
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
 8009132:	68fb      	ldr	r3, [r7, #12]
}
 8009134:	4618      	mov	r0, r3
 8009136:	3718      	adds	r7, #24
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}
 800913c:	2001c1d0 	.word	0x2001c1d0
 8009140:	2001c1dc 	.word	0x2001c1dc
 8009144:	2001c1d4 	.word	0x2001c1d4
 8009148:	2001c1c8 	.word	0x2001c1c8
 800914c:	2001c1d8 	.word	0x2001c1d8

08009150 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d027      	beq.n	80091b2 <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009162:	2308      	movs	r3, #8
 8009164:	425b      	negs	r3, r3
 8009166:	68fa      	ldr	r2, [r7, #12]
 8009168:	4413      	add	r3, r2
 800916a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	685a      	ldr	r2, [r3, #4]
 8009174:	4b10      	ldr	r3, [pc, #64]	; (80091b8 <vPortFree+0x68>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4013      	ands	r3, r2
 800917a:	2b00      	cmp	r3, #0
 800917c:	d019      	beq.n	80091b2 <vPortFree+0x62>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d115      	bne.n	80091b2 <vPortFree+0x62>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	685a      	ldr	r2, [r3, #4]
 800918a:	4b0b      	ldr	r3, [pc, #44]	; (80091b8 <vPortFree+0x68>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	43db      	mvns	r3, r3
 8009190:	401a      	ands	r2, r3
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009196:	f7fd ff89 	bl	80070ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	685a      	ldr	r2, [r3, #4]
 800919e:	4b07      	ldr	r3, [pc, #28]	; (80091bc <vPortFree+0x6c>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	441a      	add	r2, r3
 80091a4:	4b05      	ldr	r3, [pc, #20]	; (80091bc <vPortFree+0x6c>)
 80091a6:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80091a8:	68b8      	ldr	r0, [r7, #8]
 80091aa:	f000 f889 	bl	80092c0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80091ae:	f7fd ff8b 	bl	80070c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80091b2:	3710      	adds	r7, #16
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}
 80091b8:	2001c1dc 	.word	0x2001c1dc
 80091bc:	2001c1d4 	.word	0x2001c1d4

080091c0 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 80091c0:	b480      	push	{r7}
 80091c2:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 80091c4:	4b03      	ldr	r3, [pc, #12]	; (80091d4 <xPortGetFreeHeapSize+0x14>)
 80091c6:	681b      	ldr	r3, [r3, #0]
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr
 80091d2:	bf00      	nop
 80091d4:	2001c1d4 	.word	0x2001c1d4

080091d8 <xPortGetMinimumEverFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
 80091d8:	b480      	push	{r7}
 80091da:	af00      	add	r7, sp, #0
	return xMinimumEverFreeBytesRemaining;
 80091dc:	4b03      	ldr	r3, [pc, #12]	; (80091ec <xPortGetMinimumEverFreeHeapSize+0x14>)
 80091de:	681b      	ldr	r3, [r3, #0]
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	46bd      	mov	sp, r7
 80091e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e8:	4770      	bx	lr
 80091ea:	bf00      	nop
 80091ec:	2001c1d8 	.word	0x2001c1d8

080091f0 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
 80091f0:	b480      	push	{r7}
 80091f2:	af00      	add	r7, sp, #0
	/* This just exists to keep the linker quiet. */
}
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80091fc:	b480      	push	{r7}
 80091fe:	b085      	sub	sp, #20
 8009200:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
uint32_t ulAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009202:	f44f 33e0 	mov.w	r3, #114688	; 0x1c000
 8009206:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	ulAddress = ( uint32_t ) ucHeap;
 8009208:	4b27      	ldr	r3, [pc, #156]	; (80092a8 <prvHeapInit+0xac>)
 800920a:	60fb      	str	r3, [r7, #12]

	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f003 0307 	and.w	r3, r3, #7
 8009212:	2b00      	cmp	r3, #0
 8009214:	d00c      	beq.n	8009230 <prvHeapInit+0x34>
	{
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	3307      	adds	r3, #7
 800921a:	60fb      	str	r3, [r7, #12]
		ulAddress &= ~portBYTE_ALIGNMENT_MASK;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f023 0307 	bic.w	r3, r3, #7
 8009222:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
 8009224:	68ba      	ldr	r2, [r7, #8]
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	1ad2      	subs	r2, r2, r3
 800922a:	4b1f      	ldr	r3, [pc, #124]	; (80092a8 <prvHeapInit+0xac>)
 800922c:	4413      	add	r3, r2
 800922e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) ulAddress;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009234:	4b1d      	ldr	r3, [pc, #116]	; (80092ac <prvHeapInit+0xb0>)
 8009236:	687a      	ldr	r2, [r7, #4]
 8009238:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800923a:	4b1c      	ldr	r3, [pc, #112]	; (80092ac <prvHeapInit+0xb0>)
 800923c:	2200      	movs	r2, #0
 800923e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	4413      	add	r3, r2
 8009246:	60fb      	str	r3, [r7, #12]
	ulAddress -= xHeapStructSize;
 8009248:	2308      	movs	r3, #8
 800924a:	68fa      	ldr	r2, [r7, #12]
 800924c:	1ad3      	subs	r3, r2, r3
 800924e:	60fb      	str	r3, [r7, #12]
	ulAddress &= ~portBYTE_ALIGNMENT_MASK;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f023 0307 	bic.w	r3, r3, #7
 8009256:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) ulAddress;
 8009258:	68fa      	ldr	r2, [r7, #12]
 800925a:	4b15      	ldr	r3, [pc, #84]	; (80092b0 <prvHeapInit+0xb4>)
 800925c:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800925e:	4b14      	ldr	r3, [pc, #80]	; (80092b0 <prvHeapInit+0xb4>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	2200      	movs	r2, #0
 8009264:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009266:	4b12      	ldr	r3, [pc, #72]	; (80092b0 <prvHeapInit+0xb4>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2200      	movs	r2, #0
 800926c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	68fa      	ldr	r2, [r7, #12]
 8009276:	1ad2      	subs	r2, r2, r3
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800927c:	4b0c      	ldr	r3, [pc, #48]	; (80092b0 <prvHeapInit+0xb4>)
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	685a      	ldr	r2, [r3, #4]
 8009288:	4b0a      	ldr	r3, [pc, #40]	; (80092b4 <prvHeapInit+0xb8>)
 800928a:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	685a      	ldr	r2, [r3, #4]
 8009290:	4b09      	ldr	r3, [pc, #36]	; (80092b8 <prvHeapInit+0xbc>)
 8009292:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009294:	4b09      	ldr	r3, [pc, #36]	; (80092bc <prvHeapInit+0xc0>)
 8009296:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800929a:	601a      	str	r2, [r3, #0]
}
 800929c:	3714      	adds	r7, #20
 800929e:	46bd      	mov	sp, r7
 80092a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a4:	4770      	bx	lr
 80092a6:	bf00      	nop
 80092a8:	200001c8 	.word	0x200001c8
 80092ac:	2001c1c8 	.word	0x2001c1c8
 80092b0:	2001c1d0 	.word	0x2001c1d0
 80092b4:	2001c1d8 	.word	0x2001c1d8
 80092b8:	2001c1d4 	.word	0x2001c1d4
 80092bc:	2001c1dc 	.word	0x2001c1dc

080092c0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80092c0:	b480      	push	{r7}
 80092c2:	b085      	sub	sp, #20
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80092c8:	4b27      	ldr	r3, [pc, #156]	; (8009368 <prvInsertBlockIntoFreeList+0xa8>)
 80092ca:	60fb      	str	r3, [r7, #12]
 80092cc:	e002      	b.n	80092d4 <prvInsertBlockIntoFreeList+0x14>
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	60fb      	str	r3, [r7, #12]
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681a      	ldr	r2, [r3, #0]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	429a      	cmp	r2, r3
 80092dc:	d3f7      	bcc.n	80092ce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	68ba      	ldr	r2, [r7, #8]
 80092e8:	441a      	add	r2, r3
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d108      	bne.n	8009302 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	685a      	ldr	r2, [r3, #4]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	441a      	add	r2, r3
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	685b      	ldr	r3, [r3, #4]
 800930a:	68ba      	ldr	r2, [r7, #8]
 800930c:	441a      	add	r2, r3
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	429a      	cmp	r2, r3
 8009314:	d118      	bne.n	8009348 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	4b14      	ldr	r3, [pc, #80]	; (800936c <prvInsertBlockIntoFreeList+0xac>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	429a      	cmp	r2, r3
 8009320:	d00d      	beq.n	800933e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	685a      	ldr	r2, [r3, #4]
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	441a      	add	r2, r3
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	681a      	ldr	r2, [r3, #0]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	601a      	str	r2, [r3, #0]
 800933c:	e008      	b.n	8009350 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800933e:	4b0b      	ldr	r3, [pc, #44]	; (800936c <prvInsertBlockIntoFreeList+0xac>)
 8009340:	681a      	ldr	r2, [r3, #0]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	601a      	str	r2, [r3, #0]
 8009346:	e003      	b.n	8009350 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009350:	68fa      	ldr	r2, [r7, #12]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	429a      	cmp	r2, r3
 8009356:	d002      	beq.n	800935e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	687a      	ldr	r2, [r7, #4]
 800935c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800935e:	3714      	adds	r7, #20
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr
 8009368:	2001c1c8 	.word	0x2001c1c8
 800936c:	2001c1d0 	.word	0x2001c1d0

08009370 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8009370:	f8df d03c 	ldr.w	sp, [pc, #60]	; 80093b0 <LoopFillZerobss+0x16>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009374:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009376:	f000 b804 	b.w	8009382 <LoopCopyDataInit>

0800937a <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800937a:	4b0e      	ldr	r3, [pc, #56]	; (80093b4 <LoopFillZerobss+0x1a>)
  ldr  r3, [r3, r1]
 800937c:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800937e:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009380:	3104      	adds	r1, #4

08009382 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009382:	480d      	ldr	r0, [pc, #52]	; (80093b8 <LoopFillZerobss+0x1e>)
  ldr  r3, =_edata
 8009384:	4b0d      	ldr	r3, [pc, #52]	; (80093bc <LoopFillZerobss+0x22>)
  adds  r2, r0, r1
 8009386:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009388:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800938a:	f4ff aff6 	bcc.w	800937a <CopyDataInit>
  ldr  r2, =_sbss
 800938e:	4a0c      	ldr	r2, [pc, #48]	; (80093c0 <LoopFillZerobss+0x26>)
  b  LoopFillZerobss
 8009390:	f000 b803 	b.w	800939a <LoopFillZerobss>

08009394 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009394:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009396:	f842 3b04 	str.w	r3, [r2], #4

0800939a <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800939a:	4b0a      	ldr	r3, [pc, #40]	; (80093c4 <LoopFillZerobss+0x2a>)
  cmp  r2, r3
 800939c:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800939e:	f4ff aff9 	bcc.w	8009394 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80093a2:	f7f7 f8ad 	bl	8000500 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80093a6:	f000 f811 	bl	80093cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80093aa:	f7f8 f97b 	bl	80016a4 <main>
  bx  lr    
 80093ae:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80093b0:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 80093b4:	08009504 	.word	0x08009504
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80093b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80093bc:	20000050 	.word	0x20000050
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 80093c0:	20000050 	.word	0x20000050
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80093c4:	2001c268 	.word	0x2001c268

080093c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80093c8:	f7ff bffe 	b.w	80093c8 <ADC_IRQHandler>

080093cc <__libc_init_array>:
 80093cc:	b570      	push	{r4, r5, r6, lr}
 80093ce:	4b0e      	ldr	r3, [pc, #56]	; (8009408 <__libc_init_array+0x3c>)
 80093d0:	4d0e      	ldr	r5, [pc, #56]	; (800940c <__libc_init_array+0x40>)
 80093d2:	1aed      	subs	r5, r5, r3
 80093d4:	10ad      	asrs	r5, r5, #2
 80093d6:	2400      	movs	r4, #0
 80093d8:	461e      	mov	r6, r3
 80093da:	42ac      	cmp	r4, r5
 80093dc:	d004      	beq.n	80093e8 <__libc_init_array+0x1c>
 80093de:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80093e2:	4790      	blx	r2
 80093e4:	3401      	adds	r4, #1
 80093e6:	e7f8      	b.n	80093da <__libc_init_array+0xe>
 80093e8:	f000 f836 	bl	8009458 <_init>
 80093ec:	4d08      	ldr	r5, [pc, #32]	; (8009410 <__libc_init_array+0x44>)
 80093ee:	4b09      	ldr	r3, [pc, #36]	; (8009414 <__libc_init_array+0x48>)
 80093f0:	1aed      	subs	r5, r5, r3
 80093f2:	10ad      	asrs	r5, r5, #2
 80093f4:	2400      	movs	r4, #0
 80093f6:	461e      	mov	r6, r3
 80093f8:	42ac      	cmp	r4, r5
 80093fa:	d004      	beq.n	8009406 <__libc_init_array+0x3a>
 80093fc:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009400:	4790      	blx	r2
 8009402:	3401      	adds	r4, #1
 8009404:	e7f8      	b.n	80093f8 <__libc_init_array+0x2c>
 8009406:	bd70      	pop	{r4, r5, r6, pc}
 8009408:	080094fc 	.word	0x080094fc
 800940c:	080094fc 	.word	0x080094fc
 8009410:	08009500 	.word	0x08009500
 8009414:	080094fc 	.word	0x080094fc

08009418 <memcmp>:
 8009418:	b530      	push	{r4, r5, lr}
 800941a:	2300      	movs	r3, #0
 800941c:	4293      	cmp	r3, r2
 800941e:	d008      	beq.n	8009432 <memcmp+0x1a>
 8009420:	5cc5      	ldrb	r5, [r0, r3]
 8009422:	3301      	adds	r3, #1
 8009424:	18cc      	adds	r4, r1, r3
 8009426:	f814 4c01 	ldrb.w	r4, [r4, #-1]
 800942a:	42a5      	cmp	r5, r4
 800942c:	d0f6      	beq.n	800941c <memcmp+0x4>
 800942e:	1b28      	subs	r0, r5, r4
 8009430:	bd30      	pop	{r4, r5, pc}
 8009432:	2000      	movs	r0, #0
 8009434:	bd30      	pop	{r4, r5, pc}

08009436 <memcpy>:
 8009436:	b510      	push	{r4, lr}
 8009438:	2300      	movs	r3, #0
 800943a:	4293      	cmp	r3, r2
 800943c:	d003      	beq.n	8009446 <memcpy+0x10>
 800943e:	5ccc      	ldrb	r4, [r1, r3]
 8009440:	54c4      	strb	r4, [r0, r3]
 8009442:	3301      	adds	r3, #1
 8009444:	e7f9      	b.n	800943a <memcpy+0x4>
 8009446:	bd10      	pop	{r4, pc}

08009448 <memset>:
 8009448:	4402      	add	r2, r0
 800944a:	4603      	mov	r3, r0
 800944c:	4293      	cmp	r3, r2
 800944e:	d002      	beq.n	8009456 <memset+0xe>
 8009450:	f803 1b01 	strb.w	r1, [r3], #1
 8009454:	e7fa      	b.n	800944c <memset+0x4>
 8009456:	4770      	bx	lr

08009458 <_init>:
 8009458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800945a:	bf00      	nop
 800945c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800945e:	bc08      	pop	{r3}
 8009460:	469e      	mov	lr, r3
 8009462:	4770      	bx	lr

08009464 <_fini>:
 8009464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009466:	bf00      	nop
 8009468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800946a:	bc08      	pop	{r3}
 800946c:	469e      	mov	lr, r3
 800946e:	4770      	bx	lr
