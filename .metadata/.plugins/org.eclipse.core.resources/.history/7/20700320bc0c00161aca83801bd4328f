/*
 * motor.c
 *
 *  Created on: Feb 28, 2016
 *      Author: Parker
 */

#include "motor.h"


/*********************************************************************************************
 * Set the motor output and speed
 *********************************************************************************************/
uint8_t setMotor( MotorOutput motor_output, uint8_t speed ) {

	switch( motor_output ) {
			case coast:
				pwmSet(0, motor1);
				pwmSet(0, motor2);
				break;
			case reverse:
				pwmSet(0, motor1);
				pwmSet(speed, motor2);
				break;
			case forward:
				pwmSet(speed, motor1);
				pwmSet(0, motor2);
				break;
			case brake:
				pwmSet(1, motor1);
				pwmSet(1, motor2);
				break;
	}

	return SUCCESS;
}


/*********************************************************************************************
 * Set PWM to given duty cycle
 *********************************************************************************************/
void pwmSet(uint8_t dutyCycle, Motor motor) {
	// Timer output compare initialization
	TIM_OCInitTypeDef TIM_OC_InitStructure;

	// Configure TIM OC
	TIM_OC_InitStructure.TIM_OCMode = TIM_OCMode_PWM2;					// PWM 1 = Clear on match, PWM 2 = Set on match
	TIM_OC_InitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OC_InitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;

	// Convert duty cycle to TIM pulse
	uint32_t duty = (PWM_TIM_PERIOD + 1) * dutyCycle;
	duty = (uint32_t) ((duty/100));

	// Set duty cycle
	TIM_OC_InitStructure.TIM_Pulse = duty;

	// Select the corresponding OCInit function
	switch( motor ) {
		case motor1:
			TIM_OC2Init(PWM_TIM, &TIM_OC_InitStructure);
			TIM_OC2PreloadConfig(PWM_TIM, TIM_OCPreload_Enable);
			break;
		case motor2:
			TIM_OC3Init(PWM_TIM, &TIM_OC_InitStructure);
			TIM_OC3PreloadConfig(PWM_TIM, TIM_OCPreload_Enable);
			break;
		case servo:
			TIM_OC4Init(PWM_TIM, &TIM_OC_InitStructure);
			TIM_OC4PreloadConfig(PWM_TIM, TIM_OCPreload_Enable);
			break;
		default:
			break;
	}
}


/*********************************************************************************************
 * Timer callback to read photo resistors
 *********************************************************************************************/
void prvSetMotorCallback( TimerHandle_t pxTimer ) {
	// Prevent changes from ultrasonic happening too quickly
	static uint8_t ultra_left_counter = 2;
	static uint8_t ultra_right_counter = 2;

	// Use software offset to straighten the servo
	static int8_t offset = 0;


	// Consider current state
	if( my_mode == mode2 ) {
		switch( traffic_current_state ) {
			case green:
				motor_action = go;
				break;
			case yellow:
				if( (photo_counter == 3) && (photo_intersection == FALSE) )
					motor_action = stop;
				else if( (photo_counter > 3) && (photo_intersection == FALSE) )
					motor_action = speed;
				else if( (photo_counter < 3) && (photo_counter > 0) && (photo_intersection == FALSE) )
					motor_action = slow;
				else
					motor_action = go;
				break;
			case red:
				if( (photo_counter >= 3) && (photo_intersection == FALSE) )
					motor_action = stop;
				break;
			default:
				break;
		}
	}

	// Consider future state
	if( my_mode == 3 ) {
		switch( traffic_current_state ) {
			case green:
				if( (traffic_time > 2000) && (traffic_time < 5000) && (photo_counter < 3) && (photo_intersection == FALSE) )
					motor_action = speed;
				else if( (traffic_time < 1000) && (photo_counter < 3) && (photo_intersection == FALSE) )
					motor_action = slow;
				else
					motor_action = go;
				break;
			case yellow:
				if( (photo_counter == 3) && (photo_intersection == FALSE) )
					motor_action = stop;
				else if( (photo_counter > 3) && (photo_intersection == FALSE) )
					motor_action = speed;
				else if( (photo_counter < 3) && (photo_counter > 0) && (photo_intersection == FALSE) )
					motor_action = slow;
				else
					motor_action = go;
				break;
			case red:
				if( (traffic_time > 1000) && (photo_counter >= 3) && (photo_intersection == FALSE) )
					motor_action = stop;
				else if( (traffic_time < 1000) && (photo_counter > 0) && (photo_intersection == FALSE))
					motor_action = slow;
				break;
			default:
				break;
		}
	}


	// Set motor speed based on selected action
	switch( motor_action ) {
		case go:
			// If going around curve, go full speed
			if( (steer > 55) || (steer < 45) ) {
				motor_speed = 100;
			} else {
				motor_speed = 90;
			}
			setMotor(forward, motor_speed);
			break;
		case stop:
			setMotor(brake, 0);
			break;
		case slow:
			if( motor_speed > 89 )
				motor_speed -= 5;
			setMotor(forward, motor_speed);
			break;
		case speed:
			if( motor_speed < 96 )
				motor_speed += 5;
			setMotor(forward, motor_speed);
	}


	/*********************************************************************************************
	 * Adjust steering based on ultrasonic
	 *********************************************************************************************/

	// Both sensors see an object
	if( (distCM_left < 25) && (distCM_right < 25) ) {
		// Set steering back to default
		if( ultra_reset_counter >= 2 ) {
			steer = default_steer;
			motor_initialize = TRUE;

			ultra_reset_counter = 0;
		}
	}

	// Only the left sensor sees an object
	else if( distCM_right < 25 ) {
		// Increment counter
		ultra_left_counter++;

		// Limit extreme values
		if( (steer > 20) && (ultra_left_counter >= 2) ) {
//			steer -= 9;
			steer -= 2;
			ultra_left_counter = 0;
		} else if(ultra_left_counter == 1) {
//			steer += 8;
		}

		// Limit extreme values
		if( steer < 16 ) {
			steer = 15;
		}

		// Check if need to still adjust steering for net movement of 1
		if( ultra_right_counter == 1 ) {
//			steer -= 8;
		}

		// Since right sensor didn't see anything, reset counter
		ultra_right_counter = 2;
		ultra_reset_counter = 2;
	}

	// Only the right sensor sees an object
	else if( distCM_left < 25 ) {
		// Increment counter
		ultra_right_counter++;

		// Limit extreme values
		if( (steer < 46) && (ultra_right_counter >= 2) ) {
//			steer += 9;
			steer += 2;
			ultra_right_counter = 0;
		} else if(ultra_right_counter == 1) {
//			steer -= 8;
		}

		// Limit extreme values
		if( steer > 49 ) {
			steer = 50;
		}

		// Check if need to still adjust steering for net movement of 1
		if( ultra_left_counter == 1 ) {
//			steer += 8;
		}

		// Since left sensor didn't see anything, reset counter
		ultra_left_counter = 2;
		ultra_reset_counter = 2;
	}

	// Neither sensor sees an object
	else {
		// Set steering back to default
		if( ultra_reset_counter >= 2 ) {
			steer = default_steer;
			motor_initialize = TRUE;

			ultra_reset_counter = 0;
		}

		// Reset the left and right counters
		ultra_right_counter = 2;
		ultra_left_counter = 2;
	}


	/*********************************************************************************************
	 * Set steering
	 *********************************************************************************************/
	pwmSet(steer + offset, servo);

	// Initialize servo position off centered so that it can straighten out next iteration
	if( motor_initialize ) {
		if( default_steer > 33 ) {
			pwmSet(default_steer + offset - 20, servo);
		} else {
			pwmSet(default_steer + offset + 10, servo);
		}
		motor_initialize = FALSE;
	}
}


uint8_t steer = 33;
uint8_t default_steer = 33;
uint8_t motor_stop = FALSE;
uint8_t motor_initialize = TRUE;
uint8_t ultra_reset_counter = 2;
