/**
*****************************************************************************
**
**  File        : main.c
**
**  Abstract    : main function.
**
**  Functions   : main
**
**  Environment : Atollic TrueSTUDIO(R)
**                STMicroelectronics STM32F4xx Standard Peripherals Library
**
**  Distribution: The file is distributed "as is", without any warranty
**                of any kind.
**
**  (c)Copyright Atollic AB.
**  You may use this file as-is or modify it according to the needs of your
**  project. This file may only be built (assembled or compiled and linked)
**  using the Atollic TrueSTUDIO(R) product. The use of this file together
**  with other tools than Atollic TrueSTUDIO(R) is not permitted.
**
*****************************************************************************
*/


#include "main.h"


int main(void) {

	// Create initial task to connect to Base Station
	xTaskCreate( prvSetupTask, "", 300 * sizeof(uint8_t), NULL, setupPriority, xSetupHandle );

	// Start the scheduler which begins to run the tasks
	vTaskStartScheduler();

	/* If all is well, the scheduler will now be running, and the following line
	will never be reached.  If the following line does execute, then there was
	insufficient FreeRTOS heap memory available for the idle and/or timer tasks
	to be created.  See the memory management section on the FreeRTOS web site
	for more details. */
	for( ;; );
}


/*********************************************************************************************
 * Setup hardware/software
 *********************************************************************************************/
void prvSetupTask( void *pvParameters ) {

	// Setup hardware
	prvSetupHardware();

	// Test LEDs and indicate program is starting
	prvBlinkLeds();

	// Setup WiFi connection
	prvSetupWifi();

	// Set mode to allModes
	my_mode = allModes;

	// Iterate through each SAV to initialize parameters
	uint8_t sav;
	for(sav=0; sav<NUMBER_SAV; sav++) {

		// Set the SAVs default mode
//		mode_savs[sav] = mode1;
		// TODO: change back to default
		mode_savs[sav] = mode3;

		// Mark the WiFi channels as uninitialized
		wifi_channel[sav] = 0xFF;

		// Initialize all SAVs as inactive
		wifi_channel_active[sav] = FALSE;
	}

	// Indicate that the next channel to be assigned is channel 0
	wifi_next_channel = 0;

	// Create queue for packets
	xPacketQueue = xQueueCreate( maxPacketQueueLength, MAX_LENGTH*sizeof(uint8_t) );

	// Create initial task to connect to Base Station
//	xTaskCreate( prvConnectTask, "", 300 * sizeof(uint8_t), NULL, connectPriority, xConnectHandle );
	xTaskCreate( prvTrafficLightTask, "", 500 * sizeof(uint8_t), NULL, trafficLightPriority, xTrafficLightHandle );

	// Delete this task
	vTaskDelete( xSetupHandle );
}


/*********************************************************************************************
 * Setup relevant hardware
 *********************************************************************************************/
static void prvSetupHardware( void ) {
	// Ensure that all 4 interrupt priority bits are used as the pre-emption priority
	NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );

	// Setup LEDs
	ledInit();

	// Setup WiFi
	wifiInit();
}


/*********************************************************************************************
 * Blink LEDs on board
 *********************************************************************************************/
static void prvBlinkLeds( void ) {
	// Turn on and off each LED in order

	// EW Lights
	LED_LIGHT_EW_PORT->ON = LED_LIGHT_EW_GREEN_PIN;
	swDelay(100);
	LED_LIGHT_EW_PORT->OFF = LED_LIGHT_EW_GREEN_PIN;

	LED_LIGHT_EW_PORT->ON = LED_LIGHT_EW_YELLOW_PIN;
	swDelay(100);
	LED_LIGHT_EW_PORT->OFF = LED_LIGHT_EW_YELLOW_PIN;

	LED_LIGHT_EW_PORT->ON = LED_LIGHT_EW_RED_PIN;
	swDelay(100);
	LED_LIGHT_EW_PORT->OFF = LED_LIGHT_EW_RED_PIN;

	// Error
	LED_ERROR_PORT->ON = LED_ERROR_PIN;
	swDelay(100);
	LED_ERROR_PORT->OFF = LED_ERROR_PIN;

	// Wifi
	LED_WIFI_PORT->ON = LED_WIFI_RX_PIN;
	swDelay(100);
	LED_WIFI_PORT->OFF = LED_WIFI_RX_PIN;

	LED_WIFI_PORT->ON = LED_WIFI_TX_PIN;
	swDelay(100);
	LED_WIFI_PORT->OFF = LED_WIFI_TX_PIN;

	// NS Lights
	LED_LIGHT_NS_PORT->ON = LED_LIGHT_NS_GREEN_PIN;
	swDelay(100);
	LED_LIGHT_NS_PORT->OFF = LED_LIGHT_NS_GREEN_PIN;

	LED_LIGHT_NS_PORT->ON = LED_LIGHT_NS_YELLOW_PIN;
	swDelay(100);
	LED_LIGHT_NS_PORT->OFF = LED_LIGHT_NS_YELLOW_PIN;

	LED_LIGHT_NS_PORT->ON = LED_LIGHT_NS_RED_PIN;
	swDelay(100);
	LED_LIGHT_NS_PORT->OFF = LED_LIGHT_NS_RED_PIN;
}


/*********************************************************************************************
 * Setup Wifi connection
 *********************************************************************************************/
static void prvSetupWifi( void ) {
	// Turn on Echo commands (for Arduino)
//	sendPacket( "ATE1", 4);

	// Connect to Wifi
//	sendPacket( "AT+CWJAP=\"OhmWreckers\",\"123\"", 28);
//	swDelay(1500);

	// Delay to give wifi chance to initialize
	swDelay(5000);

	// Send AT
	sendPacket( "AT", 2, FALSE);
	swDelay(500);

	// Set mux to be 1
	sendPacket( "AT+CIPMUX=1", 11, FALSE);
	swDelay(1000);

	// Start server
	sendPacket( "AT+CIPSERVER=1,1001", 19, FALSE);
	swDelay(2000);

	// Turn on WiFi LEDs to indicate the network is setup
	LED_WIFI_PORT->ON = LED_WIFI_PINS;
}


/*********************************************************************************************
 * Initial bootup task to connect to Base Station
 * 		* Connect to Base Station 		- Send Ping packet
 * 		* Wait for response 			- Receive Ack packet
 * 		* If successful					- Turn on WiFi LEDs
 *********************************************************************************************/
void prvConnectTask( void *pvParameters ) {

	// Let task run infinitely
	for(;;) {

		// Wait for a Ping from an SAV
		if( process_packet ) {

			// Create local string to represent the packet
			char* packet = pvPortMalloc( MAX_LENGTH*sizeof(uint8_t) );

			// Pop packet from queue
			xQueueReceive( xPacketQueue, packet, 0 );

			// Process packet
			PacketResult packet_result = handlePacket( packet );

			// Free variables
			vPortFree( packet );

			if( (packet_result.result == SUCCESS) && (packet_result.type == ping) ) {

				// Reset process_packet
				process_packet = FALSE;

				// Move on to next task
				xTaskCreate( prvTrafficLightTask, "", 300 * sizeof(uint8_t), NULL, trafficLightPriority, xTrafficLightHandle );

				// Delete this task
				vTaskDelete( xConnectHandle );
			}
		}
	}
}


/*********************************************************************************************
 * Task to setup traffic light timer to send packets
 *********************************************************************************************/
void prvTrafficLightTask( void *pvParameters ) {

	// Setup timer to start the state machine
	// Send packet every 5 seconds
	sendTrafficLight = swTimerInit( 5000, REPEAT, prvSendTrafficLightCallback );

	// Initialize the first state
	light_system_state = state_1;

	// Initialize the transition times
	timer_NS = 25;
	timer_EW = 30;

	swTimerStart(sendTrafficLight, 0);

	// Let task run infinitely
	for(;;) {

		// Process any incoming packets
		if( process_packet ) {
			// Create local string to represent the packet
			char* packet = pvPortMalloc( MAX_LENGTH*sizeof(uint8_t) );

			// Pop packet from queue
			xQueueReceive( xPacketQueue, packet, 0 );

			// Process packet
			PacketResult packet_result = handlePacket( packet );

			// Free variables
			vPortFree( packet );

			// Reset process_packet
			process_packet = FALSE;
		}

		// Send updated traffic packets
		if( update_traffic ) {
			// Light states
			systemState current_lights = current_system_state[light_system_state];

			// Create Header
			Header* traffic_header = pvPortMalloc( sizeof(Header) );
			traffic_header->addr = MY_ADDR;
			traffic_header->mode = allModes;

			// Iterate through all SAVs
			uint8_t sav;
			for(sav=0; sav<NUMBER_SAV; sav++){
				// Check if active
				if( wifi_channel_active[sav] == TRUE ) {
					// Define destination
					traffic_header->dest = sav;

					// Send current state packet
//					traffic_header->type = trafficLightCurrent;
//					sendTrafficLightCurrent( traffic_header, current_lights.northSouth, current_lights.eastWest );

					// Send future state packet
					traffic_header->type = trafficLightFuture;
					sendTrafficLightFuture( traffic_header, next_light_state[current_lights.northSouth], timer_NS,
															next_light_state[current_lights.eastWest], timer_EW );
				}
			}

			// Reset flag
			update_traffic = FALSE;

			// Free variables
			vPortFree( traffic_header );
		}
	}
}


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 * Functions to handle errors if they occur
 *%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */
void vApplicationMallocFailedHook( void )
{
	/* Called if a call to pvPortMalloc() fails because there is insufficient
	free memory available in the FreeRTOS heap.  pvPortMalloc() is called
	internally by FreeRTOS API functions that create tasks, queues, software
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */

	for( ;; );
}


/*********************************************************************************************
 * Functions to handle errors if they occur
 *********************************************************************************************/
void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
	( void ) pcTaskName;
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	for( ;; );
}


/*********************************************************************************************
 * Functions to handle errors if they occur
 *********************************************************************************************/
void vApplicationIdleHook( void )
{
volatile size_t xFreeStackSpace;

	/* This function is called on each cycle of the idle task.  In this case it
	does nothing useful, other than report the amout of FreeRTOS heap that
	remains unallocated. */
	xFreeStackSpace = xPortGetFreeHeapSize();

	if( xFreeStackSpace > 100 )
	{
		/* By now, the kernel has allocated everything it is going to, so
		if there is a lot of heap remaining unallocated then
		the value of configTOTAL_HEAP_SIZE in FreeRTOSConfig.h can be
		reduced accordingly. */
	}
}
