/**
*****************************************************************************
**
**  File        : main.c
**
**  Abstract    : main function.
**
**  Functions   : main
**
**  Environment : Atollic TrueSTUDIO(R)
**                STMicroelectronics STM32F4xx Standard Peripherals Library
**
**  Distribution: The file is distributed "as is", without any warranty
**                of any kind.
**
**  (c)Copyright Atollic AB.
**  You may use this file as-is or modify it according to the needs of your
**  project. This file may only be built (assembled or compiled and linked)
**  using the Atollic TrueSTUDIO(R) product. The use of this file together
**  with other tools than Atollic TrueSTUDIO(R) is not permitted.
**
*****************************************************************************
*/


#include "main.h"


int main(void) {

	// Create initial task to connect to Base Station
 	xTaskCreate( prvSetupTask, "", 300 * sizeof(uint8_t), NULL, setupPriority, xSetupHandle );

	// Start the scheduler which begins to run the tasks
	vTaskStartScheduler();

	/* If all is well, the scheduler will now be running, and the following line
	will never be reached.  If the following line does execute, then there was
	insufficient FreeRTOS heap memory available for the idle and/or timer tasks
	to be created.  See the memory management section on the FreeRTOS web site
	for more details. */
	for( ;; );
}


/*********************************************************************************************
 * Setup hardware/software
 *********************************************************************************************/
void prvSetupTask( void *pvParameters ) {

	// Setup hardware
	prvSetupHardware();

	// Test LEDs and indicate program is starting
	prvBlinkLeds();

	// ******************************************************************************************************** //
	// Ultrasonic tasks
//	xTaskCreate( prvUltrasonic1Task, "", configMINIMAL_STACK_SIZE, NULL, ultrasonicPriority, xUltrasonic1Handle );
//	xTaskCreate( prvUltrasonic2Task, "", configMINIMAL_STACK_SIZE, NULL, ultrasonicPriority, xUltrasonic2Handle );
//	xTaskCreate( prvUltrasonic3Task, "", configMINIMAL_STACK_SIZE, NULL, ultrasonicPriority, xUltrasonic3Handle );

	traffic_current_state == red;

	// Set motors
	swTimerStart( set_motor, 0 );

	// Read Photo Resistor
	swTimerStart( read_photo, 0 );


	// ******************************************************************************************************** //

	// Setup WiFi connection
	prvSetupWifi();

	// Set initial mode to allModes
	my_mode = allModes;

	// Create queue for packets
	xPacketQueue = xQueueCreate( maxPacketQueueLength, MAX_LENGTH*sizeof(uint8_t) );

	// Create initial task to connect to Base Station
	xTaskCreate( prvConnectTask, "", 300 * sizeof(uint8_t), NULL, connectPriority, xConnectHandle );

	// Delete this task
	vTaskDelete( xSetupHandle );
}


/*********************************************************************************************
 * Setup relevant hardware
 *********************************************************************************************/
static void prvSetupHardware( void ) {
	// Ensure that all 4 interrupt priority bits are used as the pre-emption priority
	NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );

	// Setup LEDs
	ledInit();

	// Setup WiFi
	wifiInit();

	// Setup PWM
	pwmInit();

	// Setup Photo Resistors
	photoResistorInit();

	// Setup Measured Power
	measuredPowerInit();

	// Setup Ultrasonic
	ultrasonicInit();
}


/*********************************************************************************************
 * Blink LEDs on board
 *********************************************************************************************/
static void prvBlinkLeds( void ) {
	// Turn on and off each LED in order

	// Error
	LED_ERROR_PORT->ON = LED_ERROR_PIN;
	swDelay(100);
	LED_ERROR_PORT->OFF = LED_ERROR_PIN;

	// Wifi
	LED_WIFI_PORT->ON = LED_WIFI_RX_PIN;
	swDelay(100);
	LED_WIFI_PORT->OFF = LED_WIFI_RX_PIN;

	LED_WIFI_PORT->ON = LED_WIFI_TX_PIN;
	swDelay(100);
	LED_WIFI_PORT->OFF = LED_WIFI_TX_PIN;

	// Lights
	LED_LIGHT_PORT->ON = LED_LIGHT_GREEN_PIN;
	swDelay(100);
	LED_LIGHT_PORT->OFF = LED_LIGHT_GREEN_PIN;

	LED_LIGHT_PORT->ON = LED_LIGHT_YELLOW_PIN;
	swDelay(100);
	LED_LIGHT_PORT->OFF = LED_LIGHT_YELLOW_PIN;

	LED_LIGHT_PORT->ON = LED_LIGHT_RED_PIN;
	swDelay(100);
	LED_LIGHT_PORT->OFF = LED_LIGHT_RED_PIN;

	// Mode
	LED_MODE_PORT->ON = LED_MODE_1_PIN;
	swDelay(100);
	LED_MODE_PORT->OFF = LED_MODE_1_PIN;

	LED_MODE_PORT->ON = LED_MODE_2_PIN;
	swDelay(100);
	LED_MODE_PORT->OFF = LED_MODE_2_PIN;

	LED_MODE_PORT->ON = LED_MODE_3_PIN;
	swDelay(100);
	LED_MODE_PORT->OFF = LED_MODE_3_PIN;
}


/*********************************************************************************************
 * Setup Wifi connection
 *********************************************************************************************/
static void prvSetupWifi( void ) {
	// Turn on Echo commands (for Arduino)
//	sendPacket( "ATE1", 4);

	// Delay to give Wifi chip time to boot up
	swDelay(5000);

	// Send AT
	sendPacket( "AT", 2, FALSE);
	swDelay(500);

	// Connect to Wifi
//	sendPacket( "AT+CWJAP=\"OhmWreckers\",\"123\"", 28, FALSE);
//	swDelay(5000);

	// Connect to IP and set up TCP connection
	sendPacket( "AT+CIPSTART=\"TCP\",\"192.168.101.101\",1001", 40, FALSE);
	swDelay(2000);
}


/*********************************************************************************************
 * Initial bootup task to connect to Base Station
 * 		* Connect to Base Station 		- Send Ping packet
 * 		* Wait for response 			- Receive Ack packet
 * 		* If successful					- Turn on WiFi LEDs
 *********************************************************************************************/
void prvConnectTask( void *pvParameters ) {

	// Setup local variables
	uint8_t send_ping = TRUE;

	// Let task run infinitely
	for(;;) {

		if( send_ping ) {
			// Setup header to Base Station
			Header* header = pvPortMalloc( sizeof(Header) );
			header->dest = baseStation;
			header->addr = MY_ADDR;
			header->mode = allModes;
			header->type = ping;

			sendPing( header );

			vPortFree(header);

			send_ping = FALSE;
		}

		// Continue to send Ping packet until get an Ack
		if( process_packet ) {

			// Create local string to represent the packet
			char* packet = pvPortMalloc( MAX_LENGTH*sizeof(uint8_t) );

			// Pop packet from queue
			xQueueReceive( xPacketQueue, packet, 0 );

			// Process packet
			PacketResult packet_result = handlePacket( packet );

			// Free variables
			vPortFree( packet );

			if( (packet_result.result == SUCCESS) && (packet_result.type == ack) ) {
				// Turn on LEDs to indicate success
				LED_WIFI_PORT->ON = LED_WIFI_TX_PIN | LED_WIFI_RX_PIN;

				// Reset process_packet
				process_packet = FALSE;

				// If successful, move on to next task
				xTaskCreate( prvModeOfOperationTask, "", 300 * sizeof(uint8_t), NULL, modeOfOperationPriority, xModeOfOperationHandle );

				// Delete this task
				vTaskDelete( xConnectHandle );
			}
			 else {
				 send_ping = TRUE;
			}

		}
	}
}


/*********************************************************************************************
 * Initial bootup task to setup default mode of operation
 * 		* Indicate SAV needs to set default mode of operation
 * 		* Wait for changeMode packet
 *********************************************************************************************/
void prvModeOfOperationTask( void *pvParameters ) {

	// Send SetMode packet
	Header* header = pvPortMalloc( sizeof(Header) );
	header->dest = baseStation;
	header->addr = MY_ADDR;
	header->mode = allModes;
	header->type = setMode;
	sendSetMode( header );

	// Let task run infinitely
	for(;;) {

		if( process_packet ) {

			// Create local string to represent the packet
			char* packet = pvPortMalloc( MAX_LENGTH*sizeof(uint8_t) );

			// Pop packet from queue
			xQueueReceive( xPacketQueue, packet, 0 );

			// Process packet
			PacketResult packet_result = handlePacket( packet );

			// Free variables
			vPortFree( packet );

			if( (packet_result.result == SUCCESS) && (packet_result.type == changeMode) ) {

				// Reset process_packet
				process_packet = FALSE;

				// If successful, move on to next task
				xTaskCreate( prvTrafficLightTask, "", ( unsigned short ) 300, NULL, trafficLightPriority, xTrafficLightHandle );

				// Delete this task
				vTaskDelete( xModeOfOperationHandle );
			} else {
				// Throw error
				LED_ERROR_PORT->ON &= LED_ERROR_PIN;
			}
		}
	}
}


/*********************************************************************************************
 * Task to handle (TrafficLight) packets
 * 		*
 *********************************************************************************************/
void prvTrafficLightTask( void *pvParameters ) {

	// Read Measured Power
	swTimerStart( read_power, 0 );

	// Set motors
	swTimerStart( set_motor, 0 );

	// Read Photo Resistor
	swTimerStart( read_photo, 0 );

	// Let task run infinitely
	for(;;) {

		if( process_packet ) {

			// Create local string to represent the packet
			char* packet = pvPortMalloc( MAX_LENGTH*sizeof(uint8_t) );

			// Pop packet from queue
			xQueueReceive( xPacketQueue, packet, 0 );

			// Process packet
			handlePacket( packet );

			// Free variables
			vPortFree( packet );

			// Reset process_packet
			process_packet = FALSE;
		}
	}
}





/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 * Functions to handle errors if they occur
 *%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */

void vApplicationMallocFailedHook( void )
{
	/* Called if a call to pvPortMalloc() fails because there is insufficient
	free memory available in the FreeRTOS heap.  pvPortMalloc() is called
	internally by FreeRTOS API functions that create tasks, queues, software
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */

	for( ;; );
}


/*********************************************************************************************
 * Functions to handle errors if they occur
 *********************************************************************************************/
void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
	( void ) pcTaskName;
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	for( ;; );
}


/*********************************************************************************************
 * Functions to handle errors if they occur
 *********************************************************************************************/
void vApplicationIdleHook( void )
{
volatile size_t xFreeStackSpace;

	/* This function is called on each cycle of the idle task.  In this case it
	does nothing useful, other than report the amout of FreeRTOS heap that
	remains unallocated. */
	xFreeStackSpace = xPortGetFreeHeapSize();

	if( xFreeStackSpace > 100 )
	{
		/* By now, the kernel has allocated everything it is going to, so
		if there is a lot of heap remaining unallocated then
		the value of configTOTAL_HEAP_SIZE in FreeRTOSConfig.h can be
		reduced accordingly. */
	}
}
