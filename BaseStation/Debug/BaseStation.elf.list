
BaseStation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d3c  08000188  08000188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08005ec4  08005ec4  0000dec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005f94  08005f94  0000df94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005f98  08005f98  0000df98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000054  20000000  08005f9c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0001c1e8  20000054  20000054  00010054  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  2001c23c  2001c23c  00010054  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00010054  2**0
                  CONTENTS, READONLY
  9 .debug_info   00007dd5  00000000  00000000  00010084  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000018c1  00000000  00000000  00017e59  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000248  00000000  00000000  00019720  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000300e  00000000  00000000  00019968  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000341f  00000000  00000000  0001c976  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      00000082  00000000  00000000  0001fd95  2**0
                  CONTENTS, READONLY
 15 .debug_frame  00001d44  00000000  00000000  0001fe18  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000020  00000000  00000000  00021b60  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000054 	.word	0x20000054
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005eac 	.word	0x08005eac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005eac 	.word	0x08005eac
 80001c4:	20000058 	.word	0x20000058

080001c8 <prvSendTrafficLightCallback>:
#include "packet.h"

/*********************************************************************************************
 * Timer callback to blink Traffic Light LED
 *********************************************************************************************/
void prvSendTrafficLightCallback( TimerHandle_t pxTimer ) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af02      	add	r7, sp, #8
 80001ce:	6078      	str	r0, [r7, #4]

	// Light states
	systemState current_lights = current_system_state[light_system_state];
 80001d0:	4b40      	ldr	r3, [pc, #256]	; (80002d4 <prvSendTrafficLightCallback+0x10c>)
 80001d2:	781b      	ldrb	r3, [r3, #0]
 80001d4:	461a      	mov	r2, r3
 80001d6:	4b40      	ldr	r3, [pc, #256]	; (80002d8 <prvSendTrafficLightCallback+0x110>)
 80001d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80001dc:	60fb      	str	r3, [r7, #12]

	// Create Header
	Header* traffic_header = pvPortMalloc( sizeof(Header) );
 80001de:	2005      	movs	r0, #5
 80001e0:	f005 fc48 	bl	8005a74 <pvPortMalloc>
 80001e4:	6138      	str	r0, [r7, #16]
	traffic_header->addr = MY_ADDR;
 80001e6:	693b      	ldr	r3, [r7, #16]
 80001e8:	2202      	movs	r2, #2
 80001ea:	705a      	strb	r2, [r3, #1]
	traffic_header->mode = allModes;
 80001ec:	693b      	ldr	r3, [r7, #16]
 80001ee:	2200      	movs	r2, #0
 80001f0:	709a      	strb	r2, [r3, #2]

	// Iterate through all SAVs
	uint8_t sav;
	for(sav=0; sav<NUMBER_SAV; sav++){
 80001f2:	2300      	movs	r3, #0
 80001f4:	75fb      	strb	r3, [r7, #23]
 80001f6:	e025      	b.n	8000244 <prvSendTrafficLightCallback+0x7c>
		// Check if active
		if( wifi_channel_active[sav] == TRUE ) {
 80001f8:	7dfb      	ldrb	r3, [r7, #23]
 80001fa:	4a38      	ldr	r2, [pc, #224]	; (80002dc <prvSendTrafficLightCallback+0x114>)
 80001fc:	5cd3      	ldrb	r3, [r2, r3]
 80001fe:	2b01      	cmp	r3, #1
 8000200:	d11d      	bne.n	800023e <prvSendTrafficLightCallback+0x76>
			// Define destination
			traffic_header->dest = sav;
 8000202:	693b      	ldr	r3, [r7, #16]
 8000204:	7dfa      	ldrb	r2, [r7, #23]
 8000206:	701a      	strb	r2, [r3, #0]

			// Send current state packet
			traffic_header->type = trafficLightCurrent;
 8000208:	693b      	ldr	r3, [r7, #16]
 800020a:	2202      	movs	r2, #2
 800020c:	70da      	strb	r2, [r3, #3]
			sendTrafficLightCurrent( traffic_header, current_lights.northSouth, current_lights.eastWest );
 800020e:	7b3a      	ldrb	r2, [r7, #12]
 8000210:	7bbb      	ldrb	r3, [r7, #14]
 8000212:	6938      	ldr	r0, [r7, #16]
 8000214:	4611      	mov	r1, r2
 8000216:	461a      	mov	r2, r3
 8000218:	f000 fb90 	bl	800093c <sendTrafficLightCurrent>

			// Send future state packet
			traffic_header->type = trafficLightFuture;
 800021c:	693b      	ldr	r3, [r7, #16]
 800021e:	2203      	movs	r2, #3
 8000220:	70da      	strb	r2, [r3, #3]
			sendTrafficLightFuture( traffic_header, next_light_state[current_lights.northSouth], timer_NS,
 8000222:	7b3b      	ldrb	r3, [r7, #12]
 8000224:	4a2e      	ldr	r2, [pc, #184]	; (80002e0 <prvSendTrafficLightCallback+0x118>)
 8000226:	5cd1      	ldrb	r1, [r2, r3]
 8000228:	4b2e      	ldr	r3, [pc, #184]	; (80002e4 <prvSendTrafficLightCallback+0x11c>)
 800022a:	781a      	ldrb	r2, [r3, #0]
													next_light_state[current_lights.eastWest], timer_EW );
 800022c:	7bbb      	ldrb	r3, [r7, #14]
			traffic_header->type = trafficLightCurrent;
			sendTrafficLightCurrent( traffic_header, current_lights.northSouth, current_lights.eastWest );

			// Send future state packet
			traffic_header->type = trafficLightFuture;
			sendTrafficLightFuture( traffic_header, next_light_state[current_lights.northSouth], timer_NS,
 800022e:	482c      	ldr	r0, [pc, #176]	; (80002e0 <prvSendTrafficLightCallback+0x118>)
 8000230:	5cc3      	ldrb	r3, [r0, r3]
 8000232:	482d      	ldr	r0, [pc, #180]	; (80002e8 <prvSendTrafficLightCallback+0x120>)
 8000234:	7800      	ldrb	r0, [r0, #0]
 8000236:	9000      	str	r0, [sp, #0]
 8000238:	6938      	ldr	r0, [r7, #16]
 800023a:	f000 fbdf 	bl	80009fc <sendTrafficLightFuture>
	traffic_header->addr = MY_ADDR;
	traffic_header->mode = allModes;

	// Iterate through all SAVs
	uint8_t sav;
	for(sav=0; sav<NUMBER_SAV; sav++){
 800023e:	7dfb      	ldrb	r3, [r7, #23]
 8000240:	3301      	adds	r3, #1
 8000242:	75fb      	strb	r3, [r7, #23]
 8000244:	7dfb      	ldrb	r3, [r7, #23]
 8000246:	2b01      	cmp	r3, #1
 8000248:	d9d6      	bls.n	80001f8 <prvSendTrafficLightCallback+0x30>
													next_light_state[current_lights.eastWest], timer_EW );
		}
	}

	// Turn on corresponding NS LEDs
	LED_LIGHT_NS_PORT->OFF = LED_LIGHT_NS_PINS;
 800024a:	4b28      	ldr	r3, [pc, #160]	; (80002ec <prvSendTrafficLightCallback+0x124>)
 800024c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000250:	835a      	strh	r2, [r3, #26]
	LED_LIGHT_NS_PORT->ON = led_light_ns_pin[current_lights.northSouth];
 8000252:	4b26      	ldr	r3, [pc, #152]	; (80002ec <prvSendTrafficLightCallback+0x124>)
 8000254:	7b3a      	ldrb	r2, [r7, #12]
 8000256:	4611      	mov	r1, r2
 8000258:	4a25      	ldr	r2, [pc, #148]	; (80002f0 <prvSendTrafficLightCallback+0x128>)
 800025a:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800025e:	831a      	strh	r2, [r3, #24]

	// Turn on corresponding EW LEDs
	LED_LIGHT_EW_PORT->OFF = LED_LIGHT_EW_PINS;
 8000260:	4b22      	ldr	r3, [pc, #136]	; (80002ec <prvSendTrafficLightCallback+0x124>)
 8000262:	2270      	movs	r2, #112	; 0x70
 8000264:	835a      	strh	r2, [r3, #26]
	LED_LIGHT_EW_PORT->ON = led_light_ew_pin[current_lights.eastWest];
 8000266:	4b21      	ldr	r3, [pc, #132]	; (80002ec <prvSendTrafficLightCallback+0x124>)
 8000268:	7bba      	ldrb	r2, [r7, #14]
 800026a:	4611      	mov	r1, r2
 800026c:	4a21      	ldr	r2, [pc, #132]	; (80002f4 <prvSendTrafficLightCallback+0x12c>)
 800026e:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000272:	831a      	strh	r2, [r3, #24]

	// Decrement timers
	timer_NS -= 5;
 8000274:	4b1b      	ldr	r3, [pc, #108]	; (80002e4 <prvSendTrafficLightCallback+0x11c>)
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	3b05      	subs	r3, #5
 800027a:	b2da      	uxtb	r2, r3
 800027c:	4b19      	ldr	r3, [pc, #100]	; (80002e4 <prvSendTrafficLightCallback+0x11c>)
 800027e:	701a      	strb	r2, [r3, #0]
	timer_EW -= 5;
 8000280:	4b19      	ldr	r3, [pc, #100]	; (80002e8 <prvSendTrafficLightCallback+0x120>)
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	3b05      	subs	r3, #5
 8000286:	b2da      	uxtb	r2, r3
 8000288:	4b17      	ldr	r3, [pc, #92]	; (80002e8 <prvSendTrafficLightCallback+0x120>)
 800028a:	701a      	strb	r2, [r3, #0]

	// Check if timer is 0
	if( (timer_NS == 0) || (timer_EW == 0) ) {
 800028c:	4b15      	ldr	r3, [pc, #84]	; (80002e4 <prvSendTrafficLightCallback+0x11c>)
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d003      	beq.n	800029c <prvSendTrafficLightCallback+0xd4>
 8000294:	4b14      	ldr	r3, [pc, #80]	; (80002e8 <prvSendTrafficLightCallback+0x120>)
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d115      	bne.n	80002c8 <prvSendTrafficLightCallback+0x100>
		// Transition to next light system state
		light_system_state = next_system_state[light_system_state];
 800029c:	4b0d      	ldr	r3, [pc, #52]	; (80002d4 <prvSendTrafficLightCallback+0x10c>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	4a15      	ldr	r2, [pc, #84]	; (80002f8 <prvSendTrafficLightCallback+0x130>)
 80002a2:	5cd2      	ldrb	r2, [r2, r3]
 80002a4:	4b0b      	ldr	r3, [pc, #44]	; (80002d4 <prvSendTrafficLightCallback+0x10c>)
 80002a6:	701a      	strb	r2, [r3, #0]

		// Set timers to associated values
		timer_NS = current_system_state[light_system_state].time_NS;
 80002a8:	4b0a      	ldr	r3, [pc, #40]	; (80002d4 <prvSendTrafficLightCallback+0x10c>)
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	4a0a      	ldr	r2, [pc, #40]	; (80002d8 <prvSendTrafficLightCallback+0x110>)
 80002ae:	009b      	lsls	r3, r3, #2
 80002b0:	4413      	add	r3, r2
 80002b2:	785a      	ldrb	r2, [r3, #1]
 80002b4:	4b0b      	ldr	r3, [pc, #44]	; (80002e4 <prvSendTrafficLightCallback+0x11c>)
 80002b6:	701a      	strb	r2, [r3, #0]
		timer_EW = current_system_state[light_system_state].time_EW;
 80002b8:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <prvSendTrafficLightCallback+0x10c>)
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	4a06      	ldr	r2, [pc, #24]	; (80002d8 <prvSendTrafficLightCallback+0x110>)
 80002be:	009b      	lsls	r3, r3, #2
 80002c0:	4413      	add	r3, r2
 80002c2:	78da      	ldrb	r2, [r3, #3]
 80002c4:	4b08      	ldr	r3, [pc, #32]	; (80002e8 <prvSendTrafficLightCallback+0x120>)
 80002c6:	701a      	strb	r2, [r3, #0]
	}

	// Free variables
	vPortFree( traffic_header );
 80002c8:	6938      	ldr	r0, [r7, #16]
 80002ca:	f005 fc6b 	bl	8005ba4 <vPortFree>
}
 80002ce:	3718      	adds	r7, #24
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	2001c1cc 	.word	0x2001c1cc
 80002d8:	20000004 	.word	0x20000004
 80002dc:	2001c1e8 	.word	0x2001c1e8
 80002e0:	20000000 	.word	0x20000000
 80002e4:	2001c1f0 	.word	0x2001c1f0
 80002e8:	2001c228 	.word	0x2001c228
 80002ec:	40020800 	.word	0x40020800
 80002f0:	2000002c 	.word	0x2000002c
 80002f4:	20000034 	.word	0x20000034
 80002f8:	20000014 	.word	0x20000014

080002fc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000300:	4b15      	ldr	r3, [pc, #84]	; (8000358 <SystemInit+0x5c>)
 8000302:	4a15      	ldr	r2, [pc, #84]	; (8000358 <SystemInit+0x5c>)
 8000304:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8000308:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800030c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000310:	4b12      	ldr	r3, [pc, #72]	; (800035c <SystemInit+0x60>)
 8000312:	4a12      	ldr	r2, [pc, #72]	; (800035c <SystemInit+0x60>)
 8000314:	6812      	ldr	r2, [r2, #0]
 8000316:	f042 0201 	orr.w	r2, r2, #1
 800031a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800031c:	4b0f      	ldr	r3, [pc, #60]	; (800035c <SystemInit+0x60>)
 800031e:	2200      	movs	r2, #0
 8000320:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000322:	4a0e      	ldr	r2, [pc, #56]	; (800035c <SystemInit+0x60>)
 8000324:	4b0d      	ldr	r3, [pc, #52]	; (800035c <SystemInit+0x60>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800032c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000330:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000332:	4b0a      	ldr	r3, [pc, #40]	; (800035c <SystemInit+0x60>)
 8000334:	4a0a      	ldr	r2, [pc, #40]	; (8000360 <SystemInit+0x64>)
 8000336:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000338:	4b08      	ldr	r3, [pc, #32]	; (800035c <SystemInit+0x60>)
 800033a:	4a08      	ldr	r2, [pc, #32]	; (800035c <SystemInit+0x60>)
 800033c:	6812      	ldr	r2, [r2, #0]
 800033e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000342:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000344:	4b05      	ldr	r3, [pc, #20]	; (800035c <SystemInit+0x60>)
 8000346:	2200      	movs	r2, #0
 8000348:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800034a:	f000 f887 	bl	800045c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800034e:	4b02      	ldr	r3, [pc, #8]	; (8000358 <SystemInit+0x5c>)
 8000350:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000354:	609a      	str	r2, [r3, #8]
#endif
}
 8000356:	bd80      	pop	{r7, pc}
 8000358:	e000ed00 	.word	0xe000ed00
 800035c:	40023800 	.word	0x40023800
 8000360:	24003010 	.word	0x24003010

08000364 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000364:	b480      	push	{r7}
 8000366:	b087      	sub	sp, #28
 8000368:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800036a:	2300      	movs	r3, #0
 800036c:	613b      	str	r3, [r7, #16]
 800036e:	2300      	movs	r3, #0
 8000370:	617b      	str	r3, [r7, #20]
 8000372:	2302      	movs	r3, #2
 8000374:	60fb      	str	r3, [r7, #12]
 8000376:	2300      	movs	r3, #0
 8000378:	60bb      	str	r3, [r7, #8]
 800037a:	2302      	movs	r3, #2
 800037c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800037e:	4b32      	ldr	r3, [pc, #200]	; (8000448 <SystemCoreClockUpdate+0xe4>)
 8000380:	689b      	ldr	r3, [r3, #8]
 8000382:	f003 030c 	and.w	r3, r3, #12
 8000386:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000388:	693b      	ldr	r3, [r7, #16]
 800038a:	2b04      	cmp	r3, #4
 800038c:	d007      	beq.n	800039e <SystemCoreClockUpdate+0x3a>
 800038e:	2b08      	cmp	r3, #8
 8000390:	d009      	beq.n	80003a6 <SystemCoreClockUpdate+0x42>
 8000392:	2b00      	cmp	r3, #0
 8000394:	d13f      	bne.n	8000416 <SystemCoreClockUpdate+0xb2>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000396:	4b2d      	ldr	r3, [pc, #180]	; (800044c <SystemCoreClockUpdate+0xe8>)
 8000398:	4a2d      	ldr	r2, [pc, #180]	; (8000450 <SystemCoreClockUpdate+0xec>)
 800039a:	601a      	str	r2, [r3, #0]
      break;
 800039c:	e03f      	b.n	800041e <SystemCoreClockUpdate+0xba>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800039e:	4b2b      	ldr	r3, [pc, #172]	; (800044c <SystemCoreClockUpdate+0xe8>)
 80003a0:	4a2c      	ldr	r2, [pc, #176]	; (8000454 <SystemCoreClockUpdate+0xf0>)
 80003a2:	601a      	str	r2, [r3, #0]
      break;
 80003a4:	e03b      	b.n	800041e <SystemCoreClockUpdate+0xba>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80003a6:	4b28      	ldr	r3, [pc, #160]	; (8000448 <SystemCoreClockUpdate+0xe4>)
 80003a8:	685b      	ldr	r3, [r3, #4]
 80003aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80003ae:	0d9b      	lsrs	r3, r3, #22
 80003b0:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80003b2:	4b25      	ldr	r3, [pc, #148]	; (8000448 <SystemCoreClockUpdate+0xe4>)
 80003b4:	685b      	ldr	r3, [r3, #4]
 80003b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80003ba:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80003bc:	68bb      	ldr	r3, [r7, #8]
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d00d      	beq.n	80003de <SystemCoreClockUpdate+0x7a>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80003c2:	4a24      	ldr	r2, [pc, #144]	; (8000454 <SystemCoreClockUpdate+0xf0>)
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80003ca:	4b1f      	ldr	r3, [pc, #124]	; (8000448 <SystemCoreClockUpdate+0xe4>)
 80003cc:	6859      	ldr	r1, [r3, #4]
 80003ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80003d2:	400b      	ands	r3, r1
 80003d4:	099b      	lsrs	r3, r3, #6
 80003d6:	fb03 f302 	mul.w	r3, r3, r2
 80003da:	617b      	str	r3, [r7, #20]
 80003dc:	e00c      	b.n	80003f8 <SystemCoreClockUpdate+0x94>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80003de:	4a1c      	ldr	r2, [pc, #112]	; (8000450 <SystemCoreClockUpdate+0xec>)
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80003e6:	4b18      	ldr	r3, [pc, #96]	; (8000448 <SystemCoreClockUpdate+0xe4>)
 80003e8:	6859      	ldr	r1, [r3, #4]
 80003ea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80003ee:	400b      	ands	r3, r1
 80003f0:	099b      	lsrs	r3, r3, #6
 80003f2:	fb03 f302 	mul.w	r3, r3, r2
 80003f6:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80003f8:	4b13      	ldr	r3, [pc, #76]	; (8000448 <SystemCoreClockUpdate+0xe4>)
 80003fa:	685b      	ldr	r3, [r3, #4]
 80003fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000400:	0c1b      	lsrs	r3, r3, #16
 8000402:	3301      	adds	r3, #1
 8000404:	005b      	lsls	r3, r3, #1
 8000406:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000408:	697a      	ldr	r2, [r7, #20]
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000410:	4b0e      	ldr	r3, [pc, #56]	; (800044c <SystemCoreClockUpdate+0xe8>)
 8000412:	601a      	str	r2, [r3, #0]
      break;
 8000414:	e003      	b.n	800041e <SystemCoreClockUpdate+0xba>
    default:
      SystemCoreClock = HSI_VALUE;
 8000416:	4b0d      	ldr	r3, [pc, #52]	; (800044c <SystemCoreClockUpdate+0xe8>)
 8000418:	4a0d      	ldr	r2, [pc, #52]	; (8000450 <SystemCoreClockUpdate+0xec>)
 800041a:	601a      	str	r2, [r3, #0]
      break;
 800041c:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800041e:	4b0a      	ldr	r3, [pc, #40]	; (8000448 <SystemCoreClockUpdate+0xe4>)
 8000420:	689b      	ldr	r3, [r3, #8]
 8000422:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000426:	091b      	lsrs	r3, r3, #4
 8000428:	4a0b      	ldr	r2, [pc, #44]	; (8000458 <SystemCoreClockUpdate+0xf4>)
 800042a:	5cd3      	ldrb	r3, [r2, r3]
 800042c:	b2db      	uxtb	r3, r3
 800042e:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000430:	4b06      	ldr	r3, [pc, #24]	; (800044c <SystemCoreClockUpdate+0xe8>)
 8000432:	681a      	ldr	r2, [r3, #0]
 8000434:	693b      	ldr	r3, [r7, #16]
 8000436:	40da      	lsrs	r2, r3
 8000438:	4b04      	ldr	r3, [pc, #16]	; (800044c <SystemCoreClockUpdate+0xe8>)
 800043a:	601a      	str	r2, [r3, #0]
}
 800043c:	371c      	adds	r7, #28
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	40023800 	.word	0x40023800
 800044c:	20000018 	.word	0x20000018
 8000450:	00f42400 	.word	0x00f42400
 8000454:	01312d00 	.word	0x01312d00
 8000458:	2000001c 	.word	0x2000001c

0800045c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000462:	2300      	movs	r3, #0
 8000464:	607b      	str	r3, [r7, #4]
 8000466:	2300      	movs	r3, #0
 8000468:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800046a:	4b35      	ldr	r3, [pc, #212]	; (8000540 <SetSysClock+0xe4>)
 800046c:	4a34      	ldr	r2, [pc, #208]	; (8000540 <SetSysClock+0xe4>)
 800046e:	6812      	ldr	r2, [r2, #0]
 8000470:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000474:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000476:	4b32      	ldr	r3, [pc, #200]	; (8000540 <SetSysClock+0xe4>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800047e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	3301      	adds	r3, #1
 8000484:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000486:	683b      	ldr	r3, [r7, #0]
 8000488:	2b00      	cmp	r3, #0
 800048a:	d103      	bne.n	8000494 <SetSysClock+0x38>
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000492:	d1f0      	bne.n	8000476 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000494:	4b2a      	ldr	r3, [pc, #168]	; (8000540 <SetSysClock+0xe4>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800049c:	2b00      	cmp	r3, #0
 800049e:	d002      	beq.n	80004a6 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80004a0:	2301      	movs	r3, #1
 80004a2:	603b      	str	r3, [r7, #0]
 80004a4:	e001      	b.n	80004aa <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80004a6:	2300      	movs	r3, #0
 80004a8:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80004aa:	683b      	ldr	r3, [r7, #0]
 80004ac:	2b01      	cmp	r3, #1
 80004ae:	d142      	bne.n	8000536 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80004b0:	4b23      	ldr	r3, [pc, #140]	; (8000540 <SetSysClock+0xe4>)
 80004b2:	4a23      	ldr	r2, [pc, #140]	; (8000540 <SetSysClock+0xe4>)
 80004b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80004b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80004ba:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80004bc:	4b21      	ldr	r3, [pc, #132]	; (8000544 <SetSysClock+0xe8>)
 80004be:	4a21      	ldr	r2, [pc, #132]	; (8000544 <SetSysClock+0xe8>)
 80004c0:	6812      	ldr	r2, [r2, #0]
 80004c2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80004c6:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80004c8:	4b1d      	ldr	r3, [pc, #116]	; (8000540 <SetSysClock+0xe4>)
 80004ca:	4a1d      	ldr	r2, [pc, #116]	; (8000540 <SetSysClock+0xe4>)
 80004cc:	6892      	ldr	r2, [r2, #8]
 80004ce:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80004d0:	4b1b      	ldr	r3, [pc, #108]	; (8000540 <SetSysClock+0xe4>)
 80004d2:	4a1b      	ldr	r2, [pc, #108]	; (8000540 <SetSysClock+0xe4>)
 80004d4:	6892      	ldr	r2, [r2, #8]
 80004d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80004da:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80004dc:	4b18      	ldr	r3, [pc, #96]	; (8000540 <SetSysClock+0xe4>)
 80004de:	4a18      	ldr	r2, [pc, #96]	; (8000540 <SetSysClock+0xe4>)
 80004e0:	6892      	ldr	r2, [r2, #8]
 80004e2:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 80004e6:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80004e8:	4b15      	ldr	r3, [pc, #84]	; (8000540 <SetSysClock+0xe4>)
 80004ea:	4a17      	ldr	r2, [pc, #92]	; (8000548 <SetSysClock+0xec>)
 80004ec:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80004ee:	4b14      	ldr	r3, [pc, #80]	; (8000540 <SetSysClock+0xe4>)
 80004f0:	4a13      	ldr	r2, [pc, #76]	; (8000540 <SetSysClock+0xe4>)
 80004f2:	6812      	ldr	r2, [r2, #0]
 80004f4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80004f8:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80004fa:	bf00      	nop
 80004fc:	4b10      	ldr	r3, [pc, #64]	; (8000540 <SetSysClock+0xe4>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000504:	2b00      	cmp	r3, #0
 8000506:	d0f9      	beq.n	80004fc <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000508:	4b10      	ldr	r3, [pc, #64]	; (800054c <SetSysClock+0xf0>)
 800050a:	f240 7205 	movw	r2, #1797	; 0x705
 800050e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000510:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <SetSysClock+0xe4>)
 8000512:	4a0b      	ldr	r2, [pc, #44]	; (8000540 <SetSysClock+0xe4>)
 8000514:	6892      	ldr	r2, [r2, #8]
 8000516:	f022 0203 	bic.w	r2, r2, #3
 800051a:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800051c:	4b08      	ldr	r3, [pc, #32]	; (8000540 <SetSysClock+0xe4>)
 800051e:	4a08      	ldr	r2, [pc, #32]	; (8000540 <SetSysClock+0xe4>)
 8000520:	6892      	ldr	r2, [r2, #8]
 8000522:	f042 0202 	orr.w	r2, r2, #2
 8000526:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000528:	bf00      	nop
 800052a:	4b05      	ldr	r3, [pc, #20]	; (8000540 <SetSysClock+0xe4>)
 800052c:	689b      	ldr	r3, [r3, #8]
 800052e:	f003 030c 	and.w	r3, r3, #12
 8000532:	2b08      	cmp	r3, #8
 8000534:	d1f9      	bne.n	800052a <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr
 8000540:	40023800 	.word	0x40023800
 8000544:	40007000 	.word	0x40007000
 8000548:	07405414 	.word	0x07405414
 800054c:	40023c00 	.word	0x40023c00

08000550 <swTimerInit>:
 * Initialize SW Timer
 *		* timerPeriod: 			Period before timer goes off
 *   	* repeat:				Should timer be reset after it expires
 *    	* pxCallbackFunction: 	Function called when timer expires
 *********************************************************************************************/
TimerHandle_t swTimerInit( uint16_t timer_period, UBaseType_t repeat, TimerCallbackFunction_t pxCallbackFunction ) {
 8000550:	b580      	push	{r7, lr}
 8000552:	b088      	sub	sp, #32
 8000554:	af02      	add	r7, sp, #8
 8000556:	4603      	mov	r3, r0
 8000558:	60b9      	str	r1, [r7, #8]
 800055a:	607a      	str	r2, [r7, #4]
 800055c:	81fb      	strh	r3, [r7, #14]

	// Convert period in milliseconds to tick counts
	TickType_t timer_tick = timer_period * ( 1 / portTICK_PERIOD_MS);
 800055e:	89fb      	ldrh	r3, [r7, #14]
 8000560:	617b      	str	r3, [r7, #20]

	// Create timer
	// Note that pvTimerID is set to NULL so that if the same callback function is assigned to more than one timer it can't tell between them
	TimerHandle_t handle = xTimerCreate("", timer_tick, repeat, NULL, pxCallbackFunction);
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	9300      	str	r3, [sp, #0]
 8000566:	4806      	ldr	r0, [pc, #24]	; (8000580 <swTimerInit+0x30>)
 8000568:	6979      	ldr	r1, [r7, #20]
 800056a:	68ba      	ldr	r2, [r7, #8]
 800056c:	2300      	movs	r3, #0
 800056e:	f002 fbdd 	bl	8002d2c <xTimerCreate>
 8000572:	6138      	str	r0, [r7, #16]

	return handle;
 8000574:	693b      	ldr	r3, [r7, #16]
}
 8000576:	4618      	mov	r0, r3
 8000578:	3718      	adds	r7, #24
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	08005ec4 	.word	0x08005ec4

08000584 <swTimerStart>:
/*********************************************************************************************
 * Start SW Timer
 * 		* handle:				Pointer to the timer created using swTimerInit
 * 		* timeWait:				Blocking time until timer starts (can be set to 0)
 *********************************************************************************************/
uint8_t swTimerStart( TimerHandle_t handle, uint8_t timeWait ) {
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af02      	add	r7, sp, #8
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	460b      	mov	r3, r1
 800058e:	70fb      	strb	r3, [r7, #3]

	// If handle is NULL, timer was never properly created
	if( handle == NULL ) {
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d101      	bne.n	800059a <swTimerStart+0x16>
		return FAILURE;
 8000596:	2300      	movs	r3, #0
 8000598:	e012      	b.n	80005c0 <swTimerStart+0x3c>
	}

	// Convert period in milliseconds to wait to tick counts
	TickType_t tickWait = timeWait * (1 / portTICK_PERIOD_MS);
 800059a:	78fb      	ldrb	r3, [r7, #3]
 800059c:	60fb      	str	r3, [r7, #12]
	if( xTimerStart(handle, tickWait) != pdPASS ) {
 800059e:	f003 fb43 	bl	8003c28 <xTaskGetTickCount>
 80005a2:	4603      	mov	r3, r0
 80005a4:	68fa      	ldr	r2, [r7, #12]
 80005a6:	9200      	str	r2, [sp, #0]
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	2101      	movs	r1, #1
 80005ac:	461a      	mov	r2, r3
 80005ae:	2300      	movs	r3, #0
 80005b0:	f002 fbec 	bl	8002d8c <xTimerGenericCommand>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d001      	beq.n	80005be <swTimerStart+0x3a>
		return FAILURE;
 80005ba:	2300      	movs	r3, #0
 80005bc:	e000      	b.n	80005c0 <swTimerStart+0x3c>
	}

	return SUCCESS;
 80005be:	2301      	movs	r3, #1
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3710      	adds	r7, #16
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <swTimerStop>:

/*********************************************************************************************
 * Stop SW Timer
 * 		* handle:				Pointer to the timer created using swTimerInit
 *********************************************************************************************/
uint8_t swTimerStop( TimerHandle_t handle ) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af02      	add	r7, sp, #8
 80005ce:	6078      	str	r0, [r7, #4]

	// If handle is NULL, timer was never properly created
	if( handle == NULL ) {
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d101      	bne.n	80005da <swTimerStop+0x12>
		return FAILURE;
 80005d6:	2300      	movs	r3, #0
 80005d8:	e00d      	b.n	80005f6 <swTimerStop+0x2e>
	}

	if( xTimerStop(handle, 0) != pdPASS ) {
 80005da:	2300      	movs	r3, #0
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	2103      	movs	r1, #3
 80005e2:	2200      	movs	r2, #0
 80005e4:	2300      	movs	r3, #0
 80005e6:	f002 fbd1 	bl	8002d8c <xTimerGenericCommand>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d001      	beq.n	80005f4 <swTimerStop+0x2c>
		return FAILURE;
 80005f0:	2300      	movs	r3, #0
 80005f2:	e000      	b.n	80005f6 <swTimerStop+0x2e>
	}

	return SUCCESS;
 80005f4:	2301      	movs	r3, #1
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop

08000600 <swIsTimerActive>:

/*********************************************************************************************
 * Check if SW Timer is active
 * 		* handle:				Pointer to the timer created using swTimerInit
 *********************************************************************************************/
uint8_t swIsTimerActive( TimerHandle_t handle ) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]

	if( xTimerIsTimerActive( handle ) != pdPASS ) {
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f002 fe11 	bl	8003230 <xTimerIsTimerActive>
 800060e:	4603      	mov	r3, r0
 8000610:	2b01      	cmp	r3, #1
 8000612:	d001      	beq.n	8000618 <swIsTimerActive+0x18>
		return FAILURE;
 8000614:	2300      	movs	r3, #0
 8000616:	e000      	b.n	800061a <swIsTimerActive+0x1a>
	}

	return SUCCESS;
 8000618:	2301      	movs	r3, #1
}
 800061a:	4618      	mov	r0, r3
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop

08000624 <prvDelayCallback>:


/*********************************************************************************************
 * Local timer callback function
 *********************************************************************************************/
void prvDelayCallback( TimerHandle_t pxTimer ) {
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
	delay_done = TRUE;
 800062c:	4b03      	ldr	r3, [pc, #12]	; (800063c <prvDelayCallback+0x18>)
 800062e:	2201      	movs	r2, #1
 8000630:	701a      	strb	r2, [r3, #0]
}
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	2001c1eb 	.word	0x2001c1eb

08000640 <swDelay>:


/*********************************************************************************************
 * Delay for given amount of time (in ms)
 *********************************************************************************************/
uint8_t swDelay( uint16_t delay_time ) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	80fb      	strh	r3, [r7, #6]

	// Set global false
	delay_done = FALSE;
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <swDelay+0x44>)
 800064c:	2200      	movs	r2, #0
 800064e:	701a      	strb	r2, [r3, #0]

	// Create and start local swTimer
	TimerHandle_t delay = swTimerInit( delay_time, NO_REPEAT, prvDelayCallback );
 8000650:	88fb      	ldrh	r3, [r7, #6]
 8000652:	4618      	mov	r0, r3
 8000654:	2100      	movs	r1, #0
 8000656:	4a0c      	ldr	r2, [pc, #48]	; (8000688 <swDelay+0x48>)
 8000658:	f7ff ff7a 	bl	8000550 <swTimerInit>
 800065c:	60f8      	str	r0, [r7, #12]
	if( !swTimerStart( delay, 0 ) ) {
 800065e:	68f8      	ldr	r0, [r7, #12]
 8000660:	2100      	movs	r1, #0
 8000662:	f7ff ff8f 	bl	8000584 <swTimerStart>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d101      	bne.n	8000670 <swDelay+0x30>
		return FAILURE;
 800066c:	2300      	movs	r3, #0
 800066e:	e005      	b.n	800067c <swDelay+0x3c>
	}

	// Wait until timer completes
	while( !delay_done );
 8000670:	bf00      	nop
 8000672:	4b04      	ldr	r3, [pc, #16]	; (8000684 <swDelay+0x44>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d0fb      	beq.n	8000672 <swDelay+0x32>

	return SUCCESS;
 800067a:	2301      	movs	r3, #1
}
 800067c:	4618      	mov	r0, r3
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	2001c1eb 	.word	0x2001c1eb
 8000688:	08000625 	.word	0x08000625

0800068c <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
}
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr

08000698 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 800069c:	e7fe      	b.n	800069c <HardFault_Handler+0x4>
 800069e:	bf00      	nop

080006a0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 80006a4:	e7fe      	b.n	80006a4 <MemManage_Handler+0x4>
 80006a6:	bf00      	nop

080006a8 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 80006ac:	e7fe      	b.n	80006ac <BusFault_Handler+0x4>
 80006ae:	bf00      	nop

080006b0 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 80006b4:	e7fe      	b.n	80006b4 <UsageFault_Handler+0x4>
 80006b6:	bf00      	nop

080006b8 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
}
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <sendPacket>:
 * %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */

/*********************************************************************************************
 * Base function to send all packets (or strings to setup WiFi module)
 *********************************************************************************************/
uint8_t sendPacket( char* packet, uint8_t length, uint8_t tilde ) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	4613      	mov	r3, r2
 80006ce:	460a      	mov	r2, r1
 80006d0:	70fa      	strb	r2, [r7, #3]
 80006d2:	70bb      	strb	r3, [r7, #2]
	int i;
	for( i=0; i < length; i++ ) {
 80006d4:	2300      	movs	r3, #0
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	e013      	b.n	8000702 <sendPacket+0x3e>
		// Wait for data register to be empty before adding the next char
		while( !(WIFI_USART->SR & 0x00000040) );
 80006da:	bf00      	nop
 80006dc:	4b21      	ldr	r3, [pc, #132]	; (8000764 <sendPacket+0xa0>)
 80006de:	881b      	ldrh	r3, [r3, #0]
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d0f8      	beq.n	80006dc <sendPacket+0x18>

		// Put into TX register
		USART_SendData( WIFI_USART, *packet );
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	481d      	ldr	r0, [pc, #116]	; (8000764 <sendPacket+0xa0>)
 80006f0:	4619      	mov	r1, r3
 80006f2:	f001 f80f 	bl	8001714 <USART_SendData>
		packet++;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	3301      	adds	r3, #1
 80006fa:	607b      	str	r3, [r7, #4]
/*********************************************************************************************
 * Base function to send all packets (or strings to setup WiFi module)
 *********************************************************************************************/
uint8_t sendPacket( char* packet, uint8_t length, uint8_t tilde ) {
	int i;
	for( i=0; i < length; i++ ) {
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	3301      	adds	r3, #1
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	78fa      	ldrb	r2, [r7, #3]
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	429a      	cmp	r2, r3
 8000708:	dce7      	bgt.n	80006da <sendPacket+0x16>
		USART_SendData( WIFI_USART, *packet );
		packet++;
	}

	// Check if it is a custom packet
	if( tilde == TRUE ) {
 800070a:	78bb      	ldrb	r3, [r7, #2]
 800070c:	2b01      	cmp	r3, #1
 800070e:	d10c      	bne.n	800072a <sendPacket+0x66>
		while( !(WIFI_USART->SR & 0x00000040) );
 8000710:	bf00      	nop
 8000712:	4b14      	ldr	r3, [pc, #80]	; (8000764 <sendPacket+0xa0>)
 8000714:	881b      	ldrh	r3, [r3, #0]
 8000716:	b29b      	uxth	r3, r3
 8000718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800071c:	2b00      	cmp	r3, #0
 800071e:	d0f8      	beq.n	8000712 <sendPacket+0x4e>
		USART_SendData( WIFI_USART, '~' );
 8000720:	4810      	ldr	r0, [pc, #64]	; (8000764 <sendPacket+0xa0>)
 8000722:	217e      	movs	r1, #126	; 0x7e
 8000724:	f000 fff6 	bl	8001714 <USART_SendData>
	}

	// WiFi module expects \r\n at the end of every string
	while( !(WIFI_USART->SR & 0x00000040) );
 8000728:	e7ff      	b.n	800072a <sendPacket+0x66>
 800072a:	bf00      	nop
 800072c:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <sendPacket+0xa0>)
 800072e:	881b      	ldrh	r3, [r3, #0]
 8000730:	b29b      	uxth	r3, r3
 8000732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000736:	2b00      	cmp	r3, #0
 8000738:	d0f8      	beq.n	800072c <sendPacket+0x68>
	USART_SendData( WIFI_USART, '\r' );
 800073a:	480a      	ldr	r0, [pc, #40]	; (8000764 <sendPacket+0xa0>)
 800073c:	210d      	movs	r1, #13
 800073e:	f000 ffe9 	bl	8001714 <USART_SendData>

	while( !(WIFI_USART->SR & 0x00000040) );
 8000742:	bf00      	nop
 8000744:	4b07      	ldr	r3, [pc, #28]	; (8000764 <sendPacket+0xa0>)
 8000746:	881b      	ldrh	r3, [r3, #0]
 8000748:	b29b      	uxth	r3, r3
 800074a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800074e:	2b00      	cmp	r3, #0
 8000750:	d0f8      	beq.n	8000744 <sendPacket+0x80>
	USART_SendData( WIFI_USART, '\n' );
 8000752:	4804      	ldr	r0, [pc, #16]	; (8000764 <sendPacket+0xa0>)
 8000754:	210a      	movs	r1, #10
 8000756:	f000 ffdd 	bl	8001714 <USART_SendData>

	return SUCCESS;
 800075a:	2301      	movs	r3, #1
}
 800075c:	4618      	mov	r0, r3
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40004800 	.word	0x40004800

08000768 <sendAck>:


/*********************************************************************************************
 * Send Ack
 *********************************************************************************************/
uint8_t sendAck( Header* header, uint8_t success ) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b088      	sub	sp, #32
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	460b      	mov	r3, r1
 8000772:	70fb      	strb	r3, [r7, #3]

	// Fill Ack struct
	Ack* ack = pvPortMalloc( sizeof(Ack) );
 8000774:	2001      	movs	r0, #1
 8000776:	f005 f97d 	bl	8005a74 <pvPortMalloc>
 800077a:	61f8      	str	r0, [r7, #28]
	ack->success = success;
 800077c:	69fb      	ldr	r3, [r7, #28]
 800077e:	78fa      	ldrb	r2, [r7, #3]
 8000780:	701a      	strb	r2, [r3, #0]

	// Update the length of the packet in the header
	header->length = (HEADER_LENGTH + ACK_LENGTH);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	2206      	movs	r2, #6
 8000786:	711a      	strb	r2, [r3, #4]

	// Convert structs into strings
	char* header_char = (char*) header;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	61bb      	str	r3, [r7, #24]
	char* ack_char = (char*) ack;
 800078c:	69fb      	ldr	r3, [r7, #28]
 800078e:	617b      	str	r3, [r7, #20]

	// Package header and payload together
	char* ack_packet = pvPortMalloc( sizeof((uint8_t)(header->length)) );
 8000790:	2001      	movs	r0, #1
 8000792:	f005 f96f 	bl	8005a74 <pvPortMalloc>
 8000796:	6138      	str	r0, [r7, #16]
	pack( ack_packet, header_char, 0 );
 8000798:	6938      	ldr	r0, [r7, #16]
 800079a:	69b9      	ldr	r1, [r7, #24]
 800079c:	2200      	movs	r2, #0
 800079e:	f000 fa83 	bl	8000ca8 <pack>
	pack( ack_packet, ack_char, HEADER_LENGTH );
 80007a2:	6938      	ldr	r0, [r7, #16]
 80007a4:	6979      	ldr	r1, [r7, #20]
 80007a6:	2205      	movs	r2, #5
 80007a8:	f000 fa7e 	bl	8000ca8 <pack>

	// Send packet
	switch(wifi_channel[header->dest]) {
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	4a14      	ldr	r2, [pc, #80]	; (8000804 <sendAck+0x9c>)
 80007b2:	5cd3      	ldrb	r3, [r2, r3]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d002      	beq.n	80007be <sendAck+0x56>
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d006      	beq.n	80007ca <sendAck+0x62>
 80007bc:	e00b      	b.n	80007d6 <sendAck+0x6e>
		case 0:
			sendPacket( "AT+CIPSEND=0,7", 14, FALSE);
 80007be:	4812      	ldr	r0, [pc, #72]	; (8000808 <sendAck+0xa0>)
 80007c0:	210e      	movs	r1, #14
 80007c2:	2200      	movs	r2, #0
 80007c4:	f7ff ff7e 	bl	80006c4 <sendPacket>
			break;
 80007c8:	e005      	b.n	80007d6 <sendAck+0x6e>
		case 1:
			sendPacket( "AT+CIPSEND=1,7", 14, FALSE );
 80007ca:	4810      	ldr	r0, [pc, #64]	; (800080c <sendAck+0xa4>)
 80007cc:	210e      	movs	r1, #14
 80007ce:	2200      	movs	r2, #0
 80007d0:	f7ff ff78 	bl	80006c4 <sendPacket>
			break;
 80007d4:	bf00      	nop
	}
	swDelay(100);
 80007d6:	2064      	movs	r0, #100	; 0x64
 80007d8:	f7ff ff32 	bl	8000640 <swDelay>
	uint8_t result = sendPacket( ack_packet, header->length, TRUE );
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	791b      	ldrb	r3, [r3, #4]
 80007e0:	6938      	ldr	r0, [r7, #16]
 80007e2:	4619      	mov	r1, r3
 80007e4:	2201      	movs	r2, #1
 80007e6:	f7ff ff6d 	bl	80006c4 <sendPacket>
 80007ea:	4603      	mov	r3, r0
 80007ec:	73fb      	strb	r3, [r7, #15]

	// Free variables
	vPortFree(ack);
 80007ee:	69f8      	ldr	r0, [r7, #28]
 80007f0:	f005 f9d8 	bl	8005ba4 <vPortFree>
	vPortFree(ack_packet);
 80007f4:	6938      	ldr	r0, [r7, #16]
 80007f6:	f005 f9d5 	bl	8005ba4 <vPortFree>

	return result;
 80007fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	3720      	adds	r7, #32
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	2001c1f4 	.word	0x2001c1f4
 8000808:	08005ec8 	.word	0x08005ec8
 800080c:	08005ed8 	.word	0x08005ed8

08000810 <sendPing>:


/*********************************************************************************************
 * Send Ping
 *********************************************************************************************/
uint8_t sendPing( Header* header ) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b086      	sub	sp, #24
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]

	// Update the length of the packet in the header
	header->length = (HEADER_LENGTH + PING_LENGTH);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2205      	movs	r2, #5
 800081c:	711a      	strb	r2, [r3, #4]

	// Convert structs into strings
	char* header_char = (char*) header;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	617b      	str	r3, [r7, #20]

	// Package header and payload together
	char* ping_packet = pvPortMalloc( sizeof((uint8_t)(header->length)) );
 8000822:	2001      	movs	r0, #1
 8000824:	f005 f926 	bl	8005a74 <pvPortMalloc>
 8000828:	6138      	str	r0, [r7, #16]
	pack( ping_packet, header_char, 0 );
 800082a:	6938      	ldr	r0, [r7, #16]
 800082c:	6979      	ldr	r1, [r7, #20]
 800082e:	2200      	movs	r2, #0
 8000830:	f000 fa3a 	bl	8000ca8 <pack>

	// Send packet
	switch(wifi_channel[header->dest]) {
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	4a13      	ldr	r2, [pc, #76]	; (8000888 <sendPing+0x78>)
 800083a:	5cd3      	ldrb	r3, [r2, r3]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d002      	beq.n	8000846 <sendPing+0x36>
 8000840:	2b01      	cmp	r3, #1
 8000842:	d006      	beq.n	8000852 <sendPing+0x42>
 8000844:	e00b      	b.n	800085e <sendPing+0x4e>
		case 0:
			sendPacket( "AT+CIPSEND=0,6", 14, FALSE );
 8000846:	4811      	ldr	r0, [pc, #68]	; (800088c <sendPing+0x7c>)
 8000848:	210e      	movs	r1, #14
 800084a:	2200      	movs	r2, #0
 800084c:	f7ff ff3a 	bl	80006c4 <sendPacket>
			break;
 8000850:	e005      	b.n	800085e <sendPing+0x4e>
		case 1:
			sendPacket( "AT+CIPSEND=1,6", 14, FALSE );
 8000852:	480f      	ldr	r0, [pc, #60]	; (8000890 <sendPing+0x80>)
 8000854:	210e      	movs	r1, #14
 8000856:	2200      	movs	r2, #0
 8000858:	f7ff ff34 	bl	80006c4 <sendPacket>
			break;
 800085c:	bf00      	nop
	}
	swDelay(100);
 800085e:	2064      	movs	r0, #100	; 0x64
 8000860:	f7ff feee 	bl	8000640 <swDelay>
	uint8_t result = sendPacket( ping_packet, header->length, TRUE );
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	791b      	ldrb	r3, [r3, #4]
 8000868:	6938      	ldr	r0, [r7, #16]
 800086a:	4619      	mov	r1, r3
 800086c:	2201      	movs	r2, #1
 800086e:	f7ff ff29 	bl	80006c4 <sendPacket>
 8000872:	4603      	mov	r3, r0
 8000874:	73fb      	strb	r3, [r7, #15]

	// Free variables
	vPortFree(ping_packet);
 8000876:	6938      	ldr	r0, [r7, #16]
 8000878:	f005 f994 	bl	8005ba4 <vPortFree>

	return result;
 800087c:	7bfb      	ldrb	r3, [r7, #15]
}
 800087e:	4618      	mov	r0, r3
 8000880:	3718      	adds	r7, #24
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	2001c1f4 	.word	0x2001c1f4
 800088c:	08005ee8 	.word	0x08005ee8
 8000890:	08005ef8 	.word	0x08005ef8

08000894 <sendChangeMode>:


/*********************************************************************************************
 * Send ChangeMode
 *********************************************************************************************/
uint8_t sendChangeMode( Header* header, Mode newMode ) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b088      	sub	sp, #32
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	460b      	mov	r3, r1
 800089e:	70fb      	strb	r3, [r7, #3]

	// Fill ChangeMode struct
	ChangeMode* change_mode = pvPortMalloc( sizeof(ChangeMode) );
 80008a0:	2001      	movs	r0, #1
 80008a2:	f005 f8e7 	bl	8005a74 <pvPortMalloc>
 80008a6:	61f8      	str	r0, [r7, #28]
	change_mode->newMode = newMode;
 80008a8:	69fb      	ldr	r3, [r7, #28]
 80008aa:	78fa      	ldrb	r2, [r7, #3]
 80008ac:	701a      	strb	r2, [r3, #0]

	// Update the length of the packet in the header
	header->length = (HEADER_LENGTH + CHANGE_MODE_LENGTH);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	2206      	movs	r2, #6
 80008b2:	711a      	strb	r2, [r3, #4]

	// Convert structs into strings
	char* header_char = (char*) header;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	61bb      	str	r3, [r7, #24]
	char* change_mode_char = (char*) change_mode;
 80008b8:	69fb      	ldr	r3, [r7, #28]
 80008ba:	617b      	str	r3, [r7, #20]

	// Package header and payload together
	char* change_mode_packet = pvPortMalloc( sizeof((uint8_t)(header->length)) );
 80008bc:	2001      	movs	r0, #1
 80008be:	f005 f8d9 	bl	8005a74 <pvPortMalloc>
 80008c2:	6138      	str	r0, [r7, #16]
	pack( change_mode_packet, header_char, 0 );
 80008c4:	6938      	ldr	r0, [r7, #16]
 80008c6:	69b9      	ldr	r1, [r7, #24]
 80008c8:	2200      	movs	r2, #0
 80008ca:	f000 f9ed 	bl	8000ca8 <pack>
	pack( change_mode_packet, change_mode_char, HEADER_LENGTH );
 80008ce:	6938      	ldr	r0, [r7, #16]
 80008d0:	6979      	ldr	r1, [r7, #20]
 80008d2:	2205      	movs	r2, #5
 80008d4:	f000 f9e8 	bl	8000ca8 <pack>

	// Send packet
	switch(wifi_channel[header->dest]) {
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	4a14      	ldr	r2, [pc, #80]	; (8000930 <sendChangeMode+0x9c>)
 80008de:	5cd3      	ldrb	r3, [r2, r3]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d002      	beq.n	80008ea <sendChangeMode+0x56>
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d006      	beq.n	80008f6 <sendChangeMode+0x62>
 80008e8:	e00b      	b.n	8000902 <sendChangeMode+0x6e>
		case 0:
			sendPacket( "AT+CIPSEND=0,7", 14, FALSE );
 80008ea:	4812      	ldr	r0, [pc, #72]	; (8000934 <sendChangeMode+0xa0>)
 80008ec:	210e      	movs	r1, #14
 80008ee:	2200      	movs	r2, #0
 80008f0:	f7ff fee8 	bl	80006c4 <sendPacket>
			break;
 80008f4:	e005      	b.n	8000902 <sendChangeMode+0x6e>
		case 1:
			sendPacket( "AT+CIPSEND=1,7", 14, FALSE );
 80008f6:	4810      	ldr	r0, [pc, #64]	; (8000938 <sendChangeMode+0xa4>)
 80008f8:	210e      	movs	r1, #14
 80008fa:	2200      	movs	r2, #0
 80008fc:	f7ff fee2 	bl	80006c4 <sendPacket>
			break;
 8000900:	bf00      	nop
	}
	swDelay(100);
 8000902:	2064      	movs	r0, #100	; 0x64
 8000904:	f7ff fe9c 	bl	8000640 <swDelay>
	uint8_t result = sendPacket( change_mode_packet, header->length, TRUE );
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	791b      	ldrb	r3, [r3, #4]
 800090c:	6938      	ldr	r0, [r7, #16]
 800090e:	4619      	mov	r1, r3
 8000910:	2201      	movs	r2, #1
 8000912:	f7ff fed7 	bl	80006c4 <sendPacket>
 8000916:	4603      	mov	r3, r0
 8000918:	73fb      	strb	r3, [r7, #15]

	// Free variables
	vPortFree(change_mode);
 800091a:	69f8      	ldr	r0, [r7, #28]
 800091c:	f005 f942 	bl	8005ba4 <vPortFree>
	vPortFree(change_mode_packet);
 8000920:	6938      	ldr	r0, [r7, #16]
 8000922:	f005 f93f 	bl	8005ba4 <vPortFree>

	return result;
 8000926:	7bfb      	ldrb	r3, [r7, #15]
}
 8000928:	4618      	mov	r0, r3
 800092a:	3720      	adds	r7, #32
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	2001c1f4 	.word	0x2001c1f4
 8000934:	08005ec8 	.word	0x08005ec8
 8000938:	08005ed8 	.word	0x08005ed8

0800093c <sendTrafficLightCurrent>:


/*********************************************************************************************
 * Send TrafficLightCurrent
 *********************************************************************************************/
uint8_t sendTrafficLightCurrent( Header* header, lightState northSouth, lightState eastWest ) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b088      	sub	sp, #32
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	4613      	mov	r3, r2
 8000946:	460a      	mov	r2, r1
 8000948:	70fa      	strb	r2, [r7, #3]
 800094a:	70bb      	strb	r3, [r7, #2]

	// Fill TrafficLightCurrent struct
	TrafficLightCurrent* traffic_light_current = pvPortMalloc( sizeof(TrafficLightCurrent) );
 800094c:	2002      	movs	r0, #2
 800094e:	f005 f891 	bl	8005a74 <pvPortMalloc>
 8000952:	61b8      	str	r0, [r7, #24]
	traffic_light_current->northSouth = northSouth;
 8000954:	69bb      	ldr	r3, [r7, #24]
 8000956:	78fa      	ldrb	r2, [r7, #3]
 8000958:	701a      	strb	r2, [r3, #0]
	traffic_light_current->eastWest = eastWest;
 800095a:	69bb      	ldr	r3, [r7, #24]
 800095c:	78ba      	ldrb	r2, [r7, #2]
 800095e:	705a      	strb	r2, [r3, #1]

	// Update the length of the packet in the header
	header->length = (HEADER_LENGTH + CURRENT_LENGTH);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2207      	movs	r2, #7
 8000964:	711a      	strb	r2, [r3, #4]

	// Convert structs into strings
	char* header_char = (char*) header;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	617b      	str	r3, [r7, #20]
	char* traffic_light_current_char = (char*) traffic_light_current;
 800096a:	69bb      	ldr	r3, [r7, #24]
 800096c:	613b      	str	r3, [r7, #16]

	// Package header and payload together
	char* traffic_light_current_packet = pvPortMalloc( sizeof((uint8_t)(header->length)) );
 800096e:	2001      	movs	r0, #1
 8000970:	f005 f880 	bl	8005a74 <pvPortMalloc>
 8000974:	60f8      	str	r0, [r7, #12]
	pack( traffic_light_current_packet, header_char, 0 );
 8000976:	68f8      	ldr	r0, [r7, #12]
 8000978:	6979      	ldr	r1, [r7, #20]
 800097a:	2200      	movs	r2, #0
 800097c:	f000 f994 	bl	8000ca8 <pack>
	pack( traffic_light_current_packet, traffic_light_current_char, HEADER_LENGTH );
 8000980:	68f8      	ldr	r0, [r7, #12]
 8000982:	6939      	ldr	r1, [r7, #16]
 8000984:	2205      	movs	r2, #5
 8000986:	f000 f98f 	bl	8000ca8 <pack>

	// Send packet
	switch(wifi_channel[header->dest]) {
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	4a17      	ldr	r2, [pc, #92]	; (80009ec <sendTrafficLightCurrent+0xb0>)
 8000990:	5cd3      	ldrb	r3, [r2, r3]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d002      	beq.n	800099c <sendTrafficLightCurrent+0x60>
 8000996:	2b01      	cmp	r3, #1
 8000998:	d006      	beq.n	80009a8 <sendTrafficLightCurrent+0x6c>
 800099a:	e00b      	b.n	80009b4 <sendTrafficLightCurrent+0x78>
		case 0:
			sendPacket( "AT+CIPSEND=0,8", 14, FALSE);
 800099c:	4814      	ldr	r0, [pc, #80]	; (80009f0 <sendTrafficLightCurrent+0xb4>)
 800099e:	210e      	movs	r1, #14
 80009a0:	2200      	movs	r2, #0
 80009a2:	f7ff fe8f 	bl	80006c4 <sendPacket>
			break;
 80009a6:	e005      	b.n	80009b4 <sendTrafficLightCurrent+0x78>
		case 1:
			sendPacket( "AT+CIPSEND=1,8", 14, FALSE );
 80009a8:	4812      	ldr	r0, [pc, #72]	; (80009f4 <sendTrafficLightCurrent+0xb8>)
 80009aa:	210e      	movs	r1, #14
 80009ac:	2200      	movs	r2, #0
 80009ae:	f7ff fe89 	bl	80006c4 <sendPacket>
			break;
 80009b2:	bf00      	nop
	}
	uint32_t delay = 100000;
 80009b4:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <sendTrafficLightCurrent+0xbc>)
 80009b6:	61fb      	str	r3, [r7, #28]
	while( delay-- != 0 );
 80009b8:	bf00      	nop
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	1e5a      	subs	r2, r3, #1
 80009be:	61fa      	str	r2, [r7, #28]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d1fa      	bne.n	80009ba <sendTrafficLightCurrent+0x7e>
	uint8_t result = sendPacket( traffic_light_current_packet, header->length, TRUE );
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	791b      	ldrb	r3, [r3, #4]
 80009c8:	68f8      	ldr	r0, [r7, #12]
 80009ca:	4619      	mov	r1, r3
 80009cc:	2201      	movs	r2, #1
 80009ce:	f7ff fe79 	bl	80006c4 <sendPacket>
 80009d2:	4603      	mov	r3, r0
 80009d4:	72fb      	strb	r3, [r7, #11]

	// Free variables
	vPortFree(traffic_light_current);
 80009d6:	69b8      	ldr	r0, [r7, #24]
 80009d8:	f005 f8e4 	bl	8005ba4 <vPortFree>
	vPortFree(traffic_light_current_packet);
 80009dc:	68f8      	ldr	r0, [r7, #12]
 80009de:	f005 f8e1 	bl	8005ba4 <vPortFree>

	return result;
 80009e2:	7afb      	ldrb	r3, [r7, #11]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3720      	adds	r7, #32
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	2001c1f4 	.word	0x2001c1f4
 80009f0:	08005f08 	.word	0x08005f08
 80009f4:	08005f18 	.word	0x08005f18
 80009f8:	000186a0 	.word	0x000186a0

080009fc <sendTrafficLightFuture>:


/*********************************************************************************************
 * Send TrafficLightFuture
 *********************************************************************************************/
uint8_t sendTrafficLightFuture( Header* header, lightState northSouth, uint8_t changeTimeNS, lightState eastWest, uint8_t changeTimeEW ) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b088      	sub	sp, #32
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	70f9      	strb	r1, [r7, #3]
 8000a06:	70ba      	strb	r2, [r7, #2]
 8000a08:	707b      	strb	r3, [r7, #1]

	// Fill TrafficLightFuture struct
	TrafficLightFuture* traffic_light_future = pvPortMalloc( sizeof(TrafficLightFuture) );
 8000a0a:	2004      	movs	r0, #4
 8000a0c:	f005 f832 	bl	8005a74 <pvPortMalloc>
 8000a10:	61b8      	str	r0, [r7, #24]
	traffic_light_future->northSouth = northSouth;
 8000a12:	69bb      	ldr	r3, [r7, #24]
 8000a14:	78fa      	ldrb	r2, [r7, #3]
 8000a16:	701a      	strb	r2, [r3, #0]
	traffic_light_future->changeTimeNS = changeTimeNS;
 8000a18:	69bb      	ldr	r3, [r7, #24]
 8000a1a:	78ba      	ldrb	r2, [r7, #2]
 8000a1c:	705a      	strb	r2, [r3, #1]
	traffic_light_future->eastWest = eastWest;
 8000a1e:	69bb      	ldr	r3, [r7, #24]
 8000a20:	787a      	ldrb	r2, [r7, #1]
 8000a22:	709a      	strb	r2, [r3, #2]
	traffic_light_future->changeTimeEW = changeTimeEW;
 8000a24:	69bb      	ldr	r3, [r7, #24]
 8000a26:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000a2a:	70da      	strb	r2, [r3, #3]


	// Update the length of the packet in the header
	header->length = (HEADER_LENGTH + FUTURE_LENGTH);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2209      	movs	r2, #9
 8000a30:	711a      	strb	r2, [r3, #4]

	// Convert structs into strings
	char* header_char = (char*) header;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	617b      	str	r3, [r7, #20]
	char* traffic_light_future_char = (char*) traffic_light_future;
 8000a36:	69bb      	ldr	r3, [r7, #24]
 8000a38:	613b      	str	r3, [r7, #16]

	// Package header and payload together
	char* traffic_light_future_packet = pvPortMalloc( sizeof((uint8_t)(header->length)) );
 8000a3a:	2001      	movs	r0, #1
 8000a3c:	f005 f81a 	bl	8005a74 <pvPortMalloc>
 8000a40:	60f8      	str	r0, [r7, #12]
	pack( traffic_light_future_packet, header_char, 0 );
 8000a42:	68f8      	ldr	r0, [r7, #12]
 8000a44:	6979      	ldr	r1, [r7, #20]
 8000a46:	2200      	movs	r2, #0
 8000a48:	f000 f92e 	bl	8000ca8 <pack>
	pack( traffic_light_future_packet, traffic_light_future_char, HEADER_LENGTH );
 8000a4c:	68f8      	ldr	r0, [r7, #12]
 8000a4e:	6939      	ldr	r1, [r7, #16]
 8000a50:	2205      	movs	r2, #5
 8000a52:	f000 f929 	bl	8000ca8 <pack>

	// Send packet
	switch(wifi_channel[header->dest]) {
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	4a17      	ldr	r2, [pc, #92]	; (8000ab8 <sendTrafficLightFuture+0xbc>)
 8000a5c:	5cd3      	ldrb	r3, [r2, r3]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d002      	beq.n	8000a68 <sendTrafficLightFuture+0x6c>
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d006      	beq.n	8000a74 <sendTrafficLightFuture+0x78>
 8000a66:	e00b      	b.n	8000a80 <sendTrafficLightFuture+0x84>
		case 0:
			sendPacket( "AT+CIPSEND=0,10", 15, FALSE );
 8000a68:	4814      	ldr	r0, [pc, #80]	; (8000abc <sendTrafficLightFuture+0xc0>)
 8000a6a:	210f      	movs	r1, #15
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f7ff fe29 	bl	80006c4 <sendPacket>
			break;
 8000a72:	e005      	b.n	8000a80 <sendTrafficLightFuture+0x84>
		case 1:
			sendPacket( "AT+CIPSEND=1,10", 15, FALSE );
 8000a74:	4812      	ldr	r0, [pc, #72]	; (8000ac0 <sendTrafficLightFuture+0xc4>)
 8000a76:	210f      	movs	r1, #15
 8000a78:	2200      	movs	r2, #0
 8000a7a:	f7ff fe23 	bl	80006c4 <sendPacket>
			break;
 8000a7e:	bf00      	nop
	}
	uint32_t delay = 100000;
 8000a80:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <sendTrafficLightFuture+0xc8>)
 8000a82:	61fb      	str	r3, [r7, #28]
	while( delay-- != 0 );
 8000a84:	bf00      	nop
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	1e5a      	subs	r2, r3, #1
 8000a8a:	61fa      	str	r2, [r7, #28]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d1fa      	bne.n	8000a86 <sendTrafficLightFuture+0x8a>
	uint8_t result = sendPacket( traffic_light_future_packet, header->length, TRUE );
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	791b      	ldrb	r3, [r3, #4]
 8000a94:	68f8      	ldr	r0, [r7, #12]
 8000a96:	4619      	mov	r1, r3
 8000a98:	2201      	movs	r2, #1
 8000a9a:	f7ff fe13 	bl	80006c4 <sendPacket>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	72fb      	strb	r3, [r7, #11]

	// Free variables
	vPortFree(traffic_light_future);
 8000aa2:	69b8      	ldr	r0, [r7, #24]
 8000aa4:	f005 f87e 	bl	8005ba4 <vPortFree>
	vPortFree(traffic_light_future_packet);
 8000aa8:	68f8      	ldr	r0, [r7, #12]
 8000aaa:	f005 f87b 	bl	8005ba4 <vPortFree>

	return result;
 8000aae:	7afb      	ldrb	r3, [r7, #11]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3720      	adds	r7, #32
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	2001c1f4 	.word	0x2001c1f4
 8000abc:	08005f28 	.word	0x08005f28
 8000ac0:	08005f38 	.word	0x08005f38
 8000ac4:	000186a0 	.word	0x000186a0

08000ac8 <handlePacket>:
 * %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */

/*********************************************************************************************
 * Base function to handle all packets
 *********************************************************************************************/
PacketResult handlePacket( char* packet ) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]

	// Extract the header
	Header* header = pvPortMalloc( sizeof(Header) );
 8000ad0:	2005      	movs	r0, #5
 8000ad2:	f004 ffcf 	bl	8005a74 <pvPortMalloc>
 8000ad6:	6178      	str	r0, [r7, #20]
	char* header_char = (char*) header;
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	613b      	str	r3, [r7, #16]
	unpack( packet, header_char, 0 );
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	6939      	ldr	r1, [r7, #16]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f000 f903 	bl	8000cec <unpack>

	// Convert string back to Header struct
	header = (Header*) header_char;
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	617b      	str	r3, [r7, #20]

	// Create packet result struct
	PacketResult packet_result;
	packet_result.type = header->type;
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	78db      	ldrb	r3, [r3, #3]
 8000aee:	723b      	strb	r3, [r7, #8]

	// Sort by mode of operation
	if( (header->mode == allModes) || (header->mode == my_mode ) ) {
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	789b      	ldrb	r3, [r3, #2]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d005      	beq.n	8000b04 <handlePacket+0x3c>
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	789a      	ldrb	r2, [r3, #2]
 8000afc:	4b2b      	ldr	r3, [pc, #172]	; (8000bac <handlePacket+0xe4>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d140      	bne.n	8000b86 <handlePacket+0xbe>

		// Based on packet type, call the correct handle function
		switch( header->type ) {
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	78db      	ldrb	r3, [r3, #3]
 8000b08:	2b06      	cmp	r3, #6
 8000b0a:	d826      	bhi.n	8000b5a <handlePacket+0x92>
 8000b0c:	a201      	add	r2, pc, #4	; (adr r2, 8000b14 <handlePacket+0x4c>)
 8000b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b12:	bf00      	nop
 8000b14:	08000b31 	.word	0x08000b31
 8000b18:	08000b3f 	.word	0x08000b3f
 8000b1c:	08000b5b 	.word	0x08000b5b
 8000b20:	08000b5b 	.word	0x08000b5b
 8000b24:	08000b5b 	.word	0x08000b5b
 8000b28:	08000b4d 	.word	0x08000b4d
 8000b2c:	08000b83 	.word	0x08000b83
			case ack:
				packet_result.result = handleAck( header, packet );
 8000b30:	6978      	ldr	r0, [r7, #20]
 8000b32:	6879      	ldr	r1, [r7, #4]
 8000b34:	f000 f83c 	bl	8000bb0 <handleAck>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	727b      	strb	r3, [r7, #9]
				break;
 8000b3c:	e022      	b.n	8000b84 <handlePacket+0xbc>
			case ping:
				packet_result.result = handlePing( header, packet );
 8000b3e:	6978      	ldr	r0, [r7, #20]
 8000b40:	6879      	ldr	r1, [r7, #4]
 8000b42:	f000 f853 	bl	8000bec <handlePing>
 8000b46:	4603      	mov	r3, r0
 8000b48:	727b      	strb	r3, [r7, #9]
				break;
 8000b4a:	e01b      	b.n	8000b84 <handlePacket+0xbc>
			case setMode:
				packet_result.result = handleSetMode( header, packet );
 8000b4c:	6978      	ldr	r0, [r7, #20]
 8000b4e:	6879      	ldr	r1, [r7, #4]
 8000b50:	f000 f886 	bl	8000c60 <handleSetMode>
 8000b54:	4603      	mov	r3, r0
 8000b56:	727b      	strb	r3, [r7, #9]
				break;
 8000b58:	e014      	b.n	8000b84 <handlePacket+0xbc>
			case powerConsumption:
				// TODO: Add handler
				break;
			default:
				// If there is no handle function, send back negative Ack
				header->dest = header->addr;
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	785a      	ldrb	r2, [r3, #1]
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	701a      	strb	r2, [r3, #0]
				header->addr = MY_ADDR;
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	2202      	movs	r2, #2
 8000b66:	705a      	strb	r2, [r3, #1]
				header->mode = allModes;
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	709a      	strb	r2, [r3, #2]
				header->type = ack;
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	2200      	movs	r2, #0
 8000b72:	70da      	strb	r2, [r3, #3]
				sendAck( header, FAILURE );
 8000b74:	6978      	ldr	r0, [r7, #20]
 8000b76:	2100      	movs	r1, #0
 8000b78:	f7ff fdf6 	bl	8000768 <sendAck>
				packet_result.result = FAILURE;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	727b      	strb	r3, [r7, #9]
				break;
 8000b80:	e000      	b.n	8000b84 <handlePacket+0xbc>
			case setMode:
				packet_result.result = handleSetMode( header, packet );
				break;
			case powerConsumption:
				// TODO: Add handler
				break;
 8000b82:	bf00      	nop
				header->type = ack;
				sendAck( header, FAILURE );
				packet_result.result = FAILURE;
				break;
		}
	} else {
 8000b84:	e001      	b.n	8000b8a <handlePacket+0xc2>
		packet_result.result = WRONG_MODE;
 8000b86:	2302      	movs	r3, #2
 8000b88:	727b      	strb	r3, [r7, #9]
	}

	// Free variables
	vPortFree( header );
 8000b8a:	6978      	ldr	r0, [r7, #20]
 8000b8c:	f005 f80a 	bl	8005ba4 <vPortFree>

	return packet_result;
 8000b90:	893b      	ldrh	r3, [r7, #8]
 8000b92:	81bb      	strh	r3, [r7, #12]
 8000b94:	2300      	movs	r3, #0
 8000b96:	7b3a      	ldrb	r2, [r7, #12]
 8000b98:	f362 0307 	bfi	r3, r2, #0, #8
 8000b9c:	7b7a      	ldrb	r2, [r7, #13]
 8000b9e:	f362 230f 	bfi	r3, r2, #8, #8
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3718      	adds	r7, #24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	2001c229 	.word	0x2001c229

08000bb0 <handleAck>:


/*********************************************************************************************
 * Handle Ack
 *********************************************************************************************/
uint8_t handleAck( Header* header, char* packet ) {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	6039      	str	r1, [r7, #0]

	// Extract the pay load
	Ack* ack = pvPortMalloc( sizeof(Ack) );
 8000bba:	2001      	movs	r0, #1
 8000bbc:	f004 ff5a 	bl	8005a74 <pvPortMalloc>
 8000bc0:	6178      	str	r0, [r7, #20]
	char* ack_char = (char*) ack;
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	613b      	str	r3, [r7, #16]
	unpack( packet, ack_char, HEADER_LENGTH );
 8000bc6:	6838      	ldr	r0, [r7, #0]
 8000bc8:	6939      	ldr	r1, [r7, #16]
 8000bca:	2205      	movs	r2, #5
 8000bcc:	f000 f88e 	bl	8000cec <unpack>

	// Convert string back to Ack struct
	ack = (Ack*) ack_char;
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	617b      	str	r3, [r7, #20]

	// Indicate success or failure from packet
	uint8_t result = ack->success;
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	73fb      	strb	r3, [r7, #15]

	// Free variables
	vPortFree( ack );
 8000bda:	6978      	ldr	r0, [r7, #20]
 8000bdc:	f004 ffe2 	bl	8005ba4 <vPortFree>

	return result;
 8000be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3718      	adds	r7, #24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop

08000bec <handlePing>:


/*********************************************************************************************
 * Handle Ping
 *********************************************************************************************/
uint8_t handlePing( Header* header, char* packet ) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]

	// Since Ping doesn't contain a payload, no information needs to be extracted

	// Restructure header to send back ack
	header->dest = header->addr;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	785a      	ldrb	r2, [r3, #1]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	701a      	strb	r2, [r3, #0]
	header->addr = MY_ADDR;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2202      	movs	r2, #2
 8000c02:	705a      	strb	r2, [r3, #1]
	header->mode = allModes;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2200      	movs	r2, #0
 8000c08:	709a      	strb	r2, [r3, #2]
	header->type = ack;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	70da      	strb	r2, [r3, #3]

	// Check if this is the first communication with this SAV
	if( wifi_channel[header->dest] == 0xFF ) {
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	4a0f      	ldr	r2, [pc, #60]	; (8000c54 <handlePing+0x68>)
 8000c16:	5cd3      	ldrb	r3, [r2, r3]
 8000c18:	2bff      	cmp	r3, #255	; 0xff
 8000c1a:	d110      	bne.n	8000c3e <handlePing+0x52>
		// Associate this SAV with next wifi channel
		wifi_channel[header->dest] = wifi_next_channel;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	4a0d      	ldr	r2, [pc, #52]	; (8000c58 <handlePing+0x6c>)
 8000c22:	7811      	ldrb	r1, [r2, #0]
 8000c24:	4a0b      	ldr	r2, [pc, #44]	; (8000c54 <handlePing+0x68>)
 8000c26:	54d1      	strb	r1, [r2, r3]

		// Increment next channel
		wifi_next_channel++;
 8000c28:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <handlePing+0x6c>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <handlePing+0x6c>)
 8000c32:	701a      	strb	r2, [r3, #0]

		// Indicate SAV is now active
		wifi_channel_active[header->dest] = TRUE;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	4a08      	ldr	r2, [pc, #32]	; (8000c5c <handlePing+0x70>)
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	54d1      	strb	r1, [r2, r3]
	}

	// Send Ack
	uint8_t result = sendAck( header, SUCCESS );
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	2101      	movs	r1, #1
 8000c42:	f7ff fd91 	bl	8000768 <sendAck>
 8000c46:	4603      	mov	r3, r0
 8000c48:	73fb      	strb	r3, [r7, #15]

	return result;
 8000c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3710      	adds	r7, #16
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	2001c1f4 	.word	0x2001c1f4
 8000c58:	2001c1ea 	.word	0x2001c1ea
 8000c5c:	2001c1e8 	.word	0x2001c1e8

08000c60 <handleSetMode>:


/*********************************************************************************************
 * Handle Set Mode
 *********************************************************************************************/
uint8_t handleSetMode( Header* header, char* packet ) {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	6039      	str	r1, [r7, #0]

	// Since SetMode doesn't contain a payload, no information needs to be extracted

	// Restructure header to send back changeMode packet
	header->dest = header->addr;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	785a      	ldrb	r2, [r3, #1]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	701a      	strb	r2, [r3, #0]
	header->addr = MY_ADDR;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2202      	movs	r2, #2
 8000c76:	705a      	strb	r2, [r3, #1]
	header->mode = allModes;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	709a      	strb	r2, [r3, #2]
	header->type = changeMode;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2204      	movs	r2, #4
 8000c82:	70da      	strb	r2, [r3, #3]

	// Send ChangeMode
	uint8_t result = sendChangeMode( header, mode_savs[header->dest] );
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	4a06      	ldr	r2, [pc, #24]	; (8000ca4 <handleSetMode+0x44>)
 8000c8a:	5cd3      	ldrb	r3, [r2, r3]
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	4619      	mov	r1, r3
 8000c90:	f7ff fe00 	bl	8000894 <sendChangeMode>
 8000c94:	4603      	mov	r3, r0
 8000c96:	73fb      	strb	r3, [r7, #15]

	return result;
 8000c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	2001c1e0 	.word	0x2001c1e0

08000ca8 <pack>:
 * %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */

/*********************************************************************************************
 * Package string into container
 *********************************************************************************************/
void pack( char* container, char* field, uint8_t start ) {
 8000ca8:	b480      	push	{r7}
 8000caa:	b087      	sub	sp, #28
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	71fb      	strb	r3, [r7, #7]

	// Iterate through field, copying each char into the container
	// Note: By adding 48, the integer value is represented as its ascii counterpart
	int i;
	for( i=0; i<=sizeof(field); i++) {
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
 8000cba:	e00e      	b.n	8000cda <pack+0x32>
		container[start + i] = field[i] + 48;
 8000cbc:	79fa      	ldrb	r2, [r7, #7]
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	68fa      	ldr	r2, [r7, #12]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	697a      	ldr	r2, [r7, #20]
 8000cc8:	68b9      	ldr	r1, [r7, #8]
 8000cca:	440a      	add	r2, r1
 8000ccc:	7812      	ldrb	r2, [r2, #0]
 8000cce:	3230      	adds	r2, #48	; 0x30
 8000cd0:	b2d2      	uxtb	r2, r2
 8000cd2:	701a      	strb	r2, [r3, #0]
void pack( char* container, char* field, uint8_t start ) {

	// Iterate through field, copying each char into the container
	// Note: By adding 48, the integer value is represented as its ascii counterpart
	int i;
	for( i=0; i<=sizeof(field); i++) {
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	617b      	str	r3, [r7, #20]
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	2b04      	cmp	r3, #4
 8000cde:	d9ed      	bls.n	8000cbc <pack+0x14>
		container[start + i] = field[i] + 48;
	}
}
 8000ce0:	371c      	adds	r7, #28
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop

08000cec <unpack>:


/*********************************************************************************************
 * Unpack strings from the container
 *********************************************************************************************/
void unpack( char* container, char* field, uint8_t start ) {
 8000cec:	b480      	push	{r7}
 8000cee:	b087      	sub	sp, #28
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	71fb      	strb	r3, [r7, #7]

	// Note: By subtracting 48, the ascii is converted back to the correct uint
	// Note: Each packet is of the form: +IPD,(length):(packet)

	// Begin by creating an offset to the actual packet
	int offset = 6;
 8000cfa:	2306      	movs	r3, #6
 8000cfc:	617b      	str	r3, [r7, #20]
	while( container[offset] != ':' ) {
 8000cfe:	e002      	b.n	8000d06 <unpack+0x1a>
		offset++;
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	3301      	adds	r3, #1
 8000d04:	617b      	str	r3, [r7, #20]
	// Note: By subtracting 48, the ascii is converted back to the correct uint
	// Note: Each packet is of the form: +IPD,(length):(packet)

	// Begin by creating an offset to the actual packet
	int offset = 6;
	while( container[offset] != ':' ) {
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	68fa      	ldr	r2, [r7, #12]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2b3a      	cmp	r3, #58	; 0x3a
 8000d10:	d1f6      	bne.n	8000d00 <unpack+0x14>
		offset++;
	}
	offset++;
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	3301      	adds	r3, #1
 8000d16:	617b      	str	r3, [r7, #20]

	// Iterate through container, copying each char into the field
	int i;
	for( i=0; i<=sizeof(field); i++) {
 8000d18:	2300      	movs	r3, #0
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	e010      	b.n	8000d40 <unpack+0x54>
		field[i] = container[start + offset + i] - 48;
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	68ba      	ldr	r2, [r7, #8]
 8000d22:	4413      	add	r3, r2
 8000d24:	79f9      	ldrb	r1, [r7, #7]
 8000d26:	697a      	ldr	r2, [r7, #20]
 8000d28:	4411      	add	r1, r2
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	440a      	add	r2, r1
 8000d2e:	68f9      	ldr	r1, [r7, #12]
 8000d30:	440a      	add	r2, r1
 8000d32:	7812      	ldrb	r2, [r2, #0]
 8000d34:	3a30      	subs	r2, #48	; 0x30
 8000d36:	b2d2      	uxtb	r2, r2
 8000d38:	701a      	strb	r2, [r3, #0]
	}
	offset++;

	// Iterate through container, copying each char into the field
	int i;
	for( i=0; i<=sizeof(field); i++) {
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	613b      	str	r3, [r7, #16]
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	2b04      	cmp	r3, #4
 8000d44:	d9eb      	bls.n	8000d1e <unpack+0x32>
		field[i] = container[start + offset + i] - 48;
	}
}
 8000d46:	371c      	adds	r7, #28
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <USART3_IRQHandler>:


/*********************************************************************************************
 * USART IRQ Handler for WiFi module
 *********************************************************************************************/
void USART3_IRQHandler( void ) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0

	// Make sure USART recieve interrupt flag was set
	if( USART_GetITStatus( WIFI_USART, USART_IT_RXNE ) ) {
 8000d56:	481d      	ldr	r0, [pc, #116]	; (8000dcc <USART3_IRQHandler+0x7c>)
 8000d58:	f240 5125 	movw	r1, #1317	; 0x525
 8000d5c:	f000 fef4 	bl	8001b48 <USART_GetITStatus>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d02f      	beq.n	8000dc6 <USART3_IRQHandler+0x76>

		// Counter to track packet length
		static uint8_t counter = 0;

		// Character retrieved from data register
		char t = WIFI_USART->DR;
 8000d66:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <USART3_IRQHandler+0x7c>)
 8000d68:	889b      	ldrh	r3, [r3, #4]
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	71fb      	strb	r3, [r7, #7]

		// Check if string has ended or it exceeded the maximum packet length
		if( (t != '\n') && (counter < MAX_LENGTH)  && (t != '~') ) {
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	2b0a      	cmp	r3, #10
 8000d72:	d012      	beq.n	8000d9a <USART3_IRQHandler+0x4a>
 8000d74:	4b16      	ldr	r3, [pc, #88]	; (8000dd0 <USART3_IRQHandler+0x80>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b0f      	cmp	r3, #15
 8000d7a:	d80e      	bhi.n	8000d9a <USART3_IRQHandler+0x4a>
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	2b7e      	cmp	r3, #126	; 0x7e
 8000d80:	d00b      	beq.n	8000d9a <USART3_IRQHandler+0x4a>
			received_string[counter] = t;
 8000d82:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <USART3_IRQHandler+0x80>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	4a13      	ldr	r2, [pc, #76]	; (8000dd4 <USART3_IRQHandler+0x84>)
 8000d88:	79f9      	ldrb	r1, [r7, #7]
 8000d8a:	54d1      	strb	r1, [r2, r3]
			counter++;
 8000d8c:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <USART3_IRQHandler+0x80>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	3301      	adds	r3, #1
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <USART3_IRQHandler+0x80>)
 8000d96:	701a      	strb	r2, [r3, #0]
 8000d98:	e015      	b.n	8000dc6 <USART3_IRQHandler+0x76>
		} else {

			// Reset counter
			counter = 0;
 8000d9a:	4b0d      	ldr	r3, [pc, #52]	; (8000dd0 <USART3_IRQHandler+0x80>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	701a      	strb	r2, [r3, #0]

			// If received_string is a packet, put it in the queue
			if( received_string[0] == '+' ) {
 8000da0:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <USART3_IRQHandler+0x84>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	2b2b      	cmp	r3, #43	; 0x2b
 8000da8:	d10a      	bne.n	8000dc0 <USART3_IRQHandler+0x70>
				xQueueSendToBackFromISR( xPacketQueue, &received_string, pdFALSE);
 8000daa:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <USART3_IRQHandler+0x88>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4618      	mov	r0, r3
 8000db0:	4908      	ldr	r1, [pc, #32]	; (8000dd4 <USART3_IRQHandler+0x84>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	2300      	movs	r3, #0
 8000db6:	f004 f8ef 	bl	8004f98 <xQueueGenericSendFromISR>
				process_packet = TRUE;
 8000dba:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <USART3_IRQHandler+0x8c>)
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	701a      	strb	r2, [r3, #0]
			}

			// Clear received_string
			received_string[0] = '\n';
 8000dc0:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <USART3_IRQHandler+0x84>)
 8000dc2:	220a      	movs	r2, #10
 8000dc4:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40004800 	.word	0x40004800
 8000dd0:	20000070 	.word	0x20000070
 8000dd4:	2001c22c 	.word	0x2001c22c
 8000dd8:	2001c1e4 	.word	0x2001c1e4
 8000ddc:	2001c1dc 	.word	0x2001c1dc

08000de0 <copyString>:


/*********************************************************************************************
 * Copy original string to a new copy
 *********************************************************************************************/
void copyString( volatile char* original, char* new, uint8_t length ) {
 8000de0:	b480      	push	{r7}
 8000de2:	b087      	sub	sp, #28
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	4613      	mov	r3, r2
 8000dec:	71fb      	strb	r3, [r7, #7]

	// Iterate through string and copy each char
	int i;
	for( i=0; i<=length; i++ ) {
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
 8000df2:	e00b      	b.n	8000e0c <copyString+0x2c>
		new[i] = original[i];
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	68ba      	ldr	r2, [r7, #8]
 8000df8:	4413      	add	r3, r2
 8000dfa:	697a      	ldr	r2, [r7, #20]
 8000dfc:	68f9      	ldr	r1, [r7, #12]
 8000dfe:	440a      	add	r2, r1
 8000e00:	7812      	ldrb	r2, [r2, #0]
 8000e02:	b2d2      	uxtb	r2, r2
 8000e04:	701a      	strb	r2, [r3, #0]
 *********************************************************************************************/
void copyString( volatile char* original, char* new, uint8_t length ) {

	// Iterate through string and copy each char
	int i;
	for( i=0; i<=length; i++ ) {
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	617b      	str	r3, [r7, #20]
 8000e0c:	79fa      	ldrb	r2, [r7, #7]
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	daef      	bge.n	8000df4 <copyString+0x14>
		new[i] = original[i];
	}
}
 8000e14:	371c      	adds	r7, #28
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop

08000e20 <main>:


#include "main.h"


int main(void) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af04      	add	r7, sp, #16

	// Create initial task to connect to Base Station
	xTaskCreate( prvSetupTask, "", 300 * sizeof(uint8_t), NULL, setupPriority, xSetupHandle );
 8000e26:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <main+0x2c>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	9200      	str	r2, [sp, #0]
 8000e2e:	9301      	str	r3, [sp, #4]
 8000e30:	2300      	movs	r3, #0
 8000e32:	9302      	str	r3, [sp, #8]
 8000e34:	2300      	movs	r3, #0
 8000e36:	9303      	str	r3, [sp, #12]
 8000e38:	4805      	ldr	r0, [pc, #20]	; (8000e50 <main+0x30>)
 8000e3a:	4906      	ldr	r1, [pc, #24]	; (8000e54 <main+0x34>)
 8000e3c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000e40:	2300      	movs	r3, #0
 8000e42:	f002 fa1b 	bl	800327c <xTaskGenericCreate>

	// Start the scheduler which begins to run the tasks
	vTaskStartScheduler();
 8000e46:	f002 fe0d 	bl	8003a64 <vTaskStartScheduler>
	/* If all is well, the scheduler will now be running, and the following line
	will never be reached.  If the following line does execute, then there was
	insufficient FreeRTOS heap memory available for the idle and/or timer tasks
	to be created.  See the memory management section on the FreeRTOS web site
	for more details. */
	for( ;; );
 8000e4a:	e7fe      	b.n	8000e4a <main+0x2a>
 8000e4c:	20000074 	.word	0x20000074
 8000e50:	08000e59 	.word	0x08000e59
 8000e54:	08005f48 	.word	0x08005f48

08000e58 <prvSetupTask>:


/*********************************************************************************************
 * Setup hardware/software
 *********************************************************************************************/
void prvSetupTask( void *pvParameters ) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b088      	sub	sp, #32
 8000e5c:	af04      	add	r7, sp, #16
 8000e5e:	6078      	str	r0, [r7, #4]

	// Setup hardware
	prvSetupHardware();
 8000e60:	f000 f854 	bl	8000f0c <prvSetupHardware>

	// Test LEDs and indicate program is starting
	prvBlinkLeds();
 8000e64:	f000 f85e 	bl	8000f24 <prvBlinkLeds>

	// Setup WiFi connection
	prvSetupWifi();
 8000e68:	f000 f8ba 	bl	8000fe0 <prvSetupWifi>

	// Set mode to allModes
	my_mode = allModes;
 8000e6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ee4 <prvSetupTask+0x8c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	701a      	strb	r2, [r3, #0]

	// Iterate through each SAV to initialize parameters
	uint8_t sav;
	for(sav=0; sav<NUMBER_SAV; sav++) {
 8000e72:	2300      	movs	r3, #0
 8000e74:	73fb      	strb	r3, [r7, #15]
 8000e76:	e00e      	b.n	8000e96 <prvSetupTask+0x3e>

		// Set the SAVs default mode
//		mode_savs[sav] = mode1;
		// TODO: change back to default
		mode_savs[sav] = mode2;
 8000e78:	7bfb      	ldrb	r3, [r7, #15]
 8000e7a:	4a1b      	ldr	r2, [pc, #108]	; (8000ee8 <prvSetupTask+0x90>)
 8000e7c:	2102      	movs	r1, #2
 8000e7e:	54d1      	strb	r1, [r2, r3]

		// Mark the WiFi channels as uninitialized
		wifi_channel[sav] = 0xFF;
 8000e80:	7bfb      	ldrb	r3, [r7, #15]
 8000e82:	4a1a      	ldr	r2, [pc, #104]	; (8000eec <prvSetupTask+0x94>)
 8000e84:	21ff      	movs	r1, #255	; 0xff
 8000e86:	54d1      	strb	r1, [r2, r3]

		// Initialize all SAVs as inactive
		wifi_channel_active[sav] = FALSE;
 8000e88:	7bfb      	ldrb	r3, [r7, #15]
 8000e8a:	4a19      	ldr	r2, [pc, #100]	; (8000ef0 <prvSetupTask+0x98>)
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	54d1      	strb	r1, [r2, r3]
	// Set mode to allModes
	my_mode = allModes;

	// Iterate through each SAV to initialize parameters
	uint8_t sav;
	for(sav=0; sav<NUMBER_SAV; sav++) {
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
 8000e92:	3301      	adds	r3, #1
 8000e94:	73fb      	strb	r3, [r7, #15]
 8000e96:	7bfb      	ldrb	r3, [r7, #15]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d9ed      	bls.n	8000e78 <prvSetupTask+0x20>
		// Initialize all SAVs as inactive
		wifi_channel_active[sav] = FALSE;
	}

	// Indicate that the next channel to be assigned is channel 0
	wifi_next_channel = 0;
 8000e9c:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <prvSetupTask+0x9c>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	701a      	strb	r2, [r3, #0]

	// Create queue for packets
	xPacketQueue = xQueueCreate( maxPacketQueueLength, MAX_LENGTH*sizeof(uint8_t) );
 8000ea2:	2005      	movs	r0, #5
 8000ea4:	2110      	movs	r1, #16
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f003 ff54 	bl	8004d54 <xQueueGenericCreate>
 8000eac:	4602      	mov	r2, r0
 8000eae:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <prvSetupTask+0xa0>)
 8000eb0:	601a      	str	r2, [r3, #0]

	// Create initial task to connect to Base Station
//	xTaskCreate( prvConnectTask, "", 300 * sizeof(uint8_t), NULL, connectPriority, xConnectHandle );
	xTaskCreate( prvTrafficLightTask, "", 500 * sizeof(uint8_t), NULL, trafficLightPriority, xTrafficLightHandle );
 8000eb2:	4b12      	ldr	r3, [pc, #72]	; (8000efc <prvSetupTask+0xa4>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	9200      	str	r2, [sp, #0]
 8000eba:	9301      	str	r3, [sp, #4]
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	9302      	str	r3, [sp, #8]
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	9303      	str	r3, [sp, #12]
 8000ec4:	480e      	ldr	r0, [pc, #56]	; (8000f00 <prvSetupTask+0xa8>)
 8000ec6:	490f      	ldr	r1, [pc, #60]	; (8000f04 <prvSetupTask+0xac>)
 8000ec8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000ecc:	2300      	movs	r3, #0
 8000ece:	f002 f9d5 	bl	800327c <xTaskGenericCreate>

	// Delete this task
	vTaskDelete( xSetupHandle );
 8000ed2:	4b0d      	ldr	r3, [pc, #52]	; (8000f08 <prvSetupTask+0xb0>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f002 fa72 	bl	80033c0 <vTaskDelete>
}
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	2001c229 	.word	0x2001c229
 8000ee8:	2001c1e0 	.word	0x2001c1e0
 8000eec:	2001c1f4 	.word	0x2001c1f4
 8000ef0:	2001c1e8 	.word	0x2001c1e8
 8000ef4:	2001c1ea 	.word	0x2001c1ea
 8000ef8:	2001c1e4 	.word	0x2001c1e4
 8000efc:	2000007c 	.word	0x2000007c
 8000f00:	080010cd 	.word	0x080010cd
 8000f04:	08005f48 	.word	0x08005f48
 8000f08:	20000074 	.word	0x20000074

08000f0c <prvSetupHardware>:


/*********************************************************************************************
 * Setup relevant hardware
 *********************************************************************************************/
static void prvSetupHardware( void ) {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	// Ensure that all 4 interrupt priority bits are used as the pre-emption priority
	NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );
 8000f10:	f44f 7040 	mov.w	r0, #768	; 0x300
 8000f14:	f001 fe22 	bl	8002b5c <NVIC_PriorityGroupConfig>

	// Setup LEDs
	ledInit();
 8000f18:	f000 f936 	bl	8001188 <ledInit>

	// Setup WiFi
	wifiInit();
 8000f1c:	f000 f97e 	bl	800121c <wifiInit>
}
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop

08000f24 <prvBlinkLeds>:


/*********************************************************************************************
 * Blink LEDs on board
 *********************************************************************************************/
static void prvBlinkLeds( void ) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
	// Turn on and off each LED in order

	// EW Lights
	LED_LIGHT_EW_PORT->ON = LED_LIGHT_EW_GREEN_PIN;
 8000f28:	4b2b      	ldr	r3, [pc, #172]	; (8000fd8 <prvBlinkLeds+0xb4>)
 8000f2a:	2240      	movs	r2, #64	; 0x40
 8000f2c:	831a      	strh	r2, [r3, #24]
	swDelay(100);
 8000f2e:	2064      	movs	r0, #100	; 0x64
 8000f30:	f7ff fb86 	bl	8000640 <swDelay>
	LED_LIGHT_EW_PORT->OFF = LED_LIGHT_EW_GREEN_PIN;
 8000f34:	4b28      	ldr	r3, [pc, #160]	; (8000fd8 <prvBlinkLeds+0xb4>)
 8000f36:	2240      	movs	r2, #64	; 0x40
 8000f38:	835a      	strh	r2, [r3, #26]

	LED_LIGHT_EW_PORT->ON = LED_LIGHT_EW_YELLOW_PIN;
 8000f3a:	4b27      	ldr	r3, [pc, #156]	; (8000fd8 <prvBlinkLeds+0xb4>)
 8000f3c:	2220      	movs	r2, #32
 8000f3e:	831a      	strh	r2, [r3, #24]
	swDelay(100);
 8000f40:	2064      	movs	r0, #100	; 0x64
 8000f42:	f7ff fb7d 	bl	8000640 <swDelay>
	LED_LIGHT_EW_PORT->OFF = LED_LIGHT_EW_YELLOW_PIN;
 8000f46:	4b24      	ldr	r3, [pc, #144]	; (8000fd8 <prvBlinkLeds+0xb4>)
 8000f48:	2220      	movs	r2, #32
 8000f4a:	835a      	strh	r2, [r3, #26]

	LED_LIGHT_EW_PORT->ON = LED_LIGHT_EW_RED_PIN;
 8000f4c:	4b22      	ldr	r3, [pc, #136]	; (8000fd8 <prvBlinkLeds+0xb4>)
 8000f4e:	2210      	movs	r2, #16
 8000f50:	831a      	strh	r2, [r3, #24]
	swDelay(100);
 8000f52:	2064      	movs	r0, #100	; 0x64
 8000f54:	f7ff fb74 	bl	8000640 <swDelay>
	LED_LIGHT_EW_PORT->OFF = LED_LIGHT_EW_RED_PIN;
 8000f58:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <prvBlinkLeds+0xb4>)
 8000f5a:	2210      	movs	r2, #16
 8000f5c:	835a      	strh	r2, [r3, #26]

	// Error
	LED_ERROR_PORT->ON = LED_ERROR_PIN;
 8000f5e:	4b1f      	ldr	r3, [pc, #124]	; (8000fdc <prvBlinkLeds+0xb8>)
 8000f60:	2280      	movs	r2, #128	; 0x80
 8000f62:	831a      	strh	r2, [r3, #24]
	swDelay(100);
 8000f64:	2064      	movs	r0, #100	; 0x64
 8000f66:	f7ff fb6b 	bl	8000640 <swDelay>
	LED_ERROR_PORT->OFF = LED_ERROR_PIN;
 8000f6a:	4b1c      	ldr	r3, [pc, #112]	; (8000fdc <prvBlinkLeds+0xb8>)
 8000f6c:	2280      	movs	r2, #128	; 0x80
 8000f6e:	835a      	strh	r2, [r3, #26]

	// Wifi
	LED_WIFI_PORT->ON = LED_WIFI_RX_PIN;
 8000f70:	4b1a      	ldr	r3, [pc, #104]	; (8000fdc <prvBlinkLeds+0xb8>)
 8000f72:	2220      	movs	r2, #32
 8000f74:	831a      	strh	r2, [r3, #24]
	swDelay(100);
 8000f76:	2064      	movs	r0, #100	; 0x64
 8000f78:	f7ff fb62 	bl	8000640 <swDelay>
	LED_WIFI_PORT->OFF = LED_WIFI_RX_PIN;
 8000f7c:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <prvBlinkLeds+0xb8>)
 8000f7e:	2220      	movs	r2, #32
 8000f80:	835a      	strh	r2, [r3, #26]

	LED_WIFI_PORT->ON = LED_WIFI_TX_PIN;
 8000f82:	4b16      	ldr	r3, [pc, #88]	; (8000fdc <prvBlinkLeds+0xb8>)
 8000f84:	2240      	movs	r2, #64	; 0x40
 8000f86:	831a      	strh	r2, [r3, #24]
	swDelay(100);
 8000f88:	2064      	movs	r0, #100	; 0x64
 8000f8a:	f7ff fb59 	bl	8000640 <swDelay>
	LED_WIFI_PORT->OFF = LED_WIFI_TX_PIN;
 8000f8e:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <prvBlinkLeds+0xb8>)
 8000f90:	2240      	movs	r2, #64	; 0x40
 8000f92:	835a      	strh	r2, [r3, #26]

	// NS Lights
	LED_LIGHT_NS_PORT->ON = LED_LIGHT_NS_GREEN_PIN;
 8000f94:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <prvBlinkLeds+0xb4>)
 8000f96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f9a:	831a      	strh	r2, [r3, #24]
	swDelay(100);
 8000f9c:	2064      	movs	r0, #100	; 0x64
 8000f9e:	f7ff fb4f 	bl	8000640 <swDelay>
	LED_LIGHT_NS_PORT->OFF = LED_LIGHT_NS_GREEN_PIN;
 8000fa2:	4b0d      	ldr	r3, [pc, #52]	; (8000fd8 <prvBlinkLeds+0xb4>)
 8000fa4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fa8:	835a      	strh	r2, [r3, #26]

	LED_LIGHT_NS_PORT->ON = LED_LIGHT_NS_YELLOW_PIN;
 8000faa:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <prvBlinkLeds+0xb4>)
 8000fac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fb0:	831a      	strh	r2, [r3, #24]
	swDelay(100);
 8000fb2:	2064      	movs	r0, #100	; 0x64
 8000fb4:	f7ff fb44 	bl	8000640 <swDelay>
	LED_LIGHT_NS_PORT->OFF = LED_LIGHT_NS_YELLOW_PIN;
 8000fb8:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <prvBlinkLeds+0xb4>)
 8000fba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fbe:	835a      	strh	r2, [r3, #26]

	LED_LIGHT_NS_PORT->ON = LED_LIGHT_NS_RED_PIN;
 8000fc0:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <prvBlinkLeds+0xb4>)
 8000fc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fc6:	831a      	strh	r2, [r3, #24]
	swDelay(100);
 8000fc8:	2064      	movs	r0, #100	; 0x64
 8000fca:	f7ff fb39 	bl	8000640 <swDelay>
	LED_LIGHT_NS_PORT->OFF = LED_LIGHT_NS_RED_PIN;
 8000fce:	4b02      	ldr	r3, [pc, #8]	; (8000fd8 <prvBlinkLeds+0xb4>)
 8000fd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fd4:	835a      	strh	r2, [r3, #26]
}
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40020800 	.word	0x40020800
 8000fdc:	40020400 	.word	0x40020400

08000fe0 <prvSetupWifi>:


/*********************************************************************************************
 * Setup Wifi connection
 *********************************************************************************************/
static void prvSetupWifi( void ) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
	// Connect to Wifi
//	sendPacket( "AT+CWJAP=\"OhmWreckers\",\"123\"", 28);
//	swDelay(1500);

	// Delay to give wifi chance to initialize
	swDelay(5000);
 8000fe4:	f241 3088 	movw	r0, #5000	; 0x1388
 8000fe8:	f7ff fb2a 	bl	8000640 <swDelay>

	// Send AT
	sendPacket( "AT", 2, FALSE);
 8000fec:	480f      	ldr	r0, [pc, #60]	; (800102c <prvSetupWifi+0x4c>)
 8000fee:	2102      	movs	r1, #2
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f7ff fb67 	bl	80006c4 <sendPacket>
	swDelay(500);
 8000ff6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ffa:	f7ff fb21 	bl	8000640 <swDelay>

	// Set mux to be 1
	sendPacket( "AT+CIPMUX=1", 11, FALSE);
 8000ffe:	480c      	ldr	r0, [pc, #48]	; (8001030 <prvSetupWifi+0x50>)
 8001000:	210b      	movs	r1, #11
 8001002:	2200      	movs	r2, #0
 8001004:	f7ff fb5e 	bl	80006c4 <sendPacket>
	swDelay(1000);
 8001008:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800100c:	f7ff fb18 	bl	8000640 <swDelay>

	// Start server
	sendPacket( "AT+CIPSERVER=1,1001", 19, FALSE);
 8001010:	4808      	ldr	r0, [pc, #32]	; (8001034 <prvSetupWifi+0x54>)
 8001012:	2113      	movs	r1, #19
 8001014:	2200      	movs	r2, #0
 8001016:	f7ff fb55 	bl	80006c4 <sendPacket>
	swDelay(2000);
 800101a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800101e:	f7ff fb0f 	bl	8000640 <swDelay>

	// Turn on WiFi LEDs to indicate the network is setup
	LED_WIFI_PORT->ON = LED_WIFI_PINS;
 8001022:	4b05      	ldr	r3, [pc, #20]	; (8001038 <prvSetupWifi+0x58>)
 8001024:	2260      	movs	r2, #96	; 0x60
 8001026:	831a      	strh	r2, [r3, #24]
}
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	08005f4c 	.word	0x08005f4c
 8001030:	08005f50 	.word	0x08005f50
 8001034:	08005f5c 	.word	0x08005f5c
 8001038:	40020400 	.word	0x40020400

0800103c <prvConnectTask>:
 * Initial bootup task to connect to Base Station
 * 		* Connect to Base Station 		- Send Ping packet
 * 		* Wait for response 			- Receive Ack packet
 * 		* If successful					- Turn on WiFi LEDs
 *********************************************************************************************/
void prvConnectTask( void *pvParameters ) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af04      	add	r7, sp, #16
 8001042:	6078      	str	r0, [r7, #4]

	// Let task run infinitely
	for(;;) {

		// Wait for a Ping from an SAV
		if( process_packet ) {
 8001044:	4b1b      	ldr	r3, [pc, #108]	; (80010b4 <prvConnectTask+0x78>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d032      	beq.n	80010b2 <prvConnectTask+0x76>

			// Create local string to represent the packet
			char* packet = pvPortMalloc( MAX_LENGTH*sizeof(uint8_t) );
 800104c:	2010      	movs	r0, #16
 800104e:	f004 fd11 	bl	8005a74 <pvPortMalloc>
 8001052:	60f8      	str	r0, [r7, #12]

			// Pop packet from queue
			xQueueReceive( xPacketQueue, packet, 0 );
 8001054:	4b18      	ldr	r3, [pc, #96]	; (80010b8 <prvConnectTask+0x7c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4618      	mov	r0, r3
 800105a:	68f9      	ldr	r1, [r7, #12]
 800105c:	2200      	movs	r2, #0
 800105e:	2300      	movs	r3, #0
 8001060:	f004 f838 	bl	80050d4 <xQueueGenericReceive>

			// Process packet
			PacketResult packet_result = handlePacket( packet );
 8001064:	68f8      	ldr	r0, [r7, #12]
 8001066:	f7ff fd2f 	bl	8000ac8 <handlePacket>
 800106a:	4603      	mov	r3, r0
 800106c:	813b      	strh	r3, [r7, #8]

			// Free variables
			vPortFree( packet );
 800106e:	68f8      	ldr	r0, [r7, #12]
 8001070:	f004 fd98 	bl	8005ba4 <vPortFree>

			if( (packet_result.result == SUCCESS) && (packet_result.type == ping) ) {
 8001074:	7a7b      	ldrb	r3, [r7, #9]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d11b      	bne.n	80010b2 <prvConnectTask+0x76>
 800107a:	7a3b      	ldrb	r3, [r7, #8]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d118      	bne.n	80010b2 <prvConnectTask+0x76>

				// Reset process_packet
				process_packet = FALSE;
 8001080:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <prvConnectTask+0x78>)
 8001082:	2200      	movs	r2, #0
 8001084:	701a      	strb	r2, [r3, #0]

				// Move on to next task
				xTaskCreate( prvTrafficLightTask, "", 300 * sizeof(uint8_t), NULL, trafficLightPriority, xTrafficLightHandle );
 8001086:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <prvConnectTask+0x80>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2201      	movs	r2, #1
 800108c:	9200      	str	r2, [sp, #0]
 800108e:	9301      	str	r3, [sp, #4]
 8001090:	2300      	movs	r3, #0
 8001092:	9302      	str	r3, [sp, #8]
 8001094:	2300      	movs	r3, #0
 8001096:	9303      	str	r3, [sp, #12]
 8001098:	4809      	ldr	r0, [pc, #36]	; (80010c0 <prvConnectTask+0x84>)
 800109a:	490a      	ldr	r1, [pc, #40]	; (80010c4 <prvConnectTask+0x88>)
 800109c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010a0:	2300      	movs	r3, #0
 80010a2:	f002 f8eb 	bl	800327c <xTaskGenericCreate>

				// Delete this task
				vTaskDelete( xConnectHandle );
 80010a6:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <prvConnectTask+0x8c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f002 f988 	bl	80033c0 <vTaskDelete>
			}
		}
	}
 80010b0:	e7c8      	b.n	8001044 <prvConnectTask+0x8>
 80010b2:	e7c7      	b.n	8001044 <prvConnectTask+0x8>
 80010b4:	2001c1dc 	.word	0x2001c1dc
 80010b8:	2001c1e4 	.word	0x2001c1e4
 80010bc:	2000007c 	.word	0x2000007c
 80010c0:	080010cd 	.word	0x080010cd
 80010c4:	08005f48 	.word	0x08005f48
 80010c8:	20000078 	.word	0x20000078

080010cc <prvTrafficLightTask>:


/*********************************************************************************************
 * Task to setup traffic light timer to send packets
 *********************************************************************************************/
void prvTrafficLightTask( void *pvParameters ) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]

	// Setup timer to start the state machine
	// Send packet every 5 seconds
	sendTrafficLight = swTimerInit( 5000, REPEAT, prvSendTrafficLightCallback );
 80010d4:	f241 3088 	movw	r0, #5000	; 0x1388
 80010d8:	2101      	movs	r1, #1
 80010da:	4a19      	ldr	r2, [pc, #100]	; (8001140 <prvTrafficLightTask+0x74>)
 80010dc:	f7ff fa38 	bl	8000550 <swTimerInit>
 80010e0:	4602      	mov	r2, r0
 80010e2:	4b18      	ldr	r3, [pc, #96]	; (8001144 <prvTrafficLightTask+0x78>)
 80010e4:	601a      	str	r2, [r3, #0]

	// Initialize the first state
	light_system_state = state_1;
 80010e6:	4b18      	ldr	r3, [pc, #96]	; (8001148 <prvTrafficLightTask+0x7c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	701a      	strb	r2, [r3, #0]

	// Initialize the transition times
	timer_NS = 25;
 80010ec:	4b17      	ldr	r3, [pc, #92]	; (800114c <prvTrafficLightTask+0x80>)
 80010ee:	2219      	movs	r2, #25
 80010f0:	701a      	strb	r2, [r3, #0]
	timer_EW = 30;
 80010f2:	4b17      	ldr	r3, [pc, #92]	; (8001150 <prvTrafficLightTask+0x84>)
 80010f4:	221e      	movs	r2, #30
 80010f6:	701a      	strb	r2, [r3, #0]

	swTimerStart(sendTrafficLight, 0);
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <prvTrafficLightTask+0x78>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	2100      	movs	r1, #0
 8001100:	f7ff fa40 	bl	8000584 <swTimerStart>

	// Let task run infinitely
	for(;;) {

		// Process any incoming packets
		if( process_packet ) {
 8001104:	4b13      	ldr	r3, [pc, #76]	; (8001154 <prvTrafficLightTask+0x88>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d017      	beq.n	800113c <prvTrafficLightTask+0x70>
			// Create local string to represent the packet
			char* packet = pvPortMalloc( MAX_LENGTH*sizeof(uint8_t) );
 800110c:	2010      	movs	r0, #16
 800110e:	f004 fcb1 	bl	8005a74 <pvPortMalloc>
 8001112:	60f8      	str	r0, [r7, #12]

			// Pop packet from queue
			xQueueReceive( xPacketQueue, packet, 0 );
 8001114:	4b10      	ldr	r3, [pc, #64]	; (8001158 <prvTrafficLightTask+0x8c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4618      	mov	r0, r3
 800111a:	68f9      	ldr	r1, [r7, #12]
 800111c:	2200      	movs	r2, #0
 800111e:	2300      	movs	r3, #0
 8001120:	f003 ffd8 	bl	80050d4 <xQueueGenericReceive>

			// Process packet
			PacketResult packet_result = handlePacket( packet );
 8001124:	68f8      	ldr	r0, [r7, #12]
 8001126:	f7ff fccf 	bl	8000ac8 <handlePacket>
 800112a:	4603      	mov	r3, r0
 800112c:	813b      	strh	r3, [r7, #8]

			// Free variables
			vPortFree( packet );
 800112e:	68f8      	ldr	r0, [r7, #12]
 8001130:	f004 fd38 	bl	8005ba4 <vPortFree>

			// Reset process_packet
			process_packet = FALSE;
 8001134:	4b07      	ldr	r3, [pc, #28]	; (8001154 <prvTrafficLightTask+0x88>)
 8001136:	2200      	movs	r2, #0
 8001138:	701a      	strb	r2, [r3, #0]
		}
	}
 800113a:	e7e3      	b.n	8001104 <prvTrafficLightTask+0x38>
 800113c:	e7e2      	b.n	8001104 <prvTrafficLightTask+0x38>
 800113e:	bf00      	nop
 8001140:	080001c9 	.word	0x080001c9
 8001144:	2001c1ec 	.word	0x2001c1ec
 8001148:	2001c1cc 	.word	0x2001c1cc
 800114c:	2001c1f0 	.word	0x2001c1f0
 8001150:	2001c228 	.word	0x2001c228
 8001154:	2001c1dc 	.word	0x2001c1dc
 8001158:	2001c1e4 	.word	0x2001c1e4

0800115c <vApplicationMallocFailedHook>:

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 * Functions to handle errors if they occur
 *%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */
void vApplicationMallocFailedHook( void )
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
	free memory available in the FreeRTOS heap.  pvPortMalloc() is called
	internally by FreeRTOS API functions that create tasks, queues, software
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */

	for( ;; );
 8001160:	e7fe      	b.n	8001160 <vApplicationMallocFailedHook+0x4>
 8001162:	bf00      	nop

08001164 <vApplicationStackOverflowHook>:

/*********************************************************************************************
 * Functions to handle errors if they occur
 *********************************************************************************************/
void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	for( ;; );
 800116e:	e7fe      	b.n	800116e <vApplicationStackOverflowHook+0xa>

08001170 <vApplicationIdleHook>:

/*********************************************************************************************
 * Functions to handle errors if they occur
 *********************************************************************************************/
void vApplicationIdleHook( void )
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
volatile size_t xFreeStackSpace;

	/* This function is called on each cycle of the idle task.  In this case it
	does nothing useful, other than report the amout of FreeRTOS heap that
	remains unallocated. */
	xFreeStackSpace = xPortGetFreeHeapSize();
 8001176:	f004 fd4d 	bl	8005c14 <xPortGetFreeHeapSize>
 800117a:	4603      	mov	r3, r0
 800117c:	607b      	str	r3, [r7, #4]

	if( xFreeStackSpace > 100 )
 800117e:	687b      	ldr	r3, [r7, #4]
		/* By now, the kernel has allocated everything it is going to, so
		if there is a lot of heap remaining unallocated then
		the value of configTOTAL_HEAP_SIZE in FreeRTOSConfig.h can be
		reduced accordingly. */
	}
}
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop

08001188 <ledInit>:
void ADC_Configuration(void);

/*********************************************************************************************
 * Initialize LEDs
 *********************************************************************************************/
void ledInit() {
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef  GPIO_InitStructure;

	// Enable clock
	RCC_AHB1PeriphClockCmd( LED_LIGHT_NS_CLK | LED_LIGHT_EW_CLK | LED_WIFI_CLK | LED_BLUETOOTH_CLK | LED_ERROR_CLK, ENABLE);
 800118e:	2006      	movs	r0, #6
 8001190:	2101      	movs	r1, #1
 8001192:	f001 f845 	bl	8002220 <RCC_AHB1PeriphClockCmd>

	// Configure GPIO
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001196:	2301      	movs	r3, #1
 8001198:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800119a:	2302      	movs	r3, #2
 800119c:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800119e:	2300      	movs	r3, #0
 80011a0:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80011a2:	2301      	movs	r3, #1
 80011a4:	71fb      	strb	r3, [r7, #7]

	GPIO_InitStructure.GPIO_Pin = LED_LIGHT_NS_PINS;
 80011a6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80011aa:	603b      	str	r3, [r7, #0]
	GPIO_Init(LED_LIGHT_NS_PORT, &GPIO_InitStructure);
 80011ac:	463b      	mov	r3, r7
 80011ae:	4819      	ldr	r0, [pc, #100]	; (8001214 <ledInit+0x8c>)
 80011b0:	4619      	mov	r1, r3
 80011b2:	f001 fb1f 	bl	80027f4 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = LED_LIGHT_EW_PINS;
 80011b6:	2370      	movs	r3, #112	; 0x70
 80011b8:	603b      	str	r3, [r7, #0]
	GPIO_Init(LED_LIGHT_EW_PORT, &GPIO_InitStructure);
 80011ba:	463b      	mov	r3, r7
 80011bc:	4815      	ldr	r0, [pc, #84]	; (8001214 <ledInit+0x8c>)
 80011be:	4619      	mov	r1, r3
 80011c0:	f001 fb18 	bl	80027f4 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = LED_WIFI_PINS;
 80011c4:	2360      	movs	r3, #96	; 0x60
 80011c6:	603b      	str	r3, [r7, #0]
	GPIO_Init(LED_WIFI_PORT, &GPIO_InitStructure);
 80011c8:	463b      	mov	r3, r7
 80011ca:	4813      	ldr	r0, [pc, #76]	; (8001218 <ledInit+0x90>)
 80011cc:	4619      	mov	r1, r3
 80011ce:	f001 fb11 	bl	80027f4 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = LED_BLUETOOTH_PIN;
 80011d2:	2301      	movs	r3, #1
 80011d4:	603b      	str	r3, [r7, #0]
	GPIO_Init(LED_BLUETOOTH_PORT, &GPIO_InitStructure);
 80011d6:	463b      	mov	r3, r7
 80011d8:	480e      	ldr	r0, [pc, #56]	; (8001214 <ledInit+0x8c>)
 80011da:	4619      	mov	r1, r3
 80011dc:	f001 fb0a 	bl	80027f4 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = LED_ERROR_PIN;
 80011e0:	2380      	movs	r3, #128	; 0x80
 80011e2:	603b      	str	r3, [r7, #0]
	GPIO_Init(LED_ERROR_PORT, &GPIO_InitStructure);
 80011e4:	463b      	mov	r3, r7
 80011e6:	480c      	ldr	r0, [pc, #48]	; (8001218 <ledInit+0x90>)
 80011e8:	4619      	mov	r1, r3
 80011ea:	f001 fb03 	bl	80027f4 <GPIO_Init>

	// Make sure all LEDs are off
	LED_LIGHT_NS_PORT->OFF = LED_LIGHT_NS_PINS;
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <ledInit+0x8c>)
 80011f0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80011f4:	835a      	strh	r2, [r3, #26]
	LED_LIGHT_EW_PORT->OFF = LED_LIGHT_EW_PINS;
 80011f6:	4b07      	ldr	r3, [pc, #28]	; (8001214 <ledInit+0x8c>)
 80011f8:	2270      	movs	r2, #112	; 0x70
 80011fa:	835a      	strh	r2, [r3, #26]
	LED_WIFI_PORT->OFF = LED_WIFI_PINS;
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <ledInit+0x90>)
 80011fe:	2260      	movs	r2, #96	; 0x60
 8001200:	835a      	strh	r2, [r3, #26]
	LED_BLUETOOTH_PORT->OFF = LED_BLUETOOTH_PIN;
 8001202:	4b04      	ldr	r3, [pc, #16]	; (8001214 <ledInit+0x8c>)
 8001204:	2201      	movs	r2, #1
 8001206:	835a      	strh	r2, [r3, #26]
	LED_ERROR_PORT->OFF = LED_ERROR_PIN;
 8001208:	4b03      	ldr	r3, [pc, #12]	; (8001218 <ledInit+0x90>)
 800120a:	2280      	movs	r2, #128	; 0x80
 800120c:	835a      	strh	r2, [r3, #26]
}
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40020800 	.word	0x40020800
 8001218:	40020400 	.word	0x40020400

0800121c <wifiInit>:


/*********************************************************************************************
 * Initialize WiFi USART GPIO
 *********************************************************************************************/
void wifiInit() {
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef     GPIO_InitStruct;

	// Enable clock
	RCC_AHB1PeriphClockCmd(WIFI_CLK, ENABLE);
 8001222:	2002      	movs	r0, #2
 8001224:	2101      	movs	r1, #1
 8001226:	f000 fffb 	bl	8002220 <RCC_AHB1PeriphClockCmd>

	// Set Pins to alternate function
	GPIO_PinAFConfig(WIFI_PORT, WIFI_TX_PINSOURCE, WIFI_AF);
 800122a:	480f      	ldr	r0, [pc, #60]	; (8001268 <wifiInit+0x4c>)
 800122c:	210a      	movs	r1, #10
 800122e:	2207      	movs	r2, #7
 8001230:	f001 fc4e 	bl	8002ad0 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(WIFI_PORT, WIFI_RX_PINSOURCE, WIFI_AF);
 8001234:	480c      	ldr	r0, [pc, #48]	; (8001268 <wifiInit+0x4c>)
 8001236:	210b      	movs	r1, #11
 8001238:	2207      	movs	r2, #7
 800123a:	f001 fc49 	bl	8002ad0 <GPIO_PinAFConfig>

	// Initialize pins as alternating function
	GPIO_InitStruct.GPIO_Pin = WIFI_TX_PIN | WIFI_RX_PIN;
 800123e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001242:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8001244:	2302      	movs	r3, #2
 8001246:	713b      	strb	r3, [r7, #4]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8001248:	2300      	movs	r3, #0
 800124a:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 800124c:	2301      	movs	r3, #1
 800124e:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8001250:	2303      	movs	r3, #3
 8001252:	717b      	strb	r3, [r7, #5]
	GPIO_Init(WIFI_PORT, &GPIO_InitStruct);
 8001254:	463b      	mov	r3, r7
 8001256:	4804      	ldr	r0, [pc, #16]	; (8001268 <wifiInit+0x4c>)
 8001258:	4619      	mov	r1, r3
 800125a:	f001 facb 	bl	80027f4 <GPIO_Init>

	wifiConfig();
 800125e:	f000 f805 	bl	800126c <wifiConfig>
}
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40020400 	.word	0x40020400

0800126c <wifiConfig>:


/*********************************************************************************************
 * Initialize WiFi USART
 *********************************************************************************************/
void wifiConfig() {
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
	USART_InitTypeDef USART_InitStruct;
	NVIC_InitTypeDef NVIC_InitStruct;

	// Enable clock
	RCC_APB1PeriphClockCmd(WIFI_USART_CLK, ENABLE);
 8001272:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001276:	2101      	movs	r1, #1
 8001278:	f001 f82c 	bl	80022d4 <RCC_APB1PeriphClockCmd>

	// Initialize USART
	USART_InitStruct.USART_BaudRate = WIFI_USART_BAUD;
 800127c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001280:	60bb      	str	r3, [r7, #8]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8001282:	2300      	movs	r3, #0
 8001284:	82bb      	strh	r3, [r7, #20]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 8001286:	230c      	movs	r3, #12
 8001288:	827b      	strh	r3, [r7, #18]
	USART_InitStruct.USART_Parity = USART_Parity_No;
 800128a:	2300      	movs	r3, #0
 800128c:	823b      	strh	r3, [r7, #16]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;
 800128e:	2300      	movs	r3, #0
 8001290:	81fb      	strh	r3, [r7, #14]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;
 8001292:	2300      	movs	r3, #0
 8001294:	81bb      	strh	r3, [r7, #12]
	USART_Cmd(WIFI_USART, ENABLE);
 8001296:	480f      	ldr	r0, [pc, #60]	; (80012d4 <wifiConfig+0x68>)
 8001298:	2101      	movs	r1, #1
 800129a:	f000 f9bd 	bl	8001618 <USART_Cmd>
	USART_Init(WIFI_USART, &USART_InitStruct);
 800129e:	f107 0308 	add.w	r3, r7, #8
 80012a2:	480c      	ldr	r0, [pc, #48]	; (80012d4 <wifiConfig+0x68>)
 80012a4:	4619      	mov	r1, r3
 80012a6:	f000 f8a1 	bl	80013ec <USART_Init>

	// Enable RX interrupt
	USART_ITConfig(WIFI_USART, USART_IT_RXNE, ENABLE);
 80012aa:	480a      	ldr	r0, [pc, #40]	; (80012d4 <wifiConfig+0x68>)
 80012ac:	f240 5125 	movw	r1, #1317	; 0x525
 80012b0:	2201      	movs	r2, #1
 80012b2:	f000 fbd5 	bl	8001a60 <USART_ITConfig>

	// Initialize NVIC
	NVIC_InitStruct.NVIC_IRQChannel = WIFI_USART_IRQ;
 80012b6:	2327      	movs	r3, #39	; 0x27
 80012b8:	713b      	strb	r3, [r7, #4]
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 80012ba:	2301      	movs	r3, #1
 80012bc:	71fb      	strb	r3, [r7, #7]
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	717b      	strb	r3, [r7, #5]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	71bb      	strb	r3, [r7, #6]
	NVIC_Init(&NVIC_InitStruct);
 80012c6:	1d3b      	adds	r3, r7, #4
 80012c8:	4618      	mov	r0, r3
 80012ca:	f001 fc59 	bl	8002b80 <NVIC_Init>
}
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40004800 	.word	0x40004800

080012d8 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	4b3a      	ldr	r3, [pc, #232]	; (80013cc <USART_DeInit+0xf4>)
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d108      	bne.n	80012fa <USART_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 80012e8:	2010      	movs	r0, #16
 80012ea:	2101      	movs	r1, #1
 80012ec:	f001 f8a6 	bl	800243c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 80012f0:	2010      	movs	r0, #16
 80012f2:	2100      	movs	r1, #0
 80012f4:	f001 f8a2 	bl	800243c <RCC_APB2PeriphResetCmd>
 80012f8:	e065      	b.n	80013c6 <USART_DeInit+0xee>
  }
  else if (USARTx == USART2)
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	4b34      	ldr	r3, [pc, #208]	; (80013d0 <USART_DeInit+0xf8>)
 80012fe:	429a      	cmp	r2, r3
 8001300:	d10a      	bne.n	8001318 <USART_DeInit+0x40>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8001302:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001306:	2101      	movs	r1, #1
 8001308:	f001 f87a 	bl	8002400 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 800130c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001310:	2100      	movs	r1, #0
 8001312:	f001 f875 	bl	8002400 <RCC_APB1PeriphResetCmd>
 8001316:	e056      	b.n	80013c6 <USART_DeInit+0xee>
  }
  else if (USARTx == USART3)
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	4b2e      	ldr	r3, [pc, #184]	; (80013d4 <USART_DeInit+0xfc>)
 800131c:	429a      	cmp	r2, r3
 800131e:	d10a      	bne.n	8001336 <USART_DeInit+0x5e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8001320:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001324:	2101      	movs	r1, #1
 8001326:	f001 f86b 	bl	8002400 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 800132a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800132e:	2100      	movs	r1, #0
 8001330:	f001 f866 	bl	8002400 <RCC_APB1PeriphResetCmd>
 8001334:	e047      	b.n	80013c6 <USART_DeInit+0xee>
  }    
  else if (USARTx == UART4)
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	4b27      	ldr	r3, [pc, #156]	; (80013d8 <USART_DeInit+0x100>)
 800133a:	429a      	cmp	r2, r3
 800133c:	d10a      	bne.n	8001354 <USART_DeInit+0x7c>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 800133e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001342:	2101      	movs	r1, #1
 8001344:	f001 f85c 	bl	8002400 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8001348:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800134c:	2100      	movs	r1, #0
 800134e:	f001 f857 	bl	8002400 <RCC_APB1PeriphResetCmd>
 8001352:	e038      	b.n	80013c6 <USART_DeInit+0xee>
  }
  else if (USARTx == UART5)
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	4b21      	ldr	r3, [pc, #132]	; (80013dc <USART_DeInit+0x104>)
 8001358:	429a      	cmp	r2, r3
 800135a:	d10a      	bne.n	8001372 <USART_DeInit+0x9a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 800135c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001360:	2101      	movs	r1, #1
 8001362:	f001 f84d 	bl	8002400 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8001366:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800136a:	2100      	movs	r1, #0
 800136c:	f001 f848 	bl	8002400 <RCC_APB1PeriphResetCmd>
 8001370:	e029      	b.n	80013c6 <USART_DeInit+0xee>
  }  
  else if (USARTx == USART6)
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <USART_DeInit+0x108>)
 8001376:	429a      	cmp	r2, r3
 8001378:	d108      	bne.n	800138c <USART_DeInit+0xb4>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 800137a:	2020      	movs	r0, #32
 800137c:	2101      	movs	r1, #1
 800137e:	f001 f85d 	bl	800243c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8001382:	2020      	movs	r0, #32
 8001384:	2100      	movs	r1, #0
 8001386:	f001 f859 	bl	800243c <RCC_APB2PeriphResetCmd>
 800138a:	e01c      	b.n	80013c6 <USART_DeInit+0xee>
  }
  else if (USARTx == UART7)
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <USART_DeInit+0x10c>)
 8001390:	429a      	cmp	r2, r3
 8001392:	d10a      	bne.n	80013aa <USART_DeInit+0xd2>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
 8001394:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001398:	2101      	movs	r1, #1
 800139a:	f001 f831 	bl	8002400 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 800139e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80013a2:	2100      	movs	r1, #0
 80013a4:	f001 f82c 	bl	8002400 <RCC_APB1PeriphResetCmd>
 80013a8:	e00d      	b.n	80013c6 <USART_DeInit+0xee>
  }     
  else
  {
    if (USARTx == UART8)
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <USART_DeInit+0x110>)
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d109      	bne.n	80013c6 <USART_DeInit+0xee>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
 80013b2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80013b6:	2101      	movs	r1, #1
 80013b8:	f001 f822 	bl	8002400 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
 80013bc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80013c0:	2100      	movs	r1, #0
 80013c2:	f001 f81d 	bl	8002400 <RCC_APB1PeriphResetCmd>
    }
  }
}
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40011000 	.word	0x40011000
 80013d0:	40004400 	.word	0x40004400
 80013d4:	40004800 	.word	0x40004800
 80013d8:	40004c00 	.word	0x40004c00
 80013dc:	40005000 	.word	0x40005000
 80013e0:	40011400 	.word	0x40011400
 80013e4:	40007800 	.word	0x40007800
 80013e8:	40007c00 	.word	0x40007c00

080013ec <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08a      	sub	sp, #40	; 0x28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80013f6:	2300      	movs	r3, #0
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
 80013fa:	2300      	movs	r3, #0
 80013fc:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8001402:	2300      	movs	r3, #0
 8001404:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	8a1b      	ldrh	r3, [r3, #16]
 800140a:	b29b      	uxth	r3, r3
 800140c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001410:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001414:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	88db      	ldrh	r3, [r3, #6]
 800141a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800141c:	4313      	orrs	r3, r2
 800141e:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001422:	b29a      	uxth	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	899b      	ldrh	r3, [r3, #12]
 800142c:	b29b      	uxth	r3, r3
 800142e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8001430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001432:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001436:	f023 030c 	bic.w	r3, r3, #12
 800143a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	889a      	ldrh	r2, [r3, #4]
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	891b      	ldrh	r3, [r3, #8]
 8001444:	4313      	orrs	r3, r2
 8001446:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800144c:	4313      	orrs	r3, r2
 800144e:	b29b      	uxth	r3, r3
 8001450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001452:	4313      	orrs	r3, r2
 8001454:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	b29a      	uxth	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	8a9b      	ldrh	r3, [r3, #20]
 8001462:	b29b      	uxth	r3, r3
 8001464:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8001466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001468:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800146c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	899b      	ldrh	r3, [r3, #12]
 8001472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001474:	4313      	orrs	r3, r2
 8001476:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8001478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147a:	b29a      	uxth	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8001480:	f107 0308 	add.w	r3, r7, #8
 8001484:	4618      	mov	r0, r3
 8001486:	f000 fdb7 	bl	8001ff8 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	4b31      	ldr	r3, [pc, #196]	; (8001554 <USART_Init+0x168>)
 800148e:	429a      	cmp	r2, r3
 8001490:	d003      	beq.n	800149a <USART_Init+0xae>
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	4b30      	ldr	r3, [pc, #192]	; (8001558 <USART_Init+0x16c>)
 8001496:	429a      	cmp	r2, r3
 8001498:	d102      	bne.n	80014a0 <USART_Init+0xb4>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	623b      	str	r3, [r7, #32]
 800149e:	e001      	b.n	80014a4 <USART_Init+0xb8>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	899b      	ldrh	r3, [r3, #12]
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	b21b      	sxth	r3, r3
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	da0c      	bge.n	80014cc <USART_Init+0xe0>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80014b2:	6a3a      	ldr	r2, [r7, #32]
 80014b4:	4613      	mov	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4413      	add	r3, r2
 80014ba:	009a      	lsls	r2, r3, #2
 80014bc:	441a      	add	r2, r3
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c8:	61fb      	str	r3, [r7, #28]
 80014ca:	e00b      	b.n	80014e4 <USART_Init+0xf8>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80014cc:	6a3a      	ldr	r2, [r7, #32]
 80014ce:	4613      	mov	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4413      	add	r3, r2
 80014d4:	009a      	lsls	r2, r3, #2
 80014d6:	441a      	add	r2, r3
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e2:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 80014e4:	69fa      	ldr	r2, [r7, #28]
 80014e6:	4b1d      	ldr	r3, [pc, #116]	; (800155c <USART_Init+0x170>)
 80014e8:	fba3 1302 	umull	r1, r3, r3, r2
 80014ec:	095b      	lsrs	r3, r3, #5
 80014ee:	011b      	lsls	r3, r3, #4
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80014f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f4:	091b      	lsrs	r3, r3, #4
 80014f6:	2264      	movs	r2, #100	; 0x64
 80014f8:	fb02 f303 	mul.w	r3, r2, r3
 80014fc:	69fa      	ldr	r2, [r7, #28]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	899b      	ldrh	r3, [r3, #12]
 8001506:	b29b      	uxth	r3, r3
 8001508:	b29b      	uxth	r3, r3
 800150a:	b21b      	sxth	r3, r3
 800150c:	2b00      	cmp	r3, #0
 800150e:	da0d      	bge.n	800152c <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001518:	4b10      	ldr	r3, [pc, #64]	; (800155c <USART_Init+0x170>)
 800151a:	fba3 1302 	umull	r1, r3, r3, r2
 800151e:	095b      	lsrs	r3, r3, #5
 8001520:	f003 0307 	and.w	r3, r3, #7
 8001524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001526:	4313      	orrs	r3, r2
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
 800152a:	e00c      	b.n	8001546 <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	011b      	lsls	r3, r3, #4
 8001530:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001534:	4b09      	ldr	r3, [pc, #36]	; (800155c <USART_Init+0x170>)
 8001536:	fba3 1302 	umull	r1, r3, r3, r2
 800153a:	095b      	lsrs	r3, r3, #5
 800153c:	f003 030f 	and.w	r3, r3, #15
 8001540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001542:	4313      	orrs	r3, r2
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8001546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001548:	b29a      	uxth	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	811a      	strh	r2, [r3, #8]
}
 800154e:	3728      	adds	r7, #40	; 0x28
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40011000 	.word	0x40011000
 8001558:	40011400 	.word	0x40011400
 800155c:	51eb851f 	.word	0x51eb851f

08001560 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800156e:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	220c      	movs	r2, #12
 8001586:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	819a      	strh	r2, [r3, #12]
}
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <USART_ClockInit>:
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	8a1b      	ldrh	r3, [r3, #16]
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80015b4:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	881a      	ldrh	r2, [r3, #0]
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 80015be:	4313      	orrs	r3, r2
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	889b      	ldrh	r3, [r3, #4]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	b29a      	uxth	r2, r3
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	88db      	ldrh	r3, [r3, #6]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	b29a      	uxth	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	821a      	strh	r2, [r3, #16]
}
 80015e0:	3714      	adds	r7, #20
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop

080015ec <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	80da      	strh	r2, [r3, #6]
}
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop

08001618 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	460b      	mov	r3, r1
 8001622:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001624:	78fb      	ldrb	r3, [r7, #3]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d008      	beq.n	800163c <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	899b      	ldrh	r3, [r3, #12]
 800162e:	b29b      	uxth	r3, r3
 8001630:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001634:	b29a      	uxth	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	819a      	strh	r2, [r3, #12]
 800163a:	e007      	b.n	800164c <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	899b      	ldrh	r3, [r3, #12]
 8001640:	b29b      	uxth	r3, r3
 8001642:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001646:	b29a      	uxth	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	819a      	strh	r2, [r3, #12]
  }
}
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop

08001658 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock. 
  * @note   The function is used for IrDA mode with UART4 and UART5.   
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	8b1b      	ldrh	r3, [r3, #24]
 8001668:	b29b      	uxth	r3, r3
 800166a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800166e:	b29a      	uxth	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	8b1b      	ldrh	r3, [r3, #24]
 8001678:	b29a      	uxth	r2, r3
 800167a:	78fb      	ldrb	r3, [r7, #3]
 800167c:	b29b      	uxth	r3, r3
 800167e:	4313      	orrs	r3, r2
 8001680:	b29a      	uxth	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	831a      	strh	r2, [r3, #24]
}
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <USART_OverSampling8Cmd>:
  * @param  NewState: new state of the USART 8x oversampling mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	460b      	mov	r3, r1
 800169a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800169c:	78fb      	ldrb	r3, [r7, #3]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d00a      	beq.n	80016b8 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	899b      	ldrh	r3, [r3, #12]
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80016ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80016b0:	b29a      	uxth	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	819a      	strh	r2, [r3, #12]
 80016b6:	e007      	b.n	80016c8 <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	899b      	ldrh	r3, [r3, #12]
 80016bc:	b29b      	uxth	r3, r3
 80016be:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	819a      	strh	r2, [r3, #12]
  }
}  
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop

080016d4 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	460b      	mov	r3, r1
 80016de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80016e0:	78fb      	ldrb	r3, [r7, #3]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d008      	beq.n	80016f8 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	8a9b      	ldrh	r3, [r3, #20]
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	829a      	strh	r2, [r3, #20]
 80016f6:	e007      	b.n	8001708 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	8a9b      	ldrh	r3, [r3, #20]
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001702:	b29a      	uxth	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	829a      	strh	r2, [r3, #20]
  }
}
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop

08001714 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	460b      	mov	r3, r1
 800171e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8001720:	887b      	ldrh	r3, [r7, #2]
 8001722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001726:	b29a      	uxth	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	809a      	strh	r2, [r3, #4]
}
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop

08001738 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	889b      	ldrh	r3, [r3, #4]
 8001744:	b29b      	uxth	r3, r3
 8001746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800174a:	b29b      	uxth	r3, r3
}
 800174c:	4618      	mov	r0, r3
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <USART_SetAddress>:
  *         UART peripheral.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	460b      	mov	r3, r1
 8001762:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	8a1b      	ldrh	r3, [r3, #16]
 8001768:	b29b      	uxth	r3, r3
 800176a:	f023 030f 	bic.w	r3, r3, #15
 800176e:	b29a      	uxth	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	8a1b      	ldrh	r3, [r3, #16]
 8001778:	b29a      	uxth	r2, r3
 800177a:	78fb      	ldrb	r3, [r7, #3]
 800177c:	b29b      	uxth	r3, r3
 800177e:	4313      	orrs	r3, r2
 8001780:	b29a      	uxth	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	821a      	strh	r2, [r3, #16]
}
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	460b      	mov	r3, r1
 800179a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 800179c:	78fb      	ldrb	r3, [r7, #3]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d008      	beq.n	80017b4 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	899b      	ldrh	r3, [r3, #12]
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	f043 0302 	orr.w	r3, r3, #2
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	819a      	strh	r2, [r3, #12]
 80017b2:	e007      	b.n	80017c4 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	899b      	ldrh	r3, [r3, #12]
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	f023 0302 	bic.w	r3, r3, #2
 80017be:	b29a      	uxth	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	819a      	strh	r2, [r3, #12]
  }
}
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop

080017d0 <USART_WakeUpConfig>:
  *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	460b      	mov	r3, r1
 80017da:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	899b      	ldrh	r3, [r3, #12]
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	899b      	ldrh	r3, [r3, #12]
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	887b      	ldrh	r3, [r7, #2]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	819a      	strh	r2, [r3, #12]
}
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop

08001808 <USART_LINBreakDetectLengthConfig>:
  *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	460b      	mov	r3, r1
 8001812:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	8a1b      	ldrh	r3, [r3, #16]
 8001818:	b29b      	uxth	r3, r3
 800181a:	f023 0320 	bic.w	r3, r3, #32
 800181e:	b29a      	uxth	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	8a1b      	ldrh	r3, [r3, #16]
 8001828:	b29a      	uxth	r2, r3
 800182a:	887b      	ldrh	r3, [r7, #2]
 800182c:	4313      	orrs	r3, r2
 800182e:	b29a      	uxth	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	821a      	strh	r2, [r3, #16]
}
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop

08001840 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	460b      	mov	r3, r1
 800184a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800184c:	78fb      	ldrb	r3, [r7, #3]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d008      	beq.n	8001864 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	8a1b      	ldrh	r3, [r3, #16]
 8001856:	b29b      	uxth	r3, r3
 8001858:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800185c:	b29a      	uxth	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	821a      	strh	r2, [r3, #16]
 8001862:	e007      	b.n	8001874 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	8a1b      	ldrh	r3, [r3, #16]
 8001868:	b29b      	uxth	r3, r3
 800186a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800186e:	b29a      	uxth	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	821a      	strh	r2, [r3, #16]
  }
}
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop

08001880 <USART_SendBreak>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	899b      	ldrh	r3, [r3, #12]
 800188c:	b29b      	uxth	r3, r3
 800188e:	f043 0301 	orr.w	r3, r3, #1
 8001892:	b29a      	uxth	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	819a      	strh	r2, [r3, #12]
}
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop

080018a4 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	460b      	mov	r3, r1
 80018ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80018b0:	78fb      	ldrb	r3, [r7, #3]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d008      	beq.n	80018c8 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	8a9b      	ldrh	r3, [r3, #20]
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	f043 0308 	orr.w	r3, r3, #8
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	829a      	strh	r2, [r3, #20]
 80018c6:	e007      	b.n	80018d8 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	8a9b      	ldrh	r3, [r3, #20]
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	f023 0308 	bic.w	r3, r3, #8
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	829a      	strh	r2, [r3, #20]
  }
}
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop

080018e4 <USART_SetGuardTime>:
  *         UART peripheral.
  * @param  USART_GuardTime: specifies the guard time.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	460b      	mov	r3, r1
 80018ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	8b1b      	ldrh	r3, [r3, #24]
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	8b1b      	ldrh	r3, [r3, #24]
 8001902:	b29a      	uxth	r2, r3
 8001904:	78fb      	ldrb	r3, [r7, #3]
 8001906:	b29b      	uxth	r3, r3
 8001908:	021b      	lsls	r3, r3, #8
 800190a:	b29b      	uxth	r3, r3
 800190c:	4313      	orrs	r3, r2
 800190e:	b29a      	uxth	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	831a      	strh	r2, [r3, #24]
}
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop

08001920 <USART_SmartCardCmd>:
  * @param  NewState: new state of the Smart Card mode.
  *          This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	460b      	mov	r3, r1
 800192a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800192c:	78fb      	ldrb	r3, [r7, #3]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d008      	beq.n	8001944 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	8a9b      	ldrh	r3, [r3, #20]
 8001936:	b29b      	uxth	r3, r3
 8001938:	f043 0320 	orr.w	r3, r3, #32
 800193c:	b29a      	uxth	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	829a      	strh	r2, [r3, #20]
 8001942:	e007      	b.n	8001954 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	8a9b      	ldrh	r3, [r3, #20]
 8001948:	b29b      	uxth	r3, r3
 800194a:	f023 0320 	bic.w	r3, r3, #32
 800194e:	b29a      	uxth	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	829a      	strh	r2, [r3, #20]
  }
}
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop

08001960 <USART_SmartCardNACKCmd>:
  * @param  NewState: new state of the NACK transmission.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	460b      	mov	r3, r1
 800196a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800196c:	78fb      	ldrb	r3, [r7, #3]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d008      	beq.n	8001984 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	8a9b      	ldrh	r3, [r3, #20]
 8001976:	b29b      	uxth	r3, r3
 8001978:	f043 0310 	orr.w	r3, r3, #16
 800197c:	b29a      	uxth	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	829a      	strh	r2, [r3, #20]
 8001982:	e007      	b.n	8001994 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	8a9b      	ldrh	r3, [r3, #20]
 8001988:	b29b      	uxth	r3, r3
 800198a:	f023 0310 	bic.w	r3, r3, #16
 800198e:	b29a      	uxth	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	829a      	strh	r2, [r3, #20]
  }
}
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop

080019a0 <USART_IrDAConfig>:
  *            @arg USART_IrDAMode_LowPower
  *            @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	460b      	mov	r3, r1
 80019aa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	8a9b      	ldrh	r3, [r3, #20]
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	f023 0304 	bic.w	r3, r3, #4
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	8a9b      	ldrh	r3, [r3, #20]
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	887b      	ldrh	r3, [r7, #2]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	829a      	strh	r2, [r3, #20]
}
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop

080019d8 <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	460b      	mov	r3, r1
 80019e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 80019e4:	78fb      	ldrb	r3, [r7, #3]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d008      	beq.n	80019fc <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	8a9b      	ldrh	r3, [r3, #20]
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	f043 0302 	orr.w	r3, r3, #2
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	829a      	strh	r2, [r3, #20]
 80019fa:	e007      	b.n	8001a0c <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	8a9b      	ldrh	r3, [r3, #20]
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	f023 0302 	bic.w	r3, r3, #2
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	829a      	strh	r2, [r3, #20]
  }
}
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop

08001a18 <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.   
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	4613      	mov	r3, r2
 8001a22:	460a      	mov	r2, r1
 8001a24:	807a      	strh	r2, [r7, #2]
 8001a26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8001a28:	787b      	ldrb	r3, [r7, #1]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d008      	beq.n	8001a40 <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	8a9b      	ldrh	r3, [r3, #20]
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	887b      	ldrh	r3, [r7, #2]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	829a      	strh	r2, [r3, #20]
 8001a3e:	e009      	b.n	8001a54 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	8a9b      	ldrh	r3, [r3, #20]
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	887b      	ldrh	r3, [r7, #2]
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	829a      	strh	r2, [r3, #20]
  }
}
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop

08001a60 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b087      	sub	sp, #28
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	460a      	mov	r2, r1
 8001a6c:	807a      	strh	r2, [r7, #2]
 8001a6e:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8001a70:	2300      	movs	r3, #0
 8001a72:	613b      	str	r3, [r7, #16]
 8001a74:	2300      	movs	r3, #0
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001a84:	887b      	ldrh	r3, [r7, #2]
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	095b      	lsrs	r3, r3, #5
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8001a8e:	887b      	ldrh	r3, [r7, #2]
 8001a90:	f003 031f 	and.w	r3, r3, #31
 8001a94:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d103      	bne.n	8001aae <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	330c      	adds	r3, #12
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	e009      	b.n	8001ac2 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d103      	bne.n	8001abc <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	3310      	adds	r3, #16
 8001ab8:	617b      	str	r3, [r7, #20]
 8001aba:	e002      	b.n	8001ac2 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	3314      	adds	r3, #20
 8001ac0:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8001ac2:	787b      	ldrb	r3, [r7, #1]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d006      	beq.n	8001ad6 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	697a      	ldr	r2, [r7, #20]
 8001acc:	6811      	ldr	r1, [r2, #0]
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	e006      	b.n	8001ae4 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	697a      	ldr	r2, [r7, #20]
 8001ada:	6811      	ldr	r1, [r2, #0]
 8001adc:	68ba      	ldr	r2, [r7, #8]
 8001ade:	43d2      	mvns	r2, r2
 8001ae0:	400a      	ands	r2, r1
 8001ae2:	601a      	str	r2, [r3, #0]
  }
}
 8001ae4:	371c      	adds	r7, #28
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop

08001af0 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	460b      	mov	r3, r1
 8001afa:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001afc:	2300      	movs	r3, #0
 8001afe:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	881b      	ldrh	r3, [r3, #0]
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	887b      	ldrh	r3, [r7, #2]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d002      	beq.n	8001b16 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8001b10:	2301      	movs	r3, #1
 8001b12:	73fb      	strb	r3, [r7, #15]
 8001b14:	e001      	b.n	8001b1a <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8001b16:	2300      	movs	r3, #0
 8001b18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <USART_ClearFlag>:
  *          (USART_SendData()).
  *   
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 8001b34:	887b      	ldrh	r3, [r7, #2]
 8001b36:	43db      	mvns	r3, r3
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	801a      	strh	r2, [r3, #0]
}
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b087      	sub	sp, #28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	460b      	mov	r3, r1
 8001b52:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8001b54:	2300      	movs	r3, #0
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8001b60:	2300      	movs	r3, #0
 8001b62:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001b64:	887b      	ldrh	r3, [r7, #2]
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	095b      	lsrs	r3, r3, #5
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8001b6e:	887b      	ldrh	r3, [r7, #2]
 8001b70:	f003 031f 	and.w	r3, r3, #31
 8001b74:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d106      	bne.n	8001b94 <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	899b      	ldrh	r3, [r3, #12]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	697a      	ldr	r2, [r7, #20]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	617b      	str	r3, [r7, #20]
 8001b92:	e00f      	b.n	8001bb4 <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d106      	bne.n	8001ba8 <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	8a1b      	ldrh	r3, [r3, #16]
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	697a      	ldr	r2, [r7, #20]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	617b      	str	r3, [r7, #20]
 8001ba6:	e005      	b.n	8001bb4 <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	8a9b      	ldrh	r3, [r3, #20]
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	697a      	ldr	r2, [r7, #20]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8001bb4:	887b      	ldrh	r3, [r7, #2]
 8001bb6:	0a1b      	lsrs	r3, r3, #8
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d005      	beq.n	8001be4 <USART_GetITStatus+0x9c>
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d002      	beq.n	8001be4 <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
 8001bde:	2301      	movs	r3, #1
 8001be0:	74fb      	strb	r3, [r7, #19]
 8001be2:	e001      	b.n	8001be8 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
 8001be4:	2300      	movs	r3, #0
 8001be6:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8001be8:	7cfb      	ldrb	r3, [r7, #19]
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	371c      	adds	r7, #28
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop

08001bf8 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	460b      	mov	r3, r1
 8001c02:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8001c04:	2300      	movs	r3, #0
 8001c06:	81fb      	strh	r3, [r7, #14]
 8001c08:	2300      	movs	r3, #0
 8001c0a:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8001c0c:	887b      	ldrh	r3, [r7, #2]
 8001c0e:	0a1b      	lsrs	r3, r3, #8
 8001c10:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8001c12:	89fb      	ldrh	r3, [r7, #14]
 8001c14:	2201      	movs	r2, #1
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8001c1c:	89bb      	ldrh	r3, [r7, #12]
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	801a      	strh	r2, [r3, #0]
}
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001c34:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <RCC_DeInit+0x50>)
 8001c36:	4a12      	ldr	r2, [pc, #72]	; (8001c80 <RCC_DeInit+0x50>)
 8001c38:	6812      	ldr	r2, [r2, #0]
 8001c3a:	f042 0201 	orr.w	r2, r2, #1
 8001c3e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001c40:	4b0f      	ldr	r3, [pc, #60]	; (8001c80 <RCC_DeInit+0x50>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON and PLLI2S bits */
  RCC->CR &= (uint32_t)0xFAF6FFFF;
 8001c46:	4a0e      	ldr	r2, [pc, #56]	; (8001c80 <RCC_DeInit+0x50>)
 8001c48:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <RCC_DeInit+0x50>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f023 63a1 	bic.w	r3, r3, #84410368	; 0x5080000
 8001c50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c54:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001c56:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <RCC_DeInit+0x50>)
 8001c58:	4a0a      	ldr	r2, [pc, #40]	; (8001c84 <RCC_DeInit+0x54>)
 8001c5a:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8001c5c:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <RCC_DeInit+0x50>)
 8001c5e:	4a0a      	ldr	r2, [pc, #40]	; (8001c88 <RCC_DeInit+0x58>)
 8001c60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001c64:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <RCC_DeInit+0x50>)
 8001c66:	4a06      	ldr	r2, [pc, #24]	; (8001c80 <RCC_DeInit+0x50>)
 8001c68:	6812      	ldr	r2, [r2, #0]
 8001c6a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c6e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001c70:	4b03      	ldr	r3, [pc, #12]	; (8001c80 <RCC_DeInit+0x50>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	60da      	str	r2, [r3, #12]
#ifdef STM32F427X 
  /* Disable Timers clock prescalers selection */
  RCC->DCKCFGR = 0x00000000;
#endif /* STM32F427X */ 

}
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	40023800 	.word	0x40023800
 8001c84:	24003010 	.word	0x24003010
 8001c88:	20003000 	.word	0x20003000

08001c8c <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 8001c96:	4b05      	ldr	r3, [pc, #20]	; (8001cac <RCC_HSEConfig+0x20>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 8001c9c:	4b03      	ldr	r3, [pc, #12]	; (8001cac <RCC_HSEConfig+0x20>)
 8001c9e:	79fa      	ldrb	r2, [r7, #7]
 8001ca0:	701a      	strb	r2, [r3, #0]
}
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	40023802 	.word	0x40023802

08001cb0 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	71fb      	strb	r3, [r7, #7]
  FlagStatus hsestatus = RESET;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	71bb      	strb	r3, [r7, #6]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8001cc2:	2031      	movs	r0, #49	; 0x31
 8001cc4:	f000 fc92 	bl	80025ec <RCC_GetFlagStatus>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	71bb      	strb	r3, [r7, #6]
    startupcounter++;
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001cd8:	d002      	beq.n	8001ce0 <RCC_WaitForHSEStartUp+0x30>
 8001cda:	79bb      	ldrb	r3, [r7, #6]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d0f0      	beq.n	8001cc2 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8001ce0:	2031      	movs	r0, #49	; 0x31
 8001ce2:	f000 fc83 	bl	80025ec <RCC_GetFlagStatus>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d002      	beq.n	8001cf2 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 8001cec:	2301      	movs	r3, #1
 8001cee:	71fb      	strb	r3, [r7, #7]
 8001cf0:	e001      	b.n	8001cf6 <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 8001d0e:	4b0a      	ldr	r3, [pc, #40]	; (8001d38 <RCC_AdjustHSICalibrationValue+0x38>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001d1a:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
 8001d26:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <RCC_AdjustHSICalibrationValue+0x38>)
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	601a      	str	r2, [r3, #0]
}
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	40023800 	.word	0x40023800

08001d3c <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8001d46:	4b04      	ldr	r3, [pc, #16]	; (8001d58 <RCC_HSICmd+0x1c>)
 8001d48:	79fa      	ldrb	r2, [r7, #7]
 8001d4a:	601a      	str	r2, [r3, #0]
}
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	42470000 	.word	0x42470000

08001d5c <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8001d66:	4b0c      	ldr	r3, [pc, #48]	; (8001d98 <RCC_LSEConfig+0x3c>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8001d6c:	4b0a      	ldr	r3, [pc, #40]	; (8001d98 <RCC_LSEConfig+0x3c>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8001d72:	79fb      	ldrb	r3, [r7, #7]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d002      	beq.n	8001d7e <RCC_LSEConfig+0x22>
 8001d78:	2b04      	cmp	r3, #4
 8001d7a:	d004      	beq.n	8001d86 <RCC_LSEConfig+0x2a>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;
    default:
      break;
 8001d7c:	e007      	b.n	8001d8e <RCC_LSEConfig+0x32>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 8001d7e:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <RCC_LSEConfig+0x3c>)
 8001d80:	2201      	movs	r2, #1
 8001d82:	701a      	strb	r2, [r3, #0]
      break;
 8001d84:	e003      	b.n	8001d8e <RCC_LSEConfig+0x32>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8001d86:	4b04      	ldr	r3, [pc, #16]	; (8001d98 <RCC_LSEConfig+0x3c>)
 8001d88:	2205      	movs	r2, #5
 8001d8a:	701a      	strb	r2, [r3, #0]
      break;
 8001d8c:	bf00      	nop
    default:
      break;
  }
}
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	40023870 	.word	0x40023870

08001d9c <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8001da6:	4b04      	ldr	r3, [pc, #16]	; (8001db8 <RCC_LSICmd+0x1c>)
 8001da8:	79fa      	ldrb	r2, [r7, #7]
 8001daa:	601a      	str	r2, [r3, #0]
}
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	42470e80 	.word	0x42470e80

08001dbc <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
 8001dc8:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8001dca:	4b0a      	ldr	r3, [pc, #40]	; (8001df4 <RCC_PLLConfig+0x38>)
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	0191      	lsls	r1, r2, #6
 8001dd0:	68ba      	ldr	r2, [r7, #8]
 8001dd2:	4311      	orrs	r1, r2
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	0852      	lsrs	r2, r2, #1
 8001dd8:	3a01      	subs	r2, #1
 8001dda:	0412      	lsls	r2, r2, #16
 8001ddc:	4311      	orrs	r1, r2
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	4311      	orrs	r1, r2
                 (PLLQ << 24);
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	0612      	lsls	r2, r2, #24
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8001de6:	430a      	orrs	r2, r1
 8001de8:	605a      	str	r2, [r3, #4]
                 (PLLQ << 24);
}
 8001dea:	3714      	adds	r7, #20
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	40023800 	.word	0x40023800

08001df8 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8001e02:	4b04      	ldr	r3, [pc, #16]	; (8001e14 <RCC_PLLCmd+0x1c>)
 8001e04:	79fa      	ldrb	r2, [r7, #7]
 8001e06:	601a      	str	r2, [r3, #0]
}
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	42470060 	.word	0x42470060

08001e18 <RCC_PLLI2SConfig>:
  *         on the I2S clock frequency.
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 8001e22:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <RCC_PLLI2SConfig+0x24>)
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	0191      	lsls	r1, r2, #6
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	0712      	lsls	r2, r2, #28
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	40023800 	.word	0x40023800

08001e40 <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 8001e4a:	4b04      	ldr	r3, [pc, #16]	; (8001e5c <RCC_PLLI2SCmd+0x1c>)
 8001e4c:	79fa      	ldrb	r2, [r7, #7]
 8001e4e:	601a      	str	r2, [r3, #0]
}
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	42470068 	.word	0x42470068

08001e60 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8001e6a:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <RCC_ClockSecuritySystemCmd+0x1c>)
 8001e6c:	79fa      	ldrb	r2, [r7, #7]
 8001e6e:	601a      	str	r2, [r3, #0]
}
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	4247004c 	.word	0x4247004c

08001e80 <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 8001e8e:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <RCC_MCO1Config+0x38>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 8001e9a:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8001ea8:	4b03      	ldr	r3, [pc, #12]	; (8001eb8 <RCC_MCO1Config+0x38>)
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	609a      	str	r2, [r3, #8]
}
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	40023800 	.word	0x40023800

08001ebc <RCC_MCO2Config>:
  *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
  *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 8001eca:	4b0a      	ldr	r3, [pc, #40]	; (8001ef4 <RCC_MCO2Config+0x38>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8001ed6:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8001ee4:	4b03      	ldr	r3, [pc, #12]	; (8001ef4 <RCC_MCO2Config+0x38>)
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	609a      	str	r2, [r3, #8]
}
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	40023800 	.word	0x40023800

08001ef8 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001f00:	2300      	movs	r3, #0
 8001f02:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8001f04:	4b09      	ldr	r3, [pc, #36]	; (8001f2c <RCC_SYSCLKConfig+0x34>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f023 0303 	bic.w	r3, r3, #3
 8001f10:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001f1a:	4b04      	ldr	r3, [pc, #16]	; (8001f2c <RCC_SYSCLKConfig+0x34>)
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	609a      	str	r2, [r3, #8]
}
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	40023800 	.word	0x40023800

08001f30 <RCC_GetSYSCLKSource>:
  *              - 0x00: HSI used as system clock
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8001f34:	4b05      	ldr	r3, [pc, #20]	; (8001f4c <RCC_GetSYSCLKSource+0x1c>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	f003 030c 	and.w	r3, r3, #12
 8001f3e:	b2db      	uxtb	r3, r3
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	40023800 	.word	0x40023800

08001f50 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8001f5c:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <RCC_HCLKConfig+0x34>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f68:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001f72:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <RCC_HCLKConfig+0x34>)
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	609a      	str	r2, [r3, #8]
}
 8001f78:	3714      	adds	r7, #20
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	40023800 	.word	0x40023800

08001f88 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001f90:	2300      	movs	r3, #0
 8001f92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8001f94:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <RCC_PCLK1Config+0x34>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001fa0:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001faa:	4b04      	ldr	r3, [pc, #16]	; (8001fbc <RCC_PCLK1Config+0x34>)
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	609a      	str	r2, [r3, #8]
}
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	40023800 	.word	0x40023800

08001fc0 <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8001fcc:	4b09      	ldr	r3, [pc, #36]	; (8001ff4 <RCC_PCLK2Config+0x34>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001fd8:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001fe4:	4b03      	ldr	r3, [pc, #12]	; (8001ff4 <RCC_PCLK2Config+0x34>)
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	609a      	str	r2, [r3, #8]
}
 8001fea:	3714      	adds	r7, #20
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	40023800 	.word	0x40023800

08001ff8 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b089      	sub	sp, #36	; 0x24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8002000:	2300      	movs	r3, #0
 8002002:	61bb      	str	r3, [r7, #24]
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	2300      	movs	r3, #0
 800200a:	61fb      	str	r3, [r7, #28]
 800200c:	2302      	movs	r3, #2
 800200e:	613b      	str	r3, [r7, #16]
 8002010:	2300      	movs	r3, #0
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	2302      	movs	r3, #2
 8002016:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002018:	4b48      	ldr	r3, [pc, #288]	; (800213c <RCC_GetClocksFreq+0x144>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f003 030c 	and.w	r3, r3, #12
 8002020:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	2b04      	cmp	r3, #4
 8002026:	d007      	beq.n	8002038 <RCC_GetClocksFreq+0x40>
 8002028:	2b08      	cmp	r3, #8
 800202a:	d009      	beq.n	8002040 <RCC_GetClocksFreq+0x48>
 800202c:	2b00      	cmp	r3, #0
 800202e:	d13f      	bne.n	80020b0 <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a43      	ldr	r2, [pc, #268]	; (8002140 <RCC_GetClocksFreq+0x148>)
 8002034:	601a      	str	r2, [r3, #0]
      break;
 8002036:	e03f      	b.n	80020b8 <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a42      	ldr	r2, [pc, #264]	; (8002144 <RCC_GetClocksFreq+0x14c>)
 800203c:	601a      	str	r2, [r3, #0]
      break;
 800203e:	e03b      	b.n	80020b8 <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8002040:	4b3e      	ldr	r3, [pc, #248]	; (800213c <RCC_GetClocksFreq+0x144>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002048:	0d9b      	lsrs	r3, r3, #22
 800204a:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800204c:	4b3b      	ldr	r3, [pc, #236]	; (800213c <RCC_GetClocksFreq+0x144>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002054:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00d      	beq.n	8002078 <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800205c:	4a39      	ldr	r2, [pc, #228]	; (8002144 <RCC_GetClocksFreq+0x14c>)
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	fbb2 f2f3 	udiv	r2, r2, r3
 8002064:	4b35      	ldr	r3, [pc, #212]	; (800213c <RCC_GetClocksFreq+0x144>)
 8002066:	6859      	ldr	r1, [r3, #4]
 8002068:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800206c:	400b      	ands	r3, r1
 800206e:	099b      	lsrs	r3, r3, #6
 8002070:	fb03 f302 	mul.w	r3, r3, r2
 8002074:	61fb      	str	r3, [r7, #28]
 8002076:	e00c      	b.n	8002092 <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8002078:	4a31      	ldr	r2, [pc, #196]	; (8002140 <RCC_GetClocksFreq+0x148>)
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002080:	4b2e      	ldr	r3, [pc, #184]	; (800213c <RCC_GetClocksFreq+0x144>)
 8002082:	6859      	ldr	r1, [r3, #4]
 8002084:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002088:	400b      	ands	r3, r1
 800208a:	099b      	lsrs	r3, r3, #6
 800208c:	fb03 f302 	mul.w	r3, r3, r2
 8002090:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8002092:	4b2a      	ldr	r3, [pc, #168]	; (800213c <RCC_GetClocksFreq+0x144>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800209a:	0c1b      	lsrs	r3, r3, #16
 800209c:	3301      	adds	r3, #1
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80020a2:	69fa      	ldr	r2, [r7, #28]
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	601a      	str	r2, [r3, #0]
      break;
 80020ae:	e003      	b.n	80020b8 <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a23      	ldr	r2, [pc, #140]	; (8002140 <RCC_GetClocksFreq+0x148>)
 80020b4:	601a      	str	r2, [r3, #0]
      break;
 80020b6:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80020b8:	4b20      	ldr	r3, [pc, #128]	; (800213c <RCC_GetClocksFreq+0x144>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020c0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	091b      	lsrs	r3, r3, #4
 80020c6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80020c8:	4a1f      	ldr	r2, [pc, #124]	; (8002148 <RCC_GetClocksFreq+0x150>)
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	4413      	add	r3, r2
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	40da      	lsrs	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80020e0:	4b16      	ldr	r3, [pc, #88]	; (800213c <RCC_GetClocksFreq+0x144>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80020e8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	0a9b      	lsrs	r3, r3, #10
 80020ee:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80020f0:	4a15      	ldr	r2, [pc, #84]	; (8002148 <RCC_GetClocksFreq+0x150>)
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	4413      	add	r3, r2
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	40da      	lsrs	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8002108:	4b0c      	ldr	r3, [pc, #48]	; (800213c <RCC_GetClocksFreq+0x144>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002110:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	0b5b      	lsrs	r3, r3, #13
 8002116:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8002118:	4a0b      	ldr	r2, [pc, #44]	; (8002148 <RCC_GetClocksFreq+0x150>)
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	4413      	add	r3, r2
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	b2db      	uxtb	r3, r3
 8002122:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	40da      	lsrs	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	60da      	str	r2, [r3, #12]
}
 8002130:	3724      	adds	r7, #36	; 0x24
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	40023800 	.word	0x40023800
 8002140:	00f42400 	.word	0x00f42400
 8002144:	01312d00 	.word	0x01312d00
 8002148:	2000003c 	.word	0x2000003c

0800214c <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8002154:	2300      	movs	r3, #0
 8002156:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800215e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002162:	d111      	bne.n	8002188 <RCC_RTCCLKConfig+0x3c>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8002164:	4b0f      	ldr	r3, [pc, #60]	; (80021a4 <RCC_RTCCLKConfig+0x58>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002170:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002178:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	4313      	orrs	r3, r2
 8002180:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8002182:	4b08      	ldr	r3, [pc, #32]	; (80021a4 <RCC_RTCCLKConfig+0x58>)
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8002188:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <RCC_RTCCLKConfig+0x58>)
 800218a:	4a06      	ldr	r2, [pc, #24]	; (80021a4 <RCC_RTCCLKConfig+0x58>)
 800218c:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002194:	430a      	orrs	r2, r1
 8002196:	671a      	str	r2, [r3, #112]	; 0x70
}
 8002198:	3714      	adds	r7, #20
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	40023800 	.word	0x40023800

080021a8 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 80021b2:	4b04      	ldr	r3, [pc, #16]	; (80021c4 <RCC_RTCCLKCmd+0x1c>)
 80021b4:	79fa      	ldrb	r2, [r7, #7]
 80021b6:	601a      	str	r2, [r3, #0]
}
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	42470e3c 	.word	0x42470e3c

080021c8 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 80021d2:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <RCC_BackupResetCmd+0x1c>)
 80021d4:	79fa      	ldrb	r2, [r7, #7]
 80021d6:	601a      	str	r2, [r3, #0]
}
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	42470e40 	.word	0x42470e40

080021e8 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 80021f0:	4b03      	ldr	r3, [pc, #12]	; (8002200 <RCC_I2SCLKConfig+0x18>)
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	601a      	str	r2, [r3, #0]
}
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	4247015c 	.word	0x4247015c

08002204 <RCC_TIMCLKPresConfig>:
  *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
  *                 to division by 8 or more.
  * @retval None
  */
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
 800220c:	4b03      	ldr	r3, [pc, #12]	; (800221c <RCC_TIMCLKPresConfig+0x18>)
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	601a      	str	r2, [r3, #0]
  
}
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	424711e0 	.word	0x424711e0

08002220 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	460b      	mov	r3, r1
 800222a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800222c:	78fb      	ldrb	r3, [r7, #3]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d006      	beq.n	8002240 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8002232:	4b09      	ldr	r3, [pc, #36]	; (8002258 <RCC_AHB1PeriphClockCmd+0x38>)
 8002234:	4a08      	ldr	r2, [pc, #32]	; (8002258 <RCC_AHB1PeriphClockCmd+0x38>)
 8002236:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	430a      	orrs	r2, r1
 800223c:	631a      	str	r2, [r3, #48]	; 0x30
 800223e:	e006      	b.n	800224e <RCC_AHB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8002240:	4b05      	ldr	r3, [pc, #20]	; (8002258 <RCC_AHB1PeriphClockCmd+0x38>)
 8002242:	4a05      	ldr	r2, [pc, #20]	; (8002258 <RCC_AHB1PeriphClockCmd+0x38>)
 8002244:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	43d2      	mvns	r2, r2
 800224a:	400a      	ands	r2, r1
 800224c:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	40023800 	.word	0x40023800

0800225c <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	460b      	mov	r3, r1
 8002266:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002268:	78fb      	ldrb	r3, [r7, #3]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d006      	beq.n	800227c <RCC_AHB2PeriphClockCmd+0x20>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 800226e:	4b09      	ldr	r3, [pc, #36]	; (8002294 <RCC_AHB2PeriphClockCmd+0x38>)
 8002270:	4a08      	ldr	r2, [pc, #32]	; (8002294 <RCC_AHB2PeriphClockCmd+0x38>)
 8002272:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	430a      	orrs	r2, r1
 8002278:	635a      	str	r2, [r3, #52]	; 0x34
 800227a:	e006      	b.n	800228a <RCC_AHB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 800227c:	4b05      	ldr	r3, [pc, #20]	; (8002294 <RCC_AHB2PeriphClockCmd+0x38>)
 800227e:	4a05      	ldr	r2, [pc, #20]	; (8002294 <RCC_AHB2PeriphClockCmd+0x38>)
 8002280:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	43d2      	mvns	r2, r2
 8002286:	400a      	ands	r2, r1
 8002288:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	40023800 	.word	0x40023800

08002298 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	460b      	mov	r3, r1
 80022a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80022a4:	78fb      	ldrb	r3, [r7, #3]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d006      	beq.n	80022b8 <RCC_AHB3PeriphClockCmd+0x20>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 80022aa:	4b09      	ldr	r3, [pc, #36]	; (80022d0 <RCC_AHB3PeriphClockCmd+0x38>)
 80022ac:	4a08      	ldr	r2, [pc, #32]	; (80022d0 <RCC_AHB3PeriphClockCmd+0x38>)
 80022ae:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	639a      	str	r2, [r3, #56]	; 0x38
 80022b6:	e006      	b.n	80022c6 <RCC_AHB3PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 80022b8:	4b05      	ldr	r3, [pc, #20]	; (80022d0 <RCC_AHB3PeriphClockCmd+0x38>)
 80022ba:	4a05      	ldr	r2, [pc, #20]	; (80022d0 <RCC_AHB3PeriphClockCmd+0x38>)
 80022bc:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	43d2      	mvns	r2, r2
 80022c2:	400a      	ands	r2, r1
 80022c4:	639a      	str	r2, [r3, #56]	; 0x38
  }
}
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	40023800 	.word	0x40023800

080022d4 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80022e0:	78fb      	ldrb	r3, [r7, #3]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d006      	beq.n	80022f4 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80022e6:	4b09      	ldr	r3, [pc, #36]	; (800230c <RCC_APB1PeriphClockCmd+0x38>)
 80022e8:	4a08      	ldr	r2, [pc, #32]	; (800230c <RCC_APB1PeriphClockCmd+0x38>)
 80022ea:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	641a      	str	r2, [r3, #64]	; 0x40
 80022f2:	e006      	b.n	8002302 <RCC_APB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80022f4:	4b05      	ldr	r3, [pc, #20]	; (800230c <RCC_APB1PeriphClockCmd+0x38>)
 80022f6:	4a05      	ldr	r2, [pc, #20]	; (800230c <RCC_APB1PeriphClockCmd+0x38>)
 80022f8:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	43d2      	mvns	r2, r2
 80022fe:	400a      	ands	r2, r1
 8002300:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	40023800 	.word	0x40023800

08002310 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	460b      	mov	r3, r1
 800231a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800231c:	78fb      	ldrb	r3, [r7, #3]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d006      	beq.n	8002330 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8002322:	4b09      	ldr	r3, [pc, #36]	; (8002348 <RCC_APB2PeriphClockCmd+0x38>)
 8002324:	4a08      	ldr	r2, [pc, #32]	; (8002348 <RCC_APB2PeriphClockCmd+0x38>)
 8002326:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	430a      	orrs	r2, r1
 800232c:	645a      	str	r2, [r3, #68]	; 0x44
 800232e:	e006      	b.n	800233e <RCC_APB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8002330:	4b05      	ldr	r3, [pc, #20]	; (8002348 <RCC_APB2PeriphClockCmd+0x38>)
 8002332:	4a05      	ldr	r2, [pc, #20]	; (8002348 <RCC_APB2PeriphClockCmd+0x38>)
 8002334:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	43d2      	mvns	r2, r2
 800233a:	400a      	ands	r2, r1
 800233c:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	40023800 	.word	0x40023800

0800234c <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	460b      	mov	r3, r1
 8002356:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002358:	78fb      	ldrb	r3, [r7, #3]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d006      	beq.n	800236c <RCC_AHB1PeriphResetCmd+0x20>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 800235e:	4b09      	ldr	r3, [pc, #36]	; (8002384 <RCC_AHB1PeriphResetCmd+0x38>)
 8002360:	4a08      	ldr	r2, [pc, #32]	; (8002384 <RCC_AHB1PeriphResetCmd+0x38>)
 8002362:	6911      	ldr	r1, [r2, #16]
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	430a      	orrs	r2, r1
 8002368:	611a      	str	r2, [r3, #16]
 800236a:	e006      	b.n	800237a <RCC_AHB1PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 800236c:	4b05      	ldr	r3, [pc, #20]	; (8002384 <RCC_AHB1PeriphResetCmd+0x38>)
 800236e:	4a05      	ldr	r2, [pc, #20]	; (8002384 <RCC_AHB1PeriphResetCmd+0x38>)
 8002370:	6911      	ldr	r1, [r2, #16]
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	43d2      	mvns	r2, r2
 8002376:	400a      	ands	r2, r1
 8002378:	611a      	str	r2, [r3, #16]
  }
}
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	40023800 	.word	0x40023800

08002388 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	460b      	mov	r3, r1
 8002392:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002394:	78fb      	ldrb	r3, [r7, #3]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d006      	beq.n	80023a8 <RCC_AHB2PeriphResetCmd+0x20>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 800239a:	4b09      	ldr	r3, [pc, #36]	; (80023c0 <RCC_AHB2PeriphResetCmd+0x38>)
 800239c:	4a08      	ldr	r2, [pc, #32]	; (80023c0 <RCC_AHB2PeriphResetCmd+0x38>)
 800239e:	6951      	ldr	r1, [r2, #20]
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	430a      	orrs	r2, r1
 80023a4:	615a      	str	r2, [r3, #20]
 80023a6:	e006      	b.n	80023b6 <RCC_AHB2PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 80023a8:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <RCC_AHB2PeriphResetCmd+0x38>)
 80023aa:	4a05      	ldr	r2, [pc, #20]	; (80023c0 <RCC_AHB2PeriphResetCmd+0x38>)
 80023ac:	6951      	ldr	r1, [r2, #20]
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	43d2      	mvns	r2, r2
 80023b2:	400a      	ands	r2, r1
 80023b4:	615a      	str	r2, [r3, #20]
  }
}
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	40023800 	.word	0x40023800

080023c4 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	460b      	mov	r3, r1
 80023ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80023d0:	78fb      	ldrb	r3, [r7, #3]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d006      	beq.n	80023e4 <RCC_AHB3PeriphResetCmd+0x20>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 80023d6:	4b09      	ldr	r3, [pc, #36]	; (80023fc <RCC_AHB3PeriphResetCmd+0x38>)
 80023d8:	4a08      	ldr	r2, [pc, #32]	; (80023fc <RCC_AHB3PeriphResetCmd+0x38>)
 80023da:	6991      	ldr	r1, [r2, #24]
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	430a      	orrs	r2, r1
 80023e0:	619a      	str	r2, [r3, #24]
 80023e2:	e006      	b.n	80023f2 <RCC_AHB3PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 80023e4:	4b05      	ldr	r3, [pc, #20]	; (80023fc <RCC_AHB3PeriphResetCmd+0x38>)
 80023e6:	4a05      	ldr	r2, [pc, #20]	; (80023fc <RCC_AHB3PeriphResetCmd+0x38>)
 80023e8:	6991      	ldr	r1, [r2, #24]
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	43d2      	mvns	r2, r2
 80023ee:	400a      	ands	r2, r1
 80023f0:	619a      	str	r2, [r3, #24]
  }
}
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	40023800 	.word	0x40023800

08002400 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	460b      	mov	r3, r1
 800240a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800240c:	78fb      	ldrb	r3, [r7, #3]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d006      	beq.n	8002420 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8002412:	4b09      	ldr	r3, [pc, #36]	; (8002438 <RCC_APB1PeriphResetCmd+0x38>)
 8002414:	4a08      	ldr	r2, [pc, #32]	; (8002438 <RCC_APB1PeriphResetCmd+0x38>)
 8002416:	6a11      	ldr	r1, [r2, #32]
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	430a      	orrs	r2, r1
 800241c:	621a      	str	r2, [r3, #32]
 800241e:	e006      	b.n	800242e <RCC_APB1PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8002420:	4b05      	ldr	r3, [pc, #20]	; (8002438 <RCC_APB1PeriphResetCmd+0x38>)
 8002422:	4a05      	ldr	r2, [pc, #20]	; (8002438 <RCC_APB1PeriphResetCmd+0x38>)
 8002424:	6a11      	ldr	r1, [r2, #32]
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	43d2      	mvns	r2, r2
 800242a:	400a      	ands	r2, r1
 800242c:	621a      	str	r2, [r3, #32]
  }
}
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	40023800 	.word	0x40023800

0800243c <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	460b      	mov	r3, r1
 8002446:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002448:	78fb      	ldrb	r3, [r7, #3]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d006      	beq.n	800245c <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 800244e:	4b09      	ldr	r3, [pc, #36]	; (8002474 <RCC_APB2PeriphResetCmd+0x38>)
 8002450:	4a08      	ldr	r2, [pc, #32]	; (8002474 <RCC_APB2PeriphResetCmd+0x38>)
 8002452:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	430a      	orrs	r2, r1
 8002458:	625a      	str	r2, [r3, #36]	; 0x24
 800245a:	e006      	b.n	800246a <RCC_APB2PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 800245c:	4b05      	ldr	r3, [pc, #20]	; (8002474 <RCC_APB2PeriphResetCmd+0x38>)
 800245e:	4a05      	ldr	r2, [pc, #20]	; (8002474 <RCC_APB2PeriphResetCmd+0x38>)
 8002460:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	43d2      	mvns	r2, r2
 8002466:	400a      	ands	r2, r1
 8002468:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	40023800 	.word	0x40023800

08002478 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	460b      	mov	r3, r1
 8002482:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002484:	78fb      	ldrb	r3, [r7, #3]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d006      	beq.n	8002498 <RCC_AHB1PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 800248a:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 800248c:	4a08      	ldr	r2, [pc, #32]	; (80024b0 <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 800248e:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	430a      	orrs	r2, r1
 8002494:	651a      	str	r2, [r3, #80]	; 0x50
 8002496:	e006      	b.n	80024a6 <RCC_AHB1PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 8002498:	4b05      	ldr	r3, [pc, #20]	; (80024b0 <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 800249a:	4a05      	ldr	r2, [pc, #20]	; (80024b0 <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 800249c:	6d11      	ldr	r1, [r2, #80]	; 0x50
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	43d2      	mvns	r2, r2
 80024a2:	400a      	ands	r2, r1
 80024a4:	651a      	str	r2, [r3, #80]	; 0x50
  }
}
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	40023800 	.word	0x40023800

080024b4 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	460b      	mov	r3, r1
 80024be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80024c0:	78fb      	ldrb	r3, [r7, #3]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d006      	beq.n	80024d4 <RCC_AHB2PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 80024c6:	4b09      	ldr	r3, [pc, #36]	; (80024ec <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 80024c8:	4a08      	ldr	r2, [pc, #32]	; (80024ec <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 80024ca:	6d51      	ldr	r1, [r2, #84]	; 0x54
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	430a      	orrs	r2, r1
 80024d0:	655a      	str	r2, [r3, #84]	; 0x54
 80024d2:	e006      	b.n	80024e2 <RCC_AHB2PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 80024d4:	4b05      	ldr	r3, [pc, #20]	; (80024ec <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 80024d6:	4a05      	ldr	r2, [pc, #20]	; (80024ec <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 80024d8:	6d51      	ldr	r1, [r2, #84]	; 0x54
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	43d2      	mvns	r2, r2
 80024de:	400a      	ands	r2, r1
 80024e0:	655a      	str	r2, [r3, #84]	; 0x54
  }
}
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	40023800 	.word	0x40023800

080024f0 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	460b      	mov	r3, r1
 80024fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80024fc:	78fb      	ldrb	r3, [r7, #3]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d006      	beq.n	8002510 <RCC_AHB3PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8002502:	4b09      	ldr	r3, [pc, #36]	; (8002528 <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 8002504:	4a08      	ldr	r2, [pc, #32]	; (8002528 <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 8002506:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	430a      	orrs	r2, r1
 800250c:	659a      	str	r2, [r3, #88]	; 0x58
 800250e:	e006      	b.n	800251e <RCC_AHB3PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 8002510:	4b05      	ldr	r3, [pc, #20]	; (8002528 <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 8002512:	4a05      	ldr	r2, [pc, #20]	; (8002528 <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 8002514:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	43d2      	mvns	r2, r2
 800251a:	400a      	ands	r2, r1
 800251c:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	40023800 	.word	0x40023800

0800252c <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002538:	78fb      	ldrb	r3, [r7, #3]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d006      	beq.n	800254c <RCC_APB1PeriphClockLPModeCmd+0x20>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 800253e:	4b09      	ldr	r3, [pc, #36]	; (8002564 <RCC_APB1PeriphClockLPModeCmd+0x38>)
 8002540:	4a08      	ldr	r2, [pc, #32]	; (8002564 <RCC_APB1PeriphClockLPModeCmd+0x38>)
 8002542:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	430a      	orrs	r2, r1
 8002548:	661a      	str	r2, [r3, #96]	; 0x60
 800254a:	e006      	b.n	800255a <RCC_APB1PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 800254c:	4b05      	ldr	r3, [pc, #20]	; (8002564 <RCC_APB1PeriphClockLPModeCmd+0x38>)
 800254e:	4a05      	ldr	r2, [pc, #20]	; (8002564 <RCC_APB1PeriphClockLPModeCmd+0x38>)
 8002550:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	43d2      	mvns	r2, r2
 8002556:	400a      	ands	r2, r1
 8002558:	661a      	str	r2, [r3, #96]	; 0x60
  }
}
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	40023800 	.word	0x40023800

08002568 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	460b      	mov	r3, r1
 8002572:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002574:	78fb      	ldrb	r3, [r7, #3]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d006      	beq.n	8002588 <RCC_APB2PeriphClockLPModeCmd+0x20>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 800257a:	4b09      	ldr	r3, [pc, #36]	; (80025a0 <RCC_APB2PeriphClockLPModeCmd+0x38>)
 800257c:	4a08      	ldr	r2, [pc, #32]	; (80025a0 <RCC_APB2PeriphClockLPModeCmd+0x38>)
 800257e:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	430a      	orrs	r2, r1
 8002584:	665a      	str	r2, [r3, #100]	; 0x64
 8002586:	e006      	b.n	8002596 <RCC_APB2PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 8002588:	4b05      	ldr	r3, [pc, #20]	; (80025a0 <RCC_APB2PeriphClockLPModeCmd+0x38>)
 800258a:	4a05      	ldr	r2, [pc, #20]	; (80025a0 <RCC_APB2PeriphClockLPModeCmd+0x38>)
 800258c:	6e51      	ldr	r1, [r2, #100]	; 0x64
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	43d2      	mvns	r2, r2
 8002592:	400a      	ands	r2, r1
 8002594:	665a      	str	r2, [r3, #100]	; 0x64
  }
}
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	40023800 	.word	0x40023800

080025a4 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4602      	mov	r2, r0
 80025ac:	460b      	mov	r3, r1
 80025ae:	71fa      	strb	r2, [r7, #7]
 80025b0:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80025b2:	79bb      	ldrb	r3, [r7, #6]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d008      	beq.n	80025ca <RCC_ITConfig+0x26>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 80025b8:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <RCC_ITConfig+0x44>)
 80025ba:	4a0b      	ldr	r2, [pc, #44]	; (80025e8 <RCC_ITConfig+0x44>)
 80025bc:	7812      	ldrb	r2, [r2, #0]
 80025be:	b2d1      	uxtb	r1, r2
 80025c0:	79fa      	ldrb	r2, [r7, #7]
 80025c2:	430a      	orrs	r2, r1
 80025c4:	b2d2      	uxtb	r2, r2
 80025c6:	701a      	strb	r2, [r3, #0]
 80025c8:	e009      	b.n	80025de <RCC_ITConfig+0x3a>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 80025ca:	4b07      	ldr	r3, [pc, #28]	; (80025e8 <RCC_ITConfig+0x44>)
 80025cc:	4a06      	ldr	r2, [pc, #24]	; (80025e8 <RCC_ITConfig+0x44>)
 80025ce:	7812      	ldrb	r2, [r2, #0]
 80025d0:	b2d1      	uxtb	r1, r2
 80025d2:	79fa      	ldrb	r2, [r7, #7]
 80025d4:	43d2      	mvns	r2, r2
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	400a      	ands	r2, r1
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	701a      	strb	r2, [r3, #0]
  }
}
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	4002380d 	.word	0x4002380d

080025ec <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b087      	sub	sp, #28
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 80025f6:	2300      	movs	r3, #0
 80025f8:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 80025fa:	2300      	movs	r3, #0
 80025fc:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 80025fe:	2300      	movs	r3, #0
 8002600:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8002602:	79fb      	ldrb	r3, [r7, #7]
 8002604:	095b      	lsrs	r3, r3, #5
 8002606:	b2db      	uxtb	r3, r3
 8002608:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d103      	bne.n	8002618 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8002610:	4b12      	ldr	r3, [pc, #72]	; (800265c <RCC_GetFlagStatus+0x70>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	617b      	str	r3, [r7, #20]
 8002616:	e009      	b.n	800262c <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2b02      	cmp	r3, #2
 800261c:	d103      	bne.n	8002626 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 800261e:	4b0f      	ldr	r3, [pc, #60]	; (800265c <RCC_GetFlagStatus+0x70>)
 8002620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002622:	617b      	str	r3, [r7, #20]
 8002624:	e002      	b.n	800262c <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8002626:	4b0d      	ldr	r3, [pc, #52]	; (800265c <RCC_GetFlagStatus+0x70>)
 8002628:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800262a:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 800262c:	79fb      	ldrb	r3, [r7, #7]
 800262e:	f003 031f 	and.w	r3, r3, #31
 8002632:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	fa22 f303 	lsr.w	r3, r2, r3
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	2b00      	cmp	r3, #0
 8002642:	d002      	beq.n	800264a <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 8002644:	2301      	movs	r3, #1
 8002646:	74fb      	strb	r3, [r7, #19]
 8002648:	e001      	b.n	800264e <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 800264a:	2300      	movs	r3, #0
 800264c:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 800264e:	7cfb      	ldrb	r3, [r7, #19]
}
 8002650:	4618      	mov	r0, r3
 8002652:	371c      	adds	r7, #28
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	40023800 	.word	0x40023800

08002660 <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8002664:	4b04      	ldr	r3, [pc, #16]	; (8002678 <RCC_ClearFlag+0x18>)
 8002666:	4a04      	ldr	r2, [pc, #16]	; (8002678 <RCC_ClearFlag+0x18>)
 8002668:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800266a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800266e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	40023800 	.word	0x40023800

0800267c <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt             
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	4603      	mov	r3, r0
 8002684:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 8002686:	2300      	movs	r3, #0
 8002688:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 800268a:	4b09      	ldr	r3, [pc, #36]	; (80026b0 <RCC_GetITStatus+0x34>)
 800268c:	68da      	ldr	r2, [r3, #12]
 800268e:	79fb      	ldrb	r3, [r7, #7]
 8002690:	4013      	ands	r3, r2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d002      	beq.n	800269c <RCC_GetITStatus+0x20>
  {
    bitstatus = SET;
 8002696:	2301      	movs	r3, #1
 8002698:	73fb      	strb	r3, [r7, #15]
 800269a:	e001      	b.n	80026a0 <RCC_GetITStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 800269c:	2300      	movs	r3, #0
 800269e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 80026a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3714      	adds	r7, #20
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	40023800 	.word	0x40023800

080026b4 <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 80026be:	4b04      	ldr	r3, [pc, #16]	; (80026d0 <RCC_ClearITPendingBit+0x1c>)
 80026c0:	79fa      	ldrb	r2, [r7, #7]
 80026c2:	701a      	strb	r2, [r3, #0]
}
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	4002380e 	.word	0x4002380e

080026d4 <GPIO_DeInit>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for 
  *                STM32F40xx/41xx and STM32F427x/437x devices. 
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	4b3c      	ldr	r3, [pc, #240]	; (80027d0 <GPIO_DeInit+0xfc>)
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d108      	bne.n	80026f6 <GPIO_DeInit+0x22>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80026e4:	2001      	movs	r0, #1
 80026e6:	2101      	movs	r1, #1
 80026e8:	f7ff fe30 	bl	800234c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 80026ec:	2001      	movs	r0, #1
 80026ee:	2100      	movs	r1, #0
 80026f0:	f7ff fe2c 	bl	800234c <RCC_AHB1PeriphResetCmd>
 80026f4:	e068      	b.n	80027c8 <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOB)
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	4b36      	ldr	r3, [pc, #216]	; (80027d4 <GPIO_DeInit+0x100>)
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d108      	bne.n	8002710 <GPIO_DeInit+0x3c>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80026fe:	2002      	movs	r0, #2
 8002700:	2101      	movs	r1, #1
 8002702:	f7ff fe23 	bl	800234c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 8002706:	2002      	movs	r0, #2
 8002708:	2100      	movs	r1, #0
 800270a:	f7ff fe1f 	bl	800234c <RCC_AHB1PeriphResetCmd>
 800270e:	e05b      	b.n	80027c8 <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOC)
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	4b31      	ldr	r3, [pc, #196]	; (80027d8 <GPIO_DeInit+0x104>)
 8002714:	429a      	cmp	r2, r3
 8002716:	d108      	bne.n	800272a <GPIO_DeInit+0x56>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8002718:	2004      	movs	r0, #4
 800271a:	2101      	movs	r1, #1
 800271c:	f7ff fe16 	bl	800234c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 8002720:	2004      	movs	r0, #4
 8002722:	2100      	movs	r1, #0
 8002724:	f7ff fe12 	bl	800234c <RCC_AHB1PeriphResetCmd>
 8002728:	e04e      	b.n	80027c8 <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOD)
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	4b2b      	ldr	r3, [pc, #172]	; (80027dc <GPIO_DeInit+0x108>)
 800272e:	429a      	cmp	r2, r3
 8002730:	d108      	bne.n	8002744 <GPIO_DeInit+0x70>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8002732:	2008      	movs	r0, #8
 8002734:	2101      	movs	r1, #1
 8002736:	f7ff fe09 	bl	800234c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 800273a:	2008      	movs	r0, #8
 800273c:	2100      	movs	r1, #0
 800273e:	f7ff fe05 	bl	800234c <RCC_AHB1PeriphResetCmd>
 8002742:	e041      	b.n	80027c8 <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOE)
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	4b26      	ldr	r3, [pc, #152]	; (80027e0 <GPIO_DeInit+0x10c>)
 8002748:	429a      	cmp	r2, r3
 800274a:	d108      	bne.n	800275e <GPIO_DeInit+0x8a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 800274c:	2010      	movs	r0, #16
 800274e:	2101      	movs	r1, #1
 8002750:	f7ff fdfc 	bl	800234c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 8002754:	2010      	movs	r0, #16
 8002756:	2100      	movs	r1, #0
 8002758:	f7ff fdf8 	bl	800234c <RCC_AHB1PeriphResetCmd>
 800275c:	e034      	b.n	80027c8 <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOF)
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	4b20      	ldr	r3, [pc, #128]	; (80027e4 <GPIO_DeInit+0x110>)
 8002762:	429a      	cmp	r2, r3
 8002764:	d108      	bne.n	8002778 <GPIO_DeInit+0xa4>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8002766:	2020      	movs	r0, #32
 8002768:	2101      	movs	r1, #1
 800276a:	f7ff fdef 	bl	800234c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 800276e:	2020      	movs	r0, #32
 8002770:	2100      	movs	r1, #0
 8002772:	f7ff fdeb 	bl	800234c <RCC_AHB1PeriphResetCmd>
 8002776:	e027      	b.n	80027c8 <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOG)
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	4b1b      	ldr	r3, [pc, #108]	; (80027e8 <GPIO_DeInit+0x114>)
 800277c:	429a      	cmp	r2, r3
 800277e:	d108      	bne.n	8002792 <GPIO_DeInit+0xbe>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8002780:	2040      	movs	r0, #64	; 0x40
 8002782:	2101      	movs	r1, #1
 8002784:	f7ff fde2 	bl	800234c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8002788:	2040      	movs	r0, #64	; 0x40
 800278a:	2100      	movs	r1, #0
 800278c:	f7ff fdde 	bl	800234c <RCC_AHB1PeriphResetCmd>
 8002790:	e01a      	b.n	80027c8 <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOH)
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	4b15      	ldr	r3, [pc, #84]	; (80027ec <GPIO_DeInit+0x118>)
 8002796:	429a      	cmp	r2, r3
 8002798:	d108      	bne.n	80027ac <GPIO_DeInit+0xd8>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 800279a:	2080      	movs	r0, #128	; 0x80
 800279c:	2101      	movs	r1, #1
 800279e:	f7ff fdd5 	bl	800234c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 80027a2:	2080      	movs	r0, #128	; 0x80
 80027a4:	2100      	movs	r1, #0
 80027a6:	f7ff fdd1 	bl	800234c <RCC_AHB1PeriphResetCmd>
 80027aa:	e00d      	b.n	80027c8 <GPIO_DeInit+0xf4>
  }
  else
  {
    if (GPIOx == GPIOI)
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	4b10      	ldr	r3, [pc, #64]	; (80027f0 <GPIO_DeInit+0x11c>)
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d109      	bne.n	80027c8 <GPIO_DeInit+0xf4>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 80027b4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80027b8:	2101      	movs	r1, #1
 80027ba:	f7ff fdc7 	bl	800234c <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 80027be:	f44f 7080 	mov.w	r0, #256	; 0x100
 80027c2:	2100      	movs	r1, #0
 80027c4:	f7ff fdc2 	bl	800234c <RCC_AHB1PeriphResetCmd>
    }
  }
}
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40020000 	.word	0x40020000
 80027d4:	40020400 	.word	0x40020400
 80027d8:	40020800 	.word	0x40020800
 80027dc:	40020c00 	.word	0x40020c00
 80027e0:	40021000 	.word	0x40021000
 80027e4:	40021400 	.word	0x40021400
 80027e8:	40021800 	.word	0x40021800
 80027ec:	40021c00 	.word	0x40021c00
 80027f0:	40022000 	.word	0x40022000

080027f4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b087      	sub	sp, #28
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]
 8002802:	2300      	movs	r3, #0
 8002804:	613b      	str	r3, [r7, #16]
 8002806:	2300      	movs	r3, #0
 8002808:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800280a:	2300      	movs	r3, #0
 800280c:	617b      	str	r3, [r7, #20]
 800280e:	e076      	b.n	80028fe <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	2201      	movs	r2, #1
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	4013      	ands	r3, r2
 8002822:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	429a      	cmp	r2, r3
 800282a:	d165      	bne.n	80028f8 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	2103      	movs	r1, #3
 8002836:	fa01 f303 	lsl.w	r3, r1, r3
 800283a:	43db      	mvns	r3, r3
 800283c:	401a      	ands	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	791b      	ldrb	r3, [r3, #4]
 800284a:	4619      	mov	r1, r3
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	fa01 f303 	lsl.w	r3, r1, r3
 8002854:	431a      	orrs	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	791b      	ldrb	r3, [r3, #4]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d003      	beq.n	800286a <GPIO_Init+0x76>
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	791b      	ldrb	r3, [r3, #4]
 8002866:	2b02      	cmp	r3, #2
 8002868:	d12e      	bne.n	80028c8 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	689a      	ldr	r2, [r3, #8]
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	2103      	movs	r1, #3
 8002874:	fa01 f303 	lsl.w	r3, r1, r3
 8002878:	43db      	mvns	r3, r3
 800287a:	401a      	ands	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	795b      	ldrb	r3, [r3, #5]
 8002888:	4619      	mov	r1, r3
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	fa01 f303 	lsl.w	r3, r1, r3
 8002892:	431a      	orrs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	b29b      	uxth	r3, r3
 80028a0:	2101      	movs	r1, #1
 80028a2:	fa01 f303 	lsl.w	r3, r1, r3
 80028a6:	43db      	mvns	r3, r3
 80028a8:	401a      	ands	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	799b      	ldrb	r3, [r3, #6]
 80028b6:	4619      	mov	r1, r3
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	fa01 f303 	lsl.w	r3, r1, r3
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68da      	ldr	r2, [r3, #12]
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	2103      	movs	r1, #3
 80028d4:	fa01 f303 	lsl.w	r3, r1, r3
 80028d8:	43db      	mvns	r3, r3
 80028da:	401a      	ands	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	68da      	ldr	r2, [r3, #12]
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	79db      	ldrb	r3, [r3, #7]
 80028e8:	4619      	mov	r1, r3
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	fa01 f303 	lsl.w	r3, r1, r3
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	3301      	adds	r3, #1
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	2b0f      	cmp	r3, #15
 8002902:	d985      	bls.n	8002810 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8002904:	371c      	adds	r7, #28
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop

08002910 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800291e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	71da      	strb	r2, [r3, #7]
}
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop

08002944 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	460b      	mov	r3, r1
 800294e:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0x00010000;
 8002950:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002954:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8002956:	887a      	ldrh	r2, [r7, #2]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4313      	orrs	r3, r2
 800295c:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8002964:	887a      	ldrh	r2, [r7, #2]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	69db      	ldr	r3, [r3, #28]
 8002974:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	60fb      	str	r3, [r7, #12]
}
 800297c:	3714      	adds	r7, #20
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop

08002988 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	460b      	mov	r3, r1
 8002992:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8002994:	2300      	movs	r3, #0
 8002996:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	691a      	ldr	r2, [r3, #16]
 800299c:	887b      	ldrh	r3, [r7, #2]
 800299e:	4013      	ands	r3, r2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d002      	beq.n	80029aa <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80029a4:	2301      	movs	r3, #1
 80029a6:	73fb      	strb	r3, [r7, #15]
 80029a8:	e001      	b.n	80029ae <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80029aa:	2300      	movs	r3, #0
 80029ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3714      	adds	r7, #20
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <GPIO_ReadInputData>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for 
  *                STM32F40xx/41xx and STM32F427x/437x devices. 
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	b29b      	uxth	r3, r3
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop

080029d8 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	460b      	mov	r3, r1
 80029e2:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80029e4:	2300      	movs	r3, #0
 80029e6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	695a      	ldr	r2, [r3, #20]
 80029ec:	887b      	ldrh	r3, [r7, #2]
 80029ee:	4013      	ands	r3, r2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d002      	beq.n	80029fa <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80029f4:	2301      	movs	r3, #1
 80029f6:	73fb      	strb	r3, [r7, #15]
 80029f8:	e001      	b.n	80029fe <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80029fa:	2300      	movs	r3, #0
 80029fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3714      	adds	r7, #20
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <GPIO_ReadOutputData>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for 
  *                STM32F40xx/41xx and STM32F427x/437x devices.  
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	695b      	ldr	r3, [r3, #20]
 8002a18:	b29b      	uxth	r3, r3
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop

08002a28 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	460b      	mov	r3, r1
 8002a32:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	887a      	ldrh	r2, [r7, #2]
 8002a38:	831a      	strh	r2, [r3, #24]
}
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	887a      	ldrh	r2, [r7, #2]
 8002a54:	835a      	strh	r2, [r3, #26]
}
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	460a      	mov	r2, r1
 8002a6c:	807a      	strh	r2, [r7, #2]
 8002a6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8002a70:	787b      	ldrb	r3, [r7, #1]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	887a      	ldrh	r2, [r7, #2]
 8002a7a:	831a      	strh	r2, [r3, #24]
 8002a7c:	e002      	b.n	8002a84 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	887a      	ldrh	r2, [r7, #2]
 8002a82:	835a      	strh	r2, [r3, #26]
  }
}
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop

08002a90 <GPIO_Write>:
  *                STM32F40xx/41xx and STM32F427x/437x devices.  
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	460b      	mov	r3, r1
 8002a9a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 8002a9c:	887a      	ldrh	r2, [r7, #2]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	615a      	str	r2, [r3, #20]
}
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <GPIO_ToggleBits>:
  *                STM32F40xx/41xx and STM32F427x/437x devices.  
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	695a      	ldr	r2, [r3, #20]
 8002abc:	887b      	ldrh	r3, [r7, #2]
 8002abe:	405a      	eors	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	615a      	str	r2, [r3, #20]
}
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop

08002ad0 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	460a      	mov	r2, r1
 8002adc:	807a      	strh	r2, [r7, #2]
 8002ade:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8002ae8:	787a      	ldrb	r2, [r7, #1]
 8002aea:	887b      	ldrh	r3, [r7, #2]
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	fa02 f303 	lsl.w	r3, r2, r3
 8002af6:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8002af8:	887b      	ldrh	r3, [r7, #2]
 8002afa:	08db      	lsrs	r3, r3, #3
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	461a      	mov	r2, r3
 8002b00:	887b      	ldrh	r3, [r7, #2]
 8002b02:	08db      	lsrs	r3, r3, #3
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	4619      	mov	r1, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	3108      	adds	r1, #8
 8002b0c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002b10:	887b      	ldrh	r3, [r7, #2]
 8002b12:	f003 0307 	and.w	r3, r3, #7
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	200f      	movs	r0, #15
 8002b1a:	fa00 f303 	lsl.w	r3, r0, r3
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	4019      	ands	r1, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	3208      	adds	r2, #8
 8002b26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8002b2a:	887b      	ldrh	r3, [r7, #2]
 8002b2c:	08db      	lsrs	r3, r3, #3
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	461a      	mov	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	3208      	adds	r2, #8
 8002b36:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8002b40:	887b      	ldrh	r3, [r7, #2]
 8002b42:	08db      	lsrs	r3, r3, #3
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	461a      	mov	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3208      	adds	r2, #8
 8002b4c:	68b9      	ldr	r1, [r7, #8]
 8002b4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8002b52:	3714      	adds	r7, #20
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8002b64:	4a05      	ldr	r2, [pc, #20]	; (8002b7c <NVIC_PriorityGroupConfig+0x20>)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b70:	60d3      	str	r3, [r2, #12]
}
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	e000ed00 	.word	0xe000ed00

08002b80 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	73fb      	strb	r3, [r7, #15]
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	73bb      	strb	r3, [r7, #14]
 8002b90:	230f      	movs	r3, #15
 8002b92:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	78db      	ldrb	r3, [r3, #3]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d037      	beq.n	8002c0c <NVIC_Init+0x8c>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8002b9c:	4b25      	ldr	r3, [pc, #148]	; (8002c34 <NVIC_Init+0xb4>)
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ba6:	0a1b      	lsrs	r3, r3, #8
 8002ba8:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8002baa:	7bfb      	ldrb	r3, [r7, #15]
 8002bac:	f1c3 0304 	rsb	r3, r3, #4
 8002bb0:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8002bb2:	7b7a      	ldrb	r2, [r7, #13]
 8002bb4:	7bfb      	ldrb	r3, [r7, #15]
 8002bb6:	fa42 f303 	asr.w	r3, r2, r3
 8002bba:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	785b      	ldrb	r3, [r3, #1]
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	7bbb      	ldrb	r3, [r7, #14]
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	789a      	ldrb	r2, [r3, #2]
 8002bce:	7b7b      	ldrb	r3, [r7, #13]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	7bfb      	ldrb	r3, [r7, #15]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8002bda:	7bfb      	ldrb	r3, [r7, #15]
 8002bdc:	011b      	lsls	r3, r3, #4
 8002bde:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8002be0:	4a15      	ldr	r2, [pc, #84]	; (8002c38 <NVIC_Init+0xb8>)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	4413      	add	r3, r2
 8002be8:	7bfa      	ldrb	r2, [r7, #15]
 8002bea:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002bee:	4b12      	ldr	r3, [pc, #72]	; (8002c38 <NVIC_Init+0xb8>)
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	7812      	ldrb	r2, [r2, #0]
 8002bf4:	0952      	lsrs	r2, r2, #5
 8002bf6:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	7809      	ldrb	r1, [r1, #0]
 8002bfc:	f001 011f 	and.w	r1, r1, #31
 8002c00:	2001      	movs	r0, #1
 8002c02:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002c06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002c0a:	e00e      	b.n	8002c2a <NVIC_Init+0xaa>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002c0c:	4b0a      	ldr	r3, [pc, #40]	; (8002c38 <NVIC_Init+0xb8>)
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	7812      	ldrb	r2, [r2, #0]
 8002c12:	0952      	lsrs	r2, r2, #5
 8002c14:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	7809      	ldrb	r1, [r1, #0]
 8002c1a:	f001 011f 	and.w	r1, r1, #31
 8002c1e:	2001      	movs	r0, #1
 8002c20:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002c24:	3220      	adds	r2, #32
 8002c26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8002c2a:	3714      	adds	r7, #20
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	e000ed00 	.word	0xe000ed00
 8002c38:	e000e100 	.word	0xe000e100

08002c3c <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8002c46:	4a07      	ldr	r2, [pc, #28]	; (8002c64 <NVIC_SetVectorTable+0x28>)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8002c4e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	430b      	orrs	r3, r1
 8002c56:	6093      	str	r3, [r2, #8]
}
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	e000ed00 	.word	0xe000ed00

08002c68 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	4602      	mov	r2, r0
 8002c70:	460b      	mov	r3, r1
 8002c72:	71fa      	strb	r2, [r7, #7]
 8002c74:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8002c76:	79bb      	ldrb	r3, [r7, #6]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d006      	beq.n	8002c8a <NVIC_SystemLPConfig+0x22>
  {
    SCB->SCR |= LowPowerMode;
 8002c7c:	4b09      	ldr	r3, [pc, #36]	; (8002ca4 <NVIC_SystemLPConfig+0x3c>)
 8002c7e:	4a09      	ldr	r2, [pc, #36]	; (8002ca4 <NVIC_SystemLPConfig+0x3c>)
 8002c80:	6911      	ldr	r1, [r2, #16]
 8002c82:	79fa      	ldrb	r2, [r7, #7]
 8002c84:	430a      	orrs	r2, r1
 8002c86:	611a      	str	r2, [r3, #16]
 8002c88:	e006      	b.n	8002c98 <NVIC_SystemLPConfig+0x30>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8002c8a:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <NVIC_SystemLPConfig+0x3c>)
 8002c8c:	4a05      	ldr	r2, [pc, #20]	; (8002ca4 <NVIC_SystemLPConfig+0x3c>)
 8002c8e:	6911      	ldr	r1, [r2, #16]
 8002c90:	79fa      	ldrb	r2, [r7, #7]
 8002c92:	43d2      	mvns	r2, r2
 8002c94:	400a      	ands	r2, r1
 8002c96:	611a      	str	r2, [r3, #16]
  }
}
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	e000ed00 	.word	0xe000ed00

08002ca8 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d106      	bne.n	8002cc4 <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8002cb6:	4b09      	ldr	r3, [pc, #36]	; (8002cdc <SysTick_CLKSourceConfig+0x34>)
 8002cb8:	4a08      	ldr	r2, [pc, #32]	; (8002cdc <SysTick_CLKSourceConfig+0x34>)
 8002cba:	6812      	ldr	r2, [r2, #0]
 8002cbc:	f042 0204 	orr.w	r2, r2, #4
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	e005      	b.n	8002cd0 <SysTick_CLKSourceConfig+0x28>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8002cc4:	4b05      	ldr	r3, [pc, #20]	; (8002cdc <SysTick_CLKSourceConfig+0x34>)
 8002cc6:	4a05      	ldr	r2, [pc, #20]	; (8002cdc <SysTick_CLKSourceConfig+0x34>)
 8002cc8:	6812      	ldr	r2, [r2, #0]
 8002cca:	f022 0204 	bic.w	r2, r2, #4
 8002cce:	601a      	str	r2, [r3, #0]
  }
}
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	e000e010 	.word	0xe000e010

08002ce0 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8002cea:	f000 fa77 	bl	80031dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002cee:	4b0c      	ldr	r3, [pc, #48]	; (8002d20 <xTimerCreateTimerTask+0x40>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00e      	beq.n	8002d14 <xTimerCreateTimerTask+0x34>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	9300      	str	r3, [sp, #0]
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	9301      	str	r3, [sp, #4]
 8002cfe:	2300      	movs	r3, #0
 8002d00:	9302      	str	r3, [sp, #8]
 8002d02:	2300      	movs	r3, #0
 8002d04:	9303      	str	r3, [sp, #12]
 8002d06:	4807      	ldr	r0, [pc, #28]	; (8002d24 <xTimerCreateTimerTask+0x44>)
 8002d08:	4907      	ldr	r1, [pc, #28]	; (8002d28 <xTimerCreateTimerTask+0x48>)
 8002d0a:	2246      	movs	r2, #70	; 0x46
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	f000 fab5 	bl	800327c <xTaskGenericCreate>
 8002d12:	6078      	str	r0, [r7, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
	return xReturn;
 8002d14:	687b      	ldr	r3, [r7, #4]
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	200000b0 	.word	0x200000b0
 8002d24:	08002e99 	.word	0x08002e99
 8002d28:	08005f70 	.word	0x08005f70

08002d2c <xTimerCreate>:
/*-----------------------------------------------------------*/

TimerHandle_t xTimerCreate( const char * const pcTimerName, const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
 8002d38:	603b      	str	r3, [r7, #0]
Timer_t *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d102      	bne.n	8002d46 <xTimerCreate+0x1a>
	{
		pxNewTimer = NULL;
 8002d40:	2300      	movs	r3, #0
 8002d42:	617b      	str	r3, [r7, #20]
 8002d44:	e01c      	b.n	8002d80 <xTimerCreate+0x54>
	}
	else
	{
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8002d46:	2028      	movs	r0, #40	; 0x28
 8002d48:	f002 fe94 	bl	8005a74 <pvPortMalloc>
 8002d4c:	6178      	str	r0, [r7, #20]
		if( pxNewTimer != NULL )
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d015      	beq.n	8002d80 <xTimerCreate+0x54>
		{
			/* Ensure the infrastructure used by the timer service task has been
			created/initialised. */
			prvCheckForValidListAndQueue();
 8002d54:	f000 fa42 	bl	80031dc <prvCheckForValidListAndQueue>

			/* Initialise the timer structure members using the function parameters. */
			pxNewTimer->pcTimerName = pcTimerName;
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	601a      	str	r2, [r3, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	68ba      	ldr	r2, [r7, #8]
 8002d62:	619a      	str	r2, [r3, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	61da      	str	r2, [r3, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	621a      	str	r2, [r3, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	6a3a      	ldr	r2, [r7, #32]
 8002d74:	625a      	str	r2, [r3, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	3304      	adds	r3, #4
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f002 fcbc 	bl	80056f8 <vListInitialiseItem>
	}

	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );

	return ( TimerHandle_t ) pxNewTimer;
 8002d80:	697b      	ldr	r3, [r7, #20]
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3718      	adds	r7, #24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop

08002d8c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b088      	sub	sp, #32
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
 8002d98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8002d9e:	4b1d      	ldr	r3, [pc, #116]	; (8002e14 <xTimerGenericCommand+0x88>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d030      	beq.n	8002e08 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	2b05      	cmp	r3, #5
 8002db6:	dc1c      	bgt.n	8002df2 <xTimerGenericCommand+0x66>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002db8:	f001 fbce 	bl	8004558 <xTaskGetSchedulerState>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d10b      	bne.n	8002dda <xTimerGenericCommand+0x4e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002dc2:	4b14      	ldr	r3, [pc, #80]	; (8002e14 <xTimerGenericCommand+0x88>)
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	f107 0310 	add.w	r3, r7, #16
 8002dca:	4610      	mov	r0, r2
 8002dcc:	4619      	mov	r1, r3
 8002dce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	f002 f83b 	bl	8004e4c <xQueueGenericSend>
 8002dd6:	61f8      	str	r0, [r7, #28]
 8002dd8:	e016      	b.n	8002e08 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002dda:	4b0e      	ldr	r3, [pc, #56]	; (8002e14 <xTimerGenericCommand+0x88>)
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	f107 0310 	add.w	r3, r7, #16
 8002de2:	4610      	mov	r0, r2
 8002de4:	4619      	mov	r1, r3
 8002de6:	2200      	movs	r2, #0
 8002de8:	2300      	movs	r3, #0
 8002dea:	f002 f82f 	bl	8004e4c <xQueueGenericSend>
 8002dee:	61f8      	str	r0, [r7, #28]
 8002df0:	e00a      	b.n	8002e08 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002df2:	4b08      	ldr	r3, [pc, #32]	; (8002e14 <xTimerGenericCommand+0x88>)
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	f107 0310 	add.w	r3, r7, #16
 8002dfa:	4610      	mov	r0, r2
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	2300      	movs	r3, #0
 8002e02:	f002 f8c9 	bl	8004f98 <xQueueGenericSendFromISR>
 8002e06:	61f8      	str	r0, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8002e08:	69fb      	ldr	r3, [r7, #28]
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3720      	adds	r7, #32
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	200000b0 	.word	0x200000b0

08002e18 <pcTimerGetTimerName>:

#endif
/*-----------------------------------------------------------*/

const char * pcTimerGetTimerName( TimerHandle_t xTimer )
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
Timer_t *pxTimer = ( Timer_t * ) xTimer;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	60fb      	str	r3, [r7, #12]

	return pxTimer->pcTimerName;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3714      	adds	r7, #20
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af02      	add	r7, sp, #8
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002e3e:	4b15      	ldr	r3, [pc, #84]	; (8002e94 <prvProcessExpiredTimer+0x60>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	3304      	adds	r3, #4
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f002 fcbb 	bl	80057c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d115      	bne.n	8002e86 <prvProcessExpiredTimer+0x52>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	699a      	ldr	r2, [r3, #24]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4413      	add	r3, r2
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	4619      	mov	r1, r3
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f000 f8a9 	bl	8002fc0 <prvInsertTimerInActiveList>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d108      	bne.n	8002e86 <prvProcessExpiredTimer+0x52>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002e74:	2300      	movs	r3, #0
 8002e76:	9300      	str	r3, [sp, #0]
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	2300      	movs	r3, #0
 8002e80:	f7ff ff84 	bl	8002d8c <xTimerGenericCommand>
 8002e84:	60b8      	str	r0, [r7, #8]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	4798      	blx	r3
}
 8002e8e:	3710      	adds	r7, #16
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	200000a8 	.word	0x200000a8

08002e98 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002ea0:	f107 0308 	add.w	r3, r7, #8
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f000 f847 	bl	8002f38 <prvGetNextExpireTime>
 8002eaa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	f000 f803 	bl	8002ebc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8002eb6:	f000 f8c5 	bl	8003044 <prvProcessReceivedCommands>
	}
 8002eba:	e7f1      	b.n	8002ea0 <prvTimerTask+0x8>

08002ebc <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8002ec6:	f000 fe1b 	bl	8003b00 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002eca:	f107 0308 	add.w	r3, r7, #8
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f000 f856 	bl	8002f80 <prvSampleTimeNow>
 8002ed4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d124      	bne.n	8002f26 <prvProcessTimerOrBlockTask+0x6a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10a      	bne.n	8002ef8 <prvProcessTimerOrBlockTask+0x3c>
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d806      	bhi.n	8002ef8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8002eea:	f000 fe17 	bl	8003b1c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	68f9      	ldr	r1, [r7, #12]
 8002ef2:	f7ff ff9f 	bl	8002e34 <prvProcessExpiredTimer>
 8002ef6:	e018      	b.n	8002f2a <prvProcessTimerOrBlockTask+0x6e>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 8002ef8:	4b0d      	ldr	r3, [pc, #52]	; (8002f30 <prvProcessTimerOrBlockTask+0x74>)
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	6879      	ldr	r1, [r7, #4]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	1acb      	subs	r3, r1, r3
 8002f02:	4610      	mov	r0, r2
 8002f04:	4619      	mov	r1, r3
 8002f06:	f002 fbab 	bl	8005660 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 8002f0a:	f000 fe07 	bl	8003b1c <xTaskResumeAll>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d10a      	bne.n	8002f2a <prvProcessTimerOrBlockTask+0x6e>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
 8002f14:	4b07      	ldr	r3, [pc, #28]	; (8002f34 <prvProcessTimerOrBlockTask+0x78>)
 8002f16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	f3bf 8f4f 	dsb	sy
 8002f20:	f3bf 8f6f 	isb	sy
 8002f24:	e001      	b.n	8002f2a <prvProcessTimerOrBlockTask+0x6e>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 8002f26:	f000 fdf9 	bl	8003b1c <xTaskResumeAll>
		}
	}
}
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	200000b0 	.word	0x200000b0
 8002f34:	e000ed04 	.word	0xe000ed04

08002f38 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002f40:	4b0e      	ldr	r3, [pc, #56]	; (8002f7c <prvGetNextExpireTime+0x44>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	bf14      	ite	ne
 8002f4a:	2300      	movne	r3, #0
 8002f4c:	2301      	moveq	r3, #1
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	461a      	mov	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d105      	bne.n	8002f6a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002f5e:	4b07      	ldr	r3, [pc, #28]	; (8002f7c <prvGetNextExpireTime+0x44>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	e001      	b.n	8002f6e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3714      	adds	r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	200000a8 	.word	0x200000a8

08002f80 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002f88:	f000 fe4e 	bl	8003c28 <xTaskGetTickCount>
 8002f8c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8002f8e:	4b0b      	ldr	r3, [pc, #44]	; (8002fbc <prvSampleTimeNow+0x3c>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d205      	bcs.n	8002fa4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8002f98:	f000 f8ce 	bl	8003138 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	e002      	b.n	8002faa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8002faa:	4b04      	ldr	r3, [pc, #16]	; (8002fbc <prvSampleTimeNow+0x3c>)
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	200000b4 	.word	0x200000b4

08002fc0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
 8002fcc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	68ba      	ldr	r2, [r7, #8]
 8002fd6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d812      	bhi.n	800300c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	1ad2      	subs	r2, r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d302      	bcc.n	8002ffa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	617b      	str	r3, [r7, #20]
 8002ff8:	e01b      	b.n	8003032 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002ffa:	4b10      	ldr	r3, [pc, #64]	; (800303c <prvInsertTimerInActiveList+0x7c>)
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	3304      	adds	r3, #4
 8003002:	4610      	mov	r0, r2
 8003004:	4619      	mov	r1, r3
 8003006:	f002 fba7 	bl	8005758 <vListInsert>
 800300a:	e012      	b.n	8003032 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	429a      	cmp	r2, r3
 8003012:	d206      	bcs.n	8003022 <prvInsertTimerInActiveList+0x62>
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	429a      	cmp	r2, r3
 800301a:	d302      	bcc.n	8003022 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800301c:	2301      	movs	r3, #1
 800301e:	617b      	str	r3, [r7, #20]
 8003020:	e007      	b.n	8003032 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003022:	4b07      	ldr	r3, [pc, #28]	; (8003040 <prvInsertTimerInActiveList+0x80>)
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	3304      	adds	r3, #4
 800302a:	4610      	mov	r0, r2
 800302c:	4619      	mov	r1, r3
 800302e:	f002 fb93 	bl	8005758 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003032:	697b      	ldr	r3, [r7, #20]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3718      	adds	r7, #24
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	200000ac 	.word	0x200000ac
 8003040:	200000a8 	.word	0x200000a8

08003044 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b08a      	sub	sp, #40	; 0x28
 8003048:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800304a:	e063      	b.n	8003114 <prvProcessReceivedCommands+0xd0>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	2b00      	cmp	r3, #0
 8003050:	db60      	blt.n	8003114 <prvProcessReceivedCommands+0xd0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d004      	beq.n	8003068 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	3304      	adds	r3, #4
 8003062:	4618      	mov	r0, r3
 8003064:	f002 fbb0 	bl	80057c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003068:	1d3b      	adds	r3, r7, #4
 800306a:	4618      	mov	r0, r3
 800306c:	f7ff ff88 	bl	8002f80 <prvSampleTimeNow>
 8003070:	61b8      	str	r0, [r7, #24]

			switch( xMessage.xMessageID )
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	2b09      	cmp	r3, #9
 8003076:	d84c      	bhi.n	8003112 <prvProcessReceivedCommands+0xce>
 8003078:	a201      	add	r2, pc, #4	; (adr r2, 8003080 <prvProcessReceivedCommands+0x3c>)
 800307a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307e:	bf00      	nop
 8003080:	080030a9 	.word	0x080030a9
 8003084:	080030a9 	.word	0x080030a9
 8003088:	080030a9 	.word	0x080030a9
 800308c:	08003113 	.word	0x08003113
 8003090:	080030ef 	.word	0x080030ef
 8003094:	0800310b 	.word	0x0800310b
 8003098:	080030a9 	.word	0x080030a9
 800309c:	080030a9 	.word	0x080030a9
 80030a0:	08003113 	.word	0x08003113
 80030a4:	080030ef 	.word	0x080030ef
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	441a      	add	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	69f8      	ldr	r0, [r7, #28]
 80030b4:	4611      	mov	r1, r2
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	f7ff ff82 	bl	8002fc0 <prvInsertTimerInActiveList>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d114      	bne.n	80030ec <prvProcessReceivedCommands+0xa8>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	69f8      	ldr	r0, [r7, #28]
 80030c8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d10c      	bne.n	80030ec <prvProcessReceivedCommands+0xa8>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	4413      	add	r3, r2
 80030da:	2200      	movs	r2, #0
 80030dc:	9200      	str	r2, [sp, #0]
 80030de:	69f8      	ldr	r0, [r7, #28]
 80030e0:	2100      	movs	r1, #0
 80030e2:	461a      	mov	r2, r3
 80030e4:	2300      	movs	r3, #0
 80030e6:	f7ff fe51 	bl	8002d8c <xTimerGenericCommand>
 80030ea:	6178      	str	r0, [r7, #20]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 80030ec:	e012      	b.n	8003114 <prvProcessReceivedCommands+0xd0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	619a      	str	r2, [r3, #24]
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	699a      	ldr	r2, [r3, #24]
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	4413      	add	r3, r2
 80030fc:	69f8      	ldr	r0, [r7, #28]
 80030fe:	4619      	mov	r1, r3
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	f7ff ff5c 	bl	8002fc0 <prvInsertTimerInActiveList>
					break;
 8003108:	e004      	b.n	8003114 <prvProcessReceivedCommands+0xd0>

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
 800310a:	69f8      	ldr	r0, [r7, #28]
 800310c:	f002 fd4a 	bl	8005ba4 <vPortFree>
					break;
 8003110:	e000      	b.n	8003114 <prvProcessReceivedCommands+0xd0>

				default	:
					/* Don't expect to get here. */
					break;
 8003112:	bf00      	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003114:	4b07      	ldr	r3, [pc, #28]	; (8003134 <prvProcessReceivedCommands+0xf0>)
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	f107 0308 	add.w	r3, r7, #8
 800311c:	4610      	mov	r0, r2
 800311e:	4619      	mov	r1, r3
 8003120:	2200      	movs	r2, #0
 8003122:	2300      	movs	r3, #0
 8003124:	f001 ffd6 	bl	80050d4 <xQueueGenericReceive>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d18e      	bne.n	800304c <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
 800312e:	3720      	adds	r7, #32
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	200000b0 	.word	0x200000b0

08003138 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b088      	sub	sp, #32
 800313c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800313e:	e037      	b.n	80031b0 <prvSwitchTimerLists+0x78>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003140:	4b24      	ldr	r3, [pc, #144]	; (80031d4 <prvSwitchTimerLists+0x9c>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800314a:	4b22      	ldr	r3, [pc, #136]	; (80031d4 <prvSwitchTimerLists+0x9c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	3304      	adds	r3, #4
 8003158:	4618      	mov	r0, r3
 800315a:	f002 fb35 	bl	80057c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	6938      	ldr	r0, [r7, #16]
 8003164:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d120      	bne.n	80031b0 <prvSwitchTimerLists+0x78>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	699a      	ldr	r2, [r3, #24]
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	4413      	add	r3, r2
 8003176:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	429a      	cmp	r2, r3
 800317e:	d90e      	bls.n	800319e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800318c:	4b11      	ldr	r3, [pc, #68]	; (80031d4 <prvSwitchTimerLists+0x9c>)
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	3304      	adds	r3, #4
 8003194:	4610      	mov	r0, r2
 8003196:	4619      	mov	r1, r3
 8003198:	f002 fade 	bl	8005758 <vListInsert>
 800319c:	e008      	b.n	80031b0 <prvSwitchTimerLists+0x78>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800319e:	2300      	movs	r3, #0
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	6938      	ldr	r0, [r7, #16]
 80031a4:	2100      	movs	r1, #0
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	2300      	movs	r3, #0
 80031aa:	f7ff fdef 	bl	8002d8c <xTimerGenericCommand>
 80031ae:	60b8      	str	r0, [r7, #8]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80031b0:	4b08      	ldr	r3, [pc, #32]	; (80031d4 <prvSwitchTimerLists+0x9c>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1c2      	bne.n	8003140 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80031ba:	4b06      	ldr	r3, [pc, #24]	; (80031d4 <prvSwitchTimerLists+0x9c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 80031c0:	4b05      	ldr	r3, [pc, #20]	; (80031d8 <prvSwitchTimerLists+0xa0>)
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	4b03      	ldr	r3, [pc, #12]	; (80031d4 <prvSwitchTimerLists+0x9c>)
 80031c6:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 80031c8:	4b03      	ldr	r3, [pc, #12]	; (80031d8 <prvSwitchTimerLists+0xa0>)
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	601a      	str	r2, [r3, #0]
}
 80031ce:	3718      	adds	r7, #24
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	200000a8 	.word	0x200000a8
 80031d8:	200000ac 	.word	0x200000ac

080031dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80031e0:	f002 fba8 	bl	8005934 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80031e4:	4b0d      	ldr	r3, [pc, #52]	; (800321c <prvCheckForValidListAndQueue+0x40>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d113      	bne.n	8003214 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
 80031ec:	480c      	ldr	r0, [pc, #48]	; (8003220 <prvCheckForValidListAndQueue+0x44>)
 80031ee:	f002 fa63 	bl	80056b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80031f2:	480c      	ldr	r0, [pc, #48]	; (8003224 <prvCheckForValidListAndQueue+0x48>)
 80031f4:	f002 fa60 	bl	80056b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80031f8:	4b0b      	ldr	r3, [pc, #44]	; (8003228 <prvCheckForValidListAndQueue+0x4c>)
 80031fa:	4a09      	ldr	r2, [pc, #36]	; (8003220 <prvCheckForValidListAndQueue+0x44>)
 80031fc:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80031fe:	4b0b      	ldr	r3, [pc, #44]	; (800322c <prvCheckForValidListAndQueue+0x50>)
 8003200:	4a08      	ldr	r2, [pc, #32]	; (8003224 <prvCheckForValidListAndQueue+0x48>)
 8003202:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003204:	2005      	movs	r0, #5
 8003206:	210c      	movs	r1, #12
 8003208:	2200      	movs	r2, #0
 800320a:	f001 fda3 	bl	8004d54 <xQueueGenericCreate>
 800320e:	4602      	mov	r2, r0
 8003210:	4b02      	ldr	r3, [pc, #8]	; (800321c <prvCheckForValidListAndQueue+0x40>)
 8003212:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003214:	f002 fba6 	bl	8005964 <vPortExitCritical>
}
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	200000b0 	.word	0x200000b0
 8003220:	20000080 	.word	0x20000080
 8003224:	20000094 	.word	0x20000094
 8003228:	200000a8 	.word	0x200000a8
 800322c:	200000ac 	.word	0x200000ac

08003230 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	60fb      	str	r3, [r7, #12]

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800323c:	f002 fb7a 	bl	8005934 <vPortEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	695b      	ldr	r3, [r3, #20]
 8003244:	2b00      	cmp	r3, #0
 8003246:	bf0c      	ite	eq
 8003248:	2300      	moveq	r3, #0
 800324a:	2301      	movne	r3, #1
 800324c:	b2db      	uxtb	r3, r3
 800324e:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
 8003250:	f002 fb88 	bl	8005964 <vPortExitCritical>

	return xTimerIsInActiveList;
 8003254:	68bb      	ldr	r3, [r7, #8]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 8003256:	4618      	mov	r0, r3
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop

08003260 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	60fb      	str	r3, [r7, #12]

	return pxTimer->pvTimerID;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6a1b      	ldr	r3, [r3, #32]
}
 8003270:	4618      	mov	r0, r3
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b08a      	sub	sp, #40	; 0x28
 8003280:	af02      	add	r7, sp, #8
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	603b      	str	r3, [r7, #0]
 8003288:	4613      	mov	r3, r2
 800328a:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 800328c:	88fb      	ldrh	r3, [r7, #6]
 800328e:	4618      	mov	r0, r3
 8003290:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003292:	f001 f8e5 	bl	8004460 <prvAllocateTCBAndStack>
 8003296:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d065      	beq.n	800336a <xTaskGenericCreate+0xee>
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032a2:	88fb      	ldrh	r3, [r7, #6]
 80032a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80032a8:	3b01      	subs	r3, #1
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4413      	add	r3, r2
 80032ae:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	f023 0307 	bic.w	r3, r3, #7
 80032b6:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 80032b8:	88fb      	ldrh	r3, [r7, #6]
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	69b8      	ldr	r0, [r7, #24]
 80032be:	68b9      	ldr	r1, [r7, #8]
 80032c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032c4:	f000 ffcc 	bl	8004260 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80032c8:	6978      	ldr	r0, [r7, #20]
 80032ca:	68f9      	ldr	r1, [r7, #12]
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	f002 faa5 	bl	800581c <pxPortInitialiseStack>
 80032d2:	4602      	mov	r2, r0
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 80032d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d002      	beq.n	80032e4 <xTaskGenericCreate+0x68>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80032de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
 80032e4:	f002 fb26 	bl	8005934 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 80032e8:	4b2e      	ldr	r3, [pc, #184]	; (80033a4 <xTaskGenericCreate+0x128>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	1c5a      	adds	r2, r3, #1
 80032ee:	4b2d      	ldr	r3, [pc, #180]	; (80033a4 <xTaskGenericCreate+0x128>)
 80032f0:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
 80032f2:	4b2d      	ldr	r3, [pc, #180]	; (80033a8 <xTaskGenericCreate+0x12c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d109      	bne.n	800330e <xTaskGenericCreate+0x92>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 80032fa:	4b2b      	ldr	r3, [pc, #172]	; (80033a8 <xTaskGenericCreate+0x12c>)
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003300:	4b28      	ldr	r3, [pc, #160]	; (80033a4 <xTaskGenericCreate+0x128>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d10f      	bne.n	8003328 <xTaskGenericCreate+0xac>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 8003308:	f000 fffc 	bl	8004304 <prvInitialiseTaskLists>
 800330c:	e00c      	b.n	8003328 <xTaskGenericCreate+0xac>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 800330e:	4b27      	ldr	r3, [pc, #156]	; (80033ac <xTaskGenericCreate+0x130>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d108      	bne.n	8003328 <xTaskGenericCreate+0xac>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 8003316:	4b24      	ldr	r3, [pc, #144]	; (80033a8 <xTaskGenericCreate+0x12c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800331c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800331e:	429a      	cmp	r2, r3
 8003320:	d802      	bhi.n	8003328 <xTaskGenericCreate+0xac>
					{
						pxCurrentTCB = pxNewTCB;
 8003322:	4b21      	ldr	r3, [pc, #132]	; (80033a8 <xTaskGenericCreate+0x12c>)
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 8003328:	4b21      	ldr	r3, [pc, #132]	; (80033b0 <xTaskGenericCreate+0x134>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	1c5a      	adds	r2, r3, #1
 800332e:	4b20      	ldr	r3, [pc, #128]	; (80033b0 <xTaskGenericCreate+0x134>)
 8003330:	601a      	str	r2, [r3, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003336:	2201      	movs	r2, #1
 8003338:	409a      	lsls	r2, r3
 800333a:	4b1e      	ldr	r3, [pc, #120]	; (80033b4 <xTaskGenericCreate+0x138>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	431a      	orrs	r2, r3
 8003340:	4b1c      	ldr	r3, [pc, #112]	; (80033b4 <xTaskGenericCreate+0x138>)
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003348:	4613      	mov	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4413      	add	r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4a19      	ldr	r2, [pc, #100]	; (80033b8 <xTaskGenericCreate+0x13c>)
 8003352:	441a      	add	r2, r3
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	3304      	adds	r3, #4
 8003358:	4610      	mov	r0, r2
 800335a:	4619      	mov	r1, r3
 800335c:	f002 f9d8 	bl	8005710 <vListInsertEnd>

			xReturn = pdPASS;
 8003360:	2301      	movs	r3, #1
 8003362:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 8003364:	f002 fafe 	bl	8005964 <vPortExitCritical>
 8003368:	e002      	b.n	8003370 <xTaskGenericCreate+0xf4>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800336a:	f04f 33ff 	mov.w	r3, #4294967295
 800336e:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d111      	bne.n	800339a <xTaskGenericCreate+0x11e>
	{
		if( xSchedulerRunning != pdFALSE )
 8003376:	4b0d      	ldr	r3, [pc, #52]	; (80033ac <xTaskGenericCreate+0x130>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00d      	beq.n	800339a <xTaskGenericCreate+0x11e>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 800337e:	4b0a      	ldr	r3, [pc, #40]	; (80033a8 <xTaskGenericCreate+0x12c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003386:	429a      	cmp	r2, r3
 8003388:	d207      	bcs.n	800339a <xTaskGenericCreate+0x11e>
			{
				taskYIELD_IF_USING_PREEMPTION();
 800338a:	4b0c      	ldr	r3, [pc, #48]	; (80033bc <xTaskGenericCreate+0x140>)
 800338c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003390:	601a      	str	r2, [r3, #0]
 8003392:	f3bf 8f4f 	dsb	sy
 8003396:	f3bf 8f6f 	isb	sy
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
 800339a:	69fb      	ldr	r3, [r7, #28]
}
 800339c:	4618      	mov	r0, r3
 800339e:	3720      	adds	r7, #32
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	20000190 	.word	0x20000190
 80033a8:	200000b8 	.word	0x200000b8
 80033ac:	2000019c 	.word	0x2000019c
 80033b0:	200001ac 	.word	0x200001ac
 80033b4:	20000198 	.word	0x20000198
 80033b8:	200000bc 	.word	0x200000bc
 80033bc:	e000ed04 	.word	0xe000ed04

080033c0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80033c8:	f002 fab4 	bl	8005934 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d102      	bne.n	80033d8 <vTaskDelete+0x18>
 80033d2:	4b2c      	ldr	r3, [pc, #176]	; (8003484 <vTaskDelete+0xc4>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	e000      	b.n	80033da <vTaskDelete+0x1a>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	3304      	adds	r3, #4
 80033e0:	4618      	mov	r0, r3
 80033e2:	f002 f9f1 	bl	80057c8 <uxListRemove>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d115      	bne.n	8003418 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033f0:	4925      	ldr	r1, [pc, #148]	; (8003488 <vTaskDelete+0xc8>)
 80033f2:	4613      	mov	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4413      	add	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	440b      	add	r3, r1
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10a      	bne.n	8003418 <vTaskDelete+0x58>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003406:	2201      	movs	r2, #1
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	43da      	mvns	r2, r3
 800340e:	4b1f      	ldr	r3, [pc, #124]	; (800348c <vTaskDelete+0xcc>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	401a      	ands	r2, r3
 8003414:	4b1d      	ldr	r3, [pc, #116]	; (800348c <vTaskDelete+0xcc>)
 8003416:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341c:	2b00      	cmp	r3, #0
 800341e:	d004      	beq.n	800342a <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	3318      	adds	r3, #24
 8003424:	4618      	mov	r0, r3
 8003426:	f002 f9cf 	bl	80057c8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	3304      	adds	r3, #4
 800342e:	4818      	ldr	r0, [pc, #96]	; (8003490 <vTaskDelete+0xd0>)
 8003430:	4619      	mov	r1, r3
 8003432:	f002 f96d 	bl	8005710 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
 8003436:	4b17      	ldr	r3, [pc, #92]	; (8003494 <vTaskDelete+0xd4>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	1c5a      	adds	r2, r3, #1
 800343c:	4b15      	ldr	r3, [pc, #84]	; (8003494 <vTaskDelete+0xd4>)
 800343e:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
 8003440:	4b15      	ldr	r3, [pc, #84]	; (8003498 <vTaskDelete+0xd8>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	1c5a      	adds	r2, r3, #1
 8003446:	4b14      	ldr	r3, [pc, #80]	; (8003498 <vTaskDelete+0xd8>)
 8003448:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800344a:	f002 fa8b 	bl	8005964 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800344e:	4b13      	ldr	r3, [pc, #76]	; (800349c <vTaskDelete+0xdc>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d013      	beq.n	800347e <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8003456:	4b0b      	ldr	r3, [pc, #44]	; (8003484 <vTaskDelete+0xc4>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	429a      	cmp	r2, r3
 800345e:	d108      	bne.n	8003472 <vTaskDelete+0xb2>
				in which Windows specific clean up operations are performed,
				after which it is not possible to yield away from this task -
				hence xYieldPending is used to latch that a context switch is
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
				portYIELD_WITHIN_API();
 8003460:	4b0f      	ldr	r3, [pc, #60]	; (80034a0 <vTaskDelete+0xe0>)
 8003462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	f3bf 8f4f 	dsb	sy
 800346c:	f3bf 8f6f 	isb	sy
 8003470:	e005      	b.n	800347e <vTaskDelete+0xbe>
			}
			else
			{
				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				taskENTER_CRITICAL();
 8003472:	f002 fa5f 	bl	8005934 <vPortEnterCritical>
				{
					prvResetNextTaskUnblockTime();
 8003476:	f001 f83b 	bl	80044f0 <prvResetNextTaskUnblockTime>
				}
				taskEXIT_CRITICAL();
 800347a:	f002 fa73 	bl	8005964 <vPortExitCritical>
			}
		}
	}
 800347e:	3710      	adds	r7, #16
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	200000b8 	.word	0x200000b8
 8003488:	200000bc 	.word	0x200000bc
 800348c:	20000198 	.word	0x20000198
 8003490:	20000164 	.word	0x20000164
 8003494:	20000178 	.word	0x20000178
 8003498:	200001ac 	.word	0x200001ac
 800349c:	2000019c 	.word	0x2000019c
 80034a0:	e000ed04 	.word	0xe000ed04

080034a4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80034ae:	2300      	movs	r3, #0
 80034b0:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );
		configASSERT( uxSchedulerSuspended == 0 );

		vTaskSuspendAll();
 80034b2:	f000 fb25 	bl	8003b00 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80034b6:	4b29      	ldr	r3, [pc, #164]	; (800355c <vTaskDelayUntil+0xb8>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	4413      	add	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d90b      	bls.n	80034e8 <vTaskDelayUntil+0x44>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d911      	bls.n	80034fe <vTaskDelayUntil+0x5a>
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d90d      	bls.n	80034fe <vTaskDelayUntil+0x5a>
				{
					xShouldDelay = pdTRUE;
 80034e2:	2301      	movs	r3, #1
 80034e4:	617b      	str	r3, [r7, #20]
 80034e6:	e00a      	b.n	80034fe <vTaskDelayUntil+0x5a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d803      	bhi.n	80034fa <vTaskDelayUntil+0x56>
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d901      	bls.n	80034fe <vTaskDelayUntil+0x5a>
				{
					xShouldDelay = pdTRUE;
 80034fa:	2301      	movs	r3, #1
 80034fc:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d017      	beq.n	800353a <vTaskDelayUntil+0x96>
			{
				traceTASK_DELAY_UNTIL();

				/* Remove the task from the ready list before adding it to the
				blocked list as the same list item is used for both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800350a:	4b15      	ldr	r3, [pc, #84]	; (8003560 <vTaskDelayUntil+0xbc>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	3304      	adds	r3, #4
 8003510:	4618      	mov	r0, r3
 8003512:	f002 f959 	bl	80057c8 <uxListRemove>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10b      	bne.n	8003534 <vTaskDelayUntil+0x90>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800351c:	4b10      	ldr	r3, [pc, #64]	; (8003560 <vTaskDelayUntil+0xbc>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003522:	2201      	movs	r2, #1
 8003524:	fa02 f303 	lsl.w	r3, r2, r3
 8003528:	43da      	mvns	r2, r3
 800352a:	4b0e      	ldr	r3, [pc, #56]	; (8003564 <vTaskDelayUntil+0xc0>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	401a      	ands	r2, r3
 8003530:	4b0c      	ldr	r3, [pc, #48]	; (8003564 <vTaskDelayUntil+0xc0>)
 8003532:	601a      	str	r2, [r3, #0]
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f000 ff5d 	bl	80043f4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800353a:	f000 faef 	bl	8003b1c <xTaskResumeAll>
 800353e:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d107      	bne.n	8003556 <vTaskDelayUntil+0xb2>
		{
			portYIELD_WITHIN_API();
 8003546:	4b08      	ldr	r3, [pc, #32]	; (8003568 <vTaskDelayUntil+0xc4>)
 8003548:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	f3bf 8f4f 	dsb	sy
 8003552:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003556:	3718      	adds	r7, #24
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	20000194 	.word	0x20000194
 8003560:	200000b8 	.word	0x200000b8
 8003564:	20000198 	.word	0x20000198
 8003568:	e000ed04 	.word	0xe000ed04

0800356c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;
 8003574:	2300      	movs	r3, #0
 8003576:	60fb      	str	r3, [r7, #12]


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d021      	beq.n	80035c2 <vTaskDelay+0x56>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 800357e:	f000 fabf 	bl	8003b00 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 8003582:	4b17      	ldr	r3, [pc, #92]	; (80035e0 <vTaskDelay+0x74>)
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4413      	add	r3, r2
 800358a:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800358c:	4b15      	ldr	r3, [pc, #84]	; (80035e4 <vTaskDelay+0x78>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	3304      	adds	r3, #4
 8003592:	4618      	mov	r0, r3
 8003594:	f002 f918 	bl	80057c8 <uxListRemove>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10b      	bne.n	80035b6 <vTaskDelay+0x4a>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800359e:	4b11      	ldr	r3, [pc, #68]	; (80035e4 <vTaskDelay+0x78>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a4:	2201      	movs	r2, #1
 80035a6:	fa02 f303 	lsl.w	r3, r2, r3
 80035aa:	43da      	mvns	r2, r3
 80035ac:	4b0e      	ldr	r3, [pc, #56]	; (80035e8 <vTaskDelay+0x7c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	401a      	ands	r2, r3
 80035b2:	4b0d      	ldr	r3, [pc, #52]	; (80035e8 <vTaskDelay+0x7c>)
 80035b4:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 80035b6:	68b8      	ldr	r0, [r7, #8]
 80035b8:	f000 ff1c 	bl	80043f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80035bc:	f000 faae 	bl	8003b1c <xTaskResumeAll>
 80035c0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d107      	bne.n	80035d8 <vTaskDelay+0x6c>
		{
			portYIELD_WITHIN_API();
 80035c8:	4b08      	ldr	r3, [pc, #32]	; (80035ec <vTaskDelay+0x80>)
 80035ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	f3bf 8f4f 	dsb	sy
 80035d4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	20000194 	.word	0x20000194
 80035e4:	200000b8 	.word	0x200000b8
 80035e8:	20000198 	.word	0x20000198
 80035ec:	e000ed04 	.word	0xe000ed04

080035f0 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 80035f8:	f002 f99c 	bl	8005934 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( xTask );
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d102      	bne.n	8003608 <uxTaskPriorityGet+0x18>
 8003602:	4b07      	ldr	r3, [pc, #28]	; (8003620 <uxTaskPriorityGet+0x30>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	e000      	b.n	800360a <uxTaskPriorityGet+0x1a>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003610:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
 8003612:	f002 f9a7 	bl	8005964 <vPortExitCritical>

		return uxReturn;
 8003616:	68bb      	ldr	r3, [r7, #8]
	}
 8003618:	4618      	mov	r0, r3
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	200000b8 	.word	0x200000b8

08003624 <uxTaskPriorityGetFromISR>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
	{
 8003624:	b480      	push	{r7}
 8003626:	b089      	sub	sp, #36	; 0x24
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800362c:	f3ef 8211 	mrs	r2, BASEPRI
 8003630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003634:	f383 8811 	msr	BASEPRI, r3
 8003638:	f3bf 8f6f 	isb	sy
 800363c:	f3bf 8f4f 	dsb	sy
 8003640:	613a      	str	r2, [r7, #16]
 8003642:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003644:	693b      	ldr	r3, [r7, #16]
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 8003646:	61fb      	str	r3, [r7, #28]
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d102      	bne.n	8003654 <uxTaskPriorityGetFromISR+0x30>
 800364e:	4b0a      	ldr	r3, [pc, #40]	; (8003678 <uxTaskPriorityGetFromISR+0x54>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	e000      	b.n	8003656 <uxTaskPriorityGetFromISR+0x32>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	61bb      	str	r3, [r7, #24]
			uxReturn = pxTCB->uxPriority;
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365c:	617b      	str	r3, [r7, #20]
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	f383 8811 	msr	BASEPRI, r3
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );

		return uxReturn;
 8003668:	697b      	ldr	r3, [r7, #20]
	}
 800366a:	4618      	mov	r0, r3
 800366c:	3724      	adds	r7, #36	; 0x24
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	200000b8 	.word	0x200000b8

0800367c <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8003686:	2300      	movs	r3, #0
 8003688:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	2b04      	cmp	r3, #4
 800368e:	d901      	bls.n	8003694 <vTaskPrioritySet+0x18>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003690:	2304      	movs	r3, #4
 8003692:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8003694:	f002 f94e 	bl	8005934 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d102      	bne.n	80036a4 <vTaskPrioritySet+0x28>
 800369e:	4b43      	ldr	r3, [pc, #268]	; (80037ac <vTaskPrioritySet+0x130>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	e000      	b.n	80036a6 <vTaskPrioritySet+0x2a>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ac:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d074      	beq.n	80037a0 <vTaskPrioritySet+0x124>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d90d      	bls.n	80036da <vTaskPrioritySet+0x5e>
				{
					if( pxTCB != pxCurrentTCB )
 80036be:	4b3b      	ldr	r3, [pc, #236]	; (80037ac <vTaskPrioritySet+0x130>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d00f      	beq.n	80036e8 <vTaskPrioritySet+0x6c>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 80036c8:	4b38      	ldr	r3, [pc, #224]	; (80037ac <vTaskPrioritySet+0x130>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d809      	bhi.n	80036e8 <vTaskPrioritySet+0x6c>
						{
							xYieldRequired = pdTRUE;
 80036d4:	2301      	movs	r3, #1
 80036d6:	617b      	str	r3, [r7, #20]
 80036d8:	e006      	b.n	80036e8 <vTaskPrioritySet+0x6c>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 80036da:	4b34      	ldr	r3, [pc, #208]	; (80037ac <vTaskPrioritySet+0x130>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d101      	bne.n	80036e8 <vTaskPrioritySet+0x6c>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 80036e4:	2301      	movs	r3, #1
 80036e6:	617b      	str	r3, [r7, #20]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ec:	60bb      	str	r3, [r7, #8]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d102      	bne.n	8003700 <vTaskPrioritySet+0x84>
					{
						pxTCB->uxPriority = uxNewPriority;
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	683a      	ldr	r2, [r7, #0]
 80036fe:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	641a      	str	r2, [r3, #64]	; 0x40
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	2b00      	cmp	r3, #0
 800370c:	db04      	blt.n	8003718 <vTaskPrioritySet+0x9c>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	f1c3 0205 	rsb	r2, r3, #5
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	6959      	ldr	r1, [r3, #20]
 800371c:	68ba      	ldr	r2, [r7, #8]
 800371e:	4613      	mov	r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	4413      	add	r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	4a22      	ldr	r2, [pc, #136]	; (80037b0 <vTaskPrioritySet+0x134>)
 8003728:	4413      	add	r3, r2
 800372a:	4299      	cmp	r1, r3
 800372c:	d101      	bne.n	8003732 <vTaskPrioritySet+0xb6>
 800372e:	2301      	movs	r3, #1
 8003730:	e000      	b.n	8003734 <vTaskPrioritySet+0xb8>
 8003732:	2300      	movs	r3, #0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d028      	beq.n	800378a <vTaskPrioritySet+0x10e>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	3304      	adds	r3, #4
 800373c:	4618      	mov	r0, r3
 800373e:	f002 f843 	bl	80057c8 <uxListRemove>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d109      	bne.n	800375c <vTaskPrioritySet+0xe0>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	2201      	movs	r2, #1
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	43da      	mvns	r2, r3
 8003752:	4b18      	ldr	r3, [pc, #96]	; (80037b4 <vTaskPrioritySet+0x138>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	401a      	ands	r2, r3
 8003758:	4b16      	ldr	r3, [pc, #88]	; (80037b4 <vTaskPrioritySet+0x138>)
 800375a:	601a      	str	r2, [r3, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003760:	2201      	movs	r2, #1
 8003762:	409a      	lsls	r2, r3
 8003764:	4b13      	ldr	r3, [pc, #76]	; (80037b4 <vTaskPrioritySet+0x138>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	431a      	orrs	r2, r3
 800376a:	4b12      	ldr	r3, [pc, #72]	; (80037b4 <vTaskPrioritySet+0x138>)
 800376c:	601a      	str	r2, [r3, #0]
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003772:	4613      	mov	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	4413      	add	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	4a0d      	ldr	r2, [pc, #52]	; (80037b0 <vTaskPrioritySet+0x134>)
 800377c:	441a      	add	r2, r3
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	3304      	adds	r3, #4
 8003782:	4610      	mov	r0, r2
 8003784:	4619      	mov	r1, r3
 8003786:	f001 ffc3 	bl	8005710 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired == pdTRUE )
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d107      	bne.n	80037a0 <vTaskPrioritySet+0x124>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8003790:	4b09      	ldr	r3, [pc, #36]	; (80037b8 <vTaskPrioritySet+0x13c>)
 8003792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	f3bf 8f4f 	dsb	sy
 800379c:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 80037a0:	f002 f8e0 	bl	8005964 <vPortExitCritical>
	}
 80037a4:	3718      	adds	r7, #24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	200000b8 	.word	0x200000b8
 80037b0:	200000bc 	.word	0x200000bc
 80037b4:	20000198 	.word	0x20000198
 80037b8:	e000ed04 	.word	0xe000ed04

080037bc <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80037c4:	f002 f8b6 	bl	8005934 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d102      	bne.n	80037d4 <vTaskSuspend+0x18>
 80037ce:	4b30      	ldr	r3, [pc, #192]	; (8003890 <vTaskSuspend+0xd4>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	e000      	b.n	80037d6 <vTaskSuspend+0x1a>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	3304      	adds	r3, #4
 80037dc:	4618      	mov	r0, r3
 80037de:	f001 fff3 	bl	80057c8 <uxListRemove>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d115      	bne.n	8003814 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ec:	4929      	ldr	r1, [pc, #164]	; (8003894 <vTaskSuspend+0xd8>)
 80037ee:	4613      	mov	r3, r2
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	4413      	add	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	440b      	add	r3, r1
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10a      	bne.n	8003814 <vTaskSuspend+0x58>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003802:	2201      	movs	r2, #1
 8003804:	fa02 f303 	lsl.w	r3, r2, r3
 8003808:	43da      	mvns	r2, r3
 800380a:	4b23      	ldr	r3, [pc, #140]	; (8003898 <vTaskSuspend+0xdc>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	401a      	ands	r2, r3
 8003810:	4b21      	ldr	r3, [pc, #132]	; (8003898 <vTaskSuspend+0xdc>)
 8003812:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003818:	2b00      	cmp	r3, #0
 800381a:	d004      	beq.n	8003826 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	3318      	adds	r3, #24
 8003820:	4618      	mov	r0, r3
 8003822:	f001 ffd1 	bl	80057c8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	3304      	adds	r3, #4
 800382a:	481c      	ldr	r0, [pc, #112]	; (800389c <vTaskSuspend+0xe0>)
 800382c:	4619      	mov	r1, r3
 800382e:	f001 ff6f 	bl	8005710 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
 8003832:	f002 f897 	bl	8005964 <vPortExitCritical>

		if( pxTCB == pxCurrentTCB )
 8003836:	4b16      	ldr	r3, [pc, #88]	; (8003890 <vTaskSuspend+0xd4>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	429a      	cmp	r2, r3
 800383e:	d119      	bne.n	8003874 <vTaskSuspend+0xb8>
		{
			if( xSchedulerRunning != pdFALSE )
 8003840:	4b17      	ldr	r3, [pc, #92]	; (80038a0 <vTaskSuspend+0xe4>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d008      	beq.n	800385a <vTaskSuspend+0x9e>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
 8003848:	4b16      	ldr	r3, [pc, #88]	; (80038a4 <vTaskSuspend+0xe8>)
 800384a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	f3bf 8f4f 	dsb	sy
 8003854:	f3bf 8f6f 	isb	sy
 8003858:	e016      	b.n	8003888 <vTaskSuspend+0xcc>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800385a:	4b10      	ldr	r3, [pc, #64]	; (800389c <vTaskSuspend+0xe0>)
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	4b12      	ldr	r3, [pc, #72]	; (80038a8 <vTaskSuspend+0xec>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	429a      	cmp	r2, r3
 8003864:	d103      	bne.n	800386e <vTaskSuspend+0xb2>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
 8003866:	4b0a      	ldr	r3, [pc, #40]	; (8003890 <vTaskSuspend+0xd4>)
 8003868:	2200      	movs	r2, #0
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	e00c      	b.n	8003888 <vTaskSuspend+0xcc>
				}
				else
				{
					vTaskSwitchContext();
 800386e:	f000 fab7 	bl	8003de0 <vTaskSwitchContext>
 8003872:	e009      	b.n	8003888 <vTaskSuspend+0xcc>
				}
			}
		}
		else
		{
			if( xSchedulerRunning != pdFALSE )
 8003874:	4b0a      	ldr	r3, [pc, #40]	; (80038a0 <vTaskSuspend+0xe4>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d005      	beq.n	8003888 <vTaskSuspend+0xcc>
			{
				/* A task other than the currently running task was suspended,
				reset the next expected unblock time in case it referred to the
				task that is now in the Suspended state. */
				taskENTER_CRITICAL();
 800387c:	f002 f85a 	bl	8005934 <vPortEnterCritical>
				{
					prvResetNextTaskUnblockTime();
 8003880:	f000 fe36 	bl	80044f0 <prvResetNextTaskUnblockTime>
				}
				taskEXIT_CRITICAL();
 8003884:	f002 f86e 	bl	8005964 <vPortExitCritical>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	200000b8 	.word	0x200000b8
 8003894:	200000bc 	.word	0x200000bc
 8003898:	20000198 	.word	0x20000198
 800389c:	2000017c 	.word	0x2000017c
 80038a0:	2000019c 	.word	0x2000019c
 80038a4:	e000ed04 	.word	0xe000ed04
 80038a8:	20000190 	.word	0x20000190

080038ac <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80038ac:	b480      	push	{r7}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80038b4:	2300      	movs	r3, #0
 80038b6:	60fb      	str	r3, [r7, #12]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	60bb      	str	r3, [r7, #8]

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	695a      	ldr	r2, [r3, #20]
 80038c0:	4b0f      	ldr	r3, [pc, #60]	; (8003900 <prvTaskIsTaskSuspended+0x54>)
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d101      	bne.n	80038ca <prvTaskIsTaskSuspended+0x1e>
 80038c6:	2301      	movs	r3, #1
 80038c8:	e000      	b.n	80038cc <prvTaskIsTaskSuspended+0x20>
 80038ca:	2300      	movs	r3, #0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00f      	beq.n	80038f0 <prvTaskIsTaskSuspended+0x44>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038d4:	4b0b      	ldr	r3, [pc, #44]	; (8003904 <prvTaskIsTaskSuspended+0x58>)
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d00a      	beq.n	80038f0 <prvTaskIsTaskSuspended+0x44>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <prvTaskIsTaskSuspended+0x3a>
 80038e2:	2301      	movs	r3, #1
 80038e4:	e000      	b.n	80038e8 <prvTaskIsTaskSuspended+0x3c>
 80038e6:	2300      	movs	r3, #0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d001      	beq.n	80038f0 <prvTaskIsTaskSuspended+0x44>
				{
					xReturn = pdTRUE;
 80038ec:	2301      	movs	r3, #1
 80038ee:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80038f0:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80038f2:	4618      	mov	r0, r3
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	2000017c 	.word	0x2000017c
 8003904:	20000150 	.word	0x20000150

08003908 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	60fb      	str	r3, [r7, #12]
		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d039      	beq.n	800398e <vTaskResume+0x86>
 800391a:	4b1e      	ldr	r3, [pc, #120]	; (8003994 <vTaskResume+0x8c>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	429a      	cmp	r2, r3
 8003922:	d034      	beq.n	800398e <vTaskResume+0x86>
		{
			taskENTER_CRITICAL();
 8003924:	f002 f806 	bl	8005934 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f7ff ffbf 	bl	80038ac <prvTaskIsTaskSuspended>
 800392e:	4603      	mov	r3, r0
 8003930:	2b01      	cmp	r3, #1
 8003932:	d12a      	bne.n	800398a <vTaskResume+0x82>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	3304      	adds	r3, #4
 8003938:	4618      	mov	r0, r3
 800393a:	f001 ff45 	bl	80057c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003942:	2201      	movs	r2, #1
 8003944:	409a      	lsls	r2, r3
 8003946:	4b14      	ldr	r3, [pc, #80]	; (8003998 <vTaskResume+0x90>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	431a      	orrs	r2, r3
 800394c:	4b12      	ldr	r3, [pc, #72]	; (8003998 <vTaskResume+0x90>)
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003954:	4613      	mov	r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4413      	add	r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	4a0f      	ldr	r2, [pc, #60]	; (800399c <vTaskResume+0x94>)
 800395e:	441a      	add	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	3304      	adds	r3, #4
 8003964:	4610      	mov	r0, r2
 8003966:	4619      	mov	r1, r3
 8003968:	f001 fed2 	bl	8005710 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003970:	4b08      	ldr	r3, [pc, #32]	; (8003994 <vTaskResume+0x8c>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003976:	429a      	cmp	r2, r3
 8003978:	d307      	bcc.n	800398a <vTaskResume+0x82>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800397a:	4b09      	ldr	r3, [pc, #36]	; (80039a0 <vTaskResume+0x98>)
 800397c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	f3bf 8f4f 	dsb	sy
 8003986:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800398a:	f001 ffeb 	bl	8005964 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	200000b8 	.word	0x200000b8
 8003998:	20000198 	.word	0x20000198
 800399c:	200000bc 	.word	0x200000bc
 80039a0:	e000ed04 	.word	0xe000ed04

080039a4 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b088      	sub	sp, #32
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 80039ac:	2300      	movs	r3, #0
 80039ae:	61fb      	str	r3, [r7, #28]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	61bb      	str	r3, [r7, #24]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80039b4:	f3ef 8211 	mrs	r2, BASEPRI
 80039b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039bc:	f383 8811 	msr	BASEPRI, r3
 80039c0:	f3bf 8f6f 	isb	sy
 80039c4:	f3bf 8f4f 	dsb	sy
 80039c8:	613a      	str	r2, [r7, #16]
 80039ca:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80039cc:	693b      	ldr	r3, [r7, #16]
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80039ce:	617b      	str	r3, [r7, #20]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 80039d0:	69b8      	ldr	r0, [r7, #24]
 80039d2:	f7ff ff6b 	bl	80038ac <prvTaskIsTaskSuspended>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d12f      	bne.n	8003a3c <xTaskResumeFromISR+0x98>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039dc:	4b1c      	ldr	r3, [pc, #112]	; (8003a50 <xTaskResumeFromISR+0xac>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d125      	bne.n	8003a30 <xTaskResumeFromISR+0x8c>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e8:	4b1a      	ldr	r3, [pc, #104]	; (8003a54 <xTaskResumeFromISR+0xb0>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d301      	bcc.n	80039f6 <xTaskResumeFromISR+0x52>
					{
						xYieldRequired = pdTRUE;
 80039f2:	2301      	movs	r3, #1
 80039f4:	61fb      	str	r3, [r7, #28]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	3304      	adds	r3, #4
 80039fa:	4618      	mov	r0, r3
 80039fc:	f001 fee4 	bl	80057c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a04:	2201      	movs	r2, #1
 8003a06:	409a      	lsls	r2, r3
 8003a08:	4b13      	ldr	r3, [pc, #76]	; (8003a58 <xTaskResumeFromISR+0xb4>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	431a      	orrs	r2, r3
 8003a0e:	4b12      	ldr	r3, [pc, #72]	; (8003a58 <xTaskResumeFromISR+0xb4>)
 8003a10:	601a      	str	r2, [r3, #0]
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a16:	4613      	mov	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4413      	add	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	4a0f      	ldr	r2, [pc, #60]	; (8003a5c <xTaskResumeFromISR+0xb8>)
 8003a20:	441a      	add	r2, r3
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	3304      	adds	r3, #4
 8003a26:	4610      	mov	r0, r2
 8003a28:	4619      	mov	r1, r3
 8003a2a:	f001 fe71 	bl	8005710 <vListInsertEnd>
 8003a2e:	e005      	b.n	8003a3c <xTaskResumeFromISR+0x98>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	3318      	adds	r3, #24
 8003a34:	480a      	ldr	r0, [pc, #40]	; (8003a60 <xTaskResumeFromISR+0xbc>)
 8003a36:	4619      	mov	r1, r3
 8003a38:	f001 fe6a 	bl	8005710 <vListInsertEnd>
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	f383 8811 	msr	BASEPRI, r3
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8003a46:	69fb      	ldr	r3, [r7, #28]
	}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3720      	adds	r7, #32
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	200001b0 	.word	0x200001b0
 8003a54:	200000b8 	.word	0x200000b8
 8003a58:	20000198 	.word	0x20000198
 8003a5c:	200000bc 	.word	0x200000bc
 8003a60:	20000150 	.word	0x20000150

08003a64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b086      	sub	sp, #24
 8003a68:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	9300      	str	r3, [sp, #0]
 8003a6e:	2300      	movs	r3, #0
 8003a70:	9301      	str	r3, [sp, #4]
 8003a72:	2300      	movs	r3, #0
 8003a74:	9302      	str	r3, [sp, #8]
 8003a76:	2300      	movs	r3, #0
 8003a78:	9303      	str	r3, [sp, #12]
 8003a7a:	4812      	ldr	r0, [pc, #72]	; (8003ac4 <vTaskStartScheduler+0x60>)
 8003a7c:	4912      	ldr	r1, [pc, #72]	; (8003ac8 <vTaskStartScheduler+0x64>)
 8003a7e:	2246      	movs	r2, #70	; 0x46
 8003a80:	2300      	movs	r3, #0
 8003a82:	f7ff fbfb 	bl	800327c <xTaskGenericCreate>
 8003a86:	6078      	str	r0, [r7, #4]
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d102      	bne.n	8003a94 <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
 8003a8e:	f7ff f927 	bl	8002ce0 <xTimerCreateTimerTask>
 8003a92:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d110      	bne.n	8003abc <vTaskStartScheduler+0x58>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a9e:	f383 8811 	msr	BASEPRI, r3
 8003aa2:	f3bf 8f6f 	isb	sy
 8003aa6:	f3bf 8f4f 	dsb	sy
 8003aaa:	603b      	str	r3, [r7, #0]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
 8003aac:	4b07      	ldr	r3, [pc, #28]	; (8003acc <vTaskStartScheduler+0x68>)
 8003aae:	2201      	movs	r2, #1
 8003ab0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003ab2:	4b07      	ldr	r3, [pc, #28]	; (8003ad0 <vTaskStartScheduler+0x6c>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003ab8:	f001 ff0e 	bl	80058d8 <xPortStartScheduler>
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
 8003abc:	3708      	adds	r7, #8
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	0800422d 	.word	0x0800422d
 8003ac8:	08005f78 	.word	0x08005f78
 8003acc:	2000019c 	.word	0x2000019c
 8003ad0:	20000194 	.word	0x20000194

08003ad4 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ade:	f383 8811 	msr	BASEPRI, r3
 8003ae2:	f3bf 8f6f 	isb	sy
 8003ae6:	f3bf 8f4f 	dsb	sy
 8003aea:	607b      	str	r3, [r7, #4]
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
	xSchedulerRunning = pdFALSE;
 8003aec:	4b03      	ldr	r3, [pc, #12]	; (8003afc <vTaskEndScheduler+0x28>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
 8003af2:	f001 ff19 	bl	8005928 <vPortEndScheduler>
}
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	2000019c 	.word	0x2000019c

08003b00 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003b00:	b480      	push	{r7}
 8003b02:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003b04:	4b04      	ldr	r3, [pc, #16]	; (8003b18 <vTaskSuspendAll+0x18>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	1c5a      	adds	r2, r3, #1
 8003b0a:	4b03      	ldr	r3, [pc, #12]	; (8003b18 <vTaskSuspendAll+0x18>)
 8003b0c:	601a      	str	r2, [r3, #0]
}
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	200001b0 	.word	0x200001b0

08003b1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
 8003b22:	2300      	movs	r3, #0
 8003b24:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003b26:	f001 ff05 	bl	8005934 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003b2a:	4b36      	ldr	r3, [pc, #216]	; (8003c04 <xTaskResumeAll+0xe8>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	1e5a      	subs	r2, r3, #1
 8003b30:	4b34      	ldr	r3, [pc, #208]	; (8003c04 <xTaskResumeAll+0xe8>)
 8003b32:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b34:	4b33      	ldr	r3, [pc, #204]	; (8003c04 <xTaskResumeAll+0xe8>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d15b      	bne.n	8003bf4 <xTaskResumeAll+0xd8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003b3c:	4b32      	ldr	r3, [pc, #200]	; (8003c08 <xTaskResumeAll+0xec>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d057      	beq.n	8003bf4 <xTaskResumeAll+0xd8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b44:	e02e      	b.n	8003ba4 <xTaskResumeAll+0x88>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003b46:	4b31      	ldr	r3, [pc, #196]	; (8003c0c <xTaskResumeAll+0xf0>)
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	3318      	adds	r3, #24
 8003b52:	4618      	mov	r0, r3
 8003b54:	f001 fe38 	bl	80057c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	3304      	adds	r3, #4
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f001 fe33 	bl	80057c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b66:	2201      	movs	r2, #1
 8003b68:	409a      	lsls	r2, r3
 8003b6a:	4b29      	ldr	r3, [pc, #164]	; (8003c10 <xTaskResumeAll+0xf4>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	4b27      	ldr	r3, [pc, #156]	; (8003c10 <xTaskResumeAll+0xf4>)
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b78:	4613      	mov	r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	4413      	add	r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	4a24      	ldr	r2, [pc, #144]	; (8003c14 <xTaskResumeAll+0xf8>)
 8003b82:	441a      	add	r2, r3
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	3304      	adds	r3, #4
 8003b88:	4610      	mov	r0, r2
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	f001 fdc0 	bl	8005710 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b94:	4b20      	ldr	r3, [pc, #128]	; (8003c18 <xTaskResumeAll+0xfc>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d302      	bcc.n	8003ba4 <xTaskResumeAll+0x88>
					{
						xYieldPending = pdTRUE;
 8003b9e:	4b1f      	ldr	r3, [pc, #124]	; (8003c1c <xTaskResumeAll+0x100>)
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ba4:	4b19      	ldr	r3, [pc, #100]	; (8003c0c <xTaskResumeAll+0xf0>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1cc      	bne.n	8003b46 <xTaskResumeAll+0x2a>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 8003bac:	4b1c      	ldr	r3, [pc, #112]	; (8003c20 <xTaskResumeAll+0x104>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d011      	beq.n	8003bd8 <xTaskResumeAll+0xbc>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 8003bb4:	e00c      	b.n	8003bd0 <xTaskResumeAll+0xb4>
					{
						if( xTaskIncrementTick() != pdFALSE )
 8003bb6:	f000 f865 	bl	8003c84 <xTaskIncrementTick>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d002      	beq.n	8003bc6 <xTaskResumeAll+0xaa>
						{
							xYieldPending = pdTRUE;
 8003bc0:	4b16      	ldr	r3, [pc, #88]	; (8003c1c <xTaskResumeAll+0x100>)
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	601a      	str	r2, [r3, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
 8003bc6:	4b16      	ldr	r3, [pc, #88]	; (8003c20 <xTaskResumeAll+0x104>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	1e5a      	subs	r2, r3, #1
 8003bcc:	4b14      	ldr	r3, [pc, #80]	; (8003c20 <xTaskResumeAll+0x104>)
 8003bce:	601a      	str	r2, [r3, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 8003bd0:	4b13      	ldr	r3, [pc, #76]	; (8003c20 <xTaskResumeAll+0x104>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1ee      	bne.n	8003bb6 <xTaskResumeAll+0x9a>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
 8003bd8:	4b10      	ldr	r3, [pc, #64]	; (8003c1c <xTaskResumeAll+0x100>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d109      	bne.n	8003bf4 <xTaskResumeAll+0xd8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003be0:	2301      	movs	r3, #1
 8003be2:	607b      	str	r3, [r7, #4]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003be4:	4b0f      	ldr	r3, [pc, #60]	; (8003c24 <xTaskResumeAll+0x108>)
 8003be6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bea:	601a      	str	r2, [r3, #0]
 8003bec:	f3bf 8f4f 	dsb	sy
 8003bf0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003bf4:	f001 feb6 	bl	8005964 <vPortExitCritical>

	return xAlreadyYielded;
 8003bf8:	687b      	ldr	r3, [r7, #4]
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	200001b0 	.word	0x200001b0
 8003c08:	20000190 	.word	0x20000190
 8003c0c:	20000150 	.word	0x20000150
 8003c10:	20000198 	.word	0x20000198
 8003c14:	200000bc 	.word	0x200000bc
 8003c18:	200000b8 	.word	0x200000b8
 8003c1c:	200001a4 	.word	0x200001a4
 8003c20:	200001a0 	.word	0x200001a0
 8003c24:	e000ed04 	.word	0xe000ed04

08003c28 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003c2e:	4b05      	ldr	r3, [pc, #20]	; (8003c44 <xTaskGetTickCount+0x1c>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003c34:	687b      	ldr	r3, [r7, #4]
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	20000194 	.word	0x20000194

08003c48 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003c4e:	2300      	movs	r3, #0
 8003c50:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8003c52:	4b05      	ldr	r3, [pc, #20]	; (8003c68 <xTaskGetTickCountFromISR+0x20>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003c58:	683b      	ldr	r3, [r7, #0]
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	20000194 	.word	0x20000194

08003c6c <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
 8003c70:	4b03      	ldr	r3, [pc, #12]	; (8003c80 <uxTaskGetNumberOfTasks+0x14>)
 8003c72:	681b      	ldr	r3, [r3, #0]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	20000190 	.word	0x20000190

08003c84 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c8e:	4b49      	ldr	r3, [pc, #292]	; (8003db4 <xTaskIncrementTick+0x130>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d17d      	bne.n	8003d92 <xTaskIncrementTick+0x10e>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 8003c96:	4b48      	ldr	r3, [pc, #288]	; (8003db8 <xTaskIncrementTick+0x134>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	1c5a      	adds	r2, r3, #1
 8003c9c:	4b46      	ldr	r3, [pc, #280]	; (8003db8 <xTaskIncrementTick+0x134>)
 8003c9e:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8003ca0:	4b45      	ldr	r3, [pc, #276]	; (8003db8 <xTaskIncrementTick+0x134>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	613b      	str	r3, [r7, #16]

			if( xConstTickCount == ( TickType_t ) 0U )
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d110      	bne.n	8003cce <xTaskIncrementTick+0x4a>
			{
				taskSWITCH_DELAYED_LISTS();
 8003cac:	4b43      	ldr	r3, [pc, #268]	; (8003dbc <xTaskIncrementTick+0x138>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	60fb      	str	r3, [r7, #12]
 8003cb2:	4b43      	ldr	r3, [pc, #268]	; (8003dc0 <xTaskIncrementTick+0x13c>)
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	4b41      	ldr	r3, [pc, #260]	; (8003dbc <xTaskIncrementTick+0x138>)
 8003cb8:	601a      	str	r2, [r3, #0]
 8003cba:	4b41      	ldr	r3, [pc, #260]	; (8003dc0 <xTaskIncrementTick+0x13c>)
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	4b40      	ldr	r3, [pc, #256]	; (8003dc4 <xTaskIncrementTick+0x140>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	1c5a      	adds	r2, r3, #1
 8003cc6:	4b3f      	ldr	r3, [pc, #252]	; (8003dc4 <xTaskIncrementTick+0x140>)
 8003cc8:	601a      	str	r2, [r3, #0]
 8003cca:	f000 fc11 	bl	80044f0 <prvResetNextTaskUnblockTime>

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 8003cce:	4b3e      	ldr	r3, [pc, #248]	; (8003dc8 <xTaskIncrementTick+0x144>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d34d      	bcc.n	8003d74 <xTaskIncrementTick+0xf0>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cd8:	4b38      	ldr	r3, [pc, #224]	; (8003dbc <xTaskIncrementTick+0x138>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <xTaskIncrementTick+0x62>
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e000      	b.n	8003ce8 <xTaskIncrementTick+0x64>
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d004      	beq.n	8003cf6 <xTaskIncrementTick+0x72>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 8003cec:	4b36      	ldr	r3, [pc, #216]	; (8003dc8 <xTaskIncrementTick+0x144>)
 8003cee:	f04f 32ff 	mov.w	r2, #4294967295
 8003cf2:	601a      	str	r2, [r3, #0]
						break;
 8003cf4:	e03e      	b.n	8003d74 <xTaskIncrementTick+0xf0>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003cf6:	4b31      	ldr	r3, [pc, #196]	; (8003dbc <xTaskIncrementTick+0x138>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	60bb      	str	r3, [r7, #8]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	607b      	str	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d203      	bcs.n	8003d16 <xTaskIncrementTick+0x92>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
 8003d0e:	4b2e      	ldr	r3, [pc, #184]	; (8003dc8 <xTaskIncrementTick+0x144>)
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	601a      	str	r2, [r3, #0]
							break;
 8003d14:	e02e      	b.n	8003d74 <xTaskIncrementTick+0xf0>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	3304      	adds	r3, #4
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f001 fd54 	bl	80057c8 <uxListRemove>

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d004      	beq.n	8003d32 <xTaskIncrementTick+0xae>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	3318      	adds	r3, #24
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f001 fd4b 	bl	80057c8 <uxListRemove>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d36:	2201      	movs	r2, #1
 8003d38:	409a      	lsls	r2, r3
 8003d3a:	4b24      	ldr	r3, [pc, #144]	; (8003dcc <xTaskIncrementTick+0x148>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	4b22      	ldr	r3, [pc, #136]	; (8003dcc <xTaskIncrementTick+0x148>)
 8003d42:	601a      	str	r2, [r3, #0]
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d48:	4613      	mov	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4413      	add	r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	4a1f      	ldr	r2, [pc, #124]	; (8003dd0 <xTaskIncrementTick+0x14c>)
 8003d52:	441a      	add	r2, r3
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	3304      	adds	r3, #4
 8003d58:	4610      	mov	r0, r2
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	f001 fcd8 	bl	8005710 <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d64:	4b1b      	ldr	r3, [pc, #108]	; (8003dd4 <xTaskIncrementTick+0x150>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d301      	bcc.n	8003d72 <xTaskIncrementTick+0xee>
							{
								xSwitchRequired = pdTRUE;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	617b      	str	r3, [r7, #20]
								mtCOVERAGE_TEST_MARKER();
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
 8003d72:	e7b1      	b.n	8003cd8 <xTaskIncrementTick+0x54>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d74:	4b17      	ldr	r3, [pc, #92]	; (8003dd4 <xTaskIncrementTick+0x150>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d7a:	4915      	ldr	r1, [pc, #84]	; (8003dd0 <xTaskIncrementTick+0x14c>)
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	4413      	add	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	440b      	add	r3, r1
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d907      	bls.n	8003d9c <xTaskIncrementTick+0x118>
			{
				xSwitchRequired = pdTRUE;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	617b      	str	r3, [r7, #20]
 8003d90:	e004      	b.n	8003d9c <xTaskIncrementTick+0x118>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003d92:	4b11      	ldr	r3, [pc, #68]	; (8003dd8 <xTaskIncrementTick+0x154>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	1c5a      	adds	r2, r3, #1
 8003d98:	4b0f      	ldr	r3, [pc, #60]	; (8003dd8 <xTaskIncrementTick+0x154>)
 8003d9a:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003d9c:	4b0f      	ldr	r3, [pc, #60]	; (8003ddc <xTaskIncrementTick+0x158>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d001      	beq.n	8003da8 <xTaskIncrementTick+0x124>
		{
			xSwitchRequired = pdTRUE;
 8003da4:	2301      	movs	r3, #1
 8003da6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003da8:	697b      	ldr	r3, [r7, #20]
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3718      	adds	r7, #24
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	200001b0 	.word	0x200001b0
 8003db8:	20000194 	.word	0x20000194
 8003dbc:	20000148 	.word	0x20000148
 8003dc0:	2000014c 	.word	0x2000014c
 8003dc4:	200001a8 	.word	0x200001a8
 8003dc8:	2000004c 	.word	0x2000004c
 8003dcc:	20000198 	.word	0x20000198
 8003dd0:	200000bc 	.word	0x200000bc
 8003dd4:	200000b8 	.word	0x200000b8
 8003dd8:	200001a0 	.word	0x200001a0
 8003ddc:	200001a4 	.word	0x200001a4

08003de0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003de6:	4b2d      	ldr	r3, [pc, #180]	; (8003e9c <vTaskSwitchContext+0xbc>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003dee:	4b2c      	ldr	r3, [pc, #176]	; (8003ea0 <vTaskSwitchContext+0xc0>)
 8003df0:	2201      	movs	r2, #1
 8003df2:	601a      	str	r2, [r3, #0]
 8003df4:	e04f      	b.n	8003e96 <vTaskSwitchContext+0xb6>
	}
	else
	{
		xYieldPending = pdFALSE;
 8003df6:	4b2a      	ldr	r3, [pc, #168]	; (8003ea0 <vTaskSwitchContext+0xc0>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 8003dfc:	4b29      	ldr	r3, [pc, #164]	; (8003ea4 <vTaskSwitchContext+0xc4>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	4b28      	ldr	r3, [pc, #160]	; (8003ea4 <vTaskSwitchContext+0xc4>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d808      	bhi.n	8003e1e <vTaskSwitchContext+0x3e>
 8003e0c:	4b25      	ldr	r3, [pc, #148]	; (8003ea4 <vTaskSwitchContext+0xc4>)
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	4b24      	ldr	r3, [pc, #144]	; (8003ea4 <vTaskSwitchContext+0xc4>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	3334      	adds	r3, #52	; 0x34
 8003e16:	4610      	mov	r0, r2
 8003e18:	4619      	mov	r1, r3
 8003e1a:	f7fd f9a3 	bl	8001164 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 8003e1e:	4b21      	ldr	r3, [pc, #132]	; (8003ea4 <vTaskSwitchContext+0xc4>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e24:	4618      	mov	r0, r3
 8003e26:	4920      	ldr	r1, [pc, #128]	; (8003ea8 <vTaskSwitchContext+0xc8>)
 8003e28:	2214      	movs	r2, #20
 8003e2a:	f002 f81f 	bl	8005e6c <memcmp>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d008      	beq.n	8003e46 <vTaskSwitchContext+0x66>
 8003e34:	4b1b      	ldr	r3, [pc, #108]	; (8003ea4 <vTaskSwitchContext+0xc4>)
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	4b1a      	ldr	r3, [pc, #104]	; (8003ea4 <vTaskSwitchContext+0xc4>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	3334      	adds	r3, #52	; 0x34
 8003e3e:	4610      	mov	r0, r2
 8003e40:	4619      	mov	r1, r3
 8003e42:	f7fd f98f 	bl	8001164 <vApplicationStackOverflowHook>

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003e46:	4b19      	ldr	r3, [pc, #100]	; (8003eac <vTaskSwitchContext+0xcc>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	607b      	str	r3, [r7, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	fab3 f383 	clz	r3, r3
 8003e52:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 8003e54:	78fb      	ldrb	r3, [r7, #3]
 8003e56:	f1c3 031f 	rsb	r3, r3, #31
 8003e5a:	60fb      	str	r3, [r7, #12]
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	4413      	add	r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	4a12      	ldr	r2, [pc, #72]	; (8003eb0 <vTaskSwitchContext+0xd0>)
 8003e68:	4413      	add	r3, r2
 8003e6a:	60bb      	str	r3, [r7, #8]
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	685a      	ldr	r2, [r3, #4]
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	605a      	str	r2, [r3, #4]
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	685a      	ldr	r2, [r3, #4]
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	3308      	adds	r3, #8
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d104      	bne.n	8003e8c <vTaskSwitchContext+0xac>
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	605a      	str	r2, [r3, #4]
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	68da      	ldr	r2, [r3, #12]
 8003e92:	4b04      	ldr	r3, [pc, #16]	; (8003ea4 <vTaskSwitchContext+0xc4>)
 8003e94:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003e96:	3710      	adds	r7, #16
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	200001b0 	.word	0x200001b0
 8003ea0:	200001a4 	.word	0x200001a4
 8003ea4:	200000b8 	.word	0x200000b8
 8003ea8:	08005f80 	.word	0x08005f80
 8003eac:	20000198 	.word	0x20000198
 8003eb0:	200000bc 	.word	0x200000bc

08003eb4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ebe:	4b19      	ldr	r3, [pc, #100]	; (8003f24 <vTaskPlaceOnEventList+0x70>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	3318      	adds	r3, #24
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	f001 fc46 	bl	8005758 <vListInsert>

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8003ecc:	4b15      	ldr	r3, [pc, #84]	; (8003f24 <vTaskPlaceOnEventList+0x70>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	3304      	adds	r3, #4
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f001 fc78 	bl	80057c8 <uxListRemove>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10b      	bne.n	8003ef6 <vTaskPlaceOnEventList+0x42>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003ede:	4b11      	ldr	r3, [pc, #68]	; (8003f24 <vTaskPlaceOnEventList+0x70>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eea:	43da      	mvns	r2, r3
 8003eec:	4b0e      	ldr	r3, [pc, #56]	; (8003f28 <vTaskPlaceOnEventList+0x74>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	401a      	ands	r2, r3
 8003ef2:	4b0d      	ldr	r3, [pc, #52]	; (8003f28 <vTaskPlaceOnEventList+0x74>)
 8003ef4:	601a      	str	r2, [r3, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003efc:	d107      	bne.n	8003f0e <vTaskPlaceOnEventList+0x5a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8003efe:	4b09      	ldr	r3, [pc, #36]	; (8003f24 <vTaskPlaceOnEventList+0x70>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	3304      	adds	r3, #4
 8003f04:	4809      	ldr	r0, [pc, #36]	; (8003f2c <vTaskPlaceOnEventList+0x78>)
 8003f06:	4619      	mov	r1, r3
 8003f08:	f001 fc02 	bl	8005710 <vListInsertEnd>
 8003f0c:	e007      	b.n	8003f1e <vTaskPlaceOnEventList+0x6a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
 8003f0e:	4b08      	ldr	r3, [pc, #32]	; (8003f30 <vTaskPlaceOnEventList+0x7c>)
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	4413      	add	r3, r2
 8003f16:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f000 fa6b 	bl	80043f4 <prvAddCurrentTaskToDelayedList>
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	200000b8 	.word	0x200000b8
 8003f28:	20000198 	.word	0x20000198
 8003f2c:	2000017c 	.word	0x2000017c
 8003f30:	20000194 	.word	0x20000194

08003f34 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b086      	sub	sp, #24
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8003f40:	4b1c      	ldr	r3, [pc, #112]	; (8003fb4 <vTaskPlaceOnUnorderedEventList+0x80>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68ba      	ldr	r2, [r7, #8]
 8003f46:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003f4a:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f4c:	4b19      	ldr	r3, [pc, #100]	; (8003fb4 <vTaskPlaceOnUnorderedEventList+0x80>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	3318      	adds	r3, #24
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	4619      	mov	r1, r3
 8003f56:	f001 fbdb 	bl	8005710 <vListInsertEnd>

	/* The task must be removed from the ready list before it is added to the
	blocked list.  Exclusive access can be assured to the ready list as the
	scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8003f5a:	4b16      	ldr	r3, [pc, #88]	; (8003fb4 <vTaskPlaceOnUnorderedEventList+0x80>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	3304      	adds	r3, #4
 8003f60:	4618      	mov	r0, r3
 8003f62:	f001 fc31 	bl	80057c8 <uxListRemove>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d10b      	bne.n	8003f84 <vTaskPlaceOnUnorderedEventList+0x50>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003f6c:	4b11      	ldr	r3, [pc, #68]	; (8003fb4 <vTaskPlaceOnUnorderedEventList+0x80>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f72:	2201      	movs	r2, #1
 8003f74:	fa02 f303 	lsl.w	r3, r2, r3
 8003f78:	43da      	mvns	r2, r3
 8003f7a:	4b0f      	ldr	r3, [pc, #60]	; (8003fb8 <vTaskPlaceOnUnorderedEventList+0x84>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	401a      	ands	r2, r3
 8003f80:	4b0d      	ldr	r3, [pc, #52]	; (8003fb8 <vTaskPlaceOnUnorderedEventList+0x84>)
 8003f82:	601a      	str	r2, [r3, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f8a:	d107      	bne.n	8003f9c <vTaskPlaceOnUnorderedEventList+0x68>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8003f8c:	4b09      	ldr	r3, [pc, #36]	; (8003fb4 <vTaskPlaceOnUnorderedEventList+0x80>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	3304      	adds	r3, #4
 8003f92:	480a      	ldr	r0, [pc, #40]	; (8003fbc <vTaskPlaceOnUnorderedEventList+0x88>)
 8003f94:	4619      	mov	r1, r3
 8003f96:	f001 fbbb 	bl	8005710 <vListInsertEnd>
 8003f9a:	e007      	b.n	8003fac <vTaskPlaceOnUnorderedEventList+0x78>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xTickCount + xTicksToWait;
 8003f9c:	4b08      	ldr	r3, [pc, #32]	; (8003fc0 <vTaskPlaceOnUnorderedEventList+0x8c>)
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	617b      	str	r3, [r7, #20]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 8003fa6:	6978      	ldr	r0, [r7, #20]
 8003fa8:	f000 fa24 	bl	80043f4 <prvAddCurrentTaskToDelayedList>
			will manage it correctly. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003fac:	3718      	adds	r7, #24
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	200000b8 	.word	0x200000b8
 8003fb8:	20000198 	.word	0x20000198
 8003fbc:	2000017c 	.word	0x2000017c
 8003fc0:	20000194 	.word	0x20000194

08003fc4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003fce:	4b13      	ldr	r3, [pc, #76]	; (800401c <vTaskPlaceOnEventListRestricted+0x58>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	3318      	adds	r3, #24
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	f001 fb9a 	bl	8005710 <vListInsertEnd>

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8003fdc:	4b0f      	ldr	r3, [pc, #60]	; (800401c <vTaskPlaceOnEventListRestricted+0x58>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	3304      	adds	r3, #4
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f001 fbf0 	bl	80057c8 <uxListRemove>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10b      	bne.n	8004006 <vTaskPlaceOnEventListRestricted+0x42>
		{
			/* The current task must be in a ready list, so there is no need to
			check, and the port reset macro can be called directly. */
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003fee:	4b0b      	ldr	r3, [pc, #44]	; (800401c <vTaskPlaceOnEventListRestricted+0x58>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffa:	43da      	mvns	r2, r3
 8003ffc:	4b08      	ldr	r3, [pc, #32]	; (8004020 <vTaskPlaceOnEventListRestricted+0x5c>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	401a      	ands	r2, r3
 8004002:	4b07      	ldr	r3, [pc, #28]	; (8004020 <vTaskPlaceOnEventListRestricted+0x5c>)
 8004004:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
 8004006:	4b07      	ldr	r3, [pc, #28]	; (8004024 <vTaskPlaceOnEventListRestricted+0x60>)
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	4413      	add	r3, r2
 800400e:	60fb      	str	r3, [r7, #12]

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f000 f9ef 	bl	80043f4 <prvAddCurrentTaskToDelayedList>
	}
 8004016:	3710      	adds	r7, #16
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	200000b8 	.word	0x200000b8
 8004020:	20000198 	.word	0x20000198
 8004024:	20000194 	.word	0x20000194

08004028 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	3318      	adds	r3, #24
 800403c:	4618      	mov	r0, r3
 800403e:	f001 fbc3 	bl	80057c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004042:	4b1d      	ldr	r3, [pc, #116]	; (80040b8 <xTaskRemoveFromEventList+0x90>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d11c      	bne.n	8004084 <xTaskRemoveFromEventList+0x5c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	3304      	adds	r3, #4
 800404e:	4618      	mov	r0, r3
 8004050:	f001 fbba 	bl	80057c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004058:	2201      	movs	r2, #1
 800405a:	409a      	lsls	r2, r3
 800405c:	4b17      	ldr	r3, [pc, #92]	; (80040bc <xTaskRemoveFromEventList+0x94>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	431a      	orrs	r2, r3
 8004062:	4b16      	ldr	r3, [pc, #88]	; (80040bc <xTaskRemoveFromEventList+0x94>)
 8004064:	601a      	str	r2, [r3, #0]
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800406a:	4613      	mov	r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4413      	add	r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	4a13      	ldr	r2, [pc, #76]	; (80040c0 <xTaskRemoveFromEventList+0x98>)
 8004074:	441a      	add	r2, r3
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	3304      	adds	r3, #4
 800407a:	4610      	mov	r0, r2
 800407c:	4619      	mov	r1, r3
 800407e:	f001 fb47 	bl	8005710 <vListInsertEnd>
 8004082:	e005      	b.n	8004090 <xTaskRemoveFromEventList+0x68>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	3318      	adds	r3, #24
 8004088:	480e      	ldr	r0, [pc, #56]	; (80040c4 <xTaskRemoveFromEventList+0x9c>)
 800408a:	4619      	mov	r1, r3
 800408c:	f001 fb40 	bl	8005710 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004094:	4b0c      	ldr	r3, [pc, #48]	; (80040c8 <xTaskRemoveFromEventList+0xa0>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409a:	429a      	cmp	r2, r3
 800409c:	d905      	bls.n	80040aa <xTaskRemoveFromEventList+0x82>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800409e:	2301      	movs	r3, #1
 80040a0:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80040a2:	4b0a      	ldr	r3, [pc, #40]	; (80040cc <xTaskRemoveFromEventList+0xa4>)
 80040a4:	2201      	movs	r2, #1
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	e001      	b.n	80040ae <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		xReturn = pdFALSE;
 80040aa:	2300      	movs	r3, #0
 80040ac:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80040ae:	68fb      	ldr	r3, [r7, #12]
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3710      	adds	r7, #16
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	200001b0 	.word	0x200001b0
 80040bc:	20000198 	.word	0x20000198
 80040c0:	200000bc 	.word	0x200000bc
 80040c4:	20000150 	.word	0x20000150
 80040c8:	200000b8 	.word	0x200000b8
 80040cc:	200001a4 	.word	0x200001a4

080040d0 <xTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f001 fb6c 	bl	80057c8 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	3304      	adds	r3, #4
 80040f4:	4618      	mov	r0, r3
 80040f6:	f001 fb67 	bl	80057c8 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fe:	2201      	movs	r2, #1
 8004100:	409a      	lsls	r2, r3
 8004102:	4b13      	ldr	r3, [pc, #76]	; (8004150 <xTaskRemoveFromUnorderedEventList+0x80>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	431a      	orrs	r2, r3
 8004108:	4b11      	ldr	r3, [pc, #68]	; (8004150 <xTaskRemoveFromUnorderedEventList+0x80>)
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004110:	4613      	mov	r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	4413      	add	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4a0e      	ldr	r2, [pc, #56]	; (8004154 <xTaskRemoveFromUnorderedEventList+0x84>)
 800411a:	441a      	add	r2, r3
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	3304      	adds	r3, #4
 8004120:	4610      	mov	r0, r2
 8004122:	4619      	mov	r1, r3
 8004124:	f001 faf4 	bl	8005710 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800412c:	4b0a      	ldr	r3, [pc, #40]	; (8004158 <xTaskRemoveFromUnorderedEventList+0x88>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004132:	429a      	cmp	r2, r3
 8004134:	d905      	bls.n	8004142 <xTaskRemoveFromUnorderedEventList+0x72>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
 8004136:	2301      	movs	r3, #1
 8004138:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800413a:	4b08      	ldr	r3, [pc, #32]	; (800415c <xTaskRemoveFromUnorderedEventList+0x8c>)
 800413c:	2201      	movs	r2, #1
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	e001      	b.n	8004146 <xTaskRemoveFromUnorderedEventList+0x76>
	}
	else
	{
		xReturn = pdFALSE;
 8004142:	2300      	movs	r3, #0
 8004144:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8004146:	68fb      	ldr	r3, [r7, #12]
}
 8004148:	4618      	mov	r0, r3
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	20000198 	.word	0x20000198
 8004154:	200000bc 	.word	0x200000bc
 8004158:	200000b8 	.word	0x200000b8
 800415c:	200001a4 	.word	0x200001a4

08004160 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004168:	4b06      	ldr	r3, [pc, #24]	; (8004184 <vTaskSetTimeOutState+0x24>)
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004170:	4b05      	ldr	r3, [pc, #20]	; (8004188 <vTaskSetTimeOutState+0x28>)
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	605a      	str	r2, [r3, #4]
}
 8004178:	370c      	adds	r7, #12
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	200001a8 	.word	0x200001a8
 8004188:	20000194 	.word	0x20000194

0800418c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 8004196:	f001 fbcd 	bl	8005934 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800419a:	4b1c      	ldr	r3, [pc, #112]	; (800420c <xTaskCheckForTimeOut+0x80>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	60bb      	str	r3, [r7, #8]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a8:	d102      	bne.n	80041b0 <xTaskCheckForTimeOut+0x24>
			{
				xReturn = pdFALSE;
 80041aa:	2300      	movs	r3, #0
 80041ac:	60fb      	str	r3, [r7, #12]
 80041ae:	e026      	b.n	80041fe <xTaskCheckForTimeOut+0x72>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	4b16      	ldr	r3, [pc, #88]	; (8004210 <xTaskCheckForTimeOut+0x84>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d007      	beq.n	80041cc <xTaskCheckForTimeOut+0x40>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685a      	ldr	r2, [r3, #4]
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d802      	bhi.n	80041cc <xTaskCheckForTimeOut+0x40>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 80041c6:	2301      	movs	r3, #1
 80041c8:	60fb      	str	r3, [r7, #12]
 80041ca:	e018      	b.n	80041fe <xTaskCheckForTimeOut+0x72>
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	1ad2      	subs	r2, r2, r3
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d20e      	bcs.n	80041fa <xTaskCheckForTimeOut+0x6e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6859      	ldr	r1, [r3, #4]
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	1acb      	subs	r3, r1, r3
 80041e8:	441a      	add	r2, r3
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7ff ffb6 	bl	8004160 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 80041f4:	2300      	movs	r3, #0
 80041f6:	60fb      	str	r3, [r7, #12]
 80041f8:	e001      	b.n	80041fe <xTaskCheckForTimeOut+0x72>
		}
		else
		{
			xReturn = pdTRUE;
 80041fa:	2301      	movs	r3, #1
 80041fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80041fe:	f001 fbb1 	bl	8005964 <vPortExitCritical>

	return xReturn;
 8004202:	68fb      	ldr	r3, [r7, #12]
}
 8004204:	4618      	mov	r0, r3
 8004206:	3710      	adds	r7, #16
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	20000194 	.word	0x20000194
 8004210:	200001a8 	.word	0x200001a8

08004214 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004218:	4b03      	ldr	r3, [pc, #12]	; (8004228 <vTaskMissedYield+0x14>)
 800421a:	2201      	movs	r2, #1
 800421c:	601a      	str	r2, [r3, #0]
}
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	200001a4 	.word	0x200001a4

0800422c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
 8004234:	f000 f8a4 	bl	8004380 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004238:	4b07      	ldr	r3, [pc, #28]	; (8004258 <prvIdleTask+0x2c>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d907      	bls.n	8004250 <prvIdleTask+0x24>
			{
				taskYIELD();
 8004240:	4b06      	ldr	r3, [pc, #24]	; (800425c <prvIdleTask+0x30>)
 8004242:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	f3bf 8f4f 	dsb	sy
 800424c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8004250:	f7fc ff8e 	bl	8001170 <vApplicationIdleHook>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 8004254:	e7ee      	b.n	8004234 <prvIdleTask+0x8>
 8004256:	bf00      	nop
 8004258:	200000bc 	.word	0x200000bc
 800425c:	e000ed04 	.word	0xe000ed04

08004260 <prvInitialiseTCBVariables>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
 800426c:	603b      	str	r3, [r7, #0]
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800426e:	2300      	movs	r3, #0
 8004270:	617b      	str	r3, [r7, #20]
 8004272:	e012      	b.n	800429a <prvInitialiseTCBVariables+0x3a>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8004274:	68ba      	ldr	r2, [r7, #8]
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	4413      	add	r3, r2
 800427a:	781a      	ldrb	r2, [r3, #0]
 800427c:	68f9      	ldr	r1, [r7, #12]
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	440b      	add	r3, r1
 8004282:	3330      	adds	r3, #48	; 0x30
 8004284:	711a      	strb	r2, [r3, #4]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	4413      	add	r3, r2
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d100      	bne.n	8004294 <prvInitialiseTCBVariables+0x34>
		{
			break;
 8004292:	e005      	b.n	80042a0 <prvInitialiseTCBVariables+0x40>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	3301      	adds	r3, #1
 8004298:	617b      	str	r3, [r7, #20]
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	2b09      	cmp	r3, #9
 800429e:	d9e9      	bls.n	8004274 <prvInitialiseTCBVariables+0x14>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b04      	cmp	r3, #4
 80042ac:	d901      	bls.n	80042b2 <prvInitialiseTCBVariables+0x52>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80042ae:	2304      	movs	r3, #4
 80042b0:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	641a      	str	r2, [r3, #64]	; 0x40
		pxTCB->uxMutexesHeld = 0;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	3304      	adds	r3, #4
 80042c8:	4618      	mov	r0, r3
 80042ca:	f001 fa15 	bl	80056f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	3318      	adds	r3, #24
 80042d2:	4618      	mov	r0, r3
 80042d4:	f001 fa10 	bl	80056f8 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f1c3 0205 	rsb	r2, r3, #5
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	68fa      	ldr	r2, [r7, #12]
 80042ec:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portUSING_MPU_WRAPPERS */

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	649a      	str	r2, [r3, #72]	; 0x48
		pxTCB->eNotifyState = eNotWaitingNotification;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
 80042fc:	3718      	adds	r7, #24
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop

08004304 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800430a:	2300      	movs	r3, #0
 800430c:	607b      	str	r3, [r7, #4]
 800430e:	e00c      	b.n	800432a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	4613      	mov	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	4413      	add	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	4a11      	ldr	r2, [pc, #68]	; (8004360 <prvInitialiseTaskLists+0x5c>)
 800431c:	4413      	add	r3, r2
 800431e:	4618      	mov	r0, r3
 8004320:	f001 f9ca 	bl	80056b8 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3301      	adds	r3, #1
 8004328:	607b      	str	r3, [r7, #4]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2b04      	cmp	r3, #4
 800432e:	d9ef      	bls.n	8004310 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8004330:	480c      	ldr	r0, [pc, #48]	; (8004364 <prvInitialiseTaskLists+0x60>)
 8004332:	f001 f9c1 	bl	80056b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004336:	480c      	ldr	r0, [pc, #48]	; (8004368 <prvInitialiseTaskLists+0x64>)
 8004338:	f001 f9be 	bl	80056b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800433c:	480b      	ldr	r0, [pc, #44]	; (800436c <prvInitialiseTaskLists+0x68>)
 800433e:	f001 f9bb 	bl	80056b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004342:	480b      	ldr	r0, [pc, #44]	; (8004370 <prvInitialiseTaskLists+0x6c>)
 8004344:	f001 f9b8 	bl	80056b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004348:	480a      	ldr	r0, [pc, #40]	; (8004374 <prvInitialiseTaskLists+0x70>)
 800434a:	f001 f9b5 	bl	80056b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800434e:	4b0a      	ldr	r3, [pc, #40]	; (8004378 <prvInitialiseTaskLists+0x74>)
 8004350:	4a04      	ldr	r2, [pc, #16]	; (8004364 <prvInitialiseTaskLists+0x60>)
 8004352:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004354:	4b09      	ldr	r3, [pc, #36]	; (800437c <prvInitialiseTaskLists+0x78>)
 8004356:	4a04      	ldr	r2, [pc, #16]	; (8004368 <prvInitialiseTaskLists+0x64>)
 8004358:	601a      	str	r2, [r3, #0]
}
 800435a:	3708      	adds	r7, #8
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	200000bc 	.word	0x200000bc
 8004364:	20000120 	.word	0x20000120
 8004368:	20000134 	.word	0x20000134
 800436c:	20000150 	.word	0x20000150
 8004370:	20000164 	.word	0x20000164
 8004374:	2000017c 	.word	0x2000017c
 8004378:	20000148 	.word	0x20000148
 800437c:	2000014c 	.word	0x2000014c

08004380 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 8004386:	e028      	b.n	80043da <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8004388:	f7ff fbba 	bl	8003b00 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800438c:	4b16      	ldr	r3, [pc, #88]	; (80043e8 <prvCheckTasksWaitingTermination+0x68>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	bf14      	ite	ne
 8004394:	2300      	movne	r3, #0
 8004396:	2301      	moveq	r3, #1
 8004398:	b2db      	uxtb	r3, r3
 800439a:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 800439c:	f7ff fbbe 	bl	8003b1c <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d119      	bne.n	80043da <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 80043a6:	f001 fac5 	bl	8005934 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80043aa:	4b0f      	ldr	r3, [pc, #60]	; (80043e8 <prvCheckTasksWaitingTermination+0x68>)
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	3304      	adds	r3, #4
 80043b6:	4618      	mov	r0, r3
 80043b8:	f001 fa06 	bl	80057c8 <uxListRemove>
					--uxCurrentNumberOfTasks;
 80043bc:	4b0b      	ldr	r3, [pc, #44]	; (80043ec <prvCheckTasksWaitingTermination+0x6c>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	1e5a      	subs	r2, r3, #1
 80043c2:	4b0a      	ldr	r3, [pc, #40]	; (80043ec <prvCheckTasksWaitingTermination+0x6c>)
 80043c4:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
 80043c6:	4b0a      	ldr	r3, [pc, #40]	; (80043f0 <prvCheckTasksWaitingTermination+0x70>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	1e5a      	subs	r2, r3, #1
 80043cc:	4b08      	ldr	r3, [pc, #32]	; (80043f0 <prvCheckTasksWaitingTermination+0x70>)
 80043ce:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
 80043d0:	f001 fac8 	bl	8005964 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 80043d4:	6838      	ldr	r0, [r7, #0]
 80043d6:	f000 f87b 	bl	80044d0 <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 80043da:	4b05      	ldr	r3, [pc, #20]	; (80043f0 <prvCheckTasksWaitingTermination+0x70>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1d2      	bne.n	8004388 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
 80043e2:	3708      	adds	r7, #8
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	20000164 	.word	0x20000164
 80043ec:	20000190 	.word	0x20000190
 80043f0:	20000178 	.word	0x20000178

080043f4 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 80043fc:	4b13      	ldr	r3, [pc, #76]	; (800444c <prvAddCurrentTaskToDelayedList+0x58>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
 8004404:	4b12      	ldr	r3, [pc, #72]	; (8004450 <prvAddCurrentTaskToDelayedList+0x5c>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	429a      	cmp	r2, r3
 800440c:	d209      	bcs.n	8004422 <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800440e:	4b11      	ldr	r3, [pc, #68]	; (8004454 <prvAddCurrentTaskToDelayedList+0x60>)
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	4b0e      	ldr	r3, [pc, #56]	; (800444c <prvAddCurrentTaskToDelayedList+0x58>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	3304      	adds	r3, #4
 8004418:	4610      	mov	r0, r2
 800441a:	4619      	mov	r1, r3
 800441c:	f001 f99c 	bl	8005758 <vListInsert>
 8004420:	e010      	b.n	8004444 <prvAddCurrentTaskToDelayedList+0x50>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8004422:	4b0d      	ldr	r3, [pc, #52]	; (8004458 <prvAddCurrentTaskToDelayedList+0x64>)
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	4b09      	ldr	r3, [pc, #36]	; (800444c <prvAddCurrentTaskToDelayedList+0x58>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	3304      	adds	r3, #4
 800442c:	4610      	mov	r0, r2
 800442e:	4619      	mov	r1, r3
 8004430:	f001 f992 	bl	8005758 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 8004434:	4b09      	ldr	r3, [pc, #36]	; (800445c <prvAddCurrentTaskToDelayedList+0x68>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	429a      	cmp	r2, r3
 800443c:	d202      	bcs.n	8004444 <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
 800443e:	4b07      	ldr	r3, [pc, #28]	; (800445c <prvAddCurrentTaskToDelayedList+0x68>)
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004444:	3708      	adds	r7, #8
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	200000b8 	.word	0x200000b8
 8004450:	20000194 	.word	0x20000194
 8004454:	2000014c 	.word	0x2000014c
 8004458:	20000148 	.word	0x20000148
 800445c:	2000004c 	.word	0x2000004c

08004460 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	4603      	mov	r3, r0
 8004468:	6039      	str	r1, [r7, #0]
 800446a:	80fb      	strh	r3, [r7, #6]
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d106      	bne.n	8004480 <prvAllocateTCBAndStack+0x20>
 8004472:	88fb      	ldrh	r3, [r7, #6]
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4618      	mov	r0, r3
 8004478:	f001 fafc 	bl	8005a74 <pvPortMalloc>
 800447c:	4603      	mov	r3, r0
 800447e:	e000      	b.n	8004482 <prvAllocateTCBAndStack+0x22>
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	60bb      	str	r3, [r7, #8]

		if( pxStack != NULL )
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00e      	beq.n	80044a8 <prvAllocateTCBAndStack+0x48>
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800448a:	2050      	movs	r0, #80	; 0x50
 800448c:	f001 faf2 	bl	8005a74 <pvPortMalloc>
 8004490:	60f8      	str	r0, [r7, #12]

			if( pxNewTCB != NULL )
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d003      	beq.n	80044a0 <prvAllocateTCBAndStack+0x40>
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	631a      	str	r2, [r3, #48]	; 0x30
 800449e:	e005      	b.n	80044ac <prvAllocateTCBAndStack+0x4c>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
 80044a0:	68b8      	ldr	r0, [r7, #8]
 80044a2:	f001 fb7f 	bl	8005ba4 <vPortFree>
 80044a6:	e001      	b.n	80044ac <prvAllocateTCBAndStack+0x4c>
			}
		}
		else
		{
			pxNewTCB = NULL;
 80044a8:	2300      	movs	r3, #0
 80044aa:	60fb      	str	r3, [r7, #12]
		}
	}
	#endif /* portSTACK_GROWTH */

	if( pxNewTCB != NULL )
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d008      	beq.n	80044c4 <prvAllocateTCBAndStack+0x64>
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044b6:	88fb      	ldrh	r3, [r7, #6]
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4610      	mov	r0, r2
 80044bc:	21a5      	movs	r1, #165	; 0xa5
 80044be:	461a      	mov	r2, r3
 80044c0:	f001 fcec 	bl	8005e9c <memset>
		}
		#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
	}

	return pxNewTCB;
 80044c4:	68fb      	ldr	r3, [r7, #12]
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop

080044d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044dc:	4618      	mov	r0, r3
 80044de:	f001 fb61 	bl	8005ba4 <vPortFree>
		}
		#endif

		vPortFree( pxTCB );
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f001 fb5e 	bl	8005ba4 <vPortFree>
	}
 80044e8:	3708      	adds	r7, #8
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop

080044f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044f6:	4b0e      	ldr	r3, [pc, #56]	; (8004530 <prvResetNextTaskUnblockTime+0x40>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d101      	bne.n	8004504 <prvResetNextTaskUnblockTime+0x14>
 8004500:	2301      	movs	r3, #1
 8004502:	e000      	b.n	8004506 <prvResetNextTaskUnblockTime+0x16>
 8004504:	2300      	movs	r3, #0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d004      	beq.n	8004514 <prvResetNextTaskUnblockTime+0x24>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800450a:	4b0a      	ldr	r3, [pc, #40]	; (8004534 <prvResetNextTaskUnblockTime+0x44>)
 800450c:	f04f 32ff 	mov.w	r2, #4294967295
 8004510:	601a      	str	r2, [r3, #0]
 8004512:	e008      	b.n	8004526 <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004514:	4b06      	ldr	r3, [pc, #24]	; (8004530 <prvResetNextTaskUnblockTime+0x40>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685a      	ldr	r2, [r3, #4]
 8004522:	4b04      	ldr	r3, [pc, #16]	; (8004534 <prvResetNextTaskUnblockTime+0x44>)
 8004524:	601a      	str	r2, [r3, #0]
	}
}
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr
 8004530:	20000148 	.word	0x20000148
 8004534:	2000004c 	.word	0x2000004c

08004538 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800453e:	4b05      	ldr	r3, [pc, #20]	; (8004554 <xTaskGetCurrentTaskHandle+0x1c>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	607b      	str	r3, [r7, #4]

		return xReturn;
 8004544:	687b      	ldr	r3, [r7, #4]
	}
 8004546:	4618      	mov	r0, r3
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	200000b8 	.word	0x200000b8

08004558 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800455e:	4b0b      	ldr	r3, [pc, #44]	; (800458c <xTaskGetSchedulerState+0x34>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d102      	bne.n	800456c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004566:	2301      	movs	r3, #1
 8004568:	607b      	str	r3, [r7, #4]
 800456a:	e008      	b.n	800457e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800456c:	4b08      	ldr	r3, [pc, #32]	; (8004590 <xTaskGetSchedulerState+0x38>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d102      	bne.n	800457a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004574:	2302      	movs	r3, #2
 8004576:	607b      	str	r3, [r7, #4]
 8004578:	e001      	b.n	800457e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800457a:	2300      	movs	r3, #0
 800457c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800457e:	687b      	ldr	r3, [r7, #4]
	}
 8004580:	4618      	mov	r0, r3
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr
 800458c:	2000019c 	.word	0x2000019c
 8004590:	200001b0 	.word	0x200001b0

08004594 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d062      	beq.n	800466c <vTaskPriorityInherit+0xd8>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045aa:	4b32      	ldr	r3, [pc, #200]	; (8004674 <vTaskPriorityInherit+0xe0>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d25b      	bcs.n	800466c <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	db06      	blt.n	80045ca <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045bc:	4b2d      	ldr	r3, [pc, #180]	; (8004674 <vTaskPriorityInherit+0xe0>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c2:	f1c3 0205 	rsb	r2, r3, #5
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6959      	ldr	r1, [r3, #20]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d2:	4613      	mov	r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	4413      	add	r3, r2
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	4a27      	ldr	r2, [pc, #156]	; (8004678 <vTaskPriorityInherit+0xe4>)
 80045dc:	4413      	add	r3, r2
 80045de:	4299      	cmp	r1, r3
 80045e0:	d101      	bne.n	80045e6 <vTaskPriorityInherit+0x52>
 80045e2:	2301      	movs	r3, #1
 80045e4:	e000      	b.n	80045e8 <vTaskPriorityInherit+0x54>
 80045e6:	2300      	movs	r3, #0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d03a      	beq.n	8004662 <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	3304      	adds	r3, #4
 80045f0:	4618      	mov	r0, r3
 80045f2:	f001 f8e9 	bl	80057c8 <uxListRemove>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d115      	bne.n	8004628 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004600:	491d      	ldr	r1, [pc, #116]	; (8004678 <vTaskPriorityInherit+0xe4>)
 8004602:	4613      	mov	r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	4413      	add	r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	440b      	add	r3, r1
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d10a      	bne.n	8004628 <vTaskPriorityInherit+0x94>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004616:	2201      	movs	r2, #1
 8004618:	fa02 f303 	lsl.w	r3, r2, r3
 800461c:	43da      	mvns	r2, r3
 800461e:	4b17      	ldr	r3, [pc, #92]	; (800467c <vTaskPriorityInherit+0xe8>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	401a      	ands	r2, r3
 8004624:	4b15      	ldr	r3, [pc, #84]	; (800467c <vTaskPriorityInherit+0xe8>)
 8004626:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004628:	4b12      	ldr	r3, [pc, #72]	; (8004674 <vTaskPriorityInherit+0xe0>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004636:	2201      	movs	r2, #1
 8004638:	409a      	lsls	r2, r3
 800463a:	4b10      	ldr	r3, [pc, #64]	; (800467c <vTaskPriorityInherit+0xe8>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	431a      	orrs	r2, r3
 8004640:	4b0e      	ldr	r3, [pc, #56]	; (800467c <vTaskPriorityInherit+0xe8>)
 8004642:	601a      	str	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004648:	4613      	mov	r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	4413      	add	r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4a09      	ldr	r2, [pc, #36]	; (8004678 <vTaskPriorityInherit+0xe4>)
 8004652:	441a      	add	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	3304      	adds	r3, #4
 8004658:	4610      	mov	r0, r2
 800465a:	4619      	mov	r1, r3
 800465c:	f001 f858 	bl	8005710 <vListInsertEnd>
 8004660:	e004      	b.n	800466c <vTaskPriorityInherit+0xd8>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004662:	4b04      	ldr	r3, [pc, #16]	; (8004674 <vTaskPriorityInherit+0xe0>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800466c:	3710      	adds	r7, #16
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	200000b8 	.word	0x200000b8
 8004678:	200000bc 	.word	0x200000bc
 800467c:	20000198 	.word	0x20000198

08004680 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800468c:	2300      	movs	r3, #0
 800468e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d04f      	beq.n	8004736 <xTaskPriorityDisinherit+0xb6>
		{
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800469a:	1e5a      	subs	r2, r3, #1
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	645a      	str	r2, [r3, #68]	; 0x44

			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d044      	beq.n	8004736 <xTaskPriorityDisinherit+0xb6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d140      	bne.n	8004736 <xTaskPriorityDisinherit+0xb6>
					/* A task can only have an inhertied priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	3304      	adds	r3, #4
 80046b8:	4618      	mov	r0, r3
 80046ba:	f001 f885 	bl	80057c8 <uxListRemove>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d115      	bne.n	80046f0 <xTaskPriorityDisinherit+0x70>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046c8:	491d      	ldr	r1, [pc, #116]	; (8004740 <xTaskPriorityDisinherit+0xc0>)
 80046ca:	4613      	mov	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4413      	add	r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	440b      	add	r3, r1
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10a      	bne.n	80046f0 <xTaskPriorityDisinherit+0x70>
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046de:	2201      	movs	r2, #1
 80046e0:	fa02 f303 	lsl.w	r3, r2, r3
 80046e4:	43da      	mvns	r2, r3
 80046e6:	4b17      	ldr	r3, [pc, #92]	; (8004744 <xTaskPriorityDisinherit+0xc4>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	401a      	ands	r2, r3
 80046ec:	4b15      	ldr	r3, [pc, #84]	; (8004744 <xTaskPriorityDisinherit+0xc4>)
 80046ee:	601a      	str	r2, [r3, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fc:	f1c3 0205 	rsb	r2, r3, #5
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004708:	2201      	movs	r2, #1
 800470a:	409a      	lsls	r2, r3
 800470c:	4b0d      	ldr	r3, [pc, #52]	; (8004744 <xTaskPriorityDisinherit+0xc4>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	431a      	orrs	r2, r3
 8004712:	4b0c      	ldr	r3, [pc, #48]	; (8004744 <xTaskPriorityDisinherit+0xc4>)
 8004714:	601a      	str	r2, [r3, #0]
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800471a:	4613      	mov	r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4413      	add	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	4a07      	ldr	r2, [pc, #28]	; (8004740 <xTaskPriorityDisinherit+0xc0>)
 8004724:	441a      	add	r2, r3
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	3304      	adds	r3, #4
 800472a:	4610      	mov	r0, r2
 800472c:	4619      	mov	r1, r3
 800472e:	f000 ffef 	bl	8005710 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004732:	2301      	movs	r3, #1
 8004734:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004736:	68fb      	ldr	r3, [r7, #12]
	}
 8004738:	4618      	mov	r0, r3
 800473a:	3710      	adds	r7, #16
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	200000bc 	.word	0x200000bc
 8004744:	20000198 	.word	0x20000198

08004748 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800474e:	4b09      	ldr	r3, [pc, #36]	; (8004774 <uxTaskResetEventItemValue+0x2c>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004756:	4b07      	ldr	r3, [pc, #28]	; (8004774 <uxTaskResetEventItemValue+0x2c>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a06      	ldr	r2, [pc, #24]	; (8004774 <uxTaskResetEventItemValue+0x2c>)
 800475c:	6812      	ldr	r2, [r2, #0]
 800475e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004760:	f1c2 0205 	rsb	r2, r2, #5
 8004764:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8004766:	687b      	ldr	r3, [r7, #4]
}
 8004768:	4618      	mov	r0, r3
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr
 8004774:	200000b8 	.word	0x200000b8

08004778 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8004778:	b480      	push	{r7}
 800477a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800477c:	4b07      	ldr	r3, [pc, #28]	; (800479c <pvTaskIncrementMutexHeldCount+0x24>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d004      	beq.n	800478e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004784:	4b05      	ldr	r3, [pc, #20]	; (800479c <pvTaskIncrementMutexHeldCount+0x24>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800478a:	3201      	adds	r2, #1
 800478c:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
 800478e:	4b03      	ldr	r3, [pc, #12]	; (800479c <pvTaskIncrementMutexHeldCount+0x24>)
 8004790:	681b      	ldr	r3, [r3, #0]
	}
 8004792:	4618      	mov	r0, r3
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr
 800479c:	200000b8 	.word	0x200000b8

080047a0 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80047aa:	f001 f8c3 	bl	8005934 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80047ae:	4b31      	ldr	r3, [pc, #196]	; (8004874 <ulTaskNotifyTake+0xd4>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d138      	bne.n	800482a <ulTaskNotifyTake+0x8a>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 80047b8:	4b2e      	ldr	r3, [pc, #184]	; (8004874 <ulTaskNotifyTake+0xd4>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

				if( xTicksToWait > ( TickType_t ) 0 )
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d030      	beq.n	800482a <ulTaskNotifyTake+0x8a>
				{
					/* The task is going to block.  First it must be removed
					from the ready list. */
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80047c8:	4b2a      	ldr	r3, [pc, #168]	; (8004874 <ulTaskNotifyTake+0xd4>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	3304      	adds	r3, #4
 80047ce:	4618      	mov	r0, r3
 80047d0:	f000 fffa 	bl	80057c8 <uxListRemove>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10b      	bne.n	80047f2 <ulTaskNotifyTake+0x52>
					{
						/* The current task must be in a ready list, so there is
						no need to check, and the port reset macro can be called
						directly. */
						portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80047da:	4b26      	ldr	r3, [pc, #152]	; (8004874 <ulTaskNotifyTake+0xd4>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e0:	2201      	movs	r2, #1
 80047e2:	fa02 f303 	lsl.w	r3, r2, r3
 80047e6:	43da      	mvns	r2, r3
 80047e8:	4b23      	ldr	r3, [pc, #140]	; (8004878 <ulTaskNotifyTake+0xd8>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	401a      	ands	r2, r3
 80047ee:	4b22      	ldr	r3, [pc, #136]	; (8004878 <ulTaskNotifyTake+0xd8>)
 80047f0:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					#if ( INCLUDE_vTaskSuspend == 1 )
					{
						if( xTicksToWait == portMAX_DELAY )
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f8:	d107      	bne.n	800480a <ulTaskNotifyTake+0x6a>
						{
							/* Add the task to the suspended task list instead
							of a delayed task list to ensure the task is not
							woken by a timing event.  It will block
							indefinitely. */
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80047fa:	4b1e      	ldr	r3, [pc, #120]	; (8004874 <ulTaskNotifyTake+0xd4>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	3304      	adds	r3, #4
 8004800:	481e      	ldr	r0, [pc, #120]	; (800487c <ulTaskNotifyTake+0xdc>)
 8004802:	4619      	mov	r1, r3
 8004804:	f000 ff84 	bl	8005710 <vListInsertEnd>
 8004808:	e007      	b.n	800481a <ulTaskNotifyTake+0x7a>
						{
							/* Calculate the time at which the task should be
							woken if no notification events occur.  This may
							overflow but this doesn't matter, the scheduler will
							handle it. */
							xTimeToWake = xTickCount + xTicksToWait;
 800480a:	4b1d      	ldr	r3, [pc, #116]	; (8004880 <ulTaskNotifyTake+0xe0>)
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	4413      	add	r3, r2
 8004812:	60fb      	str	r3, [r7, #12]
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f7ff fded 	bl	80043f4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800481a:	4b1a      	ldr	r3, [pc, #104]	; (8004884 <ulTaskNotifyTake+0xe4>)
 800481c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004820:	601a      	str	r2, [r3, #0]
 8004822:	f3bf 8f4f 	dsb	sy
 8004826:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800482a:	f001 f89b 	bl	8005964 <vPortExitCritical>

		taskENTER_CRITICAL();
 800482e:	f001 f881 	bl	8005934 <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8004832:	4b10      	ldr	r3, [pc, #64]	; (8004874 <ulTaskNotifyTake+0xd4>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004838:	60bb      	str	r3, [r7, #8]

			if( ulReturn != 0UL )
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00c      	beq.n	800485a <ulTaskNotifyTake+0xba>
			{
				if( xClearCountOnExit != pdFALSE )
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d004      	beq.n	8004850 <ulTaskNotifyTake+0xb0>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8004846:	4b0b      	ldr	r3, [pc, #44]	; (8004874 <ulTaskNotifyTake+0xd4>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2200      	movs	r2, #0
 800484c:	649a      	str	r2, [r3, #72]	; 0x48
 800484e:	e004      	b.n	800485a <ulTaskNotifyTake+0xba>
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
 8004850:	4b08      	ldr	r3, [pc, #32]	; (8004874 <ulTaskNotifyTake+0xd4>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004856:	3a01      	subs	r2, #1
 8004858:	649a      	str	r2, [r3, #72]	; 0x48
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 800485a:	4b06      	ldr	r3, [pc, #24]	; (8004874 <ulTaskNotifyTake+0xd4>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		}
		taskEXIT_CRITICAL();
 8004864:	f001 f87e 	bl	8005964 <vPortExitCritical>

		return ulReturn;
 8004868:	68bb      	ldr	r3, [r7, #8]
	}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	200000b8 	.word	0x200000b8
 8004878:	20000198 	.word	0x20000198
 800487c:	2000017c 	.word	0x2000017c
 8004880:	20000194 	.word	0x20000194
 8004884:	e000ed04 	.word	0xe000ed04

08004888 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
 8004894:	603b      	str	r3, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8004896:	f001 f84d 	bl	8005934 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->eNotifyState != eNotified )
 800489a:	4b39      	ldr	r3, [pc, #228]	; (8004980 <xTaskNotifyWait+0xf8>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d03f      	beq.n	8004928 <xTaskNotifyWait+0xa0>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80048a8:	4b35      	ldr	r3, [pc, #212]	; (8004980 <xTaskNotifyWait+0xf8>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	43d2      	mvns	r2, r2
 80048b2:	400a      	ands	r2, r1
 80048b4:	649a      	str	r2, [r3, #72]	; 0x48

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 80048b6:	4b32      	ldr	r3, [pc, #200]	; (8004980 <xTaskNotifyWait+0xf8>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

				if( xTicksToWait > ( TickType_t ) 0 )
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d030      	beq.n	8004928 <xTaskNotifyWait+0xa0>
				{
					/* The task is going to block.  First it must be removed
					from the	ready list. */
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80048c6:	4b2e      	ldr	r3, [pc, #184]	; (8004980 <xTaskNotifyWait+0xf8>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	3304      	adds	r3, #4
 80048cc:	4618      	mov	r0, r3
 80048ce:	f000 ff7b 	bl	80057c8 <uxListRemove>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10b      	bne.n	80048f0 <xTaskNotifyWait+0x68>
					{
						/* The current task must be in a ready list, so there is
						no need to check, and the port reset macro can be called
						directly. */
						portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80048d8:	4b29      	ldr	r3, [pc, #164]	; (8004980 <xTaskNotifyWait+0xf8>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048de:	2201      	movs	r2, #1
 80048e0:	fa02 f303 	lsl.w	r3, r2, r3
 80048e4:	43da      	mvns	r2, r3
 80048e6:	4b27      	ldr	r3, [pc, #156]	; (8004984 <xTaskNotifyWait+0xfc>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	401a      	ands	r2, r3
 80048ec:	4b25      	ldr	r3, [pc, #148]	; (8004984 <xTaskNotifyWait+0xfc>)
 80048ee:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					#if ( INCLUDE_vTaskSuspend == 1 )
					{
						if( xTicksToWait == portMAX_DELAY )
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f6:	d107      	bne.n	8004908 <xTaskNotifyWait+0x80>
						{
							/* Add the task to the suspended task list instead
							of a delayed task list to ensure the task is not
							woken by a timing event.  It will block
							indefinitely. */
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80048f8:	4b21      	ldr	r3, [pc, #132]	; (8004980 <xTaskNotifyWait+0xf8>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	3304      	adds	r3, #4
 80048fe:	4822      	ldr	r0, [pc, #136]	; (8004988 <xTaskNotifyWait+0x100>)
 8004900:	4619      	mov	r1, r3
 8004902:	f000 ff05 	bl	8005710 <vListInsertEnd>
 8004906:	e007      	b.n	8004918 <xTaskNotifyWait+0x90>
						{
							/* Calculate the time at which the task should be
							woken if no notification events occur.  This may
							overflow but this doesn't matter, the scheduler will
							handle it. */
							xTimeToWake = xTickCount + xTicksToWait;
 8004908:	4b20      	ldr	r3, [pc, #128]	; (800498c <xTaskNotifyWait+0x104>)
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	4413      	add	r3, r2
 8004910:	613b      	str	r3, [r7, #16]
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 8004912:	6938      	ldr	r0, [r7, #16]
 8004914:	f7ff fd6e 	bl	80043f4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8004918:	4b1d      	ldr	r3, [pc, #116]	; (8004990 <xTaskNotifyWait+0x108>)
 800491a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	f3bf 8f4f 	dsb	sy
 8004924:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004928:	f001 f81c 	bl	8005964 <vPortExitCritical>

		taskENTER_CRITICAL();
 800492c:	f001 f802 	bl	8005934 <vPortEnterCritical>
		{
			if( pulNotificationValue != NULL )
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d004      	beq.n	8004940 <xTaskNotifyWait+0xb8>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8004936:	4b12      	ldr	r3, [pc, #72]	; (8004980 <xTaskNotifyWait+0xf8>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	601a      	str	r2, [r3, #0]

			/* If eNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->eNotifyState == eWaitingNotification )
 8004940:	4b0f      	ldr	r3, [pc, #60]	; (8004980 <xTaskNotifyWait+0xf8>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b01      	cmp	r3, #1
 800494c:	d102      	bne.n	8004954 <xTaskNotifyWait+0xcc>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800494e:	2300      	movs	r3, #0
 8004950:	617b      	str	r3, [r7, #20]
 8004952:	e008      	b.n	8004966 <xTaskNotifyWait+0xde>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8004954:	4b0a      	ldr	r3, [pc, #40]	; (8004980 <xTaskNotifyWait+0xf8>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	43d2      	mvns	r2, r2
 800495e:	400a      	ands	r2, r1
 8004960:	649a      	str	r2, [r3, #72]	; 0x48
				xReturn = pdTRUE;
 8004962:	2301      	movs	r3, #1
 8004964:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 8004966:	4b06      	ldr	r3, [pc, #24]	; (8004980 <xTaskNotifyWait+0xf8>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		}
		taskEXIT_CRITICAL();
 8004970:	f000 fff8 	bl	8005964 <vPortExitCritical>

		return xReturn;
 8004974:	697b      	ldr	r3, [r7, #20]
	}
 8004976:	4618      	mov	r0, r3
 8004978:	3718      	adds	r7, #24
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	200000b8 	.word	0x200000b8
 8004984:	20000198 	.word	0x20000198
 8004988:	2000017c 	.word	0x2000017c
 800498c:	20000194 	.word	0x20000194
 8004990:	e000ed04 	.word	0xe000ed04

08004994 <xTaskNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction )
	{
 8004994:	b580      	push	{r7, lr}
 8004996:	b088      	sub	sp, #32
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	4613      	mov	r3, r2
 80049a0:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80049a2:	2301      	movs	r3, #1
 80049a4:	61fb      	str	r3, [r7, #28]

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	61bb      	str	r3, [r7, #24]

		taskENTER_CRITICAL();
 80049aa:	f000 ffc3 	bl	8005934 <vPortEnterCritical>
		{
			eOriginalNotifyState = pxTCB->eNotifyState;
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80049b4:	75fb      	strb	r3, [r7, #23]

			pxTCB->eNotifyState = eNotified;
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	2202      	movs	r2, #2
 80049ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

			switch( eAction )
 80049be:	79fb      	ldrb	r3, [r7, #7]
 80049c0:	2b04      	cmp	r3, #4
 80049c2:	d828      	bhi.n	8004a16 <xTaskNotify+0x82>
 80049c4:	a201      	add	r2, pc, #4	; (adr r2, 80049cc <xTaskNotify+0x38>)
 80049c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ca:	bf00      	nop
 80049cc:	08004a17 	.word	0x08004a17
 80049d0:	080049e1 	.word	0x080049e1
 80049d4:	080049ef 	.word	0x080049ef
 80049d8:	080049fb 	.word	0x080049fb
 80049dc:	08004a03 	.word	0x08004a03
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	431a      	orrs	r2, r3
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	649a      	str	r2, [r3, #72]	; 0x48
					break;
 80049ec:	e013      	b.n	8004a16 <xTaskNotify+0x82>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049f2:	1c5a      	adds	r2, r3, #1
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	649a      	str	r2, [r3, #72]	; 0x48
					break;
 80049f8:	e00d      	b.n	8004a16 <xTaskNotify+0x82>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	68ba      	ldr	r2, [r7, #8]
 80049fe:	649a      	str	r2, [r3, #72]	; 0x48
					break;
 8004a00:	e009      	b.n	8004a16 <xTaskNotify+0x82>

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 8004a02:	7dfb      	ldrb	r3, [r7, #23]
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d003      	beq.n	8004a10 <xTaskNotify+0x7c>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	649a      	str	r2, [r3, #72]	; 0x48
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8004a0e:	e001      	b.n	8004a14 <xTaskNotify+0x80>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
 8004a10:	2300      	movs	r3, #0
 8004a12:	61fb      	str	r3, [r7, #28]
					}
					break;
 8004a14:	bf00      	nop
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 8004a16:	7dfb      	ldrb	r3, [r7, #23]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d12a      	bne.n	8004a72 <xTaskNotify+0xde>
			{
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	3304      	adds	r3, #4
 8004a20:	4618      	mov	r0, r3
 8004a22:	f000 fed1 	bl	80057c8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	409a      	lsls	r2, r3
 8004a2e:	4b14      	ldr	r3, [pc, #80]	; (8004a80 <xTaskNotify+0xec>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	431a      	orrs	r2, r3
 8004a34:	4b12      	ldr	r3, [pc, #72]	; (8004a80 <xTaskNotify+0xec>)
 8004a36:	601a      	str	r2, [r3, #0]
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	4413      	add	r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4a0f      	ldr	r2, [pc, #60]	; (8004a84 <xTaskNotify+0xf0>)
 8004a46:	441a      	add	r2, r3
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	3304      	adds	r3, #4
 8004a4c:	4610      	mov	r0, r2
 8004a4e:	4619      	mov	r1, r3
 8004a50:	f000 fe5e 	bl	8005710 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a58:	4b0b      	ldr	r3, [pc, #44]	; (8004a88 <xTaskNotify+0xf4>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d907      	bls.n	8004a72 <xTaskNotify+0xde>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					portYIELD_WITHIN_API();
 8004a62:	4b0a      	ldr	r3, [pc, #40]	; (8004a8c <xTaskNotify+0xf8>)
 8004a64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a68:	601a      	str	r2, [r3, #0]
 8004a6a:	f3bf 8f4f 	dsb	sy
 8004a6e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004a72:	f000 ff77 	bl	8005964 <vPortExitCritical>

		return xReturn;
 8004a76:	69fb      	ldr	r3, [r7, #28]
	}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3720      	adds	r7, #32
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	20000198 	.word	0x20000198
 8004a84:	200000bc 	.word	0x200000bc
 8004a88:	200000b8 	.word	0x200000b8
 8004a8c:	e000ed04 	.word	0xe000ed04

08004a90 <xTaskNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b08c      	sub	sp, #48	; 0x30
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	603b      	str	r3, [r7, #0]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	62bb      	str	r3, [r7, #40]	; 0x28

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004aa8:	f3ef 8211 	mrs	r2, BASEPRI
 8004aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab0:	f383 8811 	msr	BASEPRI, r3
 8004ab4:	f3bf 8f6f 	isb	sy
 8004ab8:	f3bf 8f4f 	dsb	sy
 8004abc:	61fa      	str	r2, [r7, #28]
 8004abe:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004ac0:	69fb      	ldr	r3, [r7, #28]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ac2:	627b      	str	r3, [r7, #36]	; 0x24
		{
			eOriginalNotifyState = pxTCB->eNotifyState;
 8004ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004aca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

			pxTCB->eNotifyState = eNotified;
 8004ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad0:	2202      	movs	r2, #2
 8004ad2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

			switch( eAction )
 8004ad6:	79fb      	ldrb	r3, [r7, #7]
 8004ad8:	2b04      	cmp	r3, #4
 8004ada:	d829      	bhi.n	8004b30 <xTaskNotifyFromISR+0xa0>
 8004adc:	a201      	add	r2, pc, #4	; (adr r2, 8004ae4 <xTaskNotifyFromISR+0x54>)
 8004ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae2:	bf00      	nop
 8004ae4:	08004b31 	.word	0x08004b31
 8004ae8:	08004af9 	.word	0x08004af9
 8004aec:	08004b07 	.word	0x08004b07
 8004af0:	08004b13 	.word	0x08004b13
 8004af4:	08004b1b 	.word	0x08004b1b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8004af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	431a      	orrs	r2, r3
 8004b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b02:	649a      	str	r2, [r3, #72]	; 0x48
					break;
 8004b04:	e014      	b.n	8004b30 <xTaskNotifyFromISR+0xa0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8004b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b0a:	1c5a      	adds	r2, r3, #1
 8004b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0e:	649a      	str	r2, [r3, #72]	; 0x48
					break;
 8004b10:	e00e      	b.n	8004b30 <xTaskNotifyFromISR+0xa0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8004b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b14:	68ba      	ldr	r2, [r7, #8]
 8004b16:	649a      	str	r2, [r3, #72]	; 0x48
					break;
 8004b18:	e00a      	b.n	8004b30 <xTaskNotifyFromISR+0xa0>

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 8004b1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d003      	beq.n	8004b2a <xTaskNotifyFromISR+0x9a>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8004b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b24:	68ba      	ldr	r2, [r7, #8]
 8004b26:	649a      	str	r2, [r3, #72]	; 0x48
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8004b28:	e001      	b.n	8004b2e <xTaskNotifyFromISR+0x9e>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
					}
					break;
 8004b2e:	bf00      	nop
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 8004b30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d133      	bne.n	8004ba0 <xTaskNotifyFromISR+0x110>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b38:	4b1e      	ldr	r3, [pc, #120]	; (8004bb4 <xTaskNotifyFromISR+0x124>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d11c      	bne.n	8004b7a <xTaskNotifyFromISR+0xea>
				{
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8004b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b42:	3304      	adds	r3, #4
 8004b44:	4618      	mov	r0, r3
 8004b46:	f000 fe3f 	bl	80057c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4e:	2201      	movs	r2, #1
 8004b50:	409a      	lsls	r2, r3
 8004b52:	4b19      	ldr	r3, [pc, #100]	; (8004bb8 <xTaskNotifyFromISR+0x128>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	431a      	orrs	r2, r3
 8004b58:	4b17      	ldr	r3, [pc, #92]	; (8004bb8 <xTaskNotifyFromISR+0x128>)
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b60:	4613      	mov	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4a14      	ldr	r2, [pc, #80]	; (8004bbc <xTaskNotifyFromISR+0x12c>)
 8004b6a:	441a      	add	r2, r3
 8004b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6e:	3304      	adds	r3, #4
 8004b70:	4610      	mov	r0, r2
 8004b72:	4619      	mov	r1, r3
 8004b74:	f000 fdcc 	bl	8005710 <vListInsertEnd>
 8004b78:	e005      	b.n	8004b86 <xTaskNotifyFromISR+0xf6>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7c:	3318      	adds	r3, #24
 8004b7e:	4810      	ldr	r0, [pc, #64]	; (8004bc0 <xTaskNotifyFromISR+0x130>)
 8004b80:	4619      	mov	r1, r3
 8004b82:	f000 fdc5 	bl	8005710 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b8a:	4b0e      	ldr	r3, [pc, #56]	; (8004bc4 <xTaskNotifyFromISR+0x134>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d905      	bls.n	8004ba0 <xTaskNotifyFromISR+0x110>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d002      	beq.n	8004ba0 <xTaskNotifyFromISR+0x110>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	601a      	str	r2, [r3, #0]
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8004baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3730      	adds	r7, #48	; 0x30
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	200001b0 	.word	0x200001b0
 8004bb8:	20000198 	.word	0x20000198
 8004bbc:	200000bc 	.word	0x200000bc
 8004bc0:	20000150 	.word	0x20000150
 8004bc4:	200000b8 	.word	0x200000b8

08004bc8 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b088      	sub	sp, #32
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004bd6:	f3ef 8211 	mrs	r2, BASEPRI
 8004bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bde:	f383 8811 	msr	BASEPRI, r3
 8004be2:	f3bf 8f6f 	isb	sy
 8004be6:	f3bf 8f4f 	dsb	sy
 8004bea:	613a      	str	r2, [r7, #16]
 8004bec:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004bee:	693b      	ldr	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004bf0:	61bb      	str	r3, [r7, #24]
		{
			eOriginalNotifyState = pxTCB->eNotifyState;
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004bf8:	75fb      	strb	r3, [r7, #23]
			pxTCB->eNotifyState = eNotified;
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	2202      	movs	r2, #2
 8004bfe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c06:	1c5a      	adds	r2, r3, #1
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	649a      	str	r2, [r3, #72]	; 0x48

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 8004c0c:	7dfb      	ldrb	r3, [r7, #23]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d133      	bne.n	8004c7a <vTaskNotifyGiveFromISR+0xb2>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c12:	4b1e      	ldr	r3, [pc, #120]	; (8004c8c <vTaskNotifyGiveFromISR+0xc4>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d11c      	bne.n	8004c54 <vTaskNotifyGiveFromISR+0x8c>
				{
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	3304      	adds	r3, #4
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f000 fdd2 	bl	80057c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c28:	2201      	movs	r2, #1
 8004c2a:	409a      	lsls	r2, r3
 8004c2c:	4b18      	ldr	r3, [pc, #96]	; (8004c90 <vTaskNotifyGiveFromISR+0xc8>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	431a      	orrs	r2, r3
 8004c32:	4b17      	ldr	r3, [pc, #92]	; (8004c90 <vTaskNotifyGiveFromISR+0xc8>)
 8004c34:	601a      	str	r2, [r3, #0]
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	4413      	add	r3, r2
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	4a14      	ldr	r2, [pc, #80]	; (8004c94 <vTaskNotifyGiveFromISR+0xcc>)
 8004c44:	441a      	add	r2, r3
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	3304      	adds	r3, #4
 8004c4a:	4610      	mov	r0, r2
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	f000 fd5f 	bl	8005710 <vListInsertEnd>
 8004c52:	e005      	b.n	8004c60 <vTaskNotifyGiveFromISR+0x98>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	3318      	adds	r3, #24
 8004c58:	480f      	ldr	r0, [pc, #60]	; (8004c98 <vTaskNotifyGiveFromISR+0xd0>)
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	f000 fd58 	bl	8005710 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c64:	4b0d      	ldr	r3, [pc, #52]	; (8004c9c <vTaskNotifyGiveFromISR+0xd4>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d905      	bls.n	8004c7a <vTaskNotifyGiveFromISR+0xb2>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d002      	beq.n	8004c7a <vTaskNotifyGiveFromISR+0xb2>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	2201      	movs	r2, #1
 8004c78:	601a      	str	r2, [r3, #0]
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	f383 8811 	msr	BASEPRI, r3
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8004c84:	3720      	adds	r7, #32
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	200001b0 	.word	0x200001b0
 8004c90:	20000198 	.word	0x20000198
 8004c94:	200000bc 	.word	0x200000bc
 8004c98:	20000150 	.word	0x20000150
 8004c9c:	200000b8 	.word	0x200000b8

08004ca0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 8004cae:	f000 fe41 	bl	8005934 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cba:	68f9      	ldr	r1, [r7, #12]
 8004cbc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004cbe:	fb01 f303 	mul.w	r3, r1, r3
 8004cc2:	441a      	add	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	68f9      	ldr	r1, [r7, #12]
 8004ce2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004ce4:	fb01 f303 	mul.w	r3, r1, r3
 8004ce8:	441a      	add	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8004cf4:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8004cfc:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d114      	bne.n	8004d2e <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d01a      	beq.n	8004d42 <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	3310      	adds	r3, #16
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7ff f989 	bl	8004028 <xTaskRemoveFromEventList>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d112      	bne.n	8004d42 <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004d1c:	4b0c      	ldr	r3, [pc, #48]	; (8004d50 <xQueueGenericReset+0xb0>)
 8004d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d22:	601a      	str	r2, [r3, #0]
 8004d24:	f3bf 8f4f 	dsb	sy
 8004d28:	f3bf 8f6f 	isb	sy
 8004d2c:	e009      	b.n	8004d42 <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	3310      	adds	r3, #16
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 fcc0 	bl	80056b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	3324      	adds	r3, #36	; 0x24
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f000 fcbb 	bl	80056b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004d42:	f000 fe0f 	bl	8005964 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004d46:	2301      	movs	r3, #1
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3710      	adds	r7, #16
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	e000ed04 	.word	0xe000ed04

08004d54 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b088      	sub	sp, #32
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	71fb      	strb	r3, [r7, #7]
Queue_t *pxNewQueue;
size_t xQueueSizeInBytes;
QueueHandle_t xReturn = NULL;
 8004d62:	2300      	movs	r3, #0
 8004d64:	61bb      	str	r3, [r7, #24]
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d102      	bne.n	8004d72 <xQueueGenericCreate+0x1e>
	{
		/* There is not going to be a queue storage area. */
		xQueueSizeInBytes = ( size_t ) 0;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	61fb      	str	r3, [r7, #28]
 8004d70:	e005      	b.n	8004d7e <xQueueGenericCreate+0x2a>
	}
	else
	{
		/* The queue is one byte longer than asked for to make wrap checking
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	fb02 f303 	mul.w	r3, r2, r3
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	61fb      	str	r3, [r7, #28]
	}

	/* Allocate the new queue structure and storage area. */
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	334c      	adds	r3, #76	; 0x4c
 8004d82:	4618      	mov	r0, r3
 8004d84:	f000 fe76 	bl	8005a74 <pvPortMalloc>
 8004d88:	6178      	str	r0, [r7, #20]

	if( pcAllocatedBuffer != NULL )
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d019      	beq.n	8004dc4 <xQueueGenericCreate+0x70>
	{
		pxNewQueue = ( Queue_t * ) pcAllocatedBuffer; /*lint !e826 MISRA The buffer cannot be to small because it was dimensioned by sizeof( Queue_t ) + xQueueSizeInBytes. */
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	613b      	str	r3, [r7, #16]

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d103      	bne.n	8004da2 <xQueueGenericCreate+0x4e>
		{
			/* No RAM was allocated for the queue storage area, but PC head
			cannot be set to NULL because NULL is used as a key to say the queue
			is used as a mutex.  Therefore just set pcHead to point to the queue
			as a benign value that is known to be within the memory map. */
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	601a      	str	r2, [r3, #0]
 8004da0:	e004      	b.n	8004dac <xQueueGenericCreate+0x58>
		}
		else
		{
			/* Jump past the queue structure to find the location of the queue
			storage area - adding the padding bytes to get a better alignment. */
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	601a      	str	r2, [r3, #0]
		}

		/* Initialise the queue members as described above where the queue type
		is defined. */
		pxNewQueue->uxLength = uxQueueLength;
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	63da      	str	r2, [r3, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	68ba      	ldr	r2, [r7, #8]
 8004db6:	641a      	str	r2, [r3, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004db8:	6938      	ldr	r0, [r7, #16]
 8004dba:	2101      	movs	r1, #1
 8004dbc:	f7ff ff70 	bl	8004ca0 <xQueueGenericReset>
			pxNewQueue->pxQueueSetContainer = NULL;
		}
		#endif /* configUSE_QUEUE_SETS */

		traceQUEUE_CREATE( pxNewQueue );
		xReturn = pxNewQueue;
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	61bb      	str	r3, [r7, #24]
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );

	return xReturn;
 8004dc4:	69bb      	ldr	r3, [r7, #24]
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3720      	adds	r7, #32
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop

08004dd0 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
 8004dda:	204c      	movs	r0, #76	; 0x4c
 8004ddc:	f000 fe4a 	bl	8005a74 <pvPortMalloc>
 8004de0:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d02c      	beq.n	8004e42 <xQueueCreateMutex+0x72>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2200      	movs	r2, #0
 8004df8:	609a      	str	r2, [r3, #8]
			pxNewQueue->u.pcReadFrom = NULL;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2200      	movs	r2, #0
 8004e04:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f04f 32ff 	mov.w	r2, #4294967295
 8004e18:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e20:	649a      	str	r2, [r3, #72]	; 0x48
				pxNewQueue->pxQueueSetContainer = NULL;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	3310      	adds	r3, #16
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 fc46 	bl	80056b8 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	3324      	adds	r3, #36	; 0x24
 8004e30:	4618      	mov	r0, r3
 8004e32:	f000 fc41 	bl	80056b8 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	2100      	movs	r1, #0
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	f000 f805 	bl	8004e4c <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
 8004e42:	68fb      	ldr	r3, [r7, #12]
	}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3710      	adds	r7, #16
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b08a      	sub	sp, #40	; 0x28
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
 8004e58:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	623b      	str	r3, [r7, #32]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e62:	f000 fd67 	bl	8005934 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e66:	6a3b      	ldr	r3, [r7, #32]
 8004e68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e6a:	6a3b      	ldr	r3, [r7, #32]
 8004e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d302      	bcc.n	8004e78 <xQueueGenericSend+0x2c>
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d129      	bne.n	8004ecc <xQueueGenericSend+0x80>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e78:	6a38      	ldr	r0, [r7, #32]
 8004e7a:	68b9      	ldr	r1, [r7, #8]
 8004e7c:	683a      	ldr	r2, [r7, #0]
 8004e7e:	f000 fab7 	bl	80053f0 <prvCopyDataToQueue>
 8004e82:	61f8      	str	r0, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e84:	6a3b      	ldr	r3, [r7, #32]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d010      	beq.n	8004eae <xQueueGenericSend+0x62>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 8004e8c:	6a3b      	ldr	r3, [r7, #32]
 8004e8e:	3324      	adds	r3, #36	; 0x24
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7ff f8c9 	bl	8004028 <xTaskRemoveFromEventList>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d113      	bne.n	8004ec4 <xQueueGenericSend+0x78>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004e9c:	4b3d      	ldr	r3, [pc, #244]	; (8004f94 <xQueueGenericSend+0x148>)
 8004e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ea2:	601a      	str	r2, [r3, #0]
 8004ea4:	f3bf 8f4f 	dsb	sy
 8004ea8:	f3bf 8f6f 	isb	sy
 8004eac:	e00a      	b.n	8004ec4 <xQueueGenericSend+0x78>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d007      	beq.n	8004ec4 <xQueueGenericSend+0x78>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004eb4:	4b37      	ldr	r3, [pc, #220]	; (8004f94 <xQueueGenericSend+0x148>)
 8004eb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eba:	601a      	str	r2, [r3, #0]
 8004ebc:	f3bf 8f4f 	dsb	sy
 8004ec0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004ec4:	f000 fd4e 	bl	8005964 <vPortExitCritical>
				return pdPASS;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e05f      	b.n	8004f8c <xQueueGenericSend+0x140>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d103      	bne.n	8004eda <xQueueGenericSend+0x8e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ed2:	f000 fd47 	bl	8005964 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	e058      	b.n	8004f8c <xQueueGenericSend+0x140>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d106      	bne.n	8004eee <xQueueGenericSend+0xa2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8004ee0:	f107 0314 	add.w	r3, r7, #20
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7ff f93b 	bl	8004160 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004eea:	2301      	movs	r3, #1
 8004eec:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004eee:	f000 fd39 	bl	8005964 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ef2:	f7fe fe05 	bl	8003b00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ef6:	f000 fd1d 	bl	8005934 <vPortEnterCritical>
 8004efa:	6a3b      	ldr	r3, [r7, #32]
 8004efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f02:	d102      	bne.n	8004f0a <xQueueGenericSend+0xbe>
 8004f04:	6a3b      	ldr	r3, [r7, #32]
 8004f06:	2200      	movs	r2, #0
 8004f08:	645a      	str	r2, [r3, #68]	; 0x44
 8004f0a:	6a3b      	ldr	r3, [r7, #32]
 8004f0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f12:	d102      	bne.n	8004f1a <xQueueGenericSend+0xce>
 8004f14:	6a3b      	ldr	r3, [r7, #32]
 8004f16:	2200      	movs	r2, #0
 8004f18:	649a      	str	r2, [r3, #72]	; 0x48
 8004f1a:	f000 fd23 	bl	8005964 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f1e:	f107 0214 	add.w	r2, r7, #20
 8004f22:	1d3b      	adds	r3, r7, #4
 8004f24:	4610      	mov	r0, r2
 8004f26:	4619      	mov	r1, r3
 8004f28:	f7ff f930 	bl	800418c <xTaskCheckForTimeOut>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d124      	bne.n	8004f7c <xQueueGenericSend+0x130>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004f32:	6a38      	ldr	r0, [r7, #32]
 8004f34:	f000 fb66 	bl	8005604 <prvIsQueueFull>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d018      	beq.n	8004f70 <xQueueGenericSend+0x124>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004f3e:	6a3b      	ldr	r3, [r7, #32]
 8004f40:	f103 0210 	add.w	r2, r3, #16
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4610      	mov	r0, r2
 8004f48:	4619      	mov	r1, r3
 8004f4a:	f7fe ffb3 	bl	8003eb4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004f4e:	6a38      	ldr	r0, [r7, #32]
 8004f50:	f000 fae2 	bl	8005518 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004f54:	f7fe fde2 	bl	8003b1c <xTaskResumeAll>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d115      	bne.n	8004f8a <xQueueGenericSend+0x13e>
				{
					portYIELD_WITHIN_API();
 8004f5e:	4b0d      	ldr	r3, [pc, #52]	; (8004f94 <xQueueGenericSend+0x148>)
 8004f60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f64:	601a      	str	r2, [r3, #0]
 8004f66:	f3bf 8f4f 	dsb	sy
 8004f6a:	f3bf 8f6f 	isb	sy
 8004f6e:	e00c      	b.n	8004f8a <xQueueGenericSend+0x13e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004f70:	6a38      	ldr	r0, [r7, #32]
 8004f72:	f000 fad1 	bl	8005518 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f76:	f7fe fdd1 	bl	8003b1c <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 8004f7a:	e772      	b.n	8004e62 <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004f7c:	6a38      	ldr	r0, [r7, #32]
 8004f7e:	f000 facb 	bl	8005518 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f82:	f7fe fdcb 	bl	8003b1c <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004f86:	2300      	movs	r3, #0
 8004f88:	e000      	b.n	8004f8c <xQueueGenericSend+0x140>
		}
	}
 8004f8a:	e76a      	b.n	8004e62 <xQueueGenericSend+0x16>
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3728      	adds	r7, #40	; 0x28
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	e000ed04 	.word	0xe000ed04

08004f98 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b08a      	sub	sp, #40	; 0x28
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
 8004fa4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	623b      	str	r3, [r7, #32]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004faa:	f3ef 8211 	mrs	r2, BASEPRI
 8004fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb2:	f383 8811 	msr	BASEPRI, r3
 8004fb6:	f3bf 8f6f 	isb	sy
 8004fba:	f3bf 8f4f 	dsb	sy
 8004fbe:	61ba      	str	r2, [r7, #24]
 8004fc0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004fc2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004fc4:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004fc6:	6a3b      	ldr	r3, [r7, #32]
 8004fc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fca:	6a3b      	ldr	r3, [r7, #32]
 8004fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d302      	bcc.n	8004fd8 <xQueueGenericSendFromISR+0x40>
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d124      	bne.n	8005022 <xQueueGenericSendFromISR+0x8a>
			/* A task can only have an inherited priority if it is a mutex
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  Therefore, unlike the xQueueGenericGive()
			function, there is no need to determine the need for priority
			disinheritance here or to clear the mutex holder TCB member. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004fd8:	6a38      	ldr	r0, [r7, #32]
 8004fda:	68b9      	ldr	r1, [r7, #8]
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	f000 fa07 	bl	80053f0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 8004fe2:	6a3b      	ldr	r3, [r7, #32]
 8004fe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fea:	d112      	bne.n	8005012 <xQueueGenericSendFromISR+0x7a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fec:	6a3b      	ldr	r3, [r7, #32]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d013      	beq.n	800501c <xQueueGenericSendFromISR+0x84>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ff4:	6a3b      	ldr	r3, [r7, #32]
 8004ff6:	3324      	adds	r3, #36	; 0x24
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f7ff f815 	bl	8004028 <xTaskRemoveFromEventList>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00b      	beq.n	800501c <xQueueGenericSendFromISR+0x84>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d008      	beq.n	800501c <xQueueGenericSendFromISR+0x84>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2201      	movs	r2, #1
 800500e:	601a      	str	r2, [r3, #0]
 8005010:	e004      	b.n	800501c <xQueueGenericSendFromISR+0x84>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 8005012:	6a3b      	ldr	r3, [r7, #32]
 8005014:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005016:	1c5a      	adds	r2, r3, #1
 8005018:	6a3b      	ldr	r3, [r7, #32]
 800501a:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
 800501c:	2301      	movs	r3, #1
 800501e:	627b      	str	r3, [r7, #36]	; 0x24
 8005020:	e001      	b.n	8005026 <xQueueGenericSendFromISR+0x8e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005022:	2300      	movs	r3, #0
 8005024:	627b      	str	r3, [r7, #36]	; 0x24
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005032:	4618      	mov	r0, r3
 8005034:	3728      	adds	r7, #40	; 0x28
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop

0800503c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b088      	sub	sp, #32
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	61bb      	str	r3, [r7, #24]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800504a:	f3ef 8211 	mrs	r2, BASEPRI
 800504e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005052:	f383 8811 	msr	BASEPRI, r3
 8005056:	f3bf 8f6f 	isb	sy
 800505a:	f3bf 8f4f 	dsb	sy
 800505e:	613a      	str	r2, [r7, #16]
 8005060:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005062:	693b      	ldr	r3, [r7, #16]
	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005064:	617b      	str	r3, [r7, #20]
	{
		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800506e:	429a      	cmp	r2, r3
 8005070:	d224      	bcs.n	80050bc <xQueueGiveFromISR+0x80>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  Therefore, unlike the xQueueGenericGive()
			function, there is no need to determine the need for priority
			disinheritance here or to clear the mutex holder TCB member. */

			++( pxQueue->uxMessagesWaiting );
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005076:	1c5a      	adds	r2, r3, #1
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005084:	d112      	bne.n	80050ac <xQueueGiveFromISR+0x70>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508a:	2b00      	cmp	r3, #0
 800508c:	d013      	beq.n	80050b6 <xQueueGiveFromISR+0x7a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	3324      	adds	r3, #36	; 0x24
 8005092:	4618      	mov	r0, r3
 8005094:	f7fe ffc8 	bl	8004028 <xTaskRemoveFromEventList>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00b      	beq.n	80050b6 <xQueueGiveFromISR+0x7a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d008      	beq.n	80050b6 <xQueueGiveFromISR+0x7a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	2201      	movs	r2, #1
 80050a8:	601a      	str	r2, [r3, #0]
 80050aa:	e004      	b.n	80050b6 <xQueueGiveFromISR+0x7a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050b0:	1c5a      	adds	r2, r3, #1
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
 80050b6:	2301      	movs	r3, #1
 80050b8:	61fb      	str	r3, [r7, #28]
 80050ba:	e001      	b.n	80050c0 <xQueueGiveFromISR+0x84>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80050bc:	2300      	movs	r3, #0
 80050be:	61fb      	str	r3, [r7, #28]
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80050ca:	69fb      	ldr	r3, [r7, #28]
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3720      	adds	r7, #32
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b08a      	sub	sp, #40	; 0x28
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
 80050e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80050e2:	2300      	movs	r3, #0
 80050e4:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	623b      	str	r3, [r7, #32]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80050ea:	f000 fc23 	bl	8005934 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050ee:	6a3b      	ldr	r3, [r7, #32]
 80050f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d047      	beq.n	8005186 <xQueueGenericReceive+0xb2>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80050f6:	6a3b      	ldr	r3, [r7, #32]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	61fb      	str	r3, [r7, #28]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80050fc:	6a38      	ldr	r0, [r7, #32]
 80050fe:	68b9      	ldr	r1, [r7, #8]
 8005100:	f000 f9e4 	bl	80054cc <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d122      	bne.n	8005150 <xQueueGenericReceive+0x7c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
 800510a:	6a3b      	ldr	r3, [r7, #32]
 800510c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510e:	1e5a      	subs	r2, r3, #1
 8005110:	6a3b      	ldr	r3, [r7, #32]
 8005112:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005114:	6a3b      	ldr	r3, [r7, #32]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d104      	bne.n	8005126 <xQueueGenericReceive+0x52>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800511c:	f7ff fb2c 	bl	8004778 <pvTaskIncrementMutexHeldCount>
 8005120:	4602      	mov	r2, r0
 8005122:	6a3b      	ldr	r3, [r7, #32]
 8005124:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005126:	6a3b      	ldr	r3, [r7, #32]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d027      	beq.n	800517e <xQueueGenericReceive+0xaa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800512e:	6a3b      	ldr	r3, [r7, #32]
 8005130:	3310      	adds	r3, #16
 8005132:	4618      	mov	r0, r3
 8005134:	f7fe ff78 	bl	8004028 <xTaskRemoveFromEventList>
 8005138:	4603      	mov	r3, r0
 800513a:	2b01      	cmp	r3, #1
 800513c:	d11f      	bne.n	800517e <xQueueGenericReceive+0xaa>
						{
							queueYIELD_IF_USING_PREEMPTION();
 800513e:	4b4a      	ldr	r3, [pc, #296]	; (8005268 <xQueueGenericReceive+0x194>)
 8005140:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005144:	601a      	str	r2, [r3, #0]
 8005146:	f3bf 8f4f 	dsb	sy
 800514a:	f3bf 8f6f 	isb	sy
 800514e:	e016      	b.n	800517e <xQueueGenericReceive+0xaa>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8005150:	6a3b      	ldr	r3, [r7, #32]
 8005152:	69fa      	ldr	r2, [r7, #28]
 8005154:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005156:	6a3b      	ldr	r3, [r7, #32]
 8005158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00f      	beq.n	800517e <xQueueGenericReceive+0xaa>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800515e:	6a3b      	ldr	r3, [r7, #32]
 8005160:	3324      	adds	r3, #36	; 0x24
 8005162:	4618      	mov	r0, r3
 8005164:	f7fe ff60 	bl	8004028 <xTaskRemoveFromEventList>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d007      	beq.n	800517e <xQueueGenericReceive+0xaa>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 800516e:	4b3e      	ldr	r3, [pc, #248]	; (8005268 <xQueueGenericReceive+0x194>)
 8005170:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005174:	601a      	str	r2, [r3, #0]
 8005176:	f3bf 8f4f 	dsb	sy
 800517a:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 800517e:	f000 fbf1 	bl	8005964 <vPortExitCritical>
				return pdPASS;
 8005182:	2301      	movs	r3, #1
 8005184:	e06c      	b.n	8005260 <xQueueGenericReceive+0x18c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d103      	bne.n	8005194 <xQueueGenericReceive+0xc0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800518c:	f000 fbea 	bl	8005964 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005190:	2300      	movs	r3, #0
 8005192:	e065      	b.n	8005260 <xQueueGenericReceive+0x18c>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005196:	2b00      	cmp	r3, #0
 8005198:	d106      	bne.n	80051a8 <xQueueGenericReceive+0xd4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800519a:	f107 0314 	add.w	r3, r7, #20
 800519e:	4618      	mov	r0, r3
 80051a0:	f7fe ffde 	bl	8004160 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80051a4:	2301      	movs	r3, #1
 80051a6:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80051a8:	f000 fbdc 	bl	8005964 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80051ac:	f7fe fca8 	bl	8003b00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80051b0:	f000 fbc0 	bl	8005934 <vPortEnterCritical>
 80051b4:	6a3b      	ldr	r3, [r7, #32]
 80051b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051bc:	d102      	bne.n	80051c4 <xQueueGenericReceive+0xf0>
 80051be:	6a3b      	ldr	r3, [r7, #32]
 80051c0:	2200      	movs	r2, #0
 80051c2:	645a      	str	r2, [r3, #68]	; 0x44
 80051c4:	6a3b      	ldr	r3, [r7, #32]
 80051c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051cc:	d102      	bne.n	80051d4 <xQueueGenericReceive+0x100>
 80051ce:	6a3b      	ldr	r3, [r7, #32]
 80051d0:	2200      	movs	r2, #0
 80051d2:	649a      	str	r2, [r3, #72]	; 0x48
 80051d4:	f000 fbc6 	bl	8005964 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80051d8:	f107 0214 	add.w	r2, r7, #20
 80051dc:	1d3b      	adds	r3, r7, #4
 80051de:	4610      	mov	r0, r2
 80051e0:	4619      	mov	r1, r3
 80051e2:	f7fe ffd3 	bl	800418c <xTaskCheckForTimeOut>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d131      	bne.n	8005250 <xQueueGenericReceive+0x17c>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80051ec:	6a38      	ldr	r0, [r7, #32]
 80051ee:	f000 f9df 	bl	80055b0 <prvIsQueueEmpty>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d025      	beq.n	8005244 <xQueueGenericReceive+0x170>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80051f8:	6a3b      	ldr	r3, [r7, #32]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d108      	bne.n	8005212 <xQueueGenericReceive+0x13e>
					{
						taskENTER_CRITICAL();
 8005200:	f000 fb98 	bl	8005934 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005204:	6a3b      	ldr	r3, [r7, #32]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	4618      	mov	r0, r3
 800520a:	f7ff f9c3 	bl	8004594 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 800520e:	f000 fba9 	bl	8005964 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005212:	6a3b      	ldr	r3, [r7, #32]
 8005214:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4610      	mov	r0, r2
 800521c:	4619      	mov	r1, r3
 800521e:	f7fe fe49 	bl	8003eb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005222:	6a38      	ldr	r0, [r7, #32]
 8005224:	f000 f978 	bl	8005518 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005228:	f7fe fc78 	bl	8003b1c <xTaskResumeAll>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d115      	bne.n	800525e <xQueueGenericReceive+0x18a>
				{
					portYIELD_WITHIN_API();
 8005232:	4b0d      	ldr	r3, [pc, #52]	; (8005268 <xQueueGenericReceive+0x194>)
 8005234:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005238:	601a      	str	r2, [r3, #0]
 800523a:	f3bf 8f4f 	dsb	sy
 800523e:	f3bf 8f6f 	isb	sy
 8005242:	e00c      	b.n	800525e <xQueueGenericReceive+0x18a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005244:	6a38      	ldr	r0, [r7, #32]
 8005246:	f000 f967 	bl	8005518 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800524a:	f7fe fc67 	bl	8003b1c <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 800524e:	e74c      	b.n	80050ea <xQueueGenericReceive+0x16>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8005250:	6a38      	ldr	r0, [r7, #32]
 8005252:	f000 f961 	bl	8005518 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005256:	f7fe fc61 	bl	8003b1c <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 800525a:	2300      	movs	r3, #0
 800525c:	e000      	b.n	8005260 <xQueueGenericReceive+0x18c>
		}
	}
 800525e:	e744      	b.n	80050ea <xQueueGenericReceive+0x16>
}
 8005260:	4618      	mov	r0, r3
 8005262:	3728      	adds	r7, #40	; 0x28
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	e000ed04 	.word	0xe000ed04

0800526c <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b08a      	sub	sp, #40	; 0x28
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	623b      	str	r3, [r7, #32]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800527c:	f3ef 8211 	mrs	r2, BASEPRI
 8005280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005284:	f383 8811 	msr	BASEPRI, r3
 8005288:	f3bf 8f6f 	isb	sy
 800528c:	f3bf 8f4f 	dsb	sy
 8005290:	61ba      	str	r2, [r7, #24]
 8005292:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005294:	69bb      	ldr	r3, [r7, #24]
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005296:	61fb      	str	r3, [r7, #28]
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005298:	6a3b      	ldr	r3, [r7, #32]
 800529a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529c:	2b00      	cmp	r3, #0
 800529e:	d028      	beq.n	80052f2 <xQueueReceiveFromISR+0x86>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80052a0:	6a38      	ldr	r0, [r7, #32]
 80052a2:	68b9      	ldr	r1, [r7, #8]
 80052a4:	f000 f912 	bl	80054cc <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 80052a8:	6a3b      	ldr	r3, [r7, #32]
 80052aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ac:	1e5a      	subs	r2, r3, #1
 80052ae:	6a3b      	ldr	r3, [r7, #32]
 80052b0:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
 80052b2:	6a3b      	ldr	r3, [r7, #32]
 80052b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ba:	d112      	bne.n	80052e2 <xQueueReceiveFromISR+0x76>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052bc:	6a3b      	ldr	r3, [r7, #32]
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d013      	beq.n	80052ec <xQueueReceiveFromISR+0x80>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052c4:	6a3b      	ldr	r3, [r7, #32]
 80052c6:	3310      	adds	r3, #16
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7fe fead 	bl	8004028 <xTaskRemoveFromEventList>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00b      	beq.n	80052ec <xQueueReceiveFromISR+0x80>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d008      	beq.n	80052ec <xQueueReceiveFromISR+0x80>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2201      	movs	r2, #1
 80052de:	601a      	str	r2, [r3, #0]
 80052e0:	e004      	b.n	80052ec <xQueueReceiveFromISR+0x80>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
 80052e2:	6a3b      	ldr	r3, [r7, #32]
 80052e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e6:	1c5a      	adds	r2, r3, #1
 80052e8:	6a3b      	ldr	r3, [r7, #32]
 80052ea:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80052ec:	2301      	movs	r3, #1
 80052ee:	627b      	str	r3, [r7, #36]	; 0x24
 80052f0:	e001      	b.n	80052f6 <xQueueReceiveFromISR+0x8a>
		}
		else
		{
			xReturn = pdFAIL;
 80052f2:	2300      	movs	r3, #0
 80052f4:	627b      	str	r3, [r7, #36]	; 0x24
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005302:	4618      	mov	r0, r3
 8005304:	3728      	adds	r7, #40	; 0x28
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop

0800530c <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b08a      	sub	sp, #40	; 0x28
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	623b      	str	r3, [r7, #32]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800531a:	f3ef 8211 	mrs	r2, BASEPRI
 800531e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005322:	f383 8811 	msr	BASEPRI, r3
 8005326:	f3bf 8f6f 	isb	sy
 800532a:	f3bf 8f4f 	dsb	sy
 800532e:	617a      	str	r2, [r7, #20]
 8005330:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005332:	697b      	ldr	r3, [r7, #20]
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005334:	61fb      	str	r3, [r7, #28]
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005336:	6a3b      	ldr	r3, [r7, #32]
 8005338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00c      	beq.n	8005358 <xQueuePeekFromISR+0x4c>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800533e:	6a3b      	ldr	r3, [r7, #32]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	61bb      	str	r3, [r7, #24]
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005344:	6a38      	ldr	r0, [r7, #32]
 8005346:	6839      	ldr	r1, [r7, #0]
 8005348:	f000 f8c0 	bl	80054cc <prvCopyDataFromQueue>
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800534c:	6a3b      	ldr	r3, [r7, #32]
 800534e:	69ba      	ldr	r2, [r7, #24]
 8005350:	60da      	str	r2, [r3, #12]

			xReturn = pdPASS;
 8005352:	2301      	movs	r3, #1
 8005354:	627b      	str	r3, [r7, #36]	; 0x24
 8005356:	e001      	b.n	800535c <xQueuePeekFromISR+0x50>
		}
		else
		{
			xReturn = pdFAIL;
 8005358:	2300      	movs	r3, #0
 800535a:	627b      	str	r3, [r7, #36]	; 0x24
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005368:	4618      	mov	r0, r3
 800536a:	3728      	adds	r7, #40	; 0x28
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
 8005378:	f000 fadc 	bl	8005934 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005380:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005382:	f000 faef 	bl	8005964 <vPortExitCritical>

	return uxReturn;
 8005386:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005388:	4618      	mov	r0, r3
 800538a:	3710      	adds	r7, #16
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	60fb      	str	r3, [r7, #12]
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 800539c:	f000 faca 	bl	8005934 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
 80053ac:	f000 fada 	bl	8005964 <vPortExitCritical>

	return uxReturn;
 80053b0:	68bb      	ldr	r3, [r7, #8]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80053b2:	4618      	mov	r0, r3
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop

080053bc <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c8:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 80053ca:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80053cc:	4618      	mov	r0, r3
 80053ce:	3714      	adds	r7, #20
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	60fb      	str	r3, [r7, #12]
	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
	}
	#endif
	vPortFree( pxQueue );
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f000 fbdd 	bl	8005ba4 <vPortFree>
}
 80053ea:	3710      	adds	r7, #16
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b086      	sub	sp, #24
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80053fc:	2300      	movs	r3, #0
 80053fe:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10d      	bne.n	8005424 <prvCopyDataToQueue+0x34>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d152      	bne.n	80054b6 <prvCopyDataToQueue+0xc6>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	4618      	mov	r0, r3
 8005416:	f7ff f933 	bl	8004680 <xTaskPriorityDisinherit>
 800541a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	605a      	str	r2, [r3, #4]
 8005422:	e048      	b.n	80054b6 <prvCopyDataToQueue+0xc6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d11a      	bne.n	8005460 <prvCopyDataToQueue+0x70>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	689a      	ldr	r2, [r3, #8]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005432:	4610      	mov	r0, r2
 8005434:	68b9      	ldr	r1, [r7, #8]
 8005436:	461a      	mov	r2, r3
 8005438:	f000 fd27 	bl	8005e8a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	689a      	ldr	r2, [r3, #8]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005444:	441a      	add	r2, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	689a      	ldr	r2, [r3, #8]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	429a      	cmp	r2, r3
 8005454:	d32f      	bcc.n	80054b6 <prvCopyDataToQueue+0xc6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	609a      	str	r2, [r3, #8]
 800545e:	e02a      	b.n	80054b6 <prvCopyDataToQueue+0xc6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	68da      	ldr	r2, [r3, #12]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005468:	4610      	mov	r0, r2
 800546a:	68b9      	ldr	r1, [r7, #8]
 800546c:	461a      	mov	r2, r3
 800546e:	f000 fd0c 	bl	8005e8a <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	68da      	ldr	r2, [r3, #12]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547a:	425b      	negs	r3, r3
 800547c:	441a      	add	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	68da      	ldr	r2, [r3, #12]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	429a      	cmp	r2, r3
 800548c:	d207      	bcs.n	800549e <prvCopyDataToQueue+0xae>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	685a      	ldr	r2, [r3, #4]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005496:	425b      	negs	r3, r3
 8005498:	441a      	add	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	d108      	bne.n	80054b6 <prvCopyDataToQueue+0xc6>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d004      	beq.n	80054b6 <prvCopyDataToQueue+0xc6>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b0:	1e5a      	subs	r2, r3, #1
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	639a      	str	r2, [r3, #56]	; 0x38
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ba:	1c5a      	adds	r2, r3, #1
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80054c0:	697b      	ldr	r3, [r7, #20]
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3718      	adds	r7, #24
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop

080054cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d019      	beq.n	8005512 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	68da      	ldr	r2, [r3, #12]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e6:	441a      	add	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	68da      	ldr	r2, [r3, #12]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d303      	bcc.n	8005500 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	68da      	ldr	r2, [r3, #12]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005508:	6838      	ldr	r0, [r7, #0]
 800550a:	4611      	mov	r1, r2
 800550c:	461a      	mov	r2, r3
 800550e:	f000 fcbc 	bl	8005e8a <memcpy>
	}
}
 8005512:	3708      	adds	r7, #8
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005520:	f000 fa08 	bl	8005934 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8005524:	e014      	b.n	8005550 <prvUnlockQueue+0x38>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00a      	beq.n	8005544 <prvUnlockQueue+0x2c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	3324      	adds	r3, #36	; 0x24
 8005532:	4618      	mov	r0, r3
 8005534:	f7fe fd78 	bl	8004028 <xTaskRemoveFromEventList>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d003      	beq.n	8005546 <prvUnlockQueue+0x2e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 800553e:	f7fe fe69 	bl	8004214 <vTaskMissedYield>
 8005542:	e000      	b.n	8005546 <prvUnlockQueue+0x2e>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
 8005544:	e008      	b.n	8005558 <prvUnlockQueue+0x40>
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800554a:	1e5a      	subs	r2, r3, #1
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005554:	2b00      	cmp	r3, #0
 8005556:	dce6      	bgt.n	8005526 <prvUnlockQueue+0xe>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f04f 32ff 	mov.w	r2, #4294967295
 800555e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 8005560:	f000 fa00 	bl	8005964 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005564:	f000 f9e6 	bl	8005934 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8005568:	e014      	b.n	8005594 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00f      	beq.n	8005592 <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	3310      	adds	r3, #16
 8005576:	4618      	mov	r0, r3
 8005578:	f7fe fd56 	bl	8004028 <xTaskRemoveFromEventList>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d001      	beq.n	8005586 <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
 8005582:	f7fe fe47 	bl	8004214 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800558a:	1e5a      	subs	r2, r3, #1
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	645a      	str	r2, [r3, #68]	; 0x44
 8005590:	e000      	b.n	8005594 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
 8005592:	e003      	b.n	800559c <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005598:	2b00      	cmp	r3, #0
 800559a:	dce6      	bgt.n	800556a <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f04f 32ff 	mov.w	r2, #4294967295
 80055a2:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80055a4:	f000 f9de 	bl	8005964 <vPortExitCritical>
}
 80055a8:	3708      	adds	r7, #8
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop

080055b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80055b8:	f000 f9bc 	bl	8005934 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d102      	bne.n	80055ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80055c4:	2301      	movs	r3, #1
 80055c6:	60fb      	str	r3, [r7, #12]
 80055c8:	e001      	b.n	80055ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80055ca:	2300      	movs	r3, #0
 80055cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80055ce:	f000 f9c9 	bl	8005964 <vPortExitCritical>

	return xReturn;
 80055d2:	68fb      	ldr	r3, [r7, #12]
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3710      	adds	r7, #16
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
 80055dc:	b480      	push	{r7}
 80055de:	b085      	sub	sp, #20
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d102      	bne.n	80055f2 <xQueueIsQueueEmptyFromISR+0x16>
	{
		xReturn = pdTRUE;
 80055ec:	2301      	movs	r3, #1
 80055ee:	60fb      	str	r3, [r7, #12]
 80055f0:	e001      	b.n	80055f6 <xQueueIsQueueEmptyFromISR+0x1a>
	}
	else
	{
		xReturn = pdFALSE;
 80055f2:	2300      	movs	r3, #0
 80055f4:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 80055f6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80055f8:	4618      	mov	r0, r3
 80055fa:	3714      	adds	r7, #20
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800560c:	f000 f992 	bl	8005934 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005618:	429a      	cmp	r2, r3
 800561a:	d102      	bne.n	8005622 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800561c:	2301      	movs	r3, #1
 800561e:	60fb      	str	r3, [r7, #12]
 8005620:	e001      	b.n	8005626 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005622:	2300      	movs	r3, #0
 8005624:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005626:	f000 f99d 	bl	8005964 <vPortExitCritical>

	return xReturn;
 800562a:	68fb      	ldr	r3, [r7, #12]
}
 800562c:	4618      	mov	r0, r3
 800562e:	3710      	adds	r7, #16
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005644:	429a      	cmp	r2, r3
 8005646:	d102      	bne.n	800564e <xQueueIsQueueFullFromISR+0x1a>
	{
		xReturn = pdTRUE;
 8005648:	2301      	movs	r3, #1
 800564a:	60fb      	str	r3, [r7, #12]
 800564c:	e001      	b.n	8005652 <xQueueIsQueueFullFromISR+0x1e>
	}
	else
	{
		xReturn = pdFALSE;
 800564e:	2300      	movs	r3, #0
 8005650:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8005652:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005654:	4618      	mov	r0, r3
 8005656:	3714      	adds	r7, #20
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	60fb      	str	r3, [r7, #12]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800566e:	f000 f961 	bl	8005934 <vPortEnterCritical>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800567a:	d102      	bne.n	8005682 <vQueueWaitForMessageRestricted+0x22>
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	645a      	str	r2, [r3, #68]	; 0x44
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800568a:	d102      	bne.n	8005692 <vQueueWaitForMessageRestricted+0x32>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2200      	movs	r2, #0
 8005690:	649a      	str	r2, [r3, #72]	; 0x48
 8005692:	f000 f967 	bl	8005964 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569a:	2b00      	cmp	r3, #0
 800569c:	d105      	bne.n	80056aa <vQueueWaitForMessageRestricted+0x4a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	3324      	adds	r3, #36	; 0x24
 80056a2:	4618      	mov	r0, r3
 80056a4:	6839      	ldr	r1, [r7, #0]
 80056a6:	f7fe fc8d 	bl	8003fc4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80056aa:	68f8      	ldr	r0, [r7, #12]
 80056ac:	f7ff ff34 	bl	8005518 <prvUnlockQueue>
	}
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop

080056b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f103 0208 	add.w	r2, r3, #8
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f04f 32ff 	mov.w	r2, #4294967295
 80056d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f103 0208 	add.w	r2, r3, #8
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f103 0208 	add.w	r2, r3, #8
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80056ec:	370c      	adds	r7, #12
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop

080056f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	689a      	ldr	r2, [r3, #8]
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	609a      	str	r2, [r3, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	683a      	ldr	r2, [r7, #0]
 8005734:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	683a      	ldr	r2, [r7, #0]
 800573a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	1c5a      	adds	r2, r3, #1
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	601a      	str	r2, [r3, #0]
}
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop

08005758 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800576e:	d103      	bne.n	8005778 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	60fb      	str	r3, [r7, #12]
 8005776:	e00c      	b.n	8005792 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	3308      	adds	r3, #8
 800577c:	60fb      	str	r3, [r7, #12]
 800577e:	e002      	b.n	8005786 <vListInsert+0x2e>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	60fb      	str	r3, [r7, #12]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	429a      	cmp	r2, r3
 8005790:	d9f6      	bls.n	8005780 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	685a      	ldr	r2, [r3, #4]
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	683a      	ldr	r2, [r7, #0]
 80057a0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	683a      	ldr	r2, [r7, #0]
 80057ac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	1c5a      	adds	r2, r3, #1
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	601a      	str	r2, [r3, #0]
}
 80057be:	3714      	adds	r7, #20
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	6892      	ldr	r2, [r2, #8]
 80057de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	6852      	ldr	r2, [r2, #4]
 80057e8:	605a      	str	r2, [r3, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	685a      	ldr	r2, [r3, #4]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d103      	bne.n	80057fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	689a      	ldr	r2, [r3, #8]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	1e5a      	subs	r2, r3, #1
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
}
 8005810:	4618      	mov	r0, r3
 8005812:	3714      	adds	r7, #20
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	3b04      	subs	r3, #4
 800582c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005834:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	3b04      	subs	r3, #4
 800583a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800583c:	68ba      	ldr	r2, [r7, #8]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	3b04      	subs	r3, #4
 8005846:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005848:	4a0c      	ldr	r2, [pc, #48]	; (800587c <pxPortInitialiseStack+0x60>)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	3b14      	subs	r3, #20
 8005852:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	3b04      	subs	r3, #4
 800585e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f06f 0202 	mvn.w	r2, #2
 8005866:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	3b20      	subs	r3, #32
 800586c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800586e:	68fb      	ldr	r3, [r7, #12]
}
 8005870:	4618      	mov	r0, r3
 8005872:	3714      	adds	r7, #20
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr
 800587c:	08005881 	.word	0x08005881

08005880 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588a:	f383 8811 	msr	BASEPRI, r3
 800588e:	f3bf 8f6f 	isb	sy
 8005892:	f3bf 8f4f 	dsb	sy
 8005896:	607b      	str	r3, [r7, #4]

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	for( ;; );
 8005898:	e7fe      	b.n	8005898 <prvTaskExitError+0x18>
 800589a:	bf00      	nop

0800589c <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800589c:	4b06      	ldr	r3, [pc, #24]	; (80058b8 <pxCurrentTCBConst2>)
 800589e:	6819      	ldr	r1, [r3, #0]
 80058a0:	6808      	ldr	r0, [r1, #0]
 80058a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058a6:	f380 8809 	msr	PSP, r0
 80058aa:	f3bf 8f6f 	isb	sy
 80058ae:	f04f 0000 	mov.w	r0, #0
 80058b2:	f380 8811 	msr	BASEPRI, r0
 80058b6:	4770      	bx	lr

080058b8 <pxCurrentTCBConst2>:
 80058b8:	200000b8 	.word	0x200000b8

080058bc <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80058bc:	486b      	ldr	r0, [pc, #428]	; (8005a6c <vPortEnableVFP+0x10>)
 80058be:	6800      	ldr	r0, [r0, #0]
 80058c0:	6800      	ldr	r0, [r0, #0]
 80058c2:	f380 8808 	msr	MSP, r0
 80058c6:	b662      	cpsie	i
 80058c8:	b661      	cpsie	f
 80058ca:	f3bf 8f4f 	dsb	sy
 80058ce:	f3bf 8f6f 	isb	sy
 80058d2:	df00      	svc	0
 80058d4:	bf00      	nop
 80058d6:	bf00      	nop

080058d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80058dc:	4b0f      	ldr	r3, [pc, #60]	; (800591c <xPortStartScheduler+0x44>)
 80058de:	4a0f      	ldr	r2, [pc, #60]	; (800591c <xPortStartScheduler+0x44>)
 80058e0:	6812      	ldr	r2, [r2, #0]
 80058e2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80058e6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80058e8:	4b0c      	ldr	r3, [pc, #48]	; (800591c <xPortStartScheduler+0x44>)
 80058ea:	4a0c      	ldr	r2, [pc, #48]	; (800591c <xPortStartScheduler+0x44>)
 80058ec:	6812      	ldr	r2, [r2, #0]
 80058ee:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80058f2:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80058f4:	f000 f8a0 	bl	8005a38 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80058f8:	4b09      	ldr	r3, [pc, #36]	; (8005920 <xPortStartScheduler+0x48>)
 80058fa:	2200      	movs	r2, #0
 80058fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80058fe:	f000 f8ad 	bl	8005a5c <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005902:	4b08      	ldr	r3, [pc, #32]	; (8005924 <xPortStartScheduler+0x4c>)
 8005904:	4a07      	ldr	r2, [pc, #28]	; (8005924 <xPortStartScheduler+0x4c>)
 8005906:	6812      	ldr	r2, [r2, #0]
 8005908:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 800590c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800590e:	f7ff ffd5 	bl	80058bc <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8005912:	f7ff ffb5 	bl	8005880 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005916:	2300      	movs	r3, #0
}
 8005918:	4618      	mov	r0, r3
 800591a:	bd80      	pop	{r7, pc}
 800591c:	e000ed20 	.word	0xe000ed20
 8005920:	20000050 	.word	0x20000050
 8005924:	e000ef34 	.word	0xe000ef34

08005928 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 8005928:	b480      	push	{r7}
 800592a:	af00      	add	r7, sp, #0
	/* Not implemented in ports where there is nothing to return to.
	Artificially force an assert. */
	configASSERT( uxCriticalNesting == 1000UL );
}
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593e:	f383 8811 	msr	BASEPRI, r3
 8005942:	f3bf 8f6f 	isb	sy
 8005946:	f3bf 8f4f 	dsb	sy
 800594a:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800594c:	4b04      	ldr	r3, [pc, #16]	; (8005960 <vPortEnterCritical+0x2c>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	1c5a      	adds	r2, r3, #1
 8005952:	4b03      	ldr	r3, [pc, #12]	; (8005960 <vPortEnterCritical+0x2c>)
 8005954:	601a      	str	r2, [r3, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr
 8005960:	20000050 	.word	0x20000050

08005964 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 800596a:	4b09      	ldr	r3, [pc, #36]	; (8005990 <vPortExitCritical+0x2c>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	1e5a      	subs	r2, r3, #1
 8005970:	4b07      	ldr	r3, [pc, #28]	; (8005990 <vPortExitCritical+0x2c>)
 8005972:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8005974:	4b06      	ldr	r3, [pc, #24]	; (8005990 <vPortExitCritical+0x2c>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d104      	bne.n	8005986 <vPortExitCritical+0x22>
 800597c:	2300      	movs	r3, #0
 800597e:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr
 8005990:	20000050 	.word	0x20000050

08005994 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005994:	f3ef 8009 	mrs	r0, PSP
 8005998:	f3bf 8f6f 	isb	sy
 800599c:	4b14      	ldr	r3, [pc, #80]	; (80059f0 <pxCurrentTCBConst>)
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	f01e 0f10 	tst.w	lr, #16
 80059a4:	bf08      	it	eq
 80059a6:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80059aa:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ae:	6010      	str	r0, [r2, #0]
 80059b0:	f84d 3d04 	str.w	r3, [sp, #-4]!
 80059b4:	f04f 0050 	mov.w	r0, #80	; 0x50
 80059b8:	f380 8811 	msr	BASEPRI, r0
 80059bc:	f3bf 8f4f 	dsb	sy
 80059c0:	f3bf 8f6f 	isb	sy
 80059c4:	f7fe fa0c 	bl	8003de0 <vTaskSwitchContext>
 80059c8:	f04f 0000 	mov.w	r0, #0
 80059cc:	f380 8811 	msr	BASEPRI, r0
 80059d0:	bc08      	pop	{r3}
 80059d2:	6819      	ldr	r1, [r3, #0]
 80059d4:	6808      	ldr	r0, [r1, #0]
 80059d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059da:	f01e 0f10 	tst.w	lr, #16
 80059de:	bf08      	it	eq
 80059e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80059e4:	f380 8809 	msr	PSP, r0
 80059e8:	f3bf 8f6f 	isb	sy
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop

080059f0 <pxCurrentTCBConst>:
 80059f0:	200000b8 	.word	0x200000b8

080059f4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80059fa:	f3ef 8211 	mrs	r2, BASEPRI
 80059fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a02:	f383 8811 	msr	BASEPRI, r3
 8005a06:	f3bf 8f6f 	isb	sy
 8005a0a:	f3bf 8f4f 	dsb	sy
 8005a0e:	60fa      	str	r2, [r7, #12]
 8005a10:	60bb      	str	r3, [r7, #8]
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005a12:	f7fe f937 	bl	8003c84 <xTaskIncrementTick>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d003      	beq.n	8005a24 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a1c:	4b05      	ldr	r3, [pc, #20]	; (8005a34 <SysTick_Handler+0x40>)
 8005a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a22:	601a      	str	r2, [r3, #0]
 8005a24:	2300      	movs	r3, #0
 8005a26:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
}
 8005a2e:	3710      	adds	r7, #16
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	e000ed04 	.word	0xe000ed04

08005a38 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005a38:	b480      	push	{r7}
 8005a3a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005a3c:	4b04      	ldr	r3, [pc, #16]	; (8005a50 <vPortSetupTimerInterrupt+0x18>)
 8005a3e:	4a05      	ldr	r2, [pc, #20]	; (8005a54 <vPortSetupTimerInterrupt+0x1c>)
 8005a40:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005a42:	4b05      	ldr	r3, [pc, #20]	; (8005a58 <vPortSetupTimerInterrupt+0x20>)
 8005a44:	2207      	movs	r2, #7
 8005a46:	601a      	str	r2, [r3, #0]
}
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr
 8005a50:	e000e014 	.word	0xe000e014
 8005a54:	0002903f 	.word	0x0002903f
 8005a58:	e000e010 	.word	0xe000e010

08005a5c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005a5c:	f8df 0010 	ldr.w	r0, [pc, #16]	; 8005a70 <vPortEnableVFP+0x14>
 8005a60:	6801      	ldr	r1, [r0, #0]
 8005a62:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005a66:	6001      	str	r1, [r0, #0]
 8005a68:	4770      	bx	lr
 8005a6a:	0000      	.short	0x0000
 8005a6c:	e000ed08 	.word	0xe000ed08
 8005a70:	e000ed88 	.word	0xe000ed88

08005a74 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b086      	sub	sp, #24
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8005a80:	f7fe f83e 	bl	8003b00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005a84:	4b42      	ldr	r3, [pc, #264]	; (8005b90 <pvPortMalloc+0x11c>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d101      	bne.n	8005a90 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005a8c:	f000 f8e0 	bl	8005c50 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005a90:	4b40      	ldr	r3, [pc, #256]	; (8005b94 <pvPortMalloc+0x120>)
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4013      	ands	r3, r2
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d16d      	bne.n	8005b78 <pvPortMalloc+0x104>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00d      	beq.n	8005abe <pvPortMalloc+0x4a>
			{
				xWantedSize += xHeapStructSize;
 8005aa2:	2308      	movs	r3, #8
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f003 0307 	and.w	r3, r3, #7
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d004      	beq.n	8005abe <pvPortMalloc+0x4a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f023 0307 	bic.w	r3, r3, #7
 8005aba:	3308      	adds	r3, #8
 8005abc:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d059      	beq.n	8005b78 <pvPortMalloc+0x104>
 8005ac4:	4b34      	ldr	r3, [pc, #208]	; (8005b98 <pvPortMalloc+0x124>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d854      	bhi.n	8005b78 <pvPortMalloc+0x104>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005ace:	4b33      	ldr	r3, [pc, #204]	; (8005b9c <pvPortMalloc+0x128>)
 8005ad0:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8005ad2:	4b32      	ldr	r3, [pc, #200]	; (8005b9c <pvPortMalloc+0x128>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ad8:	e004      	b.n	8005ae4 <pvPortMalloc+0x70>
				{
					pxPreviousBlock = pxBlock;
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	617b      	str	r3, [r7, #20]
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	685a      	ldr	r2, [r3, #4]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d203      	bcs.n	8005af6 <pvPortMalloc+0x82>
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1f1      	bne.n	8005ada <pvPortMalloc+0x66>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005af6:	4b26      	ldr	r3, [pc, #152]	; (8005b90 <pvPortMalloc+0x11c>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	697a      	ldr	r2, [r7, #20]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d03b      	beq.n	8005b78 <pvPortMalloc+0x104>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	2308      	movs	r3, #8
 8005b06:	4413      	add	r3, r2
 8005b08:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	685a      	ldr	r2, [r3, #4]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	1ad2      	subs	r2, r2, r3
 8005b1a:	2308      	movs	r3, #8
 8005b1c:	005b      	lsls	r3, r3, #1
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d90f      	bls.n	8005b42 <pvPortMalloc+0xce>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4413      	add	r3, r2
 8005b28:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	685a      	ldr	r2, [r3, #4]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	1ad2      	subs	r2, r2, r3
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8005b3c:	68b8      	ldr	r0, [r7, #8]
 8005b3e:	f000 f8e9 	bl	8005d14 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b42:	4b15      	ldr	r3, [pc, #84]	; (8005b98 <pvPortMalloc+0x124>)
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	1ad2      	subs	r2, r2, r3
 8005b4c:	4b12      	ldr	r3, [pc, #72]	; (8005b98 <pvPortMalloc+0x124>)
 8005b4e:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b50:	4b11      	ldr	r3, [pc, #68]	; (8005b98 <pvPortMalloc+0x124>)
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	4b12      	ldr	r3, [pc, #72]	; (8005ba0 <pvPortMalloc+0x12c>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d203      	bcs.n	8005b64 <pvPortMalloc+0xf0>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005b5c:	4b0e      	ldr	r3, [pc, #56]	; (8005b98 <pvPortMalloc+0x124>)
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	4b0f      	ldr	r3, [pc, #60]	; (8005ba0 <pvPortMalloc+0x12c>)
 8005b62:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	685a      	ldr	r2, [r3, #4]
 8005b68:	4b0a      	ldr	r3, [pc, #40]	; (8005b94 <pvPortMalloc+0x120>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	431a      	orrs	r2, r3
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	2200      	movs	r2, #0
 8005b76:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005b78:	f7fd ffd0 	bl	8003b1c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d101      	bne.n	8005b86 <pvPortMalloc+0x112>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8005b82:	f7fb faeb 	bl	800115c <vApplicationMallocFailedHook>
		}
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
 8005b86:	68fb      	ldr	r3, [r7, #12]
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3718      	adds	r7, #24
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	2001c1bc 	.word	0x2001c1bc
 8005b94:	2001c1c8 	.word	0x2001c1c8
 8005b98:	2001c1c0 	.word	0x2001c1c0
 8005b9c:	2001c1b4 	.word	0x2001c1b4
 8005ba0:	2001c1c4 	.word	0x2001c1c4

08005ba4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d027      	beq.n	8005c06 <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005bb6:	2308      	movs	r3, #8
 8005bb8:	425b      	negs	r3, r3
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	685a      	ldr	r2, [r3, #4]
 8005bc8:	4b10      	ldr	r3, [pc, #64]	; (8005c0c <vPortFree+0x68>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4013      	ands	r3, r2
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d019      	beq.n	8005c06 <vPortFree+0x62>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d115      	bne.n	8005c06 <vPortFree+0x62>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	685a      	ldr	r2, [r3, #4]
 8005bde:	4b0b      	ldr	r3, [pc, #44]	; (8005c0c <vPortFree+0x68>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	43db      	mvns	r3, r3
 8005be4:	401a      	ands	r2, r3
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005bea:	f7fd ff89 	bl	8003b00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	685a      	ldr	r2, [r3, #4]
 8005bf2:	4b07      	ldr	r3, [pc, #28]	; (8005c10 <vPortFree+0x6c>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	441a      	add	r2, r3
 8005bf8:	4b05      	ldr	r3, [pc, #20]	; (8005c10 <vPortFree+0x6c>)
 8005bfa:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005bfc:	68b8      	ldr	r0, [r7, #8]
 8005bfe:	f000 f889 	bl	8005d14 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005c02:	f7fd ff8b 	bl	8003b1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005c06:	3710      	adds	r7, #16
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	2001c1c8 	.word	0x2001c1c8
 8005c10:	2001c1c0 	.word	0x2001c1c0

08005c14 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8005c14:	b480      	push	{r7}
 8005c16:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8005c18:	4b03      	ldr	r3, [pc, #12]	; (8005c28 <xPortGetFreeHeapSize+0x14>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	2001c1c0 	.word	0x2001c1c0

08005c2c <xPortGetMinimumEverFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	af00      	add	r7, sp, #0
	return xMinimumEverFreeBytesRemaining;
 8005c30:	4b03      	ldr	r3, [pc, #12]	; (8005c40 <xPortGetMinimumEverFreeHeapSize+0x14>)
 8005c32:	681b      	ldr	r3, [r3, #0]
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	2001c1c4 	.word	0x2001c1c4

08005c44 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
 8005c44:	b480      	push	{r7}
 8005c46:	af00      	add	r7, sp, #0
	/* This just exists to keep the linker quiet. */
}
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005c50:	b480      	push	{r7}
 8005c52:	b085      	sub	sp, #20
 8005c54:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
uint32_t ulAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005c56:	f44f 33e0 	mov.w	r3, #114688	; 0x1c000
 8005c5a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	ulAddress = ( uint32_t ) ucHeap;
 8005c5c:	4b27      	ldr	r3, [pc, #156]	; (8005cfc <prvHeapInit+0xac>)
 8005c5e:	60fb      	str	r3, [r7, #12]

	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f003 0307 	and.w	r3, r3, #7
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00c      	beq.n	8005c84 <prvHeapInit+0x34>
	{
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	3307      	adds	r3, #7
 8005c6e:	60fb      	str	r3, [r7, #12]
		ulAddress &= ~portBYTE_ALIGNMENT_MASK;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f023 0307 	bic.w	r3, r3, #7
 8005c76:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
 8005c78:	68ba      	ldr	r2, [r7, #8]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	1ad2      	subs	r2, r2, r3
 8005c7e:	4b1f      	ldr	r3, [pc, #124]	; (8005cfc <prvHeapInit+0xac>)
 8005c80:	4413      	add	r3, r2
 8005c82:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) ulAddress;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005c88:	4b1d      	ldr	r3, [pc, #116]	; (8005d00 <prvHeapInit+0xb0>)
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005c8e:	4b1c      	ldr	r3, [pc, #112]	; (8005d00 <prvHeapInit+0xb0>)
 8005c90:	2200      	movs	r2, #0
 8005c92:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	4413      	add	r3, r2
 8005c9a:	60fb      	str	r3, [r7, #12]
	ulAddress -= xHeapStructSize;
 8005c9c:	2308      	movs	r3, #8
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	60fb      	str	r3, [r7, #12]
	ulAddress &= ~portBYTE_ALIGNMENT_MASK;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f023 0307 	bic.w	r3, r3, #7
 8005caa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) ulAddress;
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	4b15      	ldr	r3, [pc, #84]	; (8005d04 <prvHeapInit+0xb4>)
 8005cb0:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8005cb2:	4b14      	ldr	r3, [pc, #80]	; (8005d04 <prvHeapInit+0xb4>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005cba:	4b12      	ldr	r3, [pc, #72]	; (8005d04 <prvHeapInit+0xb4>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	1ad2      	subs	r2, r2, r3
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005cd0:	4b0c      	ldr	r3, [pc, #48]	; (8005d04 <prvHeapInit+0xb4>)
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	685a      	ldr	r2, [r3, #4]
 8005cdc:	4b0a      	ldr	r3, [pc, #40]	; (8005d08 <prvHeapInit+0xb8>)
 8005cde:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	685a      	ldr	r2, [r3, #4]
 8005ce4:	4b09      	ldr	r3, [pc, #36]	; (8005d0c <prvHeapInit+0xbc>)
 8005ce6:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005ce8:	4b09      	ldr	r3, [pc, #36]	; (8005d10 <prvHeapInit+0xc0>)
 8005cea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005cee:	601a      	str	r2, [r3, #0]
}
 8005cf0:	3714      	adds	r7, #20
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	200001b4 	.word	0x200001b4
 8005d00:	2001c1b4 	.word	0x2001c1b4
 8005d04:	2001c1bc 	.word	0x2001c1bc
 8005d08:	2001c1c4 	.word	0x2001c1c4
 8005d0c:	2001c1c0 	.word	0x2001c1c0
 8005d10:	2001c1c8 	.word	0x2001c1c8

08005d14 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005d14:	b480      	push	{r7}
 8005d16:	b085      	sub	sp, #20
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005d1c:	4b27      	ldr	r3, [pc, #156]	; (8005dbc <prvInsertBlockIntoFreeList+0xa8>)
 8005d1e:	60fb      	str	r3, [r7, #12]
 8005d20:	e002      	b.n	8005d28 <prvInsertBlockIntoFreeList+0x14>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	60fb      	str	r3, [r7, #12]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d3f7      	bcc.n	8005d22 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	68ba      	ldr	r2, [r7, #8]
 8005d3c:	441a      	add	r2, r3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d108      	bne.n	8005d56 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	685a      	ldr	r2, [r3, #4]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	441a      	add	r2, r3
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	68ba      	ldr	r2, [r7, #8]
 8005d60:	441a      	add	r2, r3
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d118      	bne.n	8005d9c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	4b14      	ldr	r3, [pc, #80]	; (8005dc0 <prvInsertBlockIntoFreeList+0xac>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d00d      	beq.n	8005d92 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	685a      	ldr	r2, [r3, #4]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	441a      	add	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	601a      	str	r2, [r3, #0]
 8005d90:	e008      	b.n	8005da4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005d92:	4b0b      	ldr	r3, [pc, #44]	; (8005dc0 <prvInsertBlockIntoFreeList+0xac>)
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	601a      	str	r2, [r3, #0]
 8005d9a:	e003      	b.n	8005da4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d002      	beq.n	8005db2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005db2:	3714      	adds	r7, #20
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr
 8005dbc:	2001c1b4 	.word	0x2001c1b4
 8005dc0:	2001c1bc 	.word	0x2001c1bc

08005dc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005dc4:	f8df d03c 	ldr.w	sp, [pc, #60]	; 8005e04 <LoopFillZerobss+0x16>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005dc8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005dca:	f000 b804 	b.w	8005dd6 <LoopCopyDataInit>

08005dce <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005dce:	4b0e      	ldr	r3, [pc, #56]	; (8005e08 <LoopFillZerobss+0x1a>)
  ldr  r3, [r3, r1]
 8005dd0:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005dd2:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005dd4:	3104      	adds	r1, #4

08005dd6 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005dd6:	480d      	ldr	r0, [pc, #52]	; (8005e0c <LoopFillZerobss+0x1e>)
  ldr  r3, =_edata
 8005dd8:	4b0d      	ldr	r3, [pc, #52]	; (8005e10 <LoopFillZerobss+0x22>)
  adds  r2, r0, r1
 8005dda:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005ddc:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005dde:	f4ff aff6 	bcc.w	8005dce <CopyDataInit>
  ldr  r2, =_sbss
 8005de2:	4a0c      	ldr	r2, [pc, #48]	; (8005e14 <LoopFillZerobss+0x26>)
  b  LoopFillZerobss
 8005de4:	f000 b803 	b.w	8005dee <LoopFillZerobss>

08005de8 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005de8:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005dea:	f842 3b04 	str.w	r3, [r2], #4

08005dee <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005dee:	4b0a      	ldr	r3, [pc, #40]	; (8005e18 <LoopFillZerobss+0x2a>)
  cmp  r2, r3
 8005df0:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005df2:	f4ff aff9 	bcc.w	8005de8 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005df6:	f7fa fa81 	bl	80002fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005dfa:	f000 f811 	bl	8005e20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005dfe:	f7fb f80f 	bl	8000e20 <main>
  bx  lr    
 8005e02:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005e04:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8005e08:	08005f9c 	.word	0x08005f9c
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005e0c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005e10:	20000054 	.word	0x20000054
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8005e14:	20000054 	.word	0x20000054
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005e18:	2001c23c 	.word	0x2001c23c

08005e1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005e1c:	f7ff bffe 	b.w	8005e1c <ADC_IRQHandler>

08005e20 <__libc_init_array>:
 8005e20:	b570      	push	{r4, r5, r6, lr}
 8005e22:	4b0e      	ldr	r3, [pc, #56]	; (8005e5c <__libc_init_array+0x3c>)
 8005e24:	4d0e      	ldr	r5, [pc, #56]	; (8005e60 <__libc_init_array+0x40>)
 8005e26:	1aed      	subs	r5, r5, r3
 8005e28:	10ad      	asrs	r5, r5, #2
 8005e2a:	2400      	movs	r4, #0
 8005e2c:	461e      	mov	r6, r3
 8005e2e:	42ac      	cmp	r4, r5
 8005e30:	d004      	beq.n	8005e3c <__libc_init_array+0x1c>
 8005e32:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005e36:	4790      	blx	r2
 8005e38:	3401      	adds	r4, #1
 8005e3a:	e7f8      	b.n	8005e2e <__libc_init_array+0xe>
 8005e3c:	f000 f836 	bl	8005eac <_init>
 8005e40:	4d08      	ldr	r5, [pc, #32]	; (8005e64 <__libc_init_array+0x44>)
 8005e42:	4b09      	ldr	r3, [pc, #36]	; (8005e68 <__libc_init_array+0x48>)
 8005e44:	1aed      	subs	r5, r5, r3
 8005e46:	10ad      	asrs	r5, r5, #2
 8005e48:	2400      	movs	r4, #0
 8005e4a:	461e      	mov	r6, r3
 8005e4c:	42ac      	cmp	r4, r5
 8005e4e:	d004      	beq.n	8005e5a <__libc_init_array+0x3a>
 8005e50:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005e54:	4790      	blx	r2
 8005e56:	3401      	adds	r4, #1
 8005e58:	e7f8      	b.n	8005e4c <__libc_init_array+0x2c>
 8005e5a:	bd70      	pop	{r4, r5, r6, pc}
 8005e5c:	08005f94 	.word	0x08005f94
 8005e60:	08005f94 	.word	0x08005f94
 8005e64:	08005f98 	.word	0x08005f98
 8005e68:	08005f94 	.word	0x08005f94

08005e6c <memcmp>:
 8005e6c:	b530      	push	{r4, r5, lr}
 8005e6e:	2300      	movs	r3, #0
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d008      	beq.n	8005e86 <memcmp+0x1a>
 8005e74:	5cc5      	ldrb	r5, [r0, r3]
 8005e76:	3301      	adds	r3, #1
 8005e78:	18cc      	adds	r4, r1, r3
 8005e7a:	f814 4c01 	ldrb.w	r4, [r4, #-1]
 8005e7e:	42a5      	cmp	r5, r4
 8005e80:	d0f6      	beq.n	8005e70 <memcmp+0x4>
 8005e82:	1b28      	subs	r0, r5, r4
 8005e84:	bd30      	pop	{r4, r5, pc}
 8005e86:	2000      	movs	r0, #0
 8005e88:	bd30      	pop	{r4, r5, pc}

08005e8a <memcpy>:
 8005e8a:	b510      	push	{r4, lr}
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d003      	beq.n	8005e9a <memcpy+0x10>
 8005e92:	5ccc      	ldrb	r4, [r1, r3]
 8005e94:	54c4      	strb	r4, [r0, r3]
 8005e96:	3301      	adds	r3, #1
 8005e98:	e7f9      	b.n	8005e8e <memcpy+0x4>
 8005e9a:	bd10      	pop	{r4, pc}

08005e9c <memset>:
 8005e9c:	4402      	add	r2, r0
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d002      	beq.n	8005eaa <memset+0xe>
 8005ea4:	f803 1b01 	strb.w	r1, [r3], #1
 8005ea8:	e7fa      	b.n	8005ea0 <memset+0x4>
 8005eaa:	4770      	bx	lr

08005eac <_init>:
 8005eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eae:	bf00      	nop
 8005eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eb2:	bc08      	pop	{r3}
 8005eb4:	469e      	mov	lr, r3
 8005eb6:	4770      	bx	lr

08005eb8 <_fini>:
 8005eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eba:	bf00      	nop
 8005ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ebe:	bc08      	pop	{r3}
 8005ec0:	469e      	mov	lr, r3
 8005ec2:	4770      	bx	lr
